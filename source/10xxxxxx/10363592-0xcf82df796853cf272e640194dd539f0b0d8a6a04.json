{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IOneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n//\r\n//  [ msg.sender ]\r\n//       | |\r\n//       | |\r\n//       \\_/\r\n// +---------------+ ________________________________\r\n// | OneSplitAudit | _______________________________  \\\r\n// +---------------+                                 \\ \\\r\n//       | |                      ______________      | | (staticcall)\r\n//       | |                    /  ____________  \\    | |\r\n//       | | (call)            / /              \\ \\   | |\r\n//       | |                  / /               | |   | |\r\n//       \\_/                  | |               \\_/   \\_/\r\n// +--------------+           | |           +----------------------+\r\n// | OneSplitWrap |           | |           |   OneSplitViewWrap   |\r\n// +--------------+           | |           +----------------------+\r\n//       | |                  | |                     | |\r\n//       | | (delegatecall)   | | (staticcall)        | | (staticcall)\r\n//       \\_/                  | |                     \\_/\r\n// +--------------+           | |             +------------------+\r\n// |   OneSplit   |           | |             |   OneSplitView   |\r\n// +--------------+           | |             +------------------+\r\n//       | |                  / /\r\n//        \\ \\________________/ /\r\n//         \\__________________/\r\n//\r\n\r\n\r\ncontract IOneSplitConsts {\r\n    // flags = FLAG_DISABLE_UNISWAP + FLAG_DISABLE_KYBER + ...\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP = 0x01;\r\n    uint256 internal constant FLAG_DISABLE_KYBER = 0x02;\r\n    uint256 internal constant FLAG_DISABLE_BANCOR = 0x04;\r\n    uint256 internal constant FLAG_DISABLE_OASIS = 0x08;\r\n    uint256 internal constant FLAG_DISABLE_COMPOUND = 0x10;\r\n    uint256 internal constant FLAG_DISABLE_FULCRUM = 0x20;\r\n    uint256 internal constant FLAG_DISABLE_CHAI = 0x40;\r\n    uint256 internal constant FLAG_DISABLE_AAVE = 0x80;\r\n    uint256 internal constant FLAG_DISABLE_SMART_TOKEN = 0x100;\r\n    uint256 internal constant FLAG_ENABLE_MULTI_PATH_ETH = 0x200; // Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_BDAI = 0x400;\r\n    uint256 internal constant FLAG_DISABLE_IEARN = 0x800;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_COMPOUND = 0x1000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_USDT = 0x2000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_Y = 0x4000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_BINANCE = 0x8000;\r\n    uint256 internal constant FLAG_ENABLE_MULTI_PATH_DAI = 0x10000; // Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_MULTI_PATH_USDC = 0x20000; // Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_CURVE_SYNTHETIX = 0x40000;\r\n    uint256 internal constant FLAG_DISABLE_WETH = 0x80000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_COMPOUND = 0x100000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_CHAI = 0x200000; // Works only when ETH<>DAI or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_AAVE = 0x400000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_IDLE = 0x800000;\r\n    uint256 internal constant FLAG_DISABLE_MOONISWAP = 0x1000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2 = 0x2000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ETH = 0x4000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_DAI = 0x8000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_USDC = 0x10000000;\r\n    uint256 internal constant FLAG_DISABLE_ALL_SPLIT_SOURCES = 0x20000000;\r\n    uint256 internal constant FLAG_DISABLE_ALL_WRAP_SOURCES = 0x40000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_PAX = 0x80000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_RENBTC = 0x100000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_TBTC = 0x200000000;\r\n    uint256 internal constant FLAG_ENABLE_MULTI_PATH_USDT = 0x400000000; // Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_MULTI_PATH_WBTC = 0x800000000; // Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_MULTI_PATH_TBTC = 0x1000000000; // Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_MULTI_PATH_RENBTC = 0x2000000000; // Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_DFORCE_SWAP = 0x4000000000;\r\n    uint256 internal constant FLAG_DISABLE_SHELL = 0x8000000000;\r\n    uint256 internal constant FLAG_ENABLE_CHI_BURN = 0x10000000000;\r\n    uint256 internal constant FLAG_DISABLE_MSTABLE_MUSD = 0x20000000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_SBTC = 0x40000000000;\r\n    uint256 internal constant FLAG_DISABLE_DMM = 0x80000000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_ALL = 0x100000000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_ALL = 0x200000000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ALL = 0x400000000000;\r\n    uint256 internal constant FLAG_DISABLE_SPLIT_RECALCULATION = 0x800000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_ALL = 0x1000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_1 = 0x2000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_2 = 0x4000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_3 = 0x8000000000000;\r\n    uint256 internal constant FLAG_ENABLE_KYBER_UNISWAP_RESERVE = 0x1000000000000; // Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_KYBER_OASIS_RESERVE = 0x2000000000000; // Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_KYBER_BANCOR_RESERVE = 0x4000000000000; // Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_REFERRAL_GAS_SPONSORSHIP = 0x8000000000000; // Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_MULTI_PATH_COMP = 0x10000000000000; // Turned off by default\r\n}\r\n\r\n\r\ncontract IOneSplit is IOneSplitConsts {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    )\r\n        public\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapExchange {\r\n    function getEthToTokenInputPrice(uint256 ethSold) external view returns (uint256 tokensBought);\r\n\r\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns (uint256 ethBought);\r\n\r\n    function ethToTokenSwapInput(uint256 minTokens, uint256 deadline)\r\n        external\r\n        payable\r\n        returns (uint256 tokensBought);\r\n\r\n    function tokenToEthSwapInput(uint256 tokensSold, uint256 minEth, uint256 deadline)\r\n        external\r\n        returns (uint256 ethBought);\r\n\r\n    function tokenToTokenSwapInput(\r\n        uint256 tokensSold,\r\n        uint256 minTokensBought,\r\n        uint256 minEthBought,\r\n        uint256 deadline,\r\n        address tokenAddr\r\n    ) external returns (uint256 tokensBought);\r\n}\r\n\r\n// File: contracts/interface/IUniswapFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapFactory {\r\n    function getExchange(IERC20 token) external view returns (IUniswapExchange exchange);\r\n}\r\n\r\n// File: contracts/interface/IKyberNetworkContract.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IKyberNetworkContract {\r\n    function searchBestRate(IERC20 src, IERC20 dest, uint256 srcAmount, bool usePermissionless)\r\n        external\r\n        view\r\n        returns (address reserve, uint256 rate);\r\n}\r\n\r\n// File: contracts/interface/IKyberNetworkProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IKyberNetworkProxy {\r\n    function getExpectedRate(IERC20 src, IERC20 dest, uint256 srcQty)\r\n        external\r\n        view\r\n        returns (uint256 expectedRate, uint256 slippageRate);\r\n\r\n    function tradeWithHint(\r\n        IERC20 src,\r\n        uint256 srcAmount,\r\n        IERC20 dest,\r\n        address destAddress,\r\n        uint256 maxDestAmount,\r\n        uint256 minConversionRate,\r\n        address walletId,\r\n        bytes calldata hint\r\n    ) external payable returns (uint256);\r\n\r\n    function kyberNetworkContract() external view returns (IKyberNetworkContract);\r\n\r\n    // TODO: Limit usage by tx.gasPrice\r\n    // function maxGasPrice() external view returns (uint256);\r\n\r\n    // TODO: Limit usage by user cap\r\n    // function getUserCapInWei(address user) external view returns (uint256);\r\n    // function getUserCapInTokenWei(address user, IERC20 token) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IKyberUniswapReserve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IKyberUniswapReserve {\r\n    function uniswapFactory() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IKyberOasisReserve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IKyberOasisReserve {\r\n    function otc() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IKyberBancorReserve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IKyberBancorReserve {\r\n    function bancorEth() public view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IBancorNetwork.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IBancorNetwork {\r\n    function getReturnByPath(address[] calldata path, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256 returnAmount, uint256 conversionFee);\r\n\r\n    function claimAndConvert(address[] calldata path, uint256 amount, uint256 minReturn)\r\n        external\r\n        returns (uint256);\r\n\r\n    function convert(address[] calldata path, uint256 amount, uint256 minReturn)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IBancorContractRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IBancorContractRegistry {\r\n    function addressOf(bytes32 contractName) external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IBancorConverterRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IBancorConverterRegistry {\r\n\r\n    function getConvertibleTokenSmartTokenCount(IERC20 convertibleToken)\r\n        external view returns(uint256);\r\n\r\n    function getConvertibleTokenSmartTokens(IERC20 convertibleToken)\r\n        external view returns(address[] memory);\r\n\r\n    function getConvertibleTokenSmartToken(IERC20 convertibleToken, uint256 index)\r\n        external view returns(address);\r\n\r\n    function isConvertibleTokenSmartToken(IERC20 convertibleToken, address value)\r\n        external view returns(bool);\r\n}\r\n\r\n// File: contracts/interface/IBancorEtherToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IBancorEtherToken is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interface/IOasisExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IOasisExchange {\r\n    function getBuyAmount(IERC20 buyGem, IERC20 payGem, uint256 payAmt)\r\n        external\r\n        view\r\n        returns (uint256 fillAmt);\r\n\r\n    function sellAllAmount(IERC20 payGem, uint256 payAmt, IERC20 buyGem, uint256 minFillAmount)\r\n        external\r\n        returns (uint256 fillAmt);\r\n}\r\n\r\n// File: contracts/interface/IWETH.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interface/ICurve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface ICurve {\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns(uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns(uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 minDy) external;\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external;\r\n}\r\n\r\n// File: contracts/interface/IChai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IPot {\r\n    function dsr() external view returns (uint256);\r\n\r\n    function chi() external view returns (uint256);\r\n\r\n    function rho() external view returns (uint256);\r\n\r\n    function drip() external returns (uint256);\r\n\r\n    function join(uint256) external;\r\n\r\n    function exit(uint256) external;\r\n}\r\n\r\n\r\ncontract IChai is IERC20 {\r\n    function POT() public view returns (IPot);\r\n\r\n    function join(address dst, uint256 wad) external;\r\n\r\n    function exit(address src, uint256 wad) external;\r\n}\r\n\r\n\r\nlibrary ChaiHelper {\r\n    IPot private constant POT = IPot(0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7);\r\n    uint256 private constant RAY = 10**27;\r\n\r\n    function _mul(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function _rmul(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        // always rounds down\r\n        z = _mul(x, y) / RAY;\r\n    }\r\n\r\n    function _rdiv(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        // always rounds down\r\n        z = _mul(x, RAY) / y;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n, uint256 base) private pure returns (uint256 z) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch x\r\n                case 0 {\r\n                    switch n\r\n                        case 0 {\r\n                            z := base\r\n                        }\r\n                        default {\r\n                            z := 0\r\n                        }\r\n                }\r\n                default {\r\n                    switch mod(n, 2)\r\n                        case 0 {\r\n                            z := base\r\n                        }\r\n                        default {\r\n                            z := x\r\n                        }\r\n                    let half := div(base, 2) // for rounding.\r\n                    for {\r\n                        n := div(n, 2)\r\n                    } n {\r\n                        n := div(n, 2)\r\n                    } {\r\n                        let xx := mul(x, x)\r\n                        if iszero(eq(div(xx, x), x)) {\r\n                            revert(0, 0)\r\n                        }\r\n                        let xxRound := add(xx, half)\r\n                        if lt(xxRound, xx) {\r\n                            revert(0, 0)\r\n                        }\r\n                        x := div(xxRound, base)\r\n                        if mod(n, 2) {\r\n                            let zx := mul(z, x)\r\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\r\n                                revert(0, 0)\r\n                            }\r\n                            let zxRound := add(zx, half)\r\n                            if lt(zxRound, zx) {\r\n                                revert(0, 0)\r\n                            }\r\n                            z := div(zxRound, base)\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    function potDrip() private view returns (uint256) {\r\n        return _rmul(rpow(POT.dsr(), now - POT.rho(), RAY), POT.chi());\r\n    }\r\n\r\n    function chaiPrice(IChai chai) internal view returns(uint256) {\r\n        return chaiToDai(chai, 1e18);\r\n    }\r\n\r\n    function daiToChai(\r\n        IChai /*chai*/,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        uint256 chi = (now > POT.rho()) ? potDrip() : POT.chi();\r\n        return _rdiv(amount, chi);\r\n    }\r\n\r\n    function chaiToDai(\r\n        IChai /*chai*/,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        uint256 chi = (now > POT.rho()) ? potDrip() : POT.chi();\r\n        return _rmul(chi, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/ICompound.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract ICompound {\r\n    function markets(address cToken)\r\n        external\r\n        view\r\n        returns (bool isListed, uint256 collateralFactorMantissa);\r\n}\r\n\r\n\r\ncontract ICompoundToken is IERC20 {\r\n    function underlying() external view returns (address);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n}\r\n\r\n\r\ncontract ICompoundEther is IERC20 {\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IAaveToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IAaveToken is IERC20 {\r\n    function underlyingAssetAddress() external view returns (IERC20);\r\n\r\n    function redeem(uint256 amount) external;\r\n}\r\n\r\n\r\ninterface IAaveLendingPool {\r\n    function core() external view returns (address);\r\n\r\n    function deposit(IERC20 token, uint256 amount, uint16 refCode) external payable;\r\n}\r\n\r\n// File: contracts/interface/IMooniswap.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IMooniswapRegistry {\r\n    function target() external view returns(IMooniswap);\r\n}\r\n\r\n\r\ninterface IMooniswap {\r\n    function getReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    )\r\n        external\r\n        view\r\n        returns(uint256 returnAmount);\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/UniversalERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            address(uint160(to)).transfer(amount);\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            require(from == msg.sender && msg.value >= amount, \"Wrong useage of ETH.universalTransferFrom()\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            if (msg.value > amount) {\r\n                // Return remainder if exist\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n    }\r\n\r\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\r\n        if (!isETH(token)) {\r\n            if (amount == 0) {\r\n                token.safeApprove(to, 0);\r\n                return;\r\n            }\r\n\r\n            uint256 allowance = token.allowance(address(this), to);\r\n            if (allowance < amount) {\r\n                if (allowance > 0) {\r\n                    token.safeApprove(to, 0);\r\n                }\r\n                token.safeApprove(to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\r\n\r\n        if (isETH(token)) {\r\n            return 18;\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(10000)(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        if (!success || data.length == 0) {\r\n            (success, data) = address(token).staticcall.gas(10000)(\r\n                abi.encodeWithSignature(\"DECIMALS()\")\r\n            );\r\n        }\r\n\r\n        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;\r\n    }\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\r\n    }\r\n\r\n    function notExist(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(-1));\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapV2Exchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Exchange {\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\n\r\nlibrary UniswapV2ExchangeLib {\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function getReturn(\r\n        IUniswapV2Exchange exchange,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint amountIn\r\n    ) internal view returns (uint256) {\r\n        uint256 reserveIn = fromToken.universalBalanceOf(address(exchange));\r\n        uint256 reserveOut = destToken.universalBalanceOf(address(exchange));\r\n\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        return (denominator == 0) ? 0 : numerator.div(denominator);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Exchange pair);\r\n}\r\n\r\n// File: contracts/interface/IDForceSwap.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IDForceSwap {\r\n    function getAmountByInput(IERC20 input, IERC20 output, uint256 amount) external view returns(uint256);\r\n    function swap(IERC20 input, IERC20 output, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interface/IShell.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IShell {\r\n    function viewOriginTrade(\r\n        address origin,\r\n        address target,\r\n        uint256 originAmount\r\n    ) external view returns (uint256);\r\n\r\n    function swapByOrigin(\r\n        address origin,\r\n        address target,\r\n        uint256 originAmount,\r\n        uint256 minTargetAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IMStable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IMStable is IERC20 {\r\n    function getSwapOutput(\r\n        IERC20 _input,\r\n        IERC20 _output,\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        view\r\n        returns (bool, string memory, uint256 output);\r\n\r\n    function swap(\r\n        IERC20 _input,\r\n        IERC20 _output,\r\n        uint256 _quantity,\r\n        address _recipient\r\n    )\r\n        external\r\n        returns (uint256 output);\r\n\r\n    function redeem(\r\n        IERC20 _basset,\r\n        uint256 _bassetQuantity\r\n    )\r\n        external\r\n        returns (uint256 massetRedeemed);\r\n}\r\n\r\ninterface IMassetRedemptionValidator {\r\n    function getRedeemValidity(\r\n        IERC20 _mAsset,\r\n        uint256 _mAssetQuantity,\r\n        IERC20 _outputBasset\r\n    )\r\n        external\r\n        view\r\n        returns (bool, string memory, uint256 output);\r\n}\r\n\r\n// File: contracts/interface/IBalancerRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IBalancerPool {\r\n    function swapExactAmountIn(\r\n        IERC20 tokenIn,\r\n        uint256 tokenAmountIn,\r\n        IERC20 tokenOut,\r\n        uint256 minAmountOut,\r\n        uint256 maxPrice\r\n    )\r\n        external\r\n        returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IBalancerRegistry {\r\n    event PoolAdded(\r\n        address indexed pool\r\n    );\r\n    event PoolTokenPairAdded(\r\n        address indexed pool,\r\n        address indexed fromToken,\r\n        address indexed destToken\r\n    );\r\n    event IndicesUpdated(\r\n        address indexed fromToken,\r\n        address indexed destToken,\r\n        bytes32 oldIndices,\r\n        bytes32 newIndices\r\n    );\r\n\r\n    // Get info about pool pair for 1 SLOAD\r\n    function getPairInfo(address pool, address fromToken, address destToken)\r\n        external view returns(uint256 weight1, uint256 weight2, uint256 swapFee);\r\n\r\n    // Pools\r\n    function checkAddedPools(address pool)\r\n        external view returns(bool);\r\n    function getAddedPoolsLength()\r\n        external view returns(uint256);\r\n    function getAddedPools()\r\n        external view returns(address[] memory);\r\n    function getAddedPoolsWithLimit(uint256 offset, uint256 limit)\r\n        external view returns(address[] memory result);\r\n\r\n    // Tokens\r\n    function getAllTokensLength()\r\n        external view returns(uint256);\r\n    function getAllTokens()\r\n        external view returns(address[] memory);\r\n    function getAllTokensWithLimit(uint256 offset, uint256 limit)\r\n        external view returns(address[] memory result);\r\n\r\n    // Pairs\r\n    function getPoolsLength(address fromToken, address destToken)\r\n        external view returns(uint256);\r\n    function getPools(address fromToken, address destToken)\r\n        external view returns(address[] memory);\r\n    function getPoolsWithLimit(address fromToken, address destToken, uint256 offset, uint256 limit)\r\n        external view returns(address[] memory result);\r\n    function getBestPools(address fromToken, address destToken)\r\n        external view returns(address[] memory pools);\r\n    function getBestPoolsWithLimit(address fromToken, address destToken, uint256 limit)\r\n        external view returns(address[] memory pools);\r\n\r\n    // Get swap rates\r\n    function getPoolReturn(address pool, address fromToken, address destToken, uint256 amount)\r\n        external view returns(uint256);\r\n    function getPoolReturns(address pool, address fromToken, address destToken, uint256[] calldata amounts)\r\n        external view returns(uint256[] memory result);\r\n\r\n    // Add and update registry\r\n    function addPool(address pool) external returns(uint256 listed);\r\n    function addPools(address[] calldata pools) external returns(uint256[] memory listed);\r\n    function updatedIndices(address[] calldata tokens, uint256 lengthLimit) external;\r\n}\r\n\r\n// File: contracts/OneSplitBase.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import \"./interface/IBancorNetworkPathFinder.sol\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IOneSplitView is IOneSplitConsts {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n}\r\n\r\n\r\nlibrary DisableFlags {\r\n    function check(uint256 flags, uint256 flag) internal pure returns(bool) {\r\n        return (flags & flag) != 0;\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitRoot is IOneSplitView {\r\n    using SafeMath for uint256;\r\n    using DisableFlags for uint256;\r\n\r\n    using UniversalERC20 for IERC20;\r\n    using UniversalERC20 for IWETH;\r\n    using UniswapV2ExchangeLib for IUniswapV2Exchange;\r\n    using ChaiHelper for IChai;\r\n\r\n    uint256 constant internal DEXES_COUNT = 27;\r\n    IERC20 constant internal ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    IBancorEtherToken constant internal bancorEtherToken = IBancorEtherToken(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\r\n    IWETH constant internal weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IChai constant internal chai = IChai(0x06AF07097C9Eeb7fD685c692751D5C66dB49c215);\r\n    IERC20 constant internal dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IERC20 constant internal bnt = IERC20(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\r\n    IERC20 constant internal usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    IERC20 constant internal usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    IERC20 constant internal tusd = IERC20(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n    IERC20 constant internal busd = IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53);\r\n    IERC20 constant internal susd = IERC20(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n    IERC20 constant internal pax = IERC20(0x8E870D67F660D95d5be530380D0eC0bd388289E1);\r\n    IERC20 constant internal renbtc = IERC20(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\r\n    IERC20 constant internal wbtc = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n    IERC20 constant internal tbtc = IERC20(0x1bBE271d15Bb64dF0bc6CD28Df9Ff322F2eBD847);\r\n    IERC20 constant internal hbtc = IERC20(0x0316EB71485b0Ab14103307bf65a021042c6d380);\r\n    IERC20 constant internal sbtc = IERC20(0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6);\r\n    IERC20 constant internal comp = IERC20(0xc00e94Cb662C3520282E6f5717214004A7f26888);\r\n\r\n    IKyberNetworkProxy constant internal kyberNetworkProxy = IKyberNetworkProxy(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    IUniswapFactory constant internal uniswapFactory = IUniswapFactory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\r\n    IBancorContractRegistry constant internal bancorContractRegistry = IBancorContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\r\n    //IBancorNetworkPathFinder constant internal bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\r\n    //IBancorConverterRegistry constant internal bancorConverterRegistry = IBancorConverterRegistry(0xf6E2D7F616B67E46D708e4410746E9AAb3a4C518);\r\n    IOasisExchange constant internal oasisExchange = IOasisExchange(0x794e6e91555438aFc3ccF1c5076A74F42133d08D);\r\n    ICurve constant internal curveCompound = ICurve(0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56);\r\n    ICurve constant internal curveUSDT = ICurve(0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C);\r\n    ICurve constant internal curveY = ICurve(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\r\n    ICurve constant internal curveBinance = ICurve(0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27);\r\n    ICurve constant internal curveSynthetix = ICurve(0xA5407eAE9Ba41422680e2e00537571bcC53efBfD);\r\n    ICurve constant internal curvePAX = ICurve(0x06364f10B501e868329afBc005b3492902d6C763);\r\n    ICurve constant internal curveRenBTC = ICurve(0x93054188d876f558f4a66B2EF1d97d16eDf0895B);\r\n    ICurve constant internal curveTBTC = ICurve(0x9726e9314eF1b96E45f40056bEd61A088897313E);\r\n    ICurve constant internal curveSBTC = ICurve(0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714);\r\n    IShell constant internal shell = IShell(0xA8253a440Be331dC4a7395B73948cCa6F19Dc97D);\r\n    IAaveLendingPool constant internal aave = IAaveLendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n    ICompound constant internal compound = ICompound(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n    ICompoundEther constant internal cETH = ICompoundEther(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n    IMooniswapRegistry constant internal mooniswapRegistry = IMooniswapRegistry(0x7079E8517594e5b21d2B9a0D17cb33F5FE2bca70);\r\n    IUniswapV2Factory constant internal uniswapV2 = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IDForceSwap constant internal dforceSwap = IDForceSwap(0x03eF3f37856bD08eb47E2dE7ABc4Ddd2c19B60F2);\r\n    IMStable constant internal musd = IMStable(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);\r\n    IMassetRedemptionValidator constant internal musd_helper = IMassetRedemptionValidator(0x4c5e03065bC52cCe84F3ac94DF14bbAC27eac89b);\r\n    IBalancerRegistry constant internal balancerRegistry = IBalancerRegistry(0x65e67cbc342712DF67494ACEfc06fe951EE93982);\r\n\r\n    int256 internal constant VERY_NEGATIVE_VALUE = -1e72;\r\n\r\n    function _findBestDistribution(\r\n        uint256 s,                // parts\r\n        int256[][] memory amounts // exchangesReturns\r\n    )\r\n        internal\r\n        pure\r\n        returns(\r\n            int256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        uint256 n = amounts.length;\r\n\r\n        int256[][] memory answer = new int256[][](n); // int[n][s+1]\r\n        uint256[][] memory parent = new uint256[][](n); // int[n][s+1]\r\n\r\n        for (uint i = 0; i < n; i++) {\r\n            answer[i] = new int256[](s + 1);\r\n            parent[i] = new uint256[](s + 1);\r\n        }\r\n\r\n        for (uint j = 0; j <= s; j++) {\r\n            answer[0][j] = amounts[0][j];\r\n            for (uint i = 1; i < n; i++) {\r\n                answer[i][j] = -1e72;\r\n            }\r\n            parent[0][j] = 0;\r\n        }\r\n\r\n        for (uint i = 1; i < n; i++) {\r\n            for (uint j = 0; j <= s; j++) {\r\n                answer[i][j] = answer[i - 1][j];\r\n                parent[i][j] = j;\r\n\r\n                for (uint k = 1; k <= j; k++) {\r\n                    if (answer[i - 1][j - k] + amounts[i][k] > answer[i][j]) {\r\n                        answer[i][j] = answer[i - 1][j - k] + amounts[i][k];\r\n                        parent[i][j] = j - k;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        distribution = new uint256[](DEXES_COUNT);\r\n\r\n        uint256 partsLeft = s;\r\n        for (uint curExchange = n - 1; partsLeft > 0; curExchange--) {\r\n            distribution[curExchange] = partsLeft - parent[curExchange][partsLeft];\r\n            partsLeft = parent[curExchange][partsLeft];\r\n        }\r\n\r\n        returnAmount = (answer[n - 1][s] == VERY_NEGATIVE_VALUE) ? 0 : answer[n - 1][s];\r\n    }\r\n\r\n    function _buildBancorPath(\r\n        IERC20 fromToken,\r\n        IERC20 destToken\r\n    ) internal view returns(address[] memory path) {\r\n        if (fromToken == destToken) {\r\n            return new address[](0);\r\n        }\r\n\r\n        if (fromToken.isETH()) {\r\n            fromToken = ETH_ADDRESS;\r\n        }\r\n        if (destToken.isETH()) {\r\n            destToken = ETH_ADDRESS;\r\n        }\r\n\r\n        if (fromToken == bnt || destToken == bnt) {\r\n            path = new address[](3);\r\n        } else {\r\n            path = new address[](5);\r\n        }\r\n\r\n        address fromConverter;\r\n        address toConverter;\r\n\r\n        IBancorConverterRegistry bancorConverterRegistry = IBancorConverterRegistry(bancorContractRegistry.addressOf(\"BancorConverterRegistry\"));\r\n\r\n        if (fromToken != bnt) {\r\n            (bool success, bytes memory data) = address(bancorConverterRegistry).staticcall.gas(100000)(abi.encodeWithSelector(\r\n                bancorConverterRegistry.getConvertibleTokenSmartToken.selector,\r\n                fromToken.isETH() ? ETH_ADDRESS : fromToken,\r\n                0\r\n            ));\r\n            if (!success) {\r\n                return new address[](0);\r\n            }\r\n\r\n            fromConverter = abi.decode(data, (address));\r\n            if (fromConverter == address(0)) {\r\n                return new address[](0);\r\n            }\r\n        }\r\n\r\n        if (destToken != bnt) {\r\n            (bool success, bytes memory data) = address(bancorConverterRegistry).staticcall.gas(100000)(abi.encodeWithSelector(\r\n                bancorConverterRegistry.getConvertibleTokenSmartToken.selector,\r\n                destToken.isETH() ? ETH_ADDRESS : destToken,\r\n                0\r\n            ));\r\n            if (!success) {\r\n                return new address[](0);\r\n            }\r\n\r\n            toConverter = abi.decode(data, (address));\r\n            if (toConverter == address(0)) {\r\n                return new address[](0);\r\n            }\r\n        }\r\n\r\n        if (destToken == bnt) {\r\n            path[0] = address(fromToken);\r\n            path[1] = fromConverter;\r\n            path[2] = address(bnt);\r\n            return path;\r\n        }\r\n\r\n        if (fromToken == bnt) {\r\n            path[0] = address(bnt);\r\n            path[1] = toConverter;\r\n            path[2] = address(destToken);\r\n            return path;\r\n        }\r\n\r\n        path[0] = address(fromToken);\r\n        path[1] = fromConverter;\r\n        path[2] = address(bnt);\r\n        path[3] = toConverter;\r\n        path[4] = address(destToken);\r\n        return path;\r\n    }\r\n\r\n    function _getCompoundToken(IERC20 token) internal pure returns(ICompoundToken) {\r\n        if (token.isETH()) { // ETH\r\n            return ICompoundToken(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n        }\r\n        if (token == IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F)) { // DAI\r\n            return ICompoundToken(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\r\n        }\r\n        if (token == IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF)) { // BAT\r\n            return ICompoundToken(0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E);\r\n        }\r\n        if (token == IERC20(0x1985365e9f78359a9B6AD760e32412f4a445E862)) { // REP\r\n            return ICompoundToken(0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1);\r\n        }\r\n        if (token == IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) { // USDC\r\n            return ICompoundToken(0x39AA39c021dfbaE8faC545936693aC917d5E7563);\r\n        }\r\n        if (token == IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)) { // WBTC\r\n            return ICompoundToken(0xC11b1268C1A384e55C48c2391d8d480264A3A7F4);\r\n        }\r\n        if (token == IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498)) { // ZRX\r\n            return ICompoundToken(0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407);\r\n        }\r\n        if (token == IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7)) { // USDT\r\n            return ICompoundToken(0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9);\r\n        }\r\n\r\n        return ICompoundToken(0);\r\n    }\r\n\r\n    function _getAaveToken(IERC20 token) internal pure returns(IAaveToken) {\r\n        if (token.isETH()) { // ETH\r\n            return IAaveToken(0x3a3A65aAb0dd2A17E3F1947bA16138cd37d08c04);\r\n        }\r\n        if (token == IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F)) { // DAI\r\n            return IAaveToken(0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d);\r\n        }\r\n        if (token == IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) { // USDC\r\n            return IAaveToken(0x9bA00D6856a4eDF4665BcA2C2309936572473B7E);\r\n        }\r\n        if (token == IERC20(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51)) { // SUSD\r\n            return IAaveToken(0x625aE63000f46200499120B906716420bd059240);\r\n        }\r\n        if (token == IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53)) { // BUSD\r\n            return IAaveToken(0x6Ee0f7BB50a54AB5253dA0667B0Dc2ee526C30a8);\r\n        }\r\n        if (token == IERC20(0x0000000000085d4780B73119b644AE5ecd22b376)) { // TUSD\r\n            return IAaveToken(0x4DA9b813057D04BAef4e5800E36083717b4a0341);\r\n        }\r\n        if (token == IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7)) { // USDT\r\n            return IAaveToken(0x71fc860F7D3A592A4a98740e39dB31d25db65ae8);\r\n        }\r\n        if (token == IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF)) { // BAT\r\n            return IAaveToken(0xE1BA0FB44CCb0D11b80F92f4f8Ed94CA3fF51D00);\r\n        }\r\n        if (token == IERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200)) { // KNC\r\n            return IAaveToken(0x9D91BE44C06d373a8a226E1f3b146956083803eB);\r\n        }\r\n        if (token == IERC20(0x80fB784B7eD66730e8b1DBd9820aFD29931aab03)) { // LEND\r\n            return IAaveToken(0x7D2D3688Df45Ce7C552E19c27e007673da9204B8);\r\n        }\r\n        if (token == IERC20(0x514910771AF9Ca656af840dff83E8264EcF986CA)) { // LINK\r\n            return IAaveToken(0xA64BD6C70Cb9051F6A9ba1F163Fdc07E0DfB5F84);\r\n        }\r\n        if (token == IERC20(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942)) { // MANA\r\n            return IAaveToken(0x6FCE4A401B6B80ACe52baAefE4421Bd188e76F6f);\r\n        }\r\n        if (token == IERC20(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2)) { // MKR\r\n            return IAaveToken(0x7deB5e830be29F91E298ba5FF1356BB7f8146998);\r\n        }\r\n        if (token == IERC20(0x1985365e9f78359a9B6AD760e32412f4a445E862)) { // REP\r\n            return IAaveToken(0x71010A9D003445aC60C4e6A7017c1E89A477B438);\r\n        }\r\n        if (token == IERC20(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F)) { // SNX\r\n            return IAaveToken(0x328C4c80BC7aCa0834Db37e6600A6c49E12Da4DE);\r\n        }\r\n        if (token == IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)) { // WBTC\r\n            return IAaveToken(0xFC4B8ED459e00e5400be803A9BB3954234FD50e3);\r\n        }\r\n        if (token == IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498)) { // ZRX\r\n            return IAaveToken(0x6Fb0855c404E09c47C3fBCA25f08d4E41f9F062f);\r\n        }\r\n\r\n        return IAaveToken(0);\r\n    }\r\n\r\n    function _scaleDestTokenEthPriceTimesGasPrice(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    ) internal view returns(uint256) {\r\n        if (fromToken == destToken) {\r\n            return destTokenEthPriceTimesGasPrice;\r\n        }\r\n\r\n        uint256 mul = _cheapGetPrice(ETH_ADDRESS, destToken, 1e16);\r\n        uint256 div = _cheapGetPrice(ETH_ADDRESS, fromToken, 1e16);\r\n        if (div > 0) {\r\n            return destTokenEthPriceTimesGasPrice.mul(mul).div(div);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function _cheapGetPrice(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal view returns(uint256 returnAmount) {\r\n        (returnAmount,,) = this.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            1,\r\n            FLAG_DISABLE_SPLIT_RECALCULATION |\r\n            FLAG_DISABLE_ALL_SPLIT_SOURCES |\r\n            FLAG_DISABLE_UNISWAP_V2_ALL |\r\n            FLAG_DISABLE_UNISWAP,\r\n            0\r\n        );\r\n    }\r\n\r\n    function _linearInterpolation(\r\n        uint256 value,\r\n        uint256 parts\r\n    ) internal pure returns(uint256[] memory rets) {\r\n        rets = new uint256[](parts);\r\n        for (uint i = 0; i < parts; i++) {\r\n            rets[i] = value.mul(i + 1).div(parts);\r\n        }\r\n    }\r\n\r\n    function _tokensEqual(IERC20 tokenA, IERC20 tokenB) internal pure returns(bool) {\r\n        return ((tokenA.isETH() && tokenB.isETH()) || tokenA == tokenB);\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitViewWrapBase is IOneSplitView, OneSplitRoot {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = this.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _getExpectedReturnRespectingGasFloor(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _getExpectedReturnRespectingGasFloor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        internal\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n}\r\n\r\n\r\ncontract OneSplitView is IOneSplitView, OneSplitRoot {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        distribution = new uint256[](DEXES_COUNT);\r\n\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, distribution);\r\n        }\r\n\r\n        function(IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[DEXES_COUNT] memory reserves = _getAllReserves(flags);\r\n\r\n        int256[][] memory matrix = new int256[][](DEXES_COUNT);\r\n        uint256[DEXES_COUNT] memory gases;\r\n        bool atLeastOnePositive = false;\r\n        for (uint i = 0; i < DEXES_COUNT; i++) {\r\n            uint256[] memory rets;\r\n            (rets, gases[i]) = reserves[i](fromToken, destToken, amount, parts, flags);\r\n\r\n            // Prepend zero and sub gas\r\n            int256 gas = int256(gases[i].mul(destTokenEthPriceTimesGasPrice).div(1e18));\r\n            matrix[i] = new int256[](parts + 1);\r\n            for (uint j = 0; j < parts; j++) {\r\n                matrix[i][j + 1] = int256(rets[j]) - gas;\r\n                atLeastOnePositive = atLeastOnePositive || (matrix[i][j + 1] > 0);\r\n            }\r\n        }\r\n\r\n        if (!atLeastOnePositive) {\r\n            for (uint i = 0; i < DEXES_COUNT; i++) {\r\n                for (uint j = 1; j < parts + 1; j++) {\r\n                    if (matrix[i][j] == 0) {\r\n                        matrix[i][j] = VERY_NEGATIVE_VALUE;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        (, distribution) = _findBestDistribution(parts, matrix);\r\n\r\n        (returnAmount, estimateGasAmount) = _getReturnAndGasByDistribution(\r\n            Args({\r\n                fromToken: fromToken,\r\n                destToken: destToken,\r\n                amount: amount,\r\n                parts: parts,\r\n                flags: flags,\r\n                destTokenEthPriceTimesGasPrice: destTokenEthPriceTimesGasPrice,\r\n                distribution: distribution,\r\n                matrix: matrix,\r\n                gases: gases,\r\n                reserves: reserves\r\n            })\r\n        );\r\n        return (returnAmount, estimateGasAmount, distribution);\r\n    }\r\n\r\n    struct Args {\r\n        IERC20 fromToken;\r\n        IERC20 destToken;\r\n        uint256 amount;\r\n        uint256 parts;\r\n        uint256 flags;\r\n        uint256 destTokenEthPriceTimesGasPrice;\r\n        uint256[] distribution;\r\n        int256[][] matrix;\r\n        uint256[DEXES_COUNT] gases;\r\n        function(IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[DEXES_COUNT] reserves;\r\n    }\r\n\r\n    function _getReturnAndGasByDistribution(\r\n        Args memory args\r\n    ) internal view returns(uint256 returnAmount, uint256 estimateGasAmount) {\r\n        bool[DEXES_COUNT] memory exact = [\r\n            true,  // \"Uniswap\",\r\n            false, // \"Kyber\",\r\n            false, // \"Bancor\",\r\n            false, // \"Oasis\",\r\n            false, // \"Curve Compound\",\r\n            false, // \"Curve USDT\",\r\n            false, // \"Curve Y\",\r\n            false, // \"Curve Binance\",\r\n            false, // \"CurveSynthetix\",\r\n            true,  // \"Uniswap Compound\",\r\n            true,  // \"Uniswap CHAI\",\r\n            true,  // \"Uniswap Aave\",\r\n            false, // \"Mooniswap\",\r\n            true,  // \"Uniswap V2\",\r\n            true,  // \"Uniswap V2 (ETH)\",\r\n            true,  // \"Uniswap V2 (DAI)\",\r\n            true,  // \"Uniswap V2 (USDC)\",\r\n            false, // \"Curve Pax\",\r\n            false, // \"Curve RenBTC\",\r\n            false, // \"Curve tBTC\",\r\n            true,  // \"Dforce XSwap\",\r\n            false, // \"Shell\",\r\n            true,  // \"mStable\",\r\n            false, // \"Curve sBTC\"\r\n            true,  // \"Balancer 1\"\r\n            true,  // \"Balancer 2\"\r\n            true   // \"Balancer 3\"\r\n        ];\r\n\r\n        for (uint i = 0; i < DEXES_COUNT; i++) {\r\n            if (args.distribution[i] > 0) {\r\n                if (args.distribution[i] == args.parts || exact[i] || args.flags.check(FLAG_DISABLE_SPLIT_RECALCULATION)) {\r\n                    estimateGasAmount = estimateGasAmount.add(args.gases[i]);\r\n                    int256 value = args.matrix[i][args.distribution[i]];\r\n                    returnAmount = returnAmount.add(uint256(\r\n                        (value == VERY_NEGATIVE_VALUE ? 0 : value) +\r\n                        int256(args.gases[i].mul(args.destTokenEthPriceTimesGasPrice).div(1e18))\r\n                    ));\r\n                }\r\n                else {\r\n                    (uint256[] memory rets, uint256 gas) = args.reserves[i](args.fromToken, args.destToken, args.amount.mul(args.distribution[i]).div(args.parts), 1, args.flags);\r\n                    estimateGasAmount = estimateGasAmount.add(gas);\r\n                    returnAmount = returnAmount.add(rets[0]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getAllReserves(uint256 flags)\r\n        internal\r\n        pure\r\n        returns(function(IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[DEXES_COUNT] memory)\r\n    {\r\n        bool invert = flags.check(FLAG_DISABLE_ALL_SPLIT_SOURCES);\r\n        return [\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_ALL | FLAG_DISABLE_UNISWAP)            ? _calculateNoReturn : calculateUniswap,\r\n            invert != flags.check(FLAG_DISABLE_KYBER)                                         ? _calculateNoReturn : calculateKyber,\r\n            invert != flags.check(FLAG_DISABLE_BANCOR)                                        ? _calculateNoReturn : calculateBancor,\r\n            invert != flags.check(FLAG_DISABLE_OASIS)                                         ? _calculateNoReturn : calculateOasis,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_COMPOUND)       ? _calculateNoReturn : calculateCurveCompound,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_USDT)           ? _calculateNoReturn : calculateCurveUSDT,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_Y)              ? _calculateNoReturn : calculateCurveY,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_BINANCE)        ? _calculateNoReturn : calculateCurveBinance,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_SYNTHETIX)      ? _calculateNoReturn : calculateCurveSynthetix,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_ALL | FLAG_DISABLE_UNISWAP_COMPOUND)   ? _calculateNoReturn : calculateUniswapCompound,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_ALL | FLAG_DISABLE_UNISWAP_CHAI)       ? _calculateNoReturn : calculateUniswapChai,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_ALL | FLAG_DISABLE_UNISWAP_AAVE)       ? _calculateNoReturn : calculateUniswapAave,\r\n            invert != flags.check(FLAG_DISABLE_MOONISWAP)                                     ? _calculateNoReturn : calculateMooniswap,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_V2_ALL | FLAG_DISABLE_UNISWAP_V2)      ? _calculateNoReturn : calculateUniswapV2,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_V2_ALL | FLAG_DISABLE_UNISWAP_V2_ETH)  ? _calculateNoReturn : calculateUniswapV2ETH,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_V2_ALL | FLAG_DISABLE_UNISWAP_V2_DAI)  ? _calculateNoReturn : calculateUniswapV2DAI,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_V2_ALL | FLAG_DISABLE_UNISWAP_V2_USDC) ? _calculateNoReturn : calculateUniswapV2USDC,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_PAX)            ? _calculateNoReturn : calculateCurvePAX,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_RENBTC)         ? _calculateNoReturn : calculateCurveRenBTC,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_TBTC)           ? _calculateNoReturn : calculateCurveTBTC,\r\n            invert != flags.check(FLAG_DISABLE_DFORCE_SWAP)                                   ? _calculateNoReturn : calculateDforceSwap,\r\n            invert != flags.check(FLAG_DISABLE_SHELL)                                         ? _calculateNoReturn : calculateShell,\r\n            invert != flags.check(FLAG_DISABLE_MSTABLE_MUSD)                                  ? _calculateNoReturn : calculateMStableMUSD,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_SBTC)           ? _calculateNoReturn : calculateCurveSBTC,\r\n            invert != flags.check(FLAG_DISABLE_BALANCER_ALL | FLAG_DISABLE_BALANCER_1)        ? _calculateNoReturn : calculateBalancer1,\r\n            invert != flags.check(FLAG_DISABLE_BALANCER_ALL | FLAG_DISABLE_BALANCER_2)        ? _calculateNoReturn : calculateBalancer2,\r\n            invert != flags.check(FLAG_DISABLE_BALANCER_ALL | FLAG_DISABLE_BALANCER_3)        ? _calculateNoReturn : calculateBalancer3\r\n        ];\r\n    }\r\n\r\n    function _calculateNoGas(\r\n        IERC20 /*fromToken*/,\r\n        IERC20 /*destToken*/,\r\n        uint256 /*amount*/,\r\n        uint256 /*parts*/,\r\n        uint256 /*destTokenEthPriceTimesGasPrice*/,\r\n        uint256 /*flags*/,\r\n        uint256 /*destTokenEthPrice*/\r\n    ) internal view returns(uint256[] memory /*rets*/, uint256 /*gas*/) {\r\n        this;\r\n    }\r\n\r\n    // View Helpers\r\n\r\n    function _calculateBalancer(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/,\r\n        uint256 poolIndex\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        address[] memory pools = balancerRegistry.getBestPoolsWithLimit(\r\n            address(fromToken.isETH() ? weth : fromToken),\r\n            address(destToken.isETH() ? weth : destToken),\r\n            poolIndex + 1\r\n        );\r\n        if (poolIndex >= pools.length) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        return (\r\n            balancerRegistry.getPoolReturns(\r\n                pools[poolIndex],\r\n                address(fromToken.isETH() ? weth : fromToken),\r\n                address(destToken.isETH() ? weth : destToken),\r\n                _linearInterpolation(amount, parts)\r\n            ),\r\n            100_000\r\n        );\r\n    }\r\n\r\n    function calculateBalancer1(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateBalancer(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function calculateBalancer2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateBalancer(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            1\r\n        );\r\n    }\r\n\r\n    function calculateBalancer3(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateBalancer(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            2\r\n        );\r\n    }\r\n\r\n    function calculateMStableMUSD(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = new uint256[](parts);\r\n\r\n        if ((fromToken != usdc && fromToken != dai && fromToken != usdt && fromToken != tusd) ||\r\n            (destToken != usdc && destToken != dai && destToken != usdt && destToken != tusd))\r\n        {\r\n            return (rets, 0);\r\n        }\r\n\r\n        for (uint i = 1; i <= parts; i *= 2) {\r\n            (bool success, bytes memory data) = address(musd).staticcall(abi.encodeWithSelector(\r\n                musd.getSwapOutput.selector,\r\n                fromToken,\r\n                destToken,\r\n                amount.mul(parts.div(i)).div(parts)\r\n            ));\r\n\r\n            if (success && data.length > 0) {\r\n                (,, uint256 maxRet) = abi.decode(data, (bool,string,uint256));\r\n                if (maxRet > 0) {\r\n                    for (uint j = 0; j < parts.div(i); j++) {\r\n                        rets[j] = maxRet.mul(j + 1).div(parts.div(i));\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            rets,\r\n            700_000\r\n        );\r\n    }\r\n\r\n    function _calculateCurveSelector(\r\n        ICurve curve,\r\n        bytes4 sel,\r\n        IERC20[] memory tokens,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets) {\r\n        int128 i = 0;\r\n        int128 j = 0;\r\n        for (uint t = 0; t < tokens.length; t++) {\r\n            if (fromToken == tokens[t]) {\r\n                i = int128(t + 1);\r\n            }\r\n            if (destToken == tokens[t]) {\r\n                j = int128(t + 1);\r\n            }\r\n        }\r\n\r\n        if (i == 0 || j == 0) {\r\n            return new uint256[](parts);\r\n        }\r\n\r\n        // curve.get_dy(i - 1, j - 1, amount);\r\n        // curve.get_dy_underlying(i - 1, j - 1, amount);\r\n        (bool success, bytes memory data) = address(curve).staticcall(abi.encodeWithSelector(sel, i - 1, j - 1, amount));\r\n        uint256 maxRet = (!success || data.length == 0) ? 0 : abi.decode(data, (uint256));\r\n\r\n        return _linearInterpolation(maxRet, parts);\r\n    }\r\n\r\n    function calculateCurveCompound(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](2);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        return (_calculateCurveSelector(\r\n            curveCompound,\r\n            curveCompound.get_dy_underlying.selector,\r\n            tokens,\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        ), 720_000);\r\n    }\r\n\r\n    function calculateCurveUSDT(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](3);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        tokens[2] = usdt;\r\n        return (_calculateCurveSelector(\r\n            curveUSDT,\r\n            curveUSDT.get_dy_underlying.selector,\r\n            tokens,\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        ), 720_000);\r\n    }\r\n\r\n    function calculateCurveY(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](4);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        tokens[2] = usdt;\r\n        tokens[3] = tusd;\r\n        return (_calculateCurveSelector(\r\n            curveY,\r\n            curveY.get_dy_underlying.selector,\r\n            tokens,\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        ), 1_400_000);\r\n    }\r\n\r\n    function calculateCurveBinance(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](4);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        tokens[2] = usdt;\r\n        tokens[3] = busd;\r\n        return (_calculateCurveSelector(\r\n            curveBinance,\r\n            curveBinance.get_dy_underlying.selector,\r\n            tokens,\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        ), 1_400_000);\r\n    }\r\n\r\n    function calculateCurveSynthetix(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](4);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        tokens[2] = usdt;\r\n        tokens[3] = susd;\r\n        return (_calculateCurveSelector(\r\n            curveSynthetix,\r\n            curveSynthetix.get_dy_underlying.selector,\r\n            tokens,\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        ), 200_000);\r\n    }\r\n\r\n    function calculateCurvePAX(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](4);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        tokens[2] = usdt;\r\n        tokens[3] = pax;\r\n        return (_calculateCurveSelector(\r\n            curvePAX,\r\n            curvePAX.get_dy_underlying.selector,\r\n            tokens,\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        ), 1_000_000);\r\n    }\r\n\r\n    function calculateCurveRenBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](2);\r\n        tokens[0] = renbtc;\r\n        tokens[1] = wbtc;\r\n        return (_calculateCurveSelector(\r\n            curveRenBTC,\r\n            curveRenBTC.get_dy.selector,\r\n            tokens,\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        ), 130_000);\r\n    }\r\n\r\n    function calculateCurveTBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](3);\r\n        tokens[0] = tbtc;\r\n        tokens[1] = wbtc;\r\n        tokens[2] = hbtc;\r\n        return (_calculateCurveSelector(\r\n            curveTBTC,\r\n            curveTBTC.get_dy.selector,\r\n            tokens,\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        ), 145_000);\r\n    }\r\n\r\n    function calculateCurveSBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](3);\r\n        tokens[0] = renbtc;\r\n        tokens[1] = wbtc;\r\n        tokens[2] = sbtc;\r\n        return (_calculateCurveSelector(\r\n            curveSBTC,\r\n            curveSBTC.get_dy.selector,\r\n            tokens,\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        ), 150_000);\r\n    }\r\n\r\n    function calculateShell(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        (bool success, bytes memory data) = address(shell).staticcall(abi.encodeWithSelector(\r\n            shell.viewOriginTrade.selector,\r\n            fromToken,\r\n            destToken,\r\n            amount\r\n        ));\r\n\r\n        if (!success || data.length == 0) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        uint256 maxRet = abi.decode(data, (uint256));\r\n        return (_linearInterpolation(maxRet, parts), 300_000);\r\n    }\r\n\r\n    function calculateDforceSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        (bool success, bytes memory data) = address(dforceSwap).staticcall(\r\n            abi.encodeWithSelector(\r\n                dforceSwap.getAmountByInput.selector,\r\n                fromToken,\r\n                destToken,\r\n                amount\r\n            )\r\n        );\r\n        if (!success || data.length == 0) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        uint256 maxRet = abi.decode(data, (uint256));\r\n        uint256 available = destToken.universalBalanceOf(address(dforceSwap));\r\n        if (maxRet > available) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        return (_linearInterpolation(maxRet, parts), 160_000);\r\n    }\r\n\r\n    function _calculateUniswapFormula(uint256 fromBalance, uint256 toBalance, uint256 amount) internal pure returns(uint256) {\r\n        return amount.mul(toBalance).mul(997).div(\r\n            fromBalance.mul(1000).add(amount.mul(997))\r\n        );\r\n    }\r\n\r\n    function _calculateUniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256[] memory amounts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = amounts;\r\n\r\n        if (!fromToken.isETH()) {\r\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(fromToken);\r\n            if (fromExchange == IUniswapExchange(0)) {\r\n                return (new uint256[](rets.length), 0);\r\n            }\r\n\r\n            uint256 fromTokenBalance = fromToken.universalBalanceOf(address(fromExchange));\r\n            uint256 fromEtherBalance = address(fromExchange).balance;\r\n\r\n            for (uint i = 0; i < rets.length; i++) {\r\n                rets[i] = _calculateUniswapFormula(fromTokenBalance, fromEtherBalance, rets[i]);\r\n            }\r\n        }\r\n\r\n        if (!destToken.isETH()) {\r\n            IUniswapExchange toExchange = uniswapFactory.getExchange(destToken);\r\n            if (toExchange == IUniswapExchange(0)) {\r\n                return (new uint256[](rets.length), 0);\r\n            }\r\n\r\n            uint256 toEtherBalance = address(toExchange).balance;\r\n            uint256 toTokenBalance = destToken.universalBalanceOf(address(toExchange));\r\n\r\n            for (uint i = 0; i < rets.length; i++) {\r\n                rets[i] = _calculateUniswapFormula(toEtherBalance, toTokenBalance, rets[i]);\r\n            }\r\n        }\r\n\r\n        return (rets, fromToken.isETH() || destToken.isETH() ? 60_000 : 100_000);\r\n    }\r\n\r\n    function calculateUniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateUniswap(\r\n            fromToken,\r\n            destToken,\r\n            _linearInterpolation(amount, parts),\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _calculateUniswapWrapped(\r\n        IERC20 fromToken,\r\n        IERC20 midToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 midTokenPrice,\r\n        uint256 flags,\r\n        uint256 gas1,\r\n        uint256 gas2\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (!fromToken.isETH() && destToken.isETH()) {\r\n            (rets, gas) = _calculateUniswap(\r\n                midToken,\r\n                destToken,\r\n                _linearInterpolation(amount.mul(1e18).div(midTokenPrice), parts),\r\n                flags\r\n            );\r\n            return (rets, gas + gas1);\r\n        }\r\n        else if (fromToken.isETH() && !destToken.isETH()) {\r\n            (rets, gas) = _calculateUniswap(\r\n                fromToken,\r\n                midToken,\r\n                _linearInterpolation(amount, parts),\r\n                flags\r\n            );\r\n\r\n            for (uint i = 0; i < parts; i++) {\r\n                rets[i] = rets[i].mul(midTokenPrice).div(1e18);\r\n            }\r\n            return (rets, gas + gas2);\r\n        }\r\n\r\n        return (new uint256[](parts), 0);\r\n    }\r\n\r\n    function calculateUniswapCompound(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20 midPreToken;\r\n        if (!fromToken.isETH() && destToken.isETH()) {\r\n            midPreToken = fromToken;\r\n        }\r\n        else if (!destToken.isETH() && fromToken.isETH()) {\r\n            midPreToken = destToken;\r\n        }\r\n\r\n        if (!midPreToken.isETH()) {\r\n            ICompoundToken midToken = _getCompoundToken(midPreToken);\r\n            if (midToken != ICompoundToken(0)) {\r\n                return _calculateUniswapWrapped(\r\n                    fromToken,\r\n                    midToken,\r\n                    destToken,\r\n                    amount,\r\n                    parts,\r\n                    midToken.exchangeRateStored(),\r\n                    flags,\r\n                    200_000,\r\n                    200_000\r\n                );\r\n            }\r\n        }\r\n\r\n        return (new uint256[](parts), 0);\r\n    }\r\n\r\n    function calculateUniswapChai(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken == dai && destToken.isETH() ||\r\n            fromToken.isETH() && destToken == dai)\r\n        {\r\n            return _calculateUniswapWrapped(\r\n                fromToken,\r\n                chai,\r\n                destToken,\r\n                amount,\r\n                parts,\r\n                chai.chaiPrice(),\r\n                flags,\r\n                180_000,\r\n                160_000\r\n            );\r\n        }\r\n\r\n        return (new uint256[](parts), 0);\r\n    }\r\n\r\n    function calculateUniswapAave(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20 midPreToken;\r\n        if (!fromToken.isETH() && destToken.isETH()) {\r\n            midPreToken = fromToken;\r\n        }\r\n        else if (!destToken.isETH() && fromToken.isETH()) {\r\n            midPreToken = destToken;\r\n        }\r\n\r\n        if (!midPreToken.isETH()) {\r\n            IAaveToken midToken = _getAaveToken(midPreToken);\r\n            if (midToken != IAaveToken(0)) {\r\n                return _calculateUniswapWrapped(\r\n                    fromToken,\r\n                    midToken,\r\n                    destToken,\r\n                    amount,\r\n                    parts,\r\n                    1e18,\r\n                    flags,\r\n                    310_000,\r\n                    670_000\r\n                );\r\n            }\r\n        }\r\n\r\n        return (new uint256[](parts), 0);\r\n    }\r\n\r\n    function _calculateKyber(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal view returns(uint256 returnAmount, uint256 gas) {\r\n        (bool success, bytes memory data) = address(kyberNetworkProxy).staticcall.gas(2300)(abi.encodeWithSelector(\r\n            kyberNetworkProxy.kyberNetworkContract.selector\r\n        ));\r\n        if (!success || data.length == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        IKyberNetworkContract kyberNetworkContract = IKyberNetworkContract(abi.decode(data, (address)));\r\n\r\n        if (fromToken.isETH() || destToken.isETH()) {\r\n            return _calculateKyberWithEth(kyberNetworkContract, fromToken, destToken, amount, flags);\r\n        }\r\n\r\n        (uint256 value, uint256 gasFee) = _calculateKyberWithEth(kyberNetworkContract, fromToken, ETH_ADDRESS, amount, flags);\r\n        if (value == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        (uint256 value2, uint256 gasFee2) =  _calculateKyberWithEth(kyberNetworkContract, ETH_ADDRESS, destToken, value, flags);\r\n        return (value2, gasFee + gasFee2);\r\n    }\r\n\r\n    function _calculateKyberWithEth(\r\n        IKyberNetworkContract kyberNetworkContract,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal view returns(uint256 returnAmount, uint256 gas) {\r\n        require(fromToken.isETH() || destToken.isETH(), \"2ETH\");\r\n\r\n        (bool success, bytes memory data) = address(kyberNetworkContract).staticcall.gas(1500000)(abi.encodeWithSelector(\r\n            kyberNetworkContract.searchBestRate.selector,\r\n            fromToken.isETH() ? ETH_ADDRESS : fromToken,\r\n            destToken.isETH() ? ETH_ADDRESS : destToken,\r\n            amount,\r\n            true\r\n        ));\r\n        if (!success) {\r\n            return (0, 0);\r\n        }\r\n\r\n        (address reserve, uint256 ret) = abi.decode(data, (address,uint256));\r\n\r\n        if (ret == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        if ((reserve == 0x31E085Afd48a1d6e51Cc193153d625e8f0514C7F && !flags.check(FLAG_ENABLE_KYBER_UNISWAP_RESERVE)) ||\r\n            (reserve == 0x1E158c0e93c30d24e918Ef83d1e0bE23595C3c0f && !flags.check(FLAG_ENABLE_KYBER_OASIS_RESERVE)) ||\r\n            (reserve == 0x053AA84FCC676113a57e0EbB0bD1913839874bE4 && !flags.check(FLAG_ENABLE_KYBER_BANCOR_RESERVE)))\r\n        {\r\n            return (0, 0);\r\n        }\r\n\r\n        if (!flags.check(FLAG_ENABLE_KYBER_UNISWAP_RESERVE)) {\r\n            (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\r\n                IKyberUniswapReserve(reserve).uniswapFactory.selector\r\n            ));\r\n            if (success) {\r\n                return (0, 0);\r\n            }\r\n        }\r\n\r\n        if (!flags.check(FLAG_ENABLE_KYBER_OASIS_RESERVE)) {\r\n            (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\r\n                IKyberOasisReserve(reserve).otc.selector\r\n            ));\r\n            if (success) {\r\n                return (0, 0);\r\n            }\r\n        }\r\n\r\n        if (!flags.check(FLAG_ENABLE_KYBER_BANCOR_RESERVE)) {\r\n            (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\r\n                IKyberBancorReserve(reserve).bancorEth.selector\r\n            ));\r\n            if (success) {\r\n                return (0, 0);\r\n            }\r\n        }\r\n\r\n        return (\r\n            ret.mul(amount)\r\n                .mul(10 ** IERC20(destToken).universalDecimals())\r\n                .div(10 ** IERC20(fromToken).universalDecimals())\r\n                .div(1e18),\r\n            700_000\r\n        );\r\n    }\r\n\r\n    function calculateKyber(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = new uint256[](parts);\r\n        for (uint i = 0; i < parts; i++) {\r\n            (rets[i], gas) = _calculateKyber(fromToken, destToken, amount.mul(i + 1).div(parts), flags);\r\n            if (rets[i] == 0) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return (rets, gas);\r\n    }\r\n\r\n    function calculateBancor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IBancorNetwork bancorNetwork = IBancorNetwork(bancorContractRegistry.addressOf(\"BancorNetwork\"));\r\n        address[] memory path = _buildBancorPath(fromToken, destToken);\r\n\r\n        rets = _linearInterpolation(amount, parts);\r\n        for (uint i = 0; i < parts; i++) {\r\n            (bool success, bytes memory data) = address(bancorNetwork).staticcall.gas(500000)(\r\n                abi.encodeWithSelector(\r\n                    bancorNetwork.getReturnByPath.selector,\r\n                    path,\r\n                    rets[i]\r\n                )\r\n            );\r\n            if (!success || data.length == 0) {\r\n                for (; i < parts; i++) {\r\n                    rets[i] = 0;\r\n                }\r\n                break;\r\n            } else {\r\n                (uint256 ret,) = abi.decode(data, (uint256,uint256));\r\n                rets[i] = ret;\r\n            }\r\n        }\r\n\r\n        return (rets, path.length.mul(150_000));\r\n    }\r\n\r\n    function calculateOasis(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = _linearInterpolation(amount, parts);\r\n        for (uint i = 0; i < parts; i++) {\r\n            (bool success, bytes memory data) = address(oasisExchange).staticcall.gas(500000)(\r\n                abi.encodeWithSelector(\r\n                    oasisExchange.getBuyAmount.selector,\r\n                    destToken.isETH() ? weth : destToken,\r\n                    fromToken.isETH() ? weth : fromToken,\r\n                    rets[i]\r\n                )\r\n            );\r\n\r\n            if (!success || data.length == 0) {\r\n                for (; i < parts; i++) {\r\n                    rets[i] = 0;\r\n                }\r\n                break;\r\n            } else {\r\n                rets[i] = abi.decode(data, (uint256));\r\n            }\r\n        }\r\n\r\n        return (rets, 500_000);\r\n    }\r\n\r\n    function calculateMooniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IMooniswap mooniswap = mooniswapRegistry.target();\r\n        (bool success, bytes memory data) = address(mooniswap).staticcall.gas(1000000)(\r\n            abi.encodeWithSelector(\r\n                mooniswap.getReturn.selector,\r\n                fromToken,\r\n                destToken,\r\n                amount\r\n            )\r\n        );\r\n\r\n        if (!success || data.length == 0) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        uint256 maxRet = abi.decode(data, (uint256));\r\n        return (_linearInterpolation(maxRet, parts), 1_000_000);\r\n    }\r\n\r\n    function calculateUniswapV2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateUniswapV2(\r\n            fromToken,\r\n            destToken,\r\n            _linearInterpolation(amount, parts),\r\n            flags\r\n        );\r\n    }\r\n\r\n    function calculateUniswapV2ETH(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken.isETH() || fromToken == weth || destToken.isETH() || destToken == weth) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        return _calculateUniswapV2OverMidToken(\r\n            fromToken,\r\n            weth,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function calculateUniswapV2DAI(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken == dai || destToken == dai) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        return _calculateUniswapV2OverMidToken(\r\n            fromToken,\r\n            dai,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function calculateUniswapV2USDC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken == usdc || destToken == usdc) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        return _calculateUniswapV2OverMidToken(\r\n            fromToken,\r\n            usdc,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _calculateUniswapV2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256[] memory amounts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = new uint256[](amounts.length);\r\n\r\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\r\n        IERC20 destTokenReal = destToken.isETH() ? weth : destToken;\r\n        IUniswapV2Exchange exchange = uniswapV2.getPair(fromTokenReal, destTokenReal);\r\n        if (exchange != IUniswapV2Exchange(0)) {\r\n            uint256 fromTokenBalance = fromTokenReal.universalBalanceOf(address(exchange));\r\n            uint256 destTokenBalance = destTokenReal.universalBalanceOf(address(exchange));\r\n            for (uint i = 0; i < amounts.length; i++) {\r\n                rets[i] = _calculateUniswapFormula(fromTokenBalance, destTokenBalance, amounts[i]);\r\n            }\r\n            return (rets, 50_000);\r\n        }\r\n    }\r\n\r\n    function _calculateUniswapV2OverMidToken(\r\n        IERC20 fromToken,\r\n        IERC20 midToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = _linearInterpolation(amount, parts);\r\n\r\n        uint256 gas1;\r\n        uint256 gas2;\r\n        (rets, gas1) = _calculateUniswapV2(fromToken, midToken, rets, flags);\r\n        (rets, gas2) = _calculateUniswapV2(midToken, destToken, rets, flags);\r\n        return (rets, gas1 + gas2);\r\n    }\r\n\r\n    function _calculateNoReturn(\r\n        IERC20 /*fromToken*/,\r\n        IERC20 /*destToken*/,\r\n        uint256 /*amount*/,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        this;\r\n        return (new uint256[](parts), 0);\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitBaseWrap is IOneSplit, OneSplitRoot {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    ) internal {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        _swapFloor(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _swapFloor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 /*flags*/ // See constants in IOneSplit.sol\r\n    ) internal;\r\n}\r\n\r\n\r\ncontract OneSplit is IOneSplit, OneSplitRoot {\r\n    IOneSplitView public oneSplitView;\r\n\r\n    constructor(IOneSplitView _oneSplitView) public {\r\n        oneSplitView = _oneSplitView;\r\n    }\r\n\r\n    function() external payable {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(msg.sender != tx.origin);\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return oneSplitView.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 /*flags*/  // See constants in IOneSplit.sol\r\n    ) public payable returns(uint256 returnAmount) {\r\n        if (fromToken == destToken) {\r\n            return amount;\r\n        }\r\n\r\n        function(IERC20,IERC20,uint256) returns(uint256)[DEXES_COUNT] memory reserves = [\r\n            _swapOnUniswap,\r\n            _swapOnKyber,\r\n            _swapOnBancor,\r\n            _swapOnOasis,\r\n            _swapOnCurveCompound,\r\n            _swapOnCurveUSDT,\r\n            _swapOnCurveY,\r\n            _swapOnCurveBinance,\r\n            _swapOnCurveSynthetix,\r\n            _swapOnUniswapCompound,\r\n            _swapOnUniswapChai,\r\n            _swapOnUniswapAave,\r\n            _swapOnMooniswap,\r\n            _swapOnUniswapV2,\r\n            _swapOnUniswapV2ETH,\r\n            _swapOnUniswapV2DAI,\r\n            _swapOnUniswapV2USDC,\r\n            _swapOnCurvePAX,\r\n            _swapOnCurveRenBTC,\r\n            _swapOnCurveTBTC,\r\n            _swapOnDforceSwap,\r\n            _swapOnShell,\r\n            _swapOnMStableMUSD,\r\n            _swapOnCurveSBTC,\r\n            _swapOnBalancer1,\r\n            _swapOnBalancer2,\r\n            _swapOnBalancer3\r\n        ];\r\n\r\n        require(distribution.length <= reserves.length, \"OneSplit: Distribution array should not exceed reserves array size\");\r\n\r\n        uint256 parts = 0;\r\n        uint256 lastNonZeroIndex = 0;\r\n        for (uint i = 0; i < distribution.length; i++) {\r\n            if (distribution[i] > 0) {\r\n                parts = parts.add(distribution[i]);\r\n                lastNonZeroIndex = i;\r\n            }\r\n        }\r\n\r\n        if (parts == 0) {\r\n            if (fromToken.isETH()) {\r\n                msg.sender.transfer(msg.value);\r\n                return msg.value;\r\n            }\r\n            return amount;\r\n        }\r\n\r\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\r\n        uint256 remainingAmount = fromToken.universalBalanceOf(address(this));\r\n\r\n        for (uint i = 0; i < distribution.length; i++) {\r\n            if (distribution[i] == 0) {\r\n                continue;\r\n            }\r\n\r\n            uint256 swapAmount = amount.mul(distribution[i]).div(parts);\r\n            if (i == lastNonZeroIndex) {\r\n                swapAmount = remainingAmount;\r\n            }\r\n            remainingAmount -= swapAmount;\r\n            reserves[i](fromToken, destToken, swapAmount);\r\n        }\r\n\r\n        returnAmount = destToken.universalBalanceOf(address(this));\r\n        require(returnAmount >= minReturn, \"OneSplit: Return amount was not enough\");\r\n        destToken.universalTransfer(msg.sender, returnAmount);\r\n        fromToken.universalTransfer(msg.sender, fromToken.universalBalanceOf(address(this)));\r\n    }\r\n\r\n    // Swap helpers\r\n\r\n    function _swapOnCurveCompound(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) + (fromToken == usdc ? 2 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) + (destToken == usdc ? 2 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveCompound), amount);\r\n        curveCompound.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveUSDT(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveUSDT), amount);\r\n        curveUSDT.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveY(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == tusd ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == tusd ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveY), amount);\r\n        curveY.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveBinance(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == busd ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == busd ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveBinance), amount);\r\n        curveBinance.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveSynthetix(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == susd ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == susd ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveSynthetix), amount);\r\n        curveSynthetix.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurvePAX(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == pax ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == pax ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curvePAX), amount);\r\n        curvePAX.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnShell(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        fromToken.universalApprove(address(shell), amount);\r\n        return shell.swapByOrigin(\r\n            address(fromToken),\r\n            address(destToken),\r\n            amount,\r\n            0,\r\n            now + 50\r\n        );\r\n    }\r\n\r\n    function _swapOnMStableMUSD(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        fromToken.universalApprove(address(musd), amount);\r\n        return musd.swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    function _swapOnCurveRenBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == renbtc ? 1 : 0) +\r\n            (fromToken == wbtc ? 2 : 0);\r\n        int128 j = (destToken == renbtc ? 1 : 0) +\r\n            (destToken == wbtc ? 2 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveRenBTC), amount);\r\n        curveRenBTC.exchange(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveTBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == tbtc ? 1 : 0) +\r\n            (fromToken == wbtc ? 2 : 0) +\r\n            (fromToken == hbtc ? 3 : 0);\r\n        int128 j = (destToken == tbtc ? 1 : 0) +\r\n            (destToken == wbtc ? 2 : 0) +\r\n            (destToken == hbtc ? 3 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveTBTC), amount);\r\n        curveTBTC.exchange(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveSBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == renbtc ? 1 : 0) +\r\n            (fromToken == wbtc ? 2 : 0) +\r\n            (fromToken == sbtc ? 3 : 0);\r\n        int128 j = (destToken == renbtc ? 1 : 0) +\r\n            (destToken == wbtc ? 2 : 0) +\r\n            (destToken == sbtc ? 3 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveSBTC), amount);\r\n        curveSBTC.exchange(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnDforceSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        fromToken.universalApprove(address(dforceSwap), amount);\r\n        dforceSwap.swap(fromToken, destToken, amount);\r\n    }\r\n\r\n    function _swapOnUniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n\r\n        uint256 returnAmount = amount;\r\n\r\n        if (!fromToken.isETH()) {\r\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(fromToken);\r\n            if (fromExchange != IUniswapExchange(0)) {\r\n                fromToken.universalApprove(address(fromExchange), returnAmount);\r\n                returnAmount = fromExchange.tokenToEthSwapInput(returnAmount, 1, now);\r\n            }\r\n        }\r\n\r\n        if (!destToken.isETH()) {\r\n            IUniswapExchange toExchange = uniswapFactory.getExchange(destToken);\r\n            if (toExchange != IUniswapExchange(0)) {\r\n                returnAmount = toExchange.ethToTokenSwapInput.value(returnAmount)(1, now);\r\n            }\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    function _swapOnUniswapCompound(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (!fromToken.isETH()) {\r\n            ICompoundToken fromCompound = _getCompoundToken(fromToken);\r\n            fromToken.universalApprove(address(fromCompound), amount);\r\n            fromCompound.mint(amount);\r\n            return _swapOnUniswap(IERC20(fromCompound), destToken, IERC20(fromCompound).universalBalanceOf(address(this)));\r\n        }\r\n\r\n        if (!destToken.isETH()) {\r\n            ICompoundToken toCompound = _getCompoundToken(destToken);\r\n            uint256 compoundAmount = _swapOnUniswap(fromToken, IERC20(toCompound), amount);\r\n            toCompound.redeem(compoundAmount);\r\n            return destToken.universalBalanceOf(address(this));\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _swapOnUniswapChai(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (fromToken == dai) {\r\n            fromToken.universalApprove(address(chai), amount);\r\n            chai.join(address(this), amount);\r\n            return _swapOnUniswap(IERC20(chai), destToken, IERC20(chai).universalBalanceOf(address(this)));\r\n        }\r\n\r\n        if (destToken == dai) {\r\n            uint256 chaiAmount = _swapOnUniswap(fromToken, IERC20(chai), amount);\r\n            chai.exit(address(this), chaiAmount);\r\n            return destToken.universalBalanceOf(address(this));\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _swapOnUniswapAave(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (!fromToken.isETH()) {\r\n            IAaveToken fromAave = _getAaveToken(fromToken);\r\n            fromToken.universalApprove(aave.core(), amount);\r\n            aave.deposit(fromToken, amount, 1101);\r\n            return _swapOnUniswap(IERC20(fromAave), destToken, IERC20(fromAave).universalBalanceOf(address(this)));\r\n        }\r\n\r\n        if (!destToken.isETH()) {\r\n            IAaveToken toAave = _getAaveToken(destToken);\r\n            uint256 aaveAmount = _swapOnUniswap(fromToken, IERC20(toAave), amount);\r\n            toAave.redeem(aaveAmount);\r\n            return aaveAmount;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _swapOnMooniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        IMooniswap mooniswap = mooniswapRegistry.target();\r\n        fromToken.universalApprove(address(mooniswap), amount);\r\n        return mooniswap.swap.value(fromToken.isETH() ? amount : 0)(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            0\r\n        );\r\n    }\r\n\r\n    function _swapOnKyber(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        fromToken.universalApprove(address(kyberNetworkProxy), amount);\r\n        return kyberNetworkProxy.tradeWithHint.value(fromToken.isETH() ? amount : 0)(\r\n            fromToken.isETH() ? ETH_ADDRESS : fromToken,\r\n            amount,\r\n            destToken.isETH() ? ETH_ADDRESS : destToken,\r\n            address(this),\r\n            1 << 255,\r\n            0,\r\n            0x4D37f28D2db99e8d35A6C725a5f1749A085850a3,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function _swapOnBancor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        IBancorNetwork bancorNetwork = IBancorNetwork(bancorContractRegistry.addressOf(\"BancorNetwork\"));\r\n        address[] memory path = _buildBancorPath(fromToken, destToken);\r\n        fromToken.universalApprove(address(bancorNetwork), amount);\r\n        return bancorNetwork.convert.value(fromToken.isETH() ? amount : 0)(path, amount, 1);\r\n    }\r\n\r\n    function _swapOnOasis(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (fromToken.isETH()) {\r\n            weth.deposit.value(amount)();\r\n        }\r\n\r\n        IERC20 approveToken = fromToken.isETH() ? weth : fromToken;\r\n        approveToken.universalApprove(address(oasisExchange), amount);\r\n        uint256 returnAmount = oasisExchange.sellAllAmount(\r\n            fromToken.isETH() ? weth : fromToken,\r\n            amount,\r\n            destToken.isETH() ? weth : destToken,\r\n            1\r\n        );\r\n\r\n        if (destToken.isETH()) {\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    function _swapOnUniswapV2Internal(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256 returnAmount) {\r\n        if (fromToken.isETH()) {\r\n            weth.deposit.value(amount)();\r\n        }\r\n\r\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\r\n        IERC20 toTokenReal = destToken.isETH() ? weth : destToken;\r\n        IUniswapV2Exchange exchange = uniswapV2.getPair(fromTokenReal, toTokenReal);\r\n        returnAmount = exchange.getReturn(fromTokenReal, toTokenReal, amount);\r\n\r\n        fromTokenReal.universalTransfer(address(exchange), amount);\r\n        if (uint256(address(fromTokenReal)) < uint256(address(toTokenReal))) {\r\n            exchange.swap(0, returnAmount, address(this), \"\");\r\n        } else {\r\n            exchange.swap(returnAmount, 0, address(this), \"\");\r\n        }\r\n\r\n        if (destToken.isETH()) {\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function _swapOnUniswapV2OverMid(\r\n        IERC20 fromToken,\r\n        IERC20 midToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        return _swapOnUniswapV2Internal(\r\n            midToken,\r\n            destToken,\r\n            _swapOnUniswapV2Internal(\r\n                fromToken,\r\n                midToken,\r\n                amount\r\n            )\r\n        );\r\n    }\r\n\r\n    function _swapOnUniswapV2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        return _swapOnUniswapV2Internal(\r\n            fromToken,\r\n            destToken,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function _swapOnUniswapV2ETH(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        return _swapOnUniswapV2OverMid(\r\n            fromToken,\r\n            weth,\r\n            destToken,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function _swapOnUniswapV2DAI(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        return _swapOnUniswapV2OverMid(\r\n            fromToken,\r\n            dai,\r\n            destToken,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function _swapOnUniswapV2USDC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        return _swapOnUniswapV2OverMid(\r\n            fromToken,\r\n            usdc,\r\n            destToken,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function _swapOnBalancerX(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 poolIndex\r\n    ) internal returns(uint256) {\r\n        address[] memory pools = balancerRegistry.getBestPoolsWithLimit(\r\n            address(fromToken.isETH() ? weth : fromToken),\r\n            address(destToken.isETH() ? weth : destToken),\r\n            poolIndex + 1\r\n        );\r\n\r\n        if (fromToken.isETH()) {\r\n            weth.deposit.value(amount)();\r\n        }\r\n\r\n        (fromToken.isETH() ? weth : destToken).universalApprove(pools[poolIndex], amount);\r\n        IBalancerPool(pools[poolIndex]).swapExactAmountIn(\r\n            fromToken.isETH() ? weth : fromToken,\r\n            amount,\r\n            destToken.isETH() ? weth : destToken,\r\n            0,\r\n            uint256(-1)\r\n        );\r\n\r\n        if (destToken.isETH()) {\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function _swapOnBalancer1(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        _swapOnBalancerX(fromToken, destToken, amount, 0);\r\n    }\r\n\r\n    function _swapOnBalancer2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        _swapOnBalancerX(fromToken, destToken, amount, 1);\r\n    }\r\n\r\n    function _swapOnBalancer3(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        _swapOnBalancerX(fromToken, destToken, amount, 2);\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitMultiPath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract OneSplitMultiPathBase is IOneSplitConsts, OneSplitRoot {\r\n    function _getMultiPathToken(uint256 flags) internal pure returns(IERC20 midToken) {\r\n        uint256[8] memory allFlags = [\r\n            FLAG_ENABLE_MULTI_PATH_ETH,\r\n            FLAG_ENABLE_MULTI_PATH_DAI,\r\n            FLAG_ENABLE_MULTI_PATH_USDC,\r\n            FLAG_ENABLE_MULTI_PATH_USDT,\r\n            FLAG_ENABLE_MULTI_PATH_WBTC,\r\n            FLAG_ENABLE_MULTI_PATH_TBTC,\r\n            FLAG_ENABLE_MULTI_PATH_RENBTC,\r\n            FLAG_ENABLE_MULTI_PATH_COMP\r\n        ];\r\n\r\n        IERC20[8] memory allMidTokens = [\r\n            ETH_ADDRESS,\r\n            dai,\r\n            usdc,\r\n            usdt,\r\n            wbtc,\r\n            tbtc,\r\n            renbtc,\r\n            comp\r\n        ];\r\n\r\n        for (uint i = 0; i < allFlags.length; i++) {\r\n            if (flags.check(allFlags[i])) {\r\n                require(midToken == IERC20(0), \"OneSplit: Do not use multipath with each other\");\r\n                midToken = allMidTokens[i];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitMultiPathView is OneSplitViewWrapBase, OneSplitMultiPathBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        IERC20 midToken = _getMultiPathToken(flags);\r\n\r\n        if (midToken != IERC20(0)) {\r\n            if (_tokensEqual(fromToken, midToken) || _tokensEqual(midToken, destToken)) {\r\n                return super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    destToken,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n            }\r\n\r\n            // Stack too deep\r\n            uint256 _flags = flags;\r\n            IERC20 _destToken = destToken;\r\n            uint256 _destTokenEthPriceTimesGasPrice = destTokenEthPriceTimesGasPrice;\r\n\r\n            (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                fromToken,\r\n                midToken,\r\n                amount,\r\n                parts,\r\n                _flags,\r\n                _scaleDestTokenEthPriceTimesGasPrice(\r\n                    _destToken,\r\n                    midToken,\r\n                    _destTokenEthPriceTimesGasPrice\r\n                )\r\n            );\r\n\r\n            uint256[] memory dist;\r\n            uint256 estimateGasAmount2;\r\n            (returnAmount, estimateGasAmount2, dist) = super.getExpectedReturnWithGas(\r\n                midToken,\r\n                destToken,\r\n                returnAmount,\r\n                parts,\r\n                _flags, // Double tap into the same source is not an issue since price wouldn't be worse\r\n                destTokenEthPriceTimesGasPrice\r\n            );\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                distribution[i] = distribution[i].add(dist[i] << 8);\r\n            }\r\n            return (returnAmount, estimateGasAmount + estimateGasAmount2, distribution);\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitMultiPath is OneSplitBaseWrap, OneSplitMultiPathBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        IERC20 midToken = _getMultiPathToken(flags);\r\n\r\n        if (midToken != IERC20(0) && !_tokensEqual(fromToken, midToken) && !_tokensEqual(midToken, destToken)) {\r\n            uint256[] memory dist = new uint256[](distribution.length);\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                dist[i] = distribution[i] & 0xFF;\r\n            }\r\n            super._swap(\r\n                fromToken,\r\n                midToken,\r\n                amount,\r\n                dist,\r\n                flags\r\n            );\r\n\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                dist[i] = (distribution[i] >> 8) & 0xFF;\r\n            }\r\n            super._swap(\r\n                midToken,\r\n                destToken,\r\n                midToken.universalBalanceOf(address(this)),\r\n                dist,\r\n                flags\r\n            );\r\n            return;\r\n        }\r\n\r\n        super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitCompound.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitCompoundBase {\r\n    function _getCompoundUnderlyingToken(IERC20 token) internal pure returns(IERC20) {\r\n        if (token == IERC20(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5)) { // ETH\r\n            return IERC20(0);\r\n        }\r\n        if (token == IERC20(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643)) { // DAI\r\n            return IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n        }\r\n        if (token == IERC20(0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E)) { // BAT\r\n            return IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF);\r\n        }\r\n        if (token == IERC20(0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1)) { // REP\r\n            return IERC20(0x1985365e9f78359a9B6AD760e32412f4a445E862);\r\n        }\r\n        if (token == IERC20(0x39AA39c021dfbaE8faC545936693aC917d5E7563)) { // USDC\r\n            return IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n        }\r\n        if (token == IERC20(0xC11b1268C1A384e55C48c2391d8d480264A3A7F4)) { // WBTC\r\n            return IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n        }\r\n        if (token == IERC20(0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407)) { // ZRX\r\n            return IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498);\r\n        }\r\n        if (token == IERC20(0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9)) { // USDT\r\n            return IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n        }\r\n\r\n        return IERC20(-1);\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitCompoundView is OneSplitViewWrapBase, OneSplitCompoundBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _compoundGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _compoundGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_COMPOUND)) {\r\n            IERC20 underlying = _getCompoundUnderlyingToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                uint256 compoundRate = ICompoundToken(address(fromToken)).exchangeRateStored();\r\n                (returnAmount, estimateGasAmount, distribution) = _compoundGetExpectedReturn(\r\n                    underlying,\r\n                    destToken,\r\n                    amount.mul(compoundRate).div(1e18),\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 295_000, distribution);\r\n            }\r\n\r\n            underlying = _getCompoundUnderlyingToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                uint256 _destTokenEthPriceTimesGasPrice = destTokenEthPriceTimesGasPrice;\r\n                uint256 compoundRate = ICompoundToken(address(destToken)).exchangeRateStored();\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    _destTokenEthPriceTimesGasPrice.mul(compoundRate).div(1e18)\r\n                );\r\n                return (returnAmount.mul(1e18).div(compoundRate), estimateGasAmount + 430_000, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitCompound is OneSplitBaseWrap, OneSplitCompoundBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _compoundSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _compoundSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_COMPOUND)) {\r\n            IERC20 underlying = _getCompoundUnderlyingToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                ICompoundToken(address(fromToken)).redeem(amount);\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                return _compoundSwap(\r\n                    underlying,\r\n                    destToken,\r\n                    underlyingAmount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            underlying = _getCompoundUnderlyingToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                if (underlying.isETH()) {\r\n                    cETH.mint.value(underlyingAmount)();\r\n                } else {\r\n                    underlying.universalApprove(address(destToken), underlyingAmount);\r\n                    ICompoundToken(address(destToken)).mint(underlyingAmount);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IFulcrum.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IFulcrumToken is IERC20 {\r\n    function tokenPrice() external view returns (uint256);\r\n\r\n    function loanTokenAddress() external view returns (address);\r\n\r\n    function mintWithEther(address receiver) external payable returns (uint256 mintAmount);\r\n\r\n    function mint(address receiver, uint256 depositAmount) external returns (uint256 mintAmount);\r\n\r\n    function burnToEther(address receiver, uint256 burnAmount)\r\n        external\r\n        returns (uint256 loanAmountPaid);\r\n\r\n    function burn(address receiver, uint256 burnAmount) external returns (uint256 loanAmountPaid);\r\n}\r\n\r\n// File: contracts/OneSplitFulcrum.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitFulcrumBase {\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function _isFulcrumToken(IERC20 token) internal view returns(IERC20) {\r\n        if (token.isETH()) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(abi.encodeWithSignature(\r\n            \"name()\"\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        bool foundBZX = false;\r\n        for (uint i = 0; i + 6 < data.length; i++) {\r\n            if (data[i + 0] == \"F\" &&\r\n                data[i + 1] == \"u\" &&\r\n                data[i + 2] == \"l\" &&\r\n                data[i + 3] == \"c\" &&\r\n                data[i + 4] == \"r\" &&\r\n                data[i + 5] == \"u\" &&\r\n                data[i + 6] == \"m\")\r\n            {\r\n                foundBZX = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!foundBZX) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (success, data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            IFulcrumToken(address(token)).loanTokenAddress.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        return abi.decode(data, (IERC20));\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitFulcrumView is OneSplitViewWrapBase, OneSplitFulcrumBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _fulcrumGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _fulcrumGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_FULCRUM)) {\r\n            IERC20 underlying = _isFulcrumToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                uint256 fulcrumRate = IFulcrumToken(address(fromToken)).tokenPrice();\r\n                (returnAmount, estimateGasAmount, distribution) = _fulcrumGetExpectedReturn(\r\n                    underlying,\r\n                    destToken,\r\n                    amount.mul(fulcrumRate).div(1e18),\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 381_000, distribution);\r\n            }\r\n\r\n            underlying = _isFulcrumToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                uint256 _destTokenEthPriceTimesGasPrice = destTokenEthPriceTimesGasPrice;\r\n                uint256 fulcrumRate = IFulcrumToken(address(destToken)).tokenPrice();\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    _destTokenEthPriceTimesGasPrice.mul(fulcrumRate).div(1e18)\r\n                );\r\n                return (returnAmount.mul(1e18).div(fulcrumRate), estimateGasAmount + 354_000, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitFulcrum is OneSplitBaseWrap, OneSplitFulcrumBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _fulcrumSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _fulcrumSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_FULCRUM)) {\r\n            IERC20 underlying = _isFulcrumToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                if (underlying.isETH()) {\r\n                    IFulcrumToken(address(fromToken)).burnToEther(address(this), amount);\r\n                } else {\r\n                    IFulcrumToken(address(fromToken)).burn(address(this), amount);\r\n                }\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                return super._swap(\r\n                    underlying,\r\n                    destToken,\r\n                    underlyingAmount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            underlying = _isFulcrumToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                if (underlying.isETH()) {\r\n                    IFulcrumToken(address(destToken)).mintWithEther.value(underlyingAmount)(address(this));\r\n                } else {\r\n                    underlying.universalApprove(address(destToken), underlyingAmount);\r\n                    IFulcrumToken(address(destToken)).mint(address(this), underlyingAmount);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitChai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitChaiView is OneSplitViewWrapBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_CHAI)) {\r\n            if (fromToken == IERC20(chai)) {\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    dai,\r\n                    destToken,\r\n                    chai.chaiToDai(amount),\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 197_000, distribution);\r\n            }\r\n\r\n            if (destToken == IERC20(chai)) {\r\n                uint256 price = chai.chaiPrice();\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice.mul(1e18).div(price)\r\n                );\r\n                return (returnAmount.mul(price).div(1e18), estimateGasAmount + 168_000, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitChai is OneSplitBaseWrap {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_CHAI)) {\r\n            if (fromToken == IERC20(chai)) {\r\n                chai.exit(address(this), amount);\r\n\r\n                return super._swap(\r\n                    dai,\r\n                    destToken,\r\n                    dai.balanceOf(address(this)),\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            if (destToken == IERC20(chai)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n\r\n                uint256 daiBalance = dai.balanceOf(address(this));\r\n                dai.universalApprove(address(chai), daiBalance);\r\n                chai.join(address(this), daiBalance);\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IBdai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IBdai is IERC20 {\r\n    function join(uint256) external;\r\n\r\n    function exit(uint256) external;\r\n}\r\n\r\n// File: contracts/OneSplitBdai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitBdaiBase {\r\n    IBdai internal constant bdai = IBdai(0x6a4FFAafa8DD400676Df8076AD6c724867b0e2e8);\r\n    IERC20 internal constant btu = IERC20(0xb683D83a532e2Cb7DFa5275eED3698436371cc9f);\r\n}\r\n\r\n\r\ncontract OneSplitBdaiView is OneSplitViewWrapBase, OneSplitBdaiBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_BDAI)) {\r\n            if (fromToken == IERC20(bdai)) {\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    dai,\r\n                    destToken,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 227_000, distribution);\r\n            }\r\n\r\n            if (destToken == IERC20(bdai)) {\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 295_000, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitBdai is OneSplitBaseWrap, OneSplitBdaiBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_BDAI)) {\r\n            if (fromToken == IERC20(bdai)) {\r\n                bdai.exit(amount);\r\n\r\n                uint256 btuBalance = btu.balanceOf(address(this));\r\n                if (btuBalance > 0) {\r\n                    (,uint256[] memory btuDistribution) = getExpectedReturn(\r\n                        btu,\r\n                        destToken,\r\n                        btuBalance,\r\n                        1,\r\n                        flags\r\n                    );\r\n\r\n                    _swap(\r\n                        btu,\r\n                        destToken,\r\n                        btuBalance,\r\n                        btuDistribution,\r\n                        flags\r\n                    );\r\n                }\r\n\r\n                return super._swap(\r\n                    dai,\r\n                    destToken,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            if (destToken == IERC20(bdai)) {\r\n                super._swap(fromToken, dai, amount, distribution, flags);\r\n\r\n                uint256 daiBalance = dai.balanceOf(address(this));\r\n                dai.universalApprove(address(bdai), daiBalance);\r\n                bdai.join(daiBalance);\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(fromToken, destToken, amount, distribution, flags);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IIearn.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IIearn is IERC20 {\r\n    function token() external view returns(IERC20);\r\n\r\n    function calcPoolValueInToken() external view returns(uint256);\r\n\r\n    function deposit(uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _shares) external;\r\n}\r\n\r\n// File: contracts/OneSplitIearn.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitIearnBase {\r\n    function _yTokens() internal pure returns(IIearn[13] memory) {\r\n        return [\r\n            IIearn(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01),\r\n            IIearn(0x04Aa51bbcB46541455cCF1B8bef2ebc5d3787EC9),\r\n            IIearn(0x73a052500105205d34Daf004eAb301916DA8190f),\r\n            IIearn(0x83f798e925BcD4017Eb265844FDDAbb448f1707D),\r\n            IIearn(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e),\r\n            IIearn(0xF61718057901F84C4eEC4339EF8f0D86D2B45600),\r\n            IIearn(0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE),\r\n            IIearn(0xC2cB1040220768554cf699b0d863A3cd4324ce32),\r\n            IIearn(0xE6354ed5bC4b393a5Aad09f21c46E101e692d447),\r\n            IIearn(0x26EA744E5B887E5205727f55dFBE8685e3b21951),\r\n            IIearn(0x99d1Fa417f94dcD62BfE781a1213c092a47041Bc),\r\n            IIearn(0x9777d7E2b60bB01759D0E2f8be2095df444cb07E),\r\n            IIearn(0x1bE5d71F2dA660BFdee8012dDc58D024448A0A59)\r\n        ];\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIearnView is OneSplitViewWrapBase, OneSplitIearnBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _iearnGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _iearnGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (!flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == !flags.check(FLAG_DISABLE_IEARN)) {\r\n            IIearn[13] memory yTokens = _yTokens();\r\n\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (fromToken == IERC20(yTokens[i])) {\r\n                    (returnAmount, estimateGasAmount, distribution) = _iearnGetExpectedReturn(\r\n                        yTokens[i].token(),\r\n                        destToken,\r\n                        amount\r\n                            .mul(yTokens[i].calcPoolValueInToken())\r\n                            .div(yTokens[i].totalSupply()),\r\n                        parts,\r\n                        flags,\r\n                        destTokenEthPriceTimesGasPrice\r\n                    );\r\n                    return (returnAmount, estimateGasAmount + 260_000, distribution);\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (destToken == IERC20(yTokens[i])) {\r\n                    uint256 _destTokenEthPriceTimesGasPrice = destTokenEthPriceTimesGasPrice;\r\n                    IERC20 token = yTokens[i].token();\r\n                    (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                        fromToken,\r\n                        token,\r\n                        amount,\r\n                        parts,\r\n                        flags,\r\n                        _destTokenEthPriceTimesGasPrice\r\n                            .mul(yTokens[i].calcPoolValueInToken())\r\n                            .div(yTokens[i].totalSupply())\r\n                    );\r\n\r\n                    return(\r\n                        returnAmount\r\n                            .mul(yTokens[i].totalSupply())\r\n                            .div(yTokens[i].calcPoolValueInToken()),\r\n                        estimateGasAmount + 743_000,\r\n                        distribution\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIearn is OneSplitBaseWrap, OneSplitIearnBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _iearnSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _iearnSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_IEARN)) {\r\n            IIearn[13] memory yTokens = _yTokens();\r\n\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (fromToken == IERC20(yTokens[i])) {\r\n                    IERC20 underlying = yTokens[i].token();\r\n                    yTokens[i].withdraw(amount);\r\n                    _iearnSwap(underlying, destToken, underlying.balanceOf(address(this)), distribution, flags);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (destToken == IERC20(yTokens[i])) {\r\n                    IERC20 underlying = yTokens[i].token();\r\n                    super._swap(fromToken, underlying, amount, distribution, flags);\r\n\r\n                    uint256 underlyingBalance = underlying.balanceOf(address(this));\r\n                    underlying.universalApprove(address(yTokens[i]), underlyingBalance);\r\n                    yTokens[i].deposit(underlyingBalance);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        return super._swap(fromToken, destToken, amount, distribution, flags);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IIdle.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IIdle is IERC20 {\r\n    function token()\r\n        external view returns (IERC20);\r\n\r\n    function tokenPrice()\r\n        external view returns (uint256);\r\n\r\n    function mintIdleToken(uint256 _amount, uint256[] calldata _clientProtocolAmounts)\r\n        external returns (uint256 mintedTokens);\r\n\r\n    function redeemIdleToken(uint256 _amount, bool _skipRebalance, uint256[] calldata _clientProtocolAmounts)\r\n        external returns (uint256 redeemedTokens);\r\n}\r\n\r\n// File: contracts/OneSplitIdle.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitIdleBase {\r\n    function _idleTokens() internal pure returns(IIdle[8] memory) {\r\n        // https://developers.idle.finance/contracts-and-codebase\r\n        return [\r\n            // V3\r\n            IIdle(0x78751B12Da02728F467A44eAc40F5cbc16Bd7934),\r\n            IIdle(0x12B98C621E8754Ae70d0fDbBC73D6208bC3e3cA6),\r\n            IIdle(0x63D27B3DA94A9E871222CB0A32232674B02D2f2D),\r\n            IIdle(0x1846bdfDB6A0f5c473dEc610144513bd071999fB),\r\n            IIdle(0xcDdB1Bceb7a1979C6caa0229820707429dd3Ec6C),\r\n            IIdle(0x42740698959761BAF1B06baa51EfBD88CB1D862B),\r\n            // V2\r\n            IIdle(0x10eC0D497824e342bCB0EDcE00959142aAa766dD),\r\n            IIdle(0xeB66ACc3d011056B00ea521F8203580C2E5d3991)\r\n        ];\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIdleView is OneSplitViewWrapBase, OneSplitIdleBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _idleGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _idleGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        internal\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (!flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == !flags.check(FLAG_DISABLE_IDLE)) {\r\n            IIdle[8] memory tokens = _idleTokens();\r\n\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                if (fromToken == IERC20(tokens[i])) {\r\n                    (returnAmount, estimateGasAmount, distribution) = _idleGetExpectedReturn(\r\n                        tokens[i].token(),\r\n                        destToken,\r\n                        amount.mul(tokens[i].tokenPrice()).div(1e18),\r\n                        parts,\r\n                        flags,\r\n                        destTokenEthPriceTimesGasPrice\r\n                    );\r\n                    return (returnAmount, estimateGasAmount + 2_400_000, distribution);\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                if (destToken == IERC20(tokens[i])) {\r\n                    uint256 _destTokenEthPriceTimesGasPrice = destTokenEthPriceTimesGasPrice;\r\n                    uint256 _price = tokens[i].tokenPrice();\r\n                    IERC20 token = tokens[i].token();\r\n                    (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                        fromToken,\r\n                        token,\r\n                        amount,\r\n                        parts,\r\n                        flags,\r\n                        _destTokenEthPriceTimesGasPrice.mul(_price).div(1e18)\r\n                    );\r\n                    return (returnAmount.mul(1e18).div(_price), estimateGasAmount + 1_300_000, distribution);\r\n                }\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIdle is OneSplitBaseWrap, OneSplitIdleBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _idleSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _idleSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        if (!flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == !flags.check(FLAG_DISABLE_IDLE)) {\r\n            IIdle[8] memory tokens = _idleTokens();\r\n\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                if (fromToken == IERC20(tokens[i])) {\r\n                    IERC20 underlying = tokens[i].token();\r\n                    uint256 minted = tokens[i].redeemIdleToken(amount, true, new uint256[](0));\r\n                    _idleSwap(underlying, destToken, minted, distribution, flags);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                if (destToken == IERC20(tokens[i])) {\r\n                    IERC20 underlying = tokens[i].token();\r\n                    super._swap(fromToken, underlying, amount, distribution, flags);\r\n\r\n                    uint256 underlyingBalance = underlying.balanceOf(address(this));\r\n                    underlying.universalApprove(address(tokens[i]), underlyingBalance);\r\n                    tokens[i].mintIdleToken(underlyingBalance, new uint256[](0));\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        return super._swap(fromToken, destToken, amount, distribution, flags);\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitAave.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitAaveBase {\r\n    function _getAaveUnderlyingToken(IERC20 token) internal pure returns(IERC20) {\r\n        if (token == IERC20(0x3a3A65aAb0dd2A17E3F1947bA16138cd37d08c04)) { // ETH\r\n            return IERC20(0);\r\n        }\r\n        if (token == IERC20(0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d)) { // DAI\r\n            return IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n        }\r\n        if (token == IERC20(0x9bA00D6856a4eDF4665BcA2C2309936572473B7E)) { // USDC\r\n            return IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n        }\r\n        if (token == IERC20(0x625aE63000f46200499120B906716420bd059240)) { // SUSD\r\n            return IERC20(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n        }\r\n        if (token == IERC20(0x6Ee0f7BB50a54AB5253dA0667B0Dc2ee526C30a8)) { // BUSD\r\n            return IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53);\r\n        }\r\n        if (token == IERC20(0x4DA9b813057D04BAef4e5800E36083717b4a0341)) { // TUSD\r\n            return IERC20(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n        }\r\n        if (token == IERC20(0x71fc860F7D3A592A4a98740e39dB31d25db65ae8)) { // USDT\r\n            return IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n        }\r\n        if (token == IERC20(0xE1BA0FB44CCb0D11b80F92f4f8Ed94CA3fF51D00)) { // BAT\r\n            return IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF);\r\n        }\r\n        if (token == IERC20(0x9D91BE44C06d373a8a226E1f3b146956083803eB)) { // KNC\r\n            return IERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\r\n        }\r\n        if (token == IERC20(0x7D2D3688Df45Ce7C552E19c27e007673da9204B8)) { // LEND\r\n            return IERC20(0x80fB784B7eD66730e8b1DBd9820aFD29931aab03);\r\n        }\r\n        if (token == IERC20(0xA64BD6C70Cb9051F6A9ba1F163Fdc07E0DfB5F84)) { // LINK\r\n            return IERC20(0x514910771AF9Ca656af840dff83E8264EcF986CA);\r\n        }\r\n        if (token == IERC20(0x6FCE4A401B6B80ACe52baAefE4421Bd188e76F6f)) { // MANA\r\n            return IERC20(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942);\r\n        }\r\n        if (token == IERC20(0x7deB5e830be29F91E298ba5FF1356BB7f8146998)) { // MKR\r\n            return IERC20(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2);\r\n        }\r\n        if (token == IERC20(0x71010A9D003445aC60C4e6A7017c1E89A477B438)) { // REP\r\n            return IERC20(0x1985365e9f78359a9B6AD760e32412f4a445E862);\r\n        }\r\n        if (token == IERC20(0x328C4c80BC7aCa0834Db37e6600A6c49E12Da4DE)) { // SNX\r\n            return IERC20(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F);\r\n        }\r\n        if (token == IERC20(0xFC4B8ED459e00e5400be803A9BB3954234FD50e3)) { // WBTC\r\n            return IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n        }\r\n        if (token == IERC20(0x6Fb0855c404E09c47C3fBCA25f08d4E41f9F062f)) { // ZRX\r\n            return IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498);\r\n        }\r\n\r\n        return IERC20(-1);\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitAaveView is OneSplitViewWrapBase, OneSplitAaveBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _aaveGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _aaveGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_AAVE)) {\r\n            IERC20 underlying = _getAaveUnderlyingToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                (returnAmount, estimateGasAmount, distribution) = _aaveGetExpectedReturn(\r\n                    underlying,\r\n                    destToken,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 670_000, distribution);\r\n            }\r\n\r\n            underlying = _getAaveUnderlyingToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 310_000, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitAave is OneSplitBaseWrap, OneSplitAaveBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _aaveSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _aaveSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_AAVE)) {\r\n            IERC20 underlying = _getAaveUnderlyingToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                IAaveToken(address(fromToken)).redeem(amount);\r\n\r\n                return _aaveSwap(\r\n                    underlying,\r\n                    destToken,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            underlying = _getAaveUnderlyingToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                underlying.universalApprove(aave.core(), underlyingAmount);\r\n                aave.deposit.value(underlying.isETH() ? underlyingAmount : 0)(\r\n                    underlying.isETH() ? ETH_ADDRESS : underlying,\r\n                    underlyingAmount,\r\n                    1101\r\n                );\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitWeth.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitWethView is OneSplitViewWrapBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _wethGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _wethGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_WETH)) {\r\n            if (fromToken == weth || fromToken == bancorEtherToken) {\r\n                return super.getExpectedReturnWithGas(ETH_ADDRESS, destToken, amount, parts, flags, destTokenEthPriceTimesGasPrice);\r\n            }\r\n\r\n            if (destToken == weth || destToken == bancorEtherToken) {\r\n                return super.getExpectedReturnWithGas(fromToken, ETH_ADDRESS, amount, parts, flags, destTokenEthPriceTimesGasPrice);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitWeth is OneSplitBaseWrap {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _wethSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _wethSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_WETH)) {\r\n            if (fromToken == weth) {\r\n                weth.withdraw(weth.balanceOf(address(this)));\r\n                super._swap(\r\n                    ETH_ADDRESS,\r\n                    destToken,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n                return;\r\n            }\r\n\r\n            if (fromToken == bancorEtherToken) {\r\n                bancorEtherToken.withdraw(bancorEtherToken.balanceOf(address(this)));\r\n                super._swap(\r\n                    ETH_ADDRESS,\r\n                    destToken,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n                return;\r\n            }\r\n\r\n            if (destToken == weth) {\r\n                _wethSwap(\r\n                    fromToken,\r\n                    ETH_ADDRESS,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n                weth.deposit.value(address(this).balance)();\r\n                return;\r\n            }\r\n\r\n            if (destToken == bancorEtherToken) {\r\n                _wethSwap(\r\n                    fromToken,\r\n                    ETH_ADDRESS,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n                bancorEtherToken.deposit.value(address(this).balance)();\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitMStable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitMStableView is OneSplitViewWrapBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_MSTABLE_MUSD)) {\r\n            if (fromToken == IERC20(musd)) {\r\n                if (destToken == usdc || destToken == dai || destToken == usdt || destToken == tusd) {\r\n                    (,, returnAmount) = musd_helper.getRedeemValidity(fromToken, amount, destToken);\r\n                    return (returnAmount, 300_000, new uint256[](DEXES_COUNT));\r\n                }\r\n                else {\r\n                    (,, returnAmount) = musd_helper.getRedeemValidity(fromToken, amount, dai);\r\n                    (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                        dai,\r\n                        destToken,\r\n                        returnAmount,\r\n                        parts,\r\n                        flags,\r\n                        destTokenEthPriceTimesGasPrice\r\n                    );\r\n                    return (returnAmount, estimateGasAmount + 300_000, distribution);\r\n                }\r\n            }\r\n\r\n            if (destToken == IERC20(musd)) {\r\n                if (fromToken == usdc || fromToken == dai || fromToken == usdt || fromToken == tusd) {\r\n                    (,, returnAmount) = musd.getSwapOutput(fromToken, destToken, amount);\r\n                    return (returnAmount, 300_000, new uint256[](DEXES_COUNT));\r\n                }\r\n                else {\r\n                    IERC20 _destToken = destToken;\r\n                    (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                        fromToken,\r\n                        dai,\r\n                        amount,\r\n                        parts,\r\n                        flags,\r\n                        _scaleDestTokenEthPriceTimesGasPrice(\r\n                            _destToken,\r\n                            dai,\r\n                            destTokenEthPriceTimesGasPrice\r\n                        )\r\n                    );\r\n                    (,, returnAmount) = musd_helper.getRedeemValidity(dai, returnAmount, destToken);\r\n                    return (returnAmount, estimateGasAmount + 300_000, distribution);\r\n                }\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitMStable is OneSplitBaseWrap {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_MSTABLE_MUSD)) {\r\n            if (fromToken == IERC20(musd)) {\r\n                if (destToken == usdc || destToken == dai || destToken == usdt || destToken == tusd) {\r\n                    (,, uint256 result) = musd_helper.getRedeemValidity(fromToken, amount, destToken);\r\n                    musd.redeem(\r\n                        destToken,\r\n                        result\r\n                    );\r\n                }\r\n                else {\r\n                    (,, uint256 result) = musd_helper.getRedeemValidity(fromToken, amount, dai);\r\n                    musd.redeem(\r\n                        dai,\r\n                        result\r\n                    );\r\n                    super._swap(\r\n                        dai,\r\n                        destToken,\r\n                        dai.balanceOf(address(this)),\r\n                        distribution,\r\n                        flags\r\n                    );\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (destToken == IERC20(musd)) {\r\n                if (fromToken == usdc || fromToken == dai || fromToken == usdt || fromToken == tusd) {\r\n                    fromToken.universalApprove(address(musd), amount);\r\n                    musd.swap(\r\n                        fromToken,\r\n                        destToken,\r\n                        amount,\r\n                        address(this)\r\n                    );\r\n                }\r\n                else {\r\n                    super._swap(\r\n                        fromToken,\r\n                        dai,\r\n                        amount,\r\n                        distribution,\r\n                        flags\r\n                    );\r\n                    musd.swap(\r\n                        dai,\r\n                        destToken,\r\n                        dai.balanceOf(address(this)),\r\n                        address(this)\r\n                    );\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IDMM.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IDMMController {\r\n    function getUnderlyingTokenForDmm(IERC20 token) external view returns(IERC20);\r\n}\r\n\r\n\r\ncontract IDMM is IERC20 {\r\n    function getCurrentExchangeRate() public view returns(uint256);\r\n    function mint(uint256 underlyingAmount) public returns(uint256);\r\n    function redeem(uint256 amount) public returns(uint256);\r\n}\r\n\r\n// File: contracts/OneSplitDMM.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitDMMBase {\r\n    IDMMController internal constant _dmmController = IDMMController(0x4CB120Dd1D33C9A3De8Bc15620C7Cd43418d77E2);\r\n\r\n    function _getDMMUnderlyingToken(IERC20 token) internal view returns(IERC20) {\r\n        (bool success, bytes memory data) = address(_dmmController).staticcall(\r\n            abi.encodeWithSelector(\r\n                _dmmController.getUnderlyingTokenForDmm.selector,\r\n                token\r\n            )\r\n        );\r\n\r\n        if (!success || data.length == 0) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        return abi.decode(data, (IERC20));\r\n    }\r\n\r\n    function _getDMMExchangeRate(IDMM dmm) internal view returns(uint256) {\r\n        (bool success, bytes memory data) = address(dmm).staticcall(\r\n            abi.encodeWithSelector(\r\n                dmm.getCurrentExchangeRate.selector\r\n            )\r\n        );\r\n\r\n        if (!success || data.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return abi.decode(data, (uint256));\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitDMMView is OneSplitViewWrapBase, OneSplitDMMBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _dmmGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _dmmGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_DMM)) {\r\n            IERC20 underlying = _getDMMUnderlyingToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                if (underlying == weth) {\r\n                    underlying = ETH_ADDRESS;\r\n                }\r\n                IERC20 _fromToken = fromToken;\r\n                (returnAmount, estimateGasAmount, distribution) = _dmmGetExpectedReturn(\r\n                    underlying,\r\n                    destToken,\r\n                    amount.mul(_getDMMExchangeRate(IDMM(address(_fromToken)))).div(1e18),\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 295_000, distribution);\r\n            }\r\n\r\n            underlying = _getDMMUnderlyingToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                if (underlying == weth) {\r\n                    underlying = ETH_ADDRESS;\r\n                }\r\n                uint256 price = _getDMMExchangeRate(IDMM(address(destToken)));\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice.mul(price).div(1e18)\r\n                );\r\n                return (\r\n                    returnAmount.mul(1e18).div(price),\r\n                    estimateGasAmount + 430_000,\r\n                    distribution\r\n                );\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitDMM is OneSplitBaseWrap, OneSplitDMMBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _dmmSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _dmmSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_DMM)) {\r\n            IERC20 underlying = _getDMMUnderlyingToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                IDMM(address(fromToken)).redeem(amount);\r\n                uint256 balance = underlying.universalBalanceOf(address(this));\r\n                if (underlying == weth) {\r\n                    weth.withdraw(balance);\r\n                }\r\n                _dmmSwap(\r\n                    (underlying == weth) ? ETH_ADDRESS : underlying,\r\n                    destToken,\r\n                    balance,\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            underlying = _getDMMUnderlyingToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    (underlying == weth) ? ETH_ADDRESS : underlying,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n\r\n                uint256 underlyingAmount = ((underlying == weth) ? ETH_ADDRESS : underlying).universalBalanceOf(address(this));\r\n                if (underlying == weth) {\r\n                    weth.deposit.value(underlyingAmount);\r\n                }\r\n\r\n                underlying.universalApprove(address(destToken), underlyingAmount);\r\n                IDMM(address(destToken)).mint(underlyingAmount);\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import \"./OneSplitSmartToken.sol\";\r\n\r\n\r\ncontract OneSplitViewWrap is\r\n    OneSplitViewWrapBase,\r\n    OneSplitMStableView,\r\n    OneSplitChaiView,\r\n    OneSplitBdaiView,\r\n    OneSplitAaveView,\r\n    OneSplitFulcrumView,\r\n    OneSplitCompoundView,\r\n    OneSplitIearnView,\r\n    OneSplitIdleView,\r\n    OneSplitWethView,\r\n    OneSplitDMMView,\r\n    OneSplitMultiPathView\r\n    //OneSplitSmartTokenView\r\n{\r\n    IOneSplitView public oneSplitView;\r\n\r\n    constructor(IOneSplitView _oneSplit) public {\r\n        oneSplitView = _oneSplit;\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _getExpectedReturnRespectingGasFloor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        internal\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return oneSplitView.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitWrap is\r\n    OneSplitBaseWrap,\r\n    OneSplitMStable,\r\n    OneSplitChai,\r\n    OneSplitBdai,\r\n    OneSplitAave,\r\n    OneSplitFulcrum,\r\n    OneSplitCompound,\r\n    OneSplitIearn,\r\n    OneSplitIdle,\r\n    OneSplitWeth,\r\n    OneSplitDMM,\r\n    OneSplitMultiPath\r\n    //OneSplitSmartToken\r\n{\r\n    IOneSplitView public oneSplitView;\r\n    IOneSplit public oneSplit;\r\n\r\n    constructor(IOneSplitView _oneSplitView, IOneSplit _oneSplit) public {\r\n        oneSplitView = _oneSplitView;\r\n        oneSplit = _oneSplit;\r\n    }\r\n\r\n    function() external payable {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(msg.sender != tx.origin);\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return oneSplitView.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGasMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        returnAmount = amount;\r\n        uint256[] memory dist;\r\n\r\n        for (uint i = 1; i < tokens.length; i++) {\r\n            if (tokens[i - 1] == tokens[i]) {\r\n                continue;\r\n            }\r\n\r\n            IERC20[] memory _tokens = tokens;\r\n\r\n            (\r\n                returnAmount,\r\n                amount,\r\n                dist\r\n            ) = getExpectedReturnWithGas(\r\n                _tokens[i - 1],\r\n                _tokens[i],\r\n                returnAmount,\r\n                parts,\r\n                flags,\r\n                _scaleDestTokenEthPriceTimesGasPrice(\r\n                    _tokens[_tokens.length - 1],\r\n                    _tokens[i],\r\n                    destTokenEthPriceTimesGasPrice\r\n                )\r\n            );\r\n            estimateGasAmount = estimateGasAmount.add(amount);\r\n            for (uint j = 0; j < distribution.length; j++) {\r\n                distribution[j] = distribution[j].add(dist[i] << (8 * (i - 1)));\r\n            }\r\n        }\r\n    }\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) public payable returns(uint256 returnAmount) {\r\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\r\n        uint256 confirmed = fromToken.universalBalanceOf(address(this));\r\n        _swap(fromToken, destToken, confirmed, distribution, flags);\r\n\r\n        returnAmount = destToken.universalBalanceOf(address(this));\r\n        require(returnAmount >= minReturn, \"OneSplit: actual return amount is less than minReturn\");\r\n        destToken.universalTransfer(msg.sender, returnAmount);\r\n        fromToken.universalTransfer(msg.sender, fromToken.universalBalanceOf(address(this)));\r\n    }\r\n\r\n    function swapMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) public payable returns(uint256 returnAmount) {\r\n        tokens[0].universalTransferFrom(msg.sender, address(this), amount);\r\n\r\n        returnAmount = tokens[0].universalBalanceOf(address(this));\r\n        for (uint i = 1; i < tokens.length; i++) {\r\n            uint256[] memory dist = new uint256[](distribution.length);\r\n            for (uint j = 0; j < distribution.length; j++) {\r\n                dist[j] = (distribution[j] >> (8 * (i - 1))) & 0xFF;\r\n            }\r\n\r\n            _swap(\r\n                tokens[i - 1],\r\n                tokens[i],\r\n                returnAmount,\r\n                dist,\r\n                flags\r\n            );\r\n            returnAmount = tokens[i].universalBalanceOf(address(this));\r\n            tokens[i - 1].universalTransfer(msg.sender, tokens[i - 1].universalBalanceOf(address(this)));\r\n        }\r\n\r\n        require(returnAmount >= minReturn, \"OneSplit: actual return amount is less than minReturn\");\r\n        tokens[tokens.length - 1].universalTransfer(msg.sender, returnAmount);\r\n    }\r\n\r\n    function _swapFloor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        fromToken.universalApprove(address(oneSplit), amount);\r\n        oneSplit.swap.value(fromToken.isETH() ? amount : 0)(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            0,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IOneSplitView\",\"name\":\"_oneSplitView\",\"type\":\"address\"},{\"internalType\":\"contract IOneSplit\",\"name\":\"_oneSplit\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTokenEthPriceTimesGasPrice\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturnWithGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTokenEthPriceTimesGasPrice\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturnWithGasMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneSplit\",\"outputs\":[{\"internalType\":\"contract IOneSplit\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneSplitView\",\"outputs\":[{\"internalType\":\"contract IOneSplitView\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"swapMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"OneSplitWrap","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000041f545ee237d35e50349bf2b97b3faec00ee09620000000000000000000000008f8550753a6861bb6dfe65a5215bcfd8c218a90f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8089c231d3f7d35008358ffd2a407620238c0078a5ed52d58ee1ac290b02360c"}]}