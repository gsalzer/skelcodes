{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\ncontract AlphaProjectToken is owned {\r\n    using SafeMath for uint256;\r\n    string public constant name = \"Alpha Project Token\";\r\n    string public constant symbol = \"APT\";\r\n    uint public constant decimals = 8;\r\n    uint constant ONETOKEN = 10 ** uint256(decimals);\r\n    uint constant MILLION = 1000000; \r\n    uint public totalSupply;\r\n    uint public DevSupply;\r\n    uint public GrowthPool;\r\n    uint public AirDrop;\r\n    uint public Rewards;                                \r\n    bool public DevSupply_Released = false;                     \r\n    bool public Token_AllowTransfer = false;                    \r\n    uint public Collected_Ether;\r\n    uint public Total_SoldToken;\r\n    uint public DevSupplyReleaseDate = now + (730 days);\r\n\r\n    constructor() public {  \r\n        totalSupply = (100 * MILLION).mul(ONETOKEN);                        \r\n        DevSupply = totalSupply.mul(5).div(100);\r\n        GrowthPool = totalSupply.mul(5).div(100);\r\n        AirDrop = totalSupply.mul(5).div(100);                  \r\n        balanceOf[msg.sender] = totalSupply.sub(DevSupply);                            \r\n    }\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => bool) public airdropped;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Whitelisted(address indexed target, bool whitelist);\r\n    event IcoFinished(bool finish);\r\n    \r\n    modifier notLocked{\r\n        require(Token_AllowTransfer == true || msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function unlockDevTokenSupply() onlyOwner public {\r\n        require(now >= DevSupplyReleaseDate, \"not yet time to release.\");                              \r\n        require(DevSupply_Released == false, \"tokens already released.\");       \r\n        balanceOf[owner] += DevSupply;\r\n        emit Transfer(0, this, DevSupply);\r\n        emit Transfer(this, owner, DevSupply);\r\n        DevSupply = 0;                                         \r\n        DevSupply_Released = true;                          \r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);     \r\n        \r\n        require (balanceOf[_from] >= _value); \r\n        require (balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n    function transfer(address _to, uint256 _value) public {\r\n        require(AirDrop <= 0, \"AirDrop is not yet finished\");\r\n        require(Token_AllowTransfer, \"Token transfer is not yet allowed.\");\r\n        _transferToken(msg.sender, _to, _value);\r\n    }\r\n    function _transferToken(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    function() payable public {\r\n        require(AirDrop > 0, \"AirDrop is finished.\");\r\n        require(airdropped[msg.sender] == false, \"you already have claimed AirDrop Tokens.\");\r\n        setAirDropAddress(msg.sender);\r\n        uint sendToken = 888 * ONETOKEN;\r\n        if(AirDrop < sendToken){\r\n            sendToken = AirDrop;\r\n            Token_AllowTransfer = true;\r\n        }\r\n        AirDrop -= sendToken;\r\n        _transfer(owner, msg.sender, sendToken);\r\n\r\n        if(msg.value > 0){\r\n            owner.transfer(msg.value);\r\n        }\r\n    }\r\n\r\n    function setAirDropAddress(address addr) internal {\r\n        airdropped[addr] = true;\r\n        emit Whitelisted(addr, true);\r\n    }\r\n    function setTokenTransferStatus(bool status) onlyOwner public {\r\n        Token_AllowTransfer = status;\r\n    }\r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DevSupply_Released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_AllowTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Collected_Ether\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GrowthPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTokenTransferStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AirDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DevSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_SoldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockDevTokenSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DevSupplyReleaseDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"finish\",\"type\":\"bool\"}],\"name\":\"IcoFinished\",\"type\":\"event\"}]","ContractName":"AlphaProjectToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://201f32f74a8d53f4fea5eccdd40f553fb857dacc2f72b0c35ec186252243fd9b"}]}