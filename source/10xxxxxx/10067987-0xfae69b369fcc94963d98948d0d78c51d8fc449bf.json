{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\ninterface Uniswap{\r\n    function getExchange(address token) external view returns (address exchange);\r\n     // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    \r\n}\r\n\r\ninterface Token{\r\n    function getTokens(address sendTo) external payable;\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function primary() external view returns (address payable);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n}\r\n\r\ncontract Secondary{\r\n    \r\n    address constant public OUSDAddress = 0xD2d01dd6Aa7a2F5228c7c17298905A7C7E1dfE81;\r\n    \r\n    modifier onlyPrimary() {\r\n        require(msg.sender == primary(), \"Secondary: caller is not the primary account\");\r\n        _;\r\n    }\r\n\r\n    function primary() internal view returns (address payable) {\r\n        return Token(OUSDAddress).primary();\r\n    }\r\n}\r\n\r\ncontract Arb is Secondary{\r\n    \r\n    address constant public UniswapFactoryAddress = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\r\n    address public OUSDPoolAddress;\r\n    \r\n    uint constant public INF = 33136721784;\r\n    \r\n    constructor () public {\r\n        OUSDPoolAddress = Uniswap(UniswapFactoryAddress).getExchange(OUSDAddress);\r\n        \r\n        uint zero = 0;\r\n        uint one = 1;\r\n        \r\n        address OSPVAddress  = 0xFCCe9526E030F1691966d5A651F5EbE1A5B4C8E4;\r\n        address OSPVSAddress = 0xf7D1f35518950E78c18E5A442097cA07962f4D8A;\r\n        \r\n        address OSPVPoolAddress  = Uniswap(UniswapFactoryAddress).getExchange(OSPVAddress);\r\n        address OSPVPoolSAddress = Uniswap(UniswapFactoryAddress).getExchange(OSPVSAddress);\r\n        \r\n        Token(OSPVAddress).approve(OSPVPoolAddress, zero - one);\r\n        Token(OSPVSAddress).approve(OSPVPoolSAddress, zero - one);\r\n    }\r\n    \r\n    function () external payable {}\r\n    \r\n    //combines two calls into one, sees if this contract is approved to move your tokens\r\n    function isitApproved(address UserAddress, address AssetAddress) public view returns (uint){\r\n        \r\n        uint value = 0;\r\n        \r\n        if(Token(OUSDAddress).allowance(UserAddress,address(this)) > 2**128 ){\r\n            value = 2;\r\n        }\r\n        \r\n        if(Token(AssetAddress).allowance(UserAddress,address(this)) > 2**128 ){\r\n            value = value + 1;\r\n        }\r\n        \r\n        return value;\r\n    }\r\n    \r\n    function addToken(address tokenAddress) public onlyPrimary{\r\n        \r\n        address TokenPoolAddress = Uniswap(UniswapFactoryAddress).getExchange(tokenAddress);\r\n        \r\n        uint zero = 0;\r\n        uint one = 1;\r\n        \r\n        Token(tokenAddress).approve(TokenPoolAddress, zero - one);\r\n    }\r\n    \r\n    function OUSDtoETH(uint OUSDInput, uint ETHOutput) public{\r\n        \r\n        //transfer ousd from user to this contract\r\n        require( Token(OUSDAddress).transferFrom(msg.sender, address(this), OUSDInput), \"Could not move OUSD to this contract, no approval?\");\r\n        \r\n        //transfer ousd from this contract to uniswap\r\n        uint ethReceived = Uniswap(OUSDPoolAddress).tokenToEthSwapInput(OUSDInput,1, INF);\r\n\r\n        //send eth to OUSDcontract\r\n        if(ETHOutput == 0){\r\n            //send all output from uniswap to OUSD contract\r\n            Token(OUSDAddress).getTokens.value(ethReceived)(msg.sender);\r\n        \r\n        }else{\r\n            //send only some output from uniswap to OUSD contract, send only \"ETHOutput\" amount.\r\n            Token(OUSDAddress).getTokens.value(ETHOutput)(msg.sender);\r\n            msg.sender.transfer(ethReceived);\r\n        }\r\n    }\r\n    \r\n    function ETHtoOUSD(uint OUSDOutput) public payable{\r\n        \r\n        //Buy OUSD and give it to user\r\n        uint OUSDbought = Uniswap(OUSDPoolAddress).ethToTokenTransferInput.value(msg.value)(1, INF, msg.sender);\r\n        \r\n        //send OUSD from user to OUSDcontract\r\n        if(OUSDOutput == 0){\r\n            //send all output from uniswap to OUSD contract\r\n            require( Token(OUSDAddress).transferFrom(msg.sender, OUSDAddress, OUSDbought) , \"Couldnt transfer OUSD from user to OUSD contract\");\r\n        \r\n        }else{\r\n            //send only some output from uniswap to OUSD contract, send only \"OUSDOutput\" amount.\r\n            require( Token(OUSDAddress).transferFrom(msg.sender, OUSDAddress, OUSDOutput) , \"Couldnt transfer OUSD from user to OUSD contract\");\r\n        }\r\n    }\r\n    \r\n    function OUSDtoAsset(address AssetAddress, uint OUSDInput, uint AssetOutput) public {\r\n        \r\n         //transfer ousd from user to this contract\r\n        require( Token(OUSDAddress).transferFrom(msg.sender, address(this), OUSDInput), \"Could not move OUSD to this contract, no approval?\");\r\n        \r\n        //trade OUSD for Asset and send asset to user\r\n        uint AssetBought = Uniswap(OUSDPoolAddress).tokenToTokenTransferInput(OUSDInput, 1, 1, INF, msg.sender, AssetAddress);\r\n        \r\n        if(AssetOutput == 0){\r\n            //send all asset from user to asset contract\r\n            require( Token(AssetAddress).transferFrom(msg.sender, AssetAddress, AssetBought), \"Could not transfer Asset to Asset contract.\");\r\n\r\n        }else{\r\n            //send some asset from user to asset contract\r\n            require( Token(AssetAddress).transferFrom(msg.sender, AssetAddress, AssetOutput), \"Could not transfer Asset to Asset contract.\");\r\n        }\r\n    }\r\n    \r\n    function AssettoETH(address AssetAddress, uint AssetInput, uint ETHOutput) public {\r\n        \r\n        //transfer Asset from user to this contract\r\n        require( Token(AssetAddress).transferFrom(msg.sender, address(this), AssetInput), \"Could not move Asset to this contract, no approval?\");\r\n        \r\n        address AssetPoolAddress = Uniswap(UniswapFactoryAddress).getExchange(AssetAddress);\r\n        \r\n        //transfer Asset from this contract to uniswap\r\n        uint ethReceived = Uniswap(AssetPoolAddress).tokenToEthSwapInput(AssetInput, 1, INF);\r\n       \r\n        //send eth to Asset contract\r\n        if(ETHOutput == 0){\r\n            //send all output from uniswap to Asset contract\r\n            Token(AssetAddress).getTokens.value(ethReceived)(msg.sender);\r\n            \r\n        }else{\r\n            //send only some output from uniswap to Asset contract, send only \"ETHOutput\" amount.\r\n            Token(AssetAddress).getTokens.value(ETHOutput)(msg.sender);\r\n            msg.sender.transfer(ethReceived);\r\n        }\r\n    }\r\n    \r\n    function AssettoOUSD(address AssetAddress, uint AssetInput, uint OUSDOutput) public {\r\n        \r\n        //transfer Asset from user to this contract\r\n        require( Token(AssetAddress).transferFrom(msg.sender, address(this), AssetInput), \"Could not move Asset to this contract, no approval?\");\r\n        \r\n        address AssetPoolAddress = Uniswap(UniswapFactoryAddress).getExchange(AssetAddress);\r\n        \r\n        //trade Asset for OUSD and send OUSD to user\r\n        uint OUSDBought = Uniswap(AssetPoolAddress).tokenToTokenTransferInput(AssetInput, 1, 1, INF, msg.sender, OUSDAddress);\r\n        \r\n        if(OUSDOutput == 0){\r\n            //send all OUSD from user to asset contract\r\n            require( Token(OUSDAddress).transferFrom(msg.sender, AssetAddress, OUSDBought), \"Could not transfer OUSD to Asset contract.\");\r\n\r\n        }else{\r\n            //send some OUSD from user to asset contract\r\n            require( Token(OUSDAddress).transferFrom(msg.sender, AssetAddress, OUSDOutput), \"Could not transfer OUSD to Asset contract.\");\r\n        }\r\n    }\r\n    \r\n    function getStuckTokens(address _tokenAddress) public {\r\n        Token(_tokenAddress).transfer(primary(), Token(_tokenAddress).balanceOf(address(this)));\r\n    }\r\n    \r\n    function getStuckETH() public {\r\n        primary().transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"AssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"AssetInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHOutput\",\"type\":\"uint256\"}],\"name\":\"AssettoETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"AssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"AssetInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OUSDOutput\",\"type\":\"uint256\"}],\"name\":\"AssettoOUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"OUSDOutput\",\"type\":\"uint256\"}],\"name\":\"ETHtoOUSD\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OUSDAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OUSDPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"AssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"OUSDInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AssetOutput\",\"type\":\"uint256\"}],\"name\":\"OUSDtoAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"OUSDInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHOutput\",\"type\":\"uint256\"}],\"name\":\"OUSDtoETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UniswapFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getStuckETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getStuckTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"AssetAddress\",\"type\":\"address\"}],\"name\":\"isitApproved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Arb","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8892ac2bda1c21bfa5c8470754e4a1e2b923de9c743415c01441802625fe8167"}]}