{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/oracle/interfaces/FinderInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title Provides addresses of the live contracts implementing certain interfaces.\r\n * @dev Examples are the Oracle or Store interfaces.\r\n */\r\ninterface FinderInterface {\r\n    /**\r\n     * @notice Updates the address of the contract that implements `interfaceName`.\r\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\r\n     * @param implementationAddress address of the deployed contract that implements the interface.\r\n     */\r\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\r\n\r\n    /**\r\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\r\n     * @param interfaceName queried interface.\r\n     * @return implementationAddress address of the deployed contract that implements the interface.\r\n     */\r\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/common/implementation/Lockable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\r\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\r\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\r\n */\r\ncontract Lockable {\r\n    bool private _notEntered;\r\n\r\n    constructor() internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _preEntranceCheck();\r\n        _preEntranceSet();\r\n        _;\r\n        _postEntranceReset();\r\n    }\r\n\r\n    /**\r\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\r\n     */\r\n    modifier nonReentrantView() {\r\n        _preEntranceCheck();\r\n        _;\r\n    }\r\n\r\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\r\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being re-entered.\r\n    // Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and then call `_postEntranceReset()`.\r\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\r\n    function _preEntranceCheck() internal view {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    function _preEntranceSet() internal {\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n    }\r\n\r\n    function _postEntranceReset() internal {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: contracts/common/implementation/AddressWhitelist.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title A contract to track a whitelist of addresses.\r\n */\r\ncontract AddressWhitelist is Ownable, Lockable {\r\n    enum Status { None, In, Out }\r\n    mapping(address => Status) public whitelist;\r\n\r\n    address[] public whitelistIndices;\r\n\r\n    event AddedToWhitelist(address indexed addedAddress);\r\n    event RemovedFromWhitelist(address indexed removedAddress);\r\n\r\n    /**\r\n     * @notice Adds an address to the whitelist.\r\n     * @param newElement the new address to add.\r\n     */\r\n    function addToWhitelist(address newElement) external nonReentrant() onlyOwner {\r\n        // Ignore if address is already included\r\n        if (whitelist[newElement] == Status.In) {\r\n            return;\r\n        }\r\n\r\n        // Only append new addresses to the array, never a duplicate\r\n        if (whitelist[newElement] == Status.None) {\r\n            whitelistIndices.push(newElement);\r\n        }\r\n\r\n        whitelist[newElement] = Status.In;\r\n\r\n        emit AddedToWhitelist(newElement);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes an address from the whitelist.\r\n     * @param elementToRemove the existing address to remove.\r\n     */\r\n    function removeFromWhitelist(address elementToRemove) external nonReentrant() onlyOwner {\r\n        if (whitelist[elementToRemove] != Status.Out) {\r\n            whitelist[elementToRemove] = Status.Out;\r\n            emit RemovedFromWhitelist(elementToRemove);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks whether an address is on the whitelist.\r\n     * @param elementToCheck the address to check.\r\n     * @return True if `elementToCheck` is on the whitelist, or False.\r\n     */\r\n    function isOnWhitelist(address elementToCheck) external view nonReentrantView() returns (bool) {\r\n        return whitelist[elementToCheck] == Status.In;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets all addresses that are currently included in the whitelist.\r\n     * @dev Note: This method skips over, but still iterates through addresses. It is possible for this call to run out\r\n     * of gas if a large number of addresses have been removed. To reduce the likelihood of this unlikely scenario, we\r\n     * can modify the implementation so that when addresses are removed, the last addresses in the array is moved to\r\n     * the empty index.\r\n     * @return activeWhitelist the list of addresses on the whitelist.\r\n     */\r\n    function getWhitelist() external view nonReentrantView() returns (address[] memory activeWhitelist) {\r\n        // Determine size of whitelist first\r\n        uint256 activeCount = 0;\r\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\r\n            if (whitelist[whitelistIndices[i]] == Status.In) {\r\n                activeCount++;\r\n            }\r\n        }\r\n\r\n        // Populate whitelist\r\n        activeWhitelist = new address[](activeCount);\r\n        activeCount = 0;\r\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\r\n            address addr = whitelistIndices[i];\r\n            if (whitelist[addr] == Status.In) {\r\n                activeWhitelist[activeCount] = addr;\r\n                activeCount++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/common/implementation/MultiRole.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary Exclusive {\r\n    struct RoleMembership {\r\n        address member;\r\n    }\r\n\r\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\r\n        return roleMembership.member == memberToCheck;\r\n    }\r\n\r\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\r\n        require(newMember != address(0x0), \"Cannot set an exclusive role to 0x0\");\r\n        roleMembership.member = newMember;\r\n    }\r\n\r\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\r\n        return roleMembership.member;\r\n    }\r\n\r\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\r\n        resetMember(roleMembership, initialMember);\r\n    }\r\n}\r\n\r\n\r\nlibrary Shared {\r\n    struct RoleMembership {\r\n        mapping(address => bool) members;\r\n    }\r\n\r\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\r\n        return roleMembership.members[memberToCheck];\r\n    }\r\n\r\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\r\n        require(memberToAdd != address(0x0), \"Cannot add 0x0 to a shared role\");\r\n        roleMembership.members[memberToAdd] = true;\r\n    }\r\n\r\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\r\n        roleMembership.members[memberToRemove] = false;\r\n    }\r\n\r\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\r\n        for (uint256 i = 0; i < initialMembers.length; i++) {\r\n            addMember(roleMembership, initialMembers[i]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Base class to manage permissions for the derived class.\r\n */\r\nabstract contract MultiRole {\r\n    using Exclusive for Exclusive.RoleMembership;\r\n    using Shared for Shared.RoleMembership;\r\n\r\n    enum RoleType { Invalid, Exclusive, Shared }\r\n\r\n    struct Role {\r\n        uint256 managingRole;\r\n        RoleType roleType;\r\n        Exclusive.RoleMembership exclusiveRoleMembership;\r\n        Shared.RoleMembership sharedRoleMembership;\r\n    }\r\n\r\n    mapping(uint256 => Role) private roles;\r\n\r\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\r\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\r\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\r\n\r\n    /**\r\n     * @notice Reverts unless the caller is a member of the specified roleId.\r\n     */\r\n    modifier onlyRoleHolder(uint256 roleId) {\r\n        require(holdsRole(roleId, msg.sender), \"Sender does not hold required role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\r\n     */\r\n    modifier onlyRoleManager(uint256 roleId) {\r\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \"Can only be called by a role manager\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\r\n     */\r\n    modifier onlyExclusive(uint256 roleId) {\r\n        require(roles[roleId].roleType == RoleType.Exclusive, \"Must be called on an initialized Exclusive role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\r\n     */\r\n    modifier onlyShared(uint256 roleId) {\r\n        require(roles[roleId].roleType == RoleType.Shared, \"Must be called on an initialized Shared role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `memberToCheck` is a member of roleId.\r\n     * @dev Reverts if roleId does not correspond to an initialized role.\r\n     * @param roleId the Role to check.\r\n     * @param memberToCheck the address to check.\r\n     * @return True if `memberToCheck` is a member of `roleId`.\r\n     */\r\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\r\n        Role storage role = roles[roleId];\r\n        if (role.roleType == RoleType.Exclusive) {\r\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\r\n        } else if (role.roleType == RoleType.Shared) {\r\n            return role.sharedRoleMembership.isMember(memberToCheck);\r\n        }\r\n        revert(\"Invalid roleId\");\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\r\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\r\n     * initialized, ExclusiveRole.\r\n     * @param roleId the ExclusiveRole membership to modify.\r\n     * @param newMember the new ExclusiveRole member.\r\n     */\r\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\r\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\r\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current holder of the exclusive role, `roleId`.\r\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\r\n     * @param roleId the ExclusiveRole membership to check.\r\n     * @return the address of the current ExclusiveRole member.\r\n     */\r\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\r\n        return roles[roleId].exclusiveRoleMembership.getMember();\r\n    }\r\n\r\n    /**\r\n     * @notice Adds `newMember` to the shared role, `roleId`.\r\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\r\n     * managing role for `roleId`.\r\n     * @param roleId the SharedRole membership to modify.\r\n     * @param newMember the new SharedRole member.\r\n     */\r\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\r\n        roles[roleId].sharedRoleMembership.addMember(newMember);\r\n        emit AddedSharedMember(roleId, newMember, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\r\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\r\n     * managing role for `roleId`.\r\n     * @param roleId the SharedRole membership to modify.\r\n     * @param memberToRemove the current SharedRole member to remove.\r\n     */\r\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\r\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\r\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes caller from the role, `roleId`.\r\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\r\n     * initialized, SharedRole.\r\n     * @param roleId the SharedRole membership to modify.\r\n     */\r\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\r\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\r\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Reverts if `roleId` is not initialized.\r\n     */\r\n    modifier onlyValidRole(uint256 roleId) {\r\n        require(roles[roleId].roleType != RoleType.Invalid, \"Attempted to use an invalid roleId\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Reverts if `roleId` is initialized.\r\n     */\r\n    modifier onlyInvalidRole(uint256 roleId) {\r\n        require(roles[roleId].roleType == RoleType.Invalid, \"Cannot use a pre-existing role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\r\n     * `initialMembers` will be immediately added to the role.\r\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\r\n     * initialized.\r\n     */\r\n    function _createSharedRole(\r\n        uint256 roleId,\r\n        uint256 managingRoleId,\r\n        address[] memory initialMembers\r\n    ) internal onlyInvalidRole(roleId) {\r\n        Role storage role = roles[roleId];\r\n        role.roleType = RoleType.Shared;\r\n        role.managingRole = managingRoleId;\r\n        role.sharedRoleMembership.init(initialMembers);\r\n        require(\r\n            roles[managingRoleId].roleType != RoleType.Invalid,\r\n            \"Attempted to use an invalid role to manage a shared role\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\r\n     * `initialMember` will be immediately added to the role.\r\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\r\n     * initialized.\r\n     */\r\n    function _createExclusiveRole(\r\n        uint256 roleId,\r\n        uint256 managingRoleId,\r\n        address initialMember\r\n    ) internal onlyInvalidRole(roleId) {\r\n        Role storage role = roles[roleId];\r\n        role.roleType = RoleType.Exclusive;\r\n        role.managingRole = managingRoleId;\r\n        role.exclusiveRoleMembership.init(initialMember);\r\n        require(\r\n            roles[managingRoleId].roleType != RoleType.Invalid,\r\n            \"Attempted to use an invalid role to manage an exclusive role\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/oracle/interfaces/RegistryInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title Interface for a registry of contracts and contract creators.\r\n */\r\ninterface RegistryInterface {\r\n    /**\r\n     * @notice Registers a new contract.\r\n     * @dev Only authorized contract creators can call this method.\r\n     * @param parties an array of addresses who become parties in the contract.\r\n     * @param contractAddress defines the address of the deployed contract.\r\n     */\r\n    function registerContract(address[] calldata parties, address contractAddress) external;\r\n\r\n    /**\r\n     * @notice Returns whether the contract has been registered with the registry.\r\n     * @dev If it is registered, it is an authorized participant in the UMA system.\r\n     * @param contractAddress address of the contract.\r\n     * @return bool indicates whether the contract is registered.\r\n     */\r\n    function isContractRegistered(address contractAddress) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns a list of all contracts that are associated with a particular party.\r\n     * @param party address of the party.\r\n     * @return an array of the contracts the party is registered to.\r\n     */\r\n    function getRegisteredContracts(address party) external view returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Returns all registered contracts.\r\n     * @return all registered contract addresses within the system.\r\n     */\r\n    function getAllRegisteredContracts() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Adds a party to the calling contract.\r\n     * @dev msg.sender must be the contract to which the party member is added.\r\n     * @param party address to be added to the contract.\r\n     */\r\n    function addPartyToContract(address party) external;\r\n\r\n    /**\r\n     * @notice Removes a party member to the calling contract.\r\n     * @dev msg.sender must be the contract to which the party member is added.\r\n     * @param party address to be removed from the contract.\r\n     */\r\n    function removePartyFromContract(address party) external;\r\n\r\n    /**\r\n     * @notice checks if an address is a party in a contract.\r\n     * @param party party to check.\r\n     * @param contractAddress address to check against the party.\r\n     * @return bool indicating if the address is a party of the contract.\r\n     */\r\n    function isPartyMemberOfContract(address party, address contractAddress) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/oracle/implementation/Registry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Registry for financial contracts and approved financial contract creators.\r\n * @dev Maintains a whitelist of financial contract creators that are allowed\r\n * to register new financial contracts and stores party members of a financial contract.\r\n */\r\ncontract Registry is RegistryInterface, MultiRole {\r\n    using SafeMath for uint256;\r\n\r\n    /****************************************\r\n     *    INTERNAL VARIABLES AND STORAGE    *\r\n     ****************************************/\r\n\r\n    enum Roles {\r\n        Owner, // The owner manages the set of ContractCreators.\r\n        ContractCreator // Can register financial contracts.\r\n    }\r\n\r\n    // This enum is required because a `WasValid` state is required\r\n    // to ensure that financial contracts cannot be re-registered.\r\n    enum Validity { Invalid, Valid }\r\n\r\n    // Local information about a contract.\r\n    struct FinancialContract {\r\n        Validity valid;\r\n        uint128 index;\r\n    }\r\n\r\n    struct Party {\r\n        address[] contracts; // Each financial contract address is stored in this array.\r\n        // The address of each financial contract is mapped to its index for constant time look up and deletion.\r\n        mapping(address => uint256) contractIndex;\r\n    }\r\n\r\n    // Array of all contracts that are approved to use the UMA Oracle.\r\n    address[] public registeredContracts;\r\n\r\n    // Map of financial contract contracts to the associated FinancialContract struct.\r\n    mapping(address => FinancialContract) public contractMap;\r\n\r\n    // Map each party member to their their associated Party struct.\r\n    mapping(address => Party) private partyMap;\r\n\r\n    /****************************************\r\n     *                EVENTS                *\r\n     ****************************************/\r\n\r\n    event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties);\r\n    event PartyAdded(address indexed contractAddress, address indexed party);\r\n    event PartyRemoved(address indexed contractAddress, address indexed party);\r\n\r\n    /**\r\n     * @notice Construct the Registry contract.\r\n     */\r\n    constructor() public {\r\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\r\n        // Start with no contract creators registered.\r\n        _createSharedRole(uint256(Roles.ContractCreator), uint256(Roles.Owner), new address[](0));\r\n    }\r\n\r\n    /****************************************\r\n     *        REGISTRATION FUNCTIONS        *\r\n     ****************************************/\r\n\r\n    /**\r\n     * @notice Registers a new financial contract.\r\n     * @dev Only authorized contract creators can call this method.\r\n     * @param parties array of addresses who become parties in the contract.\r\n     * @param contractAddress address of the contract against which the parties are registered.\r\n     */\r\n    function registerContract(address[] calldata parties, address contractAddress)\r\n        external\r\n        override\r\n        onlyRoleHolder(uint256(Roles.ContractCreator))\r\n    {\r\n        FinancialContract storage financialContract = contractMap[contractAddress];\r\n        require(contractMap[contractAddress].valid == Validity.Invalid, \"Can only register once\");\r\n\r\n        // Store contract address as a registered contract.\r\n        registeredContracts.push(contractAddress);\r\n\r\n        // No length check necessary because we should never hit (2^127 - 1) contracts.\r\n        financialContract.index = uint128(registeredContracts.length.sub(1));\r\n\r\n        // For all parties in the array add them to the contract's parties.\r\n        financialContract.valid = Validity.Valid;\r\n        for (uint256 i = 0; i < parties.length; i = i.add(1)) {\r\n            _addPartyToContract(parties[i], contractAddress);\r\n        }\r\n\r\n        emit NewContractRegistered(contractAddress, msg.sender, parties);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a party member to the calling contract.\r\n     * @dev msg.sender will be used to determine the contract that this party is added to.\r\n     * @param party new party for the calling contract.\r\n     */\r\n    function addPartyToContract(address party) external override {\r\n        address contractAddress = msg.sender;\r\n        require(contractMap[contractAddress].valid == Validity.Valid, \"Can only add to valid contract\");\r\n\r\n        _addPartyToContract(party, contractAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes a party member from the calling contract.\r\n     * @dev msg.sender will be used to determine the contract that this party is removed from.\r\n     * @param partyAddress address to be removed from the calling contract.\r\n     */\r\n    function removePartyFromContract(address partyAddress) external override {\r\n        address contractAddress = msg.sender;\r\n        Party storage party = partyMap[partyAddress];\r\n        uint256 numberOfContracts = party.contracts.length;\r\n\r\n        require(numberOfContracts != 0, \"Party has no contracts\");\r\n        require(contractMap[contractAddress].valid == Validity.Valid, \"Remove only from valid contract\");\r\n        require(isPartyMemberOfContract(partyAddress, contractAddress), \"Can only remove existing party\");\r\n\r\n        // Index of the current location of the contract to remove.\r\n        uint256 deleteIndex = party.contractIndex[contractAddress];\r\n\r\n        // Store the last contract's address to update the lookup map.\r\n        address lastContractAddress = party.contracts[numberOfContracts - 1];\r\n\r\n        // Swap the contract to be removed with the last contract.\r\n        party.contracts[deleteIndex] = lastContractAddress;\r\n\r\n        // Update the lookup index with the new location.\r\n        party.contractIndex[lastContractAddress] = deleteIndex;\r\n\r\n        // Pop the last contract from the array and update the lookup map.\r\n        party.contracts.pop();\r\n        delete party.contractIndex[contractAddress];\r\n\r\n        emit PartyRemoved(contractAddress, partyAddress);\r\n    }\r\n\r\n    /****************************************\r\n     *         REGISTRY STATE GETTERS       *\r\n     ****************************************/\r\n\r\n    /**\r\n     * @notice Returns whether the contract has been registered with the registry.\r\n     * @dev If it is registered, it is an authorized participant in the UMA system.\r\n     * @param contractAddress address of the financial contract.\r\n     * @return bool indicates whether the contract is registered.\r\n     */\r\n    function isContractRegistered(address contractAddress) external override view returns (bool) {\r\n        return contractMap[contractAddress].valid == Validity.Valid;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns a list of all contracts that are associated with a particular party.\r\n     * @param party address of the party.\r\n     * @return an array of the contracts the party is registered to.\r\n     */\r\n    function getRegisteredContracts(address party) external override view returns (address[] memory) {\r\n        return partyMap[party].contracts;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns all registered contracts.\r\n     * @return all registered contract addresses within the system.\r\n     */\r\n    function getAllRegisteredContracts() external override view returns (address[] memory) {\r\n        return registeredContracts;\r\n    }\r\n\r\n    /**\r\n     * @notice checks if an address is a party of a contract.\r\n     * @param party party to check.\r\n     * @param contractAddress address to check against the party.\r\n     * @return bool indicating if the address is a party of the contract.\r\n     */\r\n    function isPartyMemberOfContract(address party, address contractAddress) public override view returns (bool) {\r\n        uint256 index = partyMap[party].contractIndex[contractAddress];\r\n        return partyMap[party].contracts.length > index && partyMap[party].contracts[index] == contractAddress;\r\n    }\r\n\r\n    /****************************************\r\n     *           INTERNAL FUNCTIONS         *\r\n     ****************************************/\r\n\r\n    function _addPartyToContract(address party, address contractAddress) internal {\r\n        require(!isPartyMemberOfContract(party, contractAddress), \"Can only register a party once\");\r\n        uint256 contractIndex = partyMap[party].contracts.length;\r\n        partyMap[party].contracts.push(contractAddress);\r\n        partyMap[party].contractIndex[contractAddress] = contractIndex;\r\n\r\n        emit PartyAdded(contractAddress, party);\r\n    }\r\n}\r\n\r\n// File: contracts/oracle/implementation/Constants.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\r\n */\r\nlibrary OracleInterfaces {\r\n    bytes32 public constant Oracle = \"Oracle\";\r\n    bytes32 public constant IdentifierWhitelist = \"IdentifierWhitelist\";\r\n    bytes32 public constant Store = \"Store\";\r\n    bytes32 public constant FinancialContractsAdmin = \"FinancialContractsAdmin\";\r\n    bytes32 public constant Registry = \"Registry\";\r\n    bytes32 public constant CollateralWhitelist = \"CollateralWhitelist\";\r\n}\r\n\r\n// File: contracts/oracle/implementation/ContractCreator.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Base contract for all financial contract creators\r\n */\r\nabstract contract ContractCreator {\r\n    address internal finderAddress;\r\n\r\n    constructor(address _finderAddress) public {\r\n        finderAddress = _finderAddress;\r\n    }\r\n\r\n    function _requireWhitelistedCollateral(address collateralAddress) internal view {\r\n        FinderInterface finder = FinderInterface(finderAddress);\r\n        AddressWhitelist collateralWhitelist = AddressWhitelist(\r\n            finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist)\r\n        );\r\n        require(collateralWhitelist.isOnWhitelist(collateralAddress), \"Collateral not whitelisted\");\r\n    }\r\n\r\n    function _registerContract(address[] memory parties, address contractToRegister) internal {\r\n        FinderInterface finder = FinderInterface(finderAddress);\r\n        Registry registry = Registry(finder.getImplementationAddress(OracleInterfaces.Registry));\r\n        registry.registerContract(parties, contractToRegister);\r\n    }\r\n}\r\n\r\n// File: contracts/common/implementation/Timer.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title Universal store of current contract time for testing environments.\r\n */\r\ncontract Timer {\r\n    uint256 private currentTime;\r\n\r\n    constructor() public {\r\n        currentTime = now; // solhint-disable-line not-rely-on-time\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the current time.\r\n     * @dev Will revert if not running in test mode.\r\n     * @param time timestamp to set `currentTime` to.\r\n     */\r\n    function setCurrentTime(uint256 time) external {\r\n        currentTime = time;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\r\n     * Otherwise, it will return the block timestamp.\r\n     * @return uint256 for the current Testable timestamp.\r\n     */\r\n    function getCurrentTime() public view returns (uint256) {\r\n        return currentTime;\r\n    }\r\n}\r\n\r\n// File: contracts/common/implementation/Testable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Base class that provides time overrides, but only if being run in test mode.\r\n */\r\nabstract contract Testable {\r\n    // If the contract is being run on the test network, then `timerAddress` will be the 0x0 address.\r\n    // Note: this variable should be set on construction and never modified.\r\n    address public timerAddress;\r\n\r\n    /**\r\n     * @notice Constructs the Testable contract. Called by child contracts.\r\n     * @param _timerAddress Contract that stores the current time in a testing environment.\r\n     * Must be set to 0x0 for production environments that use live time.\r\n     */\r\n    constructor(address _timerAddress) internal {\r\n        timerAddress = _timerAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Reverts if not running in test mode.\r\n     */\r\n    modifier onlyIfTest {\r\n        require(timerAddress != address(0x0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the current time.\r\n     * @dev Will revert if not running in test mode.\r\n     * @param time timestamp to set current Testable time to.\r\n     */\r\n    function setCurrentTime(uint256 time) external onlyIfTest {\r\n        Timer(timerAddress).setCurrentTime(time);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\r\n     * Otherwise, it will return the block timestamp.\r\n     * @return uint for the current Testable timestamp.\r\n     */\r\n    function getCurrentTime() public view returns (uint256) {\r\n        if (timerAddress != address(0x0)) {\r\n            return Timer(timerAddress).getCurrentTime();\r\n        } else {\r\n            return now; // solhint-disable-line not-rely-on-time\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/common/implementation/FixedPoint.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Library for fixed point arithmetic on uints\r\n */\r\nlibrary FixedPoint {\r\n    using SafeMath for uint256;\r\n\r\n    // Supports 18 decimals. E.g., 1e18 represents \"1\", 5e17 represents \"0.5\".\r\n    // Can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\r\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\r\n\r\n    struct Unsigned {\r\n        uint256 rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5**18`.\r\n     * @param a uint to convert into a FixedPoint.\r\n     * @return the converted FixedPoint.\r\n     */\r\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\r\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is equal to `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a uint256.\r\n     * @return True if equal, or False.\r\n     */\r\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\r\n        return a.rawValue == fromUnscaledUint(b).rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is equal to `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return True if equal, or False.\r\n     */\r\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\r\n        return a.rawValue == b.rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is greater than `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return True if `a > b`, or False.\r\n     */\r\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\r\n        return a.rawValue > b.rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is greater than `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a uint256.\r\n     * @return True if `a > b`, or False.\r\n     */\r\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\r\n        return a.rawValue > fromUnscaledUint(b).rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is greater than `b`.\r\n     * @param a a uint256.\r\n     * @param b a FixedPoint.\r\n     * @return True if `a > b`, or False.\r\n     */\r\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\r\n        return fromUnscaledUint(a).rawValue > b.rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is greater than or equal to `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return True if `a >= b`, or False.\r\n     */\r\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\r\n        return a.rawValue >= b.rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is greater than or equal to `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a uint256.\r\n     * @return True if `a >= b`, or False.\r\n     */\r\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\r\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is greater than or equal to `b`.\r\n     * @param a a uint256.\r\n     * @param b a FixedPoint.\r\n     * @return True if `a >= b`, or False.\r\n     */\r\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\r\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is less than `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return True if `a < b`, or False.\r\n     */\r\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\r\n        return a.rawValue < b.rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is less than `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a uint256.\r\n     * @return True if `a < b`, or False.\r\n     */\r\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\r\n        return a.rawValue < fromUnscaledUint(b).rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is less than `b`.\r\n     * @param a a uint256.\r\n     * @param b a FixedPoint.\r\n     * @return True if `a < b`, or False.\r\n     */\r\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\r\n        return fromUnscaledUint(a).rawValue < b.rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is less than or equal to `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return True if `a <= b`, or False.\r\n     */\r\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\r\n        return a.rawValue <= b.rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is less than or equal to `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a uint256.\r\n     * @return True if `a <= b`, or False.\r\n     */\r\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\r\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Whether `a` is less than or equal to `b`.\r\n     * @param a a uint256.\r\n     * @param b a FixedPoint.\r\n     * @return True if `a <= b`, or False.\r\n     */\r\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\r\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\r\n    }\r\n\r\n    /**\r\n     * @notice The minimum of `a` and `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return the minimum of `a` and `b`.\r\n     */\r\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\r\n        return a.rawValue < b.rawValue ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @notice The maximum of `a` and `b`.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return the maximum of `a` and `b`.\r\n     */\r\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\r\n        return a.rawValue > b.rawValue ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @notice Adds two `Unsigned`s, reverting on overflow.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return the sum of `a` and `b`.\r\n     */\r\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\r\n        return Unsigned(a.rawValue.add(b.rawValue));\r\n    }\r\n\r\n    /**\r\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\r\n     * @param a a FixedPoint.\r\n     * @param b a uint256.\r\n     * @return the sum of `a` and `b`.\r\n     */\r\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\r\n        return add(a, fromUnscaledUint(b));\r\n    }\r\n\r\n    /**\r\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return the difference of `a` and `b`.\r\n     */\r\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\r\n        return Unsigned(a.rawValue.sub(b.rawValue));\r\n    }\r\n\r\n    /**\r\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\r\n     * @param a a FixedPoint.\r\n     * @param b a uint256.\r\n     * @return the difference of `a` and `b`.\r\n     */\r\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\r\n        return sub(a, fromUnscaledUint(b));\r\n    }\r\n\r\n    /**\r\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\r\n     * @param a a uint256.\r\n     * @param b a FixedPoint.\r\n     * @return the difference of `a` and `b`.\r\n     */\r\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\r\n        return sub(fromUnscaledUint(a), b);\r\n    }\r\n\r\n    /**\r\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\r\n     * @dev This will \"floor\" the product.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return the product of `a` and `b`.\r\n     */\r\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\r\n        // There are two caveats with this computation:\r\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\r\n        // stored internally as a uint256 ~10^59.\r\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\r\n        // would round to 3, but this computation produces the result 2.\r\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\r\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\r\n     * @dev This will \"floor\" the product.\r\n     * @param a a FixedPoint.\r\n     * @param b a uint256.\r\n     * @return the product of `a` and `b`.\r\n     */\r\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\r\n        return Unsigned(a.rawValue.mul(b));\r\n    }\r\n\r\n    /**\r\n     * @notice Multiplies two `Unsigned`s and \"ceil's\" the product, reverting on overflow.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return the product of `a` and `b`.\r\n     */\r\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\r\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\r\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\r\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\r\n        if (mod != 0) {\r\n            return Unsigned(mulFloor.add(1));\r\n        } else {\r\n            return Unsigned(mulFloor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \"ceil's\" the product, reverting on overflow.\r\n     * @param a a FixedPoint.\r\n     * @param b a FixedPoint.\r\n     * @return the product of `a` and `b`.\r\n     */\r\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\r\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\r\n        return Unsigned(a.rawValue.mul(b));\r\n    }\r\n\r\n    /**\r\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\r\n     * @dev This will \"floor\" the quotient.\r\n     * @param a a FixedPoint numerator.\r\n     * @param b a FixedPoint denominator.\r\n     * @return the quotient of `a` divided by `b`.\r\n     */\r\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\r\n        // There are two caveats with this computation:\r\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\r\n        // 10^41 is stored internally as a uint256 10^59.\r\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\r\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\r\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\r\n    }\r\n\r\n    /**\r\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\r\n     * @dev This will \"floor\" the quotient.\r\n     * @param a a FixedPoint numerator.\r\n     * @param b a uint256 denominator.\r\n     * @return the quotient of `a` divided by `b`.\r\n     */\r\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\r\n        return Unsigned(a.rawValue.div(b));\r\n    }\r\n\r\n    /**\r\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\r\n     * @dev This will \"floor\" the quotient.\r\n     * @param a a uint256 numerator.\r\n     * @param b a FixedPoint denominator.\r\n     * @return the quotient of `a` divided by `b`.\r\n     */\r\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\r\n        return div(fromUnscaledUint(a), b);\r\n    }\r\n\r\n    /**\r\n     * @notice Divides one `Unsigned` by an `Unsigned` and \"ceil's\" the quotient, reverting on overflow or division by 0.\r\n     * @param a a FixedPoint numerator.\r\n     * @param b a FixedPoint denominator.\r\n     * @return the quotient of `a` divided by `b`.\r\n     */\r\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\r\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\r\n        uint256 divFloor = aScaled.div(b.rawValue);\r\n        uint256 mod = aScaled.mod(b.rawValue);\r\n        if (mod != 0) {\r\n            return Unsigned(divFloor.add(1));\r\n        } else {\r\n            return Unsigned(divFloor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \"ceil's\" the quotient, reverting on overflow or division by 0.\r\n     * @param a a FixedPoint numerator.\r\n     * @param b a uint256 denominator.\r\n     * @return the quotient of `a` divided by `b`.\r\n     */\r\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\r\n        // Because it is possible that a quotient gets truncated, we can't just call \"Unsigned(a.rawValue.div(b))\"\r\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\r\n        // This creates the possibility of overflow if b is very large.\r\n        return divCeil(a, fromUnscaledUint(b));\r\n    }\r\n\r\n    /**\r\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\r\n     * @dev This will \"floor\" the result.\r\n     * @param a a FixedPoint numerator.\r\n     * @param b a uint256 denominator.\r\n     * @return output is `a` to the power of `b`.\r\n     */\r\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\r\n        output = fromUnscaledUint(1);\r\n        for (uint256 i = 0; i < b; i = i.add(1)) {\r\n            output = mul(output, a);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/common/interfaces/ExpandedIERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface that includes burn and mint methods.\r\n */\r\nabstract contract ExpandedIERC20 is IERC20 {\r\n    /**\r\n     * @notice Burns a specific amount of the caller's tokens.\r\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\r\n     */\r\n    function burn(uint256 value) external virtual;\r\n\r\n    /**\r\n     * @notice Mints tokens and adds them to the balance of the `to` address.\r\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\r\n     */\r\n    function mint(address to, uint256 value) external virtual returns (bool);\r\n}\r\n\r\n// File: contracts/oracle/interfaces/OracleInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title Financial contract facing Oracle interface.\r\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\r\n */\r\ninterface OracleInterface {\r\n    /**\r\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\r\n     * @dev Time must be in the past and the identifier must be supported.\r\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\r\n     * @param time unix timestamp for the price request.\r\n     */\r\n    function requestPrice(bytes32 identifier, uint256 time) external;\r\n\r\n    /**\r\n     * @notice Whether the price for `identifier` and `time` is available.\r\n     * @dev Time must be in the past and the identifier must be supported.\r\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\r\n     * @param time unix timestamp for the price request.\r\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\r\n     */\r\n    function hasPrice(bytes32 identifier, uint256 time) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\r\n     * @dev If the price is not available, the method reverts.\r\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\r\n     * @param time unix timestamp for the price request.\r\n     * @return int256 representing the resolved price for the given identifier and timestamp.\r\n     */\r\n    function getPrice(bytes32 identifier, uint256 time) external view returns (int256);\r\n}\r\n\r\n// File: contracts/oracle/interfaces/IdentifierWhitelistInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\r\n */\r\ninterface IdentifierWhitelistInterface {\r\n    /**\r\n     * @notice Adds the provided identifier as a supported identifier.\r\n     * @dev Price requests using this identifier will succeed after this call.\r\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\r\n     */\r\n    function addSupportedIdentifier(bytes32 identifier) external;\r\n\r\n    /**\r\n     * @notice Removes the identifier from the whitelist.\r\n     * @dev Price requests using this identifier will no longer succeed after this call.\r\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\r\n     */\r\n    function removeSupportedIdentifier(bytes32 identifier) external;\r\n\r\n    /**\r\n     * @notice Checks whether an identifier is on the whitelist.\r\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\r\n     * @return bool if the identifier is supported (or not).\r\n     */\r\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\r\n}\r\n\r\n// File: contracts/oracle/interfaces/AdministrateeInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title Interface that all financial contracts expose to the admin.\r\n */\r\ninterface AdministrateeInterface {\r\n    /**\r\n     * @notice Initiates the shutdown process, in case of an emergency.\r\n     */\r\n    function emergencyShutdown() external;\r\n\r\n    /**\r\n     * @notice A core contract method called independently or as a part of other financial contract transactions.\r\n     * @dev It pays fees and moves money between margin accounts to make sure they reflect the NAV of the contract.\r\n     */\r\n    function remargin() external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/common/implementation/ExpandedERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title An ERC20 with permissioned burning and minting. The contract deployer will initially\r\n * be the owner who is capable of adding new roles.\r\n */\r\ncontract ExpandedERC20 is ExpandedIERC20, ERC20, MultiRole {\r\n    enum Roles {\r\n        // Can set the minter and burner.\r\n        Owner,\r\n        // Addresses that can mint new tokens.\r\n        Minter,\r\n        // Addresses that can burn tokens that address owns.\r\n        Burner\r\n    }\r\n\r\n    /**\r\n     * @notice Constructs the ExpandedERC20.\r\n     * @param _tokenName The name which describes the new token.\r\n     * @param _tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\r\n     * @param _tokenDecimals The number of decimals to define token precision.\r\n     */\r\n    constructor(\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        uint8 _tokenDecimals\r\n    ) public ERC20(_tokenName, _tokenSymbol) {\r\n        _setupDecimals(_tokenDecimals);\r\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\r\n        _createSharedRole(uint256(Roles.Minter), uint256(Roles.Owner), new address[](0));\r\n        _createSharedRole(uint256(Roles.Burner), uint256(Roles.Owner), new address[](0));\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `value` tokens to `recipient`, returning true on success.\r\n     * @param recipient address to mint to.\r\n     * @param value amount of tokens to mint.\r\n     * @return True if the mint succeeded, or False.\r\n     */\r\n    function mint(address recipient, uint256 value)\r\n        external\r\n        override\r\n        onlyRoleHolder(uint256(Roles.Minter))\r\n        returns (bool)\r\n    {\r\n        _mint(recipient, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns `value` tokens owned by `msg.sender`.\r\n     * @param value amount of tokens to burn.\r\n     */\r\n    function burn(uint256 value) external override onlyRoleHolder(uint256(Roles.Burner)) {\r\n        _burn(msg.sender, value);\r\n    }\r\n}\r\n\r\n// File: contracts/financial-templates/common/SyntheticToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Burnable and mintable ERC20.\r\n * @dev The contract deployer will initially be the only minter, burner and owner capable of adding new roles.\r\n */\r\n\r\ncontract SyntheticToken is ExpandedERC20, Lockable {\r\n    /**\r\n     * @notice Constructs the SyntheticToken.\r\n     * @param tokenName The name which describes the new token.\r\n     * @param tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\r\n     * @param tokenDecimals The number of decimals to define token precision.\r\n     */\r\n    constructor(\r\n        string memory tokenName,\r\n        string memory tokenSymbol,\r\n        uint8 tokenDecimals\r\n    ) public ExpandedERC20(tokenName, tokenSymbol, tokenDecimals) nonReentrant() {}\r\n\r\n    /**\r\n     * @notice Add Minter role to account.\r\n     * @dev The caller must have the Owner role.\r\n     * @param account The address to which the Minter role is added.\r\n     */\r\n    function addMinter(address account) external nonReentrant() {\r\n        addMember(uint256(Roles.Minter), account);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove Minter role from account.\r\n     * @dev The caller must have the Owner role.\r\n     * @param account The address from which the Minter role is removed.\r\n     */\r\n    function removeMinter(address account) external nonReentrant() {\r\n        removeMember(uint256(Roles.Minter), account);\r\n    }\r\n\r\n    /**\r\n     * @notice Add Burner role to account.\r\n     * @dev The caller must have the Owner role.\r\n     * @param account The address to which the Burner role is added.\r\n     */\r\n    function addBurner(address account) external nonReentrant() {\r\n        addMember(uint256(Roles.Burner), account);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes Burner role from account.\r\n     * @dev The caller must have the Owner role.\r\n     * @param account The address from which the Burner role is removed.\r\n     */\r\n    function removeBurner(address account) external nonReentrant() {\r\n        removeMember(uint256(Roles.Burner), account);\r\n    }\r\n\r\n    /**\r\n     * @notice Reset Owner role to account.\r\n     * @dev The caller must have the Owner role.\r\n     * @param account The new holder of the Owner role.\r\n     */\r\n    function resetOwner(address account) external nonReentrant() {\r\n        resetMember(uint256(Roles.Owner), account);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if a given account holds the Minter role.\r\n     * @param account The address which is checked for the Minter role.\r\n     * @return bool True if the provided account is a Minter.\r\n     */\r\n    function isMinter(address account) public view nonReentrantView() returns (bool) {\r\n        return holdsRole(uint256(Roles.Minter), account);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if a given account holds the Burner role.\r\n     * @param account The address which is checked for the Burner role.\r\n     * @return bool True if the provided account is a Burner.\r\n     */\r\n    function isBurner(address account) public view nonReentrantView() returns (bool) {\r\n        return holdsRole(uint256(Roles.Burner), account);\r\n    }\r\n}\r\n\r\n// File: contracts/financial-templates/common/TokenFactory.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Factory for creating new mintable and burnable tokens.\r\n */\r\n\r\ncontract TokenFactory is Lockable {\r\n    /**\r\n     * @notice Create a new token and return it to the caller.\r\n     * @dev The caller will become the only minter and burner and the new owner capable of assigning the roles.\r\n     * @param tokenName used to describe the new token.\r\n     * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars.\r\n     * @param tokenDecimals used to define the precision used in the token's numerical representation.\r\n     * @return newToken an instance of the newly created token interface.\r\n     */\r\n    function createToken(\r\n        string calldata tokenName,\r\n        string calldata tokenSymbol,\r\n        uint8 tokenDecimals\r\n    ) external nonReentrant() returns (ExpandedIERC20 newToken) {\r\n        SyntheticToken mintableToken = new SyntheticToken(tokenName, tokenSymbol, tokenDecimals);\r\n        mintableToken.addMinter(msg.sender);\r\n        mintableToken.addBurner(msg.sender);\r\n        mintableToken.resetOwner(msg.sender);\r\n        newToken = ExpandedIERC20(address(mintableToken));\r\n    }\r\n}\r\n\r\n// File: contracts/oracle/interfaces/StoreInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Interface that allows financial contracts to pay oracle fees for their use of the system.\r\n */\r\ninterface StoreInterface {\r\n    /**\r\n     * @notice Pays Oracle fees in ETH to the store.\r\n     * @dev To be used by contracts whose margin currency is ETH.\r\n     */\r\n    function payOracleFees() external payable;\r\n\r\n    /**\r\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\r\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\r\n     * @param erc20Address address of the ERC20 token used to pay the fee.\r\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\r\n     */\r\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external;\r\n\r\n    /**\r\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\r\n     * @param startTime defines the beginning time from which the fee is paid.\r\n     * @param endTime end time until which the fee is paid.\r\n     * @param pfc \"profit from corruption\", or the maximum amount of margin currency that a\r\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\r\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\r\n     * @return latePenalty for paying the fee after the deadline.\r\n     */\r\n    function computeRegularFee(\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        FixedPoint.Unsigned calldata pfc\r\n    ) external view returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty);\r\n\r\n    /**\r\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\r\n     * @param currency token used to pay the final fee.\r\n     * @return finalFee amount due.\r\n     */\r\n    function computeFinalFee(address currency) external view returns (FixedPoint.Unsigned memory);\r\n}\r\n\r\n// File: contracts/financial-templates/common/FeePayer.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title FeePayer contract.\r\n * @notice Provides fee payment functionality for the ExpiringMultiParty contract.\r\n * contract is abstract as each derived contract that inherits `FeePayer` must implement `pfc()`.\r\n */\r\n\r\nabstract contract FeePayer is Testable, Lockable {\r\n    using SafeMath for uint256;\r\n    using FixedPoint for FixedPoint.Unsigned;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /****************************************\r\n     *      FEE PAYER DATA STRUCTURES       *\r\n     ****************************************/\r\n\r\n    // The collateral currency used to back the positions in this contract.\r\n    IERC20 public collateralCurrency;\r\n\r\n    // Finder contract used to look up addresses for UMA system contracts.\r\n    FinderInterface public finder;\r\n\r\n    // Tracks the last block time when the fees were paid.\r\n    uint256 private lastPaymentTime;\r\n\r\n    // Tracks the cumulative fees that have been paid by the contract for use by derived contracts.\r\n    // The multiplier starts at 1, and is updated by computing cumulativeFeeMultiplier * (1 - effectiveFee).\r\n    // Put another way, the cumulativeFeeMultiplier is (1 - effectiveFee1) * (1 - effectiveFee2) ...\r\n    // For example:\r\n    // The cumulativeFeeMultiplier should start at 1.\r\n    // If a 1% fee is charged, the multiplier should update to .99.\r\n    // If another 1% fee is charged, the multiplier should be 0.99^2 (0.9801).\r\n    FixedPoint.Unsigned public cumulativeFeeMultiplier;\r\n\r\n    /****************************************\r\n     *                EVENTS                *\r\n     ****************************************/\r\n\r\n    event RegularFeesPaid(uint256 indexed regularFee, uint256 indexed lateFee);\r\n    event FinalFeesPaid(uint256 indexed amount);\r\n\r\n    /****************************************\r\n     *              MODIFIERS               *\r\n     ****************************************/\r\n\r\n    // modifier that calls payRegularFees().\r\n    modifier fees {\r\n        payRegularFees();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructs the FeePayer contract. Called by child contracts.\r\n     * @param _collateralAddress ERC20 token that is used as the underlying collateral for the synthetic.\r\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\r\n     * @param _timerAddress Contract that stores the current time in a testing environment.\r\n     * Must be set to 0x0 for production environments that use live time.\r\n     */\r\n    constructor(\r\n        address _collateralAddress,\r\n        address _finderAddress,\r\n        address _timerAddress\r\n    ) public Testable(_timerAddress) nonReentrant() {\r\n        collateralCurrency = IERC20(_collateralAddress);\r\n        finder = FinderInterface(_finderAddress);\r\n        lastPaymentTime = getCurrentTime();\r\n        cumulativeFeeMultiplier = FixedPoint.fromUnscaledUint(1);\r\n    }\r\n\r\n    /****************************************\r\n     *        FEE PAYMENT FUNCTIONS         *\r\n     ****************************************/\r\n\r\n    /**\r\n     * @notice Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.\r\n     * @dev These must be paid periodically for the life of the contract. If the contract has not paid its regular fee\r\n     * in a week or more then a late penalty is applied which is sent to the caller. If the amount of\r\n     * fees owed are greater than the pfc, then this will pay as much as possible from the available collateral.\r\n     * An event is only fired if the fees charged are greater than 0.\r\n     * @return totalPaid Amount of collateral that the contract paid (sum of the amount paid to the Store and caller).\r\n     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.\r\n     */\r\n    function payRegularFees() public nonReentrant() returns (FixedPoint.Unsigned memory totalPaid) {\r\n        StoreInterface store = _getStore();\r\n        uint256 time = getCurrentTime();\r\n        FixedPoint.Unsigned memory collateralPool = _pfc();\r\n\r\n        // Exit early if there is no collateral from which to pay fees.\r\n        if (collateralPool.isEqual(0)) {\r\n            return totalPaid;\r\n        }\r\n\r\n        // Exit early if fees were already paid during this block.\r\n        if (lastPaymentTime == time) {\r\n            return totalPaid;\r\n        }\r\n\r\n        (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty) = store.computeRegularFee(\r\n            lastPaymentTime,\r\n            time,\r\n            collateralPool\r\n        );\r\n        lastPaymentTime = time;\r\n\r\n        totalPaid = regularFee.add(latePenalty);\r\n        if (totalPaid.isEqual(0)) {\r\n            return totalPaid;\r\n        }\r\n        // If the effective fees paid as a % of the pfc is > 100%, then we need to reduce it and make the contract pay\r\n        // as much of the fee that it can (up to 100% of its pfc). We'll reduce the late penalty first and then the\r\n        // regular fee, which has the effect of paying the store first, followed by the caller if there is any fee remaining.\r\n        if (totalPaid.isGreaterThan(collateralPool)) {\r\n            FixedPoint.Unsigned memory deficit = totalPaid.sub(collateralPool);\r\n            FixedPoint.Unsigned memory latePenaltyReduction = FixedPoint.min(latePenalty, deficit);\r\n            latePenalty = latePenalty.sub(latePenaltyReduction);\r\n            deficit = deficit.sub(latePenaltyReduction);\r\n            regularFee = regularFee.sub(FixedPoint.min(regularFee, deficit));\r\n            totalPaid = collateralPool;\r\n        }\r\n\r\n        emit RegularFeesPaid(regularFee.rawValue, latePenalty.rawValue);\r\n\r\n        _adjustCumulativeFeeMultiplier(totalPaid, collateralPool);\r\n\r\n        if (regularFee.isGreaterThan(0)) {\r\n            collateralCurrency.safeIncreaseAllowance(address(store), regularFee.rawValue);\r\n            store.payOracleFeesErc20(address(collateralCurrency), regularFee);\r\n        }\r\n\r\n        if (latePenalty.isGreaterThan(0)) {\r\n            collateralCurrency.safeTransfer(msg.sender, latePenalty.rawValue);\r\n        }\r\n        return totalPaid;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\r\n     * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\r\n     * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\r\n     * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\r\n     */\r\n    function pfc() public view nonReentrantView() returns (FixedPoint.Unsigned memory) {\r\n        return _pfc();\r\n    }\r\n\r\n    /****************************************\r\n     *         INTERNAL FUNCTIONS           *\r\n     ****************************************/\r\n\r\n    // Pays UMA Oracle final fees of `amount` in `collateralCurrency` to the Store contract. Final fee is a flat fee\r\n    // charged for each price request. If payer is the contract, adjusts internal bookkeeping variables. If payer is not\r\n    // the contract, pulls in `amount` of collateral currency.\r\n    function _payFinalFees(address payer, FixedPoint.Unsigned memory amount) internal {\r\n        if (amount.isEqual(0)) {\r\n            return;\r\n        }\r\n\r\n        if (payer != address(this)) {\r\n            // If the payer is not the contract pull the collateral from the payer.\r\n            collateralCurrency.safeTransferFrom(payer, address(this), amount.rawValue);\r\n        } else {\r\n            // If the payer is the contract, adjust the cumulativeFeeMultiplier to compensate.\r\n            FixedPoint.Unsigned memory collateralPool = _pfc();\r\n\r\n            // The final fee must be < available collateral or the fee will be larger than 100%.\r\n            require(collateralPool.isGreaterThan(amount), \"Final fee is more than PfC\");\r\n\r\n            _adjustCumulativeFeeMultiplier(amount, collateralPool);\r\n        }\r\n\r\n        emit FinalFeesPaid(amount.rawValue);\r\n\r\n        StoreInterface store = _getStore();\r\n        collateralCurrency.safeIncreaseAllowance(address(store), amount.rawValue);\r\n        store.payOracleFeesErc20(address(collateralCurrency), amount);\r\n    }\r\n\r\n    function _pfc() internal virtual view returns (FixedPoint.Unsigned memory);\r\n\r\n    function _getStore() internal view returns (StoreInterface) {\r\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\r\n    }\r\n\r\n    function _computeFinalFees() internal view returns (FixedPoint.Unsigned memory finalFees) {\r\n        StoreInterface store = _getStore();\r\n        return store.computeFinalFee(address(collateralCurrency));\r\n    }\r\n\r\n    // Returns the user's collateral minus any fees that have been subtracted since it was originally\r\n    // deposited into the contract. Note: if the contract has paid fees since it was deployed, the raw\r\n    // value should be larger than the returned value.\r\n    function _getFeeAdjustedCollateral(FixedPoint.Unsigned memory rawCollateral)\r\n        internal\r\n        view\r\n        returns (FixedPoint.Unsigned memory collateral)\r\n    {\r\n        return rawCollateral.mul(cumulativeFeeMultiplier);\r\n    }\r\n\r\n    // Converts a user-readable collateral value into a raw value that accounts for already-assessed fees. If any fees\r\n    // have been taken from this contract in the past, then the raw value will be larger than the user-readable value.\r\n    function _convertToRawCollateral(FixedPoint.Unsigned memory collateral)\r\n        internal\r\n        view\r\n        returns (FixedPoint.Unsigned memory rawCollateral)\r\n    {\r\n        return collateral.div(cumulativeFeeMultiplier);\r\n    }\r\n\r\n    // Decrease rawCollateral by a fee-adjusted collateralToRemove amount. Fee adjustment scales up collateralToRemove\r\n    // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\r\n    // rawCollateral is decreased by less than expected. Because this method is usually called in conjunction with an\r\n    // actual removal of collateral from this contract, return the fee-adjusted amount that the rawCollateral is\r\n    // decreased by so that the caller can minimize error between collateral removed and rawCollateral debited.\r\n    function _removeCollateral(FixedPoint.Unsigned storage rawCollateral, FixedPoint.Unsigned memory collateralToRemove)\r\n        internal\r\n        returns (FixedPoint.Unsigned memory removedCollateral)\r\n    {\r\n        FixedPoint.Unsigned memory initialBalance = _getFeeAdjustedCollateral(rawCollateral);\r\n        FixedPoint.Unsigned memory adjustedCollateral = _convertToRawCollateral(collateralToRemove);\r\n        rawCollateral.rawValue = rawCollateral.sub(adjustedCollateral).rawValue;\r\n        removedCollateral = initialBalance.sub(_getFeeAdjustedCollateral(rawCollateral));\r\n    }\r\n\r\n    // Increase rawCollateral by a fee-adjusted collateralToAdd amount. Fee adjustment scales up collateralToAdd\r\n    // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\r\n    // rawCollateral is increased by less than expected. Because this method is usually called in conjunction with an\r\n    // actual addition of collateral to this contract, return the fee-adjusted amount that the rawCollateral is\r\n    // increased by so that the caller can minimize error between collateral added and rawCollateral credited.\r\n    // NOTE: This return value exists only for the sake of symmetry with _removeCollateral. We don't actually use it\r\n    // because we are OK if more collateral is stored in the contract than is represented by rawTotalPositionCollateral.\r\n    function _addCollateral(FixedPoint.Unsigned storage rawCollateral, FixedPoint.Unsigned memory collateralToAdd)\r\n        internal\r\n        returns (FixedPoint.Unsigned memory addedCollateral)\r\n    {\r\n        FixedPoint.Unsigned memory initialBalance = _getFeeAdjustedCollateral(rawCollateral);\r\n        FixedPoint.Unsigned memory adjustedCollateral = _convertToRawCollateral(collateralToAdd);\r\n        rawCollateral.rawValue = rawCollateral.add(adjustedCollateral).rawValue;\r\n        addedCollateral = _getFeeAdjustedCollateral(rawCollateral).sub(initialBalance);\r\n    }\r\n\r\n    // Scale the cumulativeFeeMultiplier by the ratio of fees paid to the current available collateral.\r\n    function _adjustCumulativeFeeMultiplier(FixedPoint.Unsigned memory amount, FixedPoint.Unsigned memory currentPfc)\r\n        internal\r\n    {\r\n        FixedPoint.Unsigned memory effectiveFee = amount.divCeil(currentPfc);\r\n        cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee));\r\n    }\r\n}\r\n\r\n// File: contracts/financial-templates/expiring-multiparty/PricelessPositionManager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Financial contract with priceless position management.\r\n * @notice Handles positions for multiple sponsors in an optimistic (i.e., priceless) way without relying\r\n * on a price feed. On construction, deploys a new ERC20, managed by this contract, that is the synthetic token.\r\n */\r\n\r\ncontract PricelessPositionManager is FeePayer, AdministrateeInterface {\r\n    using SafeMath for uint256;\r\n    using FixedPoint for FixedPoint.Unsigned;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for ExpandedIERC20;\r\n\r\n    /****************************************\r\n     *  PRICELESS POSITION DATA STRUCTURES  *\r\n     ****************************************/\r\n\r\n    // Stores the state of the PricelessPositionManager. Set on expiration, emergency shutdown, or settlement.\r\n    enum ContractState { Open, ExpiredPriceRequested, ExpiredPriceReceived }\r\n    ContractState public contractState;\r\n\r\n    // Represents a single sponsor's position. All collateral is held by this contract.\r\n    // This struct acts as bookkeeping for how much of that collateral is allocated to each sponsor.\r\n    struct PositionData {\r\n        FixedPoint.Unsigned tokensOutstanding;\r\n        // Tracks pending withdrawal requests. A withdrawal request is pending if `withdrawalRequestPassTimestamp != 0`.\r\n        uint256 withdrawalRequestPassTimestamp;\r\n        FixedPoint.Unsigned withdrawalRequestAmount;\r\n        // Raw collateral value. This value should never be accessed directly -- always use _getFeeAdjustedCollateral().\r\n        // To add or remove collateral, use _addCollateral() and _removeCollateral().\r\n        FixedPoint.Unsigned rawCollateral;\r\n        // Tracks pending transfer position requests. A transfer position request is pending if `transferPositionRequestPassTimestamp != 0`.\r\n        uint256 transferPositionRequestPassTimestamp;\r\n    }\r\n\r\n    // Maps sponsor addresses to their positions. Each sponsor can have only one position.\r\n    mapping(address => PositionData) public positions;\r\n\r\n    // Keep track of the total collateral and tokens across all positions to enable calculating the\r\n    // global collateralization ratio without iterating over all positions.\r\n    FixedPoint.Unsigned public totalTokensOutstanding;\r\n\r\n    // Similar to the rawCollateral in PositionData, this value should not be used directly.\r\n    // _getFeeAdjustedCollateral(), _addCollateral() and _removeCollateral() must be used to access and adjust.\r\n    FixedPoint.Unsigned public rawTotalPositionCollateral;\r\n\r\n    // Synthetic token created by this contract.\r\n    ExpandedIERC20 public tokenCurrency;\r\n\r\n    // Unique identifier for DVM price feed ticker.\r\n    bytes32 public priceIdentifier;\r\n    // Time that this contract expires. Should not change post-construction unless an emergency shutdown occurs.\r\n    uint256 public expirationTimestamp;\r\n    // Time that has to elapse for a withdrawal request to be considered passed, if no liquidations occur.\r\n    // !!Note: The lower the withdrawal liveness value, the more risk incurred by the contract.\r\n    //       Extremely low liveness values increase the chance that opportunistic invalid withdrawal requests\r\n    //       expire without liquidation, thereby increasing the insolvency risk for the contract as a whole. An insolvent\r\n    //       contract is extremely risky for any sponsor or synthetic token holder for the contract.\r\n    uint256 public withdrawalLiveness;\r\n\r\n    // Minimum number of tokens in a sponsor's position.\r\n    FixedPoint.Unsigned public minSponsorTokens;\r\n\r\n    // The expiry price pulled from the DVM.\r\n    FixedPoint.Unsigned public expiryPrice;\r\n\r\n    // The excessTokenBeneficiary of any excess tokens added to the contract.\r\n    address public excessTokenBeneficiary;\r\n\r\n    /****************************************\r\n     *                EVENTS                *\r\n     ****************************************/\r\n\r\n    event RequestTransferPosition(address indexed oldSponsor);\r\n    event RequestTransferPositionExecuted(address indexed oldSponsor, address indexed newSponsor);\r\n    event RequestTransferPositionCanceled(address indexed oldSponsor);\r\n    event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\r\n    event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\r\n    event RequestWithdrawal(address indexed sponsor, uint256 indexed collateralAmount);\r\n    event RequestWithdrawalExecuted(address indexed sponsor, uint256 indexed collateralAmount);\r\n    event RequestWithdrawalCanceled(address indexed sponsor, uint256 indexed collateralAmount);\r\n    event PositionCreated(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);\r\n    event NewSponsor(address indexed sponsor);\r\n    event EndedSponsorPosition(address indexed sponsor);\r\n    event Redeem(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);\r\n    event ContractExpired(address indexed caller);\r\n    event SettleExpiredPosition(\r\n        address indexed caller,\r\n        uint256 indexed collateralReturned,\r\n        uint256 indexed tokensBurned\r\n    );\r\n    event EmergencyShutdown(address indexed caller, uint256 originalExpirationTimestamp, uint256 shutdownTimestamp);\r\n\r\n    /****************************************\r\n     *               MODIFIERS              *\r\n     ****************************************/\r\n\r\n    modifier onlyPreExpiration() {\r\n        _onlyPreExpiration();\r\n        _;\r\n    }\r\n\r\n    modifier onlyPostExpiration() {\r\n        _onlyPostExpiration();\r\n        _;\r\n    }\r\n\r\n    modifier onlyCollateralizedPosition(address sponsor) {\r\n        _onlyCollateralizedPosition(sponsor);\r\n        _;\r\n    }\r\n\r\n    // Check that the current state of the pricelessPositionManager is Open.\r\n    // This prevents multiple calls to `expire` and `EmergencyShutdown` post expiration.\r\n    modifier onlyOpenState() {\r\n        _onlyOpenState();\r\n        _;\r\n    }\r\n\r\n    modifier noPendingWithdrawal(address sponsor) {\r\n        _positionHasNoPendingWithdrawal(sponsor);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Construct the PricelessPositionManager\r\n     * @param _expirationTimestamp unix timestamp of when the contract will expire.\r\n     * @param _withdrawalLiveness liveness delay, in seconds, for pending withdrawals.\r\n     * @param _collateralAddress ERC20 token used as collateral for all positions.\r\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\r\n     * @param _priceIdentifier registered in the DVM for the synthetic.\r\n     * @param _syntheticName name for the token contract that will be deployed.\r\n     * @param _syntheticSymbol symbol for the token contract that will be deployed.\r\n     * @param _tokenFactoryAddress deployed UMA token factory to create the synthetic token.\r\n     * @param _minSponsorTokens minimum amount of collateral that must exist at any time in a position.\r\n     * @param _timerAddress Contract that stores the current time in a testing environment.\r\n     * @param _excessTokenBeneficiary Beneficiary to which all excess token balances that accrue in the contract can be\r\n     * sent.\r\n     * Must be set to 0x0 for production environments that use live time.\r\n     */\r\n    constructor(\r\n        uint256 _expirationTimestamp,\r\n        uint256 _withdrawalLiveness,\r\n        address _collateralAddress,\r\n        address _finderAddress,\r\n        bytes32 _priceIdentifier,\r\n        string memory _syntheticName,\r\n        string memory _syntheticSymbol,\r\n        address _tokenFactoryAddress,\r\n        FixedPoint.Unsigned memory _minSponsorTokens,\r\n        address _timerAddress,\r\n        address _excessTokenBeneficiary\r\n    ) public FeePayer(_collateralAddress, _finderAddress, _timerAddress) nonReentrant() {\r\n        require(_expirationTimestamp > getCurrentTime(), \"Invalid expiration in future\");\r\n        require(_getIdentifierWhitelist().isIdentifierSupported(_priceIdentifier), \"Unsupported price identifier\");\r\n\r\n        expirationTimestamp = _expirationTimestamp;\r\n        withdrawalLiveness = _withdrawalLiveness;\r\n        TokenFactory tf = TokenFactory(_tokenFactoryAddress);\r\n        tokenCurrency = tf.createToken(_syntheticName, _syntheticSymbol, 18);\r\n        minSponsorTokens = _minSponsorTokens;\r\n        priceIdentifier = _priceIdentifier;\r\n        excessTokenBeneficiary = _excessTokenBeneficiary;\r\n    }\r\n\r\n    /****************************************\r\n     *          POSITION FUNCTIONS          *\r\n     ****************************************/\r\n\r\n    /**\r\n     * @notice Requests to transfer ownership of the caller's current position to a new sponsor address.\r\n     * Once the request liveness is passed, the sponsor can execute the transfer and specify the new sponsor.\r\n     * @dev The liveness length is the same as the withdrawal liveness.\r\n     */\r\n    function requestTransferPosition() public onlyPreExpiration() nonReentrant() {\r\n        PositionData storage positionData = _getPositionData(msg.sender);\r\n        require(positionData.transferPositionRequestPassTimestamp == 0, \"Pending transfer\");\r\n\r\n        // Make sure the proposed expiration of this request is not post-expiry.\r\n        uint256 requestPassTime = getCurrentTime().add(withdrawalLiveness);\r\n        require(requestPassTime < expirationTimestamp, \"Request expires post-expiry\");\r\n\r\n        // Update the position object for the user.\r\n        positionData.transferPositionRequestPassTimestamp = requestPassTime;\r\n\r\n        emit RequestTransferPosition(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice After a passed transfer position request (i.e., by a call to `requestTransferPosition` and waiting\r\n     * `withdrawalLiveness`), transfers ownership of the caller's current position to `newSponsorAddress`.\r\n     * @dev Transferring positions can only occur if the recipient does not already have a position.\r\n     * @param newSponsorAddress is the address to which the position will be transferred.\r\n     */\r\n    function transferPositionPassedRequest(address newSponsorAddress)\r\n        public\r\n        onlyPreExpiration()\r\n        noPendingWithdrawal(msg.sender)\r\n        nonReentrant()\r\n    {\r\n        require(\r\n            _getFeeAdjustedCollateral(positions[newSponsorAddress].rawCollateral).isEqual(\r\n                FixedPoint.fromUnscaledUint(0)\r\n            ),\r\n            \"Sponsor already has position\"\r\n        );\r\n        PositionData storage positionData = _getPositionData(msg.sender);\r\n        require(\r\n            positionData.transferPositionRequestPassTimestamp != 0 &&\r\n                positionData.transferPositionRequestPassTimestamp <= getCurrentTime(),\r\n            \"Invalid transfer request\"\r\n        );\r\n\r\n        // Reset transfer request.\r\n        positionData.transferPositionRequestPassTimestamp = 0;\r\n\r\n        positions[newSponsorAddress] = positionData;\r\n        delete positions[msg.sender];\r\n\r\n        emit RequestTransferPositionExecuted(msg.sender, newSponsorAddress);\r\n        emit NewSponsor(newSponsorAddress);\r\n        emit EndedSponsorPosition(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancels a pending transfer position request.\r\n     */\r\n    function cancelTransferPosition() external onlyPreExpiration() nonReentrant() {\r\n        PositionData storage positionData = _getPositionData(msg.sender);\r\n        require(positionData.transferPositionRequestPassTimestamp != 0, \"No pending transfer\");\r\n\r\n        emit RequestTransferPositionCanceled(msg.sender);\r\n\r\n        // Reset withdrawal request.\r\n        positionData.transferPositionRequestPassTimestamp = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the specified sponsor's position.\r\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\r\n     * at least `collateralAmount` of `collateralCurrency`.\r\n     * @param sponsor the sponsor to credit the deposit to.\r\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\r\n     */\r\n    function depositTo(address sponsor, FixedPoint.Unsigned memory collateralAmount)\r\n        public\r\n        onlyPreExpiration()\r\n        noPendingWithdrawal(sponsor)\r\n        fees()\r\n        nonReentrant()\r\n    {\r\n        require(collateralAmount.isGreaterThan(0), \"Invalid collateral amount\");\r\n        PositionData storage positionData = _getPositionData(sponsor);\r\n\r\n        // Increase the position and global collateral balance by collateral amount.\r\n        _incrementCollateralBalances(positionData, collateralAmount);\r\n\r\n        emit Deposit(sponsor, collateralAmount.rawValue);\r\n\r\n        // Move collateral currency from sender to contract.\r\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount.rawValue);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the caller's position.\r\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\r\n     * at least `collateralAmount` of `collateralCurrency`.\r\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\r\n     */\r\n    function deposit(FixedPoint.Unsigned memory collateralAmount) public {\r\n        // This is just a thin wrapper over depositTo that specified the sender as the sponsor.\r\n        depositTo(msg.sender, collateralAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers `collateralAmount` of `collateralCurrency` from the sponsor's position to the sponsor.\r\n     * @dev Reverts if the withdrawal puts this position's collateralization ratio below the global collateralization\r\n     * ratio. In that case, use `requestWithdrawal`. Might not withdraw the full requested amount to account for precision loss.\r\n     * @param collateralAmount is the amount of collateral to withdraw.\r\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\r\n     */\r\n    function withdraw(FixedPoint.Unsigned memory collateralAmount)\r\n        public\r\n        onlyPreExpiration()\r\n        noPendingWithdrawal(msg.sender)\r\n        fees()\r\n        nonReentrant()\r\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\r\n    {\r\n        PositionData storage positionData = _getPositionData(msg.sender);\r\n        require(collateralAmount.isGreaterThan(0), \"Invalid collateral amount\");\r\n\r\n        // Decrement the sponsor's collateral and global collateral amounts. Check the GCR between decrement to ensure\r\n        // position remains above the GCR within the witdrawl. If this is not the case the caller must submit a request.\r\n        amountWithdrawn = _decrementCollateralBalancesCheckGCR(positionData, collateralAmount);\r\n\r\n        emit Withdrawal(msg.sender, amountWithdrawn.rawValue);\r\n\r\n        // Move collateral currency from contract to sender.\r\n        // Note: that we move the amount of collateral that is decreased from rawCollateral (inclusive of fees)\r\n        // instead of the user requested amount. This eliminates precision loss that could occur\r\n        // where the user withdraws more collateral than rawCollateral is decremented by.\r\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\r\n    }\r\n\r\n    /**\r\n     * @notice Starts a withdrawal request that, if passed, allows the sponsor to withdraw` from their position.\r\n     * @dev The request will be pending for `withdrawalLiveness`, during which the position can be liquidated.\r\n     * @param collateralAmount the amount of collateral requested to withdraw\r\n     */\r\n    function requestWithdrawal(FixedPoint.Unsigned memory collateralAmount)\r\n        public\r\n        onlyPreExpiration()\r\n        noPendingWithdrawal(msg.sender)\r\n        nonReentrant()\r\n    {\r\n        PositionData storage positionData = _getPositionData(msg.sender);\r\n        require(\r\n            collateralAmount.isGreaterThan(0) &&\r\n                collateralAmount.isLessThanOrEqual(_getFeeAdjustedCollateral(positionData.rawCollateral)),\r\n            \"Invalid collateral amount\"\r\n        );\r\n\r\n        // Make sure the proposed expiration of this request is not post-expiry.\r\n        uint256 requestPassTime = getCurrentTime().add(withdrawalLiveness);\r\n        require(requestPassTime < expirationTimestamp, \"Request expires post-expiry\");\r\n\r\n        // Update the position object for the user.\r\n        positionData.withdrawalRequestPassTimestamp = requestPassTime;\r\n        positionData.withdrawalRequestAmount = collateralAmount;\r\n\r\n        emit RequestWithdrawal(msg.sender, collateralAmount.rawValue);\r\n    }\r\n\r\n    /**\r\n     * @notice After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and waiting\r\n     * `withdrawalLiveness`), withdraws `positionData.withdrawalRequestAmount` of collateral currency.\r\n     * @dev Might not withdraw the full requested amount in order to account for precision loss or if the full requested\r\n     * amount exceeds the collateral in the position (due to paying fees).\r\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\r\n     */\r\n    function withdrawPassedRequest()\r\n        external\r\n        onlyPreExpiration()\r\n        fees()\r\n        nonReentrant()\r\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\r\n    {\r\n        PositionData storage positionData = _getPositionData(msg.sender);\r\n        require(\r\n            positionData.withdrawalRequestPassTimestamp != 0 &&\r\n                positionData.withdrawalRequestPassTimestamp <= getCurrentTime(),\r\n            \"Invalid withdraw request\"\r\n        );\r\n\r\n        // If withdrawal request amount is > position collateral, then withdraw the full collateral amount.\r\n        // This situation is possible due to fees charged since the withdrawal was originally requested.\r\n        FixedPoint.Unsigned memory amountToWithdraw = positionData.withdrawalRequestAmount;\r\n        if (positionData.withdrawalRequestAmount.isGreaterThan(_getFeeAdjustedCollateral(positionData.rawCollateral))) {\r\n            amountToWithdraw = _getFeeAdjustedCollateral(positionData.rawCollateral);\r\n        }\r\n\r\n        // Decrement the sponsor's collateral and global collateral amounts.\r\n        amountWithdrawn = _decrementCollateralBalances(positionData, amountToWithdraw);\r\n\r\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\r\n        _resetWithdrawalRequest(positionData);\r\n\r\n        // Transfer approved withdrawal amount from the contract to the caller.\r\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\r\n\r\n        emit RequestWithdrawalExecuted(msg.sender, amountWithdrawn.rawValue);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancels a pending withdrawal request.\r\n     */\r\n    function cancelWithdrawal() external nonReentrant() {\r\n        PositionData storage positionData = _getPositionData(msg.sender);\r\n        require(positionData.withdrawalRequestPassTimestamp != 0, \"No pending withdrawal\");\r\n\r\n        emit RequestWithdrawalCanceled(msg.sender, positionData.withdrawalRequestAmount.rawValue);\r\n\r\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\r\n        _resetWithdrawalRequest(positionData);\r\n    }\r\n\r\n    /**\r\n     * @notice Creates tokens by creating a new position or by augmenting an existing position. Pulls `collateralAmount` into the sponsor's position and mints `numTokens` of `tokenCurrency`.\r\n     * @dev Reverts if minting these tokens would put the position's collateralization ratio below the\r\n     * global collateralization ratio. This contract must be approved to spend at least `collateralAmount` of\r\n     * `collateralCurrency`.\r\n     * @param collateralAmount is the number of collateral tokens to collateralize the position with\r\n     * @param numTokens is the number of tokens to mint from the position.\r\n     */\r\n    function create(FixedPoint.Unsigned memory collateralAmount, FixedPoint.Unsigned memory numTokens)\r\n        public\r\n        onlyPreExpiration()\r\n        fees()\r\n        nonReentrant()\r\n    {\r\n        PositionData storage positionData = positions[msg.sender];\r\n\r\n        // Either the new create ratio or the resultant position CR must be above the current GCR.\r\n        require(\r\n            (_checkCollateralization(\r\n                _getFeeAdjustedCollateral(positionData.rawCollateral).add(collateralAmount),\r\n                positionData.tokensOutstanding.add(numTokens)\r\n            ) || _checkCollateralization(collateralAmount, numTokens)),\r\n            \"Insufficient collateral\"\r\n        );\r\n\r\n        require(positionData.withdrawalRequestPassTimestamp == 0, \"Pending withdrawal\");\r\n        if (positionData.tokensOutstanding.isEqual(0)) {\r\n            require(numTokens.isGreaterThanOrEqual(minSponsorTokens), \"Below minimum sponsor position\");\r\n            emit NewSponsor(msg.sender);\r\n        }\r\n\r\n        // Increase the position and global collateral balance by collateral amount.\r\n        _incrementCollateralBalances(positionData, collateralAmount);\r\n\r\n        // Add the number of tokens created to the position's outstanding tokens.\r\n        positionData.tokensOutstanding = positionData.tokensOutstanding.add(numTokens);\r\n\r\n        totalTokensOutstanding = totalTokensOutstanding.add(numTokens);\r\n\r\n        emit PositionCreated(msg.sender, collateralAmount.rawValue, numTokens.rawValue);\r\n\r\n        // Transfer tokens into the contract from caller and mint corresponding synthetic tokens to the caller's address.\r\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount.rawValue);\r\n        require(tokenCurrency.mint(msg.sender, numTokens.rawValue), \"Minting synthetic tokens failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of `collateralCurrency`.\r\n     * @dev Can only be called by a token sponsor. Might not redeem the full proportional amount of collateral\r\n     * in order to account for precision loss. This contract must be approved to spend at least `numTokens` of\r\n     * `tokenCurrency`.\r\n     * @param numTokens is the number of tokens to be burnt for a commensurate amount of collateral.\r\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\r\n     */\r\n    function redeem(FixedPoint.Unsigned memory numTokens)\r\n        public\r\n        noPendingWithdrawal(msg.sender)\r\n        fees()\r\n        nonReentrant()\r\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\r\n    {\r\n        PositionData storage positionData = _getPositionData(msg.sender);\r\n        require(!numTokens.isGreaterThan(positionData.tokensOutstanding), \"Invalid token amount\");\r\n\r\n        FixedPoint.Unsigned memory fractionRedeemed = numTokens.div(positionData.tokensOutstanding);\r\n        FixedPoint.Unsigned memory collateralRedeemed = fractionRedeemed.mul(\r\n            _getFeeAdjustedCollateral(positionData.rawCollateral)\r\n        );\r\n\r\n        // If redemption returns all tokens the sponsor has then we can delete their position. Else, downsize.\r\n        if (positionData.tokensOutstanding.isEqual(numTokens)) {\r\n            amountWithdrawn = _deleteSponsorPosition(msg.sender);\r\n        } else {\r\n            // Decrement the sponsor's collateral and global collateral amounts.\r\n            amountWithdrawn = _decrementCollateralBalances(positionData, collateralRedeemed);\r\n\r\n            // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\r\n            FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(numTokens);\r\n            require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens), \"Below minimum sponsor position\");\r\n            positionData.tokensOutstanding = newTokenCount;\r\n\r\n            // Update the totalTokensOutstanding after redemption.\r\n            totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\r\n        }\r\n\r\n        emit Redeem(msg.sender, amountWithdrawn.rawValue, numTokens.rawValue);\r\n\r\n        // Transfer collateral from contract to caller and burn callers synthetic tokens.\r\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\r\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), numTokens.rawValue);\r\n        tokenCurrency.burn(numTokens.rawValue);\r\n    }\r\n\r\n    /**\r\n     * @notice After a contract has passed expiry all token holders can redeem their tokens for underlying at the\r\n     * prevailing price defined by the DVM from the `expire` function.\r\n     * @dev This burns all tokens from the caller of `tokenCurrency` and sends back the proportional amount of\r\n     * `collateralCurrency`. Might not redeem the full proportional amount of collateral in order to account for\r\n     * precision loss. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.\r\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\r\n     */\r\n    function settleExpired()\r\n        external\r\n        onlyPostExpiration()\r\n        fees()\r\n        nonReentrant()\r\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\r\n    {\r\n        // If the contract state is open and onlyPostExpiration passed then `expire()` has not yet been called.\r\n        require(contractState != ContractState.Open, \"Unexpired position\");\r\n\r\n        // Get the current settlement price and store it. If it is not resolved will revert.\r\n        if (contractState != ContractState.ExpiredPriceReceived) {\r\n            expiryPrice = _getOraclePrice(expirationTimestamp);\r\n            contractState = ContractState.ExpiredPriceReceived;\r\n        }\r\n\r\n        // Get caller's tokens balance and calculate amount of underlying entitled to them.\r\n        FixedPoint.Unsigned memory tokensToRedeem = FixedPoint.Unsigned(tokenCurrency.balanceOf(msg.sender));\r\n        FixedPoint.Unsigned memory totalRedeemableCollateral = tokensToRedeem.mul(expiryPrice);\r\n\r\n        // If the caller is a sponsor with outstanding collateral they are also entitled to their excess collateral after their debt.\r\n        PositionData storage positionData = positions[msg.sender];\r\n        if (_getFeeAdjustedCollateral(positionData.rawCollateral).isGreaterThan(0)) {\r\n            // Calculate the underlying entitled to a token sponsor. This is collateral - debt in underlying.\r\n            FixedPoint.Unsigned memory tokenDebtValueInCollateral = positionData.tokensOutstanding.mul(expiryPrice);\r\n            FixedPoint.Unsigned memory positionCollateral = _getFeeAdjustedCollateral(positionData.rawCollateral);\r\n\r\n            // If the debt is greater than the remaining collateral, they cannot redeem anything.\r\n            FixedPoint.Unsigned memory positionRedeemableCollateral = tokenDebtValueInCollateral.isLessThan(\r\n                positionCollateral\r\n            )\r\n                ? positionCollateral.sub(tokenDebtValueInCollateral)\r\n                : FixedPoint.Unsigned(0);\r\n\r\n            // Add the number of redeemable tokens for the sponsor to their total redeemable collateral.\r\n            totalRedeemableCollateral = totalRedeemableCollateral.add(positionRedeemableCollateral);\r\n\r\n            // Reset the position state as all the value has been removed after settlement.\r\n            delete positions[msg.sender];\r\n            emit EndedSponsorPosition(msg.sender);\r\n        }\r\n\r\n        // Take the min of the remaining collateral and the collateral \"owed\". If the contract is undercapitalized,\r\n        // the caller will get as much collateral as the contract can pay out.\r\n        FixedPoint.Unsigned memory payout = FixedPoint.min(\r\n            _getFeeAdjustedCollateral(rawTotalPositionCollateral),\r\n            totalRedeemableCollateral\r\n        );\r\n\r\n        // Decrement total contract collateral and outstanding debt.\r\n        amountWithdrawn = _removeCollateral(rawTotalPositionCollateral, payout);\r\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRedeem);\r\n\r\n        emit SettleExpiredPosition(msg.sender, amountWithdrawn.rawValue, tokensToRedeem.rawValue);\r\n\r\n        // Transfer tokens & collateral and burn the redeemed tokens.\r\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\r\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), tokensToRedeem.rawValue);\r\n        tokenCurrency.burn(tokensToRedeem.rawValue);\r\n    }\r\n\r\n    /****************************************\r\n     *        GLOBAL STATE FUNCTIONS        *\r\n     ****************************************/\r\n\r\n    /**\r\n     * @notice Locks contract state in expired and requests oracle price.\r\n     * @dev this function can only be called once the contract is expired and can't be re-called.\r\n     */\r\n    function expire() external onlyPostExpiration() onlyOpenState() fees() nonReentrant() {\r\n        contractState = ContractState.ExpiredPriceRequested;\r\n\r\n        // The final fee for this request is paid out of the contract rather than by the caller.\r\n        _payFinalFees(address(this), _computeFinalFees());\r\n        _requestOraclePrice(expirationTimestamp);\r\n\r\n        emit ContractExpired(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Premature contract settlement under emergency circumstances.\r\n     * @dev Only the governor can call this function as they are permissioned within the `FinancialContractAdmin`.\r\n     * Upon emergency shutdown, the contract settlement time is set to the shutdown time. This enables withdrawal\r\n     * to occur via the standard `settleExpired` function. Contract state is set to `ExpiredPriceRequested`\r\n     * which prevents re-entry into this function or the `expire` function. No fees are paid when calling\r\n     * `emergencyShutdown` as the governor who would call the function would also receive the fees.\r\n     */\r\n    function emergencyShutdown() external override onlyPreExpiration() onlyOpenState() nonReentrant() {\r\n        require(msg.sender == _getFinancialContractsAdminAddress(), \"Caller not Governor\");\r\n\r\n        contractState = ContractState.ExpiredPriceRequested;\r\n        // Expiratory time now becomes the current time (emergency shutdown time).\r\n        // Price requested at this time stamp. `settleExpired` can now withdraw at this timestamp.\r\n        uint256 oldExpirationTimestamp = expirationTimestamp;\r\n        expirationTimestamp = getCurrentTime();\r\n        _requestOraclePrice(expirationTimestamp);\r\n\r\n        emit EmergencyShutdown(msg.sender, oldExpirationTimestamp, expirationTimestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Theoretically supposed to pay fees and move money between margin accounts to make sure they\r\n     * reflect the NAV of the contract. However, this functionality doesn't apply to this contract.\r\n     * @dev This is supposed to be implemented by any contract that inherits `AdministrateeInterface` and callable\r\n     * only by the Governor contract. This method is therefore minimally implemented in this contract and does nothing.\r\n     */\r\n    function remargin() external override onlyPreExpiration() nonReentrant() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * @notice Drains any excess balance of the provided ERC20 token to a pre-selected beneficiary.\r\n     * @dev This will drain down to the amount of tracked collateral and drain the full balance of any other token.\r\n     * @param token address of the ERC20 token whose excess balance should be drained.\r\n     */\r\n    function trimExcess(IERC20 token) external fees() nonReentrant() returns (FixedPoint.Unsigned memory amount) {\r\n        FixedPoint.Unsigned memory balance = FixedPoint.Unsigned(token.balanceOf(address(this)));\r\n\r\n        if (address(token) == address(collateralCurrency)) {\r\n            // If it is the collateral currency, send only the amount that the contract is not tracking.\r\n            // Note: this could be due to rounding error or balance-changing tokens, like aTokens.\r\n            amount = balance.sub(_pfc());\r\n        } else {\r\n            // If it's not the collateral currency, send the entire balance.\r\n            amount = balance;\r\n        }\r\n        token.safeTransfer(excessTokenBeneficiary, amount.rawValue);\r\n    }\r\n\r\n    /**\r\n     * @notice Accessor method for a sponsor's collateral.\r\n     * @dev This is necessary because the struct returned by the positions() method shows\r\n     * rawCollateral, which isn't a user-readable value.\r\n     * @param sponsor address whose collateral amount is retrieved.\r\n     * @return collateralAmount amount of collateral within a sponsors position.\r\n     */\r\n    function getCollateral(address sponsor)\r\n        external\r\n        view\r\n        nonReentrantView()\r\n        returns (FixedPoint.Unsigned memory collateralAmount)\r\n    {\r\n        // Note: do a direct access to avoid the validity check.\r\n        return _getFeeAdjustedCollateral(positions[sponsor].rawCollateral);\r\n    }\r\n\r\n    /**\r\n     * @notice Accessor method for the total collateral stored within the PricelessPositionManager.\r\n     * @return totalCollateral amount of all collateral within the Expiring Multi Party Contract.\r\n     */\r\n    function totalPositionCollateral()\r\n        external\r\n        view\r\n        nonReentrantView()\r\n        returns (FixedPoint.Unsigned memory totalCollateral)\r\n    {\r\n        return _getFeeAdjustedCollateral(rawTotalPositionCollateral);\r\n    }\r\n\r\n    /****************************************\r\n     *          INTERNAL FUNCTIONS          *\r\n     ****************************************/\r\n\r\n    // Reduces a sponsor's position and global counters by the specified parameters. Handles deleting the entire\r\n    // position if the entire position is being removed. Does not make any external transfers.\r\n    function _reduceSponsorPosition(\r\n        address sponsor,\r\n        FixedPoint.Unsigned memory tokensToRemove,\r\n        FixedPoint.Unsigned memory collateralToRemove,\r\n        FixedPoint.Unsigned memory withdrawalAmountToRemove\r\n    ) internal {\r\n        PositionData storage positionData = _getPositionData(sponsor);\r\n\r\n        // If the entire position is being removed, delete it instead.\r\n        if (\r\n            tokensToRemove.isEqual(positionData.tokensOutstanding) &&\r\n            _getFeeAdjustedCollateral(positionData.rawCollateral).isEqual(collateralToRemove)\r\n        ) {\r\n            _deleteSponsorPosition(sponsor);\r\n            return;\r\n        }\r\n\r\n        // Decrement the sponsor's collateral and global collateral amounts.\r\n        _decrementCollateralBalances(positionData, collateralToRemove);\r\n\r\n        // Ensure that the sponsor will meet the min position size after the reduction.\r\n        FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(tokensToRemove);\r\n        require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens), \"Below minimum sponsor position\");\r\n        positionData.tokensOutstanding = newTokenCount;\r\n\r\n        // Decrement the position's withdrawal amount.\r\n        positionData.withdrawalRequestAmount = positionData.withdrawalRequestAmount.sub(withdrawalAmountToRemove);\r\n\r\n        // Decrement the total outstanding tokens in the overall contract.\r\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRemove);\r\n    }\r\n\r\n    // Deletes a sponsor's position and updates global counters. Does not make any external transfers.\r\n    function _deleteSponsorPosition(address sponsor) internal returns (FixedPoint.Unsigned memory) {\r\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\r\n\r\n        FixedPoint.Unsigned memory startingGlobalCollateral = _getFeeAdjustedCollateral(rawTotalPositionCollateral);\r\n\r\n        // Remove the collateral and outstanding from the overall total position.\r\n        FixedPoint.Unsigned memory remainingRawCollateral = positionToLiquidate.rawCollateral;\r\n        rawTotalPositionCollateral = rawTotalPositionCollateral.sub(remainingRawCollateral);\r\n        totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding);\r\n\r\n        // Reset the sponsors position to have zero outstanding and collateral.\r\n        delete positions[sponsor];\r\n\r\n        emit EndedSponsorPosition(sponsor);\r\n\r\n        // Return fee-adjusted amount of collateral deleted from position.\r\n        return startingGlobalCollateral.sub(_getFeeAdjustedCollateral(rawTotalPositionCollateral));\r\n    }\r\n\r\n    function _pfc() internal virtual override view returns (FixedPoint.Unsigned memory) {\r\n        return _getFeeAdjustedCollateral(rawTotalPositionCollateral);\r\n    }\r\n\r\n    function _getPositionData(address sponsor)\r\n        internal\r\n        view\r\n        onlyCollateralizedPosition(sponsor)\r\n        returns (PositionData storage)\r\n    {\r\n        return positions[sponsor];\r\n    }\r\n\r\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\r\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\r\n    }\r\n\r\n    function _getOracle() internal view returns (OracleInterface) {\r\n        return OracleInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\r\n    }\r\n\r\n    function _getFinancialContractsAdminAddress() internal view returns (address) {\r\n        return finder.getImplementationAddress(OracleInterfaces.FinancialContractsAdmin);\r\n    }\r\n\r\n    // Requests a price for `priceIdentifier` at `requestedTime` from the Oracle.\r\n    function _requestOraclePrice(uint256 requestedTime) internal {\r\n        OracleInterface oracle = _getOracle();\r\n        oracle.requestPrice(priceIdentifier, requestedTime);\r\n    }\r\n\r\n    // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\r\n    function _getOraclePrice(uint256 requestedTime) internal view returns (FixedPoint.Unsigned memory) {\r\n        // Create an instance of the oracle and get the price. If the price is not resolved revert.\r\n        OracleInterface oracle = _getOracle();\r\n        require(oracle.hasPrice(priceIdentifier, requestedTime), \"Unresolved oracle price\");\r\n        int256 oraclePrice = oracle.getPrice(priceIdentifier, requestedTime);\r\n\r\n        // For now we don't want to deal with negative prices in positions.\r\n        if (oraclePrice < 0) {\r\n            oraclePrice = 0;\r\n        }\r\n        return FixedPoint.Unsigned(uint256(oraclePrice));\r\n    }\r\n\r\n    // Reset withdrawal request by setting the withdrawal request and withdrawal timestamp to 0.\r\n    function _resetWithdrawalRequest(PositionData storage positionData) internal {\r\n        positionData.withdrawalRequestAmount = FixedPoint.fromUnscaledUint(0);\r\n        positionData.withdrawalRequestPassTimestamp = 0;\r\n    }\r\n\r\n    // Ensure individual and global consistency when increasing collateral balances. Returns the change to the position.\r\n    function _incrementCollateralBalances(\r\n        PositionData storage positionData,\r\n        FixedPoint.Unsigned memory collateralAmount\r\n    ) internal returns (FixedPoint.Unsigned memory) {\r\n        _addCollateral(positionData.rawCollateral, collateralAmount);\r\n        return _addCollateral(rawTotalPositionCollateral, collateralAmount);\r\n    }\r\n\r\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the\r\n    // position. We elect to return the amount that the global collateral is decreased by, rather than the individual\r\n    // position's collateral, because we need to maintain the invariant that the global collateral is always\r\n    // <= the collateral owned by the contract to avoid reverts on withdrawals. The amount returned = amount withdrawn.\r\n    function _decrementCollateralBalances(\r\n        PositionData storage positionData,\r\n        FixedPoint.Unsigned memory collateralAmount\r\n    ) internal returns (FixedPoint.Unsigned memory) {\r\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\r\n        return _removeCollateral(rawTotalPositionCollateral, collateralAmount);\r\n    }\r\n\r\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the position.\r\n    // This function is similar to the _decrementCollateralBalances function except this function checks position GCR\r\n    // between the decrements. This ensures that collateral removal will not leave the position undercollateralized.\r\n    function _decrementCollateralBalancesCheckGCR(\r\n        PositionData storage positionData,\r\n        FixedPoint.Unsigned memory collateralAmount\r\n    ) internal returns (FixedPoint.Unsigned memory) {\r\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\r\n        require(_checkPositionCollateralization(positionData), \"CR below GCR\");\r\n        return _removeCollateral(rawTotalPositionCollateral, collateralAmount);\r\n    }\r\n\r\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\r\n    // unnecessarily increase contract bytecode size.\r\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\r\n    function _onlyOpenState() internal view {\r\n        require(contractState == ContractState.Open, \"Contract state is not OPEN\");\r\n    }\r\n\r\n    function _onlyPreExpiration() internal view {\r\n        require(getCurrentTime() < expirationTimestamp, \"Only callable pre-expiry\");\r\n    }\r\n\r\n    function _onlyPostExpiration() internal view {\r\n        require(getCurrentTime() >= expirationTimestamp, \"Only callable post-expiry\");\r\n    }\r\n\r\n    function _onlyCollateralizedPosition(address sponsor) internal view {\r\n        require(\r\n            _getFeeAdjustedCollateral(positions[sponsor].rawCollateral).isGreaterThan(0),\r\n            \"Position has no collateral\"\r\n        );\r\n    }\r\n\r\n    // Note: This checks whether an already existing position has a pending withdrawal. This cannot be used on the\r\n    // `create` method because it is possible that `create` is called on a new position (i.e. one without any collateral\r\n    // or tokens outstanding) which would fail the `onlyCollateralizedPosition` modifier on `_getPositionData`.\r\n    function _positionHasNoPendingWithdrawal(address sponsor) internal view {\r\n        require(_getPositionData(sponsor).withdrawalRequestPassTimestamp == 0, \"Pending withdrawal\");\r\n    }\r\n\r\n    /****************************************\r\n     *          PRIVATE FUNCTIONS          *\r\n     ****************************************/\r\n\r\n    function _checkPositionCollateralization(PositionData storage positionData) private view returns (bool) {\r\n        return\r\n            _checkCollateralization(\r\n                _getFeeAdjustedCollateral(positionData.rawCollateral),\r\n                positionData.tokensOutstanding\r\n            );\r\n    }\r\n\r\n    // Checks whether the provided `collateral` and `numTokens` have a collateralization ratio above the global\r\n    // collateralization ratio.\r\n    function _checkCollateralization(FixedPoint.Unsigned memory collateral, FixedPoint.Unsigned memory numTokens)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        FixedPoint.Unsigned memory global = _getCollateralizationRatio(\r\n            _getFeeAdjustedCollateral(rawTotalPositionCollateral),\r\n            totalTokensOutstanding\r\n        );\r\n        FixedPoint.Unsigned memory thisChange = _getCollateralizationRatio(collateral, numTokens);\r\n        return !global.isGreaterThan(thisChange);\r\n    }\r\n\r\n    function _getCollateralizationRatio(FixedPoint.Unsigned memory collateral, FixedPoint.Unsigned memory numTokens)\r\n        private\r\n        pure\r\n        returns (FixedPoint.Unsigned memory ratio)\r\n    {\r\n        if (!numTokens.isGreaterThan(0)) {\r\n            return FixedPoint.fromUnscaledUint(0);\r\n        } else {\r\n            return collateral.div(numTokens);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/financial-templates/expiring-multiparty/Liquidatable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Liquidatable\r\n * @notice Adds logic to a position-managing contract that enables callers to liquidate an undercollateralized position.\r\n * @dev The liquidation has a liveness period before expiring successfully, during which someone can \"dispute\" the\r\n * liquidation, which sends a price request to the relevant Oracle to settle the final collateralization ratio based on\r\n * a DVM price. The contract enforces dispute rewards in order to incentivize disputers to correctly dispute false\r\n * liquidations and compensate position sponsors who had their position incorrectly liquidated. Importantly, a\r\n * prospective disputer must deposit a dispute bond that they can lose in the case of an unsuccessful dispute.\r\n */\r\ncontract Liquidatable is PricelessPositionManager {\r\n    using FixedPoint for FixedPoint.Unsigned;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /****************************************\r\n     *     LIQUIDATION DATA STRUCTURES      *\r\n     ****************************************/\r\n\r\n    // Because of the check in withdrawable(), the order of these enum values should not change.\r\n    enum Status { Uninitialized, PreDispute, PendingDispute, DisputeSucceeded, DisputeFailed }\r\n\r\n    struct LiquidationData {\r\n        // Following variables set upon creation of liquidation:\r\n        address sponsor; // Address of the liquidated position's sponsor\r\n        address liquidator; // Address who created this liquidation\r\n        Status state; // Liquidated (and expired or not), Pending a Dispute, or Dispute has resolved\r\n        uint256 liquidationTime; // Time when liquidation is initiated, needed to get price from Oracle\r\n        // Following variables determined by the position that is being liquidated:\r\n        FixedPoint.Unsigned tokensOutstanding; // Synthetic tokens required to be burned by liquidator to initiate dispute\r\n        FixedPoint.Unsigned lockedCollateral; // Collateral locked by contract and released upon expiry or post-dispute\r\n        // Amount of collateral being liquidated, which could be different from\r\n        // lockedCollateral if there were pending withdrawals at the time of liquidation\r\n        FixedPoint.Unsigned liquidatedCollateral;\r\n        // Unit value (starts at 1) that is used to track the fees per unit of collateral over the course of the liquidation.\r\n        FixedPoint.Unsigned rawUnitCollateral;\r\n        // Following variable set upon initiation of a dispute:\r\n        address disputer; // Person who is disputing a liquidation\r\n        // Following variable set upon a resolution of a dispute:\r\n        FixedPoint.Unsigned settlementPrice; // Final price as determined by an Oracle following a dispute\r\n        FixedPoint.Unsigned finalFee;\r\n    }\r\n\r\n    // Define the contract's constructor parameters as a struct to enable more variables to be specified.\r\n    // This is required to enable more params, over and above Solidity's limits.\r\n    struct ConstructorParams {\r\n        // Params for PricelessPositionManager only.\r\n        uint256 expirationTimestamp;\r\n        uint256 withdrawalLiveness;\r\n        address collateralAddress;\r\n        address finderAddress;\r\n        address tokenFactoryAddress;\r\n        address timerAddress;\r\n        address excessTokenBeneficiary;\r\n        bytes32 priceFeedIdentifier;\r\n        string syntheticName;\r\n        string syntheticSymbol;\r\n        FixedPoint.Unsigned minSponsorTokens;\r\n        // Params specifically for Liquidatable.\r\n        uint256 liquidationLiveness;\r\n        FixedPoint.Unsigned collateralRequirement;\r\n        FixedPoint.Unsigned disputeBondPct;\r\n        FixedPoint.Unsigned sponsorDisputeRewardPct;\r\n        FixedPoint.Unsigned disputerDisputeRewardPct;\r\n    }\r\n\r\n    // Liquidations are unique by ID per sponsor\r\n    mapping(address => LiquidationData[]) public liquidations;\r\n\r\n    // Total collateral in liquidation.\r\n    FixedPoint.Unsigned public rawLiquidationCollateral;\r\n\r\n    // Immutable contract parameters:\r\n    // Amount of time for pending liquidation before expiry.\r\n    // !!Note: The lower the liquidation liveness value, the more risk incurred by sponsors.\r\n    //       Extremely low liveness values increase the chance that opportunistic invalid liquidations\r\n    //       expire without dispute, thereby decreasing the usability for sponsors and increasing the risk\r\n    //       for the contract as a whole. An insolvent contract is extremely risky for any sponsor or synthetic\r\n    //       token holder for the contract.\r\n    uint256 public liquidationLiveness;\r\n    // Required collateral:TRV ratio for a position to be considered sufficiently collateralized.\r\n    FixedPoint.Unsigned public collateralRequirement;\r\n    // Percent of a Liquidation/Position's lockedCollateral to be deposited by a potential disputer\r\n    // Represented as a multiplier, for example 1.5e18 = \"150%\" and 0.05e18 = \"5%\"\r\n    FixedPoint.Unsigned public disputeBondPct;\r\n    // Percent of oraclePrice paid to sponsor in the Disputed state (i.e. following a successful dispute)\r\n    // Represented as a multiplier, see above.\r\n    FixedPoint.Unsigned public sponsorDisputeRewardPct;\r\n    // Percent of oraclePrice paid to disputer in the Disputed state (i.e. following a successful dispute)\r\n    // Represented as a multiplier, see above.\r\n    FixedPoint.Unsigned public disputerDisputeRewardPct;\r\n\r\n    /****************************************\r\n     *                EVENTS                *\r\n     ****************************************/\r\n\r\n    event LiquidationCreated(\r\n        address indexed sponsor,\r\n        address indexed liquidator,\r\n        uint256 indexed liquidationId,\r\n        uint256 tokensOutstanding,\r\n        uint256 lockedCollateral,\r\n        uint256 liquidatedCollateral,\r\n        uint256 liquidationTime\r\n    );\r\n    event LiquidationDisputed(\r\n        address indexed sponsor,\r\n        address indexed liquidator,\r\n        address indexed disputer,\r\n        uint256 liquidationId,\r\n        uint256 disputeBondAmount\r\n    );\r\n    event DisputeSettled(\r\n        address indexed caller,\r\n        address indexed sponsor,\r\n        address indexed liquidator,\r\n        address disputer,\r\n        uint256 liquidationId,\r\n        bool disputeSucceeded\r\n    );\r\n    event LiquidationWithdrawn(\r\n        address indexed caller,\r\n        uint256 withdrawalAmount,\r\n        Status indexed liquidationStatus,\r\n        uint256 settlementPrice\r\n    );\r\n\r\n    /****************************************\r\n     *              MODIFIERS               *\r\n     ****************************************/\r\n\r\n    modifier disputable(uint256 liquidationId, address sponsor) {\r\n        _disputable(liquidationId, sponsor);\r\n        _;\r\n    }\r\n\r\n    modifier withdrawable(uint256 liquidationId, address sponsor) {\r\n        _withdrawable(liquidationId, sponsor);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructs the liquidatable contract.\r\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\r\n     * are fed directly into the PricelessPositionManager's constructor within the inheritance tree.\r\n     */\r\n    constructor(ConstructorParams memory params)\r\n        public\r\n        PricelessPositionManager(\r\n            params.expirationTimestamp,\r\n            params.withdrawalLiveness,\r\n            params.collateralAddress,\r\n            params.finderAddress,\r\n            params.priceFeedIdentifier,\r\n            params.syntheticName,\r\n            params.syntheticSymbol,\r\n            params.tokenFactoryAddress,\r\n            params.minSponsorTokens,\r\n            params.timerAddress,\r\n            params.excessTokenBeneficiary\r\n        )\r\n        nonReentrant()\r\n    {\r\n        require(params.collateralRequirement.isGreaterThan(1), \"CR is more than 100%\");\r\n        require(\r\n            params.sponsorDisputeRewardPct.add(params.disputerDisputeRewardPct).isLessThan(1),\r\n            \"Rewards are more than 100%\"\r\n        );\r\n\r\n        // Set liquidatable specific variables.\r\n        liquidationLiveness = params.liquidationLiveness;\r\n        collateralRequirement = params.collateralRequirement;\r\n        disputeBondPct = params.disputeBondPct;\r\n        sponsorDisputeRewardPct = params.sponsorDisputeRewardPct;\r\n        disputerDisputeRewardPct = params.disputerDisputeRewardPct;\r\n    }\r\n\r\n    /****************************************\r\n     *        LIQUIDATION FUNCTIONS         *\r\n     ****************************************/\r\n\r\n    /**\r\n     * @notice Liquidates the sponsor's position if the caller has enough\r\n     * synthetic tokens to retire the position's outstanding tokens. Liquidations above\r\n     * a minimum size also reset an ongoing \"slow withdrawal\"'s liveness.\r\n     * @dev This method generates an ID that will uniquely identify liquidation for the sponsor. This contract must be\r\n     * approved to spend at least `tokensLiquidated` of `tokenCurrency` and at least `finalFeeBond` of `collateralCurrency`.\r\n     * @param sponsor address of the sponsor to liquidate.\r\n     * @param minCollateralPerToken abort the liquidation if the position's collateral per token is below this value.\r\n     * @param maxCollateralPerToken abort the liquidation if the position's collateral per token exceeds this value.\r\n     * @param maxTokensToLiquidate max number of tokens to liquidate.\r\n     * @param deadline abort the liquidation if the transaction is mined after this timestamp.\r\n     * @return liquidationId ID of the newly created liquidation.\r\n     * @return tokensLiquidated amount of synthetic tokens removed and liquidated from the `sponsor`'s position.\r\n     * @return finalFeeBond amount of collateral to be posted by liquidator and returned if not disputed successfully.\r\n     */\r\n    function createLiquidation(\r\n        address sponsor,\r\n        FixedPoint.Unsigned calldata minCollateralPerToken,\r\n        FixedPoint.Unsigned calldata maxCollateralPerToken,\r\n        FixedPoint.Unsigned calldata maxTokensToLiquidate,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        fees()\r\n        onlyPreExpiration()\r\n        nonReentrant()\r\n        returns (\r\n            uint256 liquidationId,\r\n            FixedPoint.Unsigned memory tokensLiquidated,\r\n            FixedPoint.Unsigned memory finalFeeBond\r\n        )\r\n    {\r\n        // Check that this transaction was mined pre-deadline.\r\n        require(getCurrentTime() <= deadline, \"Mined after deadline\");\r\n\r\n        // Retrieve Position data for sponsor\r\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\r\n\r\n        tokensLiquidated = FixedPoint.min(maxTokensToLiquidate, positionToLiquidate.tokensOutstanding);\r\n\r\n        // Starting values for the Position being liquidated. If withdrawal request amount is > position's collateral,\r\n        // then set this to 0, otherwise set it to (startCollateral - withdrawal request amount).\r\n        FixedPoint.Unsigned memory startCollateral = _getFeeAdjustedCollateral(positionToLiquidate.rawCollateral);\r\n        FixedPoint.Unsigned memory startCollateralNetOfWithdrawal = FixedPoint.fromUnscaledUint(0);\r\n        if (positionToLiquidate.withdrawalRequestAmount.isLessThanOrEqual(startCollateral)) {\r\n            startCollateralNetOfWithdrawal = startCollateral.sub(positionToLiquidate.withdrawalRequestAmount);\r\n        }\r\n\r\n        // Scoping to get rid of a stack too deep error.\r\n        {\r\n            FixedPoint.Unsigned memory startTokens = positionToLiquidate.tokensOutstanding;\r\n\r\n            // The Position's collateralization ratio must be between [minCollateralPerToken, maxCollateralPerToken].\r\n            // maxCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\r\n            require(\r\n                maxCollateralPerToken.mul(startTokens).isGreaterThanOrEqual(startCollateralNetOfWithdrawal),\r\n                \"CR is more than max liq. price\"\r\n            );\r\n            // minCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\r\n            require(\r\n                minCollateralPerToken.mul(startTokens).isLessThanOrEqual(startCollateralNetOfWithdrawal),\r\n                \"CR is less than min liq. price\"\r\n            );\r\n        }\r\n\r\n        // Compute final fee at time of liquidation.\r\n        finalFeeBond = _computeFinalFees();\r\n\r\n        // These will be populated within the scope below.\r\n        FixedPoint.Unsigned memory lockedCollateral;\r\n        FixedPoint.Unsigned memory liquidatedCollateral;\r\n\r\n        // Scoping to get rid of a stack too deep error.\r\n        {\r\n            FixedPoint.Unsigned memory ratio = tokensLiquidated.div(positionToLiquidate.tokensOutstanding);\r\n\r\n            // The actual amount of collateral that gets moved to the liquidation.\r\n            lockedCollateral = startCollateral.mul(ratio);\r\n\r\n            // For purposes of disputes, it's actually this liquidatedCollateral value that's used. This value is net of\r\n            // withdrawal requests.\r\n            liquidatedCollateral = startCollateralNetOfWithdrawal.mul(ratio);\r\n\r\n            // Part of the withdrawal request is also removed. Ideally:\r\n            // liquidatedCollateral + withdrawalAmountToRemove = lockedCollateral.\r\n            FixedPoint.Unsigned memory withdrawalAmountToRemove = positionToLiquidate.withdrawalRequestAmount.mul(\r\n                ratio\r\n            );\r\n            _reduceSponsorPosition(sponsor, tokensLiquidated, lockedCollateral, withdrawalAmountToRemove);\r\n        }\r\n\r\n        // Add to the global liquidation collateral count.\r\n        _addCollateral(rawLiquidationCollateral, lockedCollateral.add(finalFeeBond));\r\n\r\n        // Construct liquidation object.\r\n        // Note: All dispute-related values are zeroed out until a dispute occurs. liquidationId is the index of the new\r\n        // LiquidationData that is pushed into the array, which is equal to the current length of the array pre-push.\r\n        liquidationId = liquidations[sponsor].length;\r\n        liquidations[sponsor].push(\r\n            LiquidationData({\r\n                sponsor: sponsor,\r\n                liquidator: msg.sender,\r\n                state: Status.PreDispute,\r\n                liquidationTime: getCurrentTime(),\r\n                tokensOutstanding: tokensLiquidated,\r\n                lockedCollateral: lockedCollateral,\r\n                liquidatedCollateral: liquidatedCollateral,\r\n                rawUnitCollateral: _convertToRawCollateral(FixedPoint.fromUnscaledUint(1)),\r\n                disputer: address(0),\r\n                settlementPrice: FixedPoint.fromUnscaledUint(0),\r\n                finalFee: finalFeeBond\r\n            })\r\n        );\r\n\r\n        // If this liquidation is a subsequent liquidation on the position, and the liquidation size is larger than\r\n        // some \"griefing threshold\", then re-set the liveness. This enables a liquidation against a withdraw request to be\r\n        // \"dragged out\" if the position is very large and liquidators need time to gather funds. The griefing threshold\r\n        // is enforced so that liquidations for trivially small # of tokens cannot drag out an honest sponsor's slow withdrawal.\r\n\r\n        // We arbitrarily set the \"griefing threshold\" to `minSponsorTokens` because it is the only parameter\r\n        // denominated in token currency units and we can avoid adding another parameter.\r\n        FixedPoint.Unsigned memory griefingThreshold = minSponsorTokens;\r\n        if (\r\n            positionToLiquidate.withdrawalRequestPassTimestamp > 0 && // The position is undergoing a slow withdrawal.\r\n            positionToLiquidate.withdrawalRequestPassTimestamp <= getCurrentTime() && // The slow withdrawal has not yet expired.\r\n            tokensLiquidated.isGreaterThanOrEqual(griefingThreshold) // The liquidated token count is above a \"griefing threshold\".\r\n        ) {\r\n            positionToLiquidate.withdrawalRequestPassTimestamp = getCurrentTime().add(liquidationLiveness);\r\n        }\r\n\r\n        emit LiquidationCreated(\r\n            sponsor,\r\n            msg.sender,\r\n            liquidationId,\r\n            tokensLiquidated.rawValue,\r\n            lockedCollateral.rawValue,\r\n            liquidatedCollateral.rawValue,\r\n            getCurrentTime()\r\n        );\r\n\r\n        // Destroy tokens\r\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), tokensLiquidated.rawValue);\r\n        tokenCurrency.burn(tokensLiquidated.rawValue);\r\n\r\n        // Pull final fee from liquidator.\r\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), finalFeeBond.rawValue);\r\n    }\r\n\r\n    /**\r\n     * @notice Disputes a liquidation, if the caller has enough collateral to post a dispute bond\r\n     * and pay a fixed final fee charged on each price request.\r\n     * @dev Can only dispute a liquidation before the liquidation expires and if there are no other pending disputes.\r\n     * This contract must be approved to spend at least the dispute bond amount of `collateralCurrency`. This dispute\r\n     * bond amount is calculated from `disputeBondPct` times the collateral in the liquidation.\r\n     * @param liquidationId of the disputed liquidation.\r\n     * @param sponsor the address of the sponsor whose liquidation is being disputed.\r\n     * @return totalPaid amount of collateral charged to disputer (i.e. final fee bond + dispute bond).\r\n     */\r\n    function dispute(uint256 liquidationId, address sponsor)\r\n        external\r\n        disputable(liquidationId, sponsor)\r\n        fees()\r\n        nonReentrant()\r\n        returns (FixedPoint.Unsigned memory totalPaid)\r\n    {\r\n        LiquidationData storage disputedLiquidation = _getLiquidationData(sponsor, liquidationId);\r\n\r\n        // Multiply by the unit collateral so the dispute bond is a percentage of the locked collateral after fees.\r\n        FixedPoint.Unsigned memory disputeBondAmount = disputedLiquidation.lockedCollateral.mul(disputeBondPct).mul(\r\n            _getFeeAdjustedCollateral(disputedLiquidation.rawUnitCollateral)\r\n        );\r\n        _addCollateral(rawLiquidationCollateral, disputeBondAmount);\r\n\r\n        // Request a price from DVM. Liquidation is pending dispute until DVM returns a price.\r\n        disputedLiquidation.state = Status.PendingDispute;\r\n        disputedLiquidation.disputer = msg.sender;\r\n\r\n        // Enqueue a request with the DVM.\r\n        _requestOraclePrice(disputedLiquidation.liquidationTime);\r\n\r\n        emit LiquidationDisputed(\r\n            sponsor,\r\n            disputedLiquidation.liquidator,\r\n            msg.sender,\r\n            liquidationId,\r\n            disputeBondAmount.rawValue\r\n        );\r\n        totalPaid = disputeBondAmount.add(disputedLiquidation.finalFee);\r\n\r\n        // Pay the final fee for requesting price from the DVM.\r\n        _payFinalFees(msg.sender, disputedLiquidation.finalFee);\r\n\r\n        // Transfer the dispute bond amount from the caller to this contract.\r\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), disputeBondAmount.rawValue);\r\n    }\r\n\r\n    /**\r\n     * @notice After a dispute has settled or after a non-disputed liquidation has expired,\r\n     * the sponsor, liquidator, and/or disputer can call this method to receive payments.\r\n     * @dev If the dispute SUCCEEDED: the sponsor, liquidator, and disputer are eligible for payment.\r\n     * If the dispute FAILED: only the liquidator can receive payment.\r\n     * Once all collateral is withdrawn, delete the liquidation data.\r\n     * @param liquidationId uniquely identifies the sponsor's liquidation.\r\n     * @param sponsor address of the sponsor associated with the liquidation.\r\n     * @return amountWithdrawn the total amount of underlying returned from the liquidation.\r\n     */\r\n    function withdrawLiquidation(uint256 liquidationId, address sponsor)\r\n        public\r\n        withdrawable(liquidationId, sponsor)\r\n        fees()\r\n        nonReentrant()\r\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\r\n    {\r\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\r\n        require(\r\n            (msg.sender == liquidation.disputer) ||\r\n                (msg.sender == liquidation.liquidator) ||\r\n                (msg.sender == liquidation.sponsor),\r\n            \"Caller cannot withdraw rewards\"\r\n        );\r\n\r\n        // Settles the liquidation if necessary. This call will revert if the price has not resolved yet.\r\n        _settle(liquidationId, sponsor);\r\n\r\n        // Calculate rewards as a function of the TRV.\r\n        // Note: all payouts are scaled by the unit collateral value so all payouts are charged the fees pro rata.\r\n        FixedPoint.Unsigned memory feeAttenuation = _getFeeAdjustedCollateral(liquidation.rawUnitCollateral);\r\n        FixedPoint.Unsigned memory settlementPrice = liquidation.settlementPrice;\r\n        FixedPoint.Unsigned memory tokenRedemptionValue = liquidation.tokensOutstanding.mul(settlementPrice).mul(\r\n            feeAttenuation\r\n        );\r\n        FixedPoint.Unsigned memory collateral = liquidation.lockedCollateral.mul(feeAttenuation);\r\n        FixedPoint.Unsigned memory disputerDisputeReward = disputerDisputeRewardPct.mul(tokenRedemptionValue);\r\n        FixedPoint.Unsigned memory sponsorDisputeReward = sponsorDisputeRewardPct.mul(tokenRedemptionValue);\r\n        FixedPoint.Unsigned memory disputeBondAmount = collateral.mul(disputeBondPct);\r\n        FixedPoint.Unsigned memory finalFee = liquidation.finalFee.mul(feeAttenuation);\r\n\r\n        // There are three main outcome states: either the dispute succeeded, failed or was not updated.\r\n        // Based on the state, different parties of a liquidation can withdraw different amounts.\r\n        // Once a caller has been paid their address deleted from the struct.\r\n        // This prevents them from being paid multiple from times the same liquidation.\r\n        FixedPoint.Unsigned memory withdrawalAmount = FixedPoint.fromUnscaledUint(0);\r\n        if (liquidation.state == Status.DisputeSucceeded) {\r\n            // If the dispute is successful then all three users can withdraw from the contract.\r\n            if (msg.sender == liquidation.disputer) {\r\n                // Pay DISPUTER: disputer reward + dispute bond + returned final fee\r\n                FixedPoint.Unsigned memory payToDisputer = disputerDisputeReward.add(disputeBondAmount).add(finalFee);\r\n                withdrawalAmount = withdrawalAmount.add(payToDisputer);\r\n                delete liquidation.disputer;\r\n            }\r\n\r\n            if (msg.sender == liquidation.sponsor) {\r\n                // Pay SPONSOR: remaining collateral (collateral - TRV) + sponsor reward\r\n                FixedPoint.Unsigned memory remainingCollateral = collateral.sub(tokenRedemptionValue);\r\n                FixedPoint.Unsigned memory payToSponsor = sponsorDisputeReward.add(remainingCollateral);\r\n                withdrawalAmount = withdrawalAmount.add(payToSponsor);\r\n                delete liquidation.sponsor;\r\n            }\r\n\r\n            if (msg.sender == liquidation.liquidator) {\r\n                // Pay LIQUIDATOR: TRV - dispute reward - sponsor reward\r\n                // If TRV > Collateral, then subtract rewards from collateral\r\n                // NOTE: This should never be below zero since we prevent (sponsorDisputePct+disputerDisputePct) >= 0 in\r\n                // the constructor when these params are set.\r\n                FixedPoint.Unsigned memory payToLiquidator = tokenRedemptionValue.sub(sponsorDisputeReward).sub(\r\n                    disputerDisputeReward\r\n                );\r\n                withdrawalAmount = withdrawalAmount.add(payToLiquidator);\r\n                delete liquidation.liquidator;\r\n            }\r\n\r\n            // Free up space once all collateral is withdrawn by removing the liquidation object from the array.\r\n            if (\r\n                liquidation.disputer == address(0) &&\r\n                liquidation.sponsor == address(0) &&\r\n                liquidation.liquidator == address(0)\r\n            ) {\r\n                delete liquidations[sponsor][liquidationId];\r\n            }\r\n            // In the case of a failed dispute only the liquidator can withdraw.\r\n        } else if (liquidation.state == Status.DisputeFailed && msg.sender == liquidation.liquidator) {\r\n            // Pay LIQUIDATOR: collateral + dispute bond + returned final fee\r\n            withdrawalAmount = collateral.add(disputeBondAmount).add(finalFee);\r\n            delete liquidations[sponsor][liquidationId];\r\n            // If the state is pre-dispute but time has passed liveness then there was no dispute. We represent this\r\n            // state as a dispute failed and the liquidator can withdraw.\r\n        } else if (liquidation.state == Status.PreDispute && msg.sender == liquidation.liquidator) {\r\n            // Pay LIQUIDATOR: collateral + returned final fee\r\n            withdrawalAmount = collateral.add(finalFee);\r\n            delete liquidations[sponsor][liquidationId];\r\n        }\r\n        require(withdrawalAmount.isGreaterThan(0), \"Invalid withdrawal amount\");\r\n\r\n        // Decrease the total collateral held in liquidatable by the amount withdrawn.\r\n        amountWithdrawn = _removeCollateral(rawLiquidationCollateral, withdrawalAmount);\r\n\r\n        emit LiquidationWithdrawn(msg.sender, amountWithdrawn.rawValue, liquidation.state, settlementPrice.rawValue);\r\n\r\n        // Transfer amount withdrawn from this contract to the caller.\r\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\r\n\r\n        return amountWithdrawn;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets all liquidation information for a given sponsor address.\r\n     * @param sponsor address of the position sponsor.\r\n     * @return liquidationData array of all liquidation information for the given sponsor address.\r\n     */\r\n    function getLiquidations(address sponsor)\r\n        external\r\n        view\r\n        nonReentrantView()\r\n        returns (LiquidationData[] memory liquidationData)\r\n    {\r\n        return liquidations[sponsor];\r\n    }\r\n\r\n    /****************************************\r\n     *          INTERNAL FUNCTIONS          *\r\n     ****************************************/\r\n\r\n    // This settles a liquidation if it is in the PendingDispute state. If not, it will immediately return.\r\n    // If the liquidation is in the PendingDispute state, but a price is not available, this will revert.\r\n    function _settle(uint256 liquidationId, address sponsor) internal {\r\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\r\n\r\n        // Settlement only happens when state == PendingDispute and will only happen once per liquidation.\r\n        // If this liquidation is not ready to be settled, this method should return immediately.\r\n        if (liquidation.state != Status.PendingDispute) {\r\n            return;\r\n        }\r\n\r\n        // Get the returned price from the oracle. If this has not yet resolved will revert.\r\n        liquidation.settlementPrice = _getOraclePrice(liquidation.liquidationTime);\r\n\r\n        // Find the value of the tokens in the underlying collateral.\r\n        FixedPoint.Unsigned memory tokenRedemptionValue = liquidation.tokensOutstanding.mul(\r\n            liquidation.settlementPrice\r\n        );\r\n\r\n        // The required collateral is the value of the tokens in underlying * required collateral ratio.\r\n        FixedPoint.Unsigned memory requiredCollateral = tokenRedemptionValue.mul(collateralRequirement);\r\n\r\n        // If the position has more than the required collateral it is solvent and the dispute is valid(liquidation is invalid)\r\n        // Note that this check uses the liquidatedCollateral not the lockedCollateral as this considers withdrawals.\r\n        bool disputeSucceeded = liquidation.liquidatedCollateral.isGreaterThanOrEqual(requiredCollateral);\r\n        liquidation.state = disputeSucceeded ? Status.DisputeSucceeded : Status.DisputeFailed;\r\n\r\n        emit DisputeSettled(\r\n            msg.sender,\r\n            sponsor,\r\n            liquidation.liquidator,\r\n            liquidation.disputer,\r\n            liquidationId,\r\n            disputeSucceeded\r\n        );\r\n    }\r\n\r\n    function _pfc() internal override view returns (FixedPoint.Unsigned memory) {\r\n        return super._pfc().add(_getFeeAdjustedCollateral(rawLiquidationCollateral));\r\n    }\r\n\r\n    function _getLiquidationData(address sponsor, uint256 liquidationId)\r\n        internal\r\n        view\r\n        returns (LiquidationData storage liquidation)\r\n    {\r\n        LiquidationData[] storage liquidationArray = liquidations[sponsor];\r\n\r\n        // Revert if the caller is attempting to access an invalid liquidation\r\n        // (one that has never been created or one has never been initialized).\r\n        require(\r\n            liquidationId < liquidationArray.length && liquidationArray[liquidationId].state != Status.Uninitialized,\r\n            \"Invalid liquidation ID\"\r\n        );\r\n        return liquidationArray[liquidationId];\r\n    }\r\n\r\n    function _getLiquidationExpiry(LiquidationData storage liquidation) internal view returns (uint256) {\r\n        return liquidation.liquidationTime.add(liquidationLiveness);\r\n    }\r\n\r\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\r\n    // unnecessarily increase contract bytecode size.\r\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\r\n    function _disputable(uint256 liquidationId, address sponsor) internal view {\r\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\r\n        require(\r\n            (getCurrentTime() < _getLiquidationExpiry(liquidation)) && (liquidation.state == Status.PreDispute),\r\n            \"Liquidation not disputable\"\r\n        );\r\n    }\r\n\r\n    function _withdrawable(uint256 liquidationId, address sponsor) internal view {\r\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\r\n        Status state = liquidation.state;\r\n\r\n        // Must be disputed or the liquidation has passed expiry.\r\n        require(\r\n            (state > Status.PreDispute) ||\r\n                ((_getLiquidationExpiry(liquidation) <= getCurrentTime()) && (state == Status.PreDispute)),\r\n            \"Liquidation not withdrawable\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/financial-templates/expiring-multiparty/ExpiringMultiParty.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Expiring Multi Party.\r\n * @notice Convenient wrapper for Liquidatable.\r\n */\r\ncontract ExpiringMultiParty is Liquidatable {\r\n    /**\r\n     * @notice Constructs the ExpiringMultiParty contract.\r\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\r\n     * are fed directly into the PricelessPositionManager's constructor within the inheritance tree.\r\n     */\r\n    constructor(ConstructorParams memory params)\r\n        public\r\n        Liquidatable(params)\r\n    // Note: since there is no logic here, there is no need to add a re-entrancy guard.\r\n    {\r\n\r\n    }\r\n}\r\n\r\n// File: contracts/financial-templates/expiring-multiparty/ExpiringMultiPartyLib.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Provides convenient Expiring Multi Party contract utilities.\r\n * @dev Using this library to deploy EMP's allows calling contracts to avoid importing the full EMP bytecode.\r\n */\r\nlibrary ExpiringMultiPartyLib {\r\n    /**\r\n     * @notice Returns address of new EMP deployed with given `params` configuration.\r\n     * @dev Caller will need to register new EMP with the Registry to begin requesting prices. Caller is also\r\n     * responsible for enforcing constraints on `params`.\r\n     * @param params is a `ConstructorParams` object from ExpiringMultiParty.\r\n     * @return address of the deployed ExpiringMultiParty contract\r\n     */\r\n    function deploy(ExpiringMultiParty.ConstructorParams memory params) public returns (address) {\r\n        ExpiringMultiParty derivative = new ExpiringMultiParty(params);\r\n        return address(derivative);\r\n    }\r\n}\r\n\r\n// File: contracts/financial-templates/expiring-multiparty/ExpiringMultiPartyCreator.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Expiring Multi Party Contract creator.\r\n * @notice Factory contract to create and register new instances of expiring multiparty contracts.\r\n * Responsible for constraining the parameters used to construct a new EMP. This creator contains a number of constraints\r\n * that are applied to newly created expiring multi party contract. These constraints can evolve over time and are\r\n * initially constrained to conservative values in this first iteration. Technically there is nothing in the\r\n * ExpiringMultiParty contract requiring these constraints. However, because `createExpiringMultiParty()` is intended\r\n * to be the only way to create valid financial contracts that are registered with the DVM (via _registerContract),\r\n  we can enforce deployment configurations here.\r\n */\r\ncontract ExpiringMultiPartyCreator is ContractCreator, Testable, Lockable {\r\n    using FixedPoint for FixedPoint.Unsigned;\r\n\r\n    /****************************************\r\n     *     EMP CREATOR DATA STRUCTURES      *\r\n     ****************************************/\r\n\r\n    struct Params {\r\n        uint256 expirationTimestamp;\r\n        address collateralAddress;\r\n        bytes32 priceFeedIdentifier;\r\n        string syntheticName;\r\n        string syntheticSymbol;\r\n        FixedPoint.Unsigned collateralRequirement;\r\n        FixedPoint.Unsigned disputeBondPct;\r\n        FixedPoint.Unsigned sponsorDisputeRewardPct;\r\n        FixedPoint.Unsigned disputerDisputeRewardPct;\r\n        FixedPoint.Unsigned minSponsorTokens;\r\n        uint256 withdrawalLiveness;\r\n        uint256 liquidationLiveness;\r\n        address excessTokenBeneficiary;\r\n    }\r\n    // - Address of TokenFactory to pass into newly constructed ExpiringMultiParty contracts\r\n    address public tokenFactoryAddress;\r\n\r\n    event CreatedExpiringMultiParty(address indexed expiringMultiPartyAddress, address indexed deployerAddress);\r\n\r\n    /**\r\n     * @notice Constructs the ExpiringMultiPartyCreator contract.\r\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\r\n     * @param _tokenFactoryAddress ERC20 token factory used to deploy synthetic token instances.\r\n     * @param _timerAddress Contract that stores the current time in a testing environment.\r\n     */\r\n    constructor(\r\n        address _finderAddress,\r\n        address _tokenFactoryAddress,\r\n        address _timerAddress\r\n    ) public ContractCreator(_finderAddress) Testable(_timerAddress) nonReentrant() {\r\n        tokenFactoryAddress = _tokenFactoryAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Creates an instance of expiring multi party and registers it within the registry.\r\n     * @param params is a `ConstructorParams` object from ExpiringMultiParty.\r\n     * @return address of the deployed ExpiringMultiParty contract.\r\n     */\r\n    function createExpiringMultiParty(Params memory params) public nonReentrant() returns (address) {\r\n        address derivative = ExpiringMultiPartyLib.deploy(_convertParams(params));\r\n\r\n        _registerContract(new address[](0), address(derivative));\r\n\r\n        emit CreatedExpiringMultiParty(address(derivative), msg.sender);\r\n\r\n        return address(derivative);\r\n    }\r\n\r\n    /****************************************\r\n     *          PRIVATE FUNCTIONS           *\r\n     ****************************************/\r\n\r\n    // Converts createExpiringMultiParty params to ExpiringMultiParty constructor params.\r\n    function _convertParams(Params memory params)\r\n        private\r\n        view\r\n        returns (ExpiringMultiParty.ConstructorParams memory constructorParams)\r\n    {\r\n        // Known from creator deployment.\r\n        constructorParams.finderAddress = finderAddress;\r\n        constructorParams.tokenFactoryAddress = tokenFactoryAddress;\r\n        constructorParams.timerAddress = timerAddress;\r\n\r\n        // Enforce configuration constraints.\r\n        require(bytes(params.syntheticName).length != 0, \"Missing synthetic name\");\r\n        require(bytes(params.syntheticSymbol).length != 0, \"Missing synthetic symbol\");\r\n        require(params.withdrawalLiveness != 0, \"Withdrawal liveness cannot be 0\");\r\n        require(params.liquidationLiveness != 0, \"Liquidation liveness cannot be 0\");\r\n        require(params.excessTokenBeneficiary != address(0), \"Token Beneficiary cannot be 0x0\");\r\n        require(params.expirationTimestamp > now, \"Invalid expiration time\");\r\n        _requireWhitelistedCollateral(params.collateralAddress);\r\n\r\n        // We don't want EMP deployers to be able to intentionally or unintentionally set\r\n        // liveness periods that could induce arithmetic overflow, but we also don't want\r\n        // to be opinionated about what livenesses are \"correct\", so we will somewhat\r\n        // arbitrarily set the liveness upper bound to 100 years (5200 weeks). In practice, liveness\r\n        // periods even greater than a few days would make the EMP unusable for most users.\r\n        require(params.withdrawalLiveness < 5200 weeks, \"Withdrawal liveness too large\");\r\n        require(params.liquidationLiveness < 5200 weeks, \"Liquidation liveness too large\");\r\n\r\n        // Input from function call.\r\n        constructorParams.expirationTimestamp = params.expirationTimestamp;\r\n        constructorParams.collateralAddress = params.collateralAddress;\r\n        constructorParams.priceFeedIdentifier = params.priceFeedIdentifier;\r\n        constructorParams.syntheticName = params.syntheticName;\r\n        constructorParams.syntheticSymbol = params.syntheticSymbol;\r\n        constructorParams.collateralRequirement = params.collateralRequirement;\r\n        constructorParams.disputeBondPct = params.disputeBondPct;\r\n        constructorParams.sponsorDisputeRewardPct = params.sponsorDisputeRewardPct;\r\n        constructorParams.disputerDisputeRewardPct = params.disputerDisputeRewardPct;\r\n        constructorParams.minSponsorTokens = params.minSponsorTokens;\r\n        constructorParams.withdrawalLiveness = params.withdrawalLiveness;\r\n        constructorParams.liquidationLiveness = params.liquidationLiveness;\r\n        constructorParams.excessTokenBeneficiary = params.excessTokenBeneficiary;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_finderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"expiringMultiPartyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployerAddress\",\"type\":\"address\"}],\"name\":\"CreatedExpiringMultiParty\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"priceFeedIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"syntheticName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"syntheticSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralRequirement\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"disputeBondPct\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"sponsorDisputeRewardPct\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"disputerDisputeRewardPct\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"minSponsorTokens\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalLiveness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationLiveness\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"excessTokenBeneficiary\",\"type\":\"address\"}],\"internalType\":\"struct ExpiringMultiPartyCreator.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createExpiringMultiParty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ExpiringMultiPartyCreator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"199","ConstructorArguments":"00000000000000000000000040f941e48a552bf496b154af6bf55725f18d77c30000000000000000000000007c96d6235cfaaccac5d80fce74e6032b25dd1f030000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"ExpiringMultiPartyLib:38015ddb8b34c84934cff058f571349cc7d4139d","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9bbb201678f429ab53970871a9747d04c88743c861188163d6d3f4490ebcad4b"}]}