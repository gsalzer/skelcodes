{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n\n/**\n * @title Contract Address Locator Interface.\n */\ninterface IContractAddressLocator {\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) external view returns (address);\n\n    /**\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\n     * @param _contractAddress The contract address to look for.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\n     */\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n\n/**\n * @title Contract Address Locator Holder.\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n */\ncontract ContractAddressLocatorHolder {\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\n    bytes32 internal constant _ISGAAuthorizationManager_ = \"ISGAAuthorizationManager\";\n    bytes32 internal constant _ISGAToken_                = \"ISGAToken\"               ;\n    bytes32 internal constant _ISGATokenManager_         = \"ISGATokenManager\"        ;\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\n    bytes32 internal constant _BuyWalletsTradingDataSource_       = \"BuyWalletsTradingDataSource\"      ;\n    bytes32 internal constant _SellWalletsTradingDataSource_       = \"SellWalletsTradingDataSource\"      ;\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\n    bytes32 internal constant _BuyWalletsTradingLimiter_SGATokenManager_          = \"BuyWalletsTLSGATokenManager\"         ;\n    bytes32 internal constant _SellWalletsTradingLimiter_SGATokenManager_          = \"SellWalletsTLSGATokenManager\"         ;\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\n\n    IContractAddressLocator private contractAddressLocator;\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\n        contractAddressLocator = _contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address locator.\n     * @return The contract address locator.\n     */\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n        return contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n        return contractAddressLocator.getContractAddress(_identifier);\n    }\n\n\n\n    /**\n     * @dev Determine whether or not the sender relates to one of the identifiers.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the sender relates to one of the identifiers.\n     */\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n    }\n\n    /**\n     * @dev Verify that the caller is mapped to a given identifier.\n     * @param _identifier The identifier.\n     */\n    modifier only(bytes32 _identifier) {\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\n        _;\n    }\n\n}\n\n// File: contracts/saga/interfaces/ISGAAuthorizationManager.sol\n\n/**\n * @title SGA Authorization Manager Interface.\n */\ninterface ISGAAuthorizationManager {\n    /**\n     * @dev Determine whether or not a user is authorized to buy SGA.\n     * @param _sender The address of the user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToBuy(address _sender) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized to sell SGA.\n     * @param _sender The address of the user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToSell(address _sender) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized to transfer SGA to another user.\n     * @param _sender The address of the source user.\n     * @param _target The address of the target user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToTransfer(address _sender, address _target) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized to transfer SGA from one user to another user.\n     * @param _sender The address of the custodian user.\n     * @param _source The address of the source user.\n     * @param _target The address of the target user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToTransferFrom(address _sender, address _source, address _target) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized for public operation.\n     * @param _sender The address of the user.\n     * @return Authorization status.\n     */\n    function isAuthorizedForPublicOperation(address _sender) external view returns (bool);\n}\n\n// File: contracts/saga/voting/ApprovalVoting.sol\n\n/**\n * @title Approval Voting.\n */\ncontract ApprovalVoting is ContractAddressLocatorHolder {\n    string public constant VERSION = \"1.0.0\";\n\n    enum Vote {\n        Absent,\n        Yea,\n        Nay\n    }\n\n    string public description;\n\n    mapping(address => Vote) public votes;\n    address[] public voters;\n\n    uint256 public startBlock;\n    uint256 public endBlock;\n\n    event VoteCasted(address indexed voter, bool supports);\n\n    /*\n    * @dev Create the contract.\n    * @param _contractAddressLocator The contract address locator.\n    * @param _description The voting description.\n    * @param _startBlock The voting start block.\n    * @param _endBlock The voting end block.\n    */\n    constructor(IContractAddressLocator _contractAddressLocator, string _description, uint256 _startBlock, uint256 _endBlock) ContractAddressLocatorHolder(_contractAddressLocator) public\n    {\n        require(_startBlock > block.number, \"invalid start block\");\n        require(_endBlock > _startBlock, \"invalid end block\");\n\n        bytes memory _descriptionBytes = bytes(_description);\n        require(_descriptionBytes.length != 0, \"invalid empty description\");\n\n        description = _description;\n\n        startBlock = _startBlock;\n        endBlock = _endBlock;\n    }\n\n    /**\n     * @dev Return the contract which implements the ISGAAuthorizationManager interface.\n     */\n    function getSGAAuthorizationManager() public view returns (ISGAAuthorizationManager) {\n        return ISGAAuthorizationManager(getContractAddress(_ISGAAuthorizationManager_));\n    }\n\n    /**\n    * @dev throw if called when not active.\n    */\n    modifier onlyIfActive() {\n        require(isActive(), \"voting proposal not active\");\n        _;\n    }\n\n\n    /**\n    * @dev throw if called when user already voted.\n    */\n    modifier onlyIfUserVoteAbsent() {\n        require(votes[msg.sender] == Vote.Absent, \"voting proposal already voted\");\n        _;\n    }\n\n\n    /**\n    * @dev throw if called when user is not authorized.\n    */\n    modifier onlyIfAuthorizedUser() {\n        ISGAAuthorizationManager sgaAuthorizationManager = getSGAAuthorizationManager();\n        bool senderIsAuthorized = sgaAuthorizationManager.isAuthorizedForPublicOperation(msg.sender);\n        require(senderIsAuthorized, \"user is not authorized\");\n        _;\n    }\n\n    /**\n    * @dev Is active.\n    * @return is voting active.\n    */\n    function isActive() public view returns (bool) {\n        uint256 currentBlockNumber = block.number;\n        return currentBlockNumber >= startBlock && currentBlockNumber <= endBlock;\n    }\n\n    /**\n    * @dev Get total voters count .\n    * @return total voters count.\n    */\n    function getTotalVoters() external view returns (uint256) {\n        return voters.length;\n    }\n\n    /**\n    * @dev Get voters range.\n    * @return voters range.\n    */\n    function getVotersRange(uint256 _startIndex, uint256 _count) external view returns (address[] memory) {\n        uint256 rangeCount = _count;\n        if (rangeCount > voters.length - _startIndex) {\n            rangeCount = voters.length - _startIndex;\n        }\n        address[] memory rangeVoters = new address[](rangeCount);\n\n        for (uint256 i = 0; i < rangeCount; i++) {\n            rangeVoters[i] = voters[_startIndex + i];\n        }\n\n        return rangeVoters;\n    }\n\n    /**\n    * @dev Get all voters.\n    * @return all voters.\n    */\n    function getAllVoters() external view returns (address[] memory) {\n        return voters;\n    }\n\n    /**\n    * @dev Vote for proposal.\n    */\n    function voteFor() public\n    {\n        castVote(true);\n    }\n\n    /**\n    * @dev Vote against proposal.\n    */\n    function voteAgainst() public\n    {\n        castVote(false);\n    }\n\n    /**\n    * @dev Cast a vote.\n    * @param _supports vote decision.\n    */\n    function castVote(bool _supports) public onlyIfActive onlyIfUserVoteAbsent onlyIfAuthorizedUser\n    {\n        address sender = msg.sender;\n        votes[sender] = _supports ? Vote.Yea : Vote.Nay;\n        voters.push(sender);\n        emit VoteCasted(sender, _supports);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getSGAAuthorizationManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_supports\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteAgainst\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getVotersRange\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"supports\",\"type\":\"bool\"}],\"name\":\"VoteCasted\",\"type\":\"event\"}]","ContractName":"ApprovalVoting","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000a482d80000000000000000000000000000000000000000000000000000000000a4eea8000000000000000000000000000000000000000000000000000000000000003f50726f706f73616c206f6620616d656e646d656e747320746f20536167612773204d6f6e657461727920616e6420476f7665726e616e6365204d6f64656c7300","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}