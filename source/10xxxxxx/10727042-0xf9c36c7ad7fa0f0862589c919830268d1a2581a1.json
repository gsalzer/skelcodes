{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-07-30\r\n*/\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract BOA is Ownable{\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => bool) public whitelist;\r\n\r\n    string public name = \"Boa\";\r\n    string public symbol = \"BOA\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 100 * (uint256(10) ** decimals);\r\n    uint256 public totalPooled;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() public {\r\n        totalPooled = 50 * (uint256(10) ** decimals);\r\n        \r\n        // Initially assign all non-pooled tokens to the contract's creator.\r\n        balanceOf[msg.sender] = totalSupply.sub(totalPooled);\r\n        \r\n        emit Transfer(address(0), msg.sender, totalSupply.sub(totalPooled));\r\n    }\r\n    \r\n    // Ensure a redemption is profitable before allowing a redeem()\r\n    modifier profitable() {\r\n        require(is_profitable(), \"Redeeming is not yet profitable.\");\r\n        _;\r\n    } \r\n    \r\n    // VIEWS \r\n    \r\n    // Get the number of tokens to be redeemed from the pool\r\n    function numberRedeemed(uint256 amount) \r\n        public \r\n        view \r\n        returns (uint256 profit) {\r\n        uint256 numerator = amount.mul(totalPooled);  \r\n        uint256 denominator = totalSupply.sub(totalPooled);  \r\n        return numerator.div(denominator);\r\n    }\r\n    \r\n    // Check if more than 50% of the token is pooled\r\n    function is_profitable() \r\n        public \r\n        view \r\n        returns (bool _profitable) {\r\n        return totalPooled > totalSupply.sub(totalPooled);\r\n    }\r\n\r\n\r\n    // SETTERS\r\n\r\n    function addToWhitelist(address _addr) \r\n        public \r\n        onlyOwner {\r\n        whitelist[_addr] = true;\r\n    }\r\n    \r\n    function removeFromWhitelist(address _addr) \r\n        public \r\n        onlyOwner {\r\n        whitelist[_addr] = false;\r\n    }\r\n    \r\n    // TRANSFER FUNCTIONS \r\n    \r\n    // BOA-TOKEN <- Sell taxed\r\n    // TOKEN-BOA <- Buy (not taxed)\r\n    \r\n    function transfer(address to, uint256 value) \r\n        public \r\n        returns (bool success) {\r\n        require(balanceOf[msg.sender] >= value);\r\n        \r\n        if(whitelist[msg.sender]) return regular_transfer(to, value);\r\n        else return burn_transfer(to, value);\r\n    }\r\n    \r\n    function burn_transfer(address to, uint256 value) \r\n        private \r\n        returns (bool success) {\r\n        // send 1% to the pooled ledger\r\n        uint256 burned_amount = value.div(100);\r\n        \r\n        // withdraw from the user's balance\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(burned_amount);\r\n        // increment the total pooled amount\r\n        totalPooled = totalPooled.add(burned_amount);\r\n        \r\n        value = value.sub(burned_amount);\r\n        \r\n        // perform a normal transfer on the remaining 99%\r\n        return regular_transfer(to, value);\r\n    }\r\n\r\n    function regular_transfer(address to, uint256 value) \r\n        private \r\n        returns (bool success) {\r\n        // perform a normal transfer \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(value);  \r\n        balanceOf[to] = balanceOf[to].add(value);                   \r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(value <= balanceOf[from]);\r\n        require(value <= allowance[from][msg.sender]);\r\n\r\n        // allow feeless for the RED-BLUE uniswap pool\r\n        if(whitelist[msg.sender]) return regular_transferFrom(from, to, value);\r\n        else return burn_transferFrom(from, to, value); \r\n\r\n    }\r\n    \r\n    function burn_transferFrom(address from, address to, uint256 value) \r\n        private \r\n        returns (bool success) {\r\n        // send 1% to the pooled ledger\r\n        uint256 burned_amount = value.div(100);\r\n        \r\n        // remove from the spender's balance\r\n        balanceOf[from] = balanceOf[from].sub(burned_amount);\r\n        // increment the total pooled amount\r\n        totalPooled = totalPooled.add(burned_amount);\r\n        \r\n        // burn allowance (for approved spenders)\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(burned_amount);\r\n        \r\n        value = value.sub(burned_amount);\r\n        \r\n        // perform a normal transfer on the 99%\r\n        return regular_transferFrom(from, to, value);\r\n    }\r\n    \r\n    function regular_transferFrom(address from, address to, uint256 value) \r\n        private\r\n        returns (bool success) {\r\n        // transfer without adding to a pool\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        \r\n        // remove allowance (for approved spenders)\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    // REDEEM AND BURN FUNCTIONS\r\n    \r\n    // amount = number of tokens to burn\r\n    function redeem(uint256 amount) \r\n        public \r\n        profitable \r\n        returns (bool success) {\r\n        // the amount must be less than the total amount pooled\r\n        require(amount <= balanceOf[msg.sender]);\r\n        require(totalPooled >= amount); \r\n    \tuint256 num_redeemed = numberRedeemed(amount);\r\n        \r\n        // make sure the number available to be redeemed is smaller than the available pool\r\n\t    require(num_redeemed < totalPooled);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(num_redeemed);\r\n        \r\n        emit Transfer(_owner, msg.sender, num_redeemed);\r\n        totalPooled = totalPooled.sub(num_redeemed);\r\n        \r\n        // burn the amount sent\r\n        return burn(amount);\r\n    }\r\n    \r\n    function burn(uint256 value) \r\n        private \r\n        returns (bool success) {\r\n        // burn from the user's ledger, transfer to 0x0\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(value);  \r\n        balanceOf[address(0)] = balanceOf[address(0)].add(value);\r\n        emit Transfer(msg.sender, address(0), value);\r\n        \r\n        // remove the burned amount from the total supply\r\n        totalSupply = totalSupply.sub(value);\r\n        return true;\r\n    }\r\n    \r\n    // APPROVAL FUNCTIONS\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_profitable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_profitable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"numberRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPooled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BOA","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://05bcbf254ef0c154375e8356ba7cb2f0773b3a82dc5043bed0e9090228f082f1"}]}