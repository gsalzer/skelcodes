{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Leafan.Chan\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @author  Leafan.Chan <leafan@qq.com>\r\n *\r\n * @dev     Contract for imtoken dapp test\r\n *\r\n * @notice  Use it for your own risk\r\n */\r\n\r\n\r\n/**\r\n * @title EIP20NonStandardInterface\r\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\r\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n */\r\ninterface EIP20NonStandardInterface {\r\n\r\n    /**\r\n     * @notice Get the total number of tokens in circulation\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      */\r\n    function transfer(address dst, uint256 amount) external;\r\n\r\n    ///\r\n    /// !!!!!!!!!!!!!!\r\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\r\n    /// !!!!!!!!!!!!!!\r\n    ///\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `src` to `dst`\r\n      * @param src The address of the source account\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      */\r\n    function transferFrom(address src, address dst, uint256 amount) external;\r\n\r\n    /**\r\n      * @notice Approve `spender` to transfer up to `amount` from `src`\r\n      * @dev This will overwrite the approval amount for `spender`\r\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @param amount The number of tokens that are approved\r\n      */\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Get the current allowance from `owner` for `spender`\r\n      * @param owner The address of the account which owns the tokens to be spent\r\n      * @param spender The address of the account which may transfer tokens\r\n      */\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n\r\ncontract MLFundTest {\r\n    uint256 public constant etherUnit = 1e18;\r\n\r\n    // commonly a pair should be base/quote\r\n    // so ett is the base currency, usdt is the quote currency in our game.\r\n    address public constant baseAddr    = 0x65eb823B91B0e17741Ef224dE3Da1ba4e439dfa7;   // ett token addr\r\n    address public constant quoteAddr   = 0xdAC17F958D2ee523a2206206994597C13D831ec7;   // usdt token addr\r\n\r\n    // convert token address to contract object\r\n    EIP20NonStandardInterface public constant baseToken     = EIP20NonStandardInterface(baseAddr);\r\n    EIP20NonStandardInterface public constant quoteToken    = EIP20NonStandardInterface(quoteAddr);\r\n\r\n    address private _luckyPoolOwner;\r\n\r\n    // constructor\r\n    constructor() public {\r\n        _luckyPoolOwner = msg.sender;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev main mlfund function, deposit quote token, and return base token\r\n     */\r\n    function mlfund(uint256 amount) public returns(bool) {\r\n        require(amount > 0, \"amount should be greater than 0\");\r\n        uint256 testFunds = 10*etherUnit;\r\n\r\n        require(baseToken.balanceOf(address(this)) > 0, \"contract has no base token now, please retry.\");\r\n\r\n        quoteToken.transferFrom(msg.sender, _luckyPoolOwner, amount);\r\n\r\n        // then do base token transfer\r\n        baseToken.transfer(msg.sender, testFunds);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"baseAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract EIP20NonStandardInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etherUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mlfund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"contract EIP20NonStandardInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MLFundTest","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1eb145f8ea319899e6aec1e27683d280f7e70a8f8de4e4f6c05db638c7dfa520"}]}