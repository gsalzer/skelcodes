{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(_owner);\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20I {\r\n    function balanceOf(address who) public view returns (uint);\r\n    function decimals() public view returns (uint);\r\n    function transfer(address to, uint value) public returns (bool);\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n}\r\n\r\ncontract DOSAddressBridgeInterface {\r\n    function getProxyAddress() public view returns (address);\r\n}\r\n\r\ncontract DOSPayment is Ownable {\r\n    enum ServiceType {\r\n        SystemRandom,\r\n        UserRandom,\r\n        UserQuery\r\n    }\r\n\r\n    struct FeeList {\r\n        // ServiceType => serviceFee\r\n        mapping(uint => uint) serviceFee;\r\n        uint submitterCut;\r\n        uint guardianFee;\r\n    }\r\n\r\n    struct Payment {\r\n        address payer;\r\n        address tokenAddr;\r\n        uint serviceType;\r\n        uint amount;\r\n    }\r\n\r\n    // payer addr => payment token addr\r\n    mapping(address => address) public paymentMethods;\r\n    // tokenAddr => feeList\r\n    mapping(address => FeeList) public feeLists;\r\n    // requestID => Payment\r\n    mapping(uint => Payment) public payments;\r\n    // node address => {tokenAddr => amount}\r\n    mapping(address => mapping(address => uint)) private _balances;\r\n\r\n    uint constant public defaultSubmitterCut = 4;\r\n    uint constant public defaultSystemRandomFee = 50 * 1e18;\r\n    uint constant public defaultUserRandomFee = 50 * 1e18;\r\n    uint constant public defaultUserQueryFee = 50 * 1e18;\r\n    uint constant public defaultGuardianFee = 50 * 1e18;\r\n\r\n    address public guardianFundsAddr;\r\n    address public guardianFundsTokenAddr;\r\n    address public bridgeAddr;\r\n    address public defaultTokenAddr;\r\n\r\n    event LogChargeServiceFee(address payer, address tokenAddr, uint requestID, uint serviceType, uint fee);\r\n    event LogRefundServiceFee(address payer, address tokenAddr, uint requestID, uint serviceType, uint fee);\r\n    event LogRecordServiceFee(address nodeAddr, address tokenAddr, uint requestID, uint serviceType, uint fee, bool isSubmitter);\r\n    event LogClaimGuardianFee(address nodeAddr, address tokenAddr, uint feeForSubmitter, address sender);\r\n\r\n    modifier onlyFromProxy {\r\n        require(msg.sender == DOSAddressBridgeInterface(bridgeAddr).getProxyAddress(), \"not-from-dos-proxy\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySupportedToken(address tokenAddr) {\r\n        require(isSupportedToken(tokenAddr), \"not-supported-token-addr\");\r\n        _;\r\n    }\r\n\r\n    modifier hasPayment(uint requestID) {\r\n        require(payments[requestID].amount != 0, \"no-fee-amount\");\r\n        require(payments[requestID].payer != address(0x0), \"no-payer-info\");\r\n        require(payments[requestID].tokenAddr != address(0x0), \"no-fee-token-info\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _bridgeAddr, address _guardianFundsAddr, address _tokenAddr) public {\r\n        initialize(_bridgeAddr, _guardianFundsAddr, _tokenAddr);\r\n    }\r\n\r\n    function initialize(address _bridgeAddr, address _guardianFundsAddr, address _tokenAddr) public {\r\n        require(bridgeAddr == address(0x0) && defaultTokenAddr == address(0x0), \"already-initialized\");\r\n\r\n        bridgeAddr = _bridgeAddr;\r\n        guardianFundsAddr = _guardianFundsAddr;\r\n        guardianFundsTokenAddr = _tokenAddr;\r\n        defaultTokenAddr = _tokenAddr;\r\n\r\n        FeeList storage feeList = feeLists[_tokenAddr];\r\n        feeList.serviceFee[uint(ServiceType.SystemRandom)] = defaultSystemRandomFee;\r\n        feeList.serviceFee[uint(ServiceType.UserRandom)] = defaultUserRandomFee;\r\n        feeList.serviceFee[uint(ServiceType.UserQuery)] = defaultUserQueryFee;\r\n        feeList.submitterCut = defaultSubmitterCut;\r\n        feeList.guardianFee = defaultGuardianFee;\r\n    }\r\n\r\n    function isSupportedToken(address tokenAddr) public view returns(bool) {\r\n       if (tokenAddr == address(0x0)) return false;\r\n       if (feeLists[tokenAddr].serviceFee[uint(ServiceType.SystemRandom)] == 0) return false;\r\n       if (feeLists[tokenAddr].serviceFee[uint(ServiceType.UserRandom)] == 0) return false;\r\n       if (feeLists[tokenAddr].serviceFee[uint(ServiceType.UserQuery)] == 0) return false;\r\n       return true;\r\n    }\r\n\r\n    function setPaymentMethod(address payer, address tokenAddr) public onlySupportedToken(tokenAddr) {\r\n        paymentMethods[payer] = tokenAddr;\r\n    }\r\n\r\n    function setServiceFee(address tokenAddr, uint serviceType, uint fee) public onlyOwner {\r\n        require(tokenAddr != address(0x0), \"not-valid-token-addr\");\r\n        feeLists[tokenAddr].serviceFee[serviceType] = fee;\r\n    }\r\n\r\n    function setGuardianFee(address tokenAddr, uint fee) public onlyOwner {\r\n        require(tokenAddr != address(0x0), \"not-valid-token-addr\");\r\n        feeLists[tokenAddr].guardianFee = fee;\r\n    }\r\n\r\n    function setFeeDividend(address tokenAddr, uint submitterCut) public onlyOwner {\r\n        require(tokenAddr != address(0x0), \"not-valid-token-addr\");\r\n        feeLists[tokenAddr].submitterCut = submitterCut;\r\n    }\r\n\r\n    function setGuardianFunds(address fundsAddr, address tokenAddr) public onlyOwner onlySupportedToken(tokenAddr) {\r\n        guardianFundsAddr = fundsAddr;\r\n        guardianFundsTokenAddr = tokenAddr;\r\n    }\r\n\r\n    function hasServiceFee(address payer, uint serviceType) public view returns (bool) {\r\n        if (payer == DOSAddressBridgeInterface(bridgeAddr).getProxyAddress()) return true;\r\n        address tokenAddr = paymentMethods[payer];\r\n        // Get fee by tokenAddr and serviceType\r\n        uint fee = feeLists[tokenAddr].serviceFee[serviceType];\r\n        return ERC20I(tokenAddr).balanceOf(payer) >= fee;\r\n    }\r\n\r\n    function chargeServiceFee(address payer, uint requestID, uint serviceType) public onlyFromProxy {\r\n        address tokenAddr = paymentMethods[payer];\r\n        // Get fee by tokenAddr and serviceType\r\n        uint fee = feeLists[tokenAddr].serviceFee[serviceType];\r\n        payments[requestID] = Payment(payer, tokenAddr, serviceType, fee);\r\n        emit LogChargeServiceFee(payer, tokenAddr, requestID, serviceType, fee);\r\n        ERC20I(tokenAddr).transferFrom(payer, address(this), fee);\r\n    }\r\n\r\n    function refundServiceFee(uint requestID) public onlyOwner hasPayment(requestID) {\r\n        uint fee = payments[requestID].amount;\r\n        uint serviceType = payments[requestID].serviceType;\r\n        address tokenAddr = payments[requestID].tokenAddr;\r\n        address payer = payments[requestID].payer;\r\n        delete payments[requestID];\r\n        emit LogRefundServiceFee(payer, tokenAddr, requestID, serviceType, fee);\r\n        ERC20I(tokenAddr).transfer(payer, fee);\r\n    }\r\n\r\n    function recordServiceFee(uint requestID, address submitter, address[] memory workers) public onlyFromProxy hasPayment(requestID) {\r\n        address tokenAddr = payments[requestID].tokenAddr;\r\n        uint feeUnit = payments[requestID].amount / 10;\r\n        uint serviceType = payments[requestID].serviceType;\r\n        delete payments[requestID];\r\n\r\n        FeeList storage feeList = feeLists[tokenAddr];\r\n        uint feeForSubmitter = feeUnit * feeList.submitterCut;\r\n        _balances[submitter][tokenAddr] += feeForSubmitter;\r\n        emit LogRecordServiceFee(submitter, tokenAddr, requestID, serviceType, feeForSubmitter, true);\r\n        uint feeForWorker = feeUnit * (10 - feeList.submitterCut) / (workers.length - 1);\r\n        for (uint i = 0; i < workers.length; i++) {\r\n            if (workers[i] != submitter) {\r\n                _balances[workers[i]][tokenAddr] += feeForWorker;\r\n                emit LogRecordServiceFee(workers[i], tokenAddr, requestID, serviceType, feeForWorker, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimGuardianReward(address guardianAddr) public onlyFromProxy {\r\n        require(guardianFundsAddr != address(0x0), \"not-valid-guardian-fund-addr\");\r\n        require(guardianFundsTokenAddr != address(0x0), \"not-valid-guardian-token-addr\");\r\n        uint fee = feeLists[guardianFundsTokenAddr].guardianFee;\r\n        emit LogClaimGuardianFee(guardianAddr, guardianFundsTokenAddr, fee, msg.sender);\r\n        ERC20I(guardianFundsTokenAddr).transferFrom(guardianFundsAddr, guardianAddr,fee);\r\n    }\r\n\r\n    // @dev: node runners call to withdraw recorded service fees.\r\n    function nodeClaim() public returns(uint) {\r\n        return nodeClaim(msg.sender, defaultTokenAddr, msg.sender);\r\n    }\r\n\r\n    // @dev: node runners call to withdraw recorded service fees to specified address.\r\n    function nodeClaim(address to) public returns(uint) {\r\n        return nodeClaim(msg.sender, defaultTokenAddr, to);\r\n    }\r\n\r\n    function nodeClaim(address nodeAddr, address tokenAddr, address to) internal returns(uint) {\r\n        uint amount = _balances[nodeAddr][tokenAddr];\r\n        if (amount != 0) {\r\n            delete _balances[nodeAddr][tokenAddr];\r\n            ERC20I(tokenAddr).transfer(to, amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function nodeFeeBalance(address nodeAddr) public view returns (uint) {\r\n        return nodeFeeBalance(nodeAddr, defaultTokenAddr);\r\n    }\r\n\r\n    function nodeFeeBalance(address nodeAddr, address tokenAddr) public view returns (uint) {\r\n        return _balances[nodeAddr][tokenAddr];\r\n    }\r\n\r\n    function paymentInfo(uint requestID) public view returns (address, uint) {\r\n        Payment storage payment = payments[requestID];\r\n        return (payment.tokenAddr, payment.amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardianFundsAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogChargeServiceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeForSubmitter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LogClaimGuardianFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSubmitter\",\"type\":\"bool\"}],\"name\":\"LogRecordServiceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogRefundServiceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceType\",\"type\":\"uint256\"}],\"name\":\"chargeServiceFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardianAddr\",\"type\":\"address\"}],\"name\":\"claimGuardianReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultGuardianFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultSubmitterCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultSystemRandomFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultUserQueryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultUserRandomFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"submitterCut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardianFundsAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardianFundsTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serviceType\",\"type\":\"uint256\"}],\"name\":\"hasServiceFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardianFundsAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"isSupportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nodeClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"nodeClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"nodeFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"nodeFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"paymentInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentMethods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serviceType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"workers\",\"type\":\"address[]\"}],\"name\":\"recordServiceFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"refundServiceFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"submitterCut\",\"type\":\"uint256\"}],\"name\":\"setFeeDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setGuardianFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundsAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setGuardianFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setPaymentMethod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"serviceType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setServiceFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DOSPayment","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000098a0e7026778840aacd28b9c03137d32e06f5ff100000000000000000000000076cec0b88fd0f109c04f0475ebdf1648df1c60b400000000000000000000000070861e862e1ac0c96f853c8231826e469ead37b1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1f2de774cbcd2edbef25896f169080397140a8a087d3b5cdd930c420e39ce6c2"}]}