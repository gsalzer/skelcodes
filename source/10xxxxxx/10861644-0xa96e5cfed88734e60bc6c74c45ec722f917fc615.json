{"status":"1","message":"OK","result":[{"SourceCode":"/***\n *    ██████╗ ███████╗ ██████╗  ██████╗ \n *    ██╔══██╗██╔════╝██╔════╝ ██╔═══██╗\n *    ██║  ██║█████╗  ██║  ███╗██║   ██║\n *    ██║  ██║██╔══╝  ██║   ██║██║   ██║\n *    ██████╔╝███████╗╚██████╔╝╚██████╔╝\n *    ╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝ \n *    \n * https://dego.finance\n                                  \n* MIT License\n* ===========\n*\n* Copyright (c) 2020 dego\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n// File: @openzeppelin/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/library/NameFilter.sol\n\npragma solidity ^0.5.0;\n\nlibrary NameFilter {\n    /**\n     * @dev filters name strings\n     * -converts uppercase to lower case.  \n     * -makes sure it does not start/end with a space\n     * -makes sure it does not contain multiple spaces in a row\n     * -cannot be only numbers\n     * -cannot start with 0x \n     * -restricts characters to A-Z, a-z, 0-9, and space.\n     * @return reprocessed string in bytes32 format\n     */\n    function nameFilter(string memory _input)\n        internal\n        pure\n        returns(bytes32)\n    {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n        \n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\n        }\n        \n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n        \n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint8(_temp[i]) + 32);\n                \n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                    // OR lowercase a-z\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                    // or 0-9\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\n                    \"string contains invalid characters\"\n                );\n                \n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;    \n            }\n        }\n        \n        require(_hasNonNumber == true, \"string cannot be only numbers\");\n        \n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n}\n\n// File: contracts/interface/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function mint(address account, uint amount) external;\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: contracts/library/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SafeERC20: TRANSFER_FAILED');\n    }\n    // function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    //     callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    // }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/library/Governance.sol\n\npragma solidity ^0.5.0;\n\ncontract Governance {\n\n    address public _governance;\n\n    constructor() public {\n        _governance = tx.origin;\n    }\n\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyGovernance {\n        require(msg.sender == _governance, \"not governance\");\n        _;\n    }\n\n    function setGovernance(address governance)  public  onlyGovernance\n    {\n        require(governance != address(0), \"new governance the zero address\");\n        emit GovernanceTransferred(_governance, governance);\n        _governance = governance;\n    }\n\n\n}\n\n// File: contracts/interface/IPlayerBook.sol\n\npragma solidity ^0.5.0;\n\n\ninterface IPlayerBook {\n    function settleReward( address from,uint256 amount ) external returns (uint256);\n    function bindRefer( address from,string calldata  affCode )  external returns (bool);\n    function hasRefer(address from) external returns(bool);\n\n}\n\n// File: contracts/referral/PlayerBook.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\n\n\ncontract PlayerBook is Governance, IPlayerBook {\n    using NameFilter for string;\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n \n    // register pools       \n    mapping (address => bool) public _pools;\n\n    // (addr => pID) returns player id by address\n    mapping (address => uint256) public _pIDxAddr;   \n    // (name => pID) returns player id by name      \n    mapping (bytes32 => uint256) public _pIDxName;    \n    // (pID => data) player data     \n    mapping (uint256 => Player) public _plyr;      \n    // (pID => name => bool) list of names a player owns.  (used so you can change your display name amoungst any name you own)        \n    mapping (uint256 => mapping (bytes32 => bool)) public _plyrNames; \n  \n    // the  of refrerrals\n    uint256 public _totalReferReward;         \n    // total number of players\n    uint256 public _pID;      \n    // total register name count\n    uint256 public _totalRegisterCount = 0;\n\n    // the direct refer's reward rate\n    uint256 public _refer1RewardRate = 700; //7%\n    // the second direct refer's reward rate\n    uint256 public _refer2RewardRate = 300; //3%\n    // base rate\n    uint256 public _baseRate = 10000;\n\n    // base price to register a name\n    uint256 public _registrationBaseFee = 100 finney;     \n    // register fee count step\n    uint256 public _registrationStep = 100;\n    // add base price for one step\n    uint256 public _stepFee = 100 finney;     \n\n    bytes32 public _defaulRefer =\"dego\";\n\n    address payable public _teamWallet = 0xd2b2755a4bDCAF415E9a74e3EfE41D23D2F70C53;\n  \n    IERC20 public _dego = IERC20(0x0);\n   \n    struct Player {\n        address addr;\n        bytes32 name;\n        uint8 nameCount;\n        uint256 laff;\n        uint256 amount;\n        uint256 rreward;\n        uint256 allReward;\n        uint256 lv1Count;\n        uint256 lv2Count;\n    }\n\n    event eveClaim(uint256 pID, address addr, uint256 reward, uint256 balance );\n    event eveBindRefer(uint256 pID, address addr, bytes32 name, uint256 affID, address affAddr, bytes32 affName);\n    event eveDefaultPlayer(uint256 pID, address addr, bytes32 name);      \n    event eveNewName(uint256 pID, address addr, bytes32 name, uint256 affID, address affAddr, bytes32 affName, uint256 balance  );\n    event eveSettle(uint256 pID, uint256 affID, uint256 aff_affID, uint256 affReward, uint256 aff_affReward, uint256 amount);\n    event eveAddPool(address addr);\n    event eveRemovePool(address addr);\n\n\n    constructor()\n        public\n    {\n        _pID = 0;\n        _totalReferReward = 0;\n        addDefaultPlayer(_teamWallet,_defaulRefer);\n    }\n\n    /**\n     * check address\n     */\n    modifier validAddress( address addr ) {\n        require(addr != address(0x0));\n        _;\n    }\n\n    /**\n     * check pool\n     */\n    modifier isRegisteredPool(){\n        require(_pools[msg.sender],\"invalid pool address!\");\n        _;\n    }\n\n    /**\n     * contract dego balances\n     */\n    function balances()\n        public\n        view\n        returns(uint256)\n    {\n        return (_dego.balanceOf(address(this)));\n    }\n\n    // only function for creating additional rewards from dust\n    function seize(IERC20 asset) external returns (uint256 balance) {\n        require(address(_dego) != address(asset), \"forbbiden dego\");\n\n        balance = asset.balanceOf(address(this));\n        asset.safeTransfer(_teamWallet, balance);\n    }\n\n    // get register fee \n    function seizeEth() external  {\n        uint256 _currentBalance =  address(this).balance;\n        _teamWallet.transfer(_currentBalance);\n    }\n    \n    /**\n     * revert invalid transfer action\n     */\n    function() external payable {\n        revert();\n    }\n\n\n    /**\n     * registe a pool\n     */\n    function addPool(address poolAddr)\n        onlyGovernance\n        public\n    {\n        require( !_pools[poolAddr], \"derp, that pool already been registered\");\n\n        _pools[poolAddr] = true;\n\n        emit eveAddPool(poolAddr);\n    }\n    \n    /**\n     * remove a pool\n     */\n    function removePool(address poolAddr)\n        onlyGovernance\n        public\n    {\n        require( _pools[poolAddr], \"derp, that pool must be registered\");\n\n        _pools[poolAddr] = false;\n\n        emit eveRemovePool(poolAddr);\n    }\n\n    /**\n     * resolve the refer's reward from a player \n     */\n    function settleReward(address from, uint256 amount)\n        isRegisteredPool()\n        validAddress(from)    \n        external\n        returns (uint256)\n    {\n         // set up our tx event data and determine if player is new or not\n        _determinePID(from);\n\n        uint256 pID = _pIDxAddr[from];\n        uint256 affID = _plyr[pID].laff;\n        \n        if(affID <= 0 ){\n            affID = _pIDxName[_defaulRefer];\n            _plyr[pID].laff = affID;\n        }\n\n        if(amount <= 0){\n            return 0;\n        }\n\n        uint256 fee = 0;\n\n        // father\n        uint256 affReward = (amount.mul(_refer1RewardRate)).div(_baseRate);\n        _plyr[affID].rreward = _plyr[affID].rreward.add(affReward);\n        _totalReferReward = _totalReferReward.add(affReward);\n        fee = fee.add(affReward);\n\n\n        // grandfather\n        uint256 aff_affID = _plyr[affID].laff;\n        uint256 aff_affReward = amount.mul(_refer2RewardRate).div(_baseRate);\n        if(aff_affID <= 0){\n            aff_affID = _pIDxName[_defaulRefer];\n        }\n        _plyr[aff_affID].rreward = _plyr[aff_affID].rreward.add(aff_affReward);\n        _totalReferReward= _totalReferReward.add(aff_affReward);\n\n        _plyr[pID].amount = _plyr[pID].amount.add( amount);\n\n        fee = fee.add(aff_affReward);\n       \n        emit eveSettle( pID,affID,aff_affID,affReward,aff_affReward,amount);\n\n        return fee;\n    }\n\n    /**\n     * claim all of the refer reward.\n     */\n    function claim()\n        public\n    {\n        address addr = msg.sender;\n        uint256 pid = _pIDxAddr[addr];\n        uint256 reward = _plyr[pid].rreward;\n\n        require(reward > 0,\"only have reward\");\n        \n        //reset\n        _plyr[pid].allReward = _plyr[pid].allReward.add(reward);\n        _plyr[pid].rreward = 0;\n\n        //get reward\n        _dego.safeTransfer(addr, reward);\n        \n        // fire event\n        emit eveClaim(_pIDxAddr[addr], addr, reward, balances());\n    }\n\n\n    /**\n     * check name string\n     */\n    function checkIfNameValid(string memory nameStr)\n        public\n        view\n        returns(bool)\n    {\n        bytes32 name = nameStr.nameFilter();\n        if (_pIDxName[name] == 0)\n            return (true);\n        else \n            return (false);\n    }\n    \n    /**\n     * @dev add a default player\n     */\n    function addDefaultPlayer(address addr, bytes32 name)\n        private\n    {        \n        _pID++;\n\n        _plyr[_pID].addr = addr;\n        _plyr[_pID].name = name;\n        _plyr[_pID].nameCount = 1;\n        _pIDxAddr[addr] = _pID;\n        _pIDxName[name] = _pID;\n        _plyrNames[_pID][name] = true;\n\n        //fire event\n        emit eveDefaultPlayer(_pID,addr,name);        \n    }\n    \n    /**\n     * @dev set refer reward rate\n     */\n    function setReferRewardRate(uint256 refer1Rate, uint256 refer2Rate ) public  \n        onlyGovernance\n    {\n        _refer1RewardRate = refer1Rate;\n        _refer2RewardRate = refer2Rate;\n    }\n\n    /**\n     * @dev set registration step count\n     */\n    function setRegistrationStep(uint256 registrationStep) public  \n        onlyGovernance\n    {\n        _registrationStep = registrationStep;\n    }\n\n    /**\n     * @dev set dego contract address\n     */\n    function setDegoContract(address dego)  public  \n        onlyGovernance{\n        _dego = IERC20(dego);\n    }\n\n\n    /**\n     * @dev registers a name.  UI will always display the last name you registered.\n     * but you will still own all previously registered names to use as affiliate \n     * links.\n     * - must pay a registration fee.\n     * - name must be unique\n     * - names will be converted to lowercase\n     * - cannot be only numbers\n     * - cannot start with 0x \n     * - name must be at least 1 char\n     * - max length of 32 characters long\n     * - allowed characters: a-z, 0-9\n     * -functionhash- 0x921dec21 (using ID for affiliate)\n     * -functionhash- 0x3ddd4698 (using address for affiliate)\n     * -functionhash- 0x685ffd83 (using name for affiliate)\n     * @param nameString players desired name\n     * @param affCode affiliate name of who refered you\n     * (this might cost a lot of gas)\n     */\n\n    function registerNameXName(string memory nameString, string memory affCode)\n        public\n        payable \n    {\n\n        // make sure name fees paid\n        require (msg.value >= this.getRegistrationFee(), \"umm.....  you have to pay the name fee\");\n\n        // filter name + condition checks\n        bytes32 name = NameFilter.nameFilter(nameString);\n        // if names already has been used\n        require(_pIDxName[name] == 0, \"sorry that names already taken\");\n\n        // set up address \n        address addr = msg.sender;\n         // set up our tx event data and determine if player is new or not\n        _determinePID(addr);\n        // fetch player id\n        uint256 pID = _pIDxAddr[addr];\n        // if names already has been used\n        require(_plyrNames[pID][name] == false, \"sorry that names already taken\");\n\n        // add name to player profile, registry, and name book\n        _plyrNames[pID][name] = true;\n        _pIDxName[name] = pID;   \n        _plyr[pID].name = name;\n        _plyr[pID].nameCount++;\n\n        _totalRegisterCount++;\n\n\n        //try bind a refer\n        if(_plyr[pID].laff == 0){\n\n            bytes memory tempCode = bytes(affCode);\n            bytes32 affName = 0x0;\n            if (tempCode.length >= 0) {\n                assembly {\n                    affName := mload(add(tempCode, 32))\n                }\n            }\n\n            _bindRefer(addr,affName);\n        }\n        uint256 affID = _plyr[pID].laff;\n\n        // fire event\n        emit eveNewName(pID, addr, name, affID, _plyr[affID].addr, _plyr[affID].name, _registrationBaseFee );\n    }\n    \n    /**\n     * @dev bind a refer,if affcode invalid, use default refer\n     */  \n    function bindRefer( address from, string calldata  affCode )\n        isRegisteredPool()\n        external\n        returns (bool)\n    {\n\n        bytes memory tempCode = bytes(affCode);\n        bytes32 affName = 0x0;\n        if (tempCode.length >= 0) {\n            assembly {\n                affName := mload(add(tempCode, 32))\n            }\n        }\n\n        return _bindRefer(from, affName);\n    }\n\n\n    /**\n     * @dev bind a refer,if affcode invalid, use default refer\n     */  \n    function _bindRefer( address from, bytes32  name )\n        validAddress(msg.sender)    \n        validAddress(from)  \n        private\n        returns (bool)\n    {\n        // set up our tx event data and determine if player is new or not\n        _determinePID(from);\n\n        // fetch player id\n        uint256 pID = _pIDxAddr[from];\n        if( _plyr[pID].laff != 0){\n            return false;\n        }\n\n        if (_pIDxName[name] == 0){\n            //unregister name \n            name = _defaulRefer;\n        }\n      \n        uint256 affID = _pIDxName[name];\n        if( affID == pID){\n            affID = _pIDxName[_defaulRefer];\n        }\n       \n        _plyr[pID].laff = affID;\n\n        //lvcount\n        _plyr[affID].lv1Count++;\n        uint256 aff_affID = _plyr[affID].laff;\n        if(aff_affID != 0 ){\n            _plyr[aff_affID].lv2Count++;\n        }\n        \n        // fire event\n        emit eveBindRefer(pID, from, name, affID, _plyr[affID].addr, _plyr[affID].name);\n\n        return true;\n    }\n    \n    //\n    function _determinePID(address addr)\n        private\n        returns (bool)\n    {\n        if (_pIDxAddr[addr] == 0)\n        {\n            _pID++;\n            _pIDxAddr[addr] = _pID;\n            _plyr[_pID].addr = addr;\n            \n            // set the new player bool to true\n            return (true);\n        } else {\n            return (false);\n        }\n    }\n    \n    function hasRefer(address from) \n        isRegisteredPool()\n        external \n        returns(bool) \n    {\n        _determinePID(from);\n        uint256 pID =  _pIDxAddr[from];\n        return (_plyr[pID].laff > 0);\n    }\n\n    \n    function getPlayerName(address from)\n        external\n        view\n        returns (bytes32)\n    {\n        uint256 pID =  _pIDxAddr[from];\n        if(_pID==0){\n            return \"\";\n        }\n        return (_plyr[pID].name);\n    }\n\n    function getPlayerLaffName(address from)\n        external\n        view\n        returns (bytes32)\n    {\n        uint256 pID =  _pIDxAddr[from];\n        if(_pID==0){\n             return \"\";\n        }\n\n        uint256 aID=_plyr[pID].laff;\n        if( aID== 0){\n            return \"\";\n        }\n\n        return (_plyr[aID].name);\n    }\n\n    function getPlayerInfo(address from)\n        external\n        view\n        returns (uint256,uint256,uint256,uint256)\n    {\n        uint256 pID = _pIDxAddr[from];\n        if(_pID==0){\n             return (0,0,0,0);\n        }\n        return (_plyr[pID].rreward,_plyr[pID].allReward,_plyr[pID].lv1Count,_plyr[pID].lv2Count);\n    }\n\n    function getTotalReferReward()\n        external\n        view\n        returns (uint256)\n    {\n        return(_totalReferReward);\n    }\n\n    function getRegistrationFee()\n        external\n        view\n        returns (uint256)\n    {\n        if( _totalRegisterCount <_registrationStep || _registrationStep == 0){\n            return _registrationBaseFee;\n        }\n        else{\n            uint256 step = _totalRegisterCount.div(_registrationStep);\n            return _registrationBaseFee.add(step.mul(_stepFee));\n        }\n    }\n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getRegistrationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_plyr\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"nameCount\",\"type\":\"uint8\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"rreward\",\"type\":\"uint256\"},{\"name\":\"allReward\",\"type\":\"uint256\"},{\"name\":\"lv1Count\",\"type\":\"uint256\"},{\"name\":\"lv2Count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_pIDxName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_registrationBaseFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"settleReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_pID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_pIDxAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seizeEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_refer1RewardRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nameString\",\"type\":\"string\"},{\"name\":\"affCode\",\"type\":\"string\"}],\"name\":\"registerNameXName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nameStr\",\"type\":\"string\"}],\"name\":\"checkIfNameValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_dego\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalRegisterCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_baseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_refer2RewardRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"hasRefer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registrationStep\",\"type\":\"uint256\"}],\"name\":\"setRegistrationStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_defaulRefer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalReferReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_pools\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getPlayerLaffName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_stepFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalReferReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_plyrNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"affCode\",\"type\":\"string\"}],\"name\":\"bindRefer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_registrationStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getPlayerName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"seize\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refer1Rate\",\"type\":\"uint256\"},{\"name\":\"refer2Rate\",\"type\":\"uint256\"}],\"name\":\"setReferRewardRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dego\",\"type\":\"address\"}],\"name\":\"setDegoContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"eveClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"affID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affName\",\"type\":\"bytes32\"}],\"name\":\"eveBindRefer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"eveDefaultPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"affID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"eveNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"aff_affID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affReward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"aff_affReward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"eveSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"eveAddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"eveRemovePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"}]","ContractName":"PlayerBook","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}