{"status":"1","message":"OK","result":[{"SourceCode":"{\"safeMath.sol\":{\"content\":\"pragma solidity \\u003e=0.4.22 \\u003c0.7.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    //加\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    //减\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    //乘\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    //除\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    //取余\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"tool.sol\":{\"content\":\"pragma solidity \\u003e=0.6.0 \\u003c0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./safeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract Tool {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    MyToken ticketAddress;\\r\\n\\r\\n    address payable public owner;\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier isOwn() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function init(address _ticketAddress) public isOwn {\\r\\n        ticketAddress = MyToken(_ticketAddress);\\r\\n    }\\r\\n\\r\\n    function _getNeedTicketNum(uint256 _balance) public view returns (uint256) {\\r\\n        uint256 _needTicketUSDT = _balance.div(1e6).div(10);\\r\\n\\r\\n        uint256 _ticketPrice = ticketAddress.getTokenPrice();\\r\\n        uint256 _needTicket = _needTicketUSDT.mul(_ticketPrice);\\r\\n        return _needTicket;\\r\\n    }\\r\\n\\r\\n    function _getRatio(uint256 _balance) public pure returns (uint256) {\\r\\n        require(_balance \\u003e= 100e6, \\\"amount \\u003c= 100e6\\\");\\r\\n        require(_balance.mod(1e6) == 0, \\\"amount != e6\\\");\\r\\n\\r\\n        uint256 _num = _balance.div(1e6);\\r\\n\\r\\n        if (_num \\u003c 3000) {\\r\\n            return uint256(3);\\r\\n        } else if (_num \\u003c 7000) {\\r\\n            return uint256(4);\\r\\n        } else {\\r\\n            return uint256(5);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _createRandomNum(\\r\\n        uint256 _min,\\r\\n        uint256 _max,\\r\\n        uint256 _randNonce\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 _random = uint256(\\r\\n            keccak256(abi.encode(now, tx.origin, _randNonce))\\r\\n        )\\r\\n            .mod(_max.sub(_min));\\r\\n\\r\\n        return _random.add(_min);\\r\\n    }\\r\\n\\r\\n    function _crateLuckCodeList(uint256 _max)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[25] memory)\\r\\n    {\\r\\n        uint256[25] memory _random;\\r\\n        for (uint256 i = 0; i \\u003c 25; i++) {\\r\\n            _random[i] = _createRandomNum(1, _max, i.add(now));\\r\\n        }\\r\\n        return _random;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract MyToken {\\r\\n    function getToken(address _own) public virtual returns (uint256);\\r\\n\\r\\n    function sendTokenToGame(address _to, uint256 _value)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool);\\r\\n\\r\\n    function getTokenPrice() public virtual view returns (uint256);\\r\\n\\r\\n    function price() public virtual view returns (uint256);\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"_crateLuckCodeList\",\"outputs\":[{\"internalType\":\"uint256[25]\",\"name\":\"\",\"type\":\"uint256[25]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randNonce\",\"type\":\"uint256\"}],\"name\":\"_createRandomNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"_getNeedTicketNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"_getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ticketAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Tool","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c79282b6e780bfb452ebccac92217c0a1c4b8e244db2cec765d83fd37f621b00"}]}