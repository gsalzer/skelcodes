{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\n// https://github.com/dapphub/ds-pause\r\ninterface DSPauseAbstract {\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setDelay(uint256) external;\r\n    function plans(bytes32) external view returns (bool);\r\n    function proxy() external view returns (address);\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function drop(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/cat.sol\r\ninterface CatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function box() external view returns (uint256);\r\n    function litter() external view returns (uint256);\r\n    function ilks(bytes32) external view returns (address, uint256, uint256);\r\n    function live() external view returns (uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function bite(bytes32, address) external returns (uint256);\r\n    function claw(uint256) external;\r\n    function cage() external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ninterface JugAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function base() external view returns (address);\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ninterface FlipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function beg() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function dent(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/spot.sol\r\ninterface SpotAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n    function vat() external view returns (address);\r\n    function par() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function poke(bytes32) external;\r\n    function cage() external;\r\n}\r\n\r\n// https://github.com/makerdao/osm\r\ninterface OsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function src() external view returns (address);\r\n    function hop() external view returns (uint16);\r\n    function zzz() external view returns (uint64);\r\n    function cur() external view returns (uint128, uint128);\r\n    function nxt() external view returns (uint128, uint128);\r\n    function bud(address) external view returns (uint256);\r\n    function stop() external;\r\n    function start() external;\r\n    function change(address) external;\r\n    function step(uint16) external;\r\n    function void() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\n// https://github.com/makerdao/osm-mom\r\ninterface OsmMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function osms(bytes32) external view returns (address);\r\n    function setOsm(bytes32, address) external;\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function stop(bytes32) external;\r\n}\r\n\r\n// https://github.com/makerdao/median\r\ninterface MedianAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function age() external view returns (uint32);\r\n    function wat() external view returns (bytes32);\r\n    function bar() external view returns (uint256);\r\n    function orcl(address) external view returns (uint256);\r\n    function bud(address) external view returns (uint256);\r\n    function slot(uint8) external view returns (address);\r\n    function read() external view returns (uint256);\r\n    function peek() external view returns (uint256, bool);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface GemJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/flipper-mom/blob/master/src/FlipperMom.sol\r\ninterface FlipperMomAbstract {\r\n    function owner() external returns (address);\r\n    function setOwner(address) external;\r\n    function authority() external returns (address);\r\n    function setAuthority(address) external;\r\n    function cat() external returns (address);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\n// https://github.com/makerdao/ilk-registry/blob/master/src/IlkRegistry.sol\r\ninterface IlkRegistryAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function ilkData(bytes32) external view returns (\r\n        uint256,\r\n        address,\r\n        address,\r\n        address,\r\n        address,\r\n        uint256,\r\n        string memory,\r\n        string memory\r\n    );\r\n    function ilks() external view returns (bytes32[] memory);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function add(address) external;\r\n    function remove(bytes32) external;\r\n    function removeAuth(bytes32) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, string calldata) external;\r\n    function count() external view returns (uint256);\r\n    function list() external view returns (bytes32[] memory);\r\n    function list(uint256, uint256) external view returns (bytes32[] memory);\r\n    function get(uint256) external view returns (bytes32);\r\n    function info(bytes32) external view returns (\r\n        string memory,\r\n        string memory,\r\n        uint256,\r\n        address,\r\n        address,\r\n        address,\r\n        address\r\n    );\r\n    function pos(bytes32) external view returns (uint256);\r\n    function gem(bytes32) external view returns (address);\r\n    function pip(bytes32) external view returns (address);\r\n    function join(bytes32) external view returns (address);\r\n    function flip(bytes32) external view returns (address);\r\n    function dec(bytes32) external view returns (uint256);\r\n    function symbol(bytes32) external view returns (string memory);\r\n    function name(bytes32) external view returns (string memory);\r\n}\r\n\r\ncontract ERC20 {\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ncontract SpellAction {\r\n\r\n    // MAINNET ADDRESSES\r\n    //\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    // against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/1.1.0/contracts.json\r\n    address constant MCD_VAT                = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant MCD_CAT                = 0xa5679C04fc3d9d8b0AaB1F0ab83555b301cA70Ea;\r\n    address constant MCD_JUG                = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant MCD_SPOT               = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address constant MCD_END                = 0xaB14d3CE3F733CACB76eC2AbE7d2fcb00c99F3d5;\r\n    address constant FLIPPER_MOM            = 0xc4bE7F74Ee3743bDEd8E0fA218ee5cf06397f472;\r\n    address constant OSM_MOM                = 0x76416A4d5190d071bfed309861527431304aA14f;\r\n    address constant ILK_REGISTRY           = 0x8b4ce5DCbb01e0e1f0521cd8dCfb31B308E52c24;\r\n\r\n    address constant USDT                   = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address constant MCD_JOIN_USDT_A        = 0x0Ac6A1D74E84C2dF9063bDDc31699FF2a2BB22A2;\r\n    address constant MCD_FLIP_USDT_A        = 0x667F41d0fDcE1945eE0f56A79dd6c142E37fCC26;\r\n    address constant PIP_USDT               = 0x7a5918670B0C390aD25f7beE908c1ACc2d314A3C;\r\n\r\n    address constant PAXUSD                 = 0x8E870D67F660D95d5be530380D0eC0bd388289E1;\r\n    address constant MCD_JOIN_PAXUSD_A      = 0x7e62B7E279DFC78DEB656E34D6a435cC08a44666;\r\n    address constant MCD_FLIP_PAXUSD_A      = 0x52D5D1C05CC79Fc24A629Cb24cB06C5BE5d766E7;\r\n    address constant PIP_PAXUSD             = 0x043B963E1B2214eC90046167Ea29C2c8bDD7c0eC;\r\n\r\n    // light feeds\r\n    //\r\n    // https://forum.makerdao.com/t/mip10c14-sp5-proposal-appoint-argent-as-a-light-feed/3015\r\n    address constant ARGENT                 = 0x130431b4560Cd1d74A990AE86C337a33171FF3c6;\r\n    // https://forum.makerdao.com/t/mip10c14-sp6-proposal-appoint-mycrypto-as-a-light-feed/3383\r\n    address constant MYCRYPTO               = 0x3CB645a8f10Fb7B0721eaBaE958F77a878441Cb9;\r\n\r\n    // Medianizers\r\n    address constant USDTUSD                = 0x56D4bBF358D7790579b55eA6Af3f605BcA2c0C3A;\r\n    address constant MANAUSD                = 0x681c4F8f69cF68852BAd092086ffEaB31F5B812c;\r\n    address constant BATUSD                 = 0x18B4633D6E39870f398597f3c1bA8c4A41294966;\r\n    address constant BTCUSD                 = 0xe0F30cb149fAADC7247E953746Be9BbBB6B5751f;\r\n    address constant ETHBTC                 = 0x81A679f98b63B3dDf2F17CB5619f4d6775b3c5ED;\r\n    address constant ETHUSD                 = 0x64DE91F5A373Cd4c28de3600cB34C7C6cE410C85;\r\n    address constant KNCUSD                 = 0x83076a2F42dc1925537165045c9FDe9A4B71AD97;\r\n    address constant ZRXUSD                 = 0x956ecD6a9A9A0d84e8eB4e6BaaC09329E202E55e;\r\n\r\n    // Decimals & precision\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant WAD      = 10 ** 18;\r\n    uint256 constant RAY      = 10 ** 27;\r\n    uint256 constant RAD      = 10 ** 45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    uint256 constant TWO_PCT_RATE           = 1000000000627937192491029810;\r\n    uint256 constant FOUR_PCT_RATE          = 1000000001243680656318820312;\r\n    uint256 constant SIX_PCT_RATE           = 1000000001847694957439350562;\r\n    uint256 constant TEN_PCT_RATE           = 1000000003022265980097387650;\r\n    uint256 constant FOURTY_EIGHT_PCT_RATE  = 1000000012431573129530493155;\r\n\r\n    function execute() external {\r\n        /*** Risk Parameter Adjustments ***/\r\n\r\n        // set the global debt ceiling to 763,000,000\r\n        // 708 (current DC) + 40 (WBTC-A increase) + 10 (tether DC) + 5 (paxusd DC)\r\n        VatAbstract(MCD_VAT).file(\"Line\", 763 * MILLION * RAD);\r\n\r\n        // Set the WBTC-A debt ceiling\r\n        //\r\n        // Existing debt ceiling: 80 million\r\n        // New debt ceiling: 120 million\r\n        VatAbstract(MCD_VAT).file(\"WBTC-A\", \"line\", 120 * MILLION * RAD);\r\n\r\n        // Set the BAT-A stability fee\r\n        // Previous: 0%\r\n        // New: 2%\r\n        JugAbstract(MCD_JUG).drip(\"BAT-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"BAT-A\", \"duty\", TWO_PCT_RATE);\r\n\r\n        // Set the USDC-A stability fee\r\n        // Previous: 0%\r\n        // New: 2%\r\n        JugAbstract(MCD_JUG).drip(\"USDC-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"USDC-A\", \"duty\", TWO_PCT_RATE);\r\n\r\n        // Set the USDC-B stability fee\r\n        // Previous: 44%\r\n        // New: 48%\r\n        JugAbstract(MCD_JUG).drip(\"USDC-B\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"USDC-B\", \"duty\", FOURTY_EIGHT_PCT_RATE);\r\n\r\n        // Set the WBTC-A stability fee\r\n        // Previous: 0%\r\n        // New: 2%\r\n        JugAbstract(MCD_JUG).drip(\"WBTC-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"WBTC-A\", \"duty\", TWO_PCT_RATE);\r\n\r\n        // Set the KNC-A stability fee\r\n        // Previous: 0%\r\n        // New: 2%\r\n        JugAbstract(MCD_JUG).drip(\"KNC-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"KNC-A\", \"duty\", TWO_PCT_RATE);\r\n\r\n        // Set the ZRX-A stability fee\r\n        // Previous: 0%\r\n        // New: 2%\r\n        JugAbstract(MCD_JUG).drip(\"ZRX-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"ZRX-A\", \"duty\", TWO_PCT_RATE);\r\n\r\n        // Set the MANA-A stability fee\r\n        // Previous: 6%\r\n        // New: 10%\r\n        JugAbstract(MCD_JUG).drip(\"MANA-A\"); // drip right before\r\n        JugAbstract(MCD_JUG).file(\"MANA-A\", \"duty\", TEN_PCT_RATE);\r\n\r\n        // argent address array\r\n        address[] memory argent = new address[](1);\r\n        argent[0] = ARGENT;\r\n\r\n        // mycrypto address array\r\n        address[] memory mycrypto = new address[](1);\r\n        mycrypto[0] = MYCRYPTO;\r\n\r\n        // Lift New Argent light feed\r\n        MedianAbstract(BATUSD).lift(argent);\r\n        MedianAbstract(BTCUSD).lift(argent);\r\n        MedianAbstract(ETHBTC).lift(argent);\r\n        MedianAbstract(ETHUSD).lift(argent);\r\n        MedianAbstract(KNCUSD).lift(argent);\r\n        MedianAbstract(ZRXUSD).lift(argent);\r\n        MedianAbstract(USDTUSD).lift(argent);\r\n        MedianAbstract(MANAUSD).lift(argent);\r\n\r\n        // Lift New MyCrypto light feed\r\n        MedianAbstract(BATUSD).lift(mycrypto);\r\n        MedianAbstract(BTCUSD).lift(mycrypto);\r\n        MedianAbstract(ETHBTC).lift(mycrypto);\r\n        MedianAbstract(ETHUSD).lift(mycrypto);\r\n        MedianAbstract(KNCUSD).lift(mycrypto);\r\n        MedianAbstract(ZRXUSD).lift(mycrypto);\r\n        MedianAbstract(USDTUSD).lift(mycrypto);\r\n        MedianAbstract(MANAUSD).lift(mycrypto);\r\n\r\n        ////////////////////////////////////////////////////////////////////////////////\r\n        // USDT-A collateral deploy\r\n\r\n        // Set ilk bytes32 variable\r\n        bytes32 ilkUSDTA = \"USDT-A\";\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_USDT_A).vat() == MCD_VAT,                  \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_USDT_A).ilk() == ilkUSDTA,                 \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_USDT_A).gem() == USDT,   \t                \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_USDT_A).dec() == ERC20(USDT).decimals(),   \"join-dec-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_USDT_A).vat()    == MCD_VAT,                  \"flip-vat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_USDT_A).ilk()    == ilkUSDTA,                 \"flip-ilk-not-match\");\r\n\r\n        // Set price feed for USDT-A\r\n        SpotAbstract(MCD_SPOT).file(ilkUSDTA, \"pip\", PIP_USDT);\r\n\r\n        // Set the USDT-A flipper in the cat\r\n        CatAbstract(MCD_CAT).file(ilkUSDTA, \"flip\", MCD_FLIP_USDT_A);\r\n\r\n        // Init USDT-A in Vat\r\n        VatAbstract(MCD_VAT).init(ilkUSDTA);\r\n        // Init USDT-A in Jug\r\n        JugAbstract(MCD_JUG).init(ilkUSDTA);\r\n\r\n        // Allow USDT-A Join to modify Vat registry\r\n        VatAbstract(MCD_VAT).rely(MCD_JOIN_USDT_A);\r\n\r\n        // Allow USDT-A Flipper on the Cat\r\n        CatAbstract(MCD_CAT).rely(MCD_FLIP_USDT_A);\r\n\r\n        // Allow cat to kick auctions in USDT-A Flipper\r\n        FlipAbstract(MCD_FLIP_USDT_A).rely(MCD_CAT);\r\n\r\n        // Allow End to yank auctions in USDT-A Flipper\r\n        FlipAbstract(MCD_FLIP_USDT_A).rely(MCD_END);\r\n\r\n        // Allow FlipperMom to access the USDT-A Flipper\r\n        FlipAbstract(MCD_FLIP_USDT_A).rely(FLIPPER_MOM);\r\n\r\n        // Update OSM\r\n        OsmAbstract(PIP_USDT).rely(OSM_MOM);\r\n        MedianAbstract(OsmAbstract(PIP_USDT).src()).kiss(PIP_USDT);\r\n        OsmAbstract(PIP_USDT).kiss(MCD_SPOT);\r\n        OsmAbstract(PIP_USDT).kiss(MCD_END);\r\n        OsmMomAbstract(OSM_MOM).setOsm(ilkUSDTA, PIP_USDT);\r\n\r\n        // since we're adding 2 collateral types in this spell, global line is at beginning\r\n        VatAbstract(MCD_VAT).file( ilkUSDTA, \"line\", 10 * MILLION * RAD   ); // 10m debt ceiling\r\n        VatAbstract(MCD_VAT).file( ilkUSDTA, \"dust\", 100 * RAD            ); // 100 Dai dust\r\n        CatAbstract(MCD_CAT).file( ilkUSDTA, \"dunk\", 50 * THOUSAND * RAD  ); // 50,000 dunk\r\n        CatAbstract(MCD_CAT).file( ilkUSDTA, \"chop\", 113 * WAD / 100      ); // 13% liq. penalty\r\n        JugAbstract(MCD_JUG).file( ilkUSDTA, \"duty\", SIX_PCT_RATE         ); // 6% stability fee\r\n\r\n        FlipAbstract(MCD_FLIP_USDT_A).file(  \"beg\" , 103 * WAD / 100      ); // 3% bid increase\r\n        FlipAbstract(MCD_FLIP_USDT_A).file(  \"ttl\" , 6 hours              ); // 6 hours ttl\r\n        FlipAbstract(MCD_FLIP_USDT_A).file(  \"tau\" , 6 hours              ); // 6 hours tau\r\n\r\n        SpotAbstract(MCD_SPOT).file(ilkUSDTA, \"mat\",  150 * RAY / 100     ); // 150% coll. ratio\r\n        SpotAbstract(MCD_SPOT).poke(ilkUSDTA);\r\n\r\n        IlkRegistryAbstract(ILK_REGISTRY).add(MCD_JOIN_USDT_A);\r\n\r\n        ////////////////////////////////////////////////////////////////////////////////\r\n        // PAXUSD-A collateral deploy\r\n        // Set ilk bytes32 variable\r\n        bytes32 ilkPAXUSDA = \"PAXUSD-A\";\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_PAXUSD_A).vat() == MCD_VAT,                    \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_PAXUSD_A).ilk() == ilkPAXUSDA,                 \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_PAXUSD_A).gem() == PAXUSD,                     \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_PAXUSD_A).dec() == ERC20(PAXUSD).decimals(),   \"join-dec-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_PAXUSD_A).vat()    == MCD_VAT,                    \"flip-vat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_PAXUSD_A).ilk()    == ilkPAXUSDA,                 \"flip-ilk-not-match\");\r\n\r\n        // Set price feed for PAXUSD-A\r\n        SpotAbstract(MCD_SPOT).file(ilkPAXUSDA, \"pip\", PIP_PAXUSD);\r\n\r\n        // Set the PAXUSD-A flipper in the cat\r\n        CatAbstract(MCD_CAT).file(ilkPAXUSDA, \"flip\", MCD_FLIP_PAXUSD_A);\r\n\r\n        // Init PAXUSD-A in Vat\r\n        VatAbstract(MCD_VAT).init(ilkPAXUSDA);\r\n        // Init PAXUSD-A in Jug\r\n        JugAbstract(MCD_JUG).init(ilkPAXUSDA);\r\n\r\n        // Allow PAXUSD-A Join to modify Vat registry\r\n        VatAbstract(MCD_VAT).rely(MCD_JOIN_PAXUSD_A);\r\n\r\n        // Allow PAXUSD-A Flipper on the Cat\r\n        CatAbstract(MCD_CAT).rely(MCD_FLIP_PAXUSD_A);\r\n\r\n        // Allow cat to kick auctions in PAXUSD-A Flipper\r\n        // NOTE: this will be reverse later in spell, and is done only for explicitness.\r\n        FlipAbstract(MCD_FLIP_PAXUSD_A).rely(MCD_CAT);\r\n\r\n        // Allow End to yank auctions in PAXUSD-A Flipper\r\n        FlipAbstract(MCD_FLIP_PAXUSD_A).rely(MCD_END);\r\n\r\n        // Allow FlipperMom to access the PAXUSD-A Flipper\r\n        FlipAbstract(MCD_FLIP_PAXUSD_A).rely(FLIPPER_MOM);\r\n\r\n        // Consequently, deny PAXUSD-A Flipper\r\n        FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_PAXUSD_A);\r\n\r\n        VatAbstract(MCD_VAT).file(ilkPAXUSDA,   \"line\"  , 5 * MILLION * RAD    ); // 5 MM debt ceiling\r\n        VatAbstract(MCD_VAT).file(ilkPAXUSDA,   \"dust\"  , 100 * RAD            ); // 100 Dai dust\r\n        CatAbstract(MCD_CAT).file(ilkPAXUSDA,   \"dunk\"  , 50 * THOUSAND * RAD  ); // 50,000 dunk\r\n        CatAbstract(MCD_CAT).file(ilkPAXUSDA,   \"chop\"  , 113 * WAD / 100      ); // 13% liq. penalty\r\n        JugAbstract(MCD_JUG).file(ilkPAXUSDA,   \"duty\"  , TWO_PCT_RATE         ); // 2% stability fee\r\n        FlipAbstract(MCD_FLIP_PAXUSD_A).file(   \"beg\"   , 103 * WAD / 100      ); // 3% bid increase\r\n        FlipAbstract(MCD_FLIP_PAXUSD_A).file(   \"ttl\"   , 6 hours              ); // 6 hours ttl\r\n        FlipAbstract(MCD_FLIP_PAXUSD_A).file(   \"tau\"   , 6 hours              ); // 6 hours tau\r\n        SpotAbstract(MCD_SPOT).file(ilkPAXUSDA, \"mat\"   , 120 * RAY / 100      ); // 120% coll. ratio\r\n        SpotAbstract(MCD_SPOT).poke(ilkPAXUSDA);\r\n\r\n        IlkRegistryAbstract(ILK_REGISTRY).add(MCD_JOIN_PAXUSD_A);\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    DSPauseAbstract public pause =\r\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\r\n    address         public action;\r\n    bytes32         public tag;\r\n    uint256         public eta;\r\n    bytes           public sig;\r\n    uint256         public expiration;\r\n    bool            public done;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/d8496d07a5eae08f2d1886f6bf4de1a813b4584d/governance/votes/Executive%20vote%20-%20September%204%2C%202020.md -q -O - 2>/dev/null)\"\r\n    string constant public description =\r\n        \"2020-09-04 MakerDAO Executive Spell | Hash: 0x3c35701633399b48090f4c805686ebeeebcc86f6d05b354531f3bd0059ee48dd\";\r\n\r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = now + 30 days;\r\n    }\r\n\r\n    modifier officeHours {\r\n\r\n        // Available after 14:00 UTC (10:00 am EDT) 2020/09/08\r\n        require(now >= 1599573600);\r\n\r\n        uint day = (now / 1 days + 3) % 7;\r\n        require(day < 5, \"Can only be cast on a weekday\");\r\n        uint hour = now / 1 hours % 24;\r\n        require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() officeHours public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://79ec03078c12b4df4a8d1df1826d9531bb9facedd18654d67c299dcf51044c92"}]}