{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    \r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  \r\n}\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n  address public Admininstrator;\r\n\r\n\r\n  constructor() public {\r\n    Admininstrator = msg.sender;\r\n    \r\n  }\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == Admininstrator, \"Only authorized personnels\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract salescontract is Owned{\r\n    \r\n    \r\n  using SafeMath for uint;\r\n \r\n  address public token;\r\n  \r\n  uint public minBuy = 1 ether;\r\n  uint public maxBuy = 5 ether;\r\n  address payable saleswallet;\r\n  \r\n  bool public startSales = false;\r\n  uint public buyvalue;\r\n \r\n  \r\n  uint public _qtty;\r\n  uint decimal = 10**18;\r\n\r\n \r\n  bool isWhitelistAllowed = true;\r\n  mapping(address => uint) public buyamount;\r\n  uint256 public price = 0.05 ether;\r\n  \r\n  \r\n \r\n  constructor() public { Admininstrator = msg.sender; }\r\n   \r\n //========================================CONFIGURATIONS======================================\r\n \r\n \r\n function WalletSetup(address payable _salewallet) public onlyAdmin{saleswallet = _salewallet;}\r\n function setToken(address _tokenaddress) public onlyAdmin{token = _tokenaddress;}\r\n \r\n function AllowSales(bool _status) public onlyAdmin{startSales = _status;}\r\n\t\r\n\t\r\n function () external payable {\r\n    \r\n    require(startSales == true, \"Sales has not been initialized yet\");\r\n    require(msg.value >= minBuy && msg.value <= maxBuy, \"Invalid buy amount, confirm the maximum and minimum buy amounts\");\r\n    require(token != 0x0000000000000000000000000000000000000000, \"Selling token not yet configured\");\r\n    require((buyamount[msg.sender] + msg.value) <= maxBuy, \"Ensure your total buy is not above maximum allowed per wallet\");\r\n    \r\n    buyvalue = msg.value;\r\n    _qtty = buyvalue.div(price);\r\n    require(ERC20Interface(token).balanceOf(address(this)) >= _qtty*decimal, \"Insufficient tokens in the contract\");\r\n    \r\n    saleswallet.transfer(msg.value);\r\n    buyamount[msg.sender] += msg.value;\r\n    require(ERC20Interface(token).transfer(msg.sender, _qtty*decimal), \"Transaction failed\");\r\n      \r\n       \r\n   \r\n    \r\n   \r\n  }\r\n  \r\n  \t\r\n function buy() external payable {\r\n    \r\n    \r\n    require(startSales == true, \"Sales has not been initialized yet\");\r\n    require(msg.value >= minBuy && msg.value <= maxBuy, \"Invalid buy amount, confirm the maximum and minimum buy amounts\");\r\n    require(token != 0x0000000000000000000000000000000000000000, \"Selling token not yet configured\");\r\n    require((buyamount[msg.sender] + msg.value) <= maxBuy, \"Ensure you total buy is not above maximum allowed per wallet\");\r\n    \r\n    buyvalue = msg.value;\r\n    _qtty = buyvalue.div(price);\r\n    require(ERC20Interface(token).balanceOf(address(this)) >= _qtty*decimal, \"Insufficient tokens in the contract\");\r\n    \r\n    saleswallet.transfer(msg.value);\r\n    buyamount[msg.sender] += msg.value;\r\n    require(ERC20Interface(token).transfer(msg.sender, _qtty*decimal), \"Transaction failed\");\r\n      \r\n        \r\n    \r\n   \r\n  }\r\n  \r\n\r\n\r\n  function withdrawBal() public onlyAdmin returns(bool){\r\n      \r\n      require(saleswallet != address(0));\r\n      uint bal = ERC20Interface(token).balanceOf(address(this));\r\n      require(ERC20Interface(token).transfer(saleswallet, bal), \"Transaction failed\");\r\n      \r\n  }\r\n \r\n \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"Admininstrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"AllowSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_salewallet\",\"type\":\"address\"}],\"name\":\"WalletSetup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_qtty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyvalue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenaddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startSales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"salescontract","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://110200c6c522aeef429b645e9d269fd8d3cdc31be31db5e3db5ce84c08d08d76"}]}