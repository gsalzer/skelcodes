{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-07-31\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.15;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function name() external view returns (string memory);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n \r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n \r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n \r\n*/\r\n\r\ninterface Yam {\r\n    function withdraw(uint) external;\r\n    function getReward() external;\r\n    function stake(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function exit() external;\r\n    function earned(address) external view returns (uint);\r\n}\r\n\r\ninterface UniswapRouter {\r\n  function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external returns (uint[] memory amounts);\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n        ) external;\r\n}\r\n\r\n\r\ninterface Yvault{\r\n    function make_profit(uint256 amount) external;\r\n}\r\n\r\ncontract Strategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    address public pool;\r\n    address public output;\r\n    string public getName;\r\n\r\n    address constant public yfii = address(0xa1d0E215a23d7030842FC67cE582a6aFa3CCaB83);\r\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address constant public ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\r\n    \r\n    uint public fee = 600;\r\n    uint public burnfee = 300;\r\n    uint public callfee = 100;\r\n    uint constant public max = 10000;\r\n    \r\n    address public governance;\r\n    address public controller;\r\n\r\n    address  public want;\r\n    \r\n    address[] public swapRouting;\r\n    \r\n    constructor(address _output,address _pool,address _want) public {\r\n        governance = tx.origin;\r\n        controller = 0xe14e60d0F7fb15b1A98FDE88A3415C17b023bf36;\r\n        output = _output;\r\n        pool = _pool;\r\n        want = _want;\r\n        getName = string(\r\n            abi.encodePacked(\"yfii:Strategy:\", \r\n                abi.encodePacked(IERC20(want).name(),\r\n                    abi.encodePacked(\":\",IERC20(output).name())\r\n                )\r\n            ));\r\n        init(); \r\n        swapRouting = [output,ycrv,weth,yfii];//grap->ycrv -> weth->yfii\r\n\r\n    }\r\n    \r\n    function deposit() external { \r\n        IERC20(want).safeApprove(pool, 0);\r\n        IERC20(want).safeApprove(pool, IERC20(want).balanceOf(address(this)));\r\n        Yam(pool).stake(IERC20(want).balanceOf(address(this)));\r\n    }\r\n    \r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n    \r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n        \r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, _amount);\r\n    }\r\n    \r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() public returns (uint balance) { \r\n        require(msg.sender == controller||msg.sender==governance, \"!controller\");\r\n        _withdrawAll();\r\n        balance = IERC20(want).balanceOf(address(this));\r\n        \r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n        \r\n    }\r\n    \r\n    function _withdrawAll() internal { \r\n        Yam(pool).exit();\r\n    }\r\n    function init () public{\r\n        IERC20(output).safeApprove(unirouter, uint(-1));\r\n    }\r\n\r\n    function setNewPool(address _output,address _pool) public{\r\n        require(msg.sender == governance, \"!governance\");\r\n        //这边是切换池子以及挖到的代币\r\n        //先退出之前的池子.\r\n        harvest();\r\n        withdrawAll();\r\n        output = _output;\r\n        pool = _pool;\r\n        getName = string(\r\n            abi.encodePacked(\"yfii:Strategy:\", \r\n                abi.encodePacked(IERC20(want).name(),\r\n                    abi.encodePacked(\":\",IERC20(output).name())\r\n                )\r\n            ));\r\n\r\n    }\r\n    \r\n    function harvest() public {\r\n        require(!Address.isContract(msg.sender),\"!contract\");\r\n        Yam(pool).getReward(); \r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        swap2yfii();\r\n        // fee\r\n        uint b = IERC20(yfii).balanceOf(address(this));\r\n        uint _fee = b.mul(fee).div(max);\r\n        uint _callfee = b.mul(callfee).div(max);\r\n        uint _burnfee = b.mul(burnfee).div(max);\r\n        IERC20(yfii).safeTransfer(Controller(controller).rewards(), _fee); //6%  5% team +1% insurance\r\n        IERC20(yfii).safeTransfer(msg.sender, _callfee); //call fee 1%\r\n        IERC20(yfii).safeTransfer(address(0x6666666666666666666666666666666666666666), _burnfee); //burn fee 3%\r\n\r\n        //把yfii 存进去分红.\r\n        IERC20(yfii).safeApprove(_vault, 0);\r\n        IERC20(yfii).safeApprove(_vault, IERC20(yfii).balanceOf(address(this)));\r\n        Yvault(_vault).make_profit(IERC20(yfii).balanceOf(address(this)));\r\n    }\r\n\r\n    function swap2yfii() internal {\r\n            //output -> eth ->yfii\r\n            UniswapRouter(unirouter).swapExactTokensForTokens(IERC20(output).balanceOf(address(this)), 0, swapRouting, address(this), now.add(1800));\r\n    }\r\n    \r\n    function _withdrawSome(uint256 _amount) internal returns (uint) {\r\n        Yam(pool).withdraw(_amount);\r\n        return _amount;\r\n    }\r\n    \r\n    \r\n    function balanceOf() public view returns (uint) {\r\n        return Yam(pool).balanceOf(address(this));\r\n               \r\n    }\r\n    function balanceOfPendingReward() public view returns(uint){ //还没有领取的收益有多少...\r\n        return Yam(pool).earned(address(this));\r\n    }\r\n    \r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n    \r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setFee(uint256 _fee) external{\r\n        require(msg.sender == governance, \"!governance\");\r\n        fee = _fee;\r\n    }\r\n    function setCallFee(uint256 _fee) external{\r\n        require(msg.sender == governance, \"!governance\");\r\n        callfee = _fee;\r\n    }    \r\n    function setBurnFee(uint256 _fee) external{\r\n        require(msg.sender == governance, \"!governance\");\r\n        burnfee = _fee;\r\n    }\r\n    function setSwapRouting(address[] memory _path) public{\r\n        require(msg.sender == governance, \"!governance\");\r\n        swapRouting = _path;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setCallFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setNewPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setSwapRouting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ycrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yfii\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Strategy","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c8d2ab2a6fdebc25432e54941cb85b55b9f152db0000000000000000000000002e0c963006c8307944cad83f2653936516126bdf000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://578b5f81b8143318bbb26b5fcec6ab49ab07a00f59fec2cb26a7cacc5578349c"}]}