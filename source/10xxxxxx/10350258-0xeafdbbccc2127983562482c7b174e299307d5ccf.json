{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IDeerfiV1Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDeerfiV1Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amountLiqidity);\r\n    event Burn(address indexed sender, uint amountLiqidity, address indexed to);\r\n    event LongSwap(\r\n        address indexed sender,\r\n        uint amountTradeTokenIn,\r\n        uint amountLongTokenOut,\r\n        address indexed to\r\n    );\r\n    event CloseSwap(\r\n        address indexed sender,\r\n        uint amountLongTokenIn,\r\n        uint amountTradeTokenOut,\r\n        address indexed to\r\n    );\r\n    event Sync(uint256 reserveTradeToken);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function tradeToken() external view returns (address);\r\n    function fromToken() external view returns (address);\r\n    function toToken() external view returns (address);\r\n    function longToken() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint256 reserveTradeToken);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amountTradeToken);\r\n    function swap(address to) external;\r\n    function closeSwap(address to) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address, address, address) external;\r\n}\r\n\r\n// File: contracts/interfaces/IDeerfiV1ERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDeerfiV1ERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n// File: contracts/DeerfiV1ERC20.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\ncontract DeerfiV1ERC20 is IDeerfiV1ERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = 'Deerfi';\r\n    string public constant symbol = 'DF-V1';\r\n    uint8 public constant decimals = 18;\r\n    uint  public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint) public nonces;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    constructor() public {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes('1')),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(deadline >= block.timestamp, 'DeerfiV1: EXPIRED');\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'DeerfiV1: INVALID_SIGNATURE');\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Math.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IDeerfiV1Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDeerfiV1Factory {\r\n    event PairCreated(address indexed tradeToken, address indexed fromToken, address indexed toToken, address pair, address longToken, uint);\r\n    event FeedPairCreated(address indexed tokenA, address indexed tokenB, address indexed feedPair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function feeFactor() external view returns (uint16);\r\n\r\n    function getPair(address tradeToken, address fromToken, address toToken) external view returns (address pair);\r\n    function getFeedPair(address tokenA, address tokenB) external view returns (address feedPair);\r\n    function allPairsLength() external view returns (uint);\r\n    function allFeedPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tradeToken, address fromToken, address toToken) external returns (address pair);\r\n    function setFeedPair(address tokenA, address tokenB, uint8 decimalsA, uint8 decimalsB,\r\n        address aggregator0, address aggregator1, uint8 decimals0, uint8 decimals1, bool isReverse0, bool isReverse1) external returns (address feedPair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeFactor(uint16) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: contracts/interfaces/IDeerfiV1FeedPair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDeerfiV1FeedPair {\r\n    function factory() external view returns (address);\r\n    function tokenA() external view returns (address);\r\n    function tokenB() external view returns (address);\r\n    function decimalsA() external view returns (uint8);\r\n    function decimalsB() external view returns (uint8);\r\n    function aggregator0() external view returns (address);\r\n    function aggregator1() external view returns (address);\r\n    function decimals0() external view returns (uint8);\r\n    function decimals1() external view returns (uint8);\r\n    function isReverse0() external view returns (bool);\r\n    function isReverse1() external view returns (bool);\r\n    function initialize(address, address, uint8, uint8, address, address, uint8, uint8, bool, bool) external;\r\n    function getReserves() external view returns (uint reserveA, uint reserveB);\r\n}\r\n\r\n// File: contracts/interfaces/IDeerfiV1SwapToken.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IDeerfiV1SwapToken {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function mint(address to, uint value) external returns (bool);\r\n    function burn(address from, uint value) external returns (bool);\r\n\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\n\r\n// File: contracts/libraries/Ownable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @title Ownable contract\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control functions.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n    constructor(address _owner) public validAddress(_owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @param _newOwner The address to transfer ownership to.\r\n    function transferOwnership(address _newOwner) public onlyOwner validAddress(_newOwner) {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/DeerfiV1SwapToken.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\ncontract DeerfiV1SwapToken is IDeerfiV1SwapToken, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = 'Deerfi Swap Token';\r\n    string public constant symbol = 'DFT-V1';\r\n    uint8 public constant decimals = 18;\r\n    uint  public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    constructor() Ownable(msg.sender) public {\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function mint(address to, uint value) external onlyOwner returns (bool) {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n        return true;\r\n    }\r\n\r\n    function burn(address from, uint value) external onlyOwner returns (bool){\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/DeerfiV1Pair.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DeerfiV1Pair is IDeerfiV1Pair, DeerfiV1ERC20 {\r\n    using SafeMath for uint;\r\n\r\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    bytes4 private constant MINT_SELECTOR = bytes4(keccak256(bytes('mint(address,uint256)')));\r\n    bytes4 private constant BURN_SELECTOR = bytes4(keccak256(bytes('burn(address,uint256)')));\r\n\r\n    address public factory;\r\n    address public tradeToken;\r\n    address public fromToken;\r\n    address public toToken;\r\n    address public longToken;\r\n\r\n    uint256 private reserveTradeToken;  // uses single storage slot, accessible via getReserves\r\n\r\n    uint public kLast; // reserveTradeToken, as of immediately after the most recent liquidity event\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'DeerfiV1: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function getReserves() public view returns (uint256 _reserveTradeToken) {\r\n        _reserveTradeToken = reserveTradeToken;\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'DeerfiV1: TRANSFER_FAILED');\r\n    }\r\n\r\n    function _safeMint(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(MINT_SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'DeerfiV1: MINT_FAILED');\r\n    }\r\n\r\n    function _safeBurn(address token, address from, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(BURN_SELECTOR, from, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'DeerfiV1: BURN_FAILED');\r\n    }\r\n\r\n    event Mint(address indexed sender, uint amountLiqidity);\r\n    event Burn(address indexed sender, uint amountLiqidity, address indexed to);\r\n    event LongSwap(\r\n        address indexed sender,\r\n        uint amountTradeTokenIn,\r\n        uint amountLongTokenOut,\r\n        address indexed to\r\n    );\r\n    event CloseSwap(\r\n        address indexed sender,\r\n        uint amountLongTokenIn,\r\n        uint amountTradeTokenOut,\r\n        address indexed to\r\n    );\r\n    event Sync(uint256 reserveTradeToken);\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    // calculates the CREATE2 address for a feed pair without making any external calls\r\n    function feedPairFor(address tokenA, address tokenB) internal view returns (address feedPair) {\r\n        feedPair = address(uint(keccak256(abi.encodePacked(\r\n            hex'ff',\r\n            factory,\r\n            keccak256(abi.encodePacked(tokenA, tokenB)),\r\n            hex'b557e6ca017e5e64c7b98af8b844db236b5b74c622e26e209bef1f92d2e5b7df' // init code hash\r\n        ))));\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(address _tradeToken, address _fromToken, address _toToken, address _longToken) external {\r\n        require(msg.sender == factory, 'DeerfiV1: FORBIDDEN'); // sufficient check\r\n        tradeToken = _tradeToken;\r\n        fromToken = _fromToken;\r\n        toToken = _toToken;\r\n        longToken = _longToken;\r\n    }\r\n\r\n    // update reserves and, on the first call per block\r\n    function _update(uint balanceTradeToken) private {\r\n        require(balanceTradeToken <= uint256(-1), 'DeerfiV1: OVERFLOW');\r\n        reserveTradeToken = uint256(balanceTradeToken);\r\n        emit Sync(reserveTradeToken);\r\n    }\r\n\r\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in\r\n    function _mintFee(uint256 rootK) private returns (bool feeOn) {\r\n        address feeTo = IDeerfiV1Factory(factory).feeTo();\r\n        feeOn = feeTo != address(0);\r\n        uint _kLast = kLast; // gas savings\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                if (rootK > _kLast) {\r\n                    uint numerator = totalSupply.mul(rootK.sub(_kLast));\r\n                    uint denominator = rootK.mul(5).add(_kLast);\r\n                    uint liquidity = numerator / denominator;\r\n                    if (liquidity > 0) _mint(feeTo, liquidity);\r\n                }\r\n            }\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint amountB) {\r\n        require(amountA >= 0, 'DeerfiV1: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'DeerfiV1: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to) external lock returns (uint liquidity) {\r\n        uint256 _reserveTradeToken = getReserves(); // gas savings\r\n        uint balanceTradeToken = IERC20(tradeToken).balanceOf(address(this));\r\n        uint amountTradeToken = balanceTradeToken.sub(_reserveTradeToken);\r\n\r\n        uint256 amountUserTradeToken;\r\n        {\r\n        (uint reserveOut, uint reserveIn) = IDeerfiV1FeedPair(feedPairFor(fromToken, toToken)).getReserves();\r\n        uint amountSwapTokenIn = IERC20(longToken).totalSupply();\r\n        amountUserTradeToken = Math.min(quote(amountSwapTokenIn, reserveIn, reserveOut), _reserveTradeToken);\r\n        }\r\n\r\n        bool feeOn = _mintFee(_reserveTradeToken.sub(amountUserTradeToken));\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n\r\n        if (_totalSupply == 0 || _reserveTradeToken <= amountUserTradeToken) {\r\n            liquidity = amountTradeToken.sub(MINIMUM_LIQUIDITY);\r\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(amountTradeToken.mul(_totalSupply) / (_reserveTradeToken.sub(amountUserTradeToken)), amountTradeToken);\r\n        }\r\n        require(liquidity > 0, 'DeerfiV1: INSUFFICIENT_LIQUIDITY_MINTED');\r\n        _mint(to, liquidity);\r\n\r\n        _update(balanceTradeToken);\r\n        if (feeOn) kLast = uint(reserveTradeToken.sub(amountUserTradeToken)); // reserve0 and reserve1 are up-to-date\r\n        emit Mint(msg.sender, amountTradeToken);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to) external lock returns (uint amountTradeToken) {\r\n        uint256 _reserveTradeToken = getReserves(); // gas savings\r\n        address _tradeToken = tradeToken;           // gas savings\r\n        uint balanceTradeToken = IERC20(_tradeToken).balanceOf(address(this));\r\n        uint liquidity = balanceOf[address(this)];\r\n\r\n        uint amountUserTradeToken;\r\n        {\r\n        (uint reserveOut, uint reserveIn) = IDeerfiV1FeedPair(feedPairFor(fromToken, toToken)).getReserves();\r\n        uint amountSwapTokenIn = IERC20(longToken).totalSupply();\r\n        amountUserTradeToken = Math.min(quote(amountSwapTokenIn, reserveIn, reserveOut), _reserveTradeToken);\r\n        }\r\n\r\n        bool feeOn = _mintFee(_reserveTradeToken.sub(amountUserTradeToken));\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n\r\n        amountTradeToken = liquidity.mul(balanceTradeToken.sub(amountUserTradeToken)) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(amountTradeToken > 0, 'DeerfiV1: INSUFFICIENT_LIQUIDITY_BURNED');\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_tradeToken, to, amountTradeToken);\r\n        balanceTradeToken = IERC20(_tradeToken).balanceOf(address(this));\r\n\r\n        _update(balanceTradeToken);\r\n        if (feeOn) kLast = uint(reserveTradeToken.sub(amountUserTradeToken)); // reserve0 and reserve1 are up-to-date\r\n        emit Burn(msg.sender, amountTradeToken, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(address to) external lock {\r\n        uint256 _reserveTradeToken = getReserves(); // gas savings\r\n\r\n        uint balanceTradeToken;\r\n        uint reserveIn;\r\n        uint reserveOut;\r\n        address _swapToken = longToken;\r\n        { // scope for _token{0,1}, avoids stack too deep errors\r\n        address _tradeToken = tradeToken;\r\n        require(to != _tradeToken, 'DeerfiV1: INVALID_TO');\r\n        (reserveIn, reserveOut) = IDeerfiV1FeedPair(feedPairFor(fromToken, toToken)).getReserves();\r\n        balanceTradeToken = IERC20(_tradeToken).balanceOf(address(this));\r\n        }\r\n        uint amountTradeTokenIn = balanceTradeToken > _reserveTradeToken ? balanceTradeToken.sub(_reserveTradeToken) : 0;\r\n        require(amountTradeTokenIn > 0, 'DeerfiV1: INSUFFICIENT_INPUT_AMOUNT');\r\n        uint16 feeFactor = IDeerfiV1Factory(factory).feeFactor();\r\n        uint amountSwapTokenOut = quote(amountTradeTokenIn, reserveIn, reserveOut).mul(feeFactor) / (1000);\r\n        require(amountSwapTokenOut > 0, 'DeerfiV1: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        _safeMint(_swapToken, to, amountSwapTokenOut); // optimistically mint tokens\r\n\r\n        _update(balanceTradeToken);\r\n        emit LongSwap(msg.sender, amountTradeTokenIn, amountSwapTokenOut, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function closeSwap(address to) external lock {\r\n        uint amountSwapTokenIn;\r\n        uint reserveIn;\r\n        uint reserveOut;\r\n        address _tradeToken = tradeToken;\r\n        { // scope for _token{0,1}, avoids stack too deep errors\r\n        address _swapToken = longToken;\r\n        require(to != _tradeToken, 'DeerfiV1: INVALID_TO');\r\n        (reserveOut, reserveIn) = IDeerfiV1FeedPair(feedPairFor(fromToken, toToken)).getReserves();\r\n        amountSwapTokenIn = IERC20(_swapToken).balanceOf(address(this));\r\n        require(amountSwapTokenIn > 0, 'DeerfiV1: INSUFFICIENT_INPUT_AMOUNT');\r\n        _safeBurn(_swapToken, address(this), amountSwapTokenIn); // optimistically mint tokens\r\n        }\r\n        uint16 feeFactor = IDeerfiV1Factory(factory).feeFactor();\r\n        uint amountTradeTokenOut = quote(amountSwapTokenIn, reserveIn, reserveOut).mul(feeFactor) / (1000);\r\n        require(amountTradeTokenOut > 0, 'DeerfiV1: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        _safeTransfer(_tradeToken, to, amountTradeTokenOut); // optimistically transfer tokens\r\n        uint balanceTradeToken = IERC20(_tradeToken).balanceOf(address(this));\r\n\r\n        _update(balanceTradeToken);\r\n        emit CloseSwap(msg.sender, amountSwapTokenIn, amountTradeTokenOut, to);\r\n    }\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external lock {\r\n        address _tradeToken = tradeToken; // gas savings\r\n        _safeTransfer(_tradeToken, to, IERC20(_tradeToken).balanceOf(address(this)).sub(reserveTradeToken));\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock {\r\n        _update(IERC20(tradeToken).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/AggregatorInterface.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface AggregatorInterface {\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  // post-Historic\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function getRoundData(uint256 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    );\r\n  function version() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/DeerfiV1FeedPair.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\ncontract DeerfiV1FeedPair is IDeerfiV1FeedPair {\r\n    using SafeMath for uint;\r\n\r\n    address public factory;\r\n    address public tokenA;\r\n    address public tokenB;\r\n    uint8 public decimalsA;\r\n    uint8 public decimalsB;\r\n    address public aggregator0;\r\n    address public aggregator1;\r\n    uint8 public decimals0;\r\n    uint8 public decimals1;\r\n    bool public isReverse0;\r\n    bool public isReverse1;\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    function initialize(address _tokenA, address _tokenB, uint8 _decimalsA, uint8 _decimalsB,\r\n        address _aggregator0, address _aggregator1, uint8 _decimals0, uint8 _decimals1, bool _isReverse0, bool _isReverse1) external {\r\n        require(msg.sender == factory, 'DeerfiV1: FORBIDDEN'); // sufficient check\r\n        require(_tokenA != _tokenB, 'DeerfiV1: IDENTICAL_ADDRESSES');\r\n        (address token0,) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\r\n        require(token0 != address(0), 'DeerfiV1: ZERO_ADDRESS');\r\n        require(_decimalsA > 0, 'DeerfiV1: FORBIDDEN');\r\n        require(_decimalsB > 0, 'DeerfiV1: FORBIDDEN');\r\n        require(_aggregator0 != address(0), 'DeerfiV1: ZERO_ADDRESS');\r\n        require(_decimals0 > 0, 'DeerfiV1: FORBIDDEN');\r\n        require(_decimals1 > 0, 'DeerfiV1: FORBIDDEN');\r\n\r\n        tokenA = _tokenA;\r\n        tokenB = _tokenB;\r\n        decimalsA = _decimalsA;\r\n        decimalsB = _decimalsB;\r\n        aggregator0 = _aggregator0;\r\n        aggregator1 = _aggregator1;\r\n        decimals0 = _decimals0;\r\n        decimals1 = _decimals1;\r\n        isReverse0 = _isReverse0;\r\n        isReverse1 = _isReverse1;\r\n    }\r\n\r\n    function getReserves0() internal view returns (uint reserveA, uint reserveB) {\r\n        AggregatorInterface _aggregator0 = AggregatorInterface(aggregator0);\r\n        if (isReverse0) {\r\n            reserveA = uint(_aggregator0.latestAnswer());\r\n            reserveB = 10 ** uint(decimals0);\r\n        } else {\r\n            reserveA = 10 ** uint(decimals0);\r\n            reserveB = uint(_aggregator0.latestAnswer());\r\n        }\r\n    }\r\n\r\n    function getReserves1() internal view returns (uint reserveA, uint reserveB) {\r\n        AggregatorInterface _aggregator1 = AggregatorInterface(aggregator1);\r\n        if (isReverse1) {\r\n            reserveA = uint(_aggregator1.latestAnswer());\r\n            reserveB = 10 ** uint(decimals1);\r\n        } else {\r\n            reserveA = 10 ** uint(decimals1);\r\n            reserveB = uint(_aggregator1.latestAnswer());\r\n        }\r\n    }\r\n\r\n    function getReserves() external view returns (uint reserveA, uint reserveB) {\r\n        uint8 _decimalsA = decimalsA;\r\n        uint8 _decimalsB = decimalsB;\r\n        uint8 _decimals0 = decimals0;\r\n        uint8 _decimals1 = decimals1;\r\n        if (aggregator1 == address(0)) {\r\n            (uint reserve0A, uint reserve0B) = getReserves0();\r\n            reserveA = reserve0A.mul(10 ** uint(_decimalsA)) / (10 ** uint(_decimals0));\r\n            reserveB = reserve0B.mul(10 ** uint(_decimalsB)) / (10 ** uint(_decimals0));\r\n        } else {\r\n            (uint reserve0A, uint reserve0B) = getReserves0();\r\n            (uint reserve1A, uint reserve1B) = getReserves1();\r\n            reserveA = reserve0A.mul(reserve1A).mul(10 ** uint(_decimalsA)) / (10 ** uint(_decimals0)) / (10 ** uint(_decimals1));\r\n            reserveB = reserve0B.mul(reserve1B).mul(10 ** uint(_decimalsB)) / (10 ** uint(_decimals0)) / (10 ** uint(_decimals1));\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/DeerfiV1Factory.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\ncontract DeerfiV1Factory is IDeerfiV1Factory {\r\n    address public feeTo;\r\n    address public feeToSetter;\r\n    uint16 public feeFactor;\r\n\r\n    mapping(address => mapping(address => mapping(address => address))) public getPair;\r\n    mapping(address => mapping(address => address)) public getFeedPair;\r\n    uint public allPairsLength;\r\n    uint public allFeedPairsLength;\r\n\r\n    event PairCreated(address indexed tradeToken, address indexed fromToken, address indexed toToken, address pair, address longToken, uint);\r\n    event FeedPairCreated(address indexed tokenA, address indexed tokenB, address indexed feedPair, uint);\r\n\r\n    constructor(address _feeToSetter) public {\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n\r\n    function createPair(address tradeToken, address fromToken, address toToken) external returns (address pair) {\r\n        require(tradeToken != address(0), 'DeerfiV1: ZERO_ADDRESS');\r\n        require(fromToken != toToken, 'DeerfiV1: IDENTICAL_ADDRESSES');\r\n        (address token0,) = fromToken < toToken ? (fromToken, toToken) : (toToken, fromToken);\r\n        require(token0 != address(0), 'DeerfiV1: ZERO_ADDRESS');\r\n        require(getPair[tradeToken][fromToken][toToken] == address(0), 'DeerfiV1: PAIR_EXISTS'); // single check is sufficient\r\n        bytes memory bytecode = type(DeerfiV1Pair).creationCode;\r\n        bytes memory swapTokenBytecode = type(DeerfiV1SwapToken).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(tradeToken, fromToken, toToken));\r\n        address longToken;\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n            longToken := create2(0, add(swapTokenBytecode, 32), mload(swapTokenBytecode), salt)\r\n        }\r\n        IDeerfiV1Pair(pair).initialize(tradeToken, fromToken, toToken, longToken);\r\n        IDeerfiV1SwapToken(longToken).transferOwnership(pair);\r\n        getPair[tradeToken][fromToken][toToken] = pair;\r\n        allPairsLength += 1;\r\n        emit PairCreated(tradeToken, fromToken, toToken, pair, longToken, allPairsLength);\r\n    }\r\n\r\n    function setFeedPair(address tokenA, address tokenB, uint8 decimalsA, uint8 decimalsB,\r\n        address aggregator0, address aggregator1, uint8 decimals0, uint8 decimals1, bool isReverse0, bool isReverse1) external returns (address feedPair) {\r\n        require(msg.sender == feeToSetter, 'DeerfiV1: FORBIDDEN');\r\n        feedPair = getFeedPair[tokenA][tokenB];\r\n        if (feedPair == address(0)) {\r\n            bytes memory bytecode = type(DeerfiV1FeedPair).creationCode;\r\n            bytes32 salt = keccak256(abi.encodePacked(tokenA, tokenB));\r\n            assembly {\r\n                feedPair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n            }\r\n            getFeedPair[tokenA][tokenB] = feedPair;\r\n            allFeedPairsLength += 1;\r\n            emit FeedPairCreated(tokenA, tokenB, feedPair, allFeedPairsLength);\r\n        }\r\n        IDeerfiV1FeedPair(feedPair).initialize(tokenA, tokenB, decimalsA, decimalsB, aggregator0, aggregator1, decimals0, decimals1, isReverse0, isReverse1);\r\n    }\r\n\r\n    function setFeeTo(address _feeTo) external {\r\n        require(msg.sender == feeToSetter, 'DeerfiV1: FORBIDDEN');\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    function setFeeFactor(uint16 _feeFactor) external {\r\n        require(msg.sender == feeToSetter, 'DeerfiV1: FORBIDDEN');\r\n        require(_feeFactor > 0 && _feeFactor <= 1000, 'DeerfiV1: BAD_VALUE');\r\n        feeFactor = _feeFactor;\r\n    }\r\n\r\n    function setFeeToSetter(address _feeToSetter) external {\r\n        require(msg.sender == feeToSetter, 'DeerfiV1: FORBIDDEN');\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feedPair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FeedPairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"longToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"allFeedPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeFactor\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getFeedPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_feeFactor\",\"type\":\"uint16\"}],\"name\":\"setFeeFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimalsA\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimalsB\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"aggregator0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregator1\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals1\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isReverse0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isReverse1\",\"type\":\"bool\"}],\"name\":\"setFeedPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feedPair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeerfiV1Factory","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000021e30d7bd42b244fc626677664ad2adea46849a0","EVMVersion":"istanbul","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://70994717d78f7e57bbd2827f394db998d1599aa92d2a7ceb96d746f858ce0a64"}]}