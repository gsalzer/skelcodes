{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ncontract ThreeFMutual {\r\n    using SafeMath for *;\r\n\r\n    //*********\r\n    // STRUCTS\r\n    //*********\r\n    struct Player {\r\n        uint256 id;             // agent id\r\n        bytes32 name;           // agent name\r\n        uint256 ref;            // referral vault\r\n        bool isAgent;           // referral activated\r\n        bool claimed;           // insurance claimed\r\n        uint256 eth;            // eth player has paid\r\n        uint256 shares;         // shares\r\n        uint256 units;          // uints of insurance\r\n        uint256 plyrLastSeen;   // last day player played\r\n        uint256 mask;           // player mask\r\n        uint256 level;          // agent level\r\n        uint256 accumulatedRef; // accumulated referral income\r\n    }\r\n\r\n\r\n    //***************\r\n    // EXTERNAL DATA\r\n    //***************\r\n\r\n    VAT vat = VAT(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);\r\n    Underwriter underwriter = Underwriter(0xE58cDe3CbEeCC8d9306f482729084B909Afa2357);\r\n    Agency agency = Agency(0x7Bc360ebD65eFa503FF189A0F81f61f85D310Ec3);\r\n    \r\n    address payable constant private hakka = address(0x83D0D842e6DB3B020f384a2af11bD14787BEC8E7);\r\n    address payable constant private IIP = address(0x9933AD4D38702cdC28C5DB2F421F1F02CF530780);\r\n    uint256 public end;\r\n    bool public ended;\r\n\r\n\r\n    //******************\r\n    // GLOBAL VARIABLES\r\n    //******************\r\n    mapping(address => mapping(uint256 => uint256)) public unitToExpirePlayer;\r\n    mapping(uint256 => uint256) public unitToExpire; // unit of insurance due at day x\r\n\r\n    uint256 public issuedInsurance; // all issued insurance\r\n    uint256 public ethOfShare;      // virtual eth pointer\r\n    uint256 public shares;          // total share\r\n    uint256 public pool;            // eth gonna pay to beneficiary\r\n    uint256 public today;           // today's date\r\n    uint256 public _now;            // current time\r\n    uint256 public mask;            // global mask\r\n    uint256 public agents;          // number of agent\r\n\r\n    // player data\r\n    mapping(address => Player) public player;       // player data\r\n    mapping(uint256 => address) public agentxID_;   // return agent address by id\r\n    mapping(bytes32 => address) public agentxName_; // return agent address by name\r\n\r\n    // constant parameters\r\n    uint256 constant maxInsurePeriod = 100;\r\n    uint256 constant maxLevel = 10;\r\n\r\n    // rate of buying x day insurance\r\n    uint256[101] public rate =\r\n    [0,\r\n    1000000000000000000,\r\n    1990000000000000000,\r\n    2970100000000000000,\r\n    3940399000000000000,\r\n    4900995010000000000,\r\n    5851985059900000000,\r\n    6793465209301000000,\r\n    7725530557207990000,\r\n    8648275251635910100,\r\n    9561792499119550999,\r\n    10466174574128355489,\r\n    11361512828387071934,\r\n    12247897700103201215,\r\n    13125418723102169203,\r\n    13994164535871147511,\r\n    14854222890512436036,\r\n    15705680661607311676,\r\n    16548623854991238559,\r\n    17383137616441326173,\r\n    18209306240276912911,\r\n    19027213177874143782,\r\n    19836941046095402344,\r\n    20638571635634448321,\r\n    21432185919278103838,\r\n    22217864060085322800,\r\n    22995685419484469572,\r\n    23765728565289624876,\r\n    24528071279636728627,\r\n    25282790566840361341,\r\n    26029962661171957728,\r\n    26769663034560238151,\r\n    27501966404214635769,\r\n    28226946740172489411,\r\n    28944677272770764517,\r\n    29655230500043056872,\r\n    30358678195042626303,\r\n    31055091413092200040,\r\n    31744540498961278040,\r\n    32427095093971665260,\r\n    33102824143031948607,\r\n    33771795901601629121,\r\n    34434077942585612830,\r\n    35089737163159756702,\r\n    35738839791528159135,\r\n    36381451393612877544,\r\n    37017636879676748769,\r\n    37647460510879981281,\r\n    38270985905771181468,\r\n    38888276046713469653,\r\n    39499393286246334956,\r\n    40104399353383871606,\r\n    40703355359850032890,\r\n    41296321806251532561,\r\n    41883358588189017235,\r\n    42464525002307127063,\r\n    43039879752284055792,\r\n    43609480954761215234,\r\n    44173386145213603082,\r\n    44731652283761467051,\r\n    45284335760923852380,\r\n    45831492403314613856,\r\n    46373177479281467717,\r\n    46909445704488653040,\r\n    47440351247443766510,\r\n    47965947734969328845,\r\n    48486288257619635557,\r\n    49001425375043439201,\r\n    49511411121293004809,\r\n    50016297010080074761,\r\n    50516134039979274013,\r\n    51010972699579481273,\r\n    51500862972583686460,\r\n    51985854342857849595,\r\n    52465995799429271099,\r\n    52941335841434978388,\r\n    53411922483020628604,\r\n    53877803258190422318,\r\n    54339025225608518095,\r\n    54795634973352432914,\r\n    55247678623618908585,\r\n    55695201837382719499,\r\n    56138249819008892304,\r\n    56576867320818803381,\r\n    57011098647610615347,\r\n    57440987661134509194,\r\n    57866577784523164102,\r\n    58287912006677932461,\r\n    58705032886611153136,\r\n    59117982557745041605,\r\n    59526802732167591189,\r\n    59931534704845915277,\r\n    60332219357797456124,\r\n    60728897164219481563,\r\n    61121608192577286747,\r\n    61510392110651513880,\r\n    61895288189544998741,\r\n    62276335307649548754,\r\n    62653571954573053266,\r\n    63027036235027322733,\r\n    63396765872677049506];\r\n\r\n    // threshold of agent upgrade\r\n    uint256[10] public requirement =\r\n    [0,\r\n    73890560989306501,\r\n    200855369231876674,\r\n    545981500331442382,\r\n    1484131591025766010,\r\n    4034287934927351160,\r\n    10966331584284585813,\r\n    29809579870417282259,\r\n    81030839275753838749,\r\n    220264657948067161559];\r\n\r\n\r\n    //******************\r\n    // EVENT\r\n    //******************\r\n    event UPGRADE (address indexed agent, uint256 indexed level);\r\n    event BUYINSURANCE(address indexed buyer, uint256 indexed start, uint256 unit,  uint256 date);\r\n\r\n\r\n    //******************\r\n    // MODIFIER\r\n    //******************\r\n    modifier isHuman() {\r\n        require(msg.sender == tx.origin, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    //******************\r\n    // CORE FUNCTIONS\r\n    //******************\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @notice Initialize the time\r\n     */\r\n    constructor() public {\r\n        _now = now;\r\n        today = _now / 1 days;\r\n    }\r\n\r\n    /**\r\n     * @dev Ticker\r\n     * @notice It is called everytime when a player interacts with this contract\r\n     * @return true if MakerDAO has been shut down, false otherwise\r\n     */\r\n    function tick()\r\n        internal\r\n        returns(bool)\r\n    {\r\n        if(!ended) {\r\n            if (_now != now) {\r\n                _now = now;\r\n                uint256 _today = _now / 1 days; // the current day as soon as ticker is called\r\n\r\n                //check MakerDAO status\r\n                if(vat.live() == 0) {\r\n                    ended = true;\r\n                    end = now;\r\n                }\r\n\r\n                // calculate the outdated issuedInsurance\r\n                while (today < _today) {\r\n                    issuedInsurance = issuedInsurance.sub(unitToExpire[today]);\r\n                    unitToExpire[today] = 0;\r\n                    today += 1;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return ended;\r\n    }\r\n\r\n    /**\r\n     * @dev Register\r\n     * @notice Register a name by a human player\r\n     */\r\n    function register(string calldata _nameString)\r\n        external\r\n        payable\r\n        isHuman()\r\n    {\r\n        bytes32 _name = agency.register(_nameString);\r\n        address _agent = msg.sender;\r\n        require(msg.value >= 10000000000000000, \"insufficient amount\");\r\n        require(agentxName_[_name] == address(0), \"name registered\");\r\n\r\n        if(!player[_agent].isAgent){\r\n            agents += 1;\r\n            player[_agent].isAgent = true;\r\n            player[_agent].id = agents;\r\n            player[_agent].level = 1;\r\n            agentxID_[agents] = _agent;\r\n            emit UPGRADE(_agent,player[_agent].level);\r\n        }\r\n        // set name active for the player\r\n        player[_agent].name = _name;\r\n        agentxName_[_name] = _agent;\r\n        sendContract(hakka, msg.value);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade\r\n     * @notice Upgrade when a player's referral bonus meet the requirement\r\n     */\r\n    function upgrade()\r\n        external\r\n        isHuman()\r\n    {\r\n        address _agent = msg.sender;\r\n        require(player[_agent].isAgent);\r\n        require(player[_agent].level < maxLevel);\r\n\r\n        if(player[_agent].accumulatedRef >= requirement[player[_agent].level]) {\r\n            player[_agent].level = (1).add(player[_agent].level);\r\n            emit UPGRADE(_agent,player[_agent].level);\r\n        }\r\n    }\r\n\r\n    //using address for referral\r\n    function buy(address payable _agent, uint256 _date)\r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        // ticker\r\n        if(tick()){\r\n            sendHuman(msg.sender, msg.value);\r\n            return;\r\n        }\r\n\r\n        // validate agent\r\n        if(!player[_agent].isAgent){\r\n            _agent = address(0);\r\n        }\r\n\r\n        buyCore(msg.sender, msg.value, _date, _agent);\r\n    }\r\n\r\n    //using ID for referral\r\n    function buy(uint256 _agentId, uint256 _date)\r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        // ticker\r\n        if(tick()){\r\n            sendHuman(msg.sender, msg.value);\r\n            return;\r\n        }\r\n\r\n        //query agent\r\n        address payable _agent = address(uint160(agentxID_[_agentId]));\r\n\r\n        buyCore(msg.sender, msg.value, _date, _agent);\r\n    }\r\n\r\n    //using name for referral\r\n    function buy(bytes32 _agentName, uint256 _date)\r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        // ticker\r\n        if(tick()){\r\n            sendHuman(msg.sender, msg.value);\r\n            return;\r\n        }\r\n\r\n        //query agent\r\n        address payable _agent = address(uint160(agentxName_[_agentName]));\r\n\r\n        buyCore(msg.sender, msg.value, _date, _agent);\r\n    }\r\n\r\n    // contract wallets, sorry insurance only for human\r\n    function buy()\r\n        public\r\n        payable\r\n    {\r\n        // ticker\r\n        if(tick()) {\r\n            if(msg.sender == tx.origin)\r\n                sendHuman(msg.sender, msg.value);\r\n            else\r\n                sendContract(msg.sender, msg.value);\r\n            return;\r\n        }\r\n\r\n        buyCore(msg.sender, msg.value, 0, address(0));\r\n    }\r\n\r\n    // fallback\r\n    function () external payable {\r\n        buy();\r\n    }\r\n\r\n    /**\r\n     * @dev Core part of buying\r\n     */\r\n    function buyCore(address _buyer, uint256 _eth, uint256 _date, address payable _agent) internal {\r\n\r\n        updatePlayerUnit(_buyer);\r\n        \r\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\r\n        require(_eth <= 10000000000000000000000, \"no vitalik, no\");\r\n\r\n        if(_date > maxInsurePeriod){\r\n            _date = maxInsurePeriod;\r\n        }\r\n        uint256 _rate = rate[_date] + 1000000000000000000;\r\n        uint256 ethToBuyShare = _eth.mul(1000000000000000000) / _rate;\r\n        //-- ethToBuyShare is a virtual amount used to represent the eth player paid for buying shares\r\n        //which is usually different from _eth\r\n\r\n        // get value of shares and insurances can be bought\r\n        uint256 _share = underwriter.mintShare(ethOfShare, ethToBuyShare);\r\n        uint256 _unit = (_date == 0)? 0: _share;\r\n        uint256 newDate = today + _date - 1;\r\n\r\n\r\n        // update global data\r\n        ethOfShare = ethOfShare.add(ethToBuyShare);\r\n        shares = shares.add(_share);\r\n        unitToExpire[newDate] = unitToExpire[newDate].add(_unit);\r\n        issuedInsurance = issuedInsurance.add(_unit);\r\n\r\n        // update player data\r\n        player[_buyer].eth = player[_buyer].eth.add(_eth);\r\n        player[_buyer].shares = player[_buyer].shares.add(_share);\r\n        player[_buyer].units = player[_buyer].units.add(_unit);\r\n        unitToExpirePlayer[_buyer][newDate] = unitToExpirePlayer[_buyer][newDate].add(_unit);\r\n\r\n        distributeEx(_eth, _agent);\r\n        distributeIn(_buyer, _eth, _share);\r\n        emit BUYINSURANCE(_buyer, today, _unit, _date);\r\n        emit Transfer(address(0), _buyer, _share);\r\n    }\r\n\r\n    /**\r\n     * @dev Update player's units of insurance\r\n     */\r\n    function updatePlayerUnit(address _player) internal {\r\n        uint256 _today = player[_player].plyrLastSeen;\r\n        uint256 expiredUnit = 0;\r\n        if(_today != 0){\r\n            while(_today < today){\r\n                expiredUnit = expiredUnit.add(unitToExpirePlayer[_player][_today]);\r\n                unitToExpirePlayer[_player][_today] = 0;\r\n                _today += 1;\r\n            }\r\n            player[_player].units = player[_player].units.sub(expiredUnit);\r\n        }\r\n        player[_player].plyrLastSeen = today;\r\n    }\r\n\r\n    /**\r\n     * @dev pay external stakeholder\r\n     */\r\n    function distributeEx(uint256 _eth, address payable _agent) internal {\r\n        // 20% to external\r\n        uint256 ex = _eth / 5 ;\r\n\r\n        // 10% to IIP\r\n        uint256 _iip = _eth / 10;\r\n\r\n        if(player[_agent].isAgent){\r\n            uint256 refRate = player[_agent].level.add(6);\r\n            uint256 _ref = _eth.mul(refRate) / 100;\r\n            player[_agent].ref = player[_agent].ref.add(_ref);\r\n            player[_agent].accumulatedRef = player[_agent].accumulatedRef.add(_ref);\r\n            ex = ex.sub(_ref);\r\n        }\r\n\r\n        sendContract(IIP, _iip);\r\n        sendContract(hakka, ex);\r\n    }\r\n\r\n    /**\r\n     * @dev Distribute to internal\r\n     */\r\n    function distributeIn(address _buyer, uint256 _eth, uint256 _shares) internal {\r\n        // 15% to share holder\r\n        uint256 _div = _eth.mul(3) / 20;\r\n\r\n        // 55% to insurance pool\r\n        uint256 _pool = _eth.mul(55) / 100;\r\n\r\n        // distribute dividend share and collect dust\r\n        uint256 _dust = updateMasks(_buyer, _div, _shares);\r\n\r\n        // add eth to pool\r\n        pool = pool.add(_dust).add(_pool);\r\n\r\n        \r\n    }\r\n\r\n    function updateMasks(address  _player, uint256 _div, uint256 _shares)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        // calculate profit per share & global mask based on this buy: (dust goes to pool)\r\n        uint256 _ppt = _div.mul(1000000000000000000) / shares;\r\n        mask = mask.add(_ppt);\r\n\r\n        // calculate player earning from their own buy (only based on the shares\r\n        // they just bought). & update player earnings mask\r\n        uint256 _pearn = (_ppt.mul(_shares)) / 1000000000000000000;\r\n        player[_player].mask = (((mask.mul(_shares)) / 1000000000000000000).sub(_pearn)).add(player[_player].mask);\r\n\r\n        // calculate & return dust\r\n        return(_div.sub( _ppt.mul(shares) / 1000000000000000000));\r\n    }\r\n\r\n    /**\r\n     * @dev Submit a claim from a beneficiary\r\n     */\r\n    function claim()\r\n        isHuman()\r\n        public\r\n    {\r\n        require(tick(), \"not yet\"); // MakerDAO shutdown!\r\n        address payable beneficiary = msg.sender;\r\n        require(!player[beneficiary].claimed, \"already claimed\");\r\n        updatePlayerUnit(beneficiary);\r\n        uint256 amount = pool.mul(player[beneficiary].units) / issuedInsurance;\r\n        player[beneficiary].claimed = true;\r\n        sendHuman(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw dividends and ref\r\n     */\r\n    function withdraw()\r\n        public\r\n    {\r\n        // get player earnings\r\n        uint256 _eth;\r\n        _eth = withdrawEarnings(msg.sender);\r\n\r\n        // pay\r\n        if (_eth > 0) {\r\n            if(msg.sender == tx.origin)\r\n                sendHuman(msg.sender, _eth);\r\n            else\r\n                sendContract(msg.sender, _eth);\r\n        }\r\n    }\r\n\r\n    function withdrawEarnings(address _player)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        uint256 _div = calcUnMaskedEarnings(_player); //dividend\r\n        uint256 _ref = player[_player].ref; // referral \r\n        uint256 _earnings = _div.add(_ref);\r\n\r\n        if (_earnings > 0) {\r\n            player[_player].ref = 0;\r\n            player[_player].mask = _div.add(player[_player].mask);\r\n        }\r\n\r\n        return(_earnings);\r\n    }\r\n\r\n    function calcUnMaskedEarnings(address _player)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return (mask.mul(player[_player].shares) / 1000000000000000000).sub(player[_player].mask);\r\n    }\r\n\r\n    //******************\r\n    // GETTERS\r\n    //******************\r\n\r\n    /**\r\n     * @dev Return the price buyer will pay for next 1 individual share.\r\n     * @return Price for next share bought (in wei format)\r\n     */\r\n    function getBuyPrice() external view returns(uint256) {\r\n        return underwriter.burnShare(shares.add(1000000000000000000), 1000000000000000000);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the units of insurance of player\r\n     * @return Amount of existing units of insurance\r\n     */\r\n    function getCurrentUnit(address _player)\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _unit = player[_player].units;\r\n        uint256 _today = player[_player].plyrLastSeen;\r\n        uint256 expiredUnit = 0;\r\n        if(_today != 0) {\r\n            while(_today < today){\r\n                expiredUnit = expiredUnit.add(unitToExpirePlayer[_player][_today]);\r\n                _today += 1;\r\n            }\r\n\r\n        }\r\n        return _unit == 0 ? 0 : _unit.sub(expiredUnit);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the list of units of insurace going to expire of a player\r\n     * @return List of units of insurance going to expire from a player\r\n     */\r\n    function getExpiringUnitListPlayer(address _player)\r\n        external\r\n        view\r\n        returns(uint256[maxInsurePeriod] memory expiringUnitList)\r\n    {\r\n        for(uint256 i=0; i<maxInsurePeriod; i++) {\r\n            expiringUnitList[i] = unitToExpirePlayer[_player][today+i];\r\n        }\r\n        return expiringUnitList;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the list of units of insurace going to expire\r\n     * @return List of units of insurance going to expire\r\n     */\r\n    function getExpiringUnitList()\r\n        external\r\n        view\r\n        returns(uint256[maxInsurePeriod] memory expiringUnitList)\r\n    {\r\n        for(uint256 i=0; i<maxInsurePeriod; i++){\r\n            expiringUnitList[i] = unitToExpire[today+i];\r\n        }\r\n        return expiringUnitList;\r\n    }\r\n\r\n    //******************\r\n    // ERC20\r\n    //******************\r\n    string  public constant name     = \"Third Floor Mutual\";\r\n    string  public constant symbol   = \"3FM\";\r\n    uint8   public constant decimals = 18;\r\n\r\n    function totalSupply() external view returns(uint256) {\r\n        if(ended) return 0;\r\n        return shares;\r\n    }\r\n\r\n    function balanceOf(address who) external view returns(uint256) {\r\n        if(ended) return 0;\r\n        return player[who].shares;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    //******************\r\n    // send eth\r\n    //******************\r\n\r\n    function sendHuman(address to, uint256 amount) internal returns(bool success) {\r\n        address payable recipient = address(uint160(to));\r\n        (success, ) = recipient.call.value(amount)(\"\");\r\n    }\r\n\r\n    function sendContract(address to, uint256 amount) internal returns(bool success) {\r\n        address payable recipient = address(uint160(to));\r\n        (new SafeSend).value(amount)(recipient);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract VAT {\r\n    function live() external returns(uint256);\r\n}\r\n\r\ncontract SafeSend {\r\n    constructor(address payable to) public payable {\r\n        selfdestruct(to);\r\n    }\r\n}\r\n\r\ncontract Underwriter {\r\n    function mintShare(uint256 _curEth, uint256 _newEth) external pure returns (uint256);\r\n    function burnShare(uint256 _curShares, uint256 _sellShares) external pure returns (uint256);\r\n    function shares(uint256 _eth) public pure returns(uint256);\r\n    function eth(uint256 _shares) public pure returns(uint256);\r\n}\r\n\r\n\r\ncontract Agency {\r\n    function register(string memory _input) public pure returns(bytes32);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) return 0;\r\n        c = a * b;\r\n        require(c / a == b);\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = add(x >> 1, 1);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z), z)) / 2);\r\n        }\r\n    }\r\n\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    function pwr(uint256 x, uint256 y) internal pure returns(uint256 z) {\r\n        z = 1;\r\n        while(y != 0){\r\n            if(y % 2 == 1)\r\n                z = mul(z,x);\r\n            x = sq(x);\r\n            y = y / 2;\r\n        }\r\n        return z;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"BUYINSURANCE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"UPGRADE\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"_now\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentxID_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"agentxName_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_agentName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethOfShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getCurrentUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExpiringUnitList\",\"outputs\":[{\"internalType\":\"uint256[100]\",\"name\":\"expiringUnitList\",\"type\":\"uint256[100]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getExpiringUnitListPlayer\",\"outputs\":[{\"internalType\":\"uint256[100]\",\"name\":\"expiringUnitList\",\"type\":\"uint256[100]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedInsurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"player\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"ref\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAgent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plyrLastSeen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRef\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitToExpire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitToExpirePlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ThreeFMutual","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://78f7dc0663f1419e97d7fc0c07346c894c816feeb9b5dae00925b35d680d5424"}]}