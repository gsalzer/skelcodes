{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: DeFiat 2020\r\n\r\n/*\r\n* Copyright (c) 2020 DeFiat.net\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n//DeFiat Governance v0.1 - 2020 AUG 27\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract DeFiat_Gov{\r\n//Governance contract for DeFiat Token.\r\n    address public mastermind;\r\n    mapping (address => uint256) private actorLevel; //governance = multi-tier level\r\n    \r\n    mapping (address => uint256) private override _balances; \r\n     mapping (address => uint256) private override _allowances; \r\n     \r\n    uint256 private burnRate; // %rate of burn at each transaction\r\n    uint256 private feeRate;  // %rate of fee taken at each transaction\r\n    address private feeDestination; //target address for fees (to support staking contracts)\r\n\r\n    event stdEvent(address _txOrigin, uint256 _number, bytes32 _signature, string _desc);\r\n\r\n//== CONSTRUCTOR\r\nconstructor() public {\r\n    mastermind = msg.sender;\r\n    actorLevel[mastermind] = 3;\r\n    feeDestination = mastermind;\r\n    emit stdEvent(msg.sender, 3, sha256(abi.encodePacked(mastermind)), \"constructor\");\r\n}\r\n\r\n//== MODIFIERS ==\r\n    modifier onlyMastermind {\r\n    require(msg.sender == mastermind, \" only Mastermind\");\r\n    _;\r\n    }\r\n    modifier onlyGovernor {\r\n    require(actorLevel[msg.sender] >= 2,\"only Governors\");\r\n    _;\r\n    }\r\n    modifier onlyPartner {\r\n    require(actorLevel[msg.sender] >= 1,\"only Partners\");\r\n    _;\r\n    }  //future use\r\n    \r\n//== VIEW ==    \r\n    function viewActorLevelOf(address _address) public view returns (uint256) {\r\n        return actorLevel[_address]; //address lvl (3, 2, 1 or 0)\r\n    }  \r\n    function viewBurnRate() public view returns (uint256)  {\r\n        return burnRate;\r\n    }\r\n    function viewFeeRate() public view returns (uint256)  {\r\n        return feeRate;\r\n    }\r\n    function viewFeeDestination() public view returns (address)  {\r\n        return feeDestination;\r\n    }\r\n    \r\n//== SET INTERNAL VARIABLES==\r\n\r\n    function setActorLevel(address _address, uint256 _newLevel) public {\r\n      require(_newLevel < actorLevel[msg.sender], \"Can only give rights below you\");\r\n      actorLevel[_address] = _newLevel; //updates level -> adds or removes rights\r\n      emit stdEvent(_address, _newLevel, sha256(abi.encodePacked(msg.sender, _newLevel)), \"Level changed\");\r\n    }\r\n    \r\n    //MasterMind specific \r\n    function removeAllRights(address _address) public onlyMastermind {\r\n      require(_address != mastermind);\r\n      actorLevel[_address] = 0; //removes all rights\r\n      emit stdEvent(address(_address), 0, sha256(abi.encodePacked(_address)), \"Rights Revoked\");\r\n    }\r\n    function killContract() public onlyMastermind {\r\n        selfdestruct(msg.sender); //destroys the contract if replacement needed\r\n    } //only Mastermind can kill contract\r\n    function setMastermind(address _mastermind) public onlyMastermind {\r\n      mastermind = _mastermind;     //Only one mastermind\r\n      actorLevel[_mastermind] = 3; \r\n      actorLevel[msg.sender] = 2;  //new level for previous mastermind\r\n      emit stdEvent(tx.origin, 0, sha256(abi.encodePacked(_mastermind, mastermind)), \"MasterMind Changed\");\r\n    }     //only Mastermind can transfer his own rights\r\n     \r\n    //Governors specific\r\n    function changeBurnRate(uint _burnRate) public onlyGovernor {\r\n      require(_burnRate <=200, \"20% limit\"); //cannot burn more than 20%/tx\r\n      burnRate = _burnRate; \r\n      emit stdEvent(address(msg.sender), _burnRate, sha256(abi.encodePacked(msg.sender, _burnRate)), \"BurnRate Changed\");\r\n    }     //only governors can change burnRate/tx\r\n    function changeFeeRate(uint _feeRate) public onlyGovernor {\r\n      require(_feeRate <=200, \"20% limit\"); //cannot take more than 20% fees/tx\r\n      feeRate = _feeRate;\r\n      emit stdEvent(address(msg.sender), _feeRate, sha256(abi.encodePacked(msg.sender, _feeRate)), \"FeeRate Changed\");\r\n    }    //only governors can change feeRate/tx\r\n    function setFeeDestination(address _nextDest) public onlyGovernor {\r\n         feeDestination = _nextDest;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_txOrigin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_signature\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"stdEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"}],\"name\":\"changeBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"changeFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mastermind\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAllRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newLevel\",\"type\":\"uint256\"}],\"name\":\"setActorLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextDest\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mastermind\",\"type\":\"address\"}],\"name\":\"setMastermind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewActorLevelOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DeFiat_Gov","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://da9bc702a7b640db648b4782aa07d8ccc2178f928e7b6b44b7ddf9428ffda0c1"}]}