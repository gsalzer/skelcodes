{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface ERC20\r\n{\r\n\tfunction name() external view returns (string memory _name);\r\n\tfunction symbol() external view returns (string memory _symbol);\r\n\tfunction decimals() external view returns (uint8 _decimals);\r\n\r\n\tfunction totalSupply() external view returns (uint256 _totalSupply);\r\n\tfunction balanceOf(address _owner) external view returns (uint256 _balance);\r\n\tfunction transfer(address _to, uint256 _value) external returns (bool _success);\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool _success);\r\n\tfunction approve(address _spender, uint256 _value) external returns (bool _success);\r\n\tfunction allowance(address _owner, address _spender) external view returns (uint256 _remaining);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ninterface Exchange is ERC20\r\n{\r\n\tfunction tokenAddress() external view returns (address _token);\r\n\tfunction factoryAddress() external view returns (address _factory);\r\n\tfunction addLiquidity(uint256 _minLiquidity, uint256 _maxTokens, uint256 _deadline) external payable returns (uint256 _mintedLiquidity);\r\n\tfunction removeLiquidity(uint256 _amount, uint256 _minEth, uint256 _minTokens, uint256 _deadline) external returns (uint256 _ethRemoved, uint256 _tokensRemoved);\r\n\tfunction getEthToTokenInputPrice(uint256 _ethSold) external view returns (uint256 _tokensBought);\r\n\tfunction getEthToTokenOutputPrice(uint256 _tokensBought) external view returns (uint256 _ethSold);\r\n\tfunction getTokenToEthInputPrice(uint256 _tokensSold) external view returns (uint256 _ethBought);\r\n\tfunction getTokenToEthOutputPrice(uint256 _ethBought) external view returns (uint256 _tokensSold);\r\n\tfunction ethToTokenSwapInput(uint256 _minTokens, uint256 _deadline) external payable returns (uint256 _tokensBought);\r\n\tfunction ethToTokenTransferInput(uint256 _minTokens, uint256 _deadline, address _recipient) external payable returns (uint256 _tokensBought);\r\n\tfunction ethToTokenSwapOutput(uint256 _tokensBought, uint256 _deadline) external payable returns (uint256 _ethSold);\r\n\tfunction ethToTokenTransferOutput(uint256 _tokensBought, uint256 _deadline, address _recipient) external payable returns (uint256 _ethSold);\r\n\tfunction tokenToEthSwapInput(uint256 _tokensSold, uint256 _minEth, uint256 _deadline) external returns (uint256 _ethBought);\r\n\tfunction tokenToEthTransferInput(uint256 _tokensSold, uint256 _minEth, uint256 _deadline, address _recipient) external returns (uint256 _ethBought);\r\n\tfunction tokenToEthSwapOutput(uint256 _ethBought, uint256 _maxTokens, uint256 _deadline) external returns (uint256 _tokensSold);\r\n\tfunction tokenToEthTransferOutput(uint256 _ethBought, uint256 _maxTokens, uint256 _deadline, address _recipient) external returns (uint256 _tokensSold);\r\n\tfunction tokenToTokenSwapInput(uint256 _tokensSold, uint256 _minTokensBought, uint256 _minEthBought, uint256 _deadline, address _tokenAddr) external returns (uint256 _tokensBought);\r\n\tfunction tokenToTokenTransferInput(uint256 _tokensSold, uint256 _minTokensBought, uint256 _minEthBought, uint256 _deadline, address _recipient, address _tokenAddr) external returns (uint256 _tokensBought);\r\n\tfunction tokenToTokenSwapOutput(uint256 _tokensBought, uint256 _maxTokensSold, uint256 _maxEthSold, uint256 _deadline, address _tokenAddr) external returns (uint256 _tokensSold);\r\n\tfunction tokenToTokenTransferOutput(uint256 _tokensBought, uint256 _maxTokensSold, uint256 _maxEthSold, uint256 _deadline, address _recipient, address _tokenAddr) external returns (uint256 _tokensSold);\r\n\tfunction tokenToExchangeSwapInput(uint256 _tokensSold, uint256 _minTokensBought, uint256 _minEthBought, uint256 _deadline, address _exchangeAddr) external returns (uint256 _tokensBought);\r\n\tfunction tokenToExchangeTransferInput(uint256 _tokensSold, uint256 _minTokensBought, uint256 _minEthBought, uint256 _deadline, address _recipient, address _exchangeAddr) external returns (uint256 _tokensBought);\r\n\tfunction tokenToExchangeSwapOutput(uint256 _tokensBought, uint256 _maxTokensSold, uint256 _maxEthSold, uint256 _deadline, address _exchangeAddr) external returns (uint256 _tokensSold);\r\n\tfunction tokenToExchangeTransferOutput(uint256 _tokensBought, uint256 _maxTokensSold, uint256 _maxEthSold, uint256 _deadline, address _recipient, address _exchangeAddr) external returns (uint256 _tokensSold);\r\n\r\n\tevent TokenPurchase(address indexed _buyer, uint256 indexed _ethSold, uint256 indexed _tokensBought);\r\n\tevent EthPurchase(address indexed _buyer, uint256 indexed _tokensSold, uint256 indexed _ethBought);\r\n\tevent AddLiquidity(address indexed _provider, uint256 indexed _ethAmount, uint256 indexed _tokenAmount);\r\n\tevent RemoveLiquidity(address indexed _provider, uint256 indexed _ethAmount, uint256 indexed _tokenAmount);\r\n}\r\n\r\ninterface WrappedEther is ERC20\r\n{\r\n\treceive() external payable;\r\n\tfunction deposit() external payable;\r\n\tfunction withdraw(uint256 _amount) external;\r\n\r\n\tevent  Deposit(address indexed _address, uint256 _amount);\r\n\tevent  Withdrawal(address indexed _address, uint256 _amount);\r\n}\r\n\r\ninterface PoolToken is ERC20\r\n{\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32 _DOMAIN_SEPARATOR);\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32 _PERMIT_TYPEHASH);\r\n\tfunction nonces(address _owner) external view returns (uint256 _nonces);\r\n\tfunction permit(address _owner, address _spender, uint256 _value, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) external;\r\n}\r\n\r\ninterface Pair is PoolToken\r\n{\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256 _MINIMUM_LIQUIDITY);\r\n\tfunction factory() external view returns (address _factory);\r\n\tfunction token0() external view returns (address _token0);\r\n\tfunction token1() external view returns (address _token1);\r\n\tfunction price0CumulativeLast() external view returns (uint256 _price0CumulativeLast);\r\n\tfunction price1CumulativeLast() external view returns (uint256 _price1CumulativeLast);\r\n\tfunction kLast() external view returns (uint256 _kLast);\r\n\tfunction getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n\tfunction mint(address _to) external returns (uint256 _liquidity);\r\n\tfunction burn(address _to) external returns (uint256 _amount0, uint256 _amount1);\r\n\tfunction swap(uint256 _amount0Out, uint256 _amount1Out, address _to, bytes calldata _data) external;\r\n\tfunction skim(address _to) external;\r\n\tfunction sync() external;\r\n\r\n\tevent Mint(address indexed _sender, uint256 _amount0, uint256 _amount1);\r\n\tevent Burn(address indexed _sender, uint256 _amount0, uint256 _amount1, address indexed _to);\r\n\tevent Swap(address indexed _sender, uint256 _amount0In, uint256 _amount1In, uint256 _amount0Out, uint256 _amount1Out, address indexed _to);\r\n\tevent Sync(uint112 _reserve0, uint112 _reserve1);\r\n}\r\n\r\ninterface Router01\r\n{\r\n\tfunction factory() external pure returns (address _factory);\r\n\tfunction WETH() external pure returns (address _token);\r\n\tfunction addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);\r\n\tfunction addLiquidityETH(address _token, uint256 _amountTokenDesired, uint256 _amountTokenMin, uint256 _amountETHMin, address _to, uint256 _deadline) external payable returns (uint256 _amountToken, uint256 _amountETH, uint256 _liquidity);\r\n\tfunction removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);\r\n\tfunction removeLiquidityETH(address token, uint256 _liquidity, uint256 _amountTokenMin, uint256 _amountETHMin, address _to, uint256 _deadline) external returns (uint256 _amountToken, uint256 _amountETH);\r\n\tfunction removeLiquidityWithPermit(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline, bool _approveMax, uint8 _v, bytes32 _r, bytes32 _s) external returns (uint256 _amountA, uint256 _amountB);\r\n\tfunction removeLiquidityETHWithPermit(address _token, uint256 _liquidity, uint256 _amountTokenMin, uint256 _amountETHMin, address _to, uint256 _deadline, bool _approveMax, uint8 _v, bytes32 _r, bytes32 _s) external returns (uint256 _amountToken, uint256 _amountETH);\r\n\tfunction swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\r\n\tfunction swapTokensForExactTokens(uint256 _amountOut, uint256 _amountInMax, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\r\n\tfunction swapExactETHForTokens(uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);\r\n\tfunction swapTokensForExactETH(uint256 _amountOut, uint256 _amountInMax, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\r\n\tfunction swapExactTokensForETH(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\r\n\tfunction swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);\r\n\tfunction quote(uint256 _amountA, uint256 _reserveA, uint256 _reserveB) external pure returns (uint256 _amountB);\r\n\tfunction getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);\r\n\tfunction getAmountIn(uint256 _amountOut, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountIn);\r\n\tfunction getAmountsOut(uint256 _amountIn, address[] calldata _path) external view returns (uint[] memory _amounts);\r\n\tfunction getAmountsIn(uint256 _amountOut, address[] calldata _path) external view returns (uint[] memory _amounts);\r\n}\r\n\r\ninterface Router02 is Router01\r\n{\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(address _token, uint256 _liquidity, uint256 _amountTokenMin, uint256 _amountETHMin, address _to, uint256 _deadline) external returns (uint256 _amountETH);\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address _token, uint256 _liquidity, uint256 _amountTokenMin, uint256 _amountETHMin, address _to, uint256 _deadline, bool _approveMax, uint8 _v, bytes32 _r, bytes32 _s) external returns (uint _amountETH);\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external;\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external payable;\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external;\r\n}\r\n\r\ncontract Arbitrage2\r\n{\r\n\tWrappedEther constant WETH = WrappedEther(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n\treceive() external payable { }\r\n\tfallback() external payable { }\r\n\r\n\tfunction uniswapV2Call(address payable _swapper, uint256 _amount0, uint256 _amount1, bytes calldata _data) external\r\n\t{\r\n\t\tPair _uniswapV2 = Pair(msg.sender);\r\n\t\tuint256 _sellPrice = _amount0 + _amount1;\r\n\t\t(Exchange _uniswapV1, uint256 _size) = abi.decode(_data, (Exchange, uint256));\r\n\t\tERC20 token = ERC20(_uniswapV1.tokenAddress());\r\n\r\n\t\tWETH.withdraw(_sellPrice);\r\n\r\n\t\tuint _buyPrice = _uniswapV1.ethToTokenSwapOutput{ value: _sellPrice }(_size, uint256(-1));\r\n\r\n\t\trequire(token.transfer(address(_uniswapV2), _size));\r\n\r\n\t\tuint256 _profit = _sellPrice - _buyPrice;\r\n\t\t_swapper.transfer(_profit);\r\n\t}\r\n}","ABI":"[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Arbitrage2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aa27b756c6cd0e400ae54b5c5c2fe171eb63261d399432044cbd41431613f8ff"}]}