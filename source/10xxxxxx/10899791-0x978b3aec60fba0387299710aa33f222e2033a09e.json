{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/flamincome/Controller.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface Controller {\r\n    function strategist() external view returns (address);\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n    function balanceOf(address) external view returns (uint);\r\n    function withdraw(address, uint) external;\r\n    function earn(address, uint) external;\r\n}\r\n\r\n// File: contracts/interfaces/flamincome/Vault.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface Vault {\r\n    function token() external view returns (address);\r\n    function priceE18() external view returns (uint);\r\n    function deposit(uint) external;\r\n    function withdraw(uint) external;\r\n    function depositAll() external;\r\n    function withdrawAll() external;\r\n}\r\n\r\n// File: contracts/interfaces/external/MakerDAO.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IGemLike {\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IManagerLike {\r\n    function cdpCan(address, uint, address) external view returns (uint);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n    function open(bytes32, address) external returns (uint);\r\n    function give(uint, address) external;\r\n    function cdpAllow(uint, address, uint) external;\r\n    function urnAllow(address, uint) external;\r\n    function frob(uint, int, int) external;\r\n    function flux(uint, address, uint) external;\r\n    function move(uint, address, uint) external;\r\n    function exit(address, uint, address, uint) external;\r\n    function quit(uint, address) external;\r\n    function enter(address, uint) external;\r\n    function shift(uint, uint) external;\r\n}\r\n\r\ninterface IVatLike {\r\n    function can(address, address) external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function frob(bytes32, address, address, address, int, int) external;\r\n    function hope(address) external;\r\n    function move(address, address, uint) external;\r\n}\r\n\r\ninterface IGemJoinLike {\r\n    function dec() external returns (uint);\r\n    function gem() external returns (IGemLike);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface IGNTJoinLike {\r\n    function bags(address) external view returns (address);\r\n    function make(address) external returns (address);\r\n}\r\n\r\ninterface IDaiJoinLike {\r\n    function vat() external returns (IVatLike);\r\n    function dai() external returns (IGemLike);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\ninterface IHopeLike {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n}\r\n\r\ninterface IEndLike {\r\n    function fix(bytes32) external view returns (uint);\r\n    function cash(bytes32, uint) external;\r\n    function free(bytes32) external;\r\n    function pack(uint) external;\r\n    function skim(bytes32, address) external;\r\n}\r\n\r\ninterface IJugLike {\r\n    function drip(bytes32) external returns (uint);\r\n}\r\n\r\ninterface IPotLike {\r\n    function pie(address) external view returns (uint);\r\n    function drip() external returns (uint);\r\n    function join(uint) external;\r\n    function exit(uint) external;\r\n}\r\n\r\ninterface ISpotLike {\r\n    function ilks(bytes32) external view returns (address, uint);\r\n}\r\n\r\ninterface IOSMedianizer {\r\n    function read() external view returns (uint, bool);\r\n    function foresight() external view returns (uint, bool);\r\n}\r\n\r\ninterface IMedianizer {\r\n    function read() external view returns (bytes32);\r\n    function peek() external view returns (bytes32, bool);\r\n    function poke() external;\r\n    function compute() external view returns (bytes32, bool);\r\n}\r\n\r\n// File: contracts/interfaces/external/Uniswap.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IUniV2 {\r\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\r\n}\r\n\r\ninterface UniSwapV1 {\r\n    function tokenAddress() external view returns (address token);\r\n    function factoryAddress() external view returns (address factory);\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/implementations/strategy/Strategy_YFI_wETH.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Strategy_YFI_wETH {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address constant public token = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant public want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    address public cdp_manager = address(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\r\n    address public vat = address(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);\r\n    address public mcd_join_eth_a = address(0x2F0b23f53734252Bda2277357e97e1517d6B042A);\r\n    address public mcd_join_dai = address(0x9759A6Ac90977b93B58547b4A71c78317f391A28);\r\n    address public mcd_spot = address(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);\r\n    address public jug = address(0x19c0976f590D67707E62397C87829d896Dc0f1F1);\r\n\r\n    address public eth_price_oracle = address(0x66d828CF5f39Db5Ab6B30BE8234918f84e008FDf);\r\n    address constant public fDAI = address(0x163D457fA8247f1A9279B9fa8eF513de116e4327);\r\n\r\n    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    uint public c = 20000;\r\n    uint public c_safe = 30000;\r\n    uint constant public c_base = 10000;\r\n\r\n    uint public performanceFee = 500;\r\n    uint constant public performanceMax = 10000;\r\n\r\n    uint public withdrawalFee = 50;\r\n    uint constant public withdrawalMax = 10000;\r\n\r\n    uint public strategistReward = 5000;\r\n    uint constant public strategistRewardMax = 10000;\r\n\r\n    bytes32 constant public ilk = \"ETH-A\";\r\n\r\n    address public governance;\r\n    address public controller;\r\n    address public strategist;\r\n    address public harvester;\r\n\r\n    uint public cdpId;\r\n\r\n    constructor(address _controller) public {\r\n        governance = msg.sender;\r\n        strategist = msg.sender;\r\n        harvester = msg.sender;\r\n        controller = _controller;\r\n        cdpId = IManagerLike(cdp_manager).open(ilk, address(this));\r\n        _approveAll();\r\n    }\r\n\r\n    function getName() external pure returns (string memory) {\r\n        return \"StrategyMKRVaultDAIDelegate\";\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setHarvester(address _harvester) external {\r\n        require(msg.sender == harvester || msg.sender == governance, \"!allowed\");\r\n        harvester = _harvester;\r\n    }\r\n\r\n    function setWithdrawalFee(uint _withdrawalFee) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function setPerformanceFee(uint _performanceFee) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    function setStrategistReward(uint _strategistReward) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategistReward = _strategistReward;\r\n    }\r\n\r\n    function setBorrowCollateralizationRatio(uint _c) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        c = _c;\r\n    }\r\n\r\n    function setWithdrawCollateralizationRatio(uint _c_safe) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        c_safe = _c_safe;\r\n    }\r\n\r\n    function setOracle(address _oracle) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        eth_price_oracle = _oracle;\r\n    }\r\n\r\n    // optional\r\n    function setMCDValue(\r\n        address _manager,\r\n        address _ethAdapter,\r\n        address _daiAdapter,\r\n        address _spot,\r\n        address _jug\r\n    ) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        cdp_manager = _manager;\r\n        vat = IManagerLike(_manager).vat();\r\n        mcd_join_eth_a = _ethAdapter;\r\n        mcd_join_dai = _daiAdapter;\r\n        mcd_spot = _spot;\r\n        jug = _jug;\r\n    }\r\n\r\n    function _approveAll() internal {\r\n        IERC20(token).approve(mcd_join_eth_a, uint(-1));\r\n        IERC20(dai).approve(mcd_join_dai, uint(-1));\r\n        IERC20(dai).approve(fDAI, uint(-1));\r\n        IERC20(dai).approve(unirouter, uint(-1));\r\n    }\r\n\r\n    function deposit() public {\r\n        uint _token = IERC20(token).balanceOf(address(this));\r\n        if (_token > 0) {\r\n            uint p = _getPrice();\r\n            uint _draw = _token.mul(p).mul(c_base).div(c).div(1e18);\r\n            // approve adapter to use token amount\r\n            require(_checkDebtCeiling(_draw), \"debt ceiling is reached!\");\r\n            _lockWETHAndDrawDAI(_token, _draw);\r\n        }\r\n        // approve fDAI use DAI\r\n        Vault(fDAI).depositAll();\r\n    }\r\n\r\n    function _getPrice() internal view returns (uint p) {\r\n        (uint _read,) = IOSMedianizer(eth_price_oracle).read();\r\n        (uint _foresight,) = IOSMedianizer(eth_price_oracle).foresight();\r\n        p = _foresight < _read ? _foresight : _read;\r\n    }\r\n\r\n    function _checkDebtCeiling(uint _amt) internal view returns (bool) {\r\n        (,,,uint _line,) = IVatLike(vat).ilks(ilk);\r\n        uint _debt = getTotalDebtAmount().add(_amt);\r\n        if (_line.div(1e27) < _debt) { return false; }\r\n        return true;\r\n    }\r\n\r\n    function _lockWETHAndDrawDAI(uint wad, uint wadD) internal {\r\n        address urn = IManagerLike(cdp_manager).urns(cdpId);\r\n\r\n        // IGemJoinLike(mcd_join_eth_a).gem().approve(mcd_join_eth_a, wad);\r\n        IGemJoinLike(mcd_join_eth_a).join(urn, wad);\r\n        IManagerLike(cdp_manager).frob(cdpId, toInt(wad), _getDrawDart(urn, wadD));\r\n        IManagerLike(cdp_manager).move(cdpId, address(this), wadD.mul(1e27));\r\n        if (IVatLike(vat).can(address(this), address(mcd_join_dai)) == 0) {\r\n            IVatLike(vat).hope(mcd_join_dai);\r\n        }\r\n        IDaiJoinLike(mcd_join_dai).exit(address(this), wadD);\r\n    }\r\n\r\n    function _getDrawDart(address urn, uint wad) internal returns (int dart) {\r\n        uint rate = IJugLike(jug).drip(ilk);\r\n        uint _dai = IVatLike(vat).dai(urn);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        if (_dai < wad.mul(1e27)) {\r\n            dart = toInt(wad.mul(1e27).sub(_dai).div(rate));\r\n            dart = uint(dart).mul(rate) < wad.mul(1e27) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        require(dai != address(_asset), \"dai\");\r\n        require(fDAI != address(_asset), \"ydai\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\r\n        uint _fee = _amount.mul(withdrawalFee).div(withdrawalMax);\r\n\r\n        IERC20(want).safeTransfer(Controller(controller).rewards(), _fee);\r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        IERC20(want).safeTransfer(_vault, _amount.sub(_fee));\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal returns (uint) {\r\n        if (getTotalDebtAmount() != 0 && \r\n            getmVaultRatio(_amount) < c_safe.mul(1e2)) {\r\n            uint p = _getPrice();\r\n            _wipe(_withdrawDaiLeast(_amount.mul(p).div(1e18)));\r\n        }\r\n        \r\n        _freeWETH(_amount);\r\n        \r\n        return _amount;\r\n    }\r\n\r\n    function _freeWETH(uint wad) internal {\r\n        IManagerLike(cdp_manager).frob(cdpId, -toInt(wad), 0);\r\n        IManagerLike(cdp_manager).flux(cdpId, address(this), wad);\r\n        IGemJoinLike(mcd_join_eth_a).exit(address(this), wad);\r\n    }\r\n\r\n    function _wipe(uint wad) internal {\r\n        // wad in DAI\r\n        address urn = IManagerLike(cdp_manager).urns(cdpId);\r\n\r\n        IDaiJoinLike(mcd_join_dai).join(urn, wad);\r\n        IManagerLike(cdp_manager).frob(cdpId, 0, _getWipeDart(IVatLike(vat).dai(urn), urn));\r\n    }\r\n\r\n    function _getWipeDart(\r\n        uint _dai,\r\n        address urn\r\n    ) internal view returns (int dart) {\r\n        (, uint rate,,,) = IVatLike(vat).ilks(ilk);\r\n        (, uint art) = IVatLike(vat).urns(ilk, urn);\r\n\r\n        dart = toInt(_dai / rate);\r\n        dart = uint(dart) <= art ? - dart : - toInt(art);\r\n    }\r\n\r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n\r\n        _swap(IERC20(dai).balanceOf(address(this)));\r\n        balance = IERC20(want).balanceOf(address(this));\r\n\r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        Vault(fDAI).withdrawAll(); // get Dai\r\n        _wipe(getTotalDebtAmount().add(1)); // in case of edge case\r\n        _freeWETH(balanceOfmVault());\r\n    }\r\n\r\n    function balanceOf() public view returns (uint) {\r\n        return balanceOfWant()\r\n               .add(balanceOfmVault());\r\n    }\r\n\r\n    function balanceOfWant() public view returns (uint) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfmVault() public view returns (uint) {\r\n        uint ink;\r\n        address urnHandler = IManagerLike(cdp_manager).urns(cdpId);\r\n        (ink,) = IVatLike(vat).urns(ilk, urnHandler);\r\n        return ink;\r\n    }\r\n\r\n    function harvest() public {\r\n        require(msg.sender == strategist || msg.sender == harvester || msg.sender == governance, \"!authorized\");\r\n        \r\n        uint v = getUnderlyingDai();\r\n        uint d = getTotalDebtAmount();\r\n        require(v > d, \"profit is not realized yet!\");\r\n        uint profit = v.sub(d);\r\n\r\n        \r\n        uint _before = IERC20(want).balanceOf(address(this));\r\n        _swap(_withdrawDaiMost(profit));\r\n        uint _after = IERC20(want).balanceOf(address(this));\r\n\r\n        uint _want = _after.sub(_before);\r\n        if (_want > 0) {\r\n            uint _fee = _want.mul(performanceFee).div(performanceMax);\r\n            uint _strategistReward = _fee.mul(strategistReward).div(strategistRewardMax);\r\n            IERC20(want).safeTransfer(strategist, _strategistReward);\r\n            IERC20(want).safeTransfer(Controller(controller).rewards(), _fee.sub(_strategistReward));\r\n        }\r\n\r\n        deposit();\r\n    }\r\n    \r\n    function shouldDraw() external view returns (bool) {\r\n        uint _safe = c.mul(1e2);\r\n        uint _current = getmVaultRatio(0);\r\n        if (_current > c_base.mul(c_safe).mul(1e2)) {\r\n            _current = c_base.mul(c_safe).mul(1e2);\r\n        }\r\n        return (_current > _safe);\r\n    }\r\n    \r\n    function drawAmount() public view returns (uint) {\r\n        uint _safe = c.mul(1e2);\r\n        uint _current = getmVaultRatio(0);\r\n        if (_current > c_base.mul(c_safe).mul(1e2)) {\r\n            _current = c_base.mul(c_safe).mul(1e2);\r\n        }\r\n        if (_current > _safe) {\r\n            uint _eth = balanceOfmVault();\r\n            uint _diff = _current.sub(_safe);\r\n            uint _draw = _eth.mul(_diff).div(_safe).mul(c_base).mul(1e2).div(_current);\r\n            return _draw.mul(_getPrice()).div(1e18);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function draw() external {\r\n        uint _drawD = drawAmount();\r\n        if (_drawD > 0) {\r\n            _lockWETHAndDrawDAI(0, _drawD);\r\n            Vault(fDAI).depositAll();\r\n        }\r\n    }\r\n    \r\n    function shouldRepay() external view returns (bool) {\r\n        uint _safe = c.mul(1e2);\r\n        uint _current = getmVaultRatio(0);\r\n        _current = _current.mul(105).div(100); // 5% buffer to avoid deposit/rebalance loops\r\n        return (_current < _safe);\r\n    }\r\n    \r\n    function repayAmount() public view returns (uint) {\r\n        uint _safe = c.mul(1e2);\r\n        uint _current = getmVaultRatio(0);\r\n        _current = _current.mul(105).div(100); // 5% buffer to avoid deposit/rebalance loops\r\n        if (_current < _safe) {\r\n            uint d = getTotalDebtAmount();\r\n            uint diff = _safe.sub(_current);\r\n            return d.mul(diff).div(_safe);\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function repay() external {\r\n        uint free = repayAmount();\r\n        if (free > 0) {\r\n            _wipe(_withdrawDaiLeast(free));\r\n        }\r\n    }\r\n    \r\n    function forceRebalance(uint _amount) external {\r\n        require(msg.sender == governance || msg.sender == strategist || msg.sender == harvester, \"!authorized\");\r\n        _wipe(_withdrawDaiLeast(_amount));\r\n    }\r\n\r\n    function getTotalDebtAmount() public view returns (uint) {\r\n        uint art;\r\n        uint rate;\r\n        address urnHandler = IManagerLike(cdp_manager).urns(cdpId);\r\n        (,art) = IVatLike(vat).urns(ilk, urnHandler);\r\n        (,rate,,,) = IVatLike(vat).ilks(ilk);\r\n        return art.mul(rate).div(1e27);\r\n    }\r\n\r\n    function getmVaultRatio(uint amount) public view returns (uint) {\r\n        uint spot; // ray\r\n        uint liquidationRatio; // ray\r\n        uint denominator = getTotalDebtAmount();\r\n\r\n        if (denominator == 0) {\r\n            return uint(-1);\r\n        }\r\n\r\n        (,,spot,,) = IVatLike(vat).ilks(ilk);\r\n        (,liquidationRatio) = ISpotLike(mcd_spot).ilks(ilk);\r\n        uint delayedCPrice = spot.mul(liquidationRatio).div(1e27); // ray\r\n\r\n        uint _balance = balanceOfmVault();\r\n        if (_balance < amount) {\r\n            _balance = 0;\r\n        } else {\r\n            _balance = _balance.sub(amount);\r\n        }\r\n\r\n        uint numerator = _balance.mul(delayedCPrice).div(1e18); // ray\r\n        return numerator.div(denominator).div(1e3);\r\n    }\r\n\r\n    function getUnderlyingDai() public view returns (uint) {\r\n        return IERC20(fDAI).balanceOf(address(this))\r\n                .mul(Vault(fDAI).priceE18())\r\n                .div(1e18);\r\n    }\r\n\r\n    function _withdrawDaiMost(uint _amount) internal returns (uint) {\r\n        uint _shares = _amount\r\n                        .mul(1e18)\r\n                        .div(Vault(fDAI).priceE18());\r\n        \r\n        if (_shares > IERC20(fDAI).balanceOf(address(this))) {\r\n            _shares = IERC20(fDAI).balanceOf(address(this));\r\n        }\r\n\r\n        uint _before = IERC20(dai).balanceOf(address(this));\r\n        Vault(fDAI).withdraw(_shares);\r\n        uint _after = IERC20(dai).balanceOf(address(this));\r\n        return _after.sub(_before);\r\n    }\r\n\r\n    function _withdrawDaiLeast(uint _amount) internal returns (uint) {\r\n        uint _shares = _amount\r\n                        .mul(1e18)\r\n                        .div(Vault(fDAI).priceE18())\r\n                        .mul(withdrawalMax)\r\n                        .div(withdrawalMax.sub(withdrawalFee));\r\n\r\n        if (_shares > IERC20(fDAI).balanceOf(address(this))) {\r\n            _shares = IERC20(fDAI).balanceOf(address(this));\r\n        }\r\n\r\n        uint _before = IERC20(dai).balanceOf(address(this));\r\n        Vault(fDAI).withdraw(_shares);\r\n        uint _after = IERC20(dai).balanceOf(address(this));\r\n        return _after.sub(_before);\r\n    }\r\n\r\n    function _swap(uint _amountIn) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(dai);\r\n        path[1] = address(want);\r\n\r\n        // approve unirouter to use dai\r\n        IUniV2(unirouter).swapExactTokensForTokens(_amountIn, 0, path, address(this), now.add(1 days));\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n}\r\n\r\n// File: contracts/instances/Strategy_YFI_wETHInstrance.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\ncontract Strategy_YFI_wETHInstrance is Strategy_YFI_wETH {\r\n    constructor()\r\n        public\r\n        Strategy_YFI_wETH(address(0xDc03b4900Eff97d997f4B828ae0a45cd48C3b22d))\r\n    {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfmVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c_base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c_safe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdp_manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth_price_oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"forceRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getmVaultRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcd_join_dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcd_join_eth_a\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcd_spot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"}],\"name\":\"setBorrowCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"setHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jug\",\"type\":\"address\"}],\"name\":\"setMCDValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strategistReward\",\"type\":\"uint256\"}],\"name\":\"setStrategistReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_c_safe\",\"type\":\"uint256\"}],\"name\":\"setWithdrawCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldDraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldRepay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistRewardMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Strategy_YFI_wETHInstrance","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://01c222cc54e734dcf597744ffd37eb0a13cdbb731535e288ccfe754cfac40462"}]}