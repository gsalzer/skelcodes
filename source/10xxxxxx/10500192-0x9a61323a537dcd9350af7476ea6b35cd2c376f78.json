{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-05-06\r\n*/\r\n\r\npragma solidity 0.6.4;\r\n\r\ninterface Minter {\r\n    function FreezeFreeMint(uint amt, address user, uint dapp) external;\r\n    function mintHXB(uint value, address receiver) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf (address account) external view returns (uint256);\r\n    function mintRatio() external pure returns (uint256);//hxb\r\n    function mintBlock() external pure returns (bool);//hxy\r\n}\r\n\r\ninterface HEX {\r\n    function xfLobbyEnter(address referrerAddr)\r\n    external\r\n    payable;\r\n\r\n    function xfLobbyExit(uint256 enterDay, uint256 count)\r\n    external;\r\n\r\n    function xfLobbyPendingDays(address memberAddr)\r\n    external\r\n    view\r\n    returns (uint256[2] memory words);\r\n\r\n    function balanceOf (address account)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function transfer (address recipient, uint256 amount)\r\n    external \r\n    returns (bool);\r\n\r\n    function currentDay ()\r\n    external\r\n    view\r\n    returns (uint256);\r\n}\r\n\r\ncontract Router {\r\n\r\n    struct CustomerState {\r\n        uint16 nextPendingDay;\r\n        mapping(uint256 => uint256) contributionByDay;\r\n    }\r\n\r\n    struct LobbyContributionState {\r\n        uint256 totalValue;\r\n        uint256 heartsReceived;\r\n    }\r\n\r\n    struct ContractStateCache {\r\n        uint256 currentDay;\r\n        uint256 nextPendingDay;\r\n    }\r\n\r\n    event LobbyJoined(\r\n        uint40 timestamp,\r\n        uint16 day,\r\n        uint256 amount,\r\n        address indexed customer,\r\n        address indexed affiliate\r\n    );\r\n\r\n    event LobbyLeft(\r\n        uint40 timestamp,\r\n        uint16 day,\r\n        uint256 hearts\r\n    );\r\n\r\n    event MissedLobby(\r\n        uint40 timestamp,\r\n        uint16 day\r\n    );\r\n    \r\n    //minting HXY/HXB/HXP\r\n    address internal hxyAddress = address(0xf3A2ace8e48751c965eA0A1D064303AcA53842b9);\r\n    address internal hxbAddress = address(0x9BB6fd000109E24Eb38B0Deb806382fF9247E478);\r\n    address internal hxpAddress = address(0x16aB6ED897D04856Ff138122Db4b7767078a20F3);\r\n    \r\n    Minter internal hxy = Minter(hxyAddress);\r\n    Minter internal hxb = Minter(hxbAddress);\r\n    Minter internal hxp = Minter(hxpAddress);\r\n    \r\n    uint public hxyRatio = 100;\r\n    uint public hxbRatio = 1000;\r\n    uint public hxpRatio = 10000;\r\n    bool public multisigSet;\r\n    address public multisig = address(0);\r\n    address public splitter = address(0);\r\n    \r\n    // from HEX\r\n    uint16 private constant LAUNCH_PHASE_DAYS = 350;\r\n    uint16 private constant LAUNCH_PHASE_END_DAY = 351;\r\n    uint256 private constant XF_LOBBY_DAY_WORDS = (LAUNCH_PHASE_END_DAY + 255) >> 8;\r\n\r\n    // constants & mappings we need\r\n    mapping(address => bool) admins;\r\n    HEX private constant hx = HEX(0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39);\r\n    uint256 private contractNextPendingDay;\r\n    uint256 public constant HEX_LAUNCH_TIME = 1575331200;\r\n    mapping(address => uint8) private registeredAffiliates;\r\n    mapping(uint256 => LobbyContributionState) private totalValueByDay;\r\n    mapping(address => CustomerState) private customerData;\r\n    mapping(uint8 => uint8) public affiliateRankPercentages;\r\n    \r\n    modifier onlyMultisig(){\r\n        require(msg.sender == multisig, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmins(){\r\n        require(admins[msg.sender], \"not an admin\");\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n    public\r\n    {\r\n        admins[msg.sender] = true;\r\n        contractNextPendingDay = _getHexContractDay(); // today is the next day to resolve\r\n        affiliateRankPercentages[0] = 0;\r\n        affiliateRankPercentages[1] = 50;\r\n        affiliateRankPercentages[2] = 100;\r\n    }\r\n    \r\n    function enterLobby(address customer, address affiliate)\r\n    public\r\n    payable\r\n    {\r\n        require(msg.value > 0, \"invalid eth value\");\r\n        bool isAffiliate = false;\r\n        uint8 affiliateLevel = registeredAffiliates[msg.sender];\r\n        uint8 affiliateSplit = affiliateRankPercentages[affiliateLevel];\r\n        if(affiliate != address(0) && affiliateSplit > 0){\r\n            // real affiliate, use them for ref\r\n            uint256 affiliateValue = msg.value * affiliateSplit / 100;\r\n            isAffiliate = true;\r\n            hx.xfLobbyEnter{value:affiliateValue}(affiliate);\r\n            if(msg.value - affiliateValue > 0){\r\n                hx.xfLobbyEnter{value:msg.value - affiliateValue}(splitter);\r\n            }\r\n        } else {\r\n            hx.xfLobbyEnter{value:msg.value}(splitter);\r\n        }\r\n\r\n        // record customer contribution\r\n        uint256 currentDay = _getHexContractDay();\r\n        totalValueByDay[currentDay].totalValue += msg.value;\r\n        customerData[customer].contributionByDay[currentDay] += msg.value;\r\n        if(customerData[customer].nextPendingDay == 0){\r\n            // new user\r\n            customerData[customer].nextPendingDay = uint16(currentDay);\r\n        }\r\n\r\n        //if the splitter is used as referral, set the zero address as affiliate\r\n        address referrerAddr = isAffiliate ? affiliate : address(0);\r\n        emit LobbyJoined(\r\n            uint40(block.timestamp),\r\n            uint16(currentDay),\r\n            msg.value,\r\n            customer,\r\n            referrerAddr\r\n          );\r\n    }\r\n\r\n    function exitLobbiesBeforeDay(address customer, uint256 day)\r\n    public\r\n    {\r\n        ContractStateCache memory state = ContractStateCache(_getHexContractDay(), contractNextPendingDay);\r\n        uint256 _day = day > 0 ? day : state.currentDay;\r\n        require(customerData[customer].nextPendingDay < _day,\r\n            \"Customer has no active lobby entries for this time period\");\r\n        _leaveLobbies(state, _day);\r\n        // next pending day was updated as part of leaveLobbies\r\n        contractNextPendingDay = state.nextPendingDay;\r\n        _distributeShare(customer, _day);\r\n    }\r\n\r\n    function registerAffiliate(address affiliateContract, uint8 affiliateRank)\r\n    public\r\n    onlyAdmins\r\n    {\r\n        require(registeredAffiliates[affiliateContract] == 0, \"Affiliate contract is already registered\");\r\n        registeredAffiliates[affiliateContract] = affiliateRank;\r\n    }\r\n\r\n    function updateAffiliateRank(address affiliateContract, uint8 affiliateRank)\r\n    public\r\n    onlyAdmins\r\n    {\r\n        require(affiliateRank != registeredAffiliates[affiliateContract], \"New Affiliate rank must be different than previous\");\r\n        require(affiliateRankPercentages[affiliateRank] >= affiliateRankPercentages[registeredAffiliates[affiliateContract]],\r\n                \"Cannot set an affiliateRank with lower percentage than previous\");\r\n        registeredAffiliates[affiliateContract] = affiliateRank;\r\n    }\r\n\r\n    function addAffiliateRank(uint8 affiliateRank, uint8 rankSplitPercentage)\r\n    public\r\n    onlyAdmins\r\n    {\r\n        require(affiliateRankPercentages[affiliateRank] == 0, \"Affiliate rank already exists\");\r\n        require(rankSplitPercentage > 0 && rankSplitPercentage <= 100,\r\n            \"Affiliate Split must be between 0-100%\");\r\n        affiliateRankPercentages[affiliateRank] = rankSplitPercentage;\r\n    }\r\n\r\n    function verifyAffiliate(address affiliateContract)\r\n    public\r\n    view\r\n    returns (bool, uint8)\r\n    {\r\n        return (registeredAffiliates[affiliateContract] > 0, registeredAffiliates[affiliateContract]);\r\n    }\r\n\r\n    function batchLeaveLobby(uint256 day, uint256 batchSize)\r\n    public\r\n    {\r\n        require(day < _getHexContractDay(), \"You must only leave lobbies that have ended\");\r\n        uint256[XF_LOBBY_DAY_WORDS] memory joinedDays = hx.xfLobbyPendingDays(address(this));\r\n        require((joinedDays[day >> 8] & (1 << (day & 255))) >> (day & 255) == 1, \"You may only leave lobbies with active entries\");\r\n\r\n        uint256 balance = hx.balanceOf(address(this));\r\n        _leaveLobby(day, batchSize, balance);\r\n    }\r\n\r\n    receive()\r\n    external\r\n    payable\r\n    {\r\n        if(msg.value > 0)\r\n        {\r\n          // If someone just sends eth, get them in a lobby with no affiliate, i.e. splitter\r\n          enterLobby(msg.sender, address(0));\r\n        }\r\n          else\r\n        {\r\n          //if the transaction value is 0, exit lobbies instead\r\n          exitLobbiesBeforeDay(msg.sender, 0);\r\n        }\r\n    }\r\n\r\n    function _getHexContractDay()\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        require(HEX_LAUNCH_TIME < block.timestamp, \"Launch time not before current block\");\r\n        return (block.timestamp - HEX_LAUNCH_TIME) / 1 days;\r\n    }\r\n\r\n    function _leaveLobbies(ContractStateCache memory currentState, uint256 beforeDay)\r\n    private\r\n    {\r\n        uint256 newBalance = hx.balanceOf(address(this));\r\n        //uint256 oldBalance;\r\n        if(currentState.nextPendingDay < beforeDay){\r\n            uint256[XF_LOBBY_DAY_WORDS] memory joinedDays = hx.xfLobbyPendingDays(address(this));\r\n            while(currentState.nextPendingDay < beforeDay){\r\n                if( (joinedDays[currentState.nextPendingDay >> 8] & (1 << (currentState.nextPendingDay & 255))) >>\r\n                    (currentState.nextPendingDay & 255) == 1){\r\n                    // leaving 0 means leave \"all\"\r\n                    newBalance = _leaveLobby(currentState.nextPendingDay, 0, newBalance);\r\n                    emit LobbyLeft(uint40(block.timestamp),\r\n                        uint16(currentState.nextPendingDay),\r\n                        totalValueByDay[currentState.nextPendingDay].heartsReceived);\r\n                } else {\r\n                    emit MissedLobby(uint40(block.timestamp),\r\n                     uint16(currentState.nextPendingDay));\r\n                }\r\n                currentState.nextPendingDay++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _leaveLobby(uint256 lobby, uint256 numEntries, uint256 balance)\r\n    private\r\n    returns (uint256)\r\n    {\r\n        hx.xfLobbyExit(lobby, numEntries);\r\n        uint256 oldBalance = balance;\r\n        balance = hx.balanceOf(address(this));\r\n        totalValueByDay[lobby].heartsReceived += balance - oldBalance;\r\n        require(totalValueByDay[lobby].heartsReceived > 0, \"Hearts received for a lobby is 0\");\r\n        return balance;\r\n    }\r\n\r\n    function _distributeShare(address customer, uint256 endDay)\r\n    private\r\n    returns (uint256)\r\n    {\r\n        uint256 totalShare = 0;\r\n        CustomerState storage user = customerData[customer];\r\n        uint256 nextDay = user.nextPendingDay;\r\n        if(nextDay > 0 && nextDay < endDay){\r\n            while(nextDay < endDay){\r\n                if(totalValueByDay[nextDay].totalValue > 0 && totalValueByDay[nextDay].heartsReceived > 0){\r\n                    require(totalValueByDay[nextDay].heartsReceived > 0, \"Hearts received must be > 0, leave lobby for day\");\r\n                    totalShare += user.contributionByDay[nextDay] *\r\n                        totalValueByDay[nextDay].heartsReceived /\r\n                        totalValueByDay[nextDay].totalValue;\r\n                }\r\n                nextDay++;\r\n            }\r\n            if(totalShare > 0){\r\n                require(hx.transfer(customer, totalShare), strConcat(\"Failed to transfer \",uint2str(totalShare),\", insufficient balance\"));\r\n                //mint\r\n                if(admins[msg.sender]){//REMOVE ON DEPLOYMENT\r\n                  if(totalShare >= 100000000){\r\n                        //HXY\r\n                        if(hxyAddress != address(0)){\r\n                            if(hxy.mintBlock()){\r\n                                uint y = totalShare / hxyRatio;\r\n                                if(hxy.balanceOf(address(this)) >= y){\r\n                                    hxy.transfer(customer, y); \r\n                                }\r\n                            }\r\n                            else{\r\n                               hxy.FreezeFreeMint((totalShare / hxyRatio), customer, 1);\r\n                            }\r\n                        }\r\n                        //HXB\r\n                        if(hxbAddress != address(0)){\r\n                            require(hxb.mintHXB(((totalShare / hxbRatio) * hxb.mintRatio()), customer), \"could not mint HXB\");\r\n                        }\r\n                        //HXP\r\n                        if(hxpAddress != address(0)){\r\n                            uint p = totalShare / hxpRatio;\r\n                            if(hxp.balanceOf(address(this)) >= p){\r\n                                hxp.transfer(customer, p); \r\n                            }\r\n                        }\r\n                    }   \r\n                }\r\n            }\r\n        }\r\n        if(nextDay != user.nextPendingDay){\r\n            user.nextPendingDay = uint16(nextDay);\r\n        }\r\n\r\n        return totalShare;\r\n    }\r\n    \r\n    function setHXYAddress(address _hxyAddress)\r\n        onlyMultisig\r\n        public\r\n    {\r\n        hxyAddress = _hxyAddress;\r\n        hxy = Minter(hxyAddress);\r\n    }\r\n    \r\n    function setHXBAddress(address _hxbAddress)\r\n        onlyMultisig\r\n        public\r\n    {\r\n        hxbAddress = _hxbAddress;\r\n        hxb = Minter(hxbAddress);\r\n    }\r\n    \r\n    function setHXPAddress(address _hxpAddress)\r\n        onlyMultisig\r\n        public\r\n    {\r\n        hxpAddress = _hxpAddress;\r\n        hxp = Minter(hxpAddress);\r\n    }\r\n    \r\n    function setSplitter(address _splitter)\r\n        onlyAdmins\r\n        public\r\n    {\r\n        require(_splitter != address(0));\r\n        splitter = _splitter;\r\n    }\r\n    \r\n    function setMultisig(address _multisig)\r\n        onlyAdmins\r\n        public\r\n    {\r\n        require(_multisig != address(0));\r\n        require(!multisigSet);\r\n        multisig = _multisig;\r\n        multisigSet = true;\r\n    }\r\n    \r\n    function setRatios(uint _hxy, uint _hxb, uint _hxp)\r\n        onlyAdmins\r\n        public\r\n    {\r\n        hxyRatio = _hxy;\r\n        hxbRatio = _hxb;\r\n        hxpRatio = _hxp;\r\n    }\r\n    \r\n    function newAdmin(address _admin)\r\n        onlyAdmins\r\n        public\r\n    {\r\n        admins[_admin] = true;\r\n    }\r\n    \r\n    \r\n    function uint2str(uint i)\r\n    internal\r\n    pure returns (string memory _uintAsString)\r\n    {\r\n        uint _i = i;\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c\r\n    , string memory _d, string memory _e)\r\n    private\r\n    pure\r\n    returns (string memory){\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n    bytes memory babcde = bytes(abcde);\r\n    uint k = 0;\r\n    for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n    for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n    for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n    for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n    for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n    return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d)\r\n    private\r\n    pure\r\n    returns (string memory) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c)\r\n    private\r\n    pure\r\n    returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b)\r\n    private\r\n    pure\r\n    returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"day\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"LobbyJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"day\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hearts\",\"type\":\"uint256\"}],\"name\":\"LobbyLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"day\",\"type\":\"uint16\"}],\"name\":\"MissedLobby\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HEX_LAUNCH_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"affiliateRank\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rankSplitPercentage\",\"type\":\"uint8\"}],\"name\":\"addAffiliateRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"affiliateRankPercentages\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"batchLeaveLobby\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"enterLobby\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"exitLobbiesBeforeDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hxbRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hxpRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hxyRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisigSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"newAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"affiliateContract\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"affiliateRank\",\"type\":\"uint8\"}],\"name\":\"registerAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hxbAddress\",\"type\":\"address\"}],\"name\":\"setHXBAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hxpAddress\",\"type\":\"address\"}],\"name\":\"setHXPAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hxyAddress\",\"type\":\"address\"}],\"name\":\"setHXYAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hxy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hxb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hxp\",\"type\":\"uint256\"}],\"name\":\"setRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_splitter\",\"type\":\"address\"}],\"name\":\"setSplitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"affiliateContract\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"affiliateRank\",\"type\":\"uint8\"}],\"name\":\"updateAffiliateRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"affiliateContract\",\"type\":\"address\"}],\"name\":\"verifyAffiliate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Router","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://15dd482db09cf05ef43d5eb4389548cfb57bdbb1e56ac53f5bdab63b264b8c2c"}]}