{"status":"1","message":"OK","result":[{"SourceCode":"/* \r\n *  PeriodicStaker\r\n *  VERSION: 4.1\r\n *\r\n */\r\n\r\ncontract ERC20{\r\n    function allowance(address owner, address spender) external view returns (uint256){}\r\n    function transfer(address recipient, uint256 amount) external returns (bool){}\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool){}\r\n    function balanceOf(address account) external view returns (uint256){}\r\n}\r\n\r\ncontract PeriodicStaker {\r\n    \r\n    event Staked(address staker);\r\n\r\n    ERC20 public token;\r\n    uint public total_stake=0;\r\n    uint public total_stakers=0;\r\n    mapping(address => uint)public stake;\r\n    \r\n    uint public status=0;\r\n    \r\n    uint safeWindow=40320;\r\n    \r\n    uint public startLock;\r\n    uint public lockTime;\r\n    uint minLock=10000;\r\n    uint maxLock=200000;\r\n    \r\n    uint public freezeTime;\r\n    uint minFreeze=10000;\r\n    uint maxFreeze=200000;\r\n\r\n    address public master;\r\n    mapping(address => bool)public modules;\r\n    address[] public modules_list;\r\n    \r\n\r\n    constructor(address tokenToStake,address mastr) public {\r\n        token=ERC20(tokenToStake);\r\n        master=mastr;\r\n    }\r\n    \r\n\r\n    function stakeNow(uint256 amount) public returns(bool){\r\n        require(stk(amount,msg.sender));\r\n        return true;\r\n    }\r\n    \r\n    function stakeNow(uint amount,address staker) public returns(bool){\r\n        require(modules[msg.sender]);\r\n        require(stk(amount,staker));\r\n        return true;\r\n    }\r\n    \r\n    function stk(uint amount,address staker)internal returns(bool){\r\n        require(amount > 0);\r\n        require(status!=2);\r\n        uint256 allowance = token.allowance(staker, address(this));\r\n        require(allowance >= amount);\r\n        require(token.transferFrom(staker, address(this), amount));\r\n        if(stake[staker]==0)total_stakers++;\r\n        stake[staker]+=amount;\r\n        total_stake+=amount;\r\n        emit Staked(staker);\r\n        return true;\r\n    }\r\n    \r\n    function unstake() public returns(bool){\r\n        require(unstk(msg.sender));\r\n        return true;\r\n    }\r\n    \r\n    function unstake(address unstaker) public returns(bool){\r\n        require(modules[msg.sender]);\r\n        require(unstk(unstaker));\r\n        return true;\r\n    }\r\n    \r\n    function unstk(address unstaker)internal returns(bool){\r\n        require(stake[unstaker] > 0);\r\n        if(status==1)require((startLock+lockTime)<block.number);\r\n        require(token.transfer(unstaker, stake[unstaker]));\r\n        total_stake-=stake[unstaker];\r\n        stake[unstaker]=0;\r\n        total_stakers--;\r\n        return true;\r\n    }\r\n    \r\n    function openDropping(uint lock) public returns(bool){\r\n        require(msg.sender==master);\r\n        require(block.number>startLock+safeWindow);\r\n        require(minLock<=lock);\r\n        require(lock<=maxLock);\r\n        require(status==0);\r\n        status=1;\r\n        lockTime=lock;\r\n        startLock=block.number;\r\n        return true;\r\n    }\r\n    \r\n    function freeze(uint freez) public returns(bool){\r\n        require(msg.sender==master);\r\n        require(block.number>startLock+safeWindow);\r\n        require(minFreeze<=freez);\r\n        require(freez<=maxFreeze);\r\n        require(status==0);\r\n        status=2;\r\n        freezeTime=freez;\r\n        startLock=block.number;\r\n        return true;\r\n    }\r\n    \r\n    function open() public returns(bool){\r\n        require(status>0);\r\n        if(status==1)require(block.number>startLock+lockTime);\r\n        if(status==2)require(block.number>startLock+freezeTime);\r\n        startLock=block.number;\r\n        status=0;\r\n        return true;\r\n    }\r\n    \r\n    function setMaster(address new_master)public returns(bool){\r\n        require(msg.sender==master);\r\n        master=new_master;\r\n        return true;\r\n    }\r\n    \r\n    function setModule(address new_module,bool set)public returns(bool){\r\n        require(msg.sender==master);\r\n        modules[new_module]=set;\r\n        if(set)modules_list.push(new_module);\r\n        return true;\r\n    }\r\n    \r\n\r\n}\r\n\r\ncontract LockDropper{\r\n    \r\n    PeriodicStaker public staker;\r\n    ERC20 public token;\r\n    uint public multiplier;\r\n    address master;\r\n    address public receiver;\r\n    \r\n    constructor() public{\r\n        staker=PeriodicStaker(0x7d410AFA45377006A0F79Ae6157A6A873Bfa5567);\r\n        multiplier=30;\r\n        token=ERC20(0x801F90f81786dC72B4b9d51Ab613fbe99e5E4cCD);\r\n        master=msg.sender;\r\n        receiver=0xdA1Ec8F2Fb47e905079663bCEA69f1a2B010f2D3;\r\n    }\r\n    \r\n    function LockDrop(uint amount) public{\r\n        require(staker.status()==1);\r\n        require(staker.stakeNow(amount,msg.sender));\r\n        require(token.transfer(msg.sender, amount*multiplier/100));\r\n    } \r\n    \r\n    \r\n    function burn()public returns(bool){\r\n        require(msg.sender==master);\r\n        require(staker.status()==0);\r\n        token.transfer(receiver, token.balanceOf(address(this)));\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"contract PeriodicStaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LockDropper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b43216dc1f158f454acb88257275ea60ee050657401940b962ff05561fb50206"}]}