{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface ICurve {\r\n  function coins(int128 tokenId) external view returns (address token);\r\n  function calc_token_amount(uint256[3] calldata amounts, bool deposit) external returns (uint256 amount);\r\n  function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\r\n  function get_dy(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external returns (uint256 buyTokenAmt);\r\n  function exchange(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt, uint256 minBuyToken) external;\r\n  function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount) external;\r\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external returns (uint256 amount);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint id) external returns (uint num);\r\n    function setUint(uint id, uint val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\r\n}\r\n\r\ncontract Stores {\r\n\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getEthAddr() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return memory variable address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() internal pure returns (address) {\r\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n     */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n     */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev emit event on event contract\r\n     */\r\n    function emitEvent(bytes32 eventCode, bytes memory eventData) internal {\r\n        (uint model, uint id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details.\r\n     */\r\n    function connectorID() public view returns(uint model, uint id) {\r\n        (model, id) = (1, 28);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n  uint constant WAD = 10 ** 18;\r\n  uint constant RAY = 10 ** 27;\r\n\r\n  function add(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(x, y);\r\n  }\r\n\r\n  function sub(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.sub(x, y);\r\n  }\r\n\r\n  function mul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.mul(x, y);\r\n  }\r\n\r\n  function div(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.div(x, y);\r\n  }\r\n\r\n  function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\r\n  }\r\n\r\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\r\n  }\r\n\r\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\r\n  }\r\n\r\n  function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\r\n  }\r\n\r\n}\r\n\r\ncontract CurveSBTCHelpers is Stores, DSMath{\r\n  /**\r\n  * @dev Return Curve SBTC Swap Address\r\n  */\r\n  function getCurveSwapAddr() internal pure returns (address) {\r\n    return 0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714;\r\n  }\r\n\r\n  /**\r\n  * @dev Return Curve Token Address\r\n  */\r\n  function getCurveTokenAddr() internal pure returns (address) {\r\n    return 0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3;\r\n  }\r\n\r\n  function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n    amt = div(_amt, 10 ** (18 - _dec));\r\n  }\r\n\r\n  function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n    amt = mul(_amt, 10 ** (18 - _dec));\r\n  }\r\n\r\n  function getTokenI(address token) internal pure returns (int128 i) {\r\n    if (token == address(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D)) {\r\n      // RenBTC Token\r\n      i = 0;\r\n    } else if (token == address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)) {\r\n      // WBTC Token\r\n      i = 1;\r\n    } else if (token == address(0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6)) {\r\n      // SBTC Token\r\n      i = 2;\r\n    } else {\r\n      revert(\"token-not-found.\");\r\n    }\r\n  }\r\n}\r\n\r\ncontract CurveSBTCProtocol is CurveSBTCHelpers {\r\n  event LogSell(\r\n    address indexed buyToken,\r\n    address indexed sellToken,\r\n    uint256 buyAmt,\r\n    uint256 sellAmt,\r\n    uint256 getId,\r\n    uint256 setId\r\n  );\r\n  event LogDeposit(address token, uint256 amt, uint256 mintAmt, uint256 getId, uint256 setId);\r\n  event LogWithdraw(address token, uint256 amt, uint256 burnAmt, uint256 getId,  uint256 setId);\r\n\r\n  /**\r\n  * @dev Sell ERC20_Token.\r\n  * @param buyAddr buying token address.\r\n  * @param sellAddr selling token amount.\r\n  * @param sellAmt selling token amount.\r\n  * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n  * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n  * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n  */\r\n  function sell(\r\n    address buyAddr,\r\n    address sellAddr,\r\n    uint sellAmt,\r\n    uint unitAmt,\r\n    uint getId,\r\n    uint setId\r\n  ) external payable {\r\n    uint _sellAmt = getUint(getId, sellAmt);\r\n    ICurve curve = ICurve(getCurveSwapAddr());\r\n    TokenInterface _buyToken = TokenInterface(buyAddr);\r\n    TokenInterface _sellToken = TokenInterface(sellAddr);\r\n    _sellAmt = _sellAmt == uint(-1) ? _sellToken.balanceOf(address(this)) : _sellAmt;\r\n    _sellToken.approve(address(curve), _sellAmt);\r\n\r\n    uint _slippageAmt = convert18ToDec(_buyToken.decimals(), wmul(unitAmt, convertTo18(_sellToken.decimals(), _sellAmt)));\r\n\r\n    uint intialBal = _buyToken.balanceOf(address(this));\r\n    curve.exchange(getTokenI(sellAddr), getTokenI(buyAddr), _sellAmt, _slippageAmt);\r\n    uint finalBal = _buyToken.balanceOf(address(this));\r\n\r\n    uint _buyAmt = sub(finalBal, intialBal);\r\n\r\n    setUint(setId, _buyAmt);\r\n\r\n    emit LogSell(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\r\n    bytes32 _eventCode = keccak256(\"LogSell(address,address,uint256,uint256,uint256,uint256)\");\r\n    bytes memory _eventParam = abi.encode(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\r\n    emitEvent(_eventCode, _eventParam);\r\n  }\r\n\r\n  /**\r\n  * @dev Deposit Token.\r\n  * @param token token address.\r\n  * @param amt token amount.\r\n  * @param unitAmt unit amount of curve_amt/token_amt with slippage.\r\n  * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n  * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n  */\r\n  function deposit(\r\n    address token,\r\n    uint amt,\r\n    uint unitAmt,\r\n    uint getId,\r\n    uint setId\r\n  ) external payable {\r\n    uint256 _amt = getUint(getId, amt);\r\n    TokenInterface tokenContract = TokenInterface(token);\r\n\r\n    _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\r\n    uint[3] memory _amts;\r\n    _amts[uint(getTokenI(token))] = _amt;\r\n\r\n    tokenContract.approve(getCurveSwapAddr(), _amt);\r\n\r\n    uint _amt18 = convertTo18(tokenContract.decimals(), _amt);\r\n    uint _slippageAmt = wmul(unitAmt, _amt18);\r\n\r\n    TokenInterface curveTokenContract = TokenInterface(getCurveTokenAddr());\r\n    uint initialCurveBal = curveTokenContract.balanceOf(address(this));\r\n\r\n    ICurve(getCurveSwapAddr()).add_liquidity(_amts, _slippageAmt);\r\n\r\n    uint finalCurveBal = curveTokenContract.balanceOf(address(this));\r\n\r\n    uint mintAmt = sub(finalCurveBal, initialCurveBal);\r\n\r\n    setUint(setId, mintAmt);\r\n\r\n    emit LogDeposit(token, _amt, mintAmt, getId, setId);\r\n    bytes32 _eventCode = keccak256(\"LogDeposit(address,uint256,uint256,uint256,uint256)\");\r\n    bytes memory _eventParam = abi.encode(token, _amt, mintAmt, getId, setId);\r\n    emitEvent(_eventCode, _eventParam);\r\n  }\r\n\r\n  /**\r\n  * @dev Withdraw Token.\r\n  * @param token token address.\r\n  * @param amt token amount.\r\n  * @param unitAmt unit amount of curve_amt/token_amt with slippage.\r\n  * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n  * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n  */\r\n  function withdraw(\r\n    address token,\r\n    uint256 amt,\r\n    uint256 unitAmt,\r\n    uint getId,\r\n    uint setId\r\n  ) external payable {\r\n    uint _amt = getUint(getId, amt);\r\n    int128 tokenId = getTokenI(token);\r\n\r\n    TokenInterface curveTokenContract = TokenInterface(getCurveTokenAddr());\r\n    ICurve curveSwap = ICurve(getCurveSwapAddr());\r\n\r\n    uint _curveAmt;\r\n    uint[3] memory _amts;\r\n    if (_amt == uint(-1)) {\r\n      _curveAmt = curveTokenContract.balanceOf(address(this));\r\n      _amt = curveSwap.calc_withdraw_one_coin(_curveAmt, tokenId);\r\n      _amts[uint(tokenId)] = _amt;\r\n    } else {\r\n      _amts[uint(tokenId)] = _amt;\r\n      _curveAmt = curveSwap.calc_token_amount(_amts, false);\r\n    }\r\n\r\n    uint _amt18 = convertTo18(TokenInterface(token).decimals(), _amt);\r\n    uint _slippageAmt = wmul(unitAmt, _amt18);\r\n\r\n    curveTokenContract.approve(address(curveSwap), 0);\r\n    curveTokenContract.approve(address(curveSwap), _slippageAmt);\r\n\r\n    curveSwap.remove_liquidity_imbalance(_amts, _slippageAmt);\r\n\r\n    setUint(setId, _amt);\r\n\r\n    emit LogWithdraw(token, _amt, _curveAmt, getId, setId);\r\n    bytes32 _eventCode = keccak256(\"LogWithdraw(address,uint256,uint256,uint256,uint256)\");\r\n    bytes memory _eventParam = abi.encode(token, _amt, _curveAmt, getId, setId);\r\n    emitEvent(_eventCode, _eventParam);\r\n  }\r\n}\r\n\r\ncontract ConnectSBTCCurve is CurveSBTCProtocol {\r\n  string public name = \"Curve-sbtc-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectSBTCCurve","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f3210c347f810aee4b03aff95d3b7d39ebef170b4120ffdee54fc66c9ce35708"}]}