{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nDonation Exchange dexToken smart-contract\r\n*/\r\n\r\npragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract dexGiverInterface {\r\n        function _donationsTransfer(address _donator) external payable returns (bool);\r\n        function checkDexTokenUserReferrer(address _user, address _dataAddress) external returns (bool, address);\r\n    }\r\n    \r\ncontract dexToken {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    address private _owner;\r\n    address private _dexGiverAddress;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n    uint128 private _min;\r\n    uint128 private _max;\r\n    uint8 private _decimals;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Sell(address indexed seller, uint256 amount, uint256 rate, uint256 ethAmount);\r\n    event Reward(address indexed referrer, uint32 indexed donationId, uint256 ethAmount, uint256 rate, uint256 tokenAmount);\r\n    event Buy(address indexed buyer, address indexed referrer, uint256 ethAmount, uint256 tokenRate, uint256 amountToMint);\r\n    event UnreachableAdressTokensMinted(address userAddress, uint32 donationTurn, uint ethAmount, uint tokenAmount, uint rate);\r\n    event TokenRateChanged(uint256 tokenRate, uint64 time);\r\n\r\n    constructor () public {\r\n        _name = \"Donation Exchange Token\";\r\n        _symbol = \"DEXT\";\r\n        _decimals = 18;\r\n        _owner = msg.sender;\r\n        _min = 50000000000000000;\r\n        _max = 5000000000000000000;\r\n        \r\n        emit TokenRateChanged(1000000000000000000, uint64(now));\r\n    }\r\n    \r\n    dexGiverInterface dexGiver;\r\n\r\n    modifier onlyOwner() {\r\n        require (_msgSender() == _owner, \"Only for owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier calledByDex() {\r\n        require (_msgSender() == _dexGiverAddress, \"Only for dexGiver contract\");\r\n        _;\r\n    }\r\n    \r\n    modifier purchaseSize() {\r\n        require (msg.value >= _min && msg.value <= _max, \"Wrong Ether amount\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n        assert(_owner == newOwner);\r\n    }\r\n    \r\n    function changeDexGiverAddress(address newAddress) external onlyOwner{\r\n        _dexGiverAddress = newAddress;\r\n        dexGiver = dexGiverInterface(newAddress);\r\n        assert(_dexGiverAddress == newAddress);\r\n    }\r\n    \r\n    function changeMinMax(uint128 newMin, uint128 newMax) external onlyOwner{\r\n        _min = newMin;\r\n        _max = newMax;\r\n        assert(_min == newMin && _max == newMax);\r\n    }\r\n    \r\n    \r\n    \r\n    function () external payable purchaseSize {\r\n        \r\n        (bool referrerWasSet, address referrer) = dexGiver.checkDexTokenUserReferrer(msg.sender, bytesToAddress(msg.data));\r\n        require(referrerWasSet, \"Referrer was not set by dexGiver\");\r\n        \r\n        uint amountToDex = msg.value.div(20);\r\n        uint ethAmountForBuyer = msg.value.mul(90).div(100);\r\n        \r\n        (uint tokenAmount, uint tokenRate) = tokenAmountForEther(msg.value);\r\n        \r\n        uint amountToMintForBuyer = tokenAmount.mul(90).div(100);\r\n        \r\n        bool dtIsDone = dexGiver._donationsTransfer.value(amountToDex)(_msgSender());\r\n        require(dtIsDone, \"Donation was not accepted or transfered by dexGiver\");\r\n        \r\n        _mint(_msgSender(), amountToMintForBuyer);\r\n        \r\n        emit Buy(_msgSender(), referrer, ethAmountForBuyer, tokenRate, amountToMintForBuyer);\r\n        emit TokenRateChanged(calcTokenRate(), uint64(now));\r\n    }\r\n    \r\n    \r\n    function transfer(address recipient, uint256 tokenAmount) public returns (bool) {\r\n\r\n        if (recipient == _dexGiverAddress || recipient == address(this)) {\r\n\r\n            uint rate = _tokenRate(0);\r\n            uint ethAmount = tokenAmount.mul(10**18).mul(rate).div(10**36);\r\n            \r\n            _burn(_msgSender(), tokenAmount);\r\n\r\n            sendValue(_msgSender(), ethAmount);\r\n            \r\n            emit Sell(_msgSender(), tokenAmount, rate, ethAmount);\r\n\r\n        } else {\r\n            _transfer(_msgSender(), recipient, tokenAmount);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function mintRefTokens(address referrer, address founder, uint32 id) external calledByDex payable returns (bool) {\r\n        \r\n            (uint totalTokenAmount, uint rate) = tokenAmountForEther(msg.value);\r\n            uint tokenAmount = totalTokenAmount.div(3);\r\n            \r\n            _mint(founder, tokenAmount);\r\n            \r\n            assert(balanceOf(founder) >= tokenAmount);\r\n            \r\n        if (referrer != address(this)) {\r\n            \r\n            _mint(referrer, tokenAmount);\r\n            \r\n            assert(balanceOf(referrer) >= tokenAmount);\r\n            \r\n            emit Reward(referrer, id, msg.value.div(3), rate, tokenAmount);\r\n            emit TokenRateChanged(calcTokenRate(), uint64(now));\r\n            \r\n            return (true);\r\n            \r\n        } else {\r\n            \r\n            emit TokenRateChanged(calcTokenRate(), uint64(now));\r\n            \r\n            return (true);\r\n        }\r\n    }\r\n    \r\n    \r\n    function mintForUnreachableAddress(address userAddress, uint32 donationTurn) external payable calledByDex returns (bool){\r\n        \r\n        (uint tokenAmount, uint rate) = tokenAmountForEther(msg.value);\r\n        \r\n        _mint(userAddress, tokenAmount);\r\n        assert(balanceOf(userAddress) >= tokenAmount);\r\n        \r\n        emit UnreachableAdressTokensMinted(userAddress, donationTurn, msg.value, tokenAmount, rate);\r\n\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function tokenAmountForEther(uint sum) private view returns (uint, uint) {\r\n        uint rate = _tokenRate(sum);\r\n        uint result = sum.mul(10**18).div(rate);\r\n        return (result, rate);\r\n    }\r\n    \r\n\r\n    function _tokenRate(uint sum) private view returns (uint) {\r\n        \r\n        uint ttlspl = _totalSupply;\r\n        uint oldContractBalance = address(this).balance.sub(sum);\r\n        \r\n        if (oldContractBalance == 0 || ttlspl == 0) {\r\n            return 10**18;\r\n        }\r\n        \r\n        return oldContractBalance.mul(10**18).div(ttlspl);\r\n    }\r\n    \r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        \r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        if (bys.length == 20) {\r\n            assembly {\r\n                addr := mload(add(bys, 20))\r\n            }\r\n            return addr;\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function calcTokenRate() public view returns (uint) {\r\n        uint ttlspl = _totalSupply;\r\n        uint actualContractBalance = address(this).balance;\r\n        if (actualContractBalance == 0 || ttlspl == 0) {\r\n            return 10**18;\r\n        }\r\n        return actualContractBalance.mul(10**18).div(ttlspl);\r\n    }\r\n    \r\n    function returnUserData(address user) external view returns (uint256, uint256, uint256) {\r\n        uint dextRate = calcTokenRate();\r\n        uint dextSupply = totalSupply();\r\n        uint dextUserBalance = balanceOf(user);\r\n        return (dextRate, dextSupply, dextUserBalance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"donationId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"TokenRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"donationTurn\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UnreachableAdressTokensMinted\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeDexGiverAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newMin\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newMax\",\"type\":\"uint128\"}],\"name\":\"changeMinMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"donationTurn\",\"type\":\"uint32\"}],\"name\":\"mintForUnreachableAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"founder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"mintRefTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"returnUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"dexToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f182e9e872a558fabad50eacb0e6eee240ec14bb8afb477eada44372f7e3e5bf"}]}