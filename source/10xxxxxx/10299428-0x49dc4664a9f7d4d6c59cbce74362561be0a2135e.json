{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.10;\r\n\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;}\r\n}\r\n\r\ninterface Uniswap{\r\n    // Trade ERC20 to ETH\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    // Trade ETH to ERC20\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    // Trade ERC20 to ERC20\r\n    function swapExactTokensForTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface Token{\r\n    function getTokens(address sendTo) external payable;\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function primary() external view returns (address payable);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n}\r\n\r\ncontract Secondary{\r\n    \r\n    address constant public OUSDAddress = 0xD2d01dd6Aa7a2F5228c7c17298905A7C7E1dfE81;\r\n    \r\n    modifier onlyPrimary() {\r\n        require(msg.sender == primary(), \"Secondary: caller is not the primary account\");\r\n        _;\r\n    }\r\n\r\n    function primary() internal view returns (address payable) {\r\n        return Token(OUSDAddress).primary();\r\n    }\r\n}\r\n\r\ncontract Swappable is Secondary{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address constant public ROUTER      = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant public WETHAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    uint constant public INF = 33136721784;\r\n    \r\n    function tokenToEth(address AssetAddress, uint amountIn) internal returns (uint){\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = AssetAddress;\r\n        path[1] = WETHAddress;\r\n        \r\n        uint balanceBefore = address(this).balance;\r\n        \r\n        Uniswap(ROUTER).swapExactTokensForETH(amountIn,1, path, address(this), INF);\r\n        \r\n        uint balanceAfter = address(this).balance;\r\n        \r\n        \r\n        return balanceAfter.sub(balanceBefore);\r\n    }\r\n    \r\n    function tokenToEthAsset(address AssetAddress, uint amountIn) internal returns (uint){\r\n        \r\n        address[] memory path = new address[](3);\r\n        path[0] = AssetAddress;\r\n        path[1] = OUSDAddress;\r\n        path[2] = WETHAddress;\r\n        \r\n        uint balanceBefore = address(this).balance;\r\n        \r\n        Uniswap(ROUTER).swapExactTokensForETH(amountIn,1, path, address(this), INF);\r\n        \r\n        uint balanceAfter = address(this).balance;\r\n        \r\n        \r\n        return balanceAfter.sub(balanceBefore);\r\n    }\r\n        \r\n    function ethToToken(address AssetAddress) internal returns (uint){\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = WETHAddress;\r\n        path[1] = AssetAddress;\r\n        \r\n        uint balanceBefore = Token(AssetAddress).balanceOf( msg.sender );\r\n        \r\n        Uniswap(ROUTER).swapExactETHForTokens.value(msg.value)(1, path, msg.sender, INF);\r\n        \r\n        uint balanceAfter = Token(AssetAddress).balanceOf( msg.sender );\r\n        \r\n        \r\n        return balanceAfter.sub(balanceBefore);\r\n    }\r\n        \r\n    function tokenToToken(uint amountIn, address inputAddress, address outputAddress) internal returns (uint){\r\n        \r\n        address[] memory path = new address[](2);\r\n        \r\n        path[0] = inputAddress;\r\n        path[1] = outputAddress;\r\n        \r\n        uint balanceBefore = Token(outputAddress).balanceOf( msg.sender );\r\n        \r\n        Uniswap(ROUTER).swapExactTokensForTokens(amountIn, 1, path, msg.sender, INF);\r\n        \r\n        uint balanceAfter = Token(outputAddress).balanceOf( msg.sender );\r\n        \r\n        \r\n        return balanceAfter.sub(balanceBefore);\r\n    }\r\n}\r\n\r\ncontract Arb is Secondary, Swappable{\r\n    \r\n    constructor () public {\r\n        \r\n        uint zero = 0;\r\n        uint one = 1;\r\n        \r\n        address OSPVAddress  = 0xFCCe9526E030F1691966d5A651F5EbE1A5B4C8E4;\r\n        address OSPVSAddress = 0xf7D1f35518950E78c18E5A442097cA07962f4D8A;\r\n        \r\n        Token(OUSDAddress).approve(ROUTER, zero - one);\r\n        Token(OSPVAddress).approve(ROUTER, zero - one);\r\n        Token(OSPVSAddress).approve(ROUTER, zero - one);\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    //combines two calls into one, sees if this contract is approved to move your tokens\r\n    function isitApproved(address UserAddress, address AssetAddress) public view returns (uint){\r\n        \r\n        uint value = 0;\r\n        \r\n        if(Token(OUSDAddress).allowance(UserAddress,address(this)) > 2**128 ){\r\n            value = 2;\r\n        }\r\n        \r\n        if(Token(AssetAddress).allowance(UserAddress,address(this)) > 2**128 ){\r\n            value = value + 1;\r\n        }\r\n        \r\n        return value;\r\n    }\r\n    \r\n    function addToken(address tokenAddress) public onlyPrimary{\r\n        \r\n        uint zero = 0;\r\n        uint one = 1;\r\n        \r\n        Token(tokenAddress).approve(ROUTER, zero - one);\r\n    }\r\n    \r\n    function OUSDtoETH(uint OUSDInput, uint ETHOutput) public{\r\n        \r\n        //transfer ousd from user to this contract\r\n        require( Token(OUSDAddress).transferFrom(msg.sender, address(this), OUSDInput), \"Could not move OUSD to this contract, no approval?\");\r\n        \r\n        //transfer ousd from this contract to uniswap\r\n        uint ethReceived = tokenToEth(OUSDAddress, OUSDInput);\r\n\r\n        //send eth to OUSDcontract\r\n        if(ETHOutput == 0){\r\n            //send all output from uniswap to OUSD contract\r\n            Token(OUSDAddress).getTokens.value(ethReceived)(msg.sender);\r\n        \r\n        }else{\r\n            //send only some output from uniswap to OUSD contract, send only \"ETHOutput\" amount.\r\n            Token(OUSDAddress).getTokens.value(ETHOutput)(msg.sender);\r\n            msg.sender.transfer( ethReceived.sub(ETHOutput) );\r\n        }\r\n    }\r\n    \r\n    function ETHtoOUSD(uint OUSDOutput) public payable{\r\n        \r\n        //Buy OUSD and give it to user\r\n        uint OUSDbought = ethToToken(OUSDAddress);\r\n        \r\n        //send OUSD from user to OUSDcontract\r\n        if(OUSDOutput == 0){\r\n            //send all output from uniswap to OUSD contract\r\n            require( Token(OUSDAddress).transferFrom(msg.sender, OUSDAddress, OUSDbought) , \"Couldnt transfer OUSD from user to OUSD contract\");\r\n        \r\n        }else{\r\n            //send only some output from uniswap to OUSD contract, send only \"OUSDOutput\" amount.\r\n            require( Token(OUSDAddress).transferFrom(msg.sender, OUSDAddress, OUSDOutput) , \"Couldnt transfer OUSD from user to OUSD contract\");\r\n        }\r\n    }\r\n    \r\n    function OUSDtoAsset(address AssetAddress, uint OUSDInput, uint AssetOutput) public {\r\n        \r\n         //transfer ousd from user to this contract\r\n        require( Token(OUSDAddress).transferFrom(msg.sender, address(this), OUSDInput), \"Could not move OUSD to this contract, no approval?\");\r\n        \r\n        //trade OUSD for Asset and send asset to user\r\n        uint AssetBought =  tokenToToken(OUSDInput, OUSDAddress, AssetAddress);\r\n        \r\n        if(AssetOutput == 0){\r\n            //send all asset from user to asset contract\r\n            require( Token(AssetAddress).transferFrom(msg.sender, AssetAddress, AssetBought), \"Could not transfer Asset to Asset contract.\");\r\n\r\n        }else{\r\n            //send some asset from user to asset contract\r\n            require( Token(AssetAddress).transferFrom(msg.sender, AssetAddress, AssetOutput), \"Could not transfer Asset to Asset contract.\");\r\n        }\r\n    }\r\n    \r\n    function AssettoETH(address AssetAddress, uint AssetInput, uint ETHOutput) public {\r\n        \r\n        //transfer Asset from user to this contract\r\n        require( Token(AssetAddress).transferFrom(msg.sender, address(this), AssetInput), \"Could not move Asset to this contract, no approval?\");\r\n        \r\n        //transfer Asset from this contract to uniswap\r\n        uint ethReceived = tokenToEthAsset(AssetAddress, AssetInput);\r\n       \r\n        //send eth to Asset contract\r\n        if(ETHOutput == 0){\r\n            //send all output from uniswap to Asset contract\r\n            Token(AssetAddress).getTokens.value(ethReceived)(msg.sender);\r\n            \r\n        }else{\r\n            //send only some output from uniswap to Asset contract, send only \"ETHOutput\" amount.\r\n            Token(AssetAddress).getTokens.value(ETHOutput)(msg.sender);\r\n            msg.sender.transfer( ethReceived.sub(ETHOutput) );\r\n        }\r\n    }\r\n    \r\n    function AssettoOUSD(address AssetAddress, uint AssetInput, uint OUSDOutput) public {\r\n        \r\n        //transfer Asset from user to this contract\r\n        require( Token(AssetAddress).transferFrom(msg.sender, address(this), AssetInput), \"Could not move Asset to this contract, no approval?\");\r\n        \r\n        //trade Asset for OUSD and send OUSD to user\r\n        uint OUSDBought = tokenToToken(AssetInput, AssetAddress, OUSDAddress);\r\n        \r\n        if(OUSDOutput == 0){\r\n            //send all OUSD from user to asset contract\r\n            require( Token(OUSDAddress).transferFrom(msg.sender, AssetAddress, OUSDBought), \"Could not transfer OUSD to Asset contract.\");\r\n\r\n        }else{\r\n            //send some OUSD from user to asset contract\r\n            require( Token(OUSDAddress).transferFrom(msg.sender, AssetAddress, OUSDOutput), \"Could not transfer OUSD to Asset contract.\");\r\n        }\r\n    }\r\n    \r\n    function getStuckTokens(address _tokenAddress) public {\r\n        Token(_tokenAddress).transfer(primary(), Token(_tokenAddress).balanceOf(address(this)));\r\n    }\r\n    \r\n    function getStuckETH() public {\r\n        primary().transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"AssetInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHOutput\",\"type\":\"uint256\"}],\"name\":\"AssettoETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"AssetInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OUSDOutput\",\"type\":\"uint256\"}],\"name\":\"AssettoOUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"OUSDOutput\",\"type\":\"uint256\"}],\"name\":\"ETHtoOUSD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUSDAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"OUSDInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AssetOutput\",\"type\":\"uint256\"}],\"name\":\"OUSDtoAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"OUSDInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ETHOutput\",\"type\":\"uint256\"}],\"name\":\"OUSDtoETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"AssetAddress\",\"type\":\"address\"}],\"name\":\"isitApproved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Arb","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://834dcd48bd05daddb91db746bec21d46db5e1a1a444121e138312b0063b6a3a7"}]}