{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/modules/Ownable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Fraction.sol\r\n\r\npragma solidity =0.5.16;\r\n    /**\r\n     * @dev Implementation of a Fraction number operation library.\r\n     */\r\nlibrary Fraction {\r\n//    using Fraction for fractionNumber;\r\n    int256 constant private sqrtNum = 1<<120;\r\n    int256 constant private shl = 80;\r\n    uint8 constant private PRECISION   = 32;  // fractional bits\r\n    uint256 constant private FIXED_ONE = uint256(1) << PRECISION; // 0x100000000\r\n    uint256 constant private FIXED_TWO = uint256(2) << PRECISION; // 0x200000000\r\n    uint256 constant private MAX_VAL   = uint256(1) << (256 - PRECISION); // 0x0000000100000000000000000000000000000000000000000000000000000000\r\n\r\n    struct fractionNumber{\r\n        int256 numerator;\r\n        int256 denominator;\r\n    }\r\n    /**\r\n     * @dev Check if fraction is negative.\r\n     */\r\n    function isNeg(fractionNumber memory a)  internal pure returns (bool) {\r\n\t    return a.numerator<0 != a.denominator < 0;\r\n    }\r\n    /**\r\n     * @dev fraction absolute value operator.\r\n     */\r\n    function abs(fractionNumber memory a) internal pure returns (fractionNumber memory){\r\n        if (a.numerator<0){\r\n            a.numerator = -a.numerator;\r\n        }\r\n        if(a.denominator<0){\r\n            a.denominator = -a.denominator;\r\n        }\r\n        return a;\r\n    }\r\n    /**\r\n     * @dev fraction reciprocal operator.\r\n     */\r\n    function invert(fractionNumber memory a) internal pure returns (fractionNumber memory){\r\n        return fractionNumber(a.denominator,a.numerator);\r\n    }\r\n    /**\r\n     * @dev fraction square root operator.\r\n     */\r\n    function sqrt(fractionNumber memory a) internal pure returns (fractionNumber memory) {\r\n        require(a.numerator>=0 && a.denominator>=0,\"Sqrt must input a positive value\");\r\n        return fractionNumber(int256(sqrt(uint256(a.numerator))),int256(sqrt(uint256(a.denominator))));\r\n    }\r\n    /**\r\n     * @dev fraction division operator.\r\n     */\r\n    function div(fractionNumber memory a,fractionNumber memory b) internal pure returns (fractionNumber memory) {\r\n        return safeFractionNumber(fractionDiv(a,b));\r\n    }\r\n    /**\r\n     * @dev fraction Multiplication operator.\r\n     */\r\n    function mul(fractionNumber memory a,fractionNumber memory b) internal pure returns (fractionNumber memory) {\r\n        return safeFractionNumber(fractionMul(a,b));\r\n    }\r\n    /**\r\n     * @dev fraction Addition operator.\r\n     */\r\n    function add(fractionNumber memory a,fractionNumber memory b) internal pure returns (fractionNumber memory)  {\r\n        return safeFractionNumber(fractionAdd(a,b));\r\n    }\r\n    /**\r\n     * @dev fraction Subtraction operator.\r\n     */\r\n    function sub(fractionNumber memory a,fractionNumber memory b) internal pure returns (fractionNumber memory)  {\r\n        return safeFractionNumber(fractionSub(a,b));\r\n    }\r\n\r\n    function zoomOut(fractionNumber memory a, int256 rate) internal pure returns (fractionNumber memory) {\r\n        require(a.denominator>rate,\"fraction number is overflow\");\r\n        return fractionNumber(a.numerator/rate,a.denominator/rate);\r\n    }\r\n    function zoomin(fractionNumber memory a, int256 rate) internal pure returns (fractionNumber memory) {\r\n        return safeFractionNumber(fractionNumber(a.numerator*rate,a.denominator*rate));\r\n    }\r\n    /**\r\n     * @dev fraction Natural logarithm operator.\r\n     */\r\n    function ln(fractionNumber memory a)  internal pure returns (fractionNumber memory) {\r\n        uint256 _x = uint256((a.numerator << PRECISION)/a.denominator);\r\n        return fractionNumber(int256(fixedLoge(_x)),int256(FIXED_ONE));\r\n    }\r\n\r\n    function safeFractionNumber(fractionNumber memory a) internal pure returns (fractionNumber memory) {\r\n        int256 num = a.numerator >= 0 ? a.numerator : -a.numerator;\r\n        int256 deno = a.denominator >= 0 ? a.denominator : -a.denominator;\r\n        if(deno>num){\r\n            if (deno>sqrtNum) {\r\n                num = deno>>shl;\r\n                return zoomOut(a,num);\r\n            }\r\n        } else {\r\n            if (num>sqrtNum) {\r\n                num = num>>shl;\r\n                return zoomOut(a,num);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n    function fractionDiv(fractionNumber memory a,fractionNumber memory b) internal pure returns (fractionNumber memory) {\r\n        return fractionNumber(a.numerator*b.denominator,a.denominator*b.numerator);\r\n    }\r\n    function fractionMul(fractionNumber memory a,fractionNumber memory b) internal pure returns (fractionNumber memory) {\r\n        return fractionNumber(a.numerator*b.numerator,a.denominator*b.denominator);\r\n    }\r\n    function fractionAdd(fractionNumber memory a,fractionNumber memory b) internal pure returns (fractionNumber memory) {\r\n        return fractionNumber(a.numerator*b.denominator+b.numerator*a.denominator,a.denominator*b.denominator);\r\n    }\r\n    function fractionSub(fractionNumber memory a,fractionNumber memory b) internal pure returns (fractionNumber memory) {\r\n        return fractionNumber(a.numerator*b.denominator-b.numerator*a.denominator,a.denominator*b.denominator);\r\n    }\r\n    /**\r\n     * @dev Standard normal cumulative distribution function\r\n     */\r\n    function normsDist(fractionNumber memory xNum) internal pure returns (fractionNumber memory) {\r\n        bool _isNeg = isNeg(xNum);\r\n        if (_isNeg) {\r\n            xNum = abs(xNum);\r\n        }\r\n        int256 value = xNum.numerator/xNum.denominator;\r\n        if (value > 10){\r\n            return _isNeg ? fractionNumber(0,1) : fractionNumber(1,1);\r\n        }\r\n        fractionNumber[5] memory b = [\r\n            fractionNumber(31938153,1e8),\r\n            fractionNumber(-356563782,1e9),\r\n            fractionNumber(1781477937,1e9),\r\n            fractionNumber(-1821255978,1e9),\r\n            fractionNumber(1330274429,1e9)];\r\n        fractionNumber memory t = mul(xNum,fractionNumber(2316419, 1e7));\r\n        t.numerator += t.denominator;\r\n        t = invert(t);\r\n        xNum = mul(xNum,xNum);\r\n        xNum.denominator *= -2;\r\n        xNum = exp(xNum);\r\n        xNum = mul(fractionNumber(39894228040143267793,1e20),xNum);\r\n        fractionNumber memory secondArg = fractionNumber(0,1);\r\n        fractionNumber memory tt = t;\r\n        for (uint256 i = 0; i < b.length; i++) {\r\n            secondArg = add(secondArg,mul(b[i],tt));\r\n            tt = mul(tt,t);\r\n        }\r\n        xNum = mul(xNum,secondArg);\r\n        if (!_isNeg) {\r\n            xNum.numerator = xNum.denominator - xNum.numerator;\r\n        }\r\n        return xNum;\r\n    }\r\n    function pow(fractionNumber memory _x,fractionNumber memory _y) internal pure returns (fractionNumber memory){\r\n        _x = mul(ln(_x),_y);\r\n        return exp(_x);\r\n    }\r\n    /**\r\n     * @dev fraction exponential operator.\r\n     */\r\n    function exp(fractionNumber memory _x) internal pure returns (fractionNumber memory){\r\n        bool _isNeg = isNeg(_x);\r\n        if (_isNeg) {\r\n            _x = abs(_x);\r\n        }\r\n        _x = safeFractionNumber(_x);\r\n        _x.numerator = _x.numerator << PRECISION;\r\n        _x =  fractionExp_sub(_x);\r\n        if (_isNeg) {\r\n            _x = invert(_x);\r\n        }\r\n        return _x;\r\n    }\r\n    /**\r\n     * @dev an auxiliary function for fraction e exponential operator.\r\n     *      recursive function, calculate exp(x) = exp(x/2)*exp(x-x/2)\r\n     */\r\n    function fractionExp_sub(fractionNumber memory _x) internal pure returns (fractionNumber memory){\r\n        uint256 intValue = uint256(_x.numerator/_x.denominator);\r\n        if (intValue > 0x386bfdba29){\r\n            fractionNumber memory _x1 = fractionNumber(_x.numerator/2,_x.denominator);\r\n            fractionNumber memory _x2 = fractionNumber(_x.numerator-_x1.numerator,_x.denominator);\r\n            _x1 = fractionExp_sub(_x1);\r\n            _x2 = fractionExp_sub(_x2);\r\n            return mul(_x1,_x2);\r\n        }else{\r\n            return fractionNumber(int256(fixedExp(intValue)),int256(FIXED_ONE));\r\n        }\r\n    }\r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n    function ln(uint256 _x)  internal pure returns (fractionNumber memory) {\r\n        _x = _x << PRECISION;\r\n        return fractionNumber(int256(fixedLoge(_x)),int256(FIXED_ONE));\r\n    }\r\n        /**\r\n        input range:\r\n            [0x100000000,uint256_max]\r\n        output range:\r\n            [0, 0x9b43d4f8d6]\r\n\r\n        This method asserts outside of bounds\r\n\r\n    */\r\n    function fixedLoge(uint256 _x) internal pure returns (uint256 logE) {\r\n        /*\r\n        Since `fixedLog2_min` output range is max `0xdfffffffff`\r\n        (40 bits, or 5 bytes), we can use a very large approximation\r\n        for `ln(2)`. This one is used since it’s the max accuracy\r\n        of Python `ln(2)`\r\n\r\n        0xb17217f7d1cf78 = ln(2) * (1 << 56)\r\n\r\n        */\r\n        //Cannot represent negative numbers (below 1)\r\n        require(_x >= FIXED_ONE,\"loge function input is too small\");\r\n\r\n        uint256 _log2 = fixedLog2(_x);\r\n        logE = (_log2 * 0xb17217f7d1cf78) >> 56;\r\n    }\r\n\r\n    /**\r\n        Returns log2(x >> 32) << 32 [1]\r\n        So x is assumed to be already upshifted 32 bits, and\r\n        the result is also upshifted 32 bits.\r\n\r\n        [1] The function returns a number which is lower than the\r\n        actual value\r\n\r\n        input-range :\r\n            [0x100000000,uint256_max]\r\n        output-range:\r\n            [0,0xdfffffffff]\r\n\r\n        This method asserts outside of bounds\r\n\r\n    */\r\n    function fixedLog2(uint256 _x) internal pure returns (uint256) {\r\n        // Numbers below 1 are negative.\r\n        require( _x >= FIXED_ONE,\"Log2 input is too small\");\r\n\r\n        uint256 hi = 0;\r\n        while (_x >= FIXED_TWO) {\r\n            _x >>= 1;\r\n            hi += FIXED_ONE;\r\n        }\r\n\r\n        for (uint8 i = 0; i < PRECISION; ++i) {\r\n            _x = (_x * _x) / FIXED_ONE;\r\n            if (_x >= FIXED_TWO) {\r\n                _x >>= 1;\r\n                hi += uint256(1) << (PRECISION - 1 - i);\r\n            }\r\n        }\r\n\r\n        return hi;\r\n    }\r\n\r\n    /**\r\n        fixedExp is a ‘protected’ version of `fixedExpUnsafe`, which\r\n        asserts instead of overflows\r\n    */\r\n    function fixedExp(uint256 _x) internal pure returns (uint256) {\r\n        require(_x <= 0x386bfdba29,\"exp function input is overflow\");\r\n        return fixedExpUnsafe(_x);\r\n    }\r\n       /**\r\n        fixedExp\r\n        Calculates e^x according to maclauren summation:\r\n\r\n        e^x = 1+x+x^2/2!...+x^n/n!\r\n\r\n        and returns e^(x>>32) << 32, that is, upshifted for accuracy\r\n\r\n        Input range:\r\n            - Function ok at    <= 242329958953\r\n            - Function fails at >= 242329958954\r\n\r\n        This method is is visible for testcases, but not meant for direct use.\r\n\r\n        The values in this method been generated via the following python snippet:\r\n\r\n        def calculateFactorials():\r\n            “”\"Method to print out the factorials for fixedExp”“”\r\n\r\n            ni = []\r\n            ni.append( 295232799039604140847618609643520000000) # 34!\r\n            ITERATIONS = 34\r\n            for n in range( 1,  ITERATIONS,1 ) :\r\n                ni.append(math.floor(ni[n - 1] / n))\r\n            print( “\\n        “.join([“xi = (xi * _x) >> PRECISION;\\n        res += xi * %s;” % hex(int(x)) for x in ni]))\r\n\r\n    */\r\n    function fixedExpUnsafe(uint256 _x) internal pure returns (uint256) {\r\n\r\n        uint256 xi = FIXED_ONE;\r\n        uint256 res = 0xde1bc4d19efcac82445da75b00000000 * xi;\r\n\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xde1bc4d19efcb0000000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x6f0de268cf7e58000000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x2504a0cd9a7f72000000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x9412833669fdc800000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x1d9d4d714865f500000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x4ef8ce836bba8c0000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xb481d807d1aa68000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x16903b00fa354d000000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x281cdaac677b3400000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x402e2aad725eb80000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x5d5a6c9f31fe24000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x7c7890d442a83000000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x9931ed540345280000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xaf147cf24ce150000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xbac08546b867d000000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xbac08546b867d00000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xafc441338061b8000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x9c3cabbc0056e000000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x839168328705c80000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x694120286c04a0000;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x50319e98b3d2c400;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x3a52a1e36b82020;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x289286e0fce002;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x1b0c59eb53400;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x114f95b55400;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0xaa7210d200;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x650139600;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x39b78e80;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x1fd8080;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x10fbc0;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x8c40;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x462;\r\n        xi = (xi * _x) >> PRECISION;\r\n        res += xi * 0x22;\r\n\r\n        return res / 0xde1bc4d19efcac82445da75b00000000;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IVolatility.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IVolatility {\r\n    function calculateIv(uint32 underlying,uint8 optType,uint256 expiration,uint256 currentPrice,uint256 strikePrice)external view returns (uint256,uint256);\r\n}\r\ncontract ImportVolatility is Ownable{\r\n    IVolatility internal _volatility;\r\n    function getVolatilityAddress() public view returns(address){\r\n        return address(_volatility);\r\n    }\r\n    function setVolatilityAddress(address volatility)public onlyOwner{\r\n        _volatility = IVolatility(volatility);\r\n    }\r\n}\r\n\r\n// File: contracts/optionsPrice.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n/**\r\n * @title Options price calculation contract.\r\n * @dev calculate options' price, using B-S formulas.\r\n *\r\n */\r\ncontract OptionsPrice is ImportVolatility{\r\n    using Fraction for Fraction.fractionNumber;\r\n    // one year seconds\r\n    int256 constant internal Year = 365 days;\r\n    // constant value in B-S formulas.\r\n    int256 constant internal YearSqrt = 561569230;\r\n    // rate in B-S formulas.\r\n    Fraction.fractionNumber internal rate = Fraction.fractionNumber(0,1000);\r\n\r\n    Fraction.fractionNumber internal ratioR2 = Fraction.fractionNumber(4,1);\r\n    /**\r\n     * @dev constructor function , setting contract address.\r\n     * @param ivContract implied volatility contract address\r\n     */\r\n    constructor (address ivContract) public{\r\n        setVolatilityAddress(ivContract);\r\n    }\r\n\r\n    /**\r\n     * @dev get B_S formulas r\r\n     */\r\n    function getRate()public view returns(int256,int256){\r\n        return (rate.numerator,rate.denominator);\r\n    }\r\n    /**\r\n     * @dev set B_S formulas r\r\n     */\r\n    function setRate(int256 numerator,int256 denominator)public onlyOwner{\r\n        rate.numerator = numerator;\r\n        rate.denominator = denominator;\r\n    }\r\n        /**\r\n     * @dev get options price ratio for R2\r\n     */\r\n    function getRatioR2()public view returns(int256,int256){\r\n        return (ratioR2.numerator,ratioR2.denominator);\r\n    }\r\n    /**\r\n     * @dev set options price ratio for R2\r\n     */\r\n    function setRatioR2(int256 numerator,int256 denominator)public onlyOwner{\r\n        ratioR2.numerator = numerator;\r\n        ratioR2.denominator = denominator;\r\n    }\r\n    /**\r\n     * @dev calculate option's price using B_S formulas\r\n     * @param currentPrice current underlying price.\r\n     * @param strikePrice option's strike price.\r\n     * @param expiration option's expiration left time. Equal option's expiration timestamp - now.\r\n     * @param underlying option's underlying id, 1 for BTC, 2 for ETH.\r\n     * @param optType option's type, 0 for CALL, 2 for PUT.\r\n     */\r\n    function getOptionsPrice(uint256 currentPrice, uint256 strikePrice, uint256 expiration,uint32 underlying,uint8 optType)public view returns (uint256){\r\n        (uint256 ivNumerator,uint256 ivDenominator) = _volatility.calculateIv(underlying,optType,expiration,currentPrice,strikePrice);\r\n        Fraction.fractionNumber memory _iv = Fraction.fractionNumber(int256(ivNumerator),int256(ivDenominator));\r\n        if (optType == 0) {\r\n            return callOptionsPrice(currentPrice,strikePrice,expiration,rate,_iv);\r\n        }else if (optType == 1){\r\n            return putOptionsPrice(currentPrice,strikePrice,expiration,rate,_iv);\r\n        }else{\r\n            require(optType<2,\" Must input 0 for call option or 1 for put option\");\r\n        }\r\n    }\r\n    /**\r\n     * @dev calculate option's price using B_S formulas with user input iv.\r\n     * @param currentPrice current underlying price.\r\n     * @param strikePrice option's strike price.\r\n     * @param expiration option's expiration left time. Equal option's expiration timestamp - now.\r\n     * @param ivNumerator user input iv numerator.\r\n     * @param ivDenominator user input iv denominator.\r\n     * @param optType option's type, 0 for CALL, 2 for PUT.\r\n     */\r\n    function getOptionsPrice_iv(uint256 currentPrice, uint256 strikePrice, uint256 expiration,\r\n            uint256 ivNumerator,uint256 ivDenominator,uint8 optType)public view returns (uint256){\r\n        Fraction.fractionNumber memory _iv = Fraction.fractionNumber(int256(ivNumerator),int256(ivDenominator));\r\n        if (optType == 0) {\r\n            return callOptionsPrice(currentPrice,strikePrice,expiration,rate,_iv);\r\n        }else if (optType == 1){\r\n            return putOptionsPrice(currentPrice,strikePrice,expiration,rate,_iv);\r\n        }else{\r\n            require(optType<2,\" Must input 0 for call option or 1 for put option\");\r\n        }\r\n    }\r\n    /**\r\n     * @dev An auxiliary function, calculate parameter d1 and d2 in B_S formulas.\r\n     * @param currentPrice current underlying price.\r\n     * @param strikePrice option's strike price.\r\n     * @param expiration option's expiration left time. Equal option's expiration timestamp - now.\r\n     * @param r parameter r in B_S formulas.\r\n     * @param derta implied volatility value in B-S formulas.\r\n     */\r\n    function calculateD1D2(uint256 currentPrice, uint256 strikePrice, uint256 expiration,\r\n         Fraction.fractionNumber memory r, Fraction.fractionNumber memory derta)\r\n            internal pure returns (Fraction.fractionNumber memory, Fraction.fractionNumber memory) {\r\n        Fraction.fractionNumber memory d1 = (currentPrice == strikePrice) ? Fraction.fractionNumber(0,1) :\r\n            Fraction.ln(currentPrice).sub(Fraction.ln(strikePrice));\r\n        Fraction.fractionNumber memory derta2 = derta.mul(derta);\r\n        derta2.denominator = derta2.denominator*2;\r\n        derta2 = derta2.add(r);\r\n        derta2 = derta2.mul(Fraction.fractionNumber(int256(expiration),Year));\r\n        d1 = d1.add(derta2);\r\n        derta2 = Fraction.fractionNumber(int256(Fraction.sqrt(expiration*1e10)),YearSqrt).mul(derta);\r\n        d1 = d1.div(derta2);\r\n        derta2 = d1.sub(derta2);\r\n        return (d1, derta2);\r\n    }\r\n    /**\r\n     * @dev An auxiliary function, calculate put option price using B_S formulas.\r\n     * @param currentPrice current underlying price.\r\n     * @param strikePrice option's strike price.\r\n     * @param expiration option's expiration left time. Equal option's expiration timestamp - now.\r\n     * @param r parameter r in B_S formulas.\r\n     * @param derta implied volatility value in B-S formulas.\r\n     */\r\n    //L*pow(e,-rT)*(1-N(d2)) - S*(1-N(d1))\r\n    function putOptionsPrice(uint256 currentPrice, uint256 strikePrice, uint256 expiration,\r\n            Fraction.fractionNumber memory r, Fraction.fractionNumber memory derta)\r\n                internal pure returns (uint256) {\r\n       (Fraction.fractionNumber memory d1, Fraction.fractionNumber memory d2) = calculateD1D2(currentPrice, strikePrice, expiration, r, derta);\r\n        d1 = d1.normsDist();\r\n        d2 = d2.normsDist();\r\n        d1.numerator = (d1.denominator - d1.numerator)*int256(currentPrice);\r\n        d2.numerator = (d2.denominator - d2.numerator)*int256(strikePrice);\r\n        if (r.numerator == 0){\r\n            d1 = d2.sub(d1);\r\n        }else{\r\n            r = r.mul(Fraction.fractionNumber(int256(expiration),Year));\r\n    //        r = r.exp().invert();\r\n            d1 = d2.div(r.exp()).sub(d1);\r\n        }\r\n        return uint256(d1.numerator/d1.denominator);\r\n    }\r\n    /**\r\n     * @dev An auxiliary function, calculate call option price using B_S formulas.\r\n     * @param currentPrice current underlying price.\r\n     * @param strikePrice option's strike price.\r\n     * @param expiration option's expiration left time. Equal option's expiration timestamp - now.\r\n     * @param r parameter r in B_S formulas.\r\n     * @param derta implied volatility value in B-S formulas.\r\n     */\r\n    //S*N(d1)-L*pow(e,-rT)*N(d2)\r\n    function callOptionsPrice(uint256 currentPrice, uint256 strikePrice, uint256 expiration,\r\n            Fraction.fractionNumber memory r, Fraction.fractionNumber memory derta)\r\n                internal pure returns (uint256) {\r\n       (Fraction.fractionNumber memory d1, Fraction.fractionNumber memory d2) = calculateD1D2(currentPrice, strikePrice, expiration, r, derta);\r\n        d1 = d1.normsDist();\r\n        d2 = d2.normsDist();\r\n        d1.numerator = d1.numerator*int256(currentPrice);\r\n        d2.numerator = d2.numerator*int256(strikePrice);\r\n//        r = r.exp().invert();\r\n        if (r.numerator == 0){\r\n            d1 = d1.sub(d2);\r\n        }else{\r\n            r = r.mul(Fraction.fractionNumber(int256(expiration),Year));\r\n    //        r = r.exp().invert();\r\n            d1 = d1.sub(d2.div(r.exp()));\r\n        }\r\n        return uint256(d1.numerator/d1.denominator);\r\n    }\r\n    function calOptionsPriceRatio(uint256 selfOccupied,uint256 totalOccupied,uint256 totalCollateral) public view returns (uint256,uint256){\r\n        //r1 + 0.5\r\n        if (selfOccupied*2<=totalOccupied){\r\n            return(1,1);\r\n        }\r\n        //r1 + 0.5\r\n        Fraction.fractionNumber memory r1 = Fraction.fractionNumber(int256(selfOccupied*2+totalOccupied),int256(totalOccupied*2));\r\n        Fraction.fractionNumber memory r2 = Fraction.fractionNumber(int256(totalOccupied),int256(totalCollateral)).mul(ratioR2);\r\n        //pow(r1,r2)\r\n        r1 = r1.pow(r2);\r\n        return (uint256(r1.numerator),uint256(r1.denominator));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ivContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"selfOccupied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOccupied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"}],\"name\":\"calOptionsPriceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"underlying\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"optType\",\"type\":\"uint8\"}],\"name\":\"getOptionsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ivNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ivDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"optType\",\"type\":\"uint8\"}],\"name\":\"getOptionsPrice_iv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRatioR2\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVolatilityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int256\",\"name\":\"numerator\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"denominator\",\"type\":\"int256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int256\",\"name\":\"numerator\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"denominator\",\"type\":\"int256\"}],\"name\":\"setRatioR2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"volatility\",\"type\":\"address\"}],\"name\":\"setVolatilityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OptionsPrice","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f9c02ed4394ebf36294f0116d78ecdc61ae5e5ef","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7059684da89bb5e688e7cd2203b1d7beeec380a99f9333a4cd574ec0f8fc687b"}]}