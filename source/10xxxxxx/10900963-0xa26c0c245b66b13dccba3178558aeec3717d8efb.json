{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/UInt256Lib.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\n/**\r\n * @title Various utilities useful for uint256.\r\n */\r\nlibrary UInt256Lib {\r\n\r\n    uint256 private constant MAX_INT256 = ~(uint256(1) << 255);\r\n\r\n    /**\r\n     * @dev Safely converts a uint256 to an int256.\r\n     */\r\n    function toInt256Safe(uint256 a)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(a <= MAX_INT256);\r\n        return int256(a);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeMathInt.sol\r\n\r\n/*\r\nMIT License\r\n\r\nCopyright (c) 2018 requestnetwork\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations for int256 with overflow safety checks.\r\n */\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/ISeigniorageShares.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\ninterface ISeigniorageShares {\r\n    function setDividendPoints(address account, uint256 totalDividends) external returns (bool);\r\n    function mintShares(address account, uint256 amount) external returns (bool);\r\n    function lastDividendPoints(address who) external view returns (uint256);\r\n    function externalRawBalanceOf(address who) external view returns (uint256);\r\n    function externalTotalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: zos-lib/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  function initialize(string name, string symbol, uint8 decimals) public initializer {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Initializable {\r\n  address private _owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function initialize(address sender) public initializer {\r\n    _owner = sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(_owner);\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/dollars.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IDollarPolicy {\r\n    function getUsdSharePrice() external view returns (uint256 price);\r\n}\r\n\r\n/*\r\n *  Dollar ERC20\r\n */\r\n\r\ncontract Dollars is ERC20Detailed, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event LogContraction(uint256 indexed epoch, uint256 dollarsToBurn);\r\n    event LogRebasePaused(bool paused);\r\n    event LogBurn(address indexed from, uint256 value);\r\n    event LogClaim(address indexed from, uint256 value);\r\n    event LogMonetaryPolicyUpdated(address monetaryPolicy);\r\n\r\n    // Used for authentication\r\n    address public monetaryPolicy;\r\n    address public sharesAddress;\r\n\r\n    modifier onlyMonetaryPolicy() {\r\n        require(msg.sender == monetaryPolicy);\r\n        _;\r\n    }\r\n\r\n    // Precautionary emergency controls.\r\n    bool public rebasePaused;\r\n\r\n    modifier whenRebaseNotPaused() {\r\n        require(!rebasePaused);\r\n        _;\r\n    }\r\n\r\n    // coins needing to be burned (9 decimals)\r\n    uint256 private _remainingDollarsToBeBurned;\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    uint256 private constant DECIMALS = 9;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_DOLLAR_SUPPLY = 1 * 10**6 * 10**DECIMALS;\r\n    uint256 private _maxDiscount;\r\n\r\n    modifier validDiscount(uint256 discount) {\r\n        require(discount <= _maxDiscount, 'DISCOUNT_TOO_HIGH');\r\n        _;\r\n    }\r\n\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);  // (2^128) - 1\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    uint256 private constant POINT_MULTIPLIER = 10 ** 9;\r\n\r\n    uint256 private _totalDividendPoints;\r\n    uint256 private _unclaimedDividends;\r\n\r\n    ISeigniorageShares shares;\r\n\r\n    mapping(address => uint256) private _dollarBalances;\r\n\r\n    // This is denominated in Dollars, because the cents-dollars conversion might change before\r\n    // it's fully paid.\r\n    mapping (address => mapping (address => uint256)) private _allowedDollars;\r\n\r\n    IDollarPolicy dollarPolicy;\r\n    uint256 public burningDiscount; // percentage (10 ** 9 Decimals)\r\n    uint256 public defaultDiscount; // discount on first negative rebase\r\n    uint256 public defaultDailyBonusDiscount; // how much the discount increases per day for consecutive contractions\r\n\r\n    uint256 public minimumBonusThreshold;\r\n\r\n    bool reEntrancyMutex;\r\n    bool reEntrancyRebaseMutex;\r\n\r\n    address public uniswapV2Pool;\r\n\r\n    /**\r\n     * @param monetaryPolicy_ The address of the monetary policy contract to use for authentication.\r\n     */\r\n    function setMonetaryPolicy(address monetaryPolicy_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        monetaryPolicy = monetaryPolicy_;\r\n        dollarPolicy = IDollarPolicy(monetaryPolicy_);\r\n        emit LogMonetaryPolicyUpdated(monetaryPolicy_);\r\n    }\r\n\r\n    function setUniswapV2SyncAddress(address uniswapV2Pair_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uniswapV2Pool = uniswapV2Pair_;\r\n    }\r\n\r\n    function test()\r\n        external\r\n        onlyOwner\r\n    {\r\n        uniswapV2Pool.call(abi.encodeWithSignature('sync()'));\r\n    }\r\n\r\n    function setBurningDiscount(uint256 discount)\r\n        external\r\n        onlyOwner\r\n        validDiscount(discount)\r\n    {\r\n        burningDiscount = discount;\r\n    }\r\n\r\n    // amount in is 10 ** 9 decimals\r\n    function burn(uint256 amount)\r\n        external\r\n        updateAccount(msg.sender)\r\n    {\r\n        require(!reEntrancyMutex, \"RE-ENTRANCY GUARD MUST BE FALSE\");\r\n        reEntrancyMutex = true;\r\n\r\n        require(amount != 0, 'AMOUNT_MUST_BE_POSITIVE');\r\n        require(_remainingDollarsToBeBurned != 0, 'COIN_BURN_MUST_BE_GREATER_THAN_ZERO');\r\n        require(amount <= _dollarBalances[msg.sender], 'INSUFFICIENT_DOLLAR_BALANCE');\r\n        require(amount <= _remainingDollarsToBeBurned, 'AMOUNT_MUST_BE_LESS_THAN_OR_EQUAL_TO_REMAINING_COINS');\r\n\r\n        _burn(msg.sender, amount);\r\n\r\n        reEntrancyMutex = false;\r\n    }\r\n\r\n    function setDefaultDiscount(uint256 discount)\r\n        external\r\n        onlyOwner\r\n        validDiscount(discount)\r\n    {\r\n        defaultDiscount = discount;\r\n    }\r\n\r\n    function setMaxDiscount(uint256 discount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _maxDiscount = discount;\r\n    }\r\n\r\n    function setDefaultDailyBonusDiscount(uint256 discount)\r\n        external\r\n        onlyOwner\r\n        validDiscount(discount)\r\n    {\r\n        defaultDailyBonusDiscount = discount;\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses or unpauses the execution of rebase operations.\r\n     * @param paused Pauses rebase operations if this is true.\r\n     */\r\n    function setRebasePaused(bool paused)\r\n        external\r\n        onlyOwner\r\n    {\r\n        rebasePaused = paused;\r\n        emit LogRebasePaused(paused);\r\n    }\r\n\r\n    // action of claiming funds\r\n    function claimDividends(address account) external updateAccount(account) returns (uint256) {\r\n        uint256 owing = dividendsOwing(account);\r\n        return owing;\r\n    }\r\n\r\n    function setMinimumBonusThreshold(uint256 minimum)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(minimum < _totalSupply, 'MINIMUM_TOO_HIGH');\r\n        minimumBonusThreshold = minimum;\r\n    }\r\n\r\n    /**\r\n     * @dev Notifies Dollars contract about a new rebase cycle.\r\n     * @param supplyDelta The number of new dollar tokens to add into circulation via expansion.\r\n     * @return The total number of dollars after the supply adjustment.\r\n     */\r\n    function rebase(uint256 epoch, int256 supplyDelta)\r\n        external\r\n        onlyMonetaryPolicy\r\n        whenRebaseNotPaused\r\n        returns (uint256)\r\n    {\r\n        reEntrancyRebaseMutex = true;\r\n        uint256 burningDefaultDiscount = burningDiscount.add(defaultDailyBonusDiscount);\r\n\r\n        if (supplyDelta == 0) {\r\n            if (_remainingDollarsToBeBurned > minimumBonusThreshold) {\r\n\r\n                burningDiscount = burningDefaultDiscount > _maxDiscount ? _maxDiscount : burningDefaultDiscount;\r\n            } else {\r\n                burningDiscount = defaultDiscount;\r\n            }\r\n\r\n            emit LogRebase(epoch, _totalSupply);\r\n        } else if (supplyDelta < 0) {\r\n            uint256 dollarsToBurn = uint256(supplyDelta.abs());\r\n            uint256 tenPercent = _totalSupply.div(10);\r\n\r\n            if (dollarsToBurn > tenPercent) { // maximum contraction is 10% of the total USD Supply\r\n                dollarsToBurn = tenPercent;\r\n            }\r\n\r\n            if (dollarsToBurn.add(_remainingDollarsToBeBurned) > _totalSupply) {\r\n                dollarsToBurn = _totalSupply.sub(_remainingDollarsToBeBurned);\r\n            }\r\n\r\n            if (_remainingDollarsToBeBurned > minimumBonusThreshold) {\r\n                burningDiscount = burningDefaultDiscount > _maxDiscount ?\r\n                    _maxDiscount : burningDefaultDiscount;\r\n            } else {\r\n                burningDiscount = defaultDiscount; // default 1%\r\n            }\r\n\r\n            _remainingDollarsToBeBurned = _remainingDollarsToBeBurned.add(dollarsToBurn);\r\n            emit LogContraction(epoch, dollarsToBurn);\r\n        } else {\r\n            disburse(uint256(supplyDelta));\r\n\r\n            uniswapV2Pool.call(abi.encodeWithSignature('sync()'));\r\n\r\n            emit LogRebase(epoch, _totalSupply);\r\n\r\n            if (_totalSupply > MAX_SUPPLY) {\r\n                _totalSupply = MAX_SUPPLY;\r\n            }\r\n        }\r\n\r\n        reEntrancyRebaseMutex = false;\r\n        return _totalSupply;\r\n    }\r\n\r\n    function initialize(address owner_, address seigniorageAddress)\r\n        public\r\n        initializer\r\n    {\r\n        ERC20Detailed.initialize(\"Dollars\", \"USD\", uint8(DECIMALS));\r\n        Ownable.initialize(owner_);\r\n\r\n        rebasePaused = false;\r\n        _totalSupply = INITIAL_DOLLAR_SUPPLY;\r\n\r\n        sharesAddress = seigniorageAddress;\r\n        shares = ISeigniorageShares(seigniorageAddress);\r\n\r\n        _dollarBalances[owner_] = _totalSupply;\r\n        _maxDiscount = 50 * 10 ** 9; // 50%\r\n        defaultDiscount = 1 * 10 ** 9;              // 1%\r\n        burningDiscount = defaultDiscount;\r\n        defaultDailyBonusDiscount = 1 * 10 ** 9;    // 1%\r\n        minimumBonusThreshold = 100 * 10 ** 9;    // 100 dollars is the minimum threshold. Anything above warrants increased discount\r\n\r\n        emit Transfer(address(0x0), owner_, _totalSupply);\r\n    }\r\n\r\n    function dividendsOwing(address account) public view returns (uint256) {\r\n        if (_totalDividendPoints > shares.lastDividendPoints(account)) {\r\n            uint256 newDividendPoints = _totalDividendPoints.sub(shares.lastDividendPoints(account));\r\n            uint256 sharesBalance = shares.externalRawBalanceOf(account);\r\n            return sharesBalance.mul(newDividendPoints).div(POINT_MULTIPLIER);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // auto claim modifier\r\n    // if user is owned, we pay out immedietly\r\n    // if user is not owned, we prevent them from claiming until the next rebase\r\n    modifier updateAccount(address account) {\r\n        uint256 owing = dividendsOwing(account);\r\n\r\n        if (owing != 0) {\r\n            _unclaimedDividends = _unclaimedDividends.sub(owing);\r\n            _dollarBalances[account] += owing;\r\n        }\r\n\r\n        shares.setDividendPoints(account, _totalDividendPoints);\r\n\r\n        emit LogClaim(account, owing);\r\n        _;\r\n    }\r\n\r\n     \r\n    modifier uniqueAddresses(address addr1, address addr2) {\r\n        require(addr1 != addr2, \"Addresses are not unique\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return The total number of dollars.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @param who The address to query.\r\n     * @return The balance of the specified address.\r\n     */\r\n    function balanceOf(address who)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _dollarBalances[who].add(dividendsOwing(who));\r\n    }\r\n\r\n    function getRemainingDollarsToBeBurned()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _remainingDollarsToBeBurned;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     * @return True on success, false otherwise.\r\n     */\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        uniqueAddresses(msg.sender, to)\r\n        validRecipient(to)\r\n        updateAccount(msg.sender)\r\n        updateAccount(to)\r\n        returns (bool)\r\n    {\r\n        require(!reEntrancyRebaseMutex, \"RE-ENTRANCY GUARD MUST BE FALSE\");\r\n        _dollarBalances[msg.sender] = _dollarBalances[msg.sender].sub(value);\r\n        _dollarBalances[to] = _dollarBalances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\r\n     * @param owner_ The address which owns the funds.\r\n     * @param spender The address which will spend the funds.\r\n     * @return The number of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner_, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowedDollars[owner_][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * @param from The address you want to send tokens from.\r\n     * @param to The address you want to transfer to.\r\n     * @param value The amount of tokens to be transferred.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        validRecipient(to)\r\n        updateAccount(from)\r\n        updateAccount(msg.sender)\r\n        updateAccount(to)\r\n        returns (bool)\r\n    {\r\n        require(msg.sender != from, \"Addresses are not unique\");\r\n        require(msg.sender != to, \"Addresses are not unique\");\r\n        require(!reEntrancyRebaseMutex, \"RE-ENTRANCY GUARD MUST BE FALSE\");\r\n\r\n        _allowedDollars[from][msg.sender] = _allowedDollars[from][msg.sender].sub(value);\r\n\r\n        _dollarBalances[from] = _dollarBalances[from].sub(value);\r\n        _dollarBalances[to] = _dollarBalances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\r\n     * msg.sender. This method is included for ERC20 compatibility.\r\n     * increaseAllowance and decreaseAllowance should be used instead.\r\n     * Changing an allowance with this method brings the risk that someone may transfer both\r\n     * the old and the new allowance - if they are both greater than zero - if a transfer\r\n     * transaction is mined before the later approve() call is mined.\r\n     *\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        uniqueAddresses(msg.sender, spender)\r\n        validRecipient(spender)\r\n        updateAccount(msg.sender)\r\n        updateAccount(spender)\r\n        returns (bool)\r\n    {\r\n        _allowedDollars[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner has allowed to a spender.\r\n     * This method should be used instead of approve() to avoid the double approval vulnerability\r\n     * described above.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        uniqueAddresses(msg.sender, spender)\r\n        updateAccount(msg.sender)\r\n        updateAccount(spender)\r\n        returns (bool)\r\n    {\r\n        _allowedDollars[msg.sender][spender] =\r\n            _allowedDollars[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowedDollars[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\r\n     *\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        uniqueAddresses(msg.sender, spender)\r\n        updateAccount(spender)\r\n        updateAccount(msg.sender)\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedDollars[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedDollars[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedDollars[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowedDollars[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function consultBurn(uint256 amount)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        require(amount > 0, 'AMOUNT_MUST_BE_POSITIVE');\r\n        require(burningDiscount >= 0, 'DISCOUNT_NOT_VALID');\r\n        require(_remainingDollarsToBeBurned > 0, 'COIN_BURN_MUST_BE_GREATER_THAN_ZERO');\r\n        require(amount <= _dollarBalances[msg.sender].add(dividendsOwing(msg.sender)), 'INSUFFICIENT_DOLLAR_BALANCE');\r\n        require(amount <= _remainingDollarsToBeBurned, 'AMOUNT_MUST_BE_LESS_THAN_OR_EQUAL_TO_REMAINING_COINS');\r\n\r\n        uint256 usdPerShare = dollarPolicy.getUsdSharePrice(); // 1 share = x dollars\r\n        uint256 decimals = 10 ** 9;\r\n        uint256 percentDenominator = 100;\r\n        usdPerShare = usdPerShare.sub(usdPerShare.mul(burningDiscount).div(percentDenominator * decimals)); // 10^9\r\n        uint256 sharesToMint = amount.mul(decimals).div(usdPerShare); // 10^9\r\n\r\n        return sharesToMint;\r\n    }\r\n\r\n    function unclaimedDividends()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _unclaimedDividends;\r\n    }\r\n\r\n    function totalDividendPoints()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalDividendPoints;\r\n    }\r\n\r\n    function disburse(uint256 amount) internal returns (bool) {\r\n        _totalDividendPoints = _totalDividendPoints.add(amount.mul(POINT_MULTIPLIER).div(shares.externalTotalSupply()));\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _unclaimedDividends = _unclaimedDividends.add(amount);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount)\r\n        internal \r\n    {\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _dollarBalances[account] = _dollarBalances[account].sub(amount);\r\n\r\n        uint256 usdPerShare = dollarPolicy.getUsdSharePrice(); // 1 share = x dollars\r\n        uint256 decimals = 10 ** 9;\r\n        uint256 percentDenominator = 100;\r\n\r\n        usdPerShare = usdPerShare.sub(usdPerShare.mul(burningDiscount).div(percentDenominator * decimals)); // 10^9\r\n        uint256 sharesToMint = amount.mul(decimals).div(usdPerShare); // 10^9\r\n        _remainingDollarsToBeBurned = _remainingDollarsToBeBurned.sub(amount);\r\n\r\n        shares.mintShares(account, sharesToMint);\r\n\r\n        emit Transfer(account, address(0), amount);\r\n        emit LogBurn(account, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimumBonusThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividendPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setRebasePaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uniswapV2Pair_\",\"type\":\"address\"}],\"name\":\"setUniswapV2SyncAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"setDefaultDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"setBurningDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"seigniorageAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"epoch\",\"type\":\"uint256\"},{\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"rebase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapV2Pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burningDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"monetaryPolicy_\",\"type\":\"address\"}],\"name\":\"setMonetaryPolicy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monetaryPolicy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"consultBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingDollarsToBeBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultDailyBonusDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"setDefaultDailyBonusDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBonusThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sharesAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dollarsToBurn\",\"type\":\"uint256\"}],\"name\":\"LogContraction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"LogRebasePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"monetaryPolicy\",\"type\":\"address\"}],\"name\":\"LogMonetaryPolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Dollars","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://53823f47480c50375539616f3a4728c22157ed3e921e111c98d8a9abb061405c"}]}