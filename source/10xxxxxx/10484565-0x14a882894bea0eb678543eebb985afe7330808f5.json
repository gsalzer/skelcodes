{"status":"1","message":"OK","result":[{"SourceCode":"/* Discussion:\r\n * https://github.com/b-u-i-d-l/staking\r\n */\r\n/* Description:\r\n * buidl Liquidity Staking Mechanism V1\r\n * \r\n * The DFOhub Liquidity Staking Mechanism is designed to reward Uniswap V2 liquidity Providers (buidl-ETH and buidl-USDC exchanges) to lock long-therm liquidity.\r\n * \r\n * The reward amount is fixed, and depends on the locking period selected. The reward system is independent from the buidl price. It's calculated based on how much buidl a holder uses to fill a liquidity pool, without any changes or dependency on the ETH or USDC values.\r\n */\r\npragma solidity ^0.6.0;\r\n\r\ncontract StakingTransferFunctionality {\r\n\r\n    function onStart(address,address) public {\r\n    }\r\n\r\n    function onStop(address) public {\r\n    }\r\n\r\n    function stakingTransfer(address sender, uint256, uint256 value, address receiver) public {\r\n        IMVDProxy proxy = IMVDProxy(msg.sender);\r\n\r\n        require(IStateHolder(proxy.getStateHolderAddress()).getBool(_toStateHolderKey(\"authorizedToTransferForStaking\", _toString(sender))) || IMVDFunctionalitiesManager(proxy.getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(sender), \"Unauthorized action!\");\r\n\r\n        proxy.transfer(receiver, value, proxy.getToken());\r\n    }\r\n\r\n    function _toStateHolderKey(string memory a, string memory b) private pure returns(string memory) {\r\n        return _toLowerCase(string(abi.encodePacked(a, \"_\", b)));\r\n    }\r\n\r\n    function _toString(address _addr) private pure returns(string memory) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function _toLowerCase(string memory str) private pure returns(string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        for (uint i = 0; i < bStr.length; i++) {\r\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\r\n        }\r\n        return string(bStr);\r\n    }\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getToken() external view returns(address);\r\n    function getStateHolderAddress() external view returns(address);\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function transfer(address receiver, uint256 value, address token) external;\r\n    function flushToWallet(address tokenAddress, bool is721, uint256 tokenId) external;\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getBool(string calldata varName) external view returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    function mint(uint256 amount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"stakingTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingTransferFunctionality","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a59fb007781ee8c4740745961a3d0764e699c2e552447124847ca9a4edbac98d"}]}