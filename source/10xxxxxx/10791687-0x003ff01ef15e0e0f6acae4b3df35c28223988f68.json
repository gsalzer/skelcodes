{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\n\r\nstruct UnipumpGroupData\r\n{\r\n    uint64 tokenListId;\r\n    address leader;\r\n\r\n    uint32 runTimeout;\r\n    bool aborted;\r\n    bool complete;\r\n    \r\n    uint32 startTimeout;\r\n    uint16 maxRunTimeHours;  \r\n    uint16 leaderProfitShareOutOf10000;\r\n    \r\n    uint256 leaderUppCollateral;\r\n    uint256 requiredMemberUppFee;\r\n    uint256 minEthToJoin;\r\n\r\n    uint256 minEthToStart;\r\n    uint256 maxEthAcceptable;\r\n\r\n    // ^-- parameters\r\n    \r\n    address[] members;\r\n    uint256 totalContributions;\r\n\r\n    // ^-- pre-start\r\n}\r\n\r\nstruct UnipumpGroupDataMappings\r\n{\r\n    // To work around deficiencies in solidity\r\n\r\n    mapping (address => bool) authorizedTraders;\r\n    // ^-- any time before finish/abort\r\n\r\n    mapping (address => uint256) contributions;\r\n    // ^-- pre-start\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => bool)) withdrawals;\r\n    // ^-- operational\r\n}\r\n\r\nstruct UnipumpTokenList\r\n{\r\n    address owner;\r\n    bool locked;\r\n    address[] tokens;\r\n    mapping (address => uint256) tokenIndexes;    \r\n}\r\nlibrary UnipumpTokenListLibrary\r\n{\r\n    function lock(UnipumpTokenList storage tokenList)\r\n        public\r\n    {\r\n        require (msg.sender == tokenList.owner, \"Owner only\");\r\n        require (!tokenList.locked, \"Already locked\");\r\n        require (tokenList.tokens.length > 0, \"List is empty\");\r\n        tokenList.locked = true;\r\n    }\r\n\r\n    function add(\r\n        UnipumpTokenList storage tokenList,\r\n        address[] memory tokens\r\n    )\r\n        public\r\n    {\r\n        require (msg.sender == tokenList.owner, \"Owner only\");\r\n        require (!tokenList.locked, \"Already locked\");\r\n        for (uint256 x = 0; x < tokens.length; ++x) {\r\n            address token = tokens[x];\r\n            if (tokenList.tokenIndexes[token] == 0) {\r\n                tokenList.tokens.push(token);\r\n                tokenList.tokenIndexes[token] = tokenList.tokens.length;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function remove(\r\n        UnipumpTokenList storage tokenList,\r\n        address[] memory tokens\r\n    )\r\n        public\r\n    {\r\n        require (msg.sender == tokenList.owner, \"Owner only\");\r\n        require (!tokenList.locked, \"Already locked\");\r\n        for (uint256 x = 0; x < tokens.length; ++x) {\r\n            address token = tokens[x];\r\n            uint256 index = tokenList.tokenIndexes[token];\r\n            if (index > 0) {\r\n                if (tokenList.tokens.length > index) {\r\n                    address other = tokenList.tokens[tokenList.tokens.length - 1];\r\n                    tokenList.tokens[index - 1] = other;\r\n                    tokenList.tokenIndexes[other] = index;\r\n                }\r\n                tokenList.tokens.pop();\r\n                tokenList.tokenIndexes[token] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function exists(\r\n        UnipumpTokenList storage tokenList,\r\n        address token\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return tokenList.tokenIndexes[token] > 0;\r\n    }\r\n}","ABI":"[]","ContractName":"UnipumpTokenListLibrary","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://47c0ace020e2a340bb1ea6a52e71843a44b7386541629818fdda30a7024d7e40"}]}