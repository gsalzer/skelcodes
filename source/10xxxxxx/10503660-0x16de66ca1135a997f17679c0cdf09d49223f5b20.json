{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/spec_interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IContractRegistry {\r\n\r\n\tevent ContractAddressUpdated(string contractName, address addr);\r\n\r\n\t/// @dev updates the contracts address and emits a corresponding event\r\n\tfunction set(string calldata contractName, address addr) external /* onlyGovernor */;\r\n\r\n\t/// @dev returns the current address of the\r\n\tfunction get(string calldata contractName) external view returns (address);\r\n}\r\n\r\n// File: contracts/spec_interfaces/ICommittee.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/// @title Elections contract interface\r\ninterface ICommittee {\r\n\tevent GuardianCommitteeChange(address addr, uint256 weight, bool certification, bool inCommittee);\r\n\tevent CommitteeSnapshot(address[] addrs, uint256[] weights, bool[] certification);\r\n\r\n\t// No external functions\r\n\r\n\t/*\r\n     * Methods restricted to other Orbs contracts\r\n     */\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Notifies a weight change for sorting to a relevant committee member.\r\n    /// weight = 0 indicates removal of the member from the committee (for exmaple on unregister, voteUnready, voteOut)\r\n\tfunction memberWeightChange(address addr, uint256 weight) external returns (bool committeeChanged) /* onlyElectionContract */;\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Notifies a guardian certification change\r\n\tfunction memberCertificationChange(address addr, bool isCertified) external returns (bool committeeChanged) /* onlyElectionsContract */;\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Notifies a a member removal for exampl\te due to voteOut / voteUnready\r\n\tfunction removeMember(address addr) external returns (bool committeeChanged) /* onlyElectionContract */;\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Notifies a new member applicable for committee (due to registration, unbanning, certification change)\r\n\tfunction addMember(address addr, uint256 weight, bool isCertified) external returns (bool committeeChanged) /* onlyElectionsContract */;\r\n\r\n\t/// @dev Called by: Elections contract\r\n\t/// Returns the committee members and their weights\r\n\tfunction getCommittee() external view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification);\r\n\r\n\t/*\r\n\t * Governance\r\n\t */\r\n\r\n\tfunction setMaxTimeBetweenRewardAssignments(uint32 maxTimeBetweenRewardAssignments) external /* onlyFunctionalOwner onlyWhenActive */;\r\n\tfunction setMaxCommittee(uint8 maxCommitteeSize) external /* onlyFunctionalOwner onlyWhenActive */;\r\n\r\n\tevent MaxTimeBetweenRewardAssignmentsChanged(uint32 newValue, uint32 oldValue);\r\n\tevent MaxCommitteeSizeChanged(uint8 newValue, uint8 oldValue);\r\n\r\n    /// @dev Updates the address calldata of the contract registry\r\n\tfunction setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\r\n\r\n    /*\r\n     * Getters\r\n     */\r\n\r\n    /// @dev returns the current committee\r\n    /// used also by the rewards and fees contracts\r\n\tfunction getCommitteeInfo() external view returns (address[] memory addrs, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips);\r\n\r\n\t/// @dev returns the current settings of the committee contract\r\n\tfunction getSettings() external view returns (uint32 maxTimeBetweenRewardAssignments, uint8 maxCommitteeSize);\r\n}\r\n\r\n// File: contracts/spec_interfaces/IProtocolWallet.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\npragma solidity 0.5.16;\r\n\r\n/// @title Protocol Wallet interface\r\ninterface IProtocolWallet {\r\n    event FundsAddedToPool(uint256 added, uint256 total);\r\n    event ClientSet(address client);\r\n    event MaxAnnualRateSet(uint256 maxAnnualRate);\r\n    event EmergencyWithdrawal(address addr);\r\n\r\n    /// @dev Returns the address of the underlying staked token.\r\n    /// @return IERC20 The address of the token.\r\n    function getToken() external view returns (IERC20);\r\n\r\n    /// @dev Returns the address of the underlying staked token.\r\n    /// @return IERC20 The address of the token.\r\n    function getBalance() external view returns (uint256 balance);\r\n\r\n    /// @dev Transfers the given amount of orbs tokens form the sender to this contract an update the pool.\r\n    function topUp(uint256 amount) external;\r\n\r\n    /// @dev Withdraw from pool to a the sender's address, limited by the pool's MaxRate.\r\n    /// A maximum of MaxRate x time period since the last Orbs transfer may be transferred out.\r\n    /// Flow:\r\n    /// PoolWallet.approveTransfer(amount);\r\n    /// ERC20.transferFrom(PoolWallet, client, amount)\r\n    function withdraw(uint256 amount) external; /* onlyClient */\r\n\r\n    /* Governance */\r\n    /// @dev Sets a new transfer rate for the Orbs pool.\r\n    function setMaxAnnualRate(uint256 annual_rate) external; /* onlyMigrationManager */\r\n\r\n    /// @dev transfer the entire pool's balance to a new wallet.\r\n    function emergencyWithdraw() external; /* onlyMigrationManager */\r\n\r\n    /// @dev sets the address of the new contract\r\n    function setClient(address client) external; /* onlyFunctionalManager */\r\n}\r\n\r\n// File: contracts/spec_interfaces/IProtocol.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IProtocol {\r\n    event ProtocolVersionChanged(string deploymentSubset, uint256 currentVersion, uint256 nextVersion, uint256 fromTimestamp);\r\n\r\n    /*\r\n     *   External methods\r\n     */\r\n\r\n    /// @dev returns true if the given deployment subset exists (i.e - is registered with a protocol version)\r\n    function deploymentSubsetExists(string calldata deploymentSubset) external view returns (bool);\r\n\r\n    /// @dev returns the current protocol version for the given deployment subset.\r\n    function getProtocolVersion(string calldata deploymentSubset) external view returns (uint256);\r\n\r\n    /*\r\n     *   Governor methods\r\n     */\r\n\r\n    /// @dev create a new deployment subset.\r\n    function createDeploymentSubset(string calldata deploymentSubset, uint256 initialProtocolVersion) external /* onlyFunctionalOwner */;\r\n\r\n    /// @dev schedules a protocol version upgrade for the given deployment subset.\r\n    function setProtocolVersion(string calldata deploymentSubset, uint256 nextVersion, uint256 fromTimestamp) external /* onlyFunctionalOwner */;\r\n}\r\n\r\n// File: contracts/IStakeChangeNotifier.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n/// @title An interface for notifying of stake change events (e.g., stake, unstake, partial unstake, restate, etc.).\r\ninterface IStakeChangeNotifier {\r\n    /// @dev Notifies of stake change event.\r\n    /// @param _stakeOwner address The address of the subject stake owner.\r\n    /// @param _amount uint256 The difference in the total staked amount.\r\n    /// @param _sign bool The sign of the added (true) or subtracted (false) amount.\r\n    /// @param _updatedStake uint256 The updated total staked amount.\r\n    function stakeChange(address _stakeOwner, uint256 _amount, bool _sign, uint256 _updatedStake) external;\r\n\r\n    /// @dev Notifies of multiple stake change events.\r\n    /// @param _stakeOwners address[] The addresses of subject stake owners.\r\n    /// @param _amounts uint256[] The differences in total staked amounts.\r\n    /// @param _signs bool[] The signs of the added (true) or subtracted (false) amounts.\r\n    /// @param _updatedStakes uint256[] The updated total staked amounts.\r\n    function stakeChangeBatch(address[] calldata _stakeOwners, uint256[] calldata _amounts, bool[] calldata _signs,\r\n        uint256[] calldata _updatedStakes) external;\r\n\r\n    /// @dev Notifies of stake migration event.\r\n    /// @param _stakeOwner address The address of the subject stake owner.\r\n    /// @param _amount uint256 The migrated amount.\r\n    function stakeMigration(address _stakeOwner, uint256 _amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/IElections.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n/// @title Elections contract interface\r\ninterface IElections /* is IStakeChangeNotifier */ {\r\n\t// Election state change events\r\n\tevent GuardianVotedUnready(address guardian);\r\n\tevent GuardianVotedOut(address guardian);\r\n\r\n\t// Function calls\r\n\tevent VoteUnreadyCasted(address voter, address subject);\r\n\tevent VoteOutCasted(address voter, address subject);\r\n\tevent StakeChanged(address addr, uint256 selfStake, uint256 delegated_stake, uint256 effective_stake);\r\n\r\n\tevent GuardianStatusUpdated(address addr, bool readyToSync, bool readyForCommittee);\r\n\r\n\t// Governance\r\n\tevent VoteUnreadyTimeoutSecondsChanged(uint32 newValue, uint32 oldValue);\r\n\tevent MinSelfStakePercentMilleChanged(uint32 newValue, uint32 oldValue);\r\n\tevent VoteOutPercentageThresholdChanged(uint8 newValue, uint8 oldValue);\r\n\tevent VoteUnreadyPercentageThresholdChanged(uint8 newValue, uint8 oldValue);\r\n\r\n\t/*\r\n\t * External methods\r\n\t */\r\n\r\n\t/// @dev Called by a guardian as part of the automatic vote-out flow\r\n\tfunction voteUnready(address subject_addr) external;\r\n\r\n\t/// @dev casts a voteOut vote by the sender to the given address\r\n\tfunction voteOut(address subjectAddr) external;\r\n\r\n\t/// @dev Called by a guardian when ready to start syncing with other nodes\r\n\tfunction readyToSync() external;\r\n\r\n\t/// @dev Called by a guardian when ready to join the committee, typically after syncing is complete or after being voted out\r\n\tfunction readyForCommittee() external;\r\n\r\n\t/*\r\n\t * Methods restricted to other Orbs contracts\r\n\t */\r\n\r\n\t/// @dev Called by: delegation contract\r\n\t/// Notifies a delegated stake change event\r\n\t/// total_delegated_stake = 0 if addr delegates to another guardian\r\n\tfunction delegatedStakeChange(address addr, uint256 selfStake, uint256 delegatedStake, uint256 totalDelegatedStake) external /* onlyDelegationContract */;\r\n\r\n\t/// @dev Called by: guardian registration contract\r\n\t/// Notifies a new guardian was registered\r\n\tfunction guardianRegistered(address addr) external /* onlyGuardiansRegistrationContract */;\r\n\r\n\t/// @dev Called by: guardian registration contract\r\n\t/// Notifies a new guardian was unregistered\r\n\tfunction guardianUnregistered(address addr) external /* onlyGuardiansRegistrationContract */;\r\n\r\n\t/// @dev Called by: guardian registration contract\r\n\t/// Notifies on a guardian certification change\r\n\tfunction guardianCertificationChanged(address addr, bool isCertified) external /* onlyCertificationContract */;\r\n\r\n\t/*\r\n     * Governance\r\n\t */\r\n\r\n\t/// @dev Updates the address of the contract registry\r\n\tfunction setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\r\n\r\n\tfunction setVoteUnreadyTimeoutSeconds(uint32 voteUnreadyTimeoutSeconds) external /* onlyFunctionalOwner onlyWhenActive */;\r\n\tfunction setMinSelfStakePercentMille(uint32 minSelfStakePercentMille) external /* onlyFunctionalOwner onlyWhenActive */;\r\n\tfunction setVoteOutPercentageThreshold(uint8 voteUnreadyPercentageThreshold) external /* onlyFunctionalOwner onlyWhenActive */;\r\n\tfunction setVoteUnreadyPercentageThreshold(uint8 voteUnreadyPercentageThreshold) external /* onlyFunctionalOwner onlyWhenActive */;\r\n\tfunction getSettings() external view returns (\r\n\t\tuint32 voteUnreadyTimeoutSeconds,\r\n\t\tuint32 minSelfStakePercentMille,\r\n\t\tuint8 voteUnreadyPercentageThreshold,\r\n\t\tuint8 voteOutPercentageThreshold\r\n\t);\r\n}\r\n\r\n// File: contracts/spec_interfaces/IGuardiansRegistration.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/// @title Elections contract interface\r\ninterface IGuardiansRegistration {\r\n\tevent GuardianRegistered(address addr);\r\n\tevent GuardianDataUpdated(address addr, bytes4 ip, address orbsAddr, string name, string website, string contact);\r\n\tevent GuardianUnregistered(address addr);\r\n\tevent GuardianMetadataChanged(address addr, string key, string newValue, string oldValue);\r\n\r\n\t/*\r\n     * External methods\r\n     */\r\n\r\n    /// @dev Called by a participant who wishes to register as a guardian\r\n\tfunction registerGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website, string calldata contact) external;\r\n\r\n    /// @dev Called by a participant who wishes to update its propertires\r\n\tfunction updateGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website, string calldata contact) external;\r\n\r\n\t/// @dev Called by a participant who wishes to update its IP address (can be call by both main and Orbs addresses)\r\n\tfunction updateGuardianIp(bytes4 ip) external /* onlyWhenActive */;\r\n\r\n    /// @dev Called by a participant to update additional guardian metadata properties.\r\n    function setMetadata(string calldata key, string calldata value) external;\r\n\r\n    /// @dev Called by a participant to get additional guardian metadata properties.\r\n    function getMetadata(address addr, string calldata key) external view returns (string memory);\r\n\r\n    /// @dev Called by a participant who wishes to unregister\r\n\tfunction unregisterGuardian() external;\r\n\r\n    /// @dev Returns a guardian's data\r\n    /// Used also by the Election contract\r\n\tfunction getGuardianData(address addr) external view returns (bytes4 ip, address orbsAddr, string memory name, string memory website, string memory contact, uint registration_time, uint last_update_time);\r\n\r\n\t/// @dev Returns the Orbs addresses of a list of guardians\r\n\t/// Used also by the committee contract\r\n\tfunction getGuardiansOrbsAddress(address[] calldata addrs) external view returns (address[] memory orbsAddrs);\r\n\r\n\t/// @dev Returns a guardian's ip\r\n\t/// Used also by the Election contract\r\n\tfunction getGuardianIp(address addr) external view returns (bytes4 ip);\r\n\r\n\t/// @dev Returns guardian ips\r\n\tfunction getGuardianIps(address[] calldata addr) external view returns (bytes4[] memory ips);\r\n\r\n\r\n\t/// @dev Returns true if the given address is of a registered guardian\r\n\t/// Used also by the Election contract\r\n\tfunction isRegistered(address addr) external view returns (bool);\r\n\r\n\t/*\r\n     * Methods restricted to other Orbs contracts\r\n     */\r\n\r\n    /// @dev Translates a list guardians Ethereum addresses to Orbs addresses\r\n    /// Used by the Election contract\r\n\tfunction getOrbsAddresses(address[] calldata ethereumAddrs) external view returns (address[] memory orbsAddr);\r\n\r\n\t/// @dev Translates a list guardians Orbs addresses to Ethereum addresses\r\n\t/// Used by the Election contract\r\n\tfunction getEthereumAddresses(address[] calldata orbsAddrs) external view returns (address[] memory ethereumAddr);\r\n\r\n\t/// @dev Resolves the ethereum address for a guardian, given an Ethereum/Orbs address\r\n\tfunction resolveGuardianAddress(address ethereumOrOrbsAddress) external view returns (address mainAddress);\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/ICertification.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n/// @title Elections contract interface\r\ninterface ICertification /* is Ownable */ {\r\n\tevent GuardianCertificationUpdate(address guardian, bool isCertified);\r\n\r\n\t/*\r\n     * External methods\r\n     */\r\n\r\n    /// @dev Called by a guardian as part of the automatic vote unready flow\r\n    /// Used by the Election contract\r\n\tfunction isGuardianCertified(address addr) external view returns (bool isCertified);\r\n\r\n    /// @dev Called by a guardian as part of the automatic vote unready flow\r\n    /// Used by the Election contract\r\n\tfunction setGuardianCertification(address addr, bool isCertified) external /* Owner only */ ;\r\n\r\n\t/*\r\n\t * Governance\r\n\t */\r\n\r\n    /// @dev Updates the address calldata of the contract registry\r\n\tfunction setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/ISubscriptions.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/// @title Subscriptions contract interface\r\ninterface ISubscriptions {\r\n    event SubscriptionChanged(uint256 vcid, uint256 genRefTime, uint256 expiresAt, string tier, string deploymentSubset);\r\n    event Payment(uint256 vcid, address by, uint256 amount, string tier, uint256 rate);\r\n    event VcConfigRecordChanged(uint256 vcid, string key, string value);\r\n    event SubscriberAdded(address subscriber);\r\n    event VcCreated(uint256 vcid, address owner); // TODO what about isCertified, deploymentSubset?\r\n    event VcOwnerChanged(uint256 vcid, address previousOwner, address newOwner);\r\n\r\n    /*\r\n     *   Methods restricted to other Orbs contracts\r\n     */\r\n\r\n    /// @dev Called by: authorized subscriber (plan) contracts\r\n    /// Creates a new VC\r\n    function createVC(string calldata tier, uint256 rate, uint256 amount, address owner, bool isCertified, string calldata deploymentSubset) external returns (uint, uint);\r\n\r\n    /// @dev Called by: authorized subscriber (plan) contracts\r\n    /// Extends the subscription of an existing VC.\r\n    function extendSubscription(uint256 vcid, uint256 amount, address payer) external;\r\n\r\n    /// @dev called by VC owner to set a VC config record. Emits a VcConfigRecordChanged event.\r\n    function setVcConfigRecord(uint256 vcid, string calldata key, string calldata value) external /* onlyVcOwner */;\r\n\r\n    /// @dev returns the value of a VC config record\r\n    function getVcConfigRecord(uint256 vcid, string calldata key) external view returns (string memory);\r\n\r\n    /// @dev Transfers VC ownership to a new owner (can only be called by the current owner)\r\n    function setVcOwner(uint256 vcid, address owner) external /* onlyVcOwner */;\r\n\r\n    /// @dev Returns the genesis ref time delay\r\n    function getGenesisRefTimeDelay() external view returns (uint256);\r\n\r\n    /*\r\n     *   Governance methods\r\n     */\r\n\r\n    /// @dev Called by the owner to authorize a subscriber (plan)\r\n    function addSubscriber(address addr) external /* onlyFunctionalOwner */;\r\n\r\n    /// @dev Called by the owner to set the genesis ref time delay\r\n    function setGenesisRefTimeDelay(uint256 newGenesisRefTimeDelay) external /* onlyFunctionalOwner */;\r\n\r\n    /// @dev Updates the address of the contract registry\r\n    function setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/IDelegation.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/// @title Elections contract interface\r\ninterface IDelegations /* is IStakeChangeNotifier */ {\r\n    // Delegation state change events\r\n\tevent DelegatedStakeChanged(address indexed addr, uint256 selfDelegatedStake, uint256 delegatedStake, address[] delegators, uint256[] delegatorTotalStakes);\r\n\r\n    // Function calls\r\n\tevent Delegated(address indexed from, address indexed to);\r\n\r\n\t/*\r\n     * External methods\r\n     */\r\n\r\n\t/// @dev Stake delegation\r\n\tfunction delegate(address to) external /* onlyWhenActive */;\r\n\r\n\tfunction refreshStakeNotification(address addr) external /* onlyWhenActive */;\r\n\r\n\t/*\r\n\t * Governance\r\n\t */\r\n\r\n    /// @dev Updates the address calldata of the contract registry\r\n\tfunction setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\r\n\r\n\tfunction importDelegations(address[] calldata from, address[] calldata to, bool notifyElections) external /* onlyMigrationOwner onlyDuringDelegationImport */;\r\n\tfunction finalizeDelegationImport() external /* onlyMigrationOwner onlyDuringDelegationImport */;\r\n\r\n\tevent DelegationsImported(address[] from, address[] to, bool notifiedElections);\r\n\tevent DelegationImportFinalized();\r\n\r\n\t/*\r\n\t * Getters\r\n\t */\r\n\r\n\tfunction getDelegatedStakes(address addr) external view returns (uint256);\r\n\tfunction getSelfDelegatedStake(address addr) external view returns (uint256);\r\n\tfunction getDelegation(address addr) external view returns (address);\r\n\tfunction getTotalDelegatedStake() external view returns (uint256) ;\r\n\r\n\r\n}\r\n\r\n// File: contracts/IMigratableStakingContract.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/// @title An interface for staking contracts which support stake migration.\r\ninterface IMigratableStakingContract {\r\n    /// @dev Returns the address of the underlying staked token.\r\n    /// @return IERC20 The address of the token.\r\n    function getToken() external view returns (IERC20);\r\n\r\n    /// @dev Stakes ORBS tokens on behalf of msg.sender. This method assumes that the user has already approved at least\r\n    /// the required amount using ERC20 approve.\r\n    /// @param _stakeOwner address The specified stake owner.\r\n    /// @param _amount uint256 The number of tokens to stake.\r\n    function acceptMigration(address _stakeOwner, uint256 _amount) external;\r\n\r\n    event AcceptedMigration(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n}\r\n\r\n// File: contracts/IStakingContract.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/// @title An interface for staking contracts.\r\ninterface IStakingContract {\r\n    /// @dev Stakes ORBS tokens on behalf of msg.sender. This method assumes that the user has already approved at least\r\n    /// the required amount using ERC20 approve.\r\n    /// @param _amount uint256 The amount of tokens to stake.\r\n    function stake(uint256 _amount) external;\r\n\r\n    /// @dev Unstakes ORBS tokens from msg.sender. If successful, this will start the cooldown period, after which\r\n    /// msg.sender would be able to withdraw all of his tokens.\r\n    /// @param _amount uint256 The amount of tokens to unstake.\r\n    function unstake(uint256 _amount) external;\r\n\r\n    /// @dev Requests to withdraw all of staked ORBS tokens back to msg.sender. Stake owners can withdraw their ORBS\r\n    /// tokens only after previously unstaking them and after the cooldown period has passed (unless the contract was\r\n    /// requested to release all stakes).\r\n    function withdraw() external;\r\n\r\n    /// @dev Restakes unstaked ORBS tokens (in or after cooldown) for msg.sender.\r\n    function restake() external;\r\n\r\n    /// @dev Distributes staking rewards to a list of addresses by directly adding rewards to their stakes. This method\r\n    /// assumes that the user has already approved at least the required amount using ERC20 approve. Since this is a\r\n    /// convenience method, we aren't concerned about reaching block gas limit by using large lists. We assume that\r\n    /// callers will be able to properly batch/paginate their requests.\r\n    /// @param _totalAmount uint256 The total amount of rewards to distributes.\r\n    /// @param _stakeOwners address[] The addresses of the stake owners.\r\n    /// @param _amounts uint256[] The amounts of the rewards.\r\n    function distributeRewards(uint256 _totalAmount, address[] calldata _stakeOwners, uint256[] calldata _amounts) external;\r\n\r\n    /// @dev Returns the stake of the specified stake owner (excluding unstaked tokens).\r\n    /// @param _stakeOwner address The address to check.\r\n    /// @return uint256 The total stake.\r\n    function getStakeBalanceOf(address _stakeOwner) external view returns (uint256);\r\n\r\n    /// @dev Returns the total amount staked tokens (excluding unstaked tokens).\r\n    /// @return uint256 The total staked tokens of all stake owners.\r\n    function getTotalStakedTokens() external view returns (uint256);\r\n\r\n    /// @dev Returns the time that the cooldown period ends (or ended) and the amount of tokens to be released.\r\n    /// @param _stakeOwner address The address to check.\r\n    /// @return cooldownAmount uint256 The total tokens in cooldown.\r\n    /// @return cooldownEndTime uint256 The time when the cooldown period ends (in seconds).\r\n    function getUnstakeStatus(address _stakeOwner) external view returns (uint256 cooldownAmount,\r\n        uint256 cooldownEndTime);\r\n\r\n    /// @dev Migrates the stake of msg.sender from this staking contract to a new approved staking contract.\r\n    /// @param _newStakingContract IMigratableStakingContract The new staking contract which supports stake migration.\r\n    /// @param _amount uint256 The amount of tokens to migrate.\r\n    function migrateStakedTokens(IMigratableStakingContract _newStakingContract, uint256 _amount) external;\r\n\r\n    event Staked(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n    event Unstaked(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n    event Withdrew(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n    event Restaked(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n    event MigratedStake(address indexed stakeOwner, uint256 amount, uint256 totalStakedAmount);\r\n}\r\n\r\n// File: contracts/interfaces/IRewards.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n/// @title Rewards contract interface\r\ninterface IRewards {\r\n\r\n    function assignRewards() external;\r\n    function assignRewardsToCommittee(address[] calldata generalCommittee, uint256[] calldata generalCommitteeWeights, bool[] calldata certification) external /* onlyCommitteeContract */;\r\n\r\n    // staking\r\n\r\n    event StakingRewardsDistributed(address indexed distributer, uint256 fromBlock, uint256 toBlock, uint split, uint txIndex, address[] to, uint256[] amounts);\r\n    event StakingRewardsAssigned(address[] assignees, uint256[] amounts); // todo balance?\r\n    event StakingRewardsAddedToPool(uint256 added, uint256 total);\r\n    event MaxDelegatorsStakingRewardsChanged(uint32 maxDelegatorsStakingRewardsPercentMille);\r\n\r\n    /// @return Returns the currently unclaimed orbs token reward balance of the given address.\r\n    function getStakingRewardBalance(address addr) external view returns (uint256 balance);\r\n\r\n    /// @dev Distributes msg.sender's orbs token rewards to a list of addresses, by transferring directly into the staking contract.\r\n    /// @dev `to[0]` must be the sender's main address\r\n    /// @dev Total delegators reward (`to[1:n]`) must be less then maxDelegatorsStakingRewardsPercentMille of total amount\r\n    function distributeOrbsTokenStakingRewards(uint256 totalAmount, uint256 fromBlock, uint256 toBlock, uint split, uint txIndex, address[] calldata to, uint256[] calldata amounts) external;\r\n\r\n    /// @dev Transfers the given amount of orbs tokens form the sender to this contract an update the pool.\r\n    function topUpStakingRewardsPool(uint256 amount) external;\r\n\r\n    /*\r\n    *   Reward-governor methods\r\n    */\r\n\r\n    /// @dev Assigns rewards and sets a new monthly rate for the pro-rata pool.\r\n    function setAnnualStakingRewardsRate(uint256 annual_rate_in_percent_mille, uint256 annual_cap) external /* onlyFunctionalOwner */;\r\n\r\n\r\n    // fees\r\n\r\n    event FeesAssigned(uint256 generalGuardianAmount, uint256 certifiedGuardianAmount);\r\n    event FeesWithdrawn(address guardian, uint256 amount);\r\n    event FeesWithdrawnFromBucket(uint256 bucketId, uint256 withdrawn, uint256 total, bool isCertified);\r\n    event FeesAddedToBucket(uint256 bucketId, uint256 added, uint256 total, bool isCertified);\r\n\r\n    /*\r\n     *   External methods\r\n     */\r\n\r\n    /// @return Returns the currently unclaimed orbs token reward balance of the given address.\r\n    function getFeeBalance(address addr) external view returns (uint256 balance);\r\n\r\n    /// @dev Transfer all of msg.sender's outstanding balance to their account\r\n    function withdrawFeeFunds() external;\r\n\r\n    /// @dev Called by: subscriptions contract\r\n    /// Top-ups the certification fee pool with the given amount at the given rate (typically called by the subscriptions contract)\r\n    function fillCertificationFeeBuckets(uint256 amount, uint256 monthlyRate, uint256 fromTimestamp) external;\r\n\r\n    /// @dev Called by: subscriptions contract\r\n    /// Top-ups the general fee pool with the given amount at the given rate (typically called by the subscriptions contract)\r\n    function fillGeneralFeeBuckets(uint256 amount, uint256 monthlyRate, uint256 fromTimestamp) external;\r\n\r\n    function getTotalBalances() external view returns (uint256 feesTotalBalance, uint256 stakingRewardsTotalBalance, uint256 bootstrapRewardsTotalBalance);\r\n\r\n    // bootstrap\r\n\r\n    event BootstrapRewardsAssigned(uint256 generalGuardianAmount, uint256 certifiedGuardianAmount);\r\n    event BootstrapAddedToPool(uint256 added, uint256 total);\r\n    event BootstrapRewardsWithdrawn(address guardian, uint256 amount);\r\n\r\n    /*\r\n     *   External methods\r\n     */\r\n\r\n    /// @return Returns the currently unclaimed bootstrap balance of the given address.\r\n    function getBootstrapBalance(address addr) external view returns (uint256 balance);\r\n\r\n    /// @dev Transfer all of msg.sender's outstanding balance to their account\r\n    function withdrawBootstrapFunds() external;\r\n\r\n    /// @return The timestamp of the last reward assignment.\r\n    function getLastRewardAssignmentTime() external view returns (uint256 time);\r\n\r\n    /// @dev Transfers the given amount of bootstrap tokens form the sender to this contract and update the pool.\r\n    /// Assumes the tokens were approved for transfer\r\n    function topUpBootstrapPool(uint256 amount) external;\r\n\r\n    /*\r\n     * Reward-governor methods\r\n     */\r\n\r\n    /// @dev Assigns rewards and sets a new monthly rate for the geenral commitee bootstrap.\r\n    function setGeneralCommitteeAnnualBootstrap(uint256 annual_amount) external /* onlyFunctionalOwner */;\r\n\r\n    /// @dev Assigns rewards and sets a new monthly rate for the certification commitee bootstrap.\r\n    function setCertificationCommitteeAnnualBootstrap(uint256 annual_amount) external /* onlyFunctionalOwner */;\r\n\r\n    event EmergencyWithdrawal(address addr);\r\n\r\n    function emergencyWithdraw() external /* onlyMigrationManager */;\r\n\r\n    /*\r\n     * General governance\r\n     */\r\n\r\n    /// @dev Updates the address of the contract registry\r\n    function setContractRegistry(IContractRegistry _contractRegistry) external /* onlyMigrationOwner */;\r\n\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/WithClaimableMigrationOwnership.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract WithClaimableMigrationOwnership is Context{\r\n    address private _migrationOwner;\r\n    address pendingMigrationOwner;\r\n\r\n    event MigrationOwnershipTransferred(address indexed previousMigrationOwner, address indexed newMigrationOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial migrationMigrationOwner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _migrationOwner = msgSender;\r\n        emit MigrationOwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current migrationOwner.\r\n     */\r\n    function migrationOwner() public view returns (address) {\r\n        return _migrationOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the migrationOwner.\r\n     */\r\n    modifier onlyMigrationOwner() {\r\n        require(isMigrationOwner(), \"WithClaimableMigrationOwnership: caller is not the migrationOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current migrationOwner.\r\n     */\r\n    function isMigrationOwner() public view returns (bool) {\r\n        return _msgSender() == _migrationOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without migrationOwner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current migrationOwner.\r\n     *\r\n     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner,\r\n     * thereby removing any functionality that is only available to the migrationOwner.\r\n     */\r\n    function renounceMigrationOwnership() public onlyMigrationOwner {\r\n        emit MigrationOwnershipTransferred(_migrationOwner, address(0));\r\n        _migrationOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers migrationOwnership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferMigrationOwnership(address newMigrationOwner) internal {\r\n        require(newMigrationOwner != address(0), \"MigrationOwner: new migrationOwner is the zero address\");\r\n        emit MigrationOwnershipTransferred(_migrationOwner, newMigrationOwner);\r\n        _migrationOwner = newMigrationOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingMigrationOwner() {\r\n        require(msg.sender == pendingMigrationOwner, \"Caller is not the pending migrationOwner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current migrationOwner to set the pendingOwner address.\r\n     * @param newMigrationOwner The address to transfer migrationOwnership to.\r\n     */\r\n    function transferMigrationOwnership(address newMigrationOwner) public onlyMigrationOwner {\r\n        pendingMigrationOwner = newMigrationOwner;\r\n    }\r\n    /**\r\n     * @dev Allows the pendingMigrationOwner address to finalize the transfer.\r\n     */\r\n    function claimMigrationOwnership() external onlyPendingMigrationOwner {\r\n        _transferMigrationOwnership(pendingMigrationOwner);\r\n        pendingMigrationOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/Lockable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Lockable is WithClaimableMigrationOwnership {\r\n\r\n    bool public locked;\r\n\r\n    event Locked();\r\n    event Unlocked();\r\n\r\n    function lock() external onlyMigrationOwner {\r\n        locked = true;\r\n        emit Locked();\r\n    }\r\n\r\n    function unlock() external onlyMigrationOwner {\r\n        locked = false;\r\n        emit Unlocked();\r\n    }\r\n\r\n    modifier onlyWhenActive() {\r\n        require(!locked, \"contract is locked for this operation\");\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/ContractRegistryAccessor.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ContractRegistryAccessor is WithClaimableMigrationOwnership {\r\n\r\n    IContractRegistry contractRegistry;\r\n\r\n    event ContractRegistryAddressUpdated(address addr);\r\n\r\n    function setContractRegistry(IContractRegistry _contractRegistry) external onlyMigrationOwner {\r\n        contractRegistry = _contractRegistry;\r\n        emit ContractRegistryAddressUpdated(address(_contractRegistry));\r\n    }\r\n\r\n    function getProtocolContract() public view returns (IProtocol) {\r\n        return IProtocol(contractRegistry.get(\"protocol\"));\r\n    }\r\n\r\n    function getRewardsContract() public view returns (IRewards) {\r\n        return IRewards(contractRegistry.get(\"rewards\"));\r\n    }\r\n\r\n    function getCommitteeContract() public view returns (ICommittee) {\r\n        return ICommittee(contractRegistry.get(\"committee\"));\r\n    }\r\n\r\n    function getElectionsContract() public view returns (IElections) {\r\n        return IElections(contractRegistry.get(\"elections\"));\r\n    }\r\n\r\n    function getDelegationsContract() public view returns (IDelegations) {\r\n        return IDelegations(contractRegistry.get(\"delegations\"));\r\n    }\r\n\r\n    function getGuardiansRegistrationContract() public view returns (IGuardiansRegistration) {\r\n        return IGuardiansRegistration(contractRegistry.get(\"guardiansRegistration\"));\r\n    }\r\n\r\n    function getCertificationContract() public view returns (ICertification) {\r\n        return ICertification(contractRegistry.get(\"certification\"));\r\n    }\r\n\r\n    function getStakingContract() public view returns (IStakingContract) {\r\n        return IStakingContract(contractRegistry.get(\"staking\"));\r\n    }\r\n\r\n    function getSubscriptionsContract() public view returns (ISubscriptions) {\r\n        return ISubscriptions(contractRegistry.get(\"subscriptions\"));\r\n    }\r\n\r\n    function getStakingRewardsWallet() public view returns (IProtocolWallet) {\r\n        return IProtocolWallet(contractRegistry.get(\"stakingRewardsWallet\"));\r\n    }\r\n\r\n    function getBootstrapRewardsWallet() public view returns (IProtocolWallet) {\r\n        return IProtocolWallet(contractRegistry.get(\"bootstrapRewardsWallet\"));\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Erc20AccessorWithTokenGranularity.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20AccessorWithTokenGranularity {\r\n\r\n    uint constant TOKEN_GRANULARITY = 1000000000000000;\r\n\r\n    function toUint48Granularity(uint256 v) internal pure returns (uint48) {\r\n        return uint48(v / TOKEN_GRANULARITY);\r\n    }\r\n\r\n    function toUint256Granularity(uint48 v) internal pure returns (uint256) {\r\n        return uint256(v) * TOKEN_GRANULARITY;\r\n    }\r\n\r\n    function transferFrom(IERC20 erc20, address sender, address recipient, uint48 amount) internal returns (bool) {\r\n        return erc20.transferFrom(sender, recipient, toUint256Granularity(amount));\r\n    }\r\n\r\n    function transfer(IERC20 erc20, address recipient, uint48 amount) internal returns (bool) {\r\n        return erc20.transfer(recipient, toUint256Granularity(amount));\r\n    }\r\n\r\n    function approve(IERC20 erc20, address spender, uint48 amount) internal returns (bool) {\r\n        return erc20.approve(spender, toUint256Granularity(amount));\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/WithClaimableFunctionalOwnership.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract WithClaimableFunctionalOwnership is Context{\r\n    address private _functionalOwner;\r\n    address pendingFunctionalOwner;\r\n\r\n    event FunctionalOwnershipTransferred(address indexed previousFunctionalOwner, address indexed newFunctionalOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial functionalFunctionalOwner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _functionalOwner = msgSender;\r\n        emit FunctionalOwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current functionalOwner.\r\n     */\r\n    function functionalOwner() public view returns (address) {\r\n        return _functionalOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the functionalOwner.\r\n     */\r\n    modifier onlyFunctionalOwner() {\r\n        require(isFunctionalOwner(), \"WithClaimableFunctionalOwnership: caller is not the functionalOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current functionalOwner.\r\n     */\r\n    function isFunctionalOwner() public view returns (bool) {\r\n        return _msgSender() == _functionalOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without functionalOwner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current functionalOwner.\r\n     *\r\n     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner,\r\n     * thereby removing any functionality that is only available to the functionalOwner.\r\n     */\r\n    function renounceFunctionalOwnership() public onlyFunctionalOwner {\r\n        emit FunctionalOwnershipTransferred(_functionalOwner, address(0));\r\n        _functionalOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers functionalOwnership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferFunctionalOwnership(address newFunctionalOwner) internal {\r\n        require(newFunctionalOwner != address(0), \"FunctionalOwner: new functionalOwner is the zero address\");\r\n        emit FunctionalOwnershipTransferred(_functionalOwner, newFunctionalOwner);\r\n        _functionalOwner = newFunctionalOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingFunctionalOwner() {\r\n        require(msg.sender == pendingFunctionalOwner, \"Caller is not the pending functionalOwner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current functionalOwner to set the pendingOwner address.\r\n     * @param newFunctionalOwner The address to transfer functionalOwnership to.\r\n     */\r\n    function transferFunctionalOwnership(address newFunctionalOwner) public onlyFunctionalOwner {\r\n        pendingFunctionalOwner = newFunctionalOwner;\r\n    }\r\n    /**\r\n     * @dev Allows the pendingFunctionalOwner address to finalize the transfer.\r\n     */\r\n    function claimFunctionalOwnership() external onlyPendingFunctionalOwner {\r\n        _transferFunctionalOwnership(pendingFunctionalOwner);\r\n        pendingFunctionalOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: ../contracts/Rewards.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Rewards is IRewards, ContractRegistryAccessor, ERC20AccessorWithTokenGranularity, WithClaimableFunctionalOwnership, Lockable {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint48;\r\n\r\n    struct Settings {\r\n        uint48 generalCommitteeAnnualBootstrap;\r\n        uint48 certificationCommitteeAnnualBootstrap;\r\n        uint48 annualRateInPercentMille;\r\n        uint48 annualCap;\r\n        uint32 maxDelegatorsStakingRewardsPercentMille;\r\n    }\r\n    Settings settings;\r\n\r\n    struct PoolsAndTotalBalances {\r\n        uint48 bootstrapPool;\r\n        uint48 stakingPool;\r\n        uint48 bootstrapRewardsTotalBalance;\r\n        uint48 feesTotalBalance;\r\n        uint48 stakingRewardsTotalBalance;\r\n    }\r\n    PoolsAndTotalBalances poolsAndTotalBalances;\r\n\r\n    struct Balance {\r\n        uint48 bootstrapRewards;\r\n        uint48 fees;\r\n        uint48 stakingRewards;\r\n    }\r\n    mapping(address => Balance) balances;\r\n\r\n    uint256 constant feeBucketTimePeriod = 30 days;\r\n    mapping(uint256 => uint256) generalFeePoolBuckets;\r\n    mapping(uint256 => uint256) certifiedFeePoolBuckets;\r\n\r\n    IERC20 bootstrapToken;\r\n    IERC20 erc20;\r\n    uint256 lastAssignedAt;\r\n\r\n    modifier onlyCommitteeContract() {\r\n        require(msg.sender == address(getCommitteeContract()), \"caller is not the committee contract\");\r\n\r\n        _;\r\n    }\r\n\r\n    constructor(IERC20 _erc20, IERC20 _bootstrapToken) public {\r\n        require(address(_bootstrapToken) != address(0), \"bootstrapToken must not be 0\");\r\n        require(address(_erc20) != address(0), \"erc20 must not be 0\");\r\n\r\n        erc20 = _erc20;\r\n        bootstrapToken = _bootstrapToken;\r\n\r\n        // TODO - The initial lastPayedAt should be set in the first assignRewards.\r\n        lastAssignedAt = now;\r\n    }\r\n\r\n    // bootstrap rewards\r\n\r\n    function setGeneralCommitteeAnnualBootstrap(uint256 annual_amount) external onlyFunctionalOwner onlyWhenActive {\r\n        settings.generalCommitteeAnnualBootstrap = toUint48Granularity(annual_amount);\r\n    }\r\n\r\n    function setCertificationCommitteeAnnualBootstrap(uint256 annual_amount) external onlyFunctionalOwner onlyWhenActive {\r\n        settings.certificationCommitteeAnnualBootstrap = toUint48Granularity(annual_amount);\r\n    }\r\n\r\n    function setMaxDelegatorsStakingRewardsPercentMille(uint32 maxDelegatorsStakingRewardsPercentMille) external onlyFunctionalOwner onlyWhenActive {\r\n        require(maxDelegatorsStakingRewardsPercentMille <= 100000, \"maxDelegatorsStakingRewardsPercentMille must not be larger than 100000\");\r\n        settings.maxDelegatorsStakingRewardsPercentMille = maxDelegatorsStakingRewardsPercentMille;\r\n        emit MaxDelegatorsStakingRewardsChanged(maxDelegatorsStakingRewardsPercentMille);\r\n    }\r\n\r\n    function topUpBootstrapPool(uint256 amount) external onlyWhenActive {\r\n        uint48 _amount48 = toUint48Granularity(amount);\r\n        uint48 bootstrapPool = poolsAndTotalBalances.bootstrapPool + _amount48;\r\n        poolsAndTotalBalances.bootstrapPool = bootstrapPool;\r\n\r\n        IERC20 _bootstrapToken = bootstrapToken;\r\n        require(transferFrom(_bootstrapToken, msg.sender, address(this), _amount48), \"Rewards::topUpFixedPool - insufficient allowance\");\r\n\r\n        IProtocolWallet wallet = getBootstrapRewardsWallet();\r\n        require(_bootstrapToken.approve(address(wallet), amount), \"Rewards::topUpBootstrapPool - approve failed\");\r\n        wallet.topUp(amount);\r\n\r\n        emit BootstrapAddedToPool(amount, toUint256Granularity(bootstrapPool));\r\n    }\r\n\r\n    function getBootstrapBalance(address addr) external view returns (uint256) {\r\n        return toUint256Granularity(balances[addr].bootstrapRewards);\r\n    }\r\n\r\n    function assignRewards() public onlyWhenActive {\r\n        (address[] memory committee, uint256[] memory weights, bool[] memory certification) = getCommitteeContract().getCommittee();\r\n        _assignRewardsToCommittee(committee, weights, certification);\r\n    }\r\n\r\n    function assignRewardsToCommittee(address[] calldata committee, uint256[] calldata committeeWeights, bool[] calldata certification) external onlyCommitteeContract onlyWhenActive {\r\n        _assignRewardsToCommittee(committee, committeeWeights, certification);\r\n    }\r\n\r\n    struct Totals {\r\n        uint48 bootstrapRewardsTotalBalance;\r\n        uint48 feesTotalBalance;\r\n        uint48 stakingRewardsTotalBalance;\r\n    }\r\n\r\n    function _assignRewardsToCommittee(address[] memory committee, uint256[] memory committeeWeights, bool[] memory certification) private {\r\n        Settings memory _settings = settings;\r\n\r\n        (uint256 generalGuardianBootstrap, uint256 certifiedGuardianBootstrap) = collectBootstrapRewards(_settings);\r\n        (uint256 generalGuardianFee, uint256 certifiedGuardianFee) = collectFees(committee, certification);\r\n        (uint256[] memory stakingRewards) = collectStakingRewards(committee, committeeWeights, _settings);\r\n\r\n        PoolsAndTotalBalances memory totals = poolsAndTotalBalances;\r\n\r\n        Totals memory origTotals = Totals({\r\n            bootstrapRewardsTotalBalance: totals.bootstrapRewardsTotalBalance,\r\n            feesTotalBalance: totals.feesTotalBalance,\r\n            stakingRewardsTotalBalance: totals.stakingRewardsTotalBalance\r\n        });\r\n\r\n        Balance memory balance;\r\n        for (uint i = 0; i < committee.length; i++) {\r\n            balance = balances[committee[i]];\r\n\r\n            balance.bootstrapRewards += toUint48Granularity(certification[i] ? certifiedGuardianBootstrap : generalGuardianBootstrap);\r\n            balance.fees += toUint48Granularity(certification[i] ? certifiedGuardianFee : generalGuardianFee);\r\n            balance.stakingRewards += toUint48Granularity(stakingRewards[i]);\r\n\r\n            totals.bootstrapRewardsTotalBalance += toUint48Granularity(certification[i] ? certifiedGuardianBootstrap : generalGuardianBootstrap);\r\n            totals.feesTotalBalance += toUint48Granularity(certification[i] ? certifiedGuardianFee : generalGuardianFee);\r\n            totals.stakingRewardsTotalBalance += toUint48Granularity(stakingRewards[i]);\r\n\r\n            balances[committee[i]] = balance;\r\n        }\r\n\r\n        getStakingRewardsWallet().withdraw(toUint256Granularity(uint48(totals.stakingRewardsTotalBalance.sub(origTotals.stakingRewardsTotalBalance))));\r\n        getBootstrapRewardsWallet().withdraw(toUint256Granularity(uint48(totals.bootstrapRewardsTotalBalance.sub(origTotals.bootstrapRewardsTotalBalance))));\r\n\r\n        poolsAndTotalBalances = totals;\r\n        lastAssignedAt = now;\r\n\r\n        emit StakingRewardsAssigned(committee, stakingRewards);\r\n        emit BootstrapRewardsAssigned(generalGuardianBootstrap, certifiedGuardianBootstrap);\r\n        emit FeesAssigned(generalGuardianFee, certifiedGuardianFee);\r\n    }\r\n\r\n    function collectBootstrapRewards(Settings memory _settings) private view returns (uint256 generalGuardianBootstrap, uint256 certifiedGuardianBootstrap){\r\n        uint256 duration = now.sub(lastAssignedAt);\r\n        generalGuardianBootstrap = toUint256Granularity(uint48(_settings.generalCommitteeAnnualBootstrap.mul(duration).div(365 days)));\r\n        certifiedGuardianBootstrap = generalGuardianBootstrap + toUint256Granularity(uint48(_settings.certificationCommitteeAnnualBootstrap.mul(duration).div(365 days)));\r\n    }\r\n\r\n    function withdrawBootstrapFunds() external onlyWhenActive {\r\n        uint48 amount = balances[msg.sender].bootstrapRewards;\r\n\r\n        PoolsAndTotalBalances memory _poolsAndTotalBalances = poolsAndTotalBalances;\r\n\r\n        require(amount <= _poolsAndTotalBalances.bootstrapPool, \"not enough balance in the bootstrap pool for this withdrawal\");\r\n        balances[msg.sender].bootstrapRewards = 0;\r\n        _poolsAndTotalBalances.bootstrapRewardsTotalBalance = uint48(_poolsAndTotalBalances.bootstrapRewardsTotalBalance.sub(amount));\r\n        _poolsAndTotalBalances.bootstrapPool = uint48(_poolsAndTotalBalances.bootstrapPool.sub(amount));\r\n        poolsAndTotalBalances = _poolsAndTotalBalances;\r\n\r\n        emit BootstrapRewardsWithdrawn(msg.sender, toUint256Granularity(amount));\r\n        require(transfer(bootstrapToken, msg.sender, amount), \"Rewards::withdrawBootstrapFunds - insufficient funds\");\r\n    }\r\n\r\n    // staking rewards\r\n\r\n    function setAnnualStakingRewardsRate(uint256 annual_rate_in_percent_mille, uint256 annual_cap) external onlyFunctionalOwner onlyWhenActive {\r\n        Settings memory _settings = settings;\r\n        _settings.annualRateInPercentMille = uint48(annual_rate_in_percent_mille);\r\n        _settings.annualCap = toUint48Granularity(annual_cap);\r\n        settings = _settings;\r\n    }\r\n\r\n    function topUpStakingRewardsPool(uint256 amount) external onlyWhenActive {\r\n        uint48 amount48 = toUint48Granularity(amount);\r\n        uint48 total48 = poolsAndTotalBalances.stakingPool + amount48;\r\n        poolsAndTotalBalances.stakingPool = total48;\r\n\r\n        IERC20 _erc20 = erc20;\r\n        require(_erc20.transferFrom(msg.sender, address(this), amount), \"Rewards::topUpProRataPool - insufficient allowance\");\r\n\r\n        IProtocolWallet wallet = getStakingRewardsWallet();\r\n        require(_erc20.approve(address(wallet), amount), \"Rewards::topUpProRataPool - approve failed\");\r\n        wallet.topUp(amount);\r\n\r\n        emit StakingRewardsAddedToPool(amount, toUint256Granularity(total48));\r\n    }\r\n\r\n    function getStakingRewardBalance(address addr) external view returns (uint256) {\r\n        return toUint256Granularity(balances[addr].stakingRewards);\r\n    }\r\n\r\n    function getLastRewardAssignmentTime() external view returns (uint256) {\r\n        return lastAssignedAt;\r\n    }\r\n\r\n    function collectStakingRewards(address[] memory committee, uint256[] memory weights, Settings memory _settings) private view returns (uint256[] memory assignedRewards) {\r\n        // TODO we often do integer division for rate related calculation, which floors the result. Do we need to address this?\r\n        // TODO for an empty committee or a committee with 0 total stake the divided amounts will be locked in the contract FOREVER\r\n        assignedRewards = new uint256[](committee.length);\r\n\r\n        uint256 totalWeight = 0;\r\n        for (uint i = 0; i < committee.length; i++) {\r\n            totalWeight = totalWeight.add(weights[i]);\r\n        }\r\n\r\n        if (totalWeight > 0) { // TODO - handle the case of totalStake == 0. consider also an empty committee. consider returning a boolean saying if the amount was successfully distributed or not and handle on caller side.\r\n            uint256 duration = now.sub(lastAssignedAt);\r\n\r\n            uint annualRateInPercentMille = Math.min(uint(_settings.annualRateInPercentMille), toUint256Granularity(_settings.annualCap).mul(100000).div(totalWeight));\r\n            uint48 curAmount;\r\n            for (uint i = 0; i < committee.length; i++) {\r\n                curAmount = toUint48Granularity(weights[i].mul(annualRateInPercentMille).mul(duration).div(36500000 days));\r\n                assignedRewards[i] = toUint256Granularity(curAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    struct DistributorBatchState {\r\n        uint256 fromBlock;\r\n        uint256 toBlock;\r\n        uint256 nextTxIndex;\r\n        uint split;\r\n    }\r\n    mapping (address => DistributorBatchState) distributorBatchState;\r\n\r\n    function isDelegatorRewardsBelowThreshold(uint256 delegatorRewards, uint256 totalRewards) private view returns (bool) {\r\n        return delegatorRewards.mul(100000) <= uint(settings.maxDelegatorsStakingRewardsPercentMille).mul(totalRewards.add(toUint256Granularity(1))); // +1 is added to account for rounding errors\r\n    }\r\n\r\n    struct VistributeOrbsTokenStakingRewardsVars {\r\n        bool firstTxBySender;\r\n        address guardianAddr;\r\n        uint256 delegatorsAmount;\r\n    }\r\n    function distributeOrbsTokenStakingRewards(uint256 totalAmount, uint256 fromBlock, uint256 toBlock, uint split, uint txIndex, address[] calldata to, uint256[] calldata amounts) external onlyWhenActive {\r\n        require(to.length > 0, \"list must containt at least one recipient\");\r\n        require(to.length == amounts.length, \"expected to and amounts to be of same length\");\r\n        uint48 totalAmount_uint48 = toUint48Granularity(totalAmount);\r\n        require(totalAmount == toUint256Granularity(totalAmount_uint48), \"totalAmount must divide by 1e15\");\r\n\r\n        VistributeOrbsTokenStakingRewardsVars memory vars;\r\n\r\n        vars.guardianAddr = getGuardiansRegistrationContract().resolveGuardianAddress(msg.sender);\r\n\r\n        for (uint i = 0; i < to.length; i++) {\r\n            if (to[i] != vars.guardianAddr) {\r\n                vars.delegatorsAmount = vars.delegatorsAmount.add(amounts[i]);\r\n            }\r\n        }\r\n        require(isDelegatorRewardsBelowThreshold(vars.delegatorsAmount, totalAmount), \"Total delegators reward (to[1:n]) must be less then maxDelegatorsStakingRewardsPercentMille of total amount\");\r\n\r\n        DistributorBatchState memory ds = distributorBatchState[vars.guardianAddr];\r\n        vars.firstTxBySender = ds.nextTxIndex == 0;\r\n\r\n        require(!vars.firstTxBySender || fromBlock == 0, \"on the first batch fromBlock must be 0\");\r\n\r\n        if (vars.firstTxBySender || fromBlock == ds.toBlock + 1) { // New distribution batch\r\n            require(txIndex == 0, \"txIndex must be 0 for the first transaction of a new distribution batch\");\r\n            require(toBlock < block.number, \"toBlock must be in the past\");\r\n            require(toBlock >= fromBlock, \"toBlock must be at least fromBlock\");\r\n            ds.fromBlock = fromBlock;\r\n            ds.toBlock = toBlock;\r\n            ds.split = split;\r\n            ds.nextTxIndex = 1;\r\n            distributorBatchState[vars.guardianAddr] = ds;\r\n        } else {\r\n            require(txIndex == ds.nextTxIndex, \"txIndex mismatch\");\r\n            require(toBlock == ds.toBlock, \"toBlock mismatch\");\r\n            require(fromBlock == ds.fromBlock, \"fromBlock mismatch\");\r\n            require(split == ds.split, \"split mismatch\");\r\n            distributorBatchState[vars.guardianAddr].nextTxIndex = txIndex + 1;\r\n        }\r\n\r\n        require(totalAmount_uint48 <= balances[vars.guardianAddr].stakingRewards, \"not enough member balance for this distribution\");\r\n\r\n        PoolsAndTotalBalances memory _poolsAndTotalBalances = poolsAndTotalBalances;\r\n\r\n        require(totalAmount_uint48 <= _poolsAndTotalBalances.stakingPool, \"not enough balance in the staking pool for this distribution\");\r\n\r\n        _poolsAndTotalBalances.stakingPool = uint48(_poolsAndTotalBalances.stakingPool.sub(totalAmount_uint48));\r\n        balances[vars.guardianAddr].stakingRewards = uint48(balances[vars.guardianAddr].stakingRewards.sub(totalAmount_uint48));\r\n        _poolsAndTotalBalances.stakingRewardsTotalBalance = uint48(_poolsAndTotalBalances.stakingRewardsTotalBalance.sub(totalAmount_uint48));\r\n\r\n        poolsAndTotalBalances = _poolsAndTotalBalances;\r\n\r\n        IStakingContract stakingContract = getStakingContract();\r\n\r\n        approve(erc20, address(stakingContract), totalAmount_uint48);\r\n        stakingContract.distributeRewards(totalAmount, to, amounts); // TODO should we rely on staking contract to verify total amount?\r\n\r\n        getDelegationsContract().refreshStakeNotification(vars.guardianAddr);\r\n\r\n        emit StakingRewardsDistributed(vars.guardianAddr, fromBlock, toBlock, split, txIndex, to, amounts);\r\n    }\r\n\r\n    // fees\r\n\r\n    function getFeeBalance(address addr) external view returns (uint256) {\r\n        return toUint256Granularity(balances[addr].fees);\r\n    }\r\n\r\n    uint constant MAX_FEE_BUCKET_ITERATIONS = 24;\r\n\r\n    function collectFees(address[] memory committee, bool[] memory certification) private returns (uint256 generalGuardianFee, uint256 certifiedGuardianFee) {\r\n        // TODO we often do integer division for rate related calculation, which floors the result. Do we need to address this?\r\n        // TODO for an empty committee or a committee with 0 total stake the divided amounts will be locked in the contract FOREVER\r\n\r\n        // Fee pool\r\n        uint _lastAssignedAt = lastAssignedAt;\r\n        uint bucketsPayed = 0;\r\n        uint generalFeePoolAmount = 0;\r\n        uint certificationFeePoolAmount = 0;\r\n        while (bucketsPayed < MAX_FEE_BUCKET_ITERATIONS && _lastAssignedAt < now) {\r\n            uint256 bucketStart = _bucketTime(_lastAssignedAt);\r\n            uint256 bucketEnd = bucketStart.add(feeBucketTimePeriod);\r\n            uint256 payUntil = Math.min(bucketEnd, now);\r\n            uint256 bucketDuration = payUntil.sub(_lastAssignedAt);\r\n            uint256 remainingBucketTime = bucketEnd.sub(_lastAssignedAt);\r\n\r\n            uint256 bucketTotal = generalFeePoolBuckets[bucketStart];\r\n            uint256 amount = bucketTotal * bucketDuration / remainingBucketTime;\r\n            generalFeePoolAmount += amount;\r\n            bucketTotal = bucketTotal.sub(amount);\r\n            generalFeePoolBuckets[bucketStart] = bucketTotal;\r\n            emit FeesWithdrawnFromBucket(bucketStart, amount, bucketTotal, false);\r\n\r\n            bucketTotal = certifiedFeePoolBuckets[bucketStart];\r\n            amount = bucketTotal * bucketDuration / remainingBucketTime;\r\n            certificationFeePoolAmount += amount;\r\n            bucketTotal = bucketTotal.sub(amount);\r\n            certifiedFeePoolBuckets[bucketStart] = bucketTotal;\r\n            emit FeesWithdrawnFromBucket(bucketStart, amount, bucketTotal, true);\r\n\r\n            _lastAssignedAt = payUntil;\r\n\r\n            assert(_lastAssignedAt <= bucketEnd);\r\n            if (_lastAssignedAt == bucketEnd) {\r\n                delete generalFeePoolBuckets[bucketStart];\r\n                delete certifiedFeePoolBuckets[bucketStart];\r\n            }\r\n\r\n            bucketsPayed++;\r\n        }\r\n\r\n        generalGuardianFee = divideFees(committee, certification, generalFeePoolAmount, false);\r\n        certifiedGuardianFee = generalGuardianFee + divideFees(committee, certification, certificationFeePoolAmount, true);\r\n    }\r\n\r\n    function divideFees(address[] memory committee, bool[] memory certification, uint256 amount, bool isCertified) private returns (uint256 guardianFee) {\r\n        uint n = committee.length;\r\n        if (isCertified)  {\r\n            n = 0;\r\n            for (uint i = 0; i < committee.length; i++) {\r\n                if (certification[i]) n++;\r\n            }\r\n        }\r\n        if (n > 0) {\r\n            guardianFee = toUint256Granularity(toUint48Granularity(amount.div(n)));\r\n        }\r\n\r\n        uint256 remainder = amount.sub(guardianFee.mul(n));\r\n        if (remainder > 0) {\r\n            fillFeeBucket(_bucketTime(now), remainder, isCertified);\r\n        }\r\n    }\r\n\r\n    function fillGeneralFeeBuckets(uint256 amount, uint256 monthlyRate, uint256 fromTimestamp) external onlyWhenActive {\r\n        fillFeeBuckets(amount, monthlyRate, fromTimestamp, false);\r\n    }\r\n\r\n    function fillCertificationFeeBuckets(uint256 amount, uint256 monthlyRate, uint256 fromTimestamp) external onlyWhenActive {\r\n        fillFeeBuckets(amount, monthlyRate, fromTimestamp, true);\r\n    }\r\n\r\n    function fillFeeBucket(uint256 bucketId, uint256 amount, bool isCertified) private {\r\n        uint256 total;\r\n        if (isCertified) {\r\n            total = certifiedFeePoolBuckets[bucketId].add(amount);\r\n            certifiedFeePoolBuckets[bucketId] = total;\r\n        } else {\r\n            total = generalFeePoolBuckets[bucketId].add(amount);\r\n            generalFeePoolBuckets[bucketId] = total;\r\n        }\r\n\r\n        emit FeesAddedToBucket(bucketId, amount, total, isCertified);\r\n    }\r\n\r\n    function fillFeeBuckets(uint256 amount, uint256 monthlyRate, uint256 fromTimestamp, bool isCertified) private {\r\n        assignRewards(); // to handle rate change in the middle of a bucket time period (TBD - this is nice to have, consider removing)\r\n\r\n        uint256 bucket = _bucketTime(fromTimestamp);\r\n        uint256 _amount = amount;\r\n\r\n        // add the partial amount to the first bucket\r\n        uint256 bucketAmount = Math.min(amount, monthlyRate.mul(feeBucketTimePeriod - fromTimestamp % feeBucketTimePeriod).div(feeBucketTimePeriod));\r\n        fillFeeBucket(bucket, bucketAmount, isCertified);\r\n        _amount = _amount.sub(bucketAmount);\r\n\r\n        // following buckets are added with the monthly rate\r\n        while (_amount > 0) {\r\n            bucket = bucket.add(feeBucketTimePeriod);\r\n            bucketAmount = Math.min(monthlyRate, _amount);\r\n            fillFeeBucket(bucket, bucketAmount, isCertified);\r\n            _amount = _amount.sub(bucketAmount);\r\n        }\r\n\r\n        assert(_amount == 0);\r\n\r\n        require(erc20.transferFrom(msg.sender, address(this), amount), \"failed to transfer subscription fees from subscriptions to rewards\");\r\n    }\r\n\r\n    function withdrawFeeFunds() external onlyWhenActive {\r\n        uint48 amount = balances[msg.sender].fees;\r\n        balances[msg.sender].fees = 0;\r\n        poolsAndTotalBalances.feesTotalBalance = uint48(poolsAndTotalBalances.feesTotalBalance.sub(amount));\r\n        emit FeesWithdrawn(msg.sender, toUint256Granularity(amount));\r\n        require(transfer(erc20, msg.sender, amount), \"Rewards::claimExternalTokenRewards - insufficient funds\");\r\n    }\r\n\r\n    function getTotalBalances() external view returns (uint256 feesTotalBalance, uint256 stakingRewardsTotalBalance, uint256 bootstrapRewardsTotalBalance) {\r\n        PoolsAndTotalBalances memory totals = poolsAndTotalBalances;\r\n        return (toUint256Granularity(totals.feesTotalBalance), toUint256Granularity(totals.stakingRewardsTotalBalance), toUint256Granularity(totals.bootstrapRewardsTotalBalance));\r\n    }\r\n\r\n    function _bucketTime(uint256 time) private pure returns (uint256) {\r\n        return time - time % feeBucketTimePeriod;\r\n    }\r\n\r\n    function emergencyWithdraw() external onlyMigrationOwner {\r\n        emit EmergencyWithdrawal(msg.sender);\r\n        require(erc20.transfer(msg.sender, erc20.balanceOf(address(this))), \"Rewards::emergencyWithdraw - transfer failed (fee token)\");\r\n        require(bootstrapToken.transfer(msg.sender, bootstrapToken.balanceOf(address(this))), \"Rewards::emergencyWithdraw - transfer failed (bootstrap token)\");\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_bootstrapToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"added\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"BootstrapAddedToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generalGuardianAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certifiedGuardianAmount\",\"type\":\"uint256\"}],\"name\":\"BootstrapRewardsAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BootstrapRewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractRegistryAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bucketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"added\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"}],\"name\":\"FeesAddedToBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generalGuardianAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certifiedGuardianAmount\",\"type\":\"uint256\"}],\"name\":\"FeesAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bucketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"}],\"name\":\"FeesWithdrawnFromBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFunctionalOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFunctionalOwner\",\"type\":\"address\"}],\"name\":\"FunctionalOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxDelegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"}],\"name\":\"MaxDelegatorsStakingRewardsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMigrationOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMigrationOwner\",\"type\":\"address\"}],\"name\":\"MigrationOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"added\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"StakingRewardsAddedToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assignees\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"StakingRewardsAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"StakingRewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"assignRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"committee\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"committeeWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"certification\",\"type\":\"bool[]\"}],\"name\":\"assignRewardsToCommittee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFunctionalOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMigrationOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeOrbsTokenStakingRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromTimestamp\",\"type\":\"uint256\"}],\"name\":\"fillCertificationFeeBuckets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromTimestamp\",\"type\":\"uint256\"}],\"name\":\"fillGeneralFeeBuckets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"functionalOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBootstrapBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBootstrapRewardsWallet\",\"outputs\":[{\"internalType\":\"contract IProtocolWallet\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCertificationContract\",\"outputs\":[{\"internalType\":\"contract ICertification\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommitteeContract\",\"outputs\":[{\"internalType\":\"contract ICommittee\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDelegationsContract\",\"outputs\":[{\"internalType\":\"contract IDelegations\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getElectionsContract\",\"outputs\":[{\"internalType\":\"contract IElections\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGuardiansRegistrationContract\",\"outputs\":[{\"internalType\":\"contract IGuardiansRegistration\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastRewardAssignmentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProtocolContract\",\"outputs\":[{\"internalType\":\"contract IProtocol\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardsContract\",\"outputs\":[{\"internalType\":\"contract IRewards\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakingContract\",\"outputs\":[{\"internalType\":\"contract IStakingContract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStakingRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakingRewardsWallet\",\"outputs\":[{\"internalType\":\"contract IProtocolWallet\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSubscriptionsContract\",\"outputs\":[{\"internalType\":\"contract ISubscriptions\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feesTotalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRewardsTotalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bootstrapRewardsTotalBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFunctionalOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMigrationOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceFunctionalOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMigrationOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"annual_rate_in_percent_mille\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annual_cap\",\"type\":\"uint256\"}],\"name\":\"setAnnualStakingRewardsRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"annual_amount\",\"type\":\"uint256\"}],\"name\":\"setCertificationCommitteeAnnualBootstrap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"}],\"name\":\"setContractRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"annual_amount\",\"type\":\"uint256\"}],\"name\":\"setGeneralCommitteeAnnualBootstrap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maxDelegatorsStakingRewardsPercentMille\",\"type\":\"uint32\"}],\"name\":\"setMaxDelegatorsStakingRewardsPercentMille\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUpBootstrapPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUpStakingRewardsPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFunctionalOwner\",\"type\":\"address\"}],\"name\":\"transferFunctionalOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMigrationOwner\",\"type\":\"address\"}],\"name\":\"transferMigrationOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBootstrapFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFeeFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Rewards","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ff56cc6b1e6ded347aa0b7676c85ab0b3d08b0fa0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a50e590184827e6ef68a75680fbdded13611a321a12310795f28bc84fd61059d"}]}