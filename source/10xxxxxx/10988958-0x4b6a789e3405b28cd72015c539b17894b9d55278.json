{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/ISparkleRewardTiers.sol\r\n\r\n/// SWC-103:  Floating Pragma\r\npragma solidity 0.6.12;\r\n\r\n// import '../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol';\r\n// import '../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol';\r\n// import '../node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol';\r\n// import '../node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol';\r\n\r\n/**\r\n  * @title A contract for managing reward tiers\r\n  * @author SparkleLoyalty Inc. (c) 2019-2020\r\n  */\r\n// interface ISparkleRewardTiers is Ownable, Pausable, ReentrancyGuard {\r\ninterface ISparkleRewardTiers {\r\n\r\n  /**\r\n    * @dev Add a new reward tier to the contract for future proofing\r\n    * @param _index of the new reward tier to add\r\n    * @param _rate of the added reward tier\r\n    * @param _price of the added reward tier\r\n    * @param _enabled status of the added reward tier\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function addTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\r\n  external\r\n  // view\r\n  // onlyOwner\r\n  // whenNotPaused\r\n  // nonReentrant\r\n  returns(bool);\r\n\r\n  /**\r\n    * @dev Update an existing reward tier with new values\r\n    * @param _index of reward tier to update\r\n    * @param _rate of the reward tier\r\n    * @param _price of the reward tier\r\n    * @param _enabled status of the reward tier\r\n    * @return (bool) indicating success/failure\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function updateTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\r\n  external\r\n  // view\r\n  // onlyOwner\r\n  // whenNotPaused\r\n  // nonReentrant\r\n  returns(bool);\r\n\r\n  /**\r\n    * @dev Remove an existing reward tier from list of tiers\r\n    * @param _index of reward tier to remove\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function deleteTier(uint256 _index)\r\n  external\r\n  // view\r\n  // onlyOwner\r\n  // whenNotPaused\r\n  // nonReentrant\r\n  returns(bool);\r\n\r\n  /**\r\n    * @dev Get the rate value of specified tier\r\n    * @param _index of tier to query\r\n    * @return specified reward tier rate\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function getRate(uint256 _index)\r\n  external\r\n  // view\r\n  // whenNotPaused\r\n  returns(uint256);\r\n\r\n  /**\r\n    * @dev Get price of tier\r\n    * @param _index of tier to query\r\n    * @return uint256 indicating tier price\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function getPrice(uint256 _index)\r\n  external\r\n  // view\r\n  // whenNotPaused\r\n  returns(uint256);\r\n\r\n  /**\r\n    * @dev Get the enabled status of tier\r\n    * @param _index of tier to query\r\n    * @return bool indicating status of tier\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function getEnabled(uint256 _index)\r\n  external\r\n  // view\r\n  // whenNotPaused\r\n  returns(bool);\r\n\r\n  /**\r\n    * @dev Withdraw ether that has been sent directly to the contract\r\n    * @return bool indicating withdraw success\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function withdrawEth()\r\n  external\r\n  // onlyOwner\r\n  // whenNotPaused\r\n  // nonReentrant\r\n  returns(bool);\r\n\r\n  /**\r\n    * @dev Event triggered when a reward tier is deleted\r\n    * @param _index of tier to deleted\r\n    */\r\n  event TierDeleted(uint256 _index);\r\n\r\n  /**\r\n    * @dev Event triggered when a reward tier is updated\r\n    * @param _index of the updated tier\r\n    * @param _rate of updated tier\r\n    * @param _price of updated tier\r\n    * @param _enabled status of updated tier\r\n    */\r\n  event TierUpdated(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\r\n\r\n  /**\r\n    * @dev Event triggered when a new reward tier is added\r\n    * @param _index of the tier added\r\n    * @param _rate of added tier\r\n    * @param _price of added tier\r\n    * @param _enabled status of added tier\r\n    */\r\n  event TierAdded(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\r\n\r\n}\r\n\r\n// File: contracts/SparkleRewardTiers.sol\r\n\r\n/// SWC-103:  Floating Pragma\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @title A contract for managing reward tiers\r\n  * @author SparkleLoyalty Inc. (c) 2019-2020\r\n  */\r\ncontract SparkleRewardTiers is ISparkleRewardTiers, Ownable, Pausable, ReentrancyGuard {\r\n\r\n  /**\r\n    * @dev Ensure math safety through SafeMath\r\n    */\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n    * @dev Data structure declaring a loyalty tier\r\n    * @param _rate apr for reward tier\r\n    * @param _price to select reward tier\r\n    * @param _enabled availability for reward tier\r\n    */\r\n  struct Tier {\r\n    uint256 _rate;\r\n    uint256 _price;\r\n    bool _enabled;\r\n  }\r\n\r\n  // tiers mapping of available reward tiers\r\n  mapping(uint256 => Tier) private g_tiers;\r\n\r\n  /**\r\n    * @dev Sparkle loyalty tier rewards contract\r\n    * @notice Timestamp support for SparklePOL contract\r\n    */\r\n  constructor()\r\n  public\r\n  Ownable()\r\n  Pausable()\r\n  ReentrancyGuard()\r\n  {\r\n    Tier memory tier0;\r\n    tier0._rate = uint256(1.00000000 * 10e7);\r\n    tier0._price = 0 ether;\r\n    tier0._enabled = true;\r\n    /// Initialize default reward tier\r\n    g_tiers[0] = tier0;\r\n\r\n    Tier memory tier1;\r\n    tier1._rate = uint256(1.10000000 * 10e7);\r\n    tier1._price = 0.10 ether;\r\n    tier1._enabled = true;\r\n    /// Initialize reward tier 1\r\n    g_tiers[1] = tier1;\r\n\r\n    Tier memory tier2;\r\n    tier2._rate = uint256(1.20000000 * 10e7);\r\n    tier2._price = 0.20 ether;\r\n    tier2._enabled = true;\r\n    /// Initialize reward tier 2\r\n    g_tiers[2] = tier2;\r\n\r\n    Tier memory tier3;\r\n    tier3._rate = uint256(1.30000000 * 10e7);\r\n    tier3._price = 0.30 ether;\r\n    tier3._enabled = true;\r\n    /// Initialize reward tier 3\r\n    g_tiers[3] = tier3;\r\n  }\r\n\r\n  /**\r\n    * @dev Add a new reward tier to the contract for future proofing\r\n    * @param _index of the new reward tier to add\r\n    * @param _rate of the added reward tier\r\n    * @param _price of the added reward tier\r\n    * @param _enabled status of the added reward tier\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function addTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  override\r\n  returns(bool)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {From}');\r\n    /// Validate that tier does not already exist\r\n    require(g_tiers[_index]._enabled == false, 'Tier exists');\r\n    Tier memory newTier;\r\n    /// Initialize structure to specified data\r\n    newTier._rate = _rate;\r\n    newTier._price = _price;\r\n    newTier._enabled = _enabled;\r\n    /// Insert tier into collection\r\n    g_tiers[_index] = newTier;\r\n    /// Emit event log to the block chain for future web3 use\r\n    emit TierAdded(_index, _rate, _price, _enabled);\r\n    /// Return success\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Update an existing reward tier with new values\r\n    * @param _index of reward tier to update\r\n    * @param _rate of the reward tier\r\n    * @param _price of the reward tier\r\n    * @param _enabled status of the reward tier\r\n    * @return (bool) indicating success/failure\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function updateTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  override\r\n  returns(bool)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {From}');\r\n    require(g_tiers[_index]._rate > 0, 'Invalid tier');\r\n    /// Validate that reward and ether values\r\n    require(_rate > 0, 'Invalid rate');\r\n    require(_price > 0, 'Invalid Price');\r\n    /// Update the specified tier with specified data\r\n    g_tiers[_index]._rate = _rate;\r\n    g_tiers[_index]._price = _price;\r\n    g_tiers[_index]._enabled = _enabled;\r\n    /// Emit event log to the block chain for future web3 use\r\n    emit TierUpdated(_index, _rate, _price, _enabled);\r\n    /// Return success\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Remove an existing reward tier from list of tiers\r\n    * @param _index of reward tier to remove\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function deleteTier(uint256 _index)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  override\r\n  returns(bool)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {From}');\r\n    /// Validate tier delete does not delete system tiers 0-2\r\n    require(_index >= 4, 'Invalid request');\r\n    /// Zero out the spcified tier's data\r\n    delete g_tiers[_index];\r\n    /// Emit event log to the block chain for future web3 use\r\n    emit TierDeleted(_index);\r\n    /// Return success\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Get the rate value of specified tier\r\n    * @param _index of tier to query\r\n    * @return specified reward tier rate\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function getRate(uint256 _index)\r\n  public\r\n  whenNotPaused\r\n  override\r\n  returns(uint256)\r\n  {\r\n    /// Return reward rate for specified tier\r\n    return g_tiers[_index]._rate;\r\n  }\r\n\r\n  /**\r\n    * @dev Get price of tier\r\n    * @param _index of tier to query\r\n    * @return uint256 indicating tier price\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function getPrice(uint256 _index)\r\n  public\r\n  whenNotPaused\r\n  override\r\n  returns(uint256)\r\n  {\r\n    /// Return reward purchase price in ether for tier\r\n    return g_tiers[_index]._price;\r\n  }\r\n\r\n  /**\r\n    * @dev Get the enabled status of tier\r\n    * @param _index of tier to query\r\n    * @return bool indicating status of tier\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function getEnabled(uint256 _index)\r\n  public\r\n  whenNotPaused\r\n  override\r\n  returns(bool)\r\n  {\r\n    /// Return reward tier enabled status for specified tier\r\n    return g_tiers[_index]._enabled;\r\n  }\r\n\r\n  /**\r\n    * @dev Withdraw ether that has been sent directly to the contract\r\n    * @return bool indicating withdraw success\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function withdrawEth()\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  override\r\n  returns(bool)\r\n  {\r\n    /// Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {From}');\r\n    /// Validate that this contract is storing ether\r\n    require(address(this).balance >= 0, 'No ether');\r\n    /// Transfer the ether to owner address\r\n    msg.sender.transfer(address(this).balance);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @dev Event triggered when a reward tier is deleted\r\n    * @param _index of tier to deleted\r\n    */\r\n  event TierDeleted(uint256 _index);\r\n\r\n  /**\r\n    * @dev Event triggered when a reward tier is updated\r\n    * @param _index of the updated tier\r\n    * @param _rate of updated tier\r\n    * @param _price of updated tier\r\n    * @param _enabled status of updated tier\r\n    */\r\n  event TierUpdated(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\r\n\r\n  /**\r\n    * @dev Event triggered when a new reward tier is added\r\n    * @param _index of the tier added\r\n    * @param _rate of added tier\r\n    * @param _price of added tier\r\n    * @param _enabled status of added tier\r\n    */\r\n  event TierAdded(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"TierAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"TierDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"TierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"addTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deleteTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SparkleRewardTiers","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"petersburg","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5291e8b3b665934bd8e8d958199f56e545bd96c57a6cc86f5daa4c2ec6f30bf6"}]}