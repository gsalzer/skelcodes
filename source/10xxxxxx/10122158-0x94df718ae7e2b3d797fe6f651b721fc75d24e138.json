{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n╔═══╗╔═╗╔═╗╔═══╗╔═══╗╔════╗╔══╗─╔══╗╔════╗╔═══╗╔═══╗╔══╗╔═╗─╔╗╔════╗\r\n║╔═╗║║║╚╝║║║╔═╗║║╔═╗║║╔╗╔╗║║╔╗║─╚╣─╝║╔╗╔╗║║╔═╗║║╔═╗║╚╣─╝║║╚╗║║║╔╗╔╗║\r\n║╚══╗║╔╗╔╗║║║─║║║╚═╝║╚╝║║╚╝║╚╝╚╗─║║─╚╝║║╚╝║╚═╝║║║─║║─║║─║╔╗╚╝║╚╝║║╚╝\r\n╚══╗║║║║║║║║╚═╝║║╔╗╔╝──║║──║╔═╗║─║║───║║──║╔══╝║║─║║─║║─║║╚╗║║──║║──\r\n║╚═╝║║║║║║║║╔═╗║║║║╚╗──║║──║╚═╝║╔╣─╗──║║──║║───║╚═╝║╔╣─╗║║─║║║──║║──\r\n╚═══╝╚╝╚╝╚╝╚╝─╚╝╚╝╚═╝──╚╝──╚═══╝╚══╝──╚╝──╚╝───╚═══╝╚══╝╚╝─╚═╝──╚╝──\r\ntelegram channel: @smartbitpoint\r\ntelegram group: @smartbitpoint_com\r\ntelegram bot: @smartbitpoint_bot\r\nhashtag: #smartbitpoint\r\n*/\r\npragma solidity >=0.5.17 <0.7.0;\r\n\r\ncontract SmartBitPoint {\r\n    uint public currUserID;\r\n    address private owner;\r\n    address private manager;\r\n    mapping (uint => uint) public LEVEL_PRICE;\r\n    mapping (uint => uint) public LEVEL_PERIOD;\r\n    mapping (uint => uint) public StatsLevel;\r\n    mapping (uint => uint) public StatsPay;\r\n    struct User {\r\n        uint id;\r\n        uint referrerB;\r\n        uint referrerT;\r\n        uint referrerL;\r\n        address[] referralsB;\r\n        address[] referralsT;\r\n        address[] referralsL;\r\n        mapping (uint => uint) countGetMoney;\r\n        mapping (uint => uint) countLostMoney;\r\n        mapping (uint => uint) levelExpired;\r\n    }\r\n    mapping (address => User) public mapusers;\r\n    mapping (uint => address) public usersAddress;\r\n    bool private ContractInit;\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint8 indexed _type, uint _id, uint _time, uint _expires);\r\n    event buyLevelEvent(address indexed _user, uint indexed _level, uint _time, uint _expires);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint indexed _level, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint indexed _level, uint _time);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only owner can call this function.\");\r\n        _;\r\n    }\r\n    modifier onlyOwnerOrManager {\r\n        require(msg.sender == owner || msg.sender == manager, \"Only owner or manager can call this function.\");\r\n        _;\r\n    }\r\n    modifier userNotRegistered(address _user) {\r\n        require(mapusers[_user].id == 0, 'User is already registered');\r\n        _;\r\n    }\r\n    modifier userRegistered(address _user) {\r\n        require(mapusers[_user].id != 0, 'User does not exist');\r\n        _;\r\n    }\r\n    modifier validLevel(uint _level) {\r\n        require(_level > 0 && _level <= 8, 'Invalid level');\r\n        _;\r\n    }\r\n    modifier validPeriod(uint _period) {\r\n        require(_period > 0 && _period * 1 days <= now, 'Invalid period');\r\n        _;\r\n    }\r\n    modifier validPrice(uint _price) {\r\n        require(_price > 0 && _price % 3 == 0, 'Invalid price');\r\n        _;\r\n    }\r\n    modifier validAddress(address _user) {\r\n        require(_user != address(0), \"Zero address\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        require(!ContractInit,\"this contract inited!\");\r\n\r\n        owner = msg.sender;\r\n        manager = msg.sender;\r\n        address admin1 = 0x9FE5F739D3df1BEf612bbB8a06952D233C5474E3;\r\n        address admin2 = 0x93fD13DD91236269cBDce8859521A0121E4A437E;\r\n        address admin3 = 0xcF8AFeEdF9446ec79C3A3433F102E56A51fF90c0;\r\n        address admin4 = 0xaC77396F01Dd706108930CA1E375f4F400d39121;\r\n\r\n        LEVEL_PERIOD[1] = 15 days;\r\n        LEVEL_PERIOD[2] = 30 days;\r\n        LEVEL_PERIOD[3] = 45 days;\r\n        LEVEL_PERIOD[4] = 60 days;\r\n        LEVEL_PERIOD[5] = 75 days;\r\n        LEVEL_PERIOD[6] = 90 days;\r\n        LEVEL_PERIOD[7] = 105 days;\r\n        LEVEL_PERIOD[8] = 120 days;\r\n\r\n        LEVEL_PRICE[1] = 0.15 ether;\r\n        LEVEL_PRICE[2] = 0.3 ether;\r\n        LEVEL_PRICE[3] = 0.45 ether;\r\n        LEVEL_PRICE[4] = 0.75 ether;\r\n        LEVEL_PRICE[5] = 1.35 ether;\r\n        LEVEL_PRICE[6] = 3 ether;\r\n        LEVEL_PRICE[7] = 6 ether;\r\n        LEVEL_PRICE[8] = 10.5 ether;\r\n\r\n        currUserID++;\r\n        mapusers[admin1] = User({ id: currUserID, referrerB: 0, referrerT: 0, referrerL: 0, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[currUserID] = admin1;\r\n        currUserID++;\r\n        mapusers[admin2] = User({ id: currUserID, referrerB: 1, referrerT: 1, referrerL: 1, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[currUserID] = admin2;\r\n        currUserID++;\r\n        mapusers[admin3] = User({ id: currUserID, referrerB: 1, referrerT: 1, referrerL: 1, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[currUserID] = admin3;\r\n        currUserID++;\r\n        mapusers[admin4] = User({ id: currUserID, referrerB: 2, referrerT: 1, referrerL: 1, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n        usersAddress[currUserID] = admin4;\r\n        for(uint i = 1; i <= 8; i++) {\r\n            mapusers[admin1].levelExpired[i] = 113131641600;\r\n            mapusers[admin2].levelExpired[i] = 113131641600;\r\n            mapusers[admin3].levelExpired[i] = 113131641600;\r\n            mapusers[admin4].levelExpired[i] = 113131641600;\r\n            StatsLevel[i] = 4;\r\n            StatsPay[i] = 4;\r\n        }\r\n        mapusers[admin1].referralsB.push(admin2);\r\n        mapusers[admin1].referralsB.push(admin3);\r\n        mapusers[admin1].referralsT.push(admin2);\r\n        mapusers[admin1].referralsT.push(admin3);\r\n        mapusers[admin1].referralsT.push(admin4);\r\n        mapusers[admin1].referralsL.push(admin2);\r\n        mapusers[admin1].referralsL.push(admin3);\r\n        mapusers[admin1].referralsL.push(admin4);\r\n\r\n        mapusers[admin2].referralsB.push(admin4);\r\n        ContractInit = true;\r\n    }\r\n\r\n    function () external payable {\r\n        uint level;\r\n        if(msg.value == LEVEL_PRICE[1]){\r\n            level = 1;\r\n        }else if(msg.value == LEVEL_PRICE[2]){\r\n            level = 2;\r\n        }else if(msg.value == LEVEL_PRICE[3]){\r\n            level = 3;\r\n        }else if(msg.value == LEVEL_PRICE[4]){\r\n            level = 4;\r\n        }else if(msg.value == LEVEL_PRICE[5]){\r\n            level = 5;\r\n        }else if(msg.value == LEVEL_PRICE[6]){\r\n            level = 6;\r\n        }else if(msg.value == LEVEL_PRICE[7]){\r\n            level = 7;\r\n        }else if(msg.value == LEVEL_PRICE[8]){\r\n            level = 8;\r\n        }else {\r\n            revert('Invalid amount has sent');\r\n        }\r\n\r\n        if(mapusers[msg.sender].id != 0){\r\n\r\n            for(uint i=level-1; i>0; i--){\r\n                require(mapusers[msg.sender].levelExpired[i] >= now, 'Buy the previous level');\r\n            }\r\n            if(mapusers[msg.sender].levelExpired[level] < now){\r\n                if(mapusers[msg.sender].levelExpired[level] == 0) StatsLevel[level]++;\r\n                mapusers[msg.sender].levelExpired[level] = now + LEVEL_PERIOD[level];\r\n            } else {\r\n                mapusers[msg.sender].levelExpired[level] += LEVEL_PERIOD[level];\r\n            }\r\n            payForLevel(level, msg.sender);\r\n            StatsPay[level]++;\r\n            emit buyLevelEvent(msg.sender, level, now, mapusers[msg.sender].levelExpired[level]);\r\n        } else if(level == 1){\r\n            address referrer = _bytesToAddress(msg.data);\r\n            require(mapusers[referrer].id != 0, 'Incorrect referrer');\r\n\r\n            uint bone = mapusers[referrer].id;\r\n            uint two = mapusers[referrer].id;\r\n            uint tree = mapusers[referrer].id;\r\n            if(viewUserReferralsB(usersAddress[mapusers[referrer].id]).length >= 2)\r\n                bone = mapusers[findFreeReferrerB(usersAddress[mapusers[referrer].id])].id;\r\n            if(viewUserReferralsT(usersAddress[mapusers[referrer].id]).length >= 3)\r\n                two = mapusers[findFreeReferrerT(usersAddress[mapusers[referrer].id])].id;\r\n            currUserID++;\r\n            mapusers[msg.sender] = User({ id: currUserID, referrerB: bone, referrerT: two, referrerL: tree, referralsB: new address[](0), referralsT: new address[](0), referralsL: new address[](0) });\r\n            usersAddress[currUserID] = msg.sender;\r\n            mapusers[msg.sender].levelExpired[1] = now + LEVEL_PERIOD[1];\r\n            mapusers[usersAddress[bone]].referralsB.push(msg.sender);\r\n            mapusers[usersAddress[two]].referralsT.push(msg.sender);\r\n            mapusers[usersAddress[tree]].referralsL.push(msg.sender);\r\n            payForLevel(1, msg.sender);\r\n            StatsLevel[1]++;\r\n            StatsPay[1]++;\r\n            emit regLevelEvent(msg.sender, usersAddress[bone], 1, currUserID, now, mapusers[msg.sender].levelExpired[1]);\r\n            emit regLevelEvent(msg.sender, usersAddress[two], 2, currUserID, now, mapusers[msg.sender].levelExpired[1]);\r\n            emit regLevelEvent(msg.sender, usersAddress[tree], 3, currUserID, now, mapusers[msg.sender].levelExpired[1]);\r\n        } else {\r\n            revert('Buy first level');\r\n        }\r\n    }\r\n\r\n    function payForLevel(uint _level, address _user) internal {\r\n        uint height;\r\n        address referrer;\r\n\r\n        height = _level;\r\n        referrer = _user;\r\n        while (referrer != address(0)) {\r\n            referrer = usersAddress[mapusers[referrer].referrerB];\r\n            height--;\r\n            if(height == 0){\r\n                if(mapusers[referrer].levelExpired[_level] >= now) break;\r\n                emit lostMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n                mapusers[referrer].countLostMoney[_level]++;\r\n                height = _level;\r\n            }\r\n        }\r\n        if(referrer == address(0)) referrer = owner;\r\n        if(address(uint160(referrer)).send(LEVEL_PRICE[_level]/3)) {\r\n            emit getMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n            mapusers[referrer].countGetMoney[_level]++;\r\n        }\r\n\r\n        height = _level < 5 ? _level : _level - 4;\r\n        referrer = _user;\r\n        while (referrer != address(0)) {\r\n            referrer = usersAddress[mapusers[referrer].referrerT];\r\n            height--;\r\n            if(height == 0){\r\n                if(mapusers[referrer].levelExpired[_level] >= now) break;\r\n                emit lostMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n                mapusers[referrer].countLostMoney[_level]++;\r\n                height = _level < 5 ? _level : _level - 4;\r\n            }\r\n        }\r\n        if(referrer == address(0)) referrer = owner;\r\n        if(address(uint160(referrer)).send(LEVEL_PRICE[_level]/3)) {\r\n            emit getMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n            mapusers[referrer].countGetMoney[_level]++;\r\n        }\r\n\r\n        height = _level % 2 == 0 ? 2 : 1;\r\n        referrer = _user;\r\n        while (referrer != address(0)) {\r\n            referrer = usersAddress[mapusers[referrer].referrerL];\r\n            height--;\r\n            if(height == 0){\r\n                if(mapusers[referrer].levelExpired[_level] >= now) break;\r\n                emit lostMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n                mapusers[referrer].countLostMoney[_level]++;\r\n                height = _level % 2 == 0 ? 2 : 1;\r\n            }\r\n        }\r\n        if(referrer == address(0)) referrer = owner;\r\n        if(address(uint160(referrer)).send(LEVEL_PRICE[_level]/3)) {\r\n            emit getMoneyForLevelEvent(referrer, msg.sender, _level, now);\r\n            mapusers[referrer].countGetMoney[_level]++;\r\n        }\r\n    }\r\n\r\n    function findFreeReferrerB(address _user) public view returns(address) {\r\n        if(viewUserReferralsB(_user).length < 2) return _user;\r\n        address[] memory referrals = new address[](currUserID);\r\n        uint current = 0;\r\n        referrals[current] = _user;\r\n        for(uint i=0; i<currUserID;i++){\r\n            if(viewUserReferralsB(referrals[i]).length < 2) return referrals[i];\r\n            address[] memory currentReferrals = viewUserReferralsB(referrals[i]);\r\n            for(uint l=0; l<currentReferrals.length;l++){\r\n                current++;\r\n                referrals[current] = currentReferrals[l];\r\n            }\r\n        }\r\n        return referrals[current];\r\n    }\r\n    function findFreeReferrerT(address _user) public view returns(address) {\r\n        if(viewUserReferralsT(_user).length < 3) return _user;\r\n        address[] memory referrals = new address[](currUserID);\r\n        uint current = 0;\r\n        referrals[current] = _user;\r\n        for(uint i=0; i<currUserID;i++){\r\n            if(viewUserReferralsT(referrals[i]).length < 3) return referrals[i];\r\n            address[] memory currentReferrals = viewUserReferralsT(referrals[i]);\r\n            for(uint l=0; l<currentReferrals.length;l++){\r\n                current++;\r\n                referrals[current] = currentReferrals[l];\r\n            }\r\n        }\r\n        return referrals[current];\r\n    }\r\n\r\n    function getCountUserReferralsB(address _user, uint _level, uint8 _type) public view returns(uint) {\r\n        if(viewUserReferralsB(_user).length == 0 || _level == 1) return viewUserReferralsB(_user).length;\r\n        address[] memory referrals = new address[](currUserID);\r\n        uint current = 0;\r\n        uint result = 0;\r\n        uint level = 0;\r\n        uint current_level = 0;\r\n        uint next_level = 0;\r\n        referrals[current] = _user;\r\n        for(uint i=0; i<currUserID;i++){\r\n            if(mapusers[referrals[i]].id == 0) break;\r\n            address[] memory currentReferrals = viewUserReferralsB(referrals[i]);\r\n            if(current_level == 0){\r\n                current_level += currentReferrals.length;\r\n                level++;\r\n            } else next_level += currentReferrals.length;\r\n            for(uint l=0; l<currentReferrals.length;l++){\r\n                if(_level != 0 && _type == 1){\r\n                    if(level == _level) result++;\r\n                } else result++;\r\n                current++;\r\n                referrals[current] = currentReferrals[l];\r\n            }\r\n            current_level--;\r\n            if(current_level == 0){\r\n                if(_level != 0 && level == _level) return result;\r\n                level++;\r\n                current_level = next_level;\r\n                next_level = 0;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getCountUserReferralsT(address _user, uint _level, uint8 _type) public view returns(uint) {\r\n        if(viewUserReferralsT(_user).length == 0 || _level == 1) return viewUserReferralsT(_user).length;\r\n        address[] memory referrals = new address[](currUserID);\r\n        uint current = 0;\r\n        uint result = 0;\r\n        uint level = 0;\r\n        uint current_level = 0;\r\n        uint next_level = 0;\r\n        referrals[current] = _user;\r\n        for(uint i=0; i<currUserID;i++){\r\n            if(mapusers[referrals[i]].id == 0) break;\r\n            address[] memory currentReferrals = viewUserReferralsT(referrals[i]);\r\n            if(current_level == 0){\r\n                current_level += currentReferrals.length;\r\n                level++;\r\n            } else next_level += currentReferrals.length;\r\n            for(uint l=0; l<currentReferrals.length;l++){\r\n                if(_level != 0 && _type == 1){\r\n                    if(level == _level) result++;\r\n                } else result++;\r\n                current++;\r\n                referrals[current] = currentReferrals[l];\r\n            }\r\n            current_level--;\r\n            if(current_level == 0){\r\n                if(_level != 0 && level == _level) return result;\r\n                level++;\r\n                current_level = next_level;\r\n                next_level = 0;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getCountUserReferralsL(address _user, uint _level, uint8 _type) public view returns(uint) {\r\n        if(viewUserReferralsL(_user).length == 0 || _level == 1) return viewUserReferralsL(_user).length;\r\n        address[] memory referrals = new address[](currUserID);\r\n        uint current = 0;\r\n        uint result = 0;\r\n        uint level = 0;\r\n        uint current_level = 0;\r\n        uint next_level = 0;\r\n        referrals[current] = _user;\r\n        for(uint i=0; i<currUserID;i++){\r\n            if(mapusers[referrals[i]].id == 0) break;\r\n            address[] memory currentReferrals = viewUserReferralsL(referrals[i]);\r\n            if(current_level == 0){\r\n                current_level += currentReferrals.length;\r\n                level++;\r\n            } else next_level += currentReferrals.length;\r\n            for(uint l=0; l<currentReferrals.length;l++){\r\n                if(_level != 0 && _type == 1){\r\n                    if(level == _level) result++;\r\n                } else result++;\r\n                current++;\r\n                referrals[current] = currentReferrals[l];\r\n            }\r\n            current_level--;\r\n            if(current_level == 0){\r\n                if(_level != 0 && level == _level) return result;\r\n                level++;\r\n                current_level = next_level;\r\n                next_level = 0;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function viewUserReferralsB(address _user) public view returns(address[] memory) {\r\n        return mapusers[_user].referralsB;\r\n    }\r\n    function viewUserReferralsT(address _user) public view returns(address[] memory) {\r\n        return mapusers[_user].referralsT;\r\n    }\r\n    function viewUserReferralsL(address _user) public view returns(address[] memory) {\r\n        return mapusers[_user].referralsL;\r\n    }\r\n\r\n    function getCountGetMoney(address _user, uint _level) public view returns(uint) {\r\n        return mapusers[_user].countGetMoney[_level];\r\n    }\r\n    function getCountLostMoney(address _user, uint _level) public view returns(uint) {\r\n        return mapusers[_user].countLostMoney[_level];\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n        return mapusers[_user].levelExpired[_level];\r\n    }\r\n\r\n    function getUserInfo(address _user) public view returns(uint,uint256[3] memory,address[3] memory,uint256[8] memory,uint256[8] memory,bool[8] memory){\r\n        User storage user = mapusers[_user];\r\n        return (\r\n        user.id, [\r\n        user.referrerB, user.referrerT, user.referrerL\r\n        ], [\r\n        usersAddress[user.referrerB], usersAddress[user.referrerT], usersAddress[user.referrerL]\r\n        ], [\r\n        user.countGetMoney[1], user.countGetMoney[2], user.countGetMoney[3], user.countGetMoney[4],\r\n        user.countGetMoney[5], user.countGetMoney[6], user.countGetMoney[7], user.countGetMoney[8]\r\n        ], [\r\n        user.countLostMoney[1], user.countLostMoney[2], user.countLostMoney[3], user.countLostMoney[4],\r\n        user.countLostMoney[5], user.countLostMoney[6], user.countLostMoney[7], user.countLostMoney[8]\r\n        ], [\r\n        user.levelExpired[1] < now, user.levelExpired[2] < now, user.levelExpired[3] < now, user.levelExpired[4] < now,\r\n        user.levelExpired[5] < now, user.levelExpired[6] < now, user.levelExpired[7] < now, user.levelExpired[8] < now\r\n        ]);\r\n    }\r\n\r\n    function setLevelPeriod(uint _level, uint _period) public onlyOwnerOrManager validLevel(_level) validPeriod(_period) {\r\n        LEVEL_PERIOD[_level] = _period * 1 days;\r\n    }\r\n    function setLevelPrice(uint _level, uint _price) public onlyOwnerOrManager validLevel(_level) validPrice(_price) {\r\n        LEVEL_PRICE[_level] = _price * 0.01 ether;\r\n    }\r\n    function setUserLevelExpired(address _user, uint _level, uint _period) public onlyOwnerOrManager userRegistered(_user) validLevel(_level) validPeriod(_period) {\r\n        mapusers[_user].levelExpired[_level] = now + _period * 1 days;\r\n    }\r\n\r\n    function setOwner(address _user) public onlyOwner validAddress(_user) { owner = _user; }\r\n    function setManager(address _user) public onlyOwnerOrManager validAddress(_user) { manager = _user; }\r\n    function getOwner() external view returns (address) { return owner; }\r\n    function getManager() external view returns (address) { return manager; }\r\n    function _bytesToAddress(bytes memory _bys) internal pure returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(_bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expires\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expires\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StatsLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StatsPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrerB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrerT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getCountGetMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getCountLostMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getCountUserReferralsB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getCountUserReferralsL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getCountUserReferralsT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[8]\",\"name\":\"\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"\",\"type\":\"uint256[8]\"},{\"internalType\":\"bool[8]\",\"name\":\"\",\"type\":\"bool[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapusers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerL\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setLevelPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setLevelPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setUserLevelExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferralsB\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferralsL\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferralsT\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SmartBitPoint","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f0e555e55acd8b56863f50e48eb3c0f3cdb2ba2f770b31b14da76fb98aeafd93"}]}