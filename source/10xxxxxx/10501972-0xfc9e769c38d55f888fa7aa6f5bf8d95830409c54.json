{"status":"1","message":"OK","result":[{"SourceCode":"/**\n * SPDX-License-Identifier: UNLICENSED\n * (c) Copyright 2020 Kingsland University, all rights reserved.\n */\n\npragma solidity >=0.6.11;\n\n/**\n * Institution - Entities that are authorized by Kingsland University \n * to release certificates on the blockchain. It holds the institution information\n * as well as a list of authorized certificate issuers.\n */\ncontract Institution {\n    struct InstitutionData {\n        string institutionName;\n        string physicalAddress;\n        string website;\n        string contact;\n    }\n    \n    struct Issuer {\n        string fullIssuerName;\n        bool isActive;\n        uint revokedOn;\n    }\n    \n    address payable public owner;\n    mapping (address => Issuer) public issuersInfo;\n    address[] public issuers;\n    InstitutionData public institutionData;\n    uint public revokedOn;\n    \n    constructor(string memory _institutionName, string memory _physicalAddress, string memory _website, string memory _contact) public {\n        owner = msg.sender;\n        institutionData = InstitutionData(_institutionName, _physicalAddress, _website, _contact);\n    }\n    \n    modifier onlyOwner() {\n        require(owner == msg.sender);\n        _;\n    }\n    \n    function createIssuer(address _issuerAddress, string memory _fullIssuerName) public onlyOwner {\n        issuersInfo[_issuerAddress] = Issuer(_fullIssuerName, true, 0);\n        issuers.push(_issuerAddress);\n    }\n    \n    function isIssuerValid(address _issuerAddress) public view returns (bool isValid) {\n        return issuersInfo[_issuerAddress].isActive;\n    }\n    \n    function revokeIssuer(address _issuerAddress, uint _timestamp) public onlyOwner {\n        issuersInfo[_issuerAddress].isActive = false;\n        issuersInfo[_issuerAddress].revokedOn = _timestamp;\n    }\n    \n    function revokeSelf(uint _timestamp) public onlyOwner {\n        revokedOn = _timestamp;\n        selfdestruct(owner);\n    }\n    \n    function changeInstitutionData(string memory _institutionName, string memory _physicalAddress, string memory _website, string memory _contact) public onlyOwner {\n        institutionData = InstitutionData(_institutionName, _physicalAddress, _website, _contact); \n    }\n    \n    function getIssuersCount() view public returns (uint) {\n        return issuers.length;\n    }\n    \n    function transferOwner(address payable _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n}\n\n/**\n * Kingsland superadministrator contract - Controls the institutions that can issue certificates.\n * If you want to partner with us, contact admin(at)kingslanduniversity.com\n */\ncontract Kingsland {\n    struct InstitutionInfo {\n        bool isApproved;\n        uint revokedOn;\n    }\n    \n    mapping(address => InstitutionInfo) public approvedInstitutionsInfo;\n    Institution[] public approvedInstitutions;\n    \n    address payable public owner;\n    uint public destroyedOn;\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function approveInstitution(Institution _contractAddress) public onlyOwner {\n        approvedInstitutionsInfo[address(_contractAddress)].isApproved = true;\n        approvedInstitutions.push(_contractAddress);\n    }\n    \n    function revokeInstitution(address _contractAddress, uint _timestamp) public onlyOwner {\n        approvedInstitutionsInfo[_contractAddress].isApproved = false;\n        approvedInstitutionsInfo[_contractAddress].revokedOn = _timestamp;\n    }\n    \n    function revokeSelf(uint _timestamp) public onlyOwner {\n        destroyedOn = _timestamp;\n        selfdestruct(owner);\n    }\n    \n    function getInstitutionCount() view public returns (uint) {\n        return approvedInstitutions.length;\n    }\n    \n    function transferOwner(address payable _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract Institution\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"approveInstitution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedInstitutions\",\"outputs\":[{\"internalType\":\"contract Institution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedInstitutionsInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"revokedOn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyedOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInstitutionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"revokeInstitution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"revokeSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Kingsland","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}