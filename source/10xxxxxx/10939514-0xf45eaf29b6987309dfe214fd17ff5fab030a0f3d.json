{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Earn Passive Rewards On Cyliq Network\r\n *\r\n * https://www.Cycliq.Network\r\n */\r\n\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n\r\ninterface IERC20 \r\n{\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ApproveAndCallFallBack \r\n{\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes calldata data) external;\r\n}\r\n\r\n\r\nlibrary SafeMath \r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Detailed is IERC20 \r\n{\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    \r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract CycliqNetwork is ERC20Detailed \r\n{\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n    \r\n    string constant tokenName = \"Cycliq Network\";\r\n    string constant tokenSymbol = \"CYQ\"; \r\n    uint8  constant tokenDecimals = 18;\r\n    uint256 _totalSupply = 0;\r\n  \r\n    address public contractOwner;\r\n\r\n    uint256 public totalCycled = 0;\r\n    mapping (address => bool) public isCycling;\r\n\r\n    uint256 _totalRewardsPerUnit = 0;\r\n    mapping (address => uint256) private _totalRewardsPerUnit_positions;\r\n    mapping (address => uint256) private _savedRewards;\r\n    \r\n    \r\n    constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) \r\n    {\r\n        contractOwner = msg.sender;\r\n        _cycliqSupply(msg.sender, 100000*(10**uint256(tokenDecimals)));\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == contractOwner, \"only owner\");\r\n        _;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) \r\n    {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address owner) public view returns (uint256) \r\n    {\r\n        return balances[owner];\r\n    }\r\n    \r\n    function amountCycled(address owner) external view returns (uint256) \r\n    {\r\n        return isCycling[owner] ? convertToFullUnits(balances[owner]) : 0;\r\n    }\r\n    \r\n    function convertToFullUnits(uint256 valueWithDecimals) public pure returns (uint256) \r\n    {\r\n        return valueWithDecimals.div(10**uint256(tokenDecimals));\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) \r\n    {\r\n        return allowed[owner][spender];\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) public returns (bool) \r\n    {\r\n        _executeTransfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function multiTransfer(address[] memory receivers, uint256[] memory values) public\r\n    {\r\n        require(receivers.length == values.length);\r\n        for(uint256 i = 0; i < receivers.length; i++)\r\n            _executeTransfer(msg.sender, receivers[i], values[i]);\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) \r\n    {\r\n        require(value <= allowed[from][msg.sender]);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        _executeTransfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function approveAndCall(address spender, uint256 tokens, bytes calldata data) external returns (bool) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        allowed[msg.sender][spender] = (allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        allowed[msg.sender][spender] = (allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    \r\n     function _cycliqSupply(address account, uint256 value) internal onlyOwner\r\n    {\r\n        require(value != 0);\r\n        \r\n        uint256 initalBalance = balances[account];\r\n        uint256 newBalance = initalBalance.add(value);\r\n        \r\n        balances[account] = newBalance;\r\n        _totalSupply = _totalSupply.add(value);\r\n        \r\n        emit Transfer(address(0), account, value);\r\n    }\r\n    \r\n    \r\n    function burn(uint256 value) external \r\n    {\r\n        _burn(msg.sender, value);\r\n    }\r\n    \r\n    function burnFrom(address account, uint256 value) external \r\n    {\r\n        require(value <= allowed[account][msg.sender]);\r\n        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n    }\r\n    \r\n    function _burn(address account, uint256 value) internal \r\n    {\r\n        require(value != 0);\r\n        require(value <= balances[account]);\r\n        \r\n        uint256 initalBalance = balances[account];\r\n        uint256 newBalance = initalBalance.sub(value);\r\n        \r\n        balances[account] = newBalance;\r\n        _totalSupply = _totalSupply.sub(value);\r\n        \r\n        //update full units cycled\r\n        if(isCycling[account])\r\n        {\r\n            uint256 fus_total = totalCycled;\r\n            fus_total = fus_total.sub(convertToFullUnits(initalBalance));\r\n            fus_total = fus_total.add(convertToFullUnits(newBalance));\r\n            totalCycled = fus_total;\r\n        }\r\n        \r\n        emit Transfer(account, address(0), value);\r\n    }\r\n    \r\n    \r\n    /*\r\n    *   transfer operation incures a feee of 2%.\r\n    *   the receiver gets 98% of the sent value while 2% is sent to Cycliq staking pool.\r\n    */\r\n    \r\n    function _executeTransfer(address from, address to, uint256 value) private\r\n    {\r\n        require(value <= balances[from]);\r\n        require(to != address(0) && to != from);\r\n        require(to != address(this));\r\n        \r\n        \r\n        //Update senders Cycliq rewards .\r\n        if(isCycling[from])\r\n        {\r\n          updateRewardsFor(from);\r\n        }\r\n        \r\n        //Update receivers Cycliq rewards\r\n        if(isCycling[to])\r\n        {\r\n        updateRewardsFor(to);\r\n        }\r\n        \r\n        uint256 twoPercent = 0;\r\n        twoPercent = value.mul(2).div(100);\r\n            \r\n        //set a minimum Cycliq fee to prevent no-fee-txs due to precision loss\r\n        if(twoPercent == 0 && value > 0)\r\n          twoPercent = 1;\r\n            \r\n        uint256 initalBalance_from = balances[from];\r\n        balances[from] = initalBalance_from.sub(value);\r\n        \r\n        value = value.sub(twoPercent);\r\n        \r\n        uint256 initalBalance_to = balances[to];\r\n        balances[to] = initalBalance_to.add(value);\r\n        \r\n        emit Transfer(from, to, value);\r\n         \r\n        //update full units Cycled\r\n        uint256 fus_total = totalCycled;\r\n        if(isCycling[from])\r\n        {\r\n            fus_total = fus_total.sub(convertToFullUnits(initalBalance_from));\r\n            fus_total = fus_total.add(convertToFullUnits(balances[from]));\r\n        }\r\n        if(isCycling[to])\r\n        {\r\n            fus_total = fus_total.sub(convertToFullUnits(initalBalance_to));\r\n            fus_total = fus_total.add(convertToFullUnits(balances[to]));\r\n        }\r\n        totalCycled = fus_total;\r\n        \r\n        \r\n        if(fus_total > 0)\r\n        {\r\n            uint256 cycliqRewards = twoPercent;\r\n            //split up Cycliq rewards per unit\r\n            uint256 rewardsPerUnit = cycliqRewards.div(fus_total);\r\n            //apply Cycliq rewards\r\n            _totalRewardsPerUnit = _totalRewardsPerUnit.add(rewardsPerUnit);\r\n            balances[address(this)] = balances[address(this)].add(cycliqRewards);\r\n            if(cycliqRewards > 0)\r\n                emit Transfer(msg.sender, address(this), cycliqRewards);\r\n        }\r\n        \r\n    }\r\n    \r\n    //Refreshes Cyclers rewards before balance change\r\n    function updateRewardsFor(address cycler) private\r\n    {\r\n        _savedRewards[cycler] = viewUnpaidRewards(cycler);\r\n        _totalRewardsPerUnit_positions[cycler] = _totalRewardsPerUnit;\r\n    }\r\n    \r\n    //Fetches Cyclers rewards\r\n    function viewUnpaidRewards(address cycler) public view returns (uint256)\r\n    {\r\n        if(!isCycling[cycler])\r\n            return _savedRewards[cycler];\r\n            \r\n        uint256 newRewardsPerUnit = _totalRewardsPerUnit.sub(_totalRewardsPerUnit_positions[cycler]);\r\n        \r\n        uint256 newRewards = newRewardsPerUnit.mul(convertToFullUnits(balances[cycler]));\r\n        return _savedRewards[cycler].add(newRewards);\r\n    }\r\n    \r\n    //pay out unclaimed Cycliq rewards\r\n    function payoutRewards() public\r\n    {\r\n        updateRewardsFor(msg.sender);\r\n        uint256 rewards = _savedRewards[msg.sender];\r\n        require(rewards > 0 && rewards <= balances[address(this)]);\r\n        \r\n        _savedRewards[msg.sender] = 0;\r\n        \r\n        uint256 initalBalance_cycler = balances[msg.sender];\r\n        uint256 newBalance_cycler = initalBalance_cycler.add(rewards);\r\n        \r\n        //update full units cycled\r\n        if(isCycling[msg.sender])\r\n        {\r\n            uint256 fus_total = totalCycled;\r\n            fus_total = fus_total.sub(convertToFullUnits(initalBalance_cycler));\r\n            fus_total = fus_total.add(convertToFullUnits(newBalance_cycler));\r\n            totalCycled = fus_total;\r\n        }\r\n        \r\n        //transfer\r\n        balances[address(this)] = balances[address(this)].sub(rewards);\r\n        balances[msg.sender] = newBalance_cycler;\r\n        emit Transfer(address(this), msg.sender, rewards);\r\n    }\r\n    \r\n    function cycle() public { _cycle(msg.sender);  }\r\n    \r\n    function uncycle() public { _uncycle(msg.sender); }\r\n    \r\n    function cycleFor(address cycler) public onlyOwner { _cycle(cycler); }\r\n    \r\n    function uncycleFor(address cycler) public onlyOwner { _uncycle(cycler); }\r\n    \r\n    //Cycle for a target address\r\n    function _cycle(address cycler) private\r\n    {\r\n        require(!isCycling[cycler]);\r\n        updateRewardsFor(cycler);\r\n        isCycling[cycler] = true;\r\n        totalCycled = totalCycled.add(convertToFullUnits(balances[cycler]));\r\n    }\r\n    \r\n    //Uncycle for a target address\r\n    function _uncycle(address cycler) private\r\n    {\r\n        require(isCycling[cycler]);\r\n        updateRewardsFor(cycler);\r\n        isCycling[cycler] = false;\r\n        totalCycled = totalCycled.sub(convertToFullUnits(balances[cycler]));\r\n    }\r\n    \r\n    //withdraw tokens sent to this contract by accident\r\n    function withdrawERC20Tokens(address tokenAddress, uint256 amount) public onlyOwner\r\n    {\r\n        require(tokenAddress != address(this));\r\n        IERC20(tokenAddress).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"amountCycled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueWithDecimals\",\"type\":\"uint256\"}],\"name\":\"convertToFullUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cycle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cycler\",\"type\":\"address\"}],\"name\":\"cycleFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCycling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCycled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"uncycle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cycler\",\"type\":\"address\"}],\"name\":\"uncycleFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cycler\",\"type\":\"address\"}],\"name\":\"viewUnpaidRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CycliqNetwork","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f81775fff49cb3d58548d1925a236ba2c7386596e5e71638f4ec0f18490d83a8"}]}