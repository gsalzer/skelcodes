{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IStakedAaveImplWithInitialize {\r\n  function initialize(\r\n    address aaveGovernance,\r\n    string calldata name,\r\n    string calldata symbol,\r\n    uint8 decimals\r\n  ) external;\r\n\r\n  function stake(address onBehalfOf, uint256 amount) external;\r\n\r\n  function redeem(address to, uint256 amount) external;\r\n\r\n  function cooldown() external;\r\n\r\n  function claimRewards(address to, uint256 amount) external;\r\n\r\n  function balanceOf(address user) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title interface EIP2612\r\n * @author Aave\r\n * @dev Generic interface for the EIP2612 permit function\r\n */\r\ninterface IEIP2612Token is IERC20 {\r\n  /**\r\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\r\n   * @param owner the owner of the funds\r\n   * @param spender the spender\r\n   * @param value the amount\r\n   * @param deadline the deadline timestamp, type(uint256).max for max deadline\r\n   * @param v signature param\r\n   * @param s signature param\r\n   * @param r signature param\r\n   */\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external virtual;\r\n}\r\n\r\n/**\r\n * @title StakingHelper contract\r\n * @author Aave\r\n * @dev implements a staking function that allows staking through the EIP2612 capabilities of the AAVE token\r\n **/\r\n\r\ncontract AaveStakingHelper {\r\n  IStakedAaveImplWithInitialize public immutable STAKE;\r\n  IEIP2612Token public immutable AAVE;\r\n\r\n  constructor(address stake, address aave) public {\r\n    STAKE = IStakedAaveImplWithInitialize(stake);\r\n    AAVE = IEIP2612Token(aave);\r\n    //approves the stake to transfer uint256.max tokens from this contract\r\n    //avoids approvals on every stake action\r\n    IEIP2612Token(aave).approve(address(stake), type(uint256).max);\r\n  }\r\n\r\n  /**\r\n   * @dev stakes on behalf of msg.sender using signed approval.\r\n   * The function expects a valid signed message from the user, and executes a permit()\r\n   * to approve the transfer. The helper then stakes on behalf of the user\r\n   * @param user the user for which the staking is being executed\r\n   * @param amount the amount to stake\r\n   * @param v signature param\r\n   * @param r signature param\r\n   * @param s signature param\r\n   **/\r\n  function stake(\r\n    address user,\r\n    uint256 amount,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external {\r\n    AAVE.permit(user, address(this), amount, type(uint256).max, v, r, s);\r\n    AAVE.transferFrom(user, address(this), amount);\r\n    STAKE.stake(user, amount);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aave\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"contract IEIP2612Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE\",\"outputs\":[{\"internalType\":\"contract IStakedAaveImplWithInitialize\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveStakingHelper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f50000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae9","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ad68f7f2ac6802ef2f8199a17fb875595ea9bf0a979ce577d76eb9ea8304790d"}]}