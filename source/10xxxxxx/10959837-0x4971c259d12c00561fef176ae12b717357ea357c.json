{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\n// In this game, players play by depositing ether.\r\n// Players must deposit more ether than the last player. See the minimumDeposit variable to check how much must be deposited.\r\n// When the game times out, the last player can withdraw all the ether on the contract, minus a 10% fee.\r\n// The game times out 3 days after the last successful \"play\" call or 1 year after the beginning of the game.\r\ncontract PlusOne {\r\n    uint constant public incrementPercent = 10; // each player must play at list 10% more than the previous player\r\n    uint constant public feePercent = 19;\r\n\r\n    address public owner;\r\n    address public lastPlayer;\r\n    uint256 public fees;\r\n    uint256 public playerTimeout;\r\n    uint256 public gameTimeout;\r\n    uint256 public minimumDeposit;\r\n    bool public winnerFundWithdrawn;\r\n\r\n    // Builds the contract. The owner is in fact the first player.\r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n        gameTimeout = block.number + 2102400; // approx 1 year\r\n        playerTimeout = gameTimeout;\r\n        fees = msg.value * feePercent / 100;\r\n        lastPlayer = msg.sender;\r\n        setMinimumDeposit(msg.value);\r\n    }\r\n    \r\n    // Plays. You need to deposit more than the minimumDeposit.\r\n    function play() payable public {\r\n        require(msg.value >= minimumDeposit, 'Send more than minimumDeposit');\r\n\r\n        setMinimumDeposit(msg.value);\r\n        fees += msg.value * feePercent / 100;\r\n\r\n        if (block.number < playerTimeout && block.number < gameTimeout) {\r\n            lastPlayer = msg.sender;\r\n            playerTimeout = block.number + 17280; // approx 3 days\r\n        }\r\n    }\r\n    \r\n    function setMinimumDeposit(uint256 currentDeposit) private {\r\n        minimumDeposit = currentDeposit * (100 + incrementPercent) / 100; // Next player will need to play with at least 10% more\r\n    }\r\n    \r\n    // Sends the contract balance (minus the fees) to the winner\r\n    function withdraw() public {\r\n        require(!winnerFundWithdrawn, 'Already withdrawn');\r\n        require(block.number >= playerTimeout || block.number >= gameTimeout);\r\n\r\n        winnerFundWithdrawn = true;\r\n        payable(lastPlayer).transfer(address(this).balance - fees);\r\n    }\r\n    \r\n    // Send the fees to the owner\r\n    function withdrawFees() public {\r\n        require(msg.sender == owner, 'Not owner');\r\n        \r\n        if (winnerFundWithdrawn) {\r\n            // If the winner has already withdrawn its prize, we can withdraw everything remaining\r\n            payable(owner).transfer(address(this).balance);\r\n        }\r\n        else {\r\n            fees = 0;\r\n            payable(owner).transfer(fees);\r\n        }\r\n    }\r\n    \r\n    receive() external payable { }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerFundWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PlusOne","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5b9fc83bb87489c6071e29e62d80e178f7dcbdddecdc9043aea38d7df0ed1a19"}]}