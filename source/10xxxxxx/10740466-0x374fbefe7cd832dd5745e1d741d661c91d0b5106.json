{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n██╗     ███████╗██╗  ██╗    \r\n██║     ██╔════╝╚██╗██╔╝    \r\n██║     █████╗   ╚███╔╝     \r\n██║     ██╔══╝   ██╔██╗     \r\n███████╗███████╗██╔╝ ██╗    \r\n╚══════╝╚══════╝╚═╝  ╚═╝    \r\n██╗     ██╗███████╗████████╗\r\n██║     ██║██╔════╝╚══██╔══╝\r\n██║     ██║███████╗   ██║   \r\n██║     ██║╚════██║   ██║   \r\n███████╗██║███████║   ██║   \r\n╚══════╝╚═╝╚══════╝   ╚═╝*/\r\npragma solidity 0.5.17;\r\n\r\ncontract LexList {\r\n    address public governance;\r\n    address[] private listings;\r\n    string public message;\r\n    mapping(address => Contract) private contractList;\r\n    \r\n    event List(address indexed _contract);\r\n    event Delist(address indexed _contract);\r\n    event UpdateGovernance(address indexed governance);\r\n    event UpdateMessage(string indexed message);\r\n    \r\n    struct Contract {\r\n        uint256 contractIndex;\r\n        bool listed;\r\n    }\r\n    \r\n    constructor (address[] memory _contract, address _governance, string memory _message) public {\r\n        for (uint256 i = 0; i < _contract.length; i++) {\r\n            contractList[_contract[i]].contractIndex = listings.push(_contract[i]) - 1;\r\n            contractList[_contract[i]].listed = true;\r\n        }\r\n        \r\n        governance = _governance;\r\n        message = _message;\r\n    }\r\n    \r\n    modifier onlyGovernance {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _;\r\n    }\r\n    \r\n    /****************\r\n    LISTING FUNCTIONS\r\n    ****************/\r\n    function delist(address[] calldata _contract) external onlyGovernance {\r\n        for (uint256 i = 0; i < _contract.length; i++) {\r\n            require(contractList[_contract[i]].listed, \"!listed\");\r\n            \r\n            uint256 contractToUnlist = contractList[_contract[i]].contractIndex;\r\n            address k = listings[listings.length - 1];\r\n            listings[contractToUnlist] = k;\r\n            contractList[k].contractIndex = contractToUnlist;\r\n            contractList[_contract[i]].listed = false;\r\n            listings.length--;\r\n            \r\n            emit Delist(_contract[i]);\r\n        }\r\n    }\r\n    \r\n    function list(address[] calldata _contract) external onlyGovernance { \r\n        for (uint256 i = 0; i < _contract.length; i++) {\r\n            require(!contractList[_contract[i]].listed, \"listed\");\r\n            \r\n            contractList[_contract[i]].contractIndex = listings.push(_contract[i]) - 1;\r\n            contractList[_contract[i]].listed = true;\r\n            \r\n            emit List(_contract[i]);\r\n        }\r\n    }\r\n    \r\n    function updateGovernance(address _governance) external onlyGovernance {\r\n        governance = _governance;\r\n        \r\n        emit UpdateGovernance(governance);\r\n    }\r\n    \r\n    function updateMessage(string calldata _message) external onlyGovernance {\r\n        message = _message;\r\n        \r\n        emit UpdateMessage(message);\r\n    }\r\n    \r\n    // *******\r\n    // GETTERS\r\n    // *******\r\n    function contractCount() external view returns (uint256) {\r\n        return listings.length;\r\n    }\r\n    \r\n    function isListed(address _contract) external view returns (bool) {\r\n        if(listings.length == 0) return false;\r\n        return (listings[contractList[_contract].contractIndex] == _contract);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contract\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"Delist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"List\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"UpdateGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"UpdateMessage\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contract\",\"type\":\"address[]\"}],\"name\":\"delist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contract\",\"type\":\"address[]\"}],\"name\":\"list\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"updateGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"updateMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LexList","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000057e820d740d5aaaffa3c6de08c5c98d990db00d00000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000007000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000006af07097c9eeb7fd685c692751d5c66db49c215000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca00000000000000000000000080fb784b7ed66730e8b1dbd9820afd29931aab03000000000000000000000000960b236a07cf122663c4303350609a66a7b288c0000000000000000000000000cd62b1c403fa761baadfc74c525ce2b51780b1840000000000000000000000000000000000000000000000000000000000000022e29a94efb88f5f4c657844414f20436f6e7472616374204c6973745fe29a94efb88f000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a6c3864030b4ee8171caa0a0426001cdc4e9468848d4ad86e1eb504d0e710fba"}]}