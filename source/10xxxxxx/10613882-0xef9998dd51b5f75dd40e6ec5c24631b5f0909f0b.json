{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract MultiSigWalletWithTimelock {\r\n    uint256 public constant MAX_OWNER_COUNT = 50;\r\n    uint256 public lockSeconds = 86400;\r\n\r\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\r\n    event Revocation(address indexed sender, uint256 indexed transactionId);\r\n    event Submission(uint256 indexed transactionId);\r\n    event Execution(uint256 indexed transactionId);\r\n    event ExecutionFailure(uint256 indexed transactionId);\r\n    event Deposit(address indexed sender, uint256 value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint256 required);\r\n    event UnlockTimeSet(uint256 indexed transactionId, uint256 confirmationTime);\r\n    event LockSecondsChange(uint256 lockSeconds);\r\n\r\n    mapping(uint256 => Transaction) public transactions;\r\n    mapping(uint256 => mapping(address => bool)) public confirmations;\r\n    mapping(address => bool) public isOwner;\r\n    mapping(uint256 => uint256) public unlockTimes;\r\n\r\n    address[] public owners;\r\n    uint256 public required;\r\n    uint256 public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint256 value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    modifier onlyWallet() {\r\n        if (msg.sender != address(this)) revert(\"ONLY_WALLET_ERROR\");\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        if (isOwner[owner]) revert(\"OWNER_DOES_NOT_EXIST_ERROR\");\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        if (!isOwner[owner]) revert(\"OWNER_EXISTS_ERROR\");\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint256 transactionId) {\r\n        if (transactions[transactionId].destination == address(0))\r\n            revert(\"TRANSACTION_EXISTS_ERROR\");\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint256 transactionId, address owner) {\r\n        if (!confirmations[transactionId][owner]) revert(\"CONFIRMED_ERROR\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint256 transactionId, address owner) {\r\n        if (confirmations[transactionId][owner]) revert(\"NOT_CONFIRMED_ERROR\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint256 transactionId) {\r\n        if (transactions[transactionId].executed) revert(\"NOT_EXECUTED_ERROR\");\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        if (_address == address(0)) revert(\"NOT_NULL_ERROR\");\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\r\n        if (\r\n            ownerCount > MAX_OWNER_COUNT ||\r\n            _required > ownerCount ||\r\n            _required == 0 ||\r\n            ownerCount == 0\r\n        ) revert(\"VALID_REQUIREMENT_ERROR\");\r\n        _;\r\n    }\r\n\r\n    /** @dev Fallback function allows to deposit ether. */\r\n    fallback() external payable {\r\n        if (msg.value > 0) {\r\n            emit Deposit(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        if (msg.value > 0) {\r\n            emit Deposit(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    /** @dev Contract constructor sets initial owners and required number of confirmations.\r\n     * @param _owners List of initial owners.\r\n     * @param _required Number of required confirmations.\r\n     */\r\n    constructor(address[] memory _owners, uint256 _required)\r\n        public\r\n        validRequirement(_owners.length, _required)\r\n    {\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            if (isOwner[_owners[i]] || _owners[i] == address(0)) {\r\n                revert(\"OWNER_ERROR\");\r\n            }\r\n\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n\r\n        owners = _owners;\r\n        required = _required;\r\n    }\r\n\r\n    /** @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n     * @param owner Address of new owner.\r\n     */\r\n    function addOwner(address owner)\r\n        external\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /** @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n     * @param owner Address of owner.\r\n     */\r\n    function removeOwner(address owner) external onlyWallet ownerExists(owner) {\r\n        isOwner[owner] = false;\r\n        for (uint256 i = 0; i < owners.length - 1; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        }\r\n\r\n        owners.pop();\r\n\r\n        if (required > owners.length) {\r\n            changeRequirement(owners.length);\r\n        }\r\n\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /** @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n     * @param owner Address of owner to be replaced.\r\n     * @param owner Address of new owner.\r\n     */\r\n    function replaceOwner(address owner, address newOwner)\r\n        external\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        }\r\n\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /** @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n     * @param _required Number of required confirmations.\r\n     */\r\n    function changeRequirement(uint256 _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /** @dev Changes the duration of the time lock for transactions.\r\n     * @param _lockSeconds Duration needed after a transaction is confirmed and before it becomes executable, in seconds.\r\n     */\r\n    function changeLockSeconds(uint256 _lockSeconds) external onlyWallet {\r\n        lockSeconds = _lockSeconds;\r\n        emit LockSecondsChange(_lockSeconds);\r\n    }\r\n\r\n    /** @dev Allows an owner to submit and confirm a transaction.\r\n     * @param destination Transaction target address.\r\n     * @param value Transaction ether value.\r\n     * @param data Transaction data payload.\r\n     * @return transactionId Returns transaction ID.\r\n     */\r\n    function submitTransaction(\r\n        address destination,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external ownerExists(msg.sender) notNull(destination) returns (uint256 transactionId) {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /** @dev Allows an owner to confirm a transaction.\r\n     * @param transactionId Transaction ID.\r\n     */\r\n    function confirmTransaction(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n\r\n        if (isConfirmed(transactionId) && unlockTimes[transactionId] == 0) {\r\n            uint256 unlockTime = block.timestamp + lockSeconds;\r\n            unlockTimes[transactionId] = unlockTime;\r\n            emit UnlockTimeSet(transactionId, unlockTime);\r\n        }\r\n    }\r\n\r\n    /** @dev Allows an owner to revoke a confirmation for a transaction.\r\n     * @param transactionId Transaction ID.\r\n     */\r\n    function revokeConfirmation(uint256 transactionId)\r\n        external\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /** @dev Allows anyone to execute a confirmed transaction.\r\n     * @param transactionId Transaction ID.\r\n     */\r\n    function executeTransaction(uint256 transactionId)\r\n        external\r\n        ownerExists(msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        require(block.timestamp >= unlockTimes[transactionId], \"TRANSACTION_NEED_TO_UNLOCK\");\r\n\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction memory transaction = transactions[transactionId];\r\n            transaction.executed = true;\r\n            (bool success, ) = transaction.destination.call{value: transaction.value}(\r\n                transaction.data\r\n            );\r\n            if (success) emit Execution(transactionId);\r\n            else {\r\n                emit ExecutionFailure(transactionId);\r\n                transaction.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @dev Returns the confirmation status of a transaction.\r\n     * @param transactionId Transaction ID.\r\n     * @return Confirmation status.\r\n     */\r\n    function isConfirmed(uint256 transactionId) public view returns (bool) {\r\n        uint256 count = 0;\r\n\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                count += 1;\r\n            }\r\n\r\n            if (count >= required) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /* Web3 call functions */\r\n\r\n    /** @dev Returns number of confirmations of a transaction.\r\n     * @param transactionId Transaction ID.\r\n     * @return count Number of confirmations.\r\n     */\r\n    function getConfirmationCount(uint256 transactionId) external view returns (uint256 count) {\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                count += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @dev Returns total number of transactions after filers are applied.\r\n     * @param pending Include pending transactions.\r\n     * @param executed Include executed transactions.\r\n     * @return count Total number of transactions after filters are applied.\r\n     */\r\n    function getTransactionCount(bool pending, bool executed)\r\n        external\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        for (uint256 i = 0; i < transactionCount; i++) {\r\n            if ((pending && !transactions[i].executed) || (executed && transactions[i].executed)) {\r\n                count += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @dev Returns list of owners.\r\n     * @return List of owner addresses.\r\n     */\r\n    function getOwners() external view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    /** @dev Returns array with owner addresses, which confirmed transaction.\r\n     * @param transactionId Transaction ID.\r\n     * @return _confirmations Returns array of owner addresses.\r\n     */\r\n    function getConfirmations(uint256 transactionId)\r\n        external\r\n        view\r\n        returns (address[] memory _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n\r\n        for (i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        }\r\n\r\n        _confirmations = new address[](count);\r\n\r\n        for (i = 0; i < count; i++) {\r\n            _confirmations[i] = confirmationsTemp[i];\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockSeconds\",\"type\":\"uint256\"}],\"name\":\"LockSecondsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationTime\",\"type\":\"uint256\"}],\"name\":\"UnlockTimeSet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockSeconds\",\"type\":\"uint256\"}],\"name\":\"changeLockSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MultiSigWalletWithTimelock","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000009c59990ec0177d87ed7d60a56f584e6b06c639a2","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://23272ac7f7ec719c44240c81a42c209f6c0f69343d25370b38ed57afc6bf7d5c"}]}