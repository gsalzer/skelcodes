{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n// \"SPDX-License-Identifier: UNLICENSED \"\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'FORMS' token contract\r\n\r\n// Symbol      : FORMS\r\n// Name        : FORMS\r\n// Total supply: 9,311,608\r\n// Decimals    : 18\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public virtual view returns (uint);\r\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\r\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract Token is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n    string public symbol = \"FORMS\";\r\n    string public  name = \"FORMS\";\r\n    uint256 public decimals = 18;\r\n    uint256 private _totalSupply = 9311608 * 10 ** (decimals);\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    address constant private TEAM = 0x24B73DC219196a5E373D73b7Cd638017f1f07E2F;\r\n    address constant private MARKETING_FUNDS = 0x4B63B18b66Fc617B5A3125F0ABB565Dc22d732ba ;\r\n    address constant private COMMUNITY_REWARD = 0xC071C603238F387E48Ee96826a81D608e304545A;\r\n    \r\n    address constant private PRIVATE_SALE_ADD1 = 0xB5Aceaa4db96d6901b492505170Ab7F1d6E7cdAd;\r\n    address constant private PRIVATE_SALE_ADD2 = 0x8f63Fe51A3677cf02C80c11933De4B5846f2a336;\r\n    address constant private PRIVATE_SALE_ADD3 = 0x134D97378Ed04eC0CaE4C689800Be9e96D683ac1;\r\n    \r\n    address private tokenSaleOpt1;\r\n    address private tokenSaleOpt2;\r\n    address private tokenSaleOpt3;\r\n    \r\n    struct LOCKING{\r\n        uint256 lockedTokens; //DR , //PRC // lockedTokens1\r\n        uint256 releasePeriod;\r\n        uint256 cliff; //DR, PRC // cliff for sale option 1\r\n        uint256 lastVisit;\r\n        uint256 releasePercentage;\r\n        bool directRelease; //DR\r\n        uint256 lockedTokens2;\r\n        uint256 cliff2;\r\n    }\r\n    mapping(address => LOCKING) public walletsLocking;\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor(address _tokenSaleOpt1, address _tokenSaleOpt2, address _tokenSaleOpt3) public {\r\n        owner = msg.sender;\r\n        \r\n        tokenSaleOpt1 = _tokenSaleOpt1;\r\n        tokenSaleOpt2 = _tokenSaleOpt2;\r\n        tokenSaleOpt3 = _tokenSaleOpt3;\r\n        \r\n        _tokenAllocation();\r\n        _setLocking();\r\n    }\r\n    \r\n    function _tokenAllocation() private {\r\n        // send funds to team\r\n        balances[address(TEAM)] = 1303625 * 10 ** (decimals); // 1303625\r\n        emit Transfer(address(0),address(TEAM), 1303625 * 10 ** (decimals));\r\n        \r\n        // send funds to community reward\r\n        balances[address(COMMUNITY_REWARD)] = 1117393 * 10 ** (decimals); // 1,117,393\r\n        emit Transfer(address(0),address(COMMUNITY_REWARD), 1117393 * 10 ** (decimals));\r\n        \r\n        // send funds to marketing funds\r\n        balances[address(MARKETING_FUNDS)] = 1117393 * 10 ** (decimals); // 1,117,393\r\n        emit Transfer(address(0),address(MARKETING_FUNDS), 1117393 * 10 ** (decimals));\r\n        \r\n        // send funds to owner for exchange\r\n        balances[address(owner)] = 1024277 * 10 ** (decimals); // 1,024,277\r\n        emit Transfer(address(0),address(owner), 1024277 * 10 ** (decimals));\r\n        \r\n        // send funds for option 1 token sale\r\n        balances[address(tokenSaleOpt1)] = 651813 * 10 ** (decimals); // 651,813\r\n        emit Transfer(address(0),address(tokenSaleOpt1), 651813 * 10 ** (decimals));\r\n        \r\n        // send funds for option 2 token sale\r\n        balances[address(tokenSaleOpt2)] = 2048554 * 10 ** (decimals); // 2,048,554\r\n        emit Transfer(address(0),address(tokenSaleOpt2), 2048554 * 10 ** (decimals));\r\n        \r\n        // send funds for option 3 token sale\r\n        balances[address(tokenSaleOpt3)] = 1024277 * 10 ** (decimals); // 1,024,277\r\n        emit Transfer(address(0),address(tokenSaleOpt3), 1024277 * 10 ** (decimals));\r\n        \r\n        // Send to private sale addresses\r\n        balances[address(0xB5Aceaa4db96d6901b492505170Ab7F1d6E7cdAd)] = 529131 * 10 ** (decimals); // 529131\r\n        emit Transfer(address(0),address(0xB5Aceaa4db96d6901b492505170Ab7F1d6E7cdAd), 529131 * 10 ** (decimals));\r\n        \r\n        balances[address(0x8f63Fe51A3677cf02C80c11933De4B5846f2a336)] = 242718 * 10 ** (decimals); // 242718\r\n        emit Transfer(address(0),address(0x8f63Fe51A3677cf02C80c11933De4B5846f2a336), 242718 * 10 ** (decimals));\r\n        \r\n        balances[address(0x134D97378Ed04eC0CaE4C689800Be9e96D683ac1)] = 252427 * 10 ** (decimals); // 242718\r\n        emit Transfer(address(0),address(0x134D97378Ed04eC0CaE4C689800Be9e96D683ac1), 252427 * 10 ** (decimals));\r\n    }\r\n    \r\n    function _setLocking() private{\r\n        //////////////////////////////////TEAM////////////////////////////////////\r\n        walletsLocking[TEAM].directRelease = true;\r\n        walletsLocking[TEAM].lockedTokens = 1303625 * 10 ** (decimals);\r\n        walletsLocking[TEAM].cliff = block.timestamp.add(365 days);\r\n        \r\n        //////////////////////////////////PRIVATE SALE ADDRESS 1////////////////////////////////////\r\n        /////////////////////////////0xB5Aceaa4db96d6901b492505170Ab7F1d6E7cdAd////////////////////\r\n        walletsLocking[0xB5Aceaa4db96d6901b492505170Ab7F1d6E7cdAd].directRelease = true;\r\n        walletsLocking[0xB5Aceaa4db96d6901b492505170Ab7F1d6E7cdAd].lockedTokens = 529131 * 10 ** (decimals);\r\n        walletsLocking[0xB5Aceaa4db96d6901b492505170Ab7F1d6E7cdAd].cliff = block.timestamp.add(180 days);\r\n        \r\n        //////////////////////////////////PRIVATE SALE ADDRESS 2////////////////////////////////////\r\n        /////////////////////////////0x8f63Fe51A3677cf02C80c11933De4B5846f2a336////////////////////\r\n        walletsLocking[0x8f63Fe51A3677cf02C80c11933De4B5846f2a336].directRelease = true;\r\n        walletsLocking[0x8f63Fe51A3677cf02C80c11933De4B5846f2a336].lockedTokens = 242718 * 10 ** (decimals);\r\n        walletsLocking[0x8f63Fe51A3677cf02C80c11933De4B5846f2a336].cliff = block.timestamp.add(180 days);\r\n        \r\n        //////////////////////////////////PRIVATE SALE ADDRESS 3////////////////////////////////////\r\n        /////////////////////////////0x134D97378Ed04eC0CaE4C689800Be9e96D683ac1////////////////////\r\n        walletsLocking[0x134D97378Ed04eC0CaE4C689800Be9e96D683ac1].directRelease = true;\r\n        walletsLocking[0x134D97378Ed04eC0CaE4C689800Be9e96D683ac1].lockedTokens = 252427 * 10 ** (decimals);\r\n        walletsLocking[0x134D97378Ed04eC0CaE4C689800Be9e96D683ac1].cliff = block.timestamp.add(180 days);\r\n        \r\n        //////////////////////////////////COMMUNITY_REWARD////////////////////////////////////\r\n        walletsLocking[COMMUNITY_REWARD].directRelease = false;\r\n        walletsLocking[COMMUNITY_REWARD].lockedTokens = 1117393 * 10 ** (decimals);\r\n        walletsLocking[COMMUNITY_REWARD].cliff = block.timestamp.add(30 days);\r\n        walletsLocking[COMMUNITY_REWARD].lastVisit = block.timestamp.add(30 days);\r\n        walletsLocking[COMMUNITY_REWARD].releasePeriod = 30 days; // 1 month\r\n        walletsLocking[COMMUNITY_REWARD].releasePercentage = 5586965e16; // 55869.65\r\n        \r\n        //////////////////////////////////MARKETING_FUNDS////////////////////////////////////\r\n        walletsLocking[MARKETING_FUNDS].directRelease = false;\r\n        walletsLocking[MARKETING_FUNDS].lockedTokens = 1117393 * 10 ** (decimals);\r\n        walletsLocking[MARKETING_FUNDS].cliff = 1599004800; // 2 september 2020\r\n        walletsLocking[MARKETING_FUNDS].lastVisit = 1599004800;\r\n        walletsLocking[MARKETING_FUNDS].releasePeriod = 30 days; // 1 month\r\n        walletsLocking[MARKETING_FUNDS].releasePercentage = 2234786e17; // 223478.6\r\n    }\r\n    \r\n    function setTokenLock(uint256 lockedTokens, uint256 cliffTime, address purchaser) public {\r\n        require(msg.sender == tokenSaleOpt1 || msg.sender == tokenSaleOpt2, \"UnAuthorized: Only sale contracts allowed\");\r\n        //////////////////////////////////SET LOCK TO THE PURCHASER ACCOUNT////////////////////////////////////\r\n        if(msg.sender == tokenSaleOpt1){\r\n            walletsLocking[purchaser].directRelease = true;\r\n            walletsLocking[purchaser].lockedTokens += lockedTokens;\r\n            walletsLocking[purchaser].cliff = cliffTime;\r\n        } else{\r\n            walletsLocking[purchaser].directRelease = true;\r\n            walletsLocking[purchaser].lockedTokens2 += lockedTokens;\r\n            walletsLocking[purchaser].cliff2 = cliffTime;\r\n        }\r\n        \r\n    }\r\n    /** ERC20Interface function's implementation **/\r\n\r\n    function totalSupply() public override view returns (uint256){\r\n       return _totalSupply;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint256 tokens) public override returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0), \"Transfer to address 0 not allowed\");\r\n        require(balances[msg.sender] >= tokens, \"SENDER: insufficient balance\");\r\n        \r\n        if (walletsLocking[msg.sender].lockedTokens > 0 || walletsLocking[msg.sender].lockedTokens2 > 0){\r\n            if(walletsLocking[msg.sender].directRelease)\r\n                directRelease();\r\n            else\r\n                checkTime();\r\n        }\r\n        \r\n        uint256 lockedTokens = walletsLocking[msg.sender].lockedTokens.add(walletsLocking[msg.sender].lockedTokens2);\r\n        require(balances[msg.sender].sub(tokens) >= lockedTokens, \"Please wait for tokens to be released\");\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint256 tokens) public override returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        \r\n        // prevent transfer to 0x0, use burn instead\r\n        require(address(to) != address(0), \"Transfer to address 0 not allowed\");\r\n        require(balances[msg.sender] >= tokens, \"SENDER: insufficient balance\");\r\n        \r\n        if (walletsLocking[msg.sender].lockedTokens > 0){\r\n            if(walletsLocking[msg.sender].directRelease)\r\n                directRelease();\r\n            else\r\n                checkTime();\r\n        }\r\n        \r\n        uint256 lockedTokens = walletsLocking[msg.sender].lockedTokens.add(walletsLocking[msg.sender].lockedTokens2);\r\n        require(balances[msg.sender].sub(tokens) >= lockedTokens, \"Please wait for tokens to be released\");\r\n        \r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(from,to,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // @dev Internal function that burns an amount of the token from a given account\r\n    // @param _amount The amount that will be burnt\r\n    // @param _account The tokens to burn from\r\n    // ------------------------------------------------------------------------\r\n    function burnTokens(uint256 _amount) public {\r\n        address _account = msg.sender;\r\n        require(balances[_account] >= _amount, \"insufficient account balance\");\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        balances[address(_account)] = balances[address(_account)].sub(_amount);\r\n        emit Transfer(address(_account), address(0), _amount);\r\n    }\r\n    \r\n    function directRelease() private{\r\n        if(block.timestamp > walletsLocking[msg.sender].cliff){\r\n            walletsLocking[msg.sender].lockedTokens = 0;\r\n        }else if(block.timestamp > walletsLocking[msg.sender].cliff2){\r\n            walletsLocking[msg.sender].lockedTokens2 = 0;\r\n        }\r\n    }\r\n    \r\n    function checkTime() private {\r\n        // if cliff is applied\r\n        if(block.timestamp > walletsLocking[msg.sender].cliff){\r\n            if(msg.sender == MARKETING_FUNDS && walletsLocking[msg.sender].lastVisit == 1599004800){\r\n                walletsLocking[msg.sender].lockedTokens = walletsLocking[msg.sender].lockedTokens.sub(2234786e17); // 20% released   \r\n            }\r\n            uint256 timeSpanned = (now.sub(walletsLocking[msg.sender].lastVisit)).div(walletsLocking[msg.sender].releasePeriod);\r\n            \r\n            // if cliff is passed\r\n            if (timeSpanned >= 1){\r\n            \r\n                uint256 released = timeSpanned.mul(walletsLocking[msg.sender].releasePercentage);\r\n            \r\n                if (released > walletsLocking[msg.sender].lockedTokens){\r\n                    released = walletsLocking[msg.sender].lockedTokens;\r\n                }\r\n            \r\n                walletsLocking[msg.sender].lastVisit = now;\r\n                walletsLocking[msg.sender].lockedTokens = walletsLocking[msg.sender].lockedTokens.sub(released);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenSaleOpt1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSaleOpt2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSaleOpt3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"setTokenLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletsLocking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVisit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directRelease\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Token","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f0518ec0972f3cfda49ef98bf540a23f1de95a280000000000000000000000009c31bc80d4d88846bd5d85660fda0d91402e67610000000000000000000000009d40bac0425b945a1a7a96b0949476dd049ccce3","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://921acb04368134c35340e0c84e072cba6c3ccc4bd07f371d4b4430f86527a1c1"}]}