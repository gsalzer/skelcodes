{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint id) external returns (uint num);\r\n    function setUint(uint id, uint val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\r\n}\r\n\r\ncontract Stores {\r\n\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getEthAddr() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return memory variable address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() internal pure returns (address) {\r\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n     */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n     */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev emit event on event contract\r\n     */\r\n    function emitEvent(bytes32 eventCode, bytes memory eventData) internal {\r\n        (uint model, uint id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details - needs to be changed before deployment\r\n     */\r\n    function connectorID() public pure returns(uint model, uint id) {\r\n        (model, id) = (0, 0);\r\n    }\r\n\r\n}\r\n\r\ncontract DSMath {\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n}\r\n\r\ninterface OneInchInterace {\r\n    function swap(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 minReturnAmount,\r\n        uint256 guaranteedAmount,\r\n        address payable referrer,\r\n        address[] calldata callAddresses,\r\n        bytes calldata callDataConcat,\r\n        uint256[] calldata starts,\r\n        uint256[] calldata gasLimitsAndValues\r\n    )\r\n    external\r\n    payable\r\n    returns (uint256 returnAmount);\r\n}\r\n\r\ninterface OneSplitInterface {\r\n    function swap(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution, // [Uniswap, Kyber, Bancor, Oasis]\r\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken, 1024 - bDAI\r\n    ) external payable;\r\n\r\n    function getExpectedReturn(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n    external\r\n    view\r\n    returns(\r\n        uint256 returnAmount,\r\n        uint256[] memory distribution\r\n    );\r\n}\r\n\r\ncontract OneHelpers is Stores, DSMath {\r\n    /**\r\n     * @dev Return  1Inch Address\r\n     */\r\n    function getOneInchAddress() internal pure returns (address) {\r\n        return 0x11111254369792b2Ca5d084aB5eEA397cA8fa48B;\r\n    }\r\n\r\n    /**\r\n     * @dev Return 1Split Address\r\n     */\r\n    function getOneSplitAddress() internal pure returns (address) {\r\n        return 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\r\n    }\r\n\r\n    /**\r\n     * @dev Return 1Split swap function sig\r\n     */\r\n    function getOneSplitSig() internal pure returns (bytes4) {\r\n        return 0xf88309d7;\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\r\n        _amt = address(token) == getEthAddr() ? address(this).balance : token.balanceOf(address(this));\r\n    }\r\n\r\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\r\n        buyDec = address(buyAddr) == getEthAddr() ?  18 : buyAddr.decimals();\r\n        sellDec = address(sellAddr) == getEthAddr() ?  18 : sellAddr.decimals();\r\n    }\r\n}\r\n\r\ncontract Resolver is OneHelpers {\r\n    function checkOneInchSig(bytes memory callData) internal pure returns(bool isOk) {\r\n        bytes memory _data = callData;\r\n        bytes4 sig;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            sig := mload(add(_data, 32))\r\n        }\r\n        isOk = sig == getOneSplitSig();\r\n    }\r\n\r\n    function oneSplitSwap(\r\n        OneSplitInterface oneSplitContract,\r\n        TokenInterface _sellAddr,\r\n        TokenInterface _buyAddr,\r\n        uint _sellAmt,\r\n        uint unitAmt,\r\n        uint[] memory distribution,\r\n        uint disableDexes\r\n    ) internal returns (uint buyAmt){\r\n        (uint _buyDec, uint _sellDec) = getTokensDec(_buyAddr, _sellAddr);\r\n        uint _sellAmt18 = convertTo18(_sellDec, _sellAmt);\r\n        uint _slippageAmt = convert18ToDec(_buyDec, wmul(unitAmt, _sellAmt18));\r\n\r\n        uint ethAmt;\r\n        if (address(_sellAddr) == getEthAddr()) {\r\n            ethAmt = _sellAmt;\r\n        } else {\r\n            _sellAddr.approve(address(oneSplitContract), _sellAmt);\r\n        }\r\n\r\n        uint initalBal = getTokenBal(_buyAddr);\r\n\r\n        oneSplitContract.swap.value(ethAmt)(\r\n            _sellAddr,\r\n            _buyAddr,\r\n            _sellAmt,\r\n            _slippageAmt,\r\n            distribution,\r\n            disableDexes\r\n        );\r\n\r\n        uint finalBal = getTokenBal(_buyAddr);\r\n        buyAmt = sub(finalBal, initalBal);\r\n\r\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\r\n    }\r\n\r\n    function oneInchSwap(\r\n        TokenInterface _buyAddr,\r\n        TokenInterface _sellAddr,\r\n        bytes memory callData,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint ethAmt\r\n    ) internal returns (uint buyAmt) {\r\n        (uint _buyDec, uint _sellDec) = getTokensDec(_buyAddr, _sellAddr);\r\n        uint _sellAmt18 = convertTo18(_sellDec, sellAmt);\r\n        uint _slippageAmt = convert18ToDec(_buyDec, wmul(unitAmt, _sellAmt18));\r\n        uint initalBal = getTokenBal(_buyAddr);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, ) = address(getOneInchAddress()).call.value(ethAmt)(callData);\r\n        if (!success) revert(\"1Inch-swap-failed\");\r\n\r\n        uint finalBal = getTokenBal(_buyAddr);\r\n        buyAmt = sub(finalBal, initalBal);\r\n\r\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\r\n    }\r\n}\r\n\r\ncontract BasicResolver is Resolver {\r\n    event LogSell(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    event LogSellTwo(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    event LogSellThree(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    function sell(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        uint _sellAmt = sellAmt;\r\n\r\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\r\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\r\n\r\n        _sellAmt = _sellAmt == uint(-1) ? getTokenBal(_sellAddr) : _sellAmt;\r\n\r\n        OneSplitInterface oneSplitContract = OneSplitInterface(getOneSplitAddress());\r\n\r\n        (, uint[] memory distribution) = oneSplitContract.getExpectedReturn(\r\n                _sellAddr,\r\n                _buyAddr,\r\n                _sellAmt,\r\n                getId, // TODO - shall we hardcode?\r\n                setId\r\n            );\r\n\r\n        uint _buyAmt = oneSplitSwap(\r\n            oneSplitContract,\r\n            _sellAddr,\r\n            _buyAddr,\r\n            _sellAmt,\r\n            unitAmt,\r\n            distribution,\r\n            setId\r\n        );\r\n\r\n\r\n        emit LogSell(address(_buyAddr), address(_sellAddr), _buyAmt, _sellAmt, getId, setId);\r\n        // bytes32 _eventCode = keccak256(\"LogSell(address,address,uint256,uint256,uint256,uint256)\");\r\n        // bytes memory _eventParam = abi.encode(address(_buyAddr), address(_sellAddr), _buyAmt, _sellAmt, getId, setId);\r\n        // emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    function sellTwo(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint[] calldata distribution,\r\n        uint disableDexes,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        uint _sellAmt = getUint(getId, sellAmt);\r\n\r\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\r\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\r\n\r\n        _sellAmt = _sellAmt == uint(-1) ? getTokenBal(_sellAddr) : _sellAmt;\r\n\r\n        uint _buyAmt = oneSplitSwap(\r\n            OneSplitInterface(getOneSplitAddress()),\r\n            _sellAddr,\r\n            _buyAddr,\r\n            _sellAmt,\r\n            unitAmt,\r\n            distribution,\r\n            disableDexes\r\n        );\r\n\r\n        setUint(setId, _buyAmt);\r\n\r\n        emit LogSellTwo(address(_buyAddr), address(_sellAddr), _buyAmt, _sellAmt, getId, setId);\r\n        // bytes32 _eventCode = keccak256(\"LogSellTwo(address,address,uint256,uint256,uint256,uint256)\");\r\n        // bytes memory _eventParam = abi.encode(address(_buyAddr), address(_sellAddr), _buyAmt, _sellAmt, getId, setId);\r\n        // emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    function sellThree(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        bytes calldata callData,\r\n        uint setId\r\n    ) external payable {\r\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\r\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\r\n\r\n        uint ethAmt;\r\n        if (address(_sellAddr) == getEthAddr()) {\r\n            ethAmt = sellAmt;\r\n        } else {\r\n            TokenInterface(_sellAddr).approve(getOneInchAddress(), sellAmt);\r\n        }\r\n\r\n        require(checkOneInchSig(callData), \"Not-swap-function\");\r\n\r\n        uint buyAmt = oneInchSwap(_buyAddr, _sellAddr, callData, sellAmt, unitAmt, sellAmt);\r\n\r\n        setUint(setId, buyAmt);\r\n\r\n        emit LogSellThree(address(_buyAddr), address(_sellAddr), buyAmt, sellAmt, 0, setId);\r\n        // bytes32 _eventCode = keccak256(\"LogSellThree(address,address,uint256,uint256,uint256,uint256)\");\r\n        // bytes memory _eventParam = abi.encode(address(_buyAddr), address(_sellAddr), buyAmt, sellAmt, 0, setId);\r\n        // emitEvent(_eventCode, _eventParam);\r\n    }\r\n}\r\n\r\ncontract ConnectOne is BasicResolver {\r\n    string public name = \"1Inch-1Split-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellThree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellTwo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellThree\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"disableDexes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellTwo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"BasicResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a028559e47fdb0ff3979a91da8ccbd3f7b8e61efc9fb1897fa0e3fd6283089f6"}]}