{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface AaveInterface {\r\n    function getUserReserveData(address _reserve, address _user) external view returns (\r\n        uint256 currentATokenBalance,\r\n        uint256 currentBorrowBalance,\r\n        uint256 principalBorrowBalance,\r\n        uint256 borrowRateMode,\r\n        uint256 borrowRate,\r\n        uint256 liquidityRate,\r\n        uint256 originationFee,\r\n        uint256 variableBorrowIndex,\r\n        uint256 lastUpdateTimestamp,\r\n        bool usageAsCollateralEnabled\r\n    );\r\n    function getUserAccountData(address _user) external view returns (\r\n        uint256 totalLiquidityETH,\r\n        uint256 totalCollateralETH,\r\n        uint256 totalBorrowsETH,\r\n        uint256 totalFeesETH,\r\n        uint256 availableBorrowsETH,\r\n        uint256 currentLiquidationThreshold,\r\n        uint256 ltv,\r\n        uint256 healthFactor\r\n    );\r\n}\r\n\r\ninterface AaveProviderInterface {\r\n    function getLendingPool() external view returns (address);\r\n    function getLendingPoolCore() external view returns (address);\r\n    function getPriceOracle() external view returns (address);\r\n}\r\n\r\ninterface AavePriceInterface {\r\n    function getAssetPrice(address _asset) external view returns (uint256);\r\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\r\n    function getSourceOfAsset(address _asset) external view returns(address);\r\n    function getFallbackOracle() external view returns(address);\r\n}\r\n\r\ninterface AaveCoreInterface {\r\n    function getReserveCurrentLiquidityRate(address _reserve) external view returns (uint256);\r\n    function getReserveCurrentVariableBorrowRate(address _reserve) external view returns (uint256);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\ncontract AaveHelpers is DSMath {\r\n    /**\r\n     * @dev get Aave Provider Address\r\n    */\r\n    function getAaveProviderAddress() internal pure returns (address) {\r\n        return 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8; //mainnet\r\n    }\r\n\r\n    struct AaveTokenData {\r\n        uint tokenPrice;\r\n        uint supplyBalance;\r\n        uint borrowBalance;\r\n        uint borrowFee;\r\n        uint supplyRate;\r\n        uint borrowRate;\r\n    }\r\n\r\n    struct AaveUserData {\r\n        uint totalSupplyETH;\r\n        uint totalCollateralETH;\r\n        uint totalBorrowsETH;\r\n        uint totalFeesETH;\r\n        uint availableBorrowsETH;\r\n        uint currentLiquidationThreshold;\r\n        uint healthFactor;\r\n    }\r\n\r\n    function getTokenData(\r\n        AaveCoreInterface aaveCore,\r\n        AaveInterface aave,\r\n        address user,\r\n        address token,\r\n        uint price)\r\n    internal view returns(AaveTokenData memory tokenData) {\r\n        (\r\n            uint supplyBal,\r\n            uint borrowBal,\r\n            ,\r\n            ,\r\n            ,\r\n            ,\r\n            uint fee,\r\n            ,,\r\n        ) = aave.getUserReserveData(token, user);\r\n\r\n        uint supplyRate = aaveCore.getReserveCurrentLiquidityRate(token);\r\n        uint borrowRate = aaveCore.getReserveCurrentVariableBorrowRate(token);\r\n\r\n        tokenData = AaveTokenData(\r\n            price,\r\n            supplyBal,\r\n            borrowBal,\r\n            fee,\r\n            supplyRate,\r\n            borrowRate\r\n        );\r\n    }\r\n\r\n    function getUserData(AaveInterface aave, address user)\r\n    internal view returns (AaveUserData memory userData) {\r\n        (\r\n            uint totalSupplyETH,\r\n            uint totalCollateralETH,\r\n            uint totalBorrowsETH,\r\n            uint totalFeesETH,\r\n            uint availableBorrowsETH,\r\n            uint currentLiquidationThreshold,\r\n            ,\r\n            uint healthFactor\r\n        ) = aave.getUserAccountData(user);\r\n\r\n        userData = AaveUserData(\r\n            totalSupplyETH,\r\n            totalCollateralETH,\r\n            totalBorrowsETH,\r\n            totalFeesETH,\r\n            availableBorrowsETH,\r\n            currentLiquidationThreshold,\r\n            healthFactor\r\n        );\r\n    }\r\n}\r\n\r\ncontract Resolver is AaveHelpers {\r\n    function getPosition(address user, address[] memory tokens) public view returns(AaveTokenData[] memory, AaveUserData memory) {\r\n        AaveProviderInterface AaveProvider = AaveProviderInterface(getAaveProviderAddress());\r\n        AaveInterface aave = AaveInterface(AaveProvider.getLendingPool());\r\n        AaveCoreInterface aaveCore = AaveCoreInterface(AaveProvider.getLendingPoolCore());\r\n\r\n        AaveTokenData[] memory tokensData = new AaveTokenData[](tokens.length);\r\n        uint[] memory tokenPrices = AavePriceInterface(AaveProvider.getPriceOracle()).getAssetsPrices(tokens);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            tokensData[i] = getTokenData(aaveCore, aave, user, tokens[i], tokenPrices[i]);\r\n        }\r\n        return (tokensData, getUserData(aave, user));\r\n    }\r\n}\r\n\r\ncontract InstaAaveResolver is Resolver {\r\n    string public constant name = \"Aave-Resolver-v1\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"internalType\":\"struct AaveHelpers.AaveTokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupplyETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeesETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrowsETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct AaveHelpers.AaveUserData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaAaveResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://17a59cb73bf4848bcb11eeb59045e490c3e4111481a6ce458605e5344246ab3d"}]}