{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint id) external returns (uint num);\r\n    function setUint(uint id, uint val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\r\n}\r\n\r\ncontract Stores {\r\n\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getEthAddr() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return memory variable address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() internal pure returns (address) {\r\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n     */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n     */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev emit event on event contract\r\n     */\r\n    function emitEvent(bytes32 eventCode, bytes memory eventData) internal {\r\n        (uint model, uint id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details.\r\n     */\r\n    function connectorID() public pure returns(uint model, uint id) {\r\n        (model, id) = (1, 30);\r\n    }\r\n\r\n}\r\n\r\ncontract DSMath {\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract UniswapHelpers is Stores, DSMath {\r\n    /**\r\n     * @dev Return WETH address\r\n     */\r\n    function getAddressWETH() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n\r\n    /**\r\n     * @dev Return uniswap v2 router02 Address\r\n     */\r\n    function getUniswapAddr() internal pure returns (address) {\r\n        return 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getTokenBalace(address token) internal view returns (uint256 amt) {\r\n        amt = token == getEthAddr() ? address(this).balance : TokenInterface(token).balanceOf(address(this));\r\n    }\r\n\r\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\r\n        _buy = buy == getEthAddr() ? TokenInterface(getAddressWETH()) : TokenInterface(buy);\r\n        _sell = sell == getEthAddr() ? TokenInterface(getAddressWETH()) : TokenInterface(sell);\r\n    }\r\n\r\n    function convertEthToWeth(TokenInterface token, uint amount) internal {\r\n        if(address(token) == getAddressWETH()) token.deposit.value(amount)();\r\n    }\r\n\r\n    function convertWethToEth(TokenInterface token, uint amount) internal {\r\n       if(address(token) == getAddressWETH()) {\r\n            token.approve(getAddressWETH(), amount);\r\n            token.withdraw(amount);\r\n        }\r\n    }\r\n\r\n    function getExpectedBuyAmt(\r\n        IUniswapV2Router02 router,\r\n        address[] memory paths,\r\n        uint sellAmt\r\n    ) internal view returns(uint buyAmt) {\r\n        uint[] memory amts = router.getAmountsOut(\r\n            sellAmt,\r\n            paths\r\n        );\r\n        buyAmt = amts[1];\r\n    }\r\n\r\n    function getExpectedSellAmt(\r\n        IUniswapV2Router02 router,\r\n        address[] memory paths,\r\n        uint buyAmt\r\n    ) internal view returns(uint sellAmt) {\r\n        uint[] memory amts = router.getAmountsIn(\r\n            buyAmt,\r\n            paths\r\n        );\r\n        sellAmt = amts[0];\r\n    }\r\n\r\n    function checkPair(\r\n        IUniswapV2Router02 router,\r\n        address[] memory paths\r\n    ) internal view {\r\n        address pair = IUniswapV2Factory(router.factory()).getPair(paths[0], paths[1]);\r\n        require(pair != address(0), \"No-exchange-address\");\r\n    }\r\n\r\n    function getPaths(\r\n        address buyAddr,\r\n        address sellAddr\r\n    ) internal pure returns(address[] memory paths) {\r\n        paths = new address[](2);\r\n        paths[0] = address(sellAddr);\r\n        paths[1] = address(buyAddr);\r\n    }\r\n}\r\n\r\ncontract LiquidityHelpers is UniswapHelpers {\r\n\r\n    function getMinAmount(\r\n        TokenInterface token,\r\n        uint amt,\r\n        uint slippage\r\n    ) internal view returns(uint minAmt) {\r\n        uint _amt18 = convertTo18(token.decimals(), amt);\r\n        minAmt = wmul(_amt18, sub(WAD, slippage));\r\n        minAmt = convert18ToDec(token.decimals(), minAmt);\r\n    }\r\n\r\n    function _addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint _amt,\r\n        uint unitAmt,\r\n        uint slippage\r\n    ) internal returns (uint _amtA, uint _amtB, uint _liquidity) {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\r\n\r\n        _amtA = _amt == uint(-1) ? getTokenBalace(tokenA) : _amt;\r\n        _amtB = convert18ToDec(_tokenB.decimals(), wmul(unitAmt, convertTo18(_tokenA.decimals(), _amtA)));\r\n\r\n        convertEthToWeth(_tokenA, _amtA);\r\n        convertEthToWeth(_tokenB, _amtB);\r\n        _tokenA.approve(address(router), _amtA);\r\n        _tokenB.approve(address(router), _amtB);\r\n\r\n       uint minAmtA = getMinAmount(_tokenA, _amtA, slippage);\r\n        uint minAmtB = getMinAmount(_tokenB, _amtB, slippage);\r\n       (_amtA, _amtB, _liquidity) = router.addLiquidity(\r\n            address(_tokenA),\r\n            address(_tokenB),\r\n            _amtA,\r\n            _amtB,\r\n            minAmtA,\r\n            minAmtB,\r\n            address(this),\r\n            now + 1\r\n        );\r\n    }\r\n\r\n    function _removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint _amt,\r\n        uint unitAmtA,\r\n        uint unitAmtB\r\n    ) internal returns (uint _amtA, uint _amtB, uint _uniAmt) {\r\n        IUniswapV2Router02 router;\r\n        TokenInterface _tokenA;\r\n        TokenInterface _tokenB;\r\n        (router, _tokenA, _tokenB, _uniAmt) = _getRemoveLiquidityData(\r\n            tokenA,\r\n            tokenB,\r\n            _amt\r\n        );\r\n        {\r\n        uint minAmtA = convert18ToDec(_tokenA.decimals(), wmul(unitAmtA, _uniAmt));\r\n        uint minAmtB = convert18ToDec(_tokenB.decimals(), wmul(unitAmtB, _uniAmt));\r\n        (_amtA, _amtB) = router.removeLiquidity(\r\n            address(_tokenA),\r\n            address(_tokenB),\r\n            _uniAmt,\r\n            minAmtA,\r\n            minAmtB,\r\n            address(this),\r\n            now + 1\r\n        );\r\n        }\r\n        convertWethToEth(_tokenA, _amtA);\r\n        convertWethToEth(_tokenB, _amtB);\r\n    }\r\n\r\n    function _getRemoveLiquidityData(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint _amt\r\n    ) internal returns (IUniswapV2Router02 router, TokenInterface _tokenA, TokenInterface _tokenB, uint _uniAmt) {\r\n        router = IUniswapV2Router02(getUniswapAddr());\r\n        (_tokenA, _tokenB) = changeEthAddress(tokenA, tokenB);\r\n        address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(address(_tokenA), address(_tokenB));\r\n        require(exchangeAddr != address(0), \"pair-not-found.\");\r\n\r\n        TokenInterface uniToken = TokenInterface(exchangeAddr);\r\n        _uniAmt = _amt == uint(-1) ? uniToken.balanceOf(address(this)) : _amt;\r\n        uniToken.approve(address(router), _uniAmt);\r\n    }\r\n}\r\n\r\ncontract UniswapLiquidity is LiquidityHelpers {\r\n    event LogDepositLiquidity(\r\n        address indexed tokenA,\r\n        address indexed tokenB,\r\n        uint amtA,\r\n        uint amtB,\r\n        uint uniAmount,\r\n        uint getId,\r\n        uint setId\r\n    );\r\n\r\n    event LogWithdrawLiquidity(\r\n        address indexed tokenA,\r\n        address indexed tokenB,\r\n        uint amountA,\r\n        uint amountB,\r\n        uint uniAmount,\r\n        uint getId,\r\n        uint[] setId\r\n    );\r\n\r\n    function emitDeposit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint _amtA,\r\n        uint _amtB,\r\n        uint _uniAmt,\r\n        uint getId,\r\n        uint setId\r\n    ) internal {\r\n        emit LogDepositLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            _amtA,\r\n            _amtB,\r\n            _uniAmt,\r\n            getId,\r\n            setId\r\n        );\r\n\r\n        bytes32 _eventCode = keccak256(\"LogDepositLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(\r\n            tokenA,\r\n            tokenB,\r\n            _amtA,\r\n            _amtB,\r\n            _uniAmt,\r\n            getId,\r\n            setId\r\n        );\r\n        emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    function emitWithdraw(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint _amtA,\r\n        uint _amtB,\r\n        uint _uniAmt,\r\n        uint getId,\r\n        uint[] memory setIds\r\n    ) internal {\r\n        emit LogWithdrawLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            _amtA,\r\n            _amtB,\r\n            _uniAmt,\r\n            getId,\r\n            setIds\r\n        );\r\n        bytes32 _eventCode = keccak256(\"LogWithdrawLiquidity(address,address,uint256,uint256,uint256,uint256,uint256[])\");\r\n        bytes memory _eventParam = abi.encode(\r\n            tokenA,\r\n            tokenB,\r\n            _amtA,\r\n            _amtB,\r\n            _uniAmt,\r\n            getId,\r\n            setIds\r\n        );\r\n        emitEvent(_eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit Liquidity.\r\n     * @param tokenA tokenA address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param tokenB tokenB address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amtA tokenA amount.\r\n     * @param unitAmt unit amount of amtB/amtA with slippage.\r\n     * @param slippage slippage amount.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function deposit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amtA,\r\n        uint unitAmt,\r\n        uint slippage,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        uint _amt = getUint(getId, amtA);\r\n\r\n        (uint _amtA, uint _amtB, uint _uniAmt) = _addLiquidity(\r\n                                            tokenA,\r\n                                            tokenB,\r\n                                            _amt,\r\n                                            unitAmt,\r\n                                            slippage\r\n                                            );\r\n        setUint(setId, _uniAmt);\r\n        emitDeposit(tokenA, tokenB, _amtA, _amtB, _uniAmt, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Liquidity.\r\n     * @param tokenA tokenA address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param tokenB tokenB address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param uinAmt uni token amount.\r\n     * @param unitAmtA unit amount of amtA/uinAmt with slippage.\r\n     * @param unitAmtB unit amount of amtB/uinAmt with slippage.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setIds Set token amounts at this IDs in `InstaMemory` Contract.\r\n    */\r\n    function withdraw(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint uinAmt,\r\n        uint unitAmtA,\r\n        uint unitAmtB,\r\n        uint getId,\r\n        uint[] calldata setIds\r\n    ) external payable {\r\n        uint _amt = getUint(getId, uinAmt);\r\n\r\n        (uint _amtA, uint _amtB, uint _uniAmt) = _removeLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            _amt,\r\n            unitAmtA,\r\n            unitAmtB\r\n        );\r\n\r\n        setUint(setIds[0], _amtA);\r\n        setUint(setIds[1], _amtB);\r\n        emitWithdraw(tokenA, tokenB, _amtA, _amtB, _uniAmt, getId, setIds);\r\n    }\r\n}\r\n\r\ncontract UniswapResolver is UniswapLiquidity {\r\n    event LogBuy(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    event LogSell(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    /**\r\n     * @dev Buy ETH/ERC20_Token.\r\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAddr selling token amount.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param buyAmt buying token amount.\r\n     * @param unitAmt unit amount of sellAmt/buyAmt with slippage.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function buy(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint buyAmt,\r\n        uint unitAmt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        uint _buyAmt = getUint(getId, buyAmt);\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\r\n        address[] memory paths = getPaths(address(_buyAddr), address(_sellAddr));\r\n\r\n        uint _slippageAmt = convert18ToDec(_sellAddr.decimals(),\r\n            wmul(unitAmt, convertTo18(_buyAddr.decimals(), _buyAmt)));\r\n\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n\r\n        checkPair(router, paths);\r\n        uint _expectedAmt = getExpectedSellAmt(router, paths, _buyAmt);\r\n        require(_slippageAmt >= _expectedAmt, \"Too much slippage\");\r\n\r\n        convertEthToWeth(_sellAddr, _expectedAmt);\r\n        _sellAddr.approve(address(router), _expectedAmt);\r\n\r\n        uint _sellAmt = router.swapTokensForExactTokens(\r\n            _buyAmt,\r\n            _expectedAmt,\r\n            paths,\r\n            address(this),\r\n            now + 1\r\n        )[0];\r\n\r\n        convertWethToEth(_buyAddr, _buyAmt);\r\n\r\n        setUint(setId, _sellAmt);\r\n\r\n        emit LogBuy(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogBuy(address,address,uint256,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Sell ETH/ERC20_Token.\r\n     * @param buyAddr buying token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAddr selling token amount.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param sellAmt selling token amount.\r\n     * @param unitAmt unit amount of buyAmt/sellAmt with slippage.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function sell(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        uint _sellAmt = getUint(getId, sellAmt);\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\r\n        address[] memory paths = getPaths(address(_buyAddr), address(_sellAddr));\r\n\r\n        if (_sellAmt == uint(-1)) {\r\n            _sellAmt = sellAddr == getEthAddr() ? address(this).balance : _sellAddr.balanceOf(address(this));\r\n        }\r\n\r\n        uint _slippageAmt = convert18ToDec(_buyAddr.decimals(),\r\n            wmul(unitAmt, convertTo18(_sellAddr.decimals(), _sellAmt)));\r\n\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n\r\n        checkPair(router, paths);\r\n        uint _expectedAmt = getExpectedBuyAmt(router, paths, _sellAmt);\r\n        require(_slippageAmt <= _expectedAmt, \"Too much slippage\");\r\n\r\n        convertEthToWeth(_sellAddr, _sellAmt);\r\n        _sellAddr.approve(address(router), _sellAmt);\r\n\r\n        uint _buyAmt = router.swapExactTokensForTokens(\r\n            _sellAmt,\r\n            _expectedAmt,\r\n            paths,\r\n            address(this),\r\n            now + 1\r\n        )[1];\r\n\r\n        convertWethToEth(_buyAddr, _buyAmt);\r\n\r\n        setUint(setId, _buyAmt);\r\n\r\n        emit LogSell(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogSell(address,address,uint256,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(buyAddr, sellAddr, _buyAmt, _sellAmt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n}\r\n\r\n\r\ncontract ConnectUniswapV2 is UniswapResolver {\r\n    string public name = \"UniswapV2-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDepositLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"setId\",\"type\":\"uint256[]\"}],\"name\":\"LogWithdrawLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uinAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmtB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"setIds\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectUniswapV2","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4dbc867007606b7531ce6a5d149588490560b845fb42a4a95ce45fd18945bce5"}]}