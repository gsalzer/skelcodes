{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.5;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    \r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract StakingToken is ERC20  {\r\n    using SafeMath for uint256;\r\n   \r\n    address public owner;   \r\n    \r\n    /* @auditor all displayed variable in frontend will be converted to ether(div(1e18)\r\n        apart from stakeholdersIndex\r\n    */\r\n    uint public totalStakingPool = 0;\r\n    uint internal todayStakingPool = 0;\r\n    uint public stakeholdersCount = 0;\r\n    uint public rewardToShare = 0;\r\n    uint internal todayStakeholdersCountUp = 0;\r\n    uint internal todayStakeholdersCountDown = 0;\r\n    uint public percentGrowth = 0;\r\n    uint public stakeholdersIndex = 0;\r\n    uint public totalStakes = 0;\r\n    uint private setTime1 = 0;\r\n    uint private setTime2 = 0;\r\n    \r\n    struct Referrals {\r\n         uint referralcount;\r\n         address[] referredAddresses;    \r\n    }\r\n    \r\n    struct ReferralBonus {\r\n         uint uplineProfit;\r\n    }\r\n    \r\n    struct Stakeholder {\r\n         bool staker;\r\n         uint id;\r\n    }\r\n    \r\n    mapping (address => Stakeholder) public stakeholders;\r\n    \r\n    mapping (uint => address) public stakeholdersReverseMapping;\r\n    \r\n    mapping(address => uint256) private stakes;\r\n    \r\n    mapping(address => address) public addressThatReferred;\r\n    \r\n    mapping(address => bool) private exist;\r\n    \r\n    mapping(address => uint256) private rewards;\r\n    \r\n    mapping(address => uint256) private time;\r\n    \r\n    mapping(address => Referrals) private referral;\r\n    \r\n    mapping(address => ReferralBonus) public bonus;\r\n    \r\n    mapping (address => address) public admins;\r\n     \r\n     /* ***************\r\n    * DEFINE FUNCTIONS\r\n    *************** */\r\n    \r\n    /**\r\n     * auditor token will be converted to wei(mul(1e18)) in frontend and\r\n     * returned to ether(div(1e18)) when stakeholder checks balance, this way all decimals will be gotten\r\n     */\r\n    \r\n    /*pass token supply to owner of contract\r\n     set name and symbol of token\r\n     contract has to have funds in totalStakeingPool to enable calculation\r\n     */\r\n    constructor(uint256 _supply) public ERC20(\"Shill\", \"PoSH\") {\r\n        owner = 0xD32E3F1B8553765bB71686fDA048b0d8014915f6;\r\n        uint supply = _supply.mul(1e18);\r\n        _mint(owner, supply); \r\n        \r\n        //to ensure funds are in pool, to be determined by owner and stakeholdersCount is above 0 \r\n        createStake(1000000000000000000000,0x0000000000000000000000000000000000000000);\r\n        totalStakingPool = 50000000000000000000000000;\r\n        admins[owner] = owner;\r\n        admins[0x3B780730D4cF544B7080dEf91Ce2bC084D0Bd33F] = 0x3B780730D4cF544B7080dEf91Ce2bC084D0Bd33F;\r\n        admins[0xabcd812CD592B827522606251e0634564Dd822c1] = 0xabcd812CD592B827522606251e0634564Dd822c1;\r\n        admins[0x77d39a0b0a687af5971Fd07A3117384F47663a0A] = 0x77d39a0b0a687af5971Fd07A3117384F47663a0A;\r\n        addTodayCount();\r\n        addPool();\r\n        \r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n         require(msg.sender == admins[msg.sender], 'Only admins is allowed to call this function');\r\n         _;\r\n    }\r\n    \r\n    // 1. Referral functions\r\n    \r\n    /* referree bonus will be added to his reward automatically*/\r\n    function addUplineProfit(address stakeholderAddress, uint amount) private  {\r\n        bonus[stakeholderAddress].uplineProfit =  bonus[stakeholderAddress].uplineProfit.add(amount);\r\n    } \r\n    \r\n    /* return referree bonus to zero*/\r\n    function revertUplineProfit(address stakeholderAddress) private  {\r\n        bonus[stakeholderAddress].uplineProfit =  0;\r\n    } \r\n     \r\n     /*returns referralcount for a stakeholder*/\r\n    function stakeholderReferralCount(address stakeholderAddress) external view returns(uint) {\r\n        return referral[stakeholderAddress].referralcount;\r\n     }\r\n    \r\n    /*check if _refereeAddress belongs to a stakeholder and \r\n    add a count, add referral to stakeholder referred list, and whitelist referral\r\n    assign the address that referred a stakeholder to that stakeholder to enable send bonus to referee\r\n    */\r\n    function addReferee(address _refereeAddress) private {\r\n        require(msg.sender != _refereeAddress, 'cannot add your address as your referral');\r\n        require(exist[msg.sender] == false, 'already submitted your referee' );\r\n        require(stakeholders[_refereeAddress].staker == true, 'address does not belong to a stakeholders');\r\n        referral[_refereeAddress].referralcount =  referral[_refereeAddress].referralcount.add(1);   \r\n        referral[_refereeAddress].referredAddresses.push(msg.sender);\r\n        addressThatReferred[msg.sender] = _refereeAddress;\r\n        exist[msg.sender] = true;\r\n    }\r\n    \r\n    /*returns stakeholders Referred List\r\n    */\r\n     function stakeholdersReferredList(address stakeholderAddress) view external returns(address[] memory){\r\n       return (referral[stakeholderAddress].referredAddresses);\r\n    }\r\n    \r\n    // 2. Stake FUNCTIONS\r\n    \r\n    /*add stakes if staker is new add staker to stakeholders\r\n    calculateStakingCost\r\n    add staking cost to pool\r\n    burn stake\r\n    */\r\n    \r\n    /* @auditor stakes will be converted to wei in frontend*/\r\n    function createStake(uint256 _stake, address referree) public {\r\n        _createStake(_stake, referree);\r\n    }\r\n    \r\n    function _createStake(uint256 _stake, address referree)\r\n        private\r\n    {\r\n        require(_stake >= 20, 'minimum stake is 20 tokens');\r\n        if(stakes[msg.sender] == 0){\r\n            addStakeholder(msg.sender);\r\n        }\r\n        uint availableTostake = calculateStakingCost(_stake);\r\n        uint stakeToPool = _stake.sub(availableTostake);\r\n        todayStakingPool = todayStakingPool.add(stakeToPool);\r\n        stakes[msg.sender] = stakes[msg.sender].add(availableTostake);\r\n        totalStakes = totalStakes.add(availableTostake);\r\n        _burn(msg.sender, _stake);\r\n        //in js if no referree, 0x0000000000000000000000000000000000000000 will be used\r\n        if(referree == 0x0000000000000000000000000000000000000000){}\r\n        else{\r\n        addReferee(referree);\r\n        }   \r\n    }\r\n    \r\n     /*remove stakes if staker has no more funds remove staker from stakeholders\r\n    calculateunStakingCost\r\n    add unstaking cost to pool\r\n    mint stake\r\n    */\r\n    \r\n    /* @auditor stakes will be converted to wei in frontend*/\r\n    function removeStake(uint256 _stake) external {\r\n        _removeStake(_stake);\r\n    }\r\n    \r\n    function _removeStake(uint _stake) private {\r\n        require(stakes[msg.sender] > 0, 'stakes must be above 0');\r\n        stakes[msg.sender] = stakes[msg.sender].sub(_stake);\r\n         if(stakes[msg.sender] == 0){\r\n             removeStakeholder(msg.sender);\r\n         }\r\n        uint stakeToReceive = calculateUnstakingCost(_stake);\r\n        uint stakeToPool = _stake.sub(stakeToReceive);\r\n        todayStakingPool = todayStakingPool.add(stakeToPool);\r\n        totalStakes = totalStakes.sub(_stake);\r\n        _mint(msg.sender, stakeToReceive);\r\n    }\r\n    \r\n    /* @auditor stakes will be converted to ether in frontend*/\r\n    function stakeOf(address _stakeholder) external view returns(uint256) {\r\n        return stakes[_stakeholder];\r\n    }\r\n    \r\n    function addStakeholder(address _stakeholder) private {\r\n       if(stakeholders[_stakeholder].staker == false) {\r\n       stakeholders[_stakeholder].staker = true;    \r\n       stakeholders[_stakeholder].id = stakeholdersIndex;\r\n       stakeholdersReverseMapping[stakeholdersIndex] = _stakeholder;\r\n       stakeholdersIndex = stakeholdersIndex.add(1);\r\n       todayStakeholdersCountUp = todayStakeholdersCountUp.add(1);\r\n      }\r\n    }\r\n   \r\n    function removeStakeholder(address _stakeholder) private  {\r\n        if (stakeholders[_stakeholder].staker = true) {\r\n            // get id of the stakeholders to be deleted\r\n            uint swappableId = stakeholders[_stakeholder].id;\r\n            \r\n            // swap the stakeholders info and update admins mapping\r\n            // get the last stakeholdersReverseMapping address for swapping\r\n            address swappableAddress = stakeholdersReverseMapping[stakeholdersIndex -1];\r\n            \r\n            // swap the stakeholdersReverseMapping and then reduce stakeholder index\r\n            stakeholdersReverseMapping[swappableId] = stakeholdersReverseMapping[stakeholdersIndex - 1];\r\n            \r\n            // also remap the stakeholder id\r\n            stakeholders[swappableAddress].id = swappableId;\r\n            \r\n            // delete and reduce admin index \r\n            delete(stakeholders[_stakeholder]);\r\n            delete(stakeholdersReverseMapping[stakeholdersIndex - 1]);\r\n            stakeholdersIndex = stakeholdersIndex.sub(1);\r\n            todayStakeholdersCountDown = todayStakeholdersCountDown.add(1);\r\n        }\r\n    }\r\n    \r\n    // 4. Updating FUNCTIONS\r\n    \r\n    /*add todayStakingPool to totalStakeingPool\r\n    only called once in 24hrs\r\n    reset todayStakingPool to zero\r\n    */\r\n     function addPool() onlyAdmin private {\r\n        require(now > setTime1, 'wait 24hrs from last call');\r\n        setTime1 = now + 1 days;\r\n        totalStakingPool = totalStakingPool.add(todayStakingPool);\r\n        todayStakingPool = 0;\r\n     }\r\n    \r\n    /*\r\n     addTodayCount if stakeholders leave or joins\r\n     only called once in 24hrs \r\n    */\r\n    function addTodayCount() private onlyAdmin returns(uint count) {\r\n        require(now > setTime2, 'wait 24hrs from last call');\r\n        setTime2 = now + 1 days;\r\n        stakeholdersCount = stakeholdersCount.add(todayStakeholdersCountUp);\r\n        todayStakeholdersCountUp = 0;\r\n        stakeholdersCount = stakeholdersCount.sub(todayStakeholdersCountDown);\r\n        todayStakeholdersCountDown = 0;\r\n        count =stakeholdersCount;\r\n    }\r\n    \r\n    /*\r\n     check stakeholdersCountBeforeUpdate before addTodayCount,\r\n     get currentStakeholdersCount, get newStakers by minusing both\r\n     if above 1 you check for the percentGrowth; (newStakers*100)/stakeholdersCountBeforeUpdate\r\n     if 0 or below set rewardToShare and percentGrowth to 0\r\n     checkCommunityGrowthPercent will be called every 24hrs\r\n    */\r\n    function checkCommunityGrowthPercent() external onlyAdmin  {\r\n       uint stakeholdersCountBeforeUpdate = stakeholdersCount;\r\n       uint currentStakeholdersCount = addTodayCount();\r\n       int newStakers = int(currentStakeholdersCount - stakeholdersCountBeforeUpdate);\r\n       if(newStakers <= 0){\r\n           rewardToShare = 0;\r\n           percentGrowth = 0;\r\n       }\r\n       else{\r\n           uint intToUnit = uint(newStakers);\r\n           uint newStaker = intToUnit.mul(100);\r\n           \r\n           //convert percentGrowth to wei to get actual values\r\n           percentGrowth = newStaker.mul(1e18).div(stakeholdersCountBeforeUpdate);\r\n           if(percentGrowth >= 10*10**18){\r\n               \r\n               //gets 10% of percentGrowth\r\n               uint percentOfPoolToShare = percentGrowth.div(10);\r\n               \r\n               /*converts percentGrowth back to ether and also get percentOfPoolToShare of totalStakingPool of yesterday \r\n                ie if percentGrowth is 40% percentOfPoolToShare is 4% will share 4% of yesterday pool\r\n               */\r\n               uint getPoolToShare = totalStakingPool.mul(percentOfPoolToShare).div(1e20);\r\n               totalStakingPool = totalStakingPool.sub(getPoolToShare);\r\n               rewardToShare = getPoolToShare;\r\n           }\r\n           else{\r\n               rewardToShare = 0;\r\n               percentGrowth = 0;\r\n           }\r\n       }\r\n       addPool();\r\n    }\r\n    \r\n     // 4. Reward FUNCTIONS\r\n    \r\n     function calculateReward(address _stakeholder) internal view returns(uint256) {\r\n        return ((stakes[_stakeholder].mul(rewardToShare)).div(totalStakes));\r\n    }\r\n    \r\n    /*\r\n        after stakeholders check for new percentGrowth and rewardToShare \r\n        they get their reward which can only be called once from a stakeholder a day\r\n        all stakeholders gets 95% of their reward if a stakeholder has a referree \r\n        5% is sent to his referree, if no referree 5% wil be sent back to the totalStakingPool\r\n    */\r\n    function getRewards() external {\r\n        require(stakeholders[msg.sender].staker == true, 'address does not belong to a stakeholders');\r\n        require(rewardToShare > 0, 'no reward to share at this time');\r\n        require(now > time[msg.sender], 'can only call this function once per day');\r\n        time[msg.sender] = now + 1 days;\r\n        uint256 reward = calculateReward(msg.sender);\r\n        if(exist[msg.sender]){\r\n            uint removeFromReward = reward.mul(5).div(100);\r\n            uint userRewardAfterUpLineBonus = reward.sub(removeFromReward);\r\n            address addr = addressThatReferred[msg.sender];\r\n            addUplineProfit(addr, removeFromReward);\r\n            rewards[msg.sender] = rewards[msg.sender].add(userRewardAfterUpLineBonus);\r\n        }\r\n        else{\r\n            uint removeFromReward1 = reward.mul(5).div(100);\r\n            totalStakingPool = totalStakingPool.add(removeFromReward1);\r\n            uint userReward = reward.sub(removeFromReward1);\r\n            rewards[msg.sender] = rewards[msg.sender].add(userReward);\r\n        }\r\n    }\r\n    \r\n    /*\r\n        after stakeholder checks the bonus mapping if he has bonus he add them to his reward\r\n    */\r\n    function getReferralBouns() external {\r\n        require(stakeholders[msg.sender].staker == true, 'address does not belong to a stakeholders');\r\n        require(bonus[msg.sender].uplineProfit > 0, 'you do not have any bonus');\r\n        uint bonusToGet = bonus[msg.sender].uplineProfit;\r\n        rewards[msg.sender] = rewards[msg.sender].add(bonusToGet);\r\n        revertUplineProfit(msg.sender);\r\n    }\r\n    \r\n    /* return will converted to ether in frontend*/\r\n    function rewardOf(address _stakeholder) external view returns(uint256){\r\n        return rewards[_stakeholder];\r\n    }\r\n    \r\n    // 5. Tranfer FUNCTIONS\r\n    \r\n    /* token will be converted to wei in frontend*/\r\n    function transfer(address _to, uint256 _tokens) public override  returns (bool) {\r\n       if(msg.sender == admins[msg.sender]){\r\n              _transfer(msg.sender, _to, _tokens);  \r\n          }\r\n        else{\r\n            uint toSend = transferFee(msg.sender, _tokens);\r\n            _transfer(msg.sender, _to, toSend);\r\n           }\r\n        return true;\r\n    }\r\n    \r\n    function bulkTransfer(address[] calldata _receivers, uint256[] calldata _tokens) external returns (bool) {\r\n        require(_receivers.length == _tokens.length);\r\n        uint toSend;\r\n        for (uint256 i = 0; i < _receivers.length; i++) {\r\n            if(msg.sender == admins[msg.sender]){\r\n              _transfer(msg.sender, _receivers[i], _tokens[i].mul(1e18));  \r\n            }\r\n            else{\r\n             toSend = transferFee(msg.sender, _tokens[i]);\r\n            _transfer(msg.sender, _receivers[i], toSend);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 _tokens) public override returns (bool)  {\r\n        if(sender == admins[msg.sender]){\r\n              _transfer(sender, recipient, _tokens);  \r\n        }\r\n        else{\r\n           uint  toSend = transferFee(sender, _tokens);\r\n           _transfer(sender, recipient, toSend);\r\n        }\r\n        _approve(sender, _msgSender(),allowance(sender,msg.sender).sub(_tokens, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    // 6. Calculation FUNCTIONS\r\n    \r\n    /*skaing cost 5% */\r\n    function calculateStakingCost(uint256 _stake) private pure returns(uint) {\r\n        uint stakingCost =  (_stake).mul(5);\r\n        uint percent = stakingCost.div(100);\r\n        uint availableForstake = _stake.sub(percent);\r\n        return availableForstake;\r\n    }\r\n    \r\n    /*unskaing cost 25% */\r\n    function calculateUnstakingCost(uint _stake) private pure returns(uint ) {\r\n        uint unstakingCost =  (_stake).mul(25);\r\n        uint percent = unstakingCost.div(100);\r\n        uint stakeReceived = _stake.sub(percent);\r\n        return stakeReceived;\r\n    }\r\n    \r\n    /*\r\n       remove 10% of _token \r\n       burn 1%\r\n       send 9% to pool\r\n       return actual amount receivers gets\r\n    */\r\n    /* @auditor given token is in wei calculation will work*/\r\n    function transferFee(address sender, uint _token) private returns(uint _transferred){\r\n        uint transferFees =  _token.div(10);\r\n        uint burn = transferFees.div(10);\r\n        uint addToPool = transferFees.sub(burn);\r\n        todayStakingPool = todayStakingPool.add(addToPool);\r\n        _transferred = _token - transferFees;\r\n        _burn(sender, transferFees);\r\n    }\r\n    \r\n    // 7. Withdraw function\r\n    function withdrawReward() public {\r\n        require(rewards[msg.sender] > 0, 'reward balance must be above 0');\r\n        require(stakeholders[msg.sender].staker == true, 'address does not belong to a stakeholders');\r\n        require(percentGrowth >= 10*10**18,'withdraw disabled');\r\n        uint256 reward = rewards[msg.sender];\r\n        rewards[msg.sender] = 0;\r\n        _mint(msg.sender, reward);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressThatReferred\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uplineProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCommunityGrowthPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referree\",\"type\":\"address\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralBouns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentGrowth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholderAddress\",\"type\":\"address\"}],\"name\":\"stakeholderReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeholdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeholdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholderAddress\",\"type\":\"address\"}],\"name\":\"stakeholdersReferredList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeholdersReverseMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingToken","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000077359400","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://33d14cc808536ad9bced2770eb12cbe6f257ac28eb4515db2bacdcef230290a4"}]}