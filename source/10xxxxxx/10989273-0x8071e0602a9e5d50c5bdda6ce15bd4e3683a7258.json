{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\ncontract MultiOwnable {\r\n  address[] private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\r\n\r\n  constructor() internal {\r\n    _owner.push(msg.sender);\r\n    emit OwnershipTransferred(address(0), _owner[0]);\r\n  }\r\n\r\n  function checkOwner() private view returns (bool) {\r\n    for (uint8 i = 0; i < _owner.length; i++) {\r\n      if (_owner[i] == msg.sender) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function checkNewOwner(address _address) private view returns (bool) {\r\n    for (uint8 i = 0; i < _owner.length; i++) {\r\n      if (_owner[i] == _address) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  modifier isAnOwner() {\r\n    require(checkOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public isAnOwner {\r\n    for (uint8 i = 0; i < _owner.length; i++) {\r\n      if (_owner[i] == msg.sender) {\r\n        _owner[i] = address(0);\r\n        emit OwnershipTransferred(_owner[i], msg.sender);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getOwners() public view returns (address[] memory) {\r\n    return _owner;\r\n  }\r\n\r\n  function addOwnerShip(address newOwner) public isAnOwner {\r\n    _addOwnerShip(newOwner);\r\n  }\r\n\r\n  function _addOwnerShip(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    require(checkNewOwner(newOwner), \"Owner already exists\");\r\n    _owner.push(newOwner);\r\n    emit OwnershipTransferred(_owner[_owner.length - 1], newOwner);\r\n  }\r\n}\r\n\r\ncontract WarLordToken is MultiOwnable, ERC20{\r\n    constructor (string memory name, string memory symbol) public ERC20(name, symbol) MultiOwnable(){\r\n    \r\n\t}\r\n\t\r\n\tfunction warlordMint(address account, uint256 amount) external isAnOwner{\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function warlordBurn(address account, uint256 amount) external isAnOwner{\r\n        _burn(account, amount);\r\n    }\r\n\t\r\n\tfunction addOwner(address _newOwner) external isAnOwner {\r\n        addOwnerShip(_newOwner);\r\n    }\r\n\r\n    function getOwner() external view isAnOwner{\r\n        getOwners();\r\n    }\r\n\r\n    function renounceOwner() external isAnOwner {\r\n        renounceOwnership();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract WarlordCamp is Ownable, ReentrancyGuard {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for WarLordToken;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tuint256 private _epochCampkStart;\r\n\tuint8 private _warriorTOknight;\r\n\tuint8 private _knightTOlegend;\r\n\t\r\n\tuint256 private _legedWarLordfirstReward;\r\n\tuint256 private _legedWarLordotherReward;\r\n\tuint256 private _decimalConverter = 10**18;\r\n\r\n\tstruct  warlordToken{\r\n\t\tWarLordToken token;\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 durationReward;\r\n\t\tmapping(address => uint256)  balances;\r\n\t\tmapping(address => uint256)  periodFinish;\r\n\t\tmapping(address => uint256)  countReward;\r\n\t}\r\n\r\n\twarlordToken[4] private _warlordToken;\r\n\r\n\tconstructor(address _WarLordToken,address _warriorWarLordToken, address _knightWarLordToken, address _legendWarLordToken) public Ownable() {\r\n\t\t_warlordToken[0].token = WarLordToken(_WarLordToken);\r\n\t\t_warlordToken[0].durationReward = 60 * 60 * 24; // 1 Day Duration in second\r\n\t\t\r\n\t\t_warlordToken[1].token = WarLordToken(_warriorWarLordToken);\r\n\t\t_warlordToken[1].durationReward = 60 * 60 * 24 * 2; // 2 Days Duration in second\r\n\t\t\r\n\t\t_warlordToken[2].token = WarLordToken(_knightWarLordToken);\r\n\t\t_warlordToken[2].durationReward = 60 * 60 * 24 * 3; // 3 Days Duration in second\r\n\t\t\r\n\t\t_warlordToken[3].token = WarLordToken(_legendWarLordToken);\r\n\t\t_warlordToken[3].durationReward = 60 * 60 * 24 * 7; // 1 Week Duration in second\r\n\t\t\r\n\t\t_warriorTOknight = 5;\r\n\t\t_knightTOlegend = 25;\r\n\t\t\r\n\t\t_legedWarLordfirstReward = 20;\r\n\t\t_legedWarLordotherReward = 15;\r\n\t\t\r\n\t\t_epochCampkStart = 1601906400; // October 5, 2020 2:00:00 PM GMT\r\n\t}\r\n\t\r\n\tfunction warlordType(string memory name) internal pure returns (uint8) {\r\n\t\tif (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"WLT\"))) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tif (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"wWLT\"))) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\tif (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"kWLT\"))) {\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t\r\n\t\tif (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\"lWLT\"))) {\r\n\t\t\treturn 3;\r\n\t\t} else {\r\n\t\t\treturn 99;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction totalSupply(string calldata name) external view returns (uint256) {\r\n\t\tuint8 i = warlordType(name);\r\n\t\treturn _warlordToken[i].totalSupply;\r\n\t}\r\n\t\r\n\tfunction balanceOf(address account, string calldata name) external view returns (uint256) {\r\n\t\tuint8 i = warlordType(name);\r\n\t\treturn _warlordToken[i].balances[account];\r\n\t}\r\n\t\r\n\tfunction durationRemaining(address account, string calldata name) external view returns (uint256) {\r\n\t\tuint8 i = warlordType(name);\r\n\r\n\t\tuint256 timeRemaining = 0;\r\n\t\tuint256 durationReward = 0;\r\n\r\n\t\tdurationReward = _warlordToken[i].durationReward;\r\n\r\n\t\tif(_warlordToken[i].balances[account] > 0){\r\n\t\t\tif((_warlordToken[i].periodFinish[account] - now) < durationReward){\r\n\t\t\t\ttimeRemaining = _warlordToken[i].periodFinish[account] - now;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn timeRemaining;\r\n\t}\r\n\t\r\n\tfunction rewardCount(address account, string calldata name) external view returns (uint256) {\r\n\t\tuint8 i = warlordType(name);\r\n\t\treturn _warlordToken[i].countReward[account];\r\n\t}\r\n\t\r\n\tfunction checkKingdomReward(address account) external view returns (uint256) {\r\n\t\tuint256 countReward = _warlordToken[3].countReward[account];\r\n\t\tuint256 timeperiodFinish = _warlordToken[3].periodFinish[account];\r\n\t\tuint256 timeFirstStaking = timeperiodFinish - _warlordToken[3].durationReward;\r\n\t\tuint256 stakingPeriod = now - timeFirstStaking;\r\n\t\tuint256 countStakingReward = stakingPeriod / _warlordToken[3].durationReward;\r\n\t\tuint256 value = 0;\r\n\r\n\t\tfor (uint256 i = countStakingReward; i != 0; i--) {\r\n\t\t\tif(countReward == 0){\r\n\t\t\t\tvalue = value.add(_legedWarLordfirstReward);\r\n\t\t\t} else {\r\n\t\t\t\tvalue = value.add(_legedWarLordotherReward);\r\n\t\t\t}\r\n\t\t\tcountReward++;\r\n\t\t}\r\n\r\n\t\treturn value * _warlordToken[3].balances[account];\r\n\t}\r\n\t\r\n\tfunction army(uint256 amount, string calldata name) external nonReentrant {    \r\n\t\trequire(now > _epochCampkStart, \"The Camp is being set up!\");\r\n\r\n\t\tuint8 i = warlordType(name);\r\n\t\trequire(i < 99, \"Not a valid warlord name\");\r\n\r\n\t\trequire(amount >= 1, \"Cannot stake less than 1\");\r\n\r\n\t\tif(i == 0){\r\n\t\t\tuint256 modulo = amount % 1;\r\n\t\t\trequire(modulo == 0, \"If send a warlord token to Recruit Camp, has to be multiple of 1\");\r\n\t\t} else {\r\n\t\t\tif(i == 1){\r\n\t\t\t\tuint256 modulo = amount % _warriorTOknight;\r\n\t\t\t\trequire(modulo == 0, \"If send a warrior warlord to Training Camp, has to be multiple of 5\");\r\n\t\t\t} else {\r\n\t\t\t\tif(i == 2){\r\n\t\t\t\t\tuint256 modulo = amount % _knightTOlegend;\r\n\t\t\t\t\trequire(modulo == 0, \"If send a knight warlord to Dungeon, has to be multiple of 25\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(i == 3){\r\n\t\t\t\t\t\tuint256 modulo = amount % 1;\r\n\t\t\t\t\t\trequire(modulo == 0, \"If send a legend warlord to Kingdom, has to be multiple of 1\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(_warlordToken[i].balances[msg.sender] == 0 && (_warlordToken[i].periodFinish[msg.sender] == 0 || now > _warlordToken[i].periodFinish[msg.sender]), \r\n\t\t\"You must withdraw the previous army before send more!\");\r\n\r\n\t\t_warlordToken[i].token.safeTransferFrom(msg.sender, address(this), amount.mul(_decimalConverter));\r\n\t\t_warlordToken[i].totalSupply = _warlordToken[i].totalSupply.add(amount);\r\n\t\t_warlordToken[i].balances[msg.sender] = _warlordToken[i].balances[msg.sender].add(amount);\r\n\t\t_warlordToken[i].periodFinish[msg.sender] = now + _warlordToken[i].durationReward;\r\n\r\n\t\temit Staked(msg.sender, amount);\r\n\t}\r\n\t\r\n\tfunction getarmy(string memory name) public nonReentrant {\r\n\t\tuint8 i = warlordType(name);\r\n\t\trequire(i < 99, \"Not a valid warlord name\");\r\n\r\n\t\trequire(_warlordToken[i].balances[msg.sender] > 0, \"Cannot get army 0\");\r\n\t\trequire(now > _warlordToken[i].periodFinish[msg.sender], \"Cannot get army until the action finished!\");\r\n\r\n\t\tuint256 tempAmount;\r\n\t\tuint256 tempcountReward;\r\n\r\n\t\tif (i == 3) {\r\n\t\t\ttempAmount = setLegendWarLordRewardAmount();\r\n\t\t\ttempcountReward = getLegendWarLordRewardCount();\r\n\t\t\t_warlordToken[0].token.warlordMint(msg.sender, tempAmount.mul(_decimalConverter));\r\n\t\t\t_warlordToken[i].periodFinish[msg.sender] = now + _warlordToken[3].durationReward;\r\n\t\t\t_warlordToken[i].countReward[msg.sender] = tempcountReward;\r\n\t\t} else {\r\n\t\t\t_warlordToken[i].token.warlordBurn(address(this), _warlordToken[i].balances[msg.sender].mul(_decimalConverter));\r\n\t\t\tif(i == 2){\r\n\t\t\t\ttempAmount = _warlordToken[i].balances[msg.sender].div(_knightTOlegend);\r\n\t\t\t} else{\r\n\t\t\t\tif(i == 1){\r\n\t\t\t\t\ttempAmount = _warlordToken[i].balances[msg.sender].div(_warriorTOknight);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttempAmount = _warlordToken[i].balances[msg.sender];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t_warlordToken[i + 1].token.warlordMint(msg.sender, tempAmount.mul(_decimalConverter));\r\n\r\n\t\t\tzeroHoldings(i);\r\n\t\t}\r\n\t\temit RewardPaid(msg.sender, tempAmount);\r\n\t}\r\n\t\r\n\tfunction withdraw(string memory name) public nonReentrant {\r\n\t\tuint8 i = warlordType(name);\r\n\r\n\t\trequire(i < 99, \"Not a valid warlord name\");\r\n\r\n\t\trequire(_warlordToken[i].balances[msg.sender] > 0, \"Cannot withdraw 0\");\r\n\t\t_warlordToken[i].token.safeTransfer(msg.sender, _warlordToken[i].balances[msg.sender].mul(_decimalConverter));\r\n\r\n\t\temit Withdrawn(msg.sender,_warlordToken[i].balances[msg.sender]);\r\n\r\n\t\tzeroHoldings(i);\r\n\t}\r\n\t\r\n\tfunction zeroHoldings(uint8 i) internal{\r\n\t\t_warlordToken[i].totalSupply = _warlordToken[i].totalSupply - _warlordToken[i].balances[msg.sender];\r\n\t\t_warlordToken[i].balances[msg.sender] = 0;\r\n\t\t_warlordToken[i].periodFinish[msg.sender] = 0;\r\n\t}\r\n\r\n\tfunction setLegendWarLordRewardAmount() internal view returns (uint256) {\r\n\t\tuint256 countReward = _warlordToken[3].countReward[msg.sender];\r\n\t\tuint256 timeperiodFinish = _warlordToken[3].periodFinish[msg.sender];\r\n\t\tuint256 timeFirstStaking = timeperiodFinish - _warlordToken[3].durationReward;\r\n\t\tuint256 stakingPeriod = now - timeFirstStaking;\r\n\t\tuint256 countStakingReward = stakingPeriod / _warlordToken[3].durationReward;\r\n\t\tuint256 value = 0;\r\n\r\n\t\tfor (uint256 i = countStakingReward; i != 0; i--) {\r\n\t\t\tif(countReward == 0){\r\n\t\t\t\tvalue = value.add(_legedWarLordfirstReward);\r\n\t\t\t} else {\r\n\t\t\t\tvalue = value.add(_legedWarLordotherReward);\r\n\t\t\t}\r\n\t\t\tcountReward++;\r\n\t\t}\r\n\r\n\t\treturn value * _warlordToken[3].balances[msg.sender];\r\n\t}\r\n\r\n\tfunction getLegendWarLordRewardCount() internal view returns (uint256) {\r\n\t\tuint256 countReward = _warlordToken[3].countReward[msg.sender];\r\n\t\tuint256 timeperiodFinish = _warlordToken[3].periodFinish[msg.sender];\r\n\t\tuint256 timeFirstStaking = timeperiodFinish - _warlordToken[3].durationReward;\r\n\t\tuint256 stakingPeriod = now - timeFirstStaking;\r\n\t\tuint256 countStakingReward = stakingPeriod / _warlordToken[3].durationReward;\r\n\r\n\t\tfor (uint256 i = countStakingReward; i != 0; i--) {\r\n\t\t\tcountReward++;\r\n\t\t}\r\n\r\n\t\treturn countReward;\r\n\t}\r\n\t\r\n\tfunction addTokenOwner(address _token, address _newOwner) external onlyOwner {\r\n\t\trequire(now > _epochCampkStart.add(14 days), \"Time before Arena Opening\");\r\n\r\n\t\tWarLordToken tempToken = WarLordToken(_token);\r\n\t\ttempToken.addOwner(_newOwner);\r\n\t}\r\n\r\n\tfunction renounceTokenOwner(address _token) external onlyOwner {\r\n\t\trequire(now > _epochCampkStart.add(14 days), \"Time before Arena Opening\");\r\n\r\n\t\tWarLordToken tempToken = WarLordToken(_token);\r\n\t\ttempToken.renounceOwner();\r\n\t}\r\n\r\n\tfunction changeOwner(address _newOwner) external onlyOwner {\r\n\t\ttransferOwnership(_newOwner);\r\n\t}\r\n\t\r\n\tevent Staked(address indexed user, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RewardPaid(address indexed user, uint256 reward);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WarLordToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_warriorWarLordToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_knightWarLordToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_legendWarLordToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addTokenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"army\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkKingdomReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"durationRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getarmy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"renounceTokenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WarlordCamp","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b7bc7b0a32455f7e7a924f832ca4f0a0ac3b6b8800000000000000000000000067576eb0e6b342c4407ffc6d588b90cd1d132afb000000000000000000000000dfb73e3721da66820ea034c05ebe90569847470c00000000000000000000000008b7f2d3647b5ec70e8bbcdeae09fde189f9da70","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://99e52ca8f11291eb106dac277de2086c350683109f2ee8f30b7dbd7c7e0917da"}]}