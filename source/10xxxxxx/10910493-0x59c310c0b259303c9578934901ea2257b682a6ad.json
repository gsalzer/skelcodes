{"status":"1","message":"OK","result":[{"SourceCode":"// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorInterface.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\n\r\n// File: contracts/oracleIterators/IOracleIterator.sol\r\n\r\n\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface IOracleIterator {\r\n    /// @notice Proof of oracle iterator contract\r\n    /// @dev Verifies that contract is a oracle iterator contract\r\n    /// @return true if contract is a oracle iterator contract\r\n    function isOracleIterator() external pure returns(bool);\r\n\r\n    /// @notice Symbol of the oracle iterator\r\n    /// @dev Should be resolved through OracleIteratorRegistry contract\r\n    /// @return oracle iterator symbol\r\n    function symbol() external view returns (string memory);\r\n\r\n    /// @notice Algorithm that, for the type of oracle used by the derivative,\r\n    //  finds the value closest to a given timestamp\r\n    /// @param _oracle iteratable oracle through\r\n    /// @param _timestamp a given timestamp\r\n    /// @param _roundHint specified round for a given timestamp\r\n    /// @return the value closest to a given timestamp\r\n    function getUnderlingValue(address _oracle, uint _timestamp, uint _roundHint) external view returns(int);\r\n}\r\n\r\n// File: contracts/oracleIterators/ChainlinkOracleIterator.sol\r\n\r\n// \"SPDX-License-Identifier: GNU General Public License v3.0\"\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\ncontract ChainlinkOracleIterator is IOracleIterator {\r\n    int public constant NEGATIVE_INFINITY = type(int256).min;\r\n\r\n    function isOracleIterator() external override pure returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    function symbol() external override view returns (string memory) {\r\n        return \"ChainlinkIterator\";\r\n    }\r\n\r\n    function getUnderlingValue(address _oracle, uint _timestamp, uint _roundHint) public override view returns(int) {\r\n        require(_timestamp > 0, \"Zero timestamp\");\r\n        require(_oracle != address(0), \"Nullable oracle\");\r\n        AggregatorInterface oracle = AggregatorInterface(_oracle);\r\n\r\n        if(_roundHint > 0) {\r\n            uint roundHintTimestamp = oracle.getTimestamp(_roundHint);\r\n            uint nextRoundHintTimestamp = oracle.getTimestamp(_roundHint + 1);\r\n\r\n            if(roundHintTimestamp > 0 && roundHintTimestamp <= _timestamp &&\r\n                (nextRoundHintTimestamp == 0 || nextRoundHintTimestamp > _timestamp)) {\r\n                return oracle.getAnswer(_roundHint);\r\n            } else {\r\n                revert('Incorrect hint');\r\n            }\r\n        }\r\n\r\n        uint roundTimestamp = 0;\r\n        uint roundId = oracle.latestRound() + 1;\r\n\r\n        do {\r\n            roundId -= 1;\r\n            roundTimestamp = oracle.getTimestamp(roundId);\r\n        } while(roundTimestamp > _timestamp && roundId > 0);\r\n\r\n        if(roundId == 0 && oracle.getTimestamp(roundId) > _timestamp) {\r\n            return NEGATIVE_INFINITY;\r\n        }\r\n\r\n        return oracle.getAnswer(roundId);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"NEGATIVE_INFINITY\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundHint\",\"type\":\"uint256\"}],\"name\":\"getUnderlingValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOracleIterator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkOracleIterator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c040aef97e7c4881024c2b05f7c20d2efec87d7aa7551808344fba82180d3021"}]}