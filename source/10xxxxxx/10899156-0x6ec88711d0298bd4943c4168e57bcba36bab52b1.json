{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with buidler v1.4.7 https://buidler.dev\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/Donationburn.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract Donation {\r\n    IERC20 public Token;\r\n    uint256 public start;\r\n    uint256 public finish;\r\n    address payable public ad1;\r\n    address payable public ad2;\r\n    address payable public ad3;\r\n    address payable public ad4;\r\n\r\n    constructor(\r\n        IERC20 Tokent,\r\n        address payable a1,\r\n        address payable a2,\r\n        address payable a3,\r\n        address payable a4\r\n    ) public {\r\n        Token = Tokent;\r\n        start = now;\r\n        finish = now + 100 days;\r\n        ad1 = a1;\r\n        ad2 = a2;\r\n        ad3 = a3;\r\n        ad4 = a4;\r\n    }\r\n\r\n    receive() external payable {\r\n        Token.transfer(\r\n            msg.sender,\r\n            (msg.value * 10 * (finish - start)) /\r\n                ((finish - start) - (now - start))\r\n        );\r\n    }\r\n\r\n    uint256 public bal;\r\n\r\n    function donate() public {\r\n        bal = address(this).balance;\r\n        _transfer(ad1, bal / 4);\r\n        _transfer(ad2, bal / 4);\r\n        _transfer(ad3, bal / 4);\r\n        _transfer(ad4, bal / 4);\r\n    }\r\n\r\n    function _transfer(address payable to, uint256 amount) internal {\r\n      (bool success,) = to.call{value: amount}(\"\");\r\n      require(success, \"Donation: Error transferring ether.\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"Tokent\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"a1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"a2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"a3\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"a4\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ad1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ad2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ad3\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ad4\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Donation","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000091fc82f5c588c00985aa264fc7b45ee68011070300000000000000000000000050990f09d4f0cb864b8e046e7edc749de410916b00000000000000000000000000de4b13153673bcae2616b67bf822500d325fc30000000000000000000000008d6d29a74331c043ac2569cce6b193b78fa745d8000000000000000000000000de0b295669a9fd93d5f28d9ec85e40f4cb697bae","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://99d814535164e254981cb66003aacd356902134796c6d115a5873358ad45343e"}]}