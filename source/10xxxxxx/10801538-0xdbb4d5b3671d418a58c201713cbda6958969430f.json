{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ncontract InfiniteEthereum {\r\n    address public ownerWallet;\r\n\r\n    struct UserStruct {\r\n        uint currentPool;\r\n        address user;\r\n        mapping(uint => PoolStruct) pool;\r\n    }\r\n    \r\n    struct PoolStruct {\r\n        uint currentID;\r\n        uint referrerID;\r\n        uint[] referrals;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    uint public DOWNLINE_LIMIT = 5;\r\n    bool public lockStatus;\r\n    \r\n    mapping(uint => UserStruct) public poolusers;\r\n    mapping (uint => mapping(uint => address)) public poolList;\r\n    mapping (uint => uint) public PoolcurrentID;\r\n    \r\n    mapping (uint => uint) public poolPrice;\r\n    mapping (address => mapping (uint => bool)) public levelStatus;\r\n    \r\n    event JoinFee( address indexed UserAddress, uint UserID, uint Amount, uint Time);\r\n    event BuyPool(uint indexed Pool, address indexed UserAddress, uint UserID, address indexed toaddress, uint RefererID, uint Amount, uint flag, uint Time);\r\n    \r\n    constructor() public {\r\n        ownerWallet = msg.sender;\r\n        poolPrice[1] = 0.05 ether;\r\n        poolPrice[2] = 0.1 ether;\r\n        poolPrice[3] = 0.4 ether;\r\n        poolPrice[4] = 1.6 ether;\r\n        poolPrice[5] = 6.4 ether;\r\n        poolPrice[6] = 25.6 ether;\r\n        poolPrice[7] = 102.4 ether;\r\n        poolPrice[8] = 409.6 ether;\r\n        poolPrice[9] = 1638.4 ether;\r\n        poolPrice[10] = 6553.6 ether;\r\n        poolPrice[11] = 26214.4 ether;\r\n        poolPrice[12] = 104857.6 ether;\r\n        \r\n        for(uint i=1; i <= 12; i++) {\r\n            poolusers[1].currentPool = i;\r\n            poolusers[1].user = ownerWallet;\r\n            poolusers[1].pool[1].referrals = new uint[](0); \r\n            levelStatus[ownerWallet][i] = true;\r\n            PoolcurrentID[i]++;\r\n            poolusers[PoolcurrentID[i]].pool[1].currentID = PoolcurrentID[i];\r\n            poolList[i][PoolcurrentID[i]] = ownerWallet;\r\n        }\r\n    } \r\n    \r\n    \r\n    function poolRegistration(uint _referrerID) public payable returns (bool) {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(!levelStatus[msg.sender][1], \"User exist\");\r\n        require(msg.value == poolPrice[1], \"Incorrect value\");\r\n        require(_referrerID > 0 && _referrerID <= PoolcurrentID[1], \"Incorrect referrer Id\");\r\n             \r\n        PoolcurrentID[1]++;\r\n        \r\n        UserStruct memory userStruct;\r\n        \r\n        userStruct = UserStruct({\r\n            currentPool: 1,\r\n            user: msg.sender\r\n        });\r\n\r\n        poolusers[PoolcurrentID[1]] = userStruct;\r\n        \r\n        poolusers[PoolcurrentID[1]].pool[1].currentID = PoolcurrentID[1];\r\n        poolusers[PoolcurrentID[1]].pool[1].referrerID = _referrerID;\r\n\r\n        poolList[1][PoolcurrentID[1]] = msg.sender;\r\n        \r\n        poolusers[_referrerID].pool[1].referrals.push(PoolcurrentID[1]);\r\n        \r\n        levelStatus[msg.sender][1] = true;\r\n        \r\n        if(poolusers[_referrerID].pool[1].referrals.length < DOWNLINE_LIMIT) {\r\n            uint amount = poolPrice[1]/2;\r\n            \r\n            require(address(uint160(ownerWallet)).send(amount) && address(uint160(poolList[1][_referrerID])).send(amount), \"Owner wallet and referer transfer failed\");  \r\n\r\n            emit BuyPool(1, msg.sender, PoolcurrentID[1], poolList[1][_referrerID], _referrerID, amount, 0, now);\r\n            emit JoinFee( msg.sender, PoolcurrentID[1], amount, now); \r\n        }    \r\n        else {\r\n            payForLevel(_referrerID , PoolcurrentID[1],  1, 1);\r\n            poolusers[_referrerID].pool[1].referrals = new uint[](0);\r\n            poolusers[_referrerID].pool[1].reinvestCount++;\r\n        }\r\n        return true; \r\n    }\r\n    \r\n    function buyPool(uint _pool, uint _referrerID) public payable returns (bool) {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(_pool > 1 && _pool <= 12, \"Incorrect Pool\");\r\n        require(!levelStatus[msg.sender][_pool], \"User exist\");\r\n        require(msg.value == poolPrice[_pool], \"Incorrect value\");\r\n        require(_referrerID > 0 && _referrerID <= PoolcurrentID[_pool], \"Incorrect referrer Id\");\r\n        \r\n        require(levelStatus[msg.sender][_pool-1], \"Buy Pool in sequence\");\r\n             \r\n        PoolcurrentID[_pool]++;\r\n\r\n        poolusers[PoolcurrentID[_pool]].currentPool = _pool;\r\n        \r\n        poolusers[PoolcurrentID[_pool]].pool[_pool].currentID = PoolcurrentID[_pool];\r\n        poolusers[PoolcurrentID[_pool]].pool[_pool].referrerID = _referrerID;\r\n\r\n        poolList[_pool][PoolcurrentID[_pool]] = msg.sender;\r\n        \r\n        poolusers[_referrerID].pool[_pool].referrals.push(PoolcurrentID[_pool]);\r\n        \r\n        levelStatus[msg.sender][_pool] = true;\r\n        \r\n        if(poolusers[_referrerID].pool[_pool].referrals.length < DOWNLINE_LIMIT) {\r\n            payForLevel(_referrerID , PoolcurrentID[_pool],  _pool, 0);\r\n        }    \r\n        else {\r\n           payForLevel(_referrerID , PoolcurrentID[_pool],  _pool, 1);\r\n           poolusers[_referrerID].pool[_pool].referrals = new uint[](0);\r\n           poolusers[_referrerID].pool[_pool].reinvestCount++;\r\n        }\r\n        return true; \r\n    }\r\n    \r\n    \r\n    function payForLevel(uint _referrerID , uint _userID, uint _pool, uint _flag)internal {\r\n        address referrer;\r\n        if(_flag ==0)\r\n            referrer = poolList[_pool][_referrerID];\r\n        else\r\n            referrer = ownerWallet;\r\n        \r\n        require(address(uint160(referrer)).send(poolPrice[_pool]), \"Transfer Failed\");\r\n        \r\n        emit BuyPool(_pool, msg.sender, _userID,  poolList[_pool][_referrerID], _referrerID, poolPrice[_pool], _flag, now);\r\n    }\r\n    \r\n    function findFreeReferrer(uint _userID, uint8 _pool, uint _reInvestCount) public view returns(uint) {\r\n        while (true) {\r\n            \r\n            if (poolusers[_userID].pool[_pool].reinvestCount < _reInvestCount) {\r\n                return _userID;\r\n            }\r\n            \r\n            _userID++;\r\n        }\r\n    }\r\n    \r\n    function failSafe(address payable _toUser, uint _amount) public returns (bool) {\r\n        require(msg.sender == ownerWallet, \"only Owner Wallet\");\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    function updatePrice(uint _pool, uint _price) public returns (bool) {\r\n        require(msg.sender == ownerWallet, \"only OwnerWallet\");\r\n\r\n        poolPrice[_pool] = _price;\r\n        return true;\r\n    }\r\n    \r\n    function contractLock(bool _lockStatus) public returns (bool) {\r\n        require(msg.sender == ownerWallet, \"Invalid User\");\r\n\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n    \r\n    function userPool(uint _userID, uint8 _pool) public view returns(uint, uint, uint) {\r\n        return (poolusers[_userID].pool[_pool].currentID,\r\n                poolusers[_userID].pool[_pool].referrerID,\r\n                poolusers[_userID].pool[_pool].reinvestCount);\r\n    }\r\n    \r\n    \r\n    function viewUserReferral(uint _pool, uint _userID) public view returns(uint[] memory) {\r\n        return poolusers[_userID].pool[_pool].referrals;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Pool\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RefererID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"BuyPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"JoinFee\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOWNLINE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolcurrentID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"buyPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_pool\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_reInvestCount\",\"type\":\"uint256\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"poolRegistration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolusers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_pool\",\"type\":\"uint8\"}],\"name\":\"userPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userID\",\"type\":\"uint256\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InfiniteEthereum","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://df56c665c64e957d77f949c7b949f55a4a1e30c4a27de35c3668083a8c9776be"}]}