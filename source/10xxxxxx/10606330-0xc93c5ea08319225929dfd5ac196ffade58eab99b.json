{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IOneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n//\r\n//  [ msg.sender ]\r\n//       | |\r\n//       | |\r\n//       \\_/\r\n// +---------------+ ________________________________\r\n// | OneSplitAudit | _______________________________  \\\r\n// +---------------+                                 \\ \\\r\n//       | |                      ______________      | | (staticcall)\r\n//       | |                    /  ____________  \\    | |\r\n//       | | (call)            / /              \\ \\   | |\r\n//       | |                  / /               | |   | |\r\n//       \\_/                  | |               \\_/   \\_/\r\n// +--------------+           | |           +----------------------+\r\n// | OneSplitWrap |           | |           |   OneSplitViewWrap   |\r\n// +--------------+           | |           +----------------------+\r\n//       | |                  | |                     | |\r\n//       | | (delegatecall)   | | (staticcall)        | | (staticcall)\r\n//       \\_/                  | |                     \\_/\r\n// +--------------+           | |             +------------------+\r\n// |   OneSplit   |           | |             |   OneSplitView   |\r\n// +--------------+           | |             +------------------+\r\n//       | |                  / /\r\n//        \\ \\________________/ /\r\n//         \\__________________/\r\n//\r\n\r\n\r\ncontract IOneSplitConsts {\r\n    // flags = FLAG_DISABLE_UNISWAP + FLAG_DISABLE_BANCOR + ...\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP = 0x01;\r\n    uint256 internal constant DEPRECATED_FLAG_DISABLE_KYBER = 0x02; // Deprecated\r\n    uint256 internal constant FLAG_DISABLE_BANCOR = 0x04;\r\n    uint256 internal constant FLAG_DISABLE_OASIS = 0x08;\r\n    uint256 internal constant FLAG_DISABLE_COMPOUND = 0x10;\r\n    uint256 internal constant FLAG_DISABLE_FULCRUM = 0x20;\r\n    uint256 internal constant FLAG_DISABLE_CHAI = 0x40;\r\n    uint256 internal constant FLAG_DISABLE_AAVE = 0x80;\r\n    uint256 internal constant FLAG_DISABLE_SMART_TOKEN = 0x100;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_ETH = 0x200; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_BDAI = 0x400;\r\n    uint256 internal constant FLAG_DISABLE_IEARN = 0x800;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_COMPOUND = 0x1000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_USDT = 0x2000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_Y = 0x4000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_BINANCE = 0x8000;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_DAI = 0x10000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_USDC = 0x20000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_CURVE_SYNTHETIX = 0x40000;\r\n    uint256 internal constant FLAG_DISABLE_WETH = 0x80000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_COMPOUND = 0x100000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_CHAI = 0x200000; // Works only when ETH<>DAI or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_AAVE = 0x400000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_IDLE = 0x800000;\r\n    uint256 internal constant FLAG_DISABLE_MOONISWAP = 0x1000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2 = 0x2000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ETH = 0x4000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_DAI = 0x8000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_USDC = 0x10000000;\r\n    uint256 internal constant FLAG_DISABLE_ALL_SPLIT_SOURCES = 0x20000000;\r\n    uint256 internal constant FLAG_DISABLE_ALL_WRAP_SOURCES = 0x40000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_PAX = 0x80000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_RENBTC = 0x100000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_TBTC = 0x200000000;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_USDT = 0x400000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_WBTC = 0x800000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_TBTC = 0x1000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_RENBTC = 0x2000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_DFORCE_SWAP = 0x4000000000;\r\n    uint256 internal constant FLAG_DISABLE_SHELL = 0x8000000000;\r\n    uint256 internal constant FLAG_ENABLE_CHI_BURN = 0x10000000000;\r\n    uint256 internal constant FLAG_DISABLE_MSTABLE_MUSD = 0x20000000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_SBTC = 0x40000000000;\r\n    uint256 internal constant FLAG_DISABLE_DMM = 0x80000000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_ALL = 0x100000000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_ALL = 0x200000000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ALL = 0x400000000000;\r\n    uint256 internal constant FLAG_DISABLE_SPLIT_RECALCULATION = 0x800000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_ALL = 0x1000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_1 = 0x2000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_2 = 0x4000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_3 = 0x8000000000000;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_UNISWAP_RESERVE = 0x10000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_OASIS_RESERVE = 0x20000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_BANCOR_RESERVE = 0x40000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_REFERRAL_GAS_SPONSORSHIP = 0x80000000000000; // Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_COMP = 0x100000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_KYBER_ALL = 0x200000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_1 = 0x400000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_2 = 0x800000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_3 = 0x1000000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_4 = 0x2000000000000000;\r\n    uint256 internal constant FLAG_ENABLE_CHI_BURN_BY_ORIGIN = 0x4000000000000000;\r\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_ALL = 0x8000000000000000;\r\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_ETH = 0x10000000000000000;\r\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_DAI = 0x20000000000000000;\r\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_USDC = 0x40000000000000000;\r\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_POOL_TOKEN = 0x80000000000000000;\r\n}\r\n\r\n\r\ncontract IOneSplit is IOneSplitConsts {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    )\r\n        public\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\n\r\ncontract IOneSplitMulti is IOneSplit {\r\n    function getExpectedReturnWithGasMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256[] memory parts,\r\n        uint256[] memory flags,\r\n        uint256[] memory destTokenEthPriceTimesGasPrices\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256[] memory returnAmounts,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function swapMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256[] memory flags\r\n    )\r\n        public\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapExchange {\r\n    function getEthToTokenInputPrice(uint256 ethSold) external view returns (uint256 tokensBought);\r\n\r\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns (uint256 ethBought);\r\n\r\n    function ethToTokenSwapInput(uint256 minTokens, uint256 deadline)\r\n        external\r\n        payable\r\n        returns (uint256 tokensBought);\r\n\r\n    function tokenToEthSwapInput(uint256 tokensSold, uint256 minEth, uint256 deadline)\r\n        external\r\n        returns (uint256 ethBought);\r\n\r\n    function tokenToTokenSwapInput(\r\n        uint256 tokensSold,\r\n        uint256 minTokensBought,\r\n        uint256 minEthBought,\r\n        uint256 deadline,\r\n        address tokenAddr\r\n    ) external returns (uint256 tokensBought);\r\n}\r\n\r\n// File: contracts/interface/IUniswapFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapFactory {\r\n    function getExchange(IERC20 token) external view returns (IUniswapExchange exchange);\r\n}\r\n\r\n// File: contracts/interface/IKyberNetworkContract.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IKyberNetworkContract {\r\n    function searchBestRate(IERC20 src, IERC20 dest, uint256 srcAmount, bool usePermissionless)\r\n        external\r\n        view\r\n        returns (address reserve, uint256 rate);\r\n}\r\n\r\n// File: contracts/interface/IKyberNetworkProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IKyberNetworkProxy {\r\n    function getExpectedRateAfterFee(\r\n        IERC20 src,\r\n        IERC20 dest,\r\n        uint256 srcQty,\r\n        uint256 platformFeeBps,\r\n        bytes calldata hint\r\n    ) external view returns (uint256 expectedRate);\r\n\r\n    function tradeWithHintAndFee(\r\n        IERC20 src,\r\n        uint256 srcAmount,\r\n        IERC20 dest,\r\n        address payable destAddress,\r\n        uint256 maxDestAmount,\r\n        uint256 minConversionRate,\r\n        address payable platformWallet,\r\n        uint256 platformFeeBps,\r\n        bytes calldata hint\r\n    ) external payable returns (uint256 destAmount);\r\n\r\n    function kyberNetworkContract() external view returns (IKyberNetworkContract);\r\n\r\n    // TODO: Limit usage by tx.gasPrice\r\n    // function maxGasPrice() external view returns (uint256);\r\n\r\n    // TODO: Limit usage by user cap\r\n    // function getUserCapInWei(address user) external view returns (uint256);\r\n    // function getUserCapInTokenWei(address user, IERC20 token) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IKyberStorage.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IKyberStorage {\r\n    function getReserveIdsPerTokenSrc(\r\n        IERC20 token\r\n    ) external view returns (bytes32[] memory);\r\n}\r\n\r\n// File: contracts/interface/IKyberHintHandler.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IKyberHintHandler {\r\n    enum TradeType {\r\n        BestOfAll,\r\n        MaskIn,\r\n        MaskOut,\r\n        Split\r\n    }\r\n\r\n    function buildTokenToEthHint(\r\n        IERC20 tokenSrc,\r\n        TradeType tokenToEthType,\r\n        bytes32[] calldata tokenToEthReserveIds,\r\n        uint256[] calldata tokenToEthSplits\r\n    ) external view returns (bytes memory hint);\r\n\r\n    function buildEthToTokenHint(\r\n        IERC20 tokenDest,\r\n        TradeType ethToTokenType,\r\n        bytes32[] calldata ethToTokenReserveIds,\r\n        uint256[] calldata ethToTokenSplits\r\n    ) external view returns (bytes memory hint);\r\n}\r\n\r\n// File: contracts/interface/IBancorNetwork.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IBancorNetwork {\r\n    function getReturnByPath(address[] calldata path, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256 returnAmount, uint256 conversionFee);\r\n\r\n    function claimAndConvert(address[] calldata path, uint256 amount, uint256 minReturn)\r\n        external\r\n        returns (uint256);\r\n\r\n    function convert(address[] calldata path, uint256 amount, uint256 minReturn)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IBancorContractRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IBancorContractRegistry {\r\n    function addressOf(bytes32 contractName) external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IBancorNetworkPathFinder.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IBancorNetworkPathFinder {\r\n    function generatePath(IERC20 sourceToken, IERC20 targetToken)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n}\r\n\r\n// File: contracts/interface/IBancorConverterRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IBancorConverterRegistry {\r\n\r\n    function getConvertibleTokenSmartTokenCount(IERC20 convertibleToken)\r\n        external view returns(uint256);\r\n\r\n    function getConvertibleTokenSmartTokens(IERC20 convertibleToken)\r\n        external view returns(address[] memory);\r\n\r\n    function getConvertibleTokenSmartToken(IERC20 convertibleToken, uint256 index)\r\n        external view returns(address);\r\n\r\n    function isConvertibleTokenSmartToken(IERC20 convertibleToken, address value)\r\n        external view returns(bool);\r\n}\r\n\r\n// File: contracts/interface/IBancorEtherToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IBancorEtherToken is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interface/IBancorFinder.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IBancorFinder {\r\n    function buildBancorPath(\r\n        IERC20 fromToken,\r\n        IERC20 destToken\r\n    )\r\n        external\r\n        view\r\n        returns(address[] memory path);\r\n}\r\n\r\n// File: contracts/interface/IOasisExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IOasisExchange {\r\n    function getBuyAmount(IERC20 buyGem, IERC20 payGem, uint256 payAmt)\r\n        external\r\n        view\r\n        returns (uint256 fillAmt);\r\n\r\n    function sellAllAmount(IERC20 payGem, uint256 payAmt, IERC20 buyGem, uint256 minFillAmount)\r\n        external\r\n        returns (uint256 fillAmt);\r\n}\r\n\r\n// File: contracts/interface/IWETH.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interface/ICurve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface ICurve {\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns(uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns(uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 minDy) external;\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external;\r\n}\r\n\r\n\r\ncontract ICurveRegistry {\r\n    function get_pool_info(address pool)\r\n        external\r\n        view\r\n        returns(\r\n            uint256[8] memory balances,\r\n            uint256[8] memory underlying_balances,\r\n            uint256[8] memory decimals,\r\n            uint256[8] memory underlying_decimals,\r\n            address lp_token,\r\n            uint256 A,\r\n            uint256 fee\r\n        );\r\n}\r\n\r\n\r\ncontract ICurveCalculator {\r\n    function get_dy(\r\n        int128 nCoins,\r\n        uint256[8] calldata balances,\r\n        uint256 amp,\r\n        uint256 fee,\r\n        uint256[8] calldata rates,\r\n        uint256[8] calldata precisions,\r\n        bool underlying,\r\n        int128 i,\r\n        int128 j,\r\n        uint256[100] calldata dx\r\n    ) external view returns(uint256[100] memory dy);\r\n}\r\n\r\n// File: contracts/interface/IChai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IPot {\r\n    function dsr() external view returns (uint256);\r\n\r\n    function chi() external view returns (uint256);\r\n\r\n    function rho() external view returns (uint256);\r\n\r\n    function drip() external returns (uint256);\r\n\r\n    function join(uint256) external;\r\n\r\n    function exit(uint256) external;\r\n}\r\n\r\n\r\ncontract IChai is IERC20 {\r\n    function POT() public view returns (IPot);\r\n\r\n    function join(address dst, uint256 wad) external;\r\n\r\n    function exit(address src, uint256 wad) external;\r\n}\r\n\r\n\r\nlibrary ChaiHelper {\r\n    IPot private constant POT = IPot(0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7);\r\n    uint256 private constant RAY = 10**27;\r\n\r\n    function _mul(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function _rmul(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        // always rounds down\r\n        z = _mul(x, y) / RAY;\r\n    }\r\n\r\n    function _rdiv(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        // always rounds down\r\n        z = _mul(x, RAY) / y;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n, uint256 base) private pure returns (uint256 z) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch x\r\n                case 0 {\r\n                    switch n\r\n                        case 0 {\r\n                            z := base\r\n                        }\r\n                        default {\r\n                            z := 0\r\n                        }\r\n                }\r\n                default {\r\n                    switch mod(n, 2)\r\n                        case 0 {\r\n                            z := base\r\n                        }\r\n                        default {\r\n                            z := x\r\n                        }\r\n                    let half := div(base, 2) // for rounding.\r\n                    for {\r\n                        n := div(n, 2)\r\n                    } n {\r\n                        n := div(n, 2)\r\n                    } {\r\n                        let xx := mul(x, x)\r\n                        if iszero(eq(div(xx, x), x)) {\r\n                            revert(0, 0)\r\n                        }\r\n                        let xxRound := add(xx, half)\r\n                        if lt(xxRound, xx) {\r\n                            revert(0, 0)\r\n                        }\r\n                        x := div(xxRound, base)\r\n                        if mod(n, 2) {\r\n                            let zx := mul(z, x)\r\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\r\n                                revert(0, 0)\r\n                            }\r\n                            let zxRound := add(zx, half)\r\n                            if lt(zxRound, zx) {\r\n                                revert(0, 0)\r\n                            }\r\n                            z := div(zxRound, base)\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    function potDrip() private view returns (uint256) {\r\n        return _rmul(rpow(POT.dsr(), now - POT.rho(), RAY), POT.chi());\r\n    }\r\n\r\n    function chaiPrice(IChai chai) internal view returns(uint256) {\r\n        return chaiToDai(chai, 1e18);\r\n    }\r\n\r\n    function daiToChai(\r\n        IChai /*chai*/,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        uint256 chi = (now > POT.rho()) ? potDrip() : POT.chi();\r\n        return _rdiv(amount, chi);\r\n    }\r\n\r\n    function chaiToDai(\r\n        IChai /*chai*/,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        uint256 chi = (now > POT.rho()) ? potDrip() : POT.chi();\r\n        return _rmul(chi, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/ICompound.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract ICompound {\r\n    function markets(address cToken)\r\n        external\r\n        view\r\n        returns (bool isListed, uint256 collateralFactorMantissa);\r\n}\r\n\r\n\r\ncontract ICompoundToken is IERC20 {\r\n    function underlying() external view returns (address);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n}\r\n\r\n\r\ncontract ICompoundEther is IERC20 {\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/ICompoundRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract ICompoundRegistry {\r\n    function tokenByCToken(ICompoundToken cToken) external view returns(IERC20);\r\n    function cTokenByToken(IERC20 token) external view returns(ICompoundToken);\r\n}\r\n\r\n// File: contracts/interface/IAaveToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IAaveToken is IERC20 {\r\n    function underlyingAssetAddress() external view returns (IERC20);\r\n\r\n    function redeem(uint256 amount) external;\r\n}\r\n\r\n\r\ninterface IAaveLendingPool {\r\n    function core() external view returns (address);\r\n\r\n    function deposit(IERC20 token, uint256 amount, uint16 refCode) external payable;\r\n}\r\n\r\n// File: contracts/interface/IAaveRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract IAaveRegistry {\r\n    function tokenByAToken(IAaveToken aToken) external view returns(IERC20);\r\n    function aTokenByToken(IERC20 token) external view returns(IAaveToken);\r\n}\r\n\r\n// File: contracts/interface/IMooniswap.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IMooniswapRegistry {\r\n    function pools(IERC20 token1, IERC20 token2) external view returns(IMooniswap);\r\n    function isPool(address addr) external view returns(bool);\r\n}\r\n\r\n\r\ninterface IMooniswap {\r\n    function fee() external view returns (uint256);\r\n\r\n    function tokens(uint256 i) external view returns (IERC20);\r\n\r\n    function deposit(uint256[] calldata amounts, uint256 minReturn) external payable returns(uint256 fairSupply);\r\n\r\n    function withdraw(uint256 amount, uint256[] calldata minReturns) external;\r\n\r\n    function getBalanceForAddition(IERC20 token) external view returns(uint256);\r\n\r\n    function getBalanceForRemoval(IERC20 token) external view returns(uint256);\r\n\r\n    function getReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    )\r\n        external\r\n        view\r\n        returns(uint256 returnAmount);\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        address referral\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/UniversalERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            address(uint160(to)).transfer(amount);\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            require(from == msg.sender && msg.value >= amount, \"Wrong useage of ETH.universalTransferFrom()\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            if (msg.value > amount) {\r\n                // Return remainder if exist\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n    }\r\n\r\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\r\n        if (!isETH(token)) {\r\n            if (amount == 0) {\r\n                token.safeApprove(to, 0);\r\n                return;\r\n            }\r\n\r\n            uint256 allowance = token.allowance(address(this), to);\r\n            if (allowance < amount) {\r\n                if (allowance > 0) {\r\n                    token.safeApprove(to, 0);\r\n                }\r\n                token.safeApprove(to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\r\n\r\n        if (isETH(token)) {\r\n            return 18;\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(10000)(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        if (!success || data.length == 0) {\r\n            (success, data) = address(token).staticcall.gas(10000)(\r\n                abi.encodeWithSignature(\"DECIMALS()\")\r\n            );\r\n        }\r\n\r\n        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;\r\n    }\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\r\n    }\r\n\r\n    function eq(IERC20 a, IERC20 b) internal pure returns(bool) {\r\n        return a == b || (isETH(a) && isETH(b));\r\n    }\r\n\r\n    function notExist(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(-1));\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapV2Exchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Exchange {\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\n\r\nlibrary UniswapV2ExchangeLib {\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function getReturn(\r\n        IUniswapV2Exchange exchange,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint amountIn\r\n    ) internal view returns (uint256) {\r\n        uint256 reserveIn = fromToken.universalBalanceOf(address(exchange));\r\n        uint256 reserveOut = destToken.universalBalanceOf(address(exchange));\r\n\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        return (denominator == 0) ? 0 : numerator.div(denominator);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Exchange pair);\r\n}\r\n\r\n// File: contracts/interface/IDForceSwap.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IDForceSwap {\r\n    function getAmountByInput(IERC20 input, IERC20 output, uint256 amount) external view returns(uint256);\r\n    function swap(IERC20 input, IERC20 output, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interface/IShell.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IShell {\r\n    function viewOriginTrade(\r\n        address origin,\r\n        address target,\r\n        uint256 originAmount\r\n    ) external view returns (uint256);\r\n\r\n    function swapByOrigin(\r\n        address origin,\r\n        address target,\r\n        uint256 originAmount,\r\n        uint256 minTargetAmount,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IMStable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IMStable is IERC20 {\r\n    function getSwapOutput(\r\n        IERC20 _input,\r\n        IERC20 _output,\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        view\r\n        returns (bool, string memory, uint256 output);\r\n\r\n    function swap(\r\n        IERC20 _input,\r\n        IERC20 _output,\r\n        uint256 _quantity,\r\n        address _recipient\r\n    )\r\n        external\r\n        returns (uint256 output);\r\n\r\n    function redeem(\r\n        IERC20 _basset,\r\n        uint256 _bassetQuantity\r\n    )\r\n        external\r\n        returns (uint256 massetRedeemed);\r\n}\r\n\r\ninterface IMassetValidationHelper {\r\n    /**\r\n     * @dev Returns a valid bAsset to redeem\r\n     * @param _mAsset Masset addr\r\n     * @return valid bool\r\n     * @return string message\r\n     * @return address of bAsset to redeem\r\n     */\r\n    function suggestRedeemAsset(\r\n        IERC20 _mAsset\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool valid,\r\n            string memory err,\r\n            address token\r\n        );\r\n\r\n    /**\r\n     * @dev Returns a valid bAsset with which to mint\r\n     * @param _mAsset Masset addr\r\n     * @return valid bool\r\n     * @return string message\r\n     * @return address of bAsset to mint\r\n     */\r\n    function suggestMintAsset(\r\n        IERC20 _mAsset\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool valid,\r\n            string memory err,\r\n            address token\r\n        );\r\n\r\n    /**\r\n     * @dev Determines if a given Redemption is valid\r\n     * @param _mAsset Address of the given mAsset (e.g. mUSD)\r\n     * @param _mAssetQuantity Amount of mAsset to redeem (in mUSD units)\r\n     * @param _outputBasset Desired output bAsset\r\n     * @return valid\r\n     * @return validity reason\r\n     * @return output in bAsset units\r\n     * @return bAssetQuantityArg - required input argument to the 'redeem' call\r\n     */\r\n    function getRedeemValidity(\r\n        IERC20 _mAsset,\r\n        uint256 _mAssetQuantity,\r\n        IERC20 _outputBasset\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool valid,\r\n            string memory,\r\n            uint256 output,\r\n            uint256 bassetQuantityArg\r\n        );\r\n}\r\n\r\n// File: contracts/interface/IBalancerPool.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IBalancerPool {\r\n    function getSwapFee()\r\n        external view returns (uint256 balance);\r\n\r\n    function getDenormalizedWeight(IERC20 token)\r\n        external view returns (uint256 balance);\r\n\r\n    function getBalance(IERC20 token)\r\n        external view returns (uint256 balance);\r\n\r\n    function swapExactAmountIn(\r\n        IERC20 tokenIn,\r\n        uint256 tokenAmountIn,\r\n        IERC20 tokenOut,\r\n        uint256 minAmountOut,\r\n        uint256 maxPrice\r\n    )\r\n        external\r\n        returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\r\n}\r\n\r\n\r\n// 0xA961672E8Db773be387e775bc4937C678F3ddF9a\r\ninterface IBalancerHelper {\r\n    function getReturns(\r\n        IBalancerPool pool,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256[] calldata amounts\r\n    )\r\n        external\r\n        view\r\n        returns(uint256[] memory rets);\r\n}\r\n\r\n// File: contracts/interface/IBalancerRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ninterface IBalancerRegistry {\r\n    event PoolAdded(\r\n        address indexed pool\r\n    );\r\n    event PoolTokenPairAdded(\r\n        address indexed pool,\r\n        address indexed fromToken,\r\n        address indexed destToken\r\n    );\r\n    event IndicesUpdated(\r\n        address indexed fromToken,\r\n        address indexed destToken,\r\n        bytes32 oldIndices,\r\n        bytes32 newIndices\r\n    );\r\n\r\n    // Get info about pool pair for 1 SLOAD\r\n    function getPairInfo(address pool, address fromToken, address destToken)\r\n        external view returns(uint256 weight1, uint256 weight2, uint256 swapFee);\r\n\r\n    // Pools\r\n    function checkAddedPools(address pool)\r\n        external view returns(bool);\r\n    function getAddedPoolsLength()\r\n        external view returns(uint256);\r\n    function getAddedPools()\r\n        external view returns(address[] memory);\r\n    function getAddedPoolsWithLimit(uint256 offset, uint256 limit)\r\n        external view returns(address[] memory result);\r\n\r\n    // Tokens\r\n    function getAllTokensLength()\r\n        external view returns(uint256);\r\n    function getAllTokens()\r\n        external view returns(address[] memory);\r\n    function getAllTokensWithLimit(uint256 offset, uint256 limit)\r\n        external view returns(address[] memory result);\r\n\r\n    // Pairs\r\n    function getPoolsLength(address fromToken, address destToken)\r\n        external view returns(uint256);\r\n    function getPools(address fromToken, address destToken)\r\n        external view returns(address[] memory);\r\n    function getPoolsWithLimit(address fromToken, address destToken, uint256 offset, uint256 limit)\r\n        external view returns(address[] memory result);\r\n    function getBestPools(address fromToken, address destToken)\r\n        external view returns(address[] memory pools);\r\n    function getBestPoolsWithLimit(address fromToken, address destToken, uint256 limit)\r\n        external view returns(address[] memory pools);\r\n\r\n    // Get swap rates\r\n    function getPoolReturn(address pool, address fromToken, address destToken, uint256 amount)\r\n        external view returns(uint256);\r\n    function getPoolReturns(address pool, address fromToken, address destToken, uint256[] calldata amounts)\r\n        external view returns(uint256[] memory result);\r\n\r\n    // Add and update registry\r\n    function addPool(address pool) external returns(uint256 listed);\r\n    function addPools(address[] calldata pools) external returns(uint256[] memory listed);\r\n    function updatedIndices(address[] calldata tokens, uint256 lengthLimit) external;\r\n}\r\n\r\n// File: contracts/BalancerLib.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\nlibrary BalancerLib {\r\n    uint public constant BONE              = 10**18;\r\n\r\n    uint public constant MIN_BOUND_TOKENS  = 2;\r\n    uint public constant MAX_BOUND_TOKENS  = 8;\r\n\r\n    uint public constant MIN_FEE           = BONE / 10**6;\r\n    uint public constant MAX_FEE           = BONE / 10;\r\n    uint public constant EXIT_FEE          = 0;\r\n\r\n    uint public constant MIN_WEIGHT        = BONE;\r\n    uint public constant MAX_WEIGHT        = BONE * 50;\r\n    uint public constant MAX_TOTAL_WEIGHT  = BONE * 50;\r\n    uint public constant MIN_BALANCE       = BONE / 10**12;\r\n\r\n    uint public constant INIT_POOL_SUPPLY  = BONE * 100;\r\n\r\n    uint public constant MIN_BPOW_BASE     = 1 wei;\r\n    uint public constant MAX_BPOW_BASE     = (2 * BONE) - 1 wei;\r\n    uint public constant BPOW_PRECISION    = BONE / 10**10;\r\n\r\n    uint public constant MAX_IN_RATIO      = BONE / 2;\r\n    uint public constant MAX_OUT_RATIO     = (BONE / 3) + 1 wei;\r\n\r\n    function btoi(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return a / BONE;\r\n    }\r\n\r\n    function bfloor(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return btoi(a) * BONE;\r\n    }\r\n\r\n    function badd(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsub(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        (uint c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsubSign(uint a, uint b)\r\n        internal pure\r\n        returns (uint, bool)\r\n    {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n\r\n    function bmul(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint c1 = c0 + (BONE / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint c2 = c1 / BONE;\r\n        return c2;\r\n    }\r\n\r\n    function bdiv(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint c0 = a * BONE;\r\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    // DSMath.wpow\r\n    function bpowi(uint a, uint n)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint z = n % 2 != 0 ? a : BONE;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            a = bmul(a, a);\r\n\r\n            if (n % 2 != 0) {\r\n                z = bmul(z, a);\r\n            }\r\n        }\r\n        return z;\r\n    }\r\n\r\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\r\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\r\n    // of approximation of b^0.w\r\n    function bpow(uint base, uint exp)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\r\n        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\r\n\r\n        uint whole  = bfloor(exp);\r\n        uint remain = bsub(exp, whole);\r\n\r\n        uint wholePow = bpowi(base, btoi(whole));\r\n\r\n        if (remain == 0) {\r\n            return wholePow;\r\n        }\r\n\r\n        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\r\n        return bmul(wholePow, partialResult);\r\n    }\r\n\r\n    function bpowApprox(uint base, uint exp, uint precision)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        // term 0:\r\n        uint a     = exp;\r\n        (uint x, bool xneg)  = bsubSign(base, BONE);\r\n        uint term = BONE;\r\n        uint sum   = term;\r\n        bool negative = false;\r\n\r\n\r\n        // term(k) = numer / denom\r\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\r\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\r\n        // continue until term is less than precision\r\n        for (uint i = 1; term >= precision; i++) {\r\n            uint bigK = i * BONE;\r\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\r\n            term = bmul(term, bmul(c, x));\r\n            term = bdiv(term, bigK);\r\n            if (term == 0) break;\r\n\r\n            if (xneg) negative = !negative;\r\n            if (cneg) negative = !negative;\r\n            if (negative) {\r\n                sum = bsub(sum, term);\r\n            } else {\r\n                sum = badd(sum, term);\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcSpotPrice                                                                             //\r\n    // sP = spotPrice                                                                            //\r\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\r\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\r\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\r\n    // wO = tokenWeightOut                                                                       //\r\n    // sF = swapFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcSpotPrice(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint spotPrice)\r\n    {\r\n        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\r\n        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\r\n        uint ratio = bdiv(numer, denom);\r\n        uint scale = bdiv(BONE, bsub(BONE, swapFee));\r\n        return  (spotPrice = bmul(ratio, scale));\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcOutGivenIn                                                                            //\r\n    // aO = tokenAmountOut                                                                       //\r\n    // bO = tokenBalanceOut                                                                      //\r\n    // bI = tokenBalanceIn              /      /            bI             \\    (wI / wO) \\      //\r\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\r\n    // wI = tokenWeightIn               \\      \\ ( bI + ( aI * ( 1 - sF )) /              /      //\r\n    // wO = tokenWeightOut                                                                       //\r\n    // sF = swapFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\r\n        uint adjustedIn = bsub(BONE, swapFee);\r\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\r\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\r\n        if (y == 0) {\r\n            return 0;\r\n        }\r\n        uint foo = bpow(y, weightRatio);\r\n        uint bar = bsub(BONE, foo);\r\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\r\n        return tokenAmountOut;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcInGivenOut                                                                            //\r\n    // aI = tokenAmountIn                                                                        //\r\n    // bO = tokenBalanceOut               /  /     bO      \\    (wO / wI)      \\                 //\r\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\r\n    // aO = tokenAmountOut    aI =        \\  \\ ( bO - aO ) /                   /                 //\r\n    // wI = tokenWeightIn           --------------------------------------------                 //\r\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\r\n    // sF = swapFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcInGivenOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountIn)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\r\n        uint diff = bsub(tokenBalanceOut, tokenAmountOut);\r\n        uint y = bdiv(tokenBalanceOut, diff);\r\n        if (y == 0) {\r\n            return 0;\r\n        }\r\n        uint foo = bpow(y, weightRatio);\r\n        foo = bsub(foo, BONE);\r\n        tokenAmountIn = bsub(BONE, swapFee);\r\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\r\n        return tokenAmountIn;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcPoolOutGivenSingleIn                                                                  //\r\n    // pAo = poolAmountOut         /                                              \\              //\r\n    // tAi = tokenAmountIn        ///      /     //    wI \\      \\\\       \\     wI \\             //\r\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\    --  \\            //\r\n    // tW = totalWeight     pAo=||  \\      \\     \\\\    tW /      //         | ^ tW   | * pS - pS //\r\n    // tBi = tokenBalanceIn      \\\\  ------------------------------------- /        /            //\r\n    // pS = poolSupply            \\\\                    tBi               /        /             //\r\n    // sF = swapFee                \\                                              /              //\r\n    **********************************************************************************************/\r\n    function calcPoolOutGivenSingleIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint poolAmountOut)\r\n    {\r\n        // Charge the trading fee for the proportion of tokenAi\r\n        ///  which is implicitly traded to the other pool tokens.\r\n        // That proportion is (1- weightTokenIn)\r\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\r\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\r\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\r\n        uint tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\r\n\r\n        uint newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\r\n        uint tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\r\n\r\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\r\n        uint poolRatio = bpow(tokenInRatio, normalizedWeight);\r\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\r\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\r\n        return poolAmountOut;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcSingleInGivenPoolOut                                                                  //\r\n    // tAi = tokenAmountIn              //(pS + pAo)\\     /    1    \\\\                           //\r\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\r\n    // pAo = poolAmountOut              \\\\    pS    /     \\(wI / tW)//                           //\r\n    // bI = balanceIn          tAi =  --------------------------------------------               //\r\n    // wI = weightIn                              /      wI  \\                                   //\r\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\r\n    // sF = swapFee                               \\      tW  /                                   //\r\n    **********************************************************************************************/\r\n    function calcSingleInGivenPoolOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountOut,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountIn)\r\n    {\r\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\r\n        uint newPoolSupply = badd(poolSupply, poolAmountOut);\r\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\r\n\r\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\r\n        uint boo = bdiv(BONE, normalizedWeight);\r\n        uint tokenInRatio = bpow(poolRatio, boo);\r\n        uint newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\r\n        uint tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\r\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\r\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\r\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\r\n        uint zar = bmul(bsub(BONE, normalizedWeight), swapFee);\r\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\r\n        return tokenAmountIn;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcSingleOutGivenPoolIn                                                                  //\r\n    // tAo = tokenAmountOut            /      /                                             \\\\   //\r\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\     /    1    \\      \\\\  //\r\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\r\n    // ps = poolSupply                \\      \\\\          pS           /     \\(wO / tW)/      //  //\r\n    // wI = tokenWeightIn      tAo =   \\      \\                                             //   //\r\n    // tW = totalWeight                    /     /      wO \\       \\                             //\r\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\r\n    // eF = exitFee                        \\     \\      tW /       /                             //\r\n    **********************************************************************************************/\r\n    function calcSingleOutGivenPoolIn(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountIn,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\r\n        // charge exit fee on the pool token side\r\n        // pAiAfterExitFee = pAi*(1-exitFee)\r\n        uint poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\r\n        uint newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\r\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\r\n\r\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\r\n        uint tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\r\n        uint newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\r\n\r\n        uint tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\r\n\r\n        // charge swap fee on the output token side\r\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\r\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\r\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\r\n        return tokenAmountOut;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcPoolInGivenSingleOut                                                                  //\r\n    // pAi = poolAmountIn               // /               tAo             \\\\     / wO \\     \\   //\r\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\   | ---- |     \\  //\r\n    // tAo = tokenAmountOut      pS - ||   \\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\ tW /  * pS | //\r\n    // ps = poolSupply                 \\\\ -----------------------------------/                /  //\r\n    // wO = tokenWeightOut  pAi =       \\\\               bO                 /                /   //\r\n    // tW = totalWeight           -------------------------------------------------------------  //\r\n    // sF = swapFee                                        ( 1 - eF )                            //\r\n    // eF = exitFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcPoolInGivenSingleOut(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint poolAmountIn)\r\n    {\r\n\r\n        // charge swap fee on the output token side\r\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\r\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\r\n        uint zoo = bsub(BONE, normalizedWeight);\r\n        uint zar = bmul(zoo, swapFee);\r\n        uint tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\r\n\r\n        uint newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\r\n        uint tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\r\n\r\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\r\n        uint poolRatio = bpow(tokenOutRatio, normalizedWeight);\r\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\r\n        uint poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\r\n\r\n        // charge exit fee on the pool token side\r\n        // pAi = pAiAfterExitFee/(1-exitFee)\r\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\r\n        return poolAmountIn;\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitBase.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IOneSplitView is IOneSplitConsts {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n}\r\n\r\n\r\nlibrary DisableFlags {\r\n    function check(uint256 flags, uint256 flag) internal pure returns(bool) {\r\n        return (flags & flag) != 0;\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitRoot is IOneSplitView {\r\n    using SafeMath for uint256;\r\n    using DisableFlags for uint256;\r\n\r\n    using UniversalERC20 for IERC20;\r\n    using UniversalERC20 for IWETH;\r\n    using UniswapV2ExchangeLib for IUniswapV2Exchange;\r\n    using ChaiHelper for IChai;\r\n\r\n    uint256 constant internal DEXES_COUNT = 34;\r\n    IERC20 constant internal ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    IERC20 constant internal ZERO_ADDRESS = IERC20(0);\r\n\r\n    IBancorEtherToken constant internal bancorEtherToken = IBancorEtherToken(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\r\n    IWETH constant internal weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IChai constant internal chai = IChai(0x06AF07097C9Eeb7fD685c692751D5C66dB49c215);\r\n    IERC20 constant internal dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IERC20 constant internal usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    IERC20 constant internal usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    IERC20 constant internal tusd = IERC20(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n    IERC20 constant internal busd = IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53);\r\n    IERC20 constant internal susd = IERC20(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n    IERC20 constant internal pax = IERC20(0x8E870D67F660D95d5be530380D0eC0bd388289E1);\r\n    IERC20 constant internal renbtc = IERC20(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\r\n    IERC20 constant internal wbtc = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n    IERC20 constant internal tbtc = IERC20(0x1bBE271d15Bb64dF0bc6CD28Df9Ff322F2eBD847);\r\n    IERC20 constant internal hbtc = IERC20(0x0316EB71485b0Ab14103307bf65a021042c6d380);\r\n    IERC20 constant internal sbtc = IERC20(0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6);\r\n\r\n    IKyberNetworkProxy constant internal kyberNetworkProxy = IKyberNetworkProxy(0x9AAb3f75489902f3a48495025729a0AF77d4b11e);\r\n    IKyberStorage constant internal kyberStorage = IKyberStorage(0xC8fb12402cB16970F3C5F4b48Ff68Eb9D1289301);\r\n    IKyberHintHandler constant internal kyberHintHandler = IKyberHintHandler(0xa1C0Fa73c39CFBcC11ec9Eb1Afc665aba9996E2C);\r\n    IUniswapFactory constant internal uniswapFactory = IUniswapFactory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\r\n    IBancorContractRegistry constant internal bancorContractRegistry = IBancorContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\r\n    IBancorNetworkPathFinder constant internal bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\r\n    //IBancorConverterRegistry constant internal bancorConverterRegistry = IBancorConverterRegistry(0xf6E2D7F616B67E46D708e4410746E9AAb3a4C518);\r\n    IBancorFinder constant internal bancorFinder = IBancorFinder(0x2B344e14dc2641D11D338C053C908c7A7D4c30B9);\r\n    IOasisExchange constant internal oasisExchange = IOasisExchange(0x794e6e91555438aFc3ccF1c5076A74F42133d08D);\r\n    ICurve constant internal curveCompound = ICurve(0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56);\r\n    ICurve constant internal curveUSDT = ICurve(0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C);\r\n    ICurve constant internal curveY = ICurve(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\r\n    ICurve constant internal curveBinance = ICurve(0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27);\r\n    ICurve constant internal curveSynthetix = ICurve(0xA5407eAE9Ba41422680e2e00537571bcC53efBfD);\r\n    ICurve constant internal curvePAX = ICurve(0x06364f10B501e868329afBc005b3492902d6C763);\r\n    ICurve constant internal curveRenBTC = ICurve(0x93054188d876f558f4a66B2EF1d97d16eDf0895B);\r\n    ICurve constant internal curveTBTC = ICurve(0x9726e9314eF1b96E45f40056bEd61A088897313E);\r\n    ICurve constant internal curveSBTC = ICurve(0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714);\r\n    IShell constant internal shell = IShell(0xA8253a440Be331dC4a7395B73948cCa6F19Dc97D);\r\n    IAaveLendingPool constant internal aave = IAaveLendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n    ICompound constant internal compound = ICompound(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n    ICompoundEther constant internal cETH = ICompoundEther(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n    IMooniswapRegistry constant internal mooniswapRegistry = IMooniswapRegistry(0xc12A7e093832E2d2267df225BAca60bD2B74C65F);\r\n    IUniswapV2Factory constant internal uniswapV2 = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IDForceSwap constant internal dforceSwap = IDForceSwap(0x03eF3f37856bD08eb47E2dE7ABc4Ddd2c19B60F2);\r\n    IMStable constant internal musd = IMStable(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);\r\n    IMassetValidationHelper constant internal musd_helper = IMassetValidationHelper(0xaBcC93c3be238884cc3309C19Afd128fAfC16911);\r\n    IBalancerRegistry constant internal balancerRegistry = IBalancerRegistry(0x65e67cbc342712DF67494ACEfc06fe951EE93982);\r\n    ICurveCalculator constant internal curveCalculator = ICurveCalculator(0xc1DB00a8E5Ef7bfa476395cdbcc98235477cDE4E);\r\n    ICurveRegistry constant internal curveRegistry = ICurveRegistry(0x7002B727Ef8F5571Cb5F9D70D13DBEEb4dFAe9d1);\r\n    ICompoundRegistry constant internal compoundRegistry = ICompoundRegistry(0xF451Dbd7Ba14BFa7B1B78A766D3Ed438F79EE1D1);\r\n    IAaveRegistry constant internal aaveRegistry = IAaveRegistry(0xEd8b133B7B88366E01Bb9E38305Ab11c26521494);\r\n    IBalancerHelper constant internal balancerHelper = IBalancerHelper(0xA961672E8Db773be387e775bc4937C678F3ddF9a);\r\n\r\n    int256 internal constant VERY_NEGATIVE_VALUE = -1e72;\r\n\r\n    function _findBestDistribution(\r\n        uint256 s,                // parts\r\n        int256[][] memory amounts // exchangesReturns\r\n    )\r\n        internal\r\n        pure\r\n        returns(\r\n            int256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        uint256 n = amounts.length;\r\n\r\n        int256[][] memory answer = new int256[][](n); // int[n][s+1]\r\n        uint256[][] memory parent = new uint256[][](n); // int[n][s+1]\r\n\r\n        for (uint i = 0; i < n; i++) {\r\n            answer[i] = new int256[](s + 1);\r\n            parent[i] = new uint256[](s + 1);\r\n        }\r\n\r\n        for (uint j = 0; j <= s; j++) {\r\n            answer[0][j] = amounts[0][j];\r\n            for (uint i = 1; i < n; i++) {\r\n                answer[i][j] = -1e72;\r\n            }\r\n            parent[0][j] = 0;\r\n        }\r\n\r\n        for (uint i = 1; i < n; i++) {\r\n            for (uint j = 0; j <= s; j++) {\r\n                answer[i][j] = answer[i - 1][j];\r\n                parent[i][j] = j;\r\n\r\n                for (uint k = 1; k <= j; k++) {\r\n                    if (answer[i - 1][j - k] + amounts[i][k] > answer[i][j]) {\r\n                        answer[i][j] = answer[i - 1][j - k] + amounts[i][k];\r\n                        parent[i][j] = j - k;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        distribution = new uint256[](DEXES_COUNT);\r\n\r\n        uint256 partsLeft = s;\r\n        for (uint curExchange = n - 1; partsLeft > 0; curExchange--) {\r\n            distribution[curExchange] = partsLeft - parent[curExchange][partsLeft];\r\n            partsLeft = parent[curExchange][partsLeft];\r\n        }\r\n\r\n        returnAmount = (answer[n - 1][s] == VERY_NEGATIVE_VALUE) ? 0 : answer[n - 1][s];\r\n    }\r\n\r\n    function _kyberReserveIdByTokens(\r\n        IERC20 fromToken,\r\n        IERC20 destToken\r\n    ) internal view returns(bytes32) {\r\n        if (!fromToken.isETH() && !destToken.isETH()) {\r\n            return 0;\r\n        }\r\n\r\n        bytes32[] memory reserveIds = kyberStorage.getReserveIdsPerTokenSrc(\r\n            fromToken.isETH() ? destToken : fromToken\r\n        );\r\n\r\n        for (uint i = 0; i < reserveIds.length; i++) {\r\n            if ((uint256(reserveIds[i]) >> 248) != 0xBB && // Bridge\r\n                reserveIds[i] != 0xff4b796265722046707200000000000000000000000000000000000000000000 && // Reserve 1\r\n                reserveIds[i] != 0xffabcd0000000000000000000000000000000000000000000000000000000000 && // Reserve 2\r\n                reserveIds[i] != 0xff4f6e65426974205175616e7400000000000000000000000000000000000000)   // Reserve 3\r\n            {\r\n                return reserveIds[i];\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _scaleDestTokenEthPriceTimesGasPrice(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    ) internal view returns(uint256) {\r\n        if (fromToken == destToken) {\r\n            return destTokenEthPriceTimesGasPrice;\r\n        }\r\n\r\n        uint256 mul = _cheapGetPrice(ETH_ADDRESS, destToken, 0.01 ether);\r\n        uint256 div = _cheapGetPrice(ETH_ADDRESS, fromToken, 0.01 ether);\r\n        if (div > 0) {\r\n            return destTokenEthPriceTimesGasPrice.mul(mul).div(div);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function _cheapGetPrice(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal view returns(uint256 returnAmount) {\r\n        (returnAmount,,) = this.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            1,\r\n            FLAG_DISABLE_SPLIT_RECALCULATION |\r\n            FLAG_DISABLE_ALL_SPLIT_SOURCES |\r\n            FLAG_DISABLE_UNISWAP_V2_ALL |\r\n            FLAG_DISABLE_UNISWAP,\r\n            0\r\n        );\r\n    }\r\n\r\n    function _linearInterpolation(\r\n        uint256 value,\r\n        uint256 parts\r\n    ) internal pure returns(uint256[] memory rets) {\r\n        rets = new uint256[](parts);\r\n        for (uint i = 0; i < parts; i++) {\r\n            rets[i] = value.mul(i + 1).div(parts);\r\n        }\r\n    }\r\n\r\n    function _tokensEqual(IERC20 tokenA, IERC20 tokenB) internal pure returns(bool) {\r\n        return ((tokenA.isETH() && tokenB.isETH()) || tokenA == tokenB);\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitViewWrapBase is IOneSplitView, OneSplitRoot {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = this.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _getExpectedReturnRespectingGasFloor(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _getExpectedReturnRespectingGasFloor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        internal\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n}\r\n\r\n\r\ncontract OneSplitView is IOneSplitView, OneSplitRoot {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        distribution = new uint256[](DEXES_COUNT);\r\n\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, distribution);\r\n        }\r\n\r\n        function(IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[DEXES_COUNT] memory reserves = _getAllReserves(flags);\r\n\r\n        int256[][] memory matrix = new int256[][](DEXES_COUNT);\r\n        uint256[DEXES_COUNT] memory gases;\r\n        bool atLeastOnePositive = false;\r\n        for (uint i = 0; i < DEXES_COUNT; i++) {\r\n            uint256[] memory rets;\r\n            (rets, gases[i]) = reserves[i](fromToken, destToken, amount, parts, flags);\r\n\r\n            // Prepend zero and sub gas\r\n            int256 gas = int256(gases[i].mul(destTokenEthPriceTimesGasPrice).div(1e18));\r\n            matrix[i] = new int256[](parts + 1);\r\n            for (uint j = 0; j < parts; j++) {\r\n                matrix[i][j + 1] = int256(rets[j]) - gas;\r\n                atLeastOnePositive = atLeastOnePositive || (matrix[i][j + 1] > 0);\r\n            }\r\n        }\r\n\r\n        if (!atLeastOnePositive) {\r\n            for (uint i = 0; i < DEXES_COUNT; i++) {\r\n                for (uint j = 1; j < parts + 1; j++) {\r\n                    if (matrix[i][j] == 0) {\r\n                        matrix[i][j] = VERY_NEGATIVE_VALUE;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        (, distribution) = _findBestDistribution(parts, matrix);\r\n\r\n        (returnAmount, estimateGasAmount) = _getReturnAndGasByDistribution(\r\n            Args({\r\n                fromToken: fromToken,\r\n                destToken: destToken,\r\n                amount: amount,\r\n                parts: parts,\r\n                flags: flags,\r\n                destTokenEthPriceTimesGasPrice: destTokenEthPriceTimesGasPrice,\r\n                distribution: distribution,\r\n                matrix: matrix,\r\n                gases: gases,\r\n                reserves: reserves\r\n            })\r\n        );\r\n        return (returnAmount, estimateGasAmount, distribution);\r\n    }\r\n\r\n    struct Args {\r\n        IERC20 fromToken;\r\n        IERC20 destToken;\r\n        uint256 amount;\r\n        uint256 parts;\r\n        uint256 flags;\r\n        uint256 destTokenEthPriceTimesGasPrice;\r\n        uint256[] distribution;\r\n        int256[][] matrix;\r\n        uint256[DEXES_COUNT] gases;\r\n        function(IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[DEXES_COUNT] reserves;\r\n    }\r\n\r\n    function _getReturnAndGasByDistribution(\r\n        Args memory args\r\n    ) internal view returns(uint256 returnAmount, uint256 estimateGasAmount) {\r\n        bool[DEXES_COUNT] memory exact = [\r\n            true,  // \"Uniswap\",\r\n            false, // \"Kyber\",\r\n            false, // \"Bancor\",\r\n            false, // \"Oasis\",\r\n            true,  // \"Curve Compound\",\r\n            true,  // \"Curve USDT\",\r\n            true,  // \"Curve Y\",\r\n            true,  // \"Curve Binance\",\r\n            true,  // \"Curve Synthetix\",\r\n            true,  // \"Uniswap Compound\",\r\n            true,  // \"Uniswap CHAI\",\r\n            true,  // \"Uniswap Aave\",\r\n            true,  // \"Mooniswap 1\",\r\n            true,  // \"Uniswap V2\",\r\n            true,  // \"Uniswap V2 (ETH)\",\r\n            true,  // \"Uniswap V2 (DAI)\",\r\n            true,  // \"Uniswap V2 (USDC)\",\r\n            true,  // \"Curve Pax\",\r\n            true,  // \"Curve RenBTC\",\r\n            true,  // \"Curve tBTC\",\r\n            true,  // \"Dforce XSwap\",\r\n            false, // \"Shell\",\r\n            true,  // \"mStable\",\r\n            true,  // \"Curve sBTC\"\r\n            true,  // \"Balancer 1\"\r\n            true,  // \"Balancer 2\"\r\n            true,  // \"Balancer 3\"\r\n            true,  // \"Kyber 1\"\r\n            true,  // \"Kyber 2\"\r\n            true,  // \"Kyber 3\"\r\n            true,  // \"Kyber 4\"\r\n            true,  // \"Mooniswap 2\"\r\n            true,  // \"Mooniswap 3\"\r\n            true   // \"Mooniswap 4\"\r\n        ];\r\n\r\n        for (uint i = 0; i < DEXES_COUNT; i++) {\r\n            if (args.distribution[i] > 0) {\r\n                if (args.distribution[i] == args.parts || exact[i] || args.flags.check(FLAG_DISABLE_SPLIT_RECALCULATION)) {\r\n                    estimateGasAmount = estimateGasAmount.add(args.gases[i]);\r\n                    int256 value = args.matrix[i][args.distribution[i]];\r\n                    returnAmount = returnAmount.add(uint256(\r\n                        (value == VERY_NEGATIVE_VALUE ? 0 : value) +\r\n                        int256(args.gases[i].mul(args.destTokenEthPriceTimesGasPrice).div(1e18))\r\n                    ));\r\n                }\r\n                else {\r\n                    (uint256[] memory rets, uint256 gas) = args.reserves[i](args.fromToken, args.destToken, args.amount.mul(args.distribution[i]).div(args.parts), 1, args.flags);\r\n                    estimateGasAmount = estimateGasAmount.add(gas);\r\n                    returnAmount = returnAmount.add(rets[0]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getAllReserves(uint256 flags)\r\n        internal\r\n        pure\r\n        returns(function(IERC20,IERC20,uint256,uint256,uint256) view returns(uint256[] memory, uint256)[DEXES_COUNT] memory)\r\n    {\r\n        bool invert = flags.check(FLAG_DISABLE_ALL_SPLIT_SOURCES);\r\n        return [\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_ALL | FLAG_DISABLE_UNISWAP)            ? _calculateNoReturn : calculateUniswap,\r\n            _calculateNoReturn, // invert != flags.check(FLAG_DISABLE_KYBER) ? _calculateNoReturn : calculateKyber,\r\n            invert != flags.check(FLAG_DISABLE_BANCOR)                                        ? _calculateNoReturn : calculateBancor,\r\n            invert != flags.check(FLAG_DISABLE_OASIS)                                         ? _calculateNoReturn : calculateOasis,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_COMPOUND)       ? _calculateNoReturn : calculateCurveCompound,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_USDT)           ? _calculateNoReturn : calculateCurveUSDT,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_Y)              ? _calculateNoReturn : calculateCurveY,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_BINANCE)        ? _calculateNoReturn : calculateCurveBinance,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_SYNTHETIX)      ? _calculateNoReturn : calculateCurveSynthetix,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_ALL | FLAG_DISABLE_UNISWAP_COMPOUND)   ? _calculateNoReturn : calculateUniswapCompound,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_ALL | FLAG_DISABLE_UNISWAP_CHAI)       ? _calculateNoReturn : calculateUniswapChai,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_ALL | FLAG_DISABLE_UNISWAP_AAVE)       ? _calculateNoReturn : calculateUniswapAave,\r\n            invert != flags.check(FLAG_DISABLE_MOONISWAP_ALL | FLAG_DISABLE_MOONISWAP)        ? _calculateNoReturn : calculateMooniswap,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_V2_ALL | FLAG_DISABLE_UNISWAP_V2)      ? _calculateNoReturn : calculateUniswapV2,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_V2_ALL | FLAG_DISABLE_UNISWAP_V2_ETH)  ? _calculateNoReturn : calculateUniswapV2ETH,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_V2_ALL | FLAG_DISABLE_UNISWAP_V2_DAI)  ? _calculateNoReturn : calculateUniswapV2DAI,\r\n            invert != flags.check(FLAG_DISABLE_UNISWAP_V2_ALL | FLAG_DISABLE_UNISWAP_V2_USDC) ? _calculateNoReturn : calculateUniswapV2USDC,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_PAX)            ? _calculateNoReturn : calculateCurvePAX,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_RENBTC)         ? _calculateNoReturn : calculateCurveRenBTC,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_TBTC)           ? _calculateNoReturn : calculateCurveTBTC,\r\n            invert != flags.check(FLAG_DISABLE_DFORCE_SWAP)                                   ? _calculateNoReturn : calculateDforceSwap,\r\n            invert != flags.check(FLAG_DISABLE_SHELL)                                         ? _calculateNoReturn : calculateShell,\r\n            invert != flags.check(FLAG_DISABLE_MSTABLE_MUSD)                                  ? _calculateNoReturn : calculateMStableMUSD,\r\n            invert != flags.check(FLAG_DISABLE_CURVE_ALL | FLAG_DISABLE_CURVE_SBTC)           ? _calculateNoReturn : calculateCurveSBTC,\r\n            invert != flags.check(FLAG_DISABLE_BALANCER_ALL | FLAG_DISABLE_BALANCER_1)        ? _calculateNoReturn : calculateBalancer1,\r\n            invert != flags.check(FLAG_DISABLE_BALANCER_ALL | FLAG_DISABLE_BALANCER_2)        ? _calculateNoReturn : calculateBalancer2,\r\n            invert != flags.check(FLAG_DISABLE_BALANCER_ALL | FLAG_DISABLE_BALANCER_3)        ? _calculateNoReturn : calculateBalancer3,\r\n            invert != flags.check(FLAG_DISABLE_KYBER_ALL | FLAG_DISABLE_KYBER_1)              ? _calculateNoReturn : calculateKyber1,\r\n            invert != flags.check(FLAG_DISABLE_KYBER_ALL | FLAG_DISABLE_KYBER_2)              ? _calculateNoReturn : calculateKyber2,\r\n            invert != flags.check(FLAG_DISABLE_KYBER_ALL | FLAG_DISABLE_KYBER_3)              ? _calculateNoReturn : calculateKyber3,\r\n            invert != flags.check(FLAG_DISABLE_KYBER_ALL | FLAG_DISABLE_KYBER_4)              ? _calculateNoReturn : calculateKyber4,\r\n            invert != flags.check(FLAG_DISABLE_MOONISWAP_ALL | FLAG_DISABLE_MOONISWAP_ETH)    ? _calculateNoReturn : calculateMooniswapOverETH,\r\n            invert != flags.check(FLAG_DISABLE_MOONISWAP_ALL | FLAG_DISABLE_MOONISWAP_DAI)    ? _calculateNoReturn : calculateMooniswapOverDAI,\r\n            invert != flags.check(FLAG_DISABLE_MOONISWAP_ALL | FLAG_DISABLE_MOONISWAP_USDC)   ? _calculateNoReturn : calculateMooniswapOverUSDC\r\n        ];\r\n    }\r\n\r\n    function _calculateNoGas(\r\n        IERC20 /*fromToken*/,\r\n        IERC20 /*destToken*/,\r\n        uint256 /*amount*/,\r\n        uint256 /*parts*/,\r\n        uint256 /*destTokenEthPriceTimesGasPrice*/,\r\n        uint256 /*flags*/,\r\n        uint256 /*destTokenEthPrice*/\r\n    ) internal view returns(uint256[] memory /*rets*/, uint256 /*gas*/) {\r\n        this;\r\n    }\r\n\r\n    // View Helpers\r\n\r\n    struct Balances {\r\n        uint256 src;\r\n        uint256 dst;\r\n    }\r\n\r\n    function _calculateBalancer(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 poolIndex\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        address[] memory pools = balancerRegistry.getBestPoolsWithLimit(\r\n            address(fromToken.isETH() ? weth : fromToken),\r\n            address(destToken.isETH() ? weth : destToken),\r\n            poolIndex + 1\r\n        );\r\n        if (poolIndex >= pools.length) {\r\n            return (rets, 0);\r\n        }\r\n\r\n        rets = balancerHelper.getReturns(\r\n            IBalancerPool(pools[poolIndex]),\r\n            fromToken,\r\n            destToken,\r\n            _linearInterpolation(amount, parts)\r\n        );\r\n        gas = 75_000 + (fromToken.isETH() || destToken.isETH() ? 0 : 65_000);\r\n    }\r\n\r\n    function calculateBalancer1(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateBalancer(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            0\r\n        );\r\n    }\r\n\r\n    function calculateBalancer2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateBalancer(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            1\r\n        );\r\n    }\r\n\r\n    function calculateBalancer3(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateBalancer(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            2\r\n        );\r\n    }\r\n\r\n    function calculateMStableMUSD(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = new uint256[](parts);\r\n\r\n        if ((fromToken != usdc && fromToken != dai && fromToken != usdt && fromToken != tusd) ||\r\n            (destToken != usdc && destToken != dai && destToken != usdt && destToken != tusd))\r\n        {\r\n            return (rets, 0);\r\n        }\r\n\r\n        for (uint i = 1; i <= parts; i *= 2) {\r\n            (bool success, bytes memory data) = address(musd).staticcall(abi.encodeWithSelector(\r\n                musd.getSwapOutput.selector,\r\n                fromToken,\r\n                destToken,\r\n                amount.mul(parts.div(i)).div(parts)\r\n            ));\r\n\r\n            if (success && data.length > 0) {\r\n                (,, uint256 maxRet) = abi.decode(data, (bool,string,uint256));\r\n                if (maxRet > 0) {\r\n                    for (uint j = 0; j < parts.div(i); j++) {\r\n                        rets[j] = maxRet.mul(j + 1).div(parts.div(i));\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            rets,\r\n            700_000\r\n        );\r\n    }\r\n\r\n    function _getCurvePoolInfo(\r\n        ICurve curve,\r\n        bool haveUnderlying\r\n    ) internal view returns(\r\n        uint256[8] memory balances,\r\n        uint256[8] memory precisions,\r\n        uint256[8] memory rates,\r\n        uint256 amp,\r\n        uint256 fee\r\n    ) {\r\n        uint256[8] memory underlying_balances;\r\n        uint256[8] memory decimals;\r\n        uint256[8] memory underlying_decimals;\r\n\r\n        (\r\n            balances,\r\n            underlying_balances,\r\n            decimals,\r\n            underlying_decimals,\r\n            /*address lp_token*/,\r\n            amp,\r\n            fee\r\n        ) = curveRegistry.get_pool_info(address(curve));\r\n\r\n        for (uint k = 0; k < 8 && balances[k] > 0; k++) {\r\n            precisions[k] = 10 ** (18 - (haveUnderlying ? underlying_decimals : decimals)[k]);\r\n            if (haveUnderlying) {\r\n                rates[k] = underlying_balances[k].mul(1e18).div(balances[k]);\r\n            } else {\r\n                rates[k] = 1e18;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _calculateCurveSelector(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        ICurve curve,\r\n        bool haveUnderlying,\r\n        IERC20[] memory tokens\r\n    ) internal view returns(uint256[] memory rets) {\r\n        rets = new uint256[](parts);\r\n\r\n        int128 i = 0;\r\n        int128 j = 0;\r\n        for (uint t = 0; t < tokens.length; t++) {\r\n            if (fromToken == tokens[t]) {\r\n                i = int128(t + 1);\r\n            }\r\n            if (destToken == tokens[t]) {\r\n                j = int128(t + 1);\r\n            }\r\n        }\r\n\r\n        if (i == 0 || j == 0) {\r\n            return rets;\r\n        }\r\n\r\n        bytes memory data = abi.encodePacked(\r\n            uint256(haveUnderlying ? 1 : 0),\r\n            uint256(i - 1),\r\n            uint256(j - 1),\r\n            _linearInterpolation100(amount, parts)\r\n        );\r\n\r\n        (\r\n            uint256[8] memory balances,\r\n            uint256[8] memory precisions,\r\n            uint256[8] memory rates,\r\n            uint256 amp,\r\n            uint256 fee\r\n        ) = _getCurvePoolInfo(curve, haveUnderlying);\r\n\r\n        bool success;\r\n        (success, data) = address(curveCalculator).staticcall(\r\n            abi.encodePacked(\r\n                abi.encodeWithSelector(\r\n                    curveCalculator.get_dy.selector,\r\n                    tokens.length,\r\n                    balances,\r\n                    amp,\r\n                    fee,\r\n                    rates,\r\n                    precisions\r\n                ),\r\n                data\r\n            )\r\n        );\r\n\r\n        if (!success || data.length == 0) {\r\n            return rets;\r\n        }\r\n\r\n        uint256[100] memory dy = abi.decode(data, (uint256[100]));\r\n        for (uint t = 0; t < parts; t++) {\r\n            rets[t] = dy[t];\r\n        }\r\n    }\r\n\r\n    function _linearInterpolation100(\r\n        uint256 value,\r\n        uint256 parts\r\n    ) internal pure returns(uint256[100] memory rets) {\r\n        for (uint i = 0; i < parts; i++) {\r\n            rets[i] = value.mul(i + 1).div(parts);\r\n        }\r\n    }\r\n\r\n    function calculateCurveCompound(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](2);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        return (_calculateCurveSelector(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            curveCompound,\r\n            true,\r\n            tokens\r\n        ), 720_000);\r\n    }\r\n\r\n    function calculateCurveUSDT(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](3);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        tokens[2] = usdt;\r\n        return (_calculateCurveSelector(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            curveUSDT,\r\n            true,\r\n            tokens\r\n        ), 720_000);\r\n    }\r\n\r\n    function calculateCurveY(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](4);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        tokens[2] = usdt;\r\n        tokens[3] = tusd;\r\n        return (_calculateCurveSelector(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            curveY,\r\n            true,\r\n            tokens\r\n        ), 1_400_000);\r\n    }\r\n\r\n    function calculateCurveBinance(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](4);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        tokens[2] = usdt;\r\n        tokens[3] = busd;\r\n        return (_calculateCurveSelector(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            curveBinance,\r\n            true,\r\n            tokens\r\n        ), 1_400_000);\r\n    }\r\n\r\n    function calculateCurveSynthetix(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](4);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        tokens[2] = usdt;\r\n        tokens[3] = susd;\r\n        return (_calculateCurveSelector(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            curveSynthetix,\r\n            true,\r\n            tokens\r\n        ), 200_000);\r\n    }\r\n\r\n    function calculateCurvePAX(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](4);\r\n        tokens[0] = dai;\r\n        tokens[1] = usdc;\r\n        tokens[2] = usdt;\r\n        tokens[3] = pax;\r\n        return (_calculateCurveSelector(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            curvePAX,\r\n            true,\r\n            tokens\r\n        ), 1_000_000);\r\n    }\r\n\r\n    function calculateCurveRenBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](2);\r\n        tokens[0] = renbtc;\r\n        tokens[1] = wbtc;\r\n        return (_calculateCurveSelector(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            curveRenBTC,\r\n            false,\r\n            tokens\r\n        ), 130_000);\r\n    }\r\n\r\n    function calculateCurveTBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](3);\r\n        tokens[0] = tbtc;\r\n        tokens[1] = wbtc;\r\n        tokens[2] = hbtc;\r\n        return (_calculateCurveSelector(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            curveTBTC,\r\n            false,\r\n            tokens\r\n        ), 145_000);\r\n    }\r\n\r\n    function calculateCurveSBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20[] memory tokens = new IERC20[](3);\r\n        tokens[0] = renbtc;\r\n        tokens[1] = wbtc;\r\n        tokens[2] = sbtc;\r\n        return (_calculateCurveSelector(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            curveSBTC,\r\n            false,\r\n            tokens\r\n        ), 150_000);\r\n    }\r\n\r\n    function calculateShell(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        (bool success, bytes memory data) = address(shell).staticcall(abi.encodeWithSelector(\r\n            shell.viewOriginTrade.selector,\r\n            fromToken,\r\n            destToken,\r\n            amount\r\n        ));\r\n\r\n        if (!success || data.length == 0) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        uint256 maxRet = abi.decode(data, (uint256));\r\n        return (_linearInterpolation(maxRet, parts), 300_000);\r\n    }\r\n\r\n    function calculateDforceSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        (bool success, bytes memory data) = address(dforceSwap).staticcall(\r\n            abi.encodeWithSelector(\r\n                dforceSwap.getAmountByInput.selector,\r\n                fromToken,\r\n                destToken,\r\n                amount\r\n            )\r\n        );\r\n        if (!success || data.length == 0) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        uint256 maxRet = abi.decode(data, (uint256));\r\n        uint256 available = destToken.universalBalanceOf(address(dforceSwap));\r\n        if (maxRet > available) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        return (_linearInterpolation(maxRet, parts), 160_000);\r\n    }\r\n\r\n    function _calculateUniswapFormula(uint256 fromBalance, uint256 toBalance, uint256 amount) internal pure returns(uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n        return amount.mul(toBalance).mul(997).div(\r\n            fromBalance.mul(1000).add(amount.mul(997))\r\n        );\r\n    }\r\n\r\n    function _calculateUniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256[] memory amounts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = amounts;\r\n\r\n        if (!fromToken.isETH()) {\r\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(fromToken);\r\n            if (fromExchange == IUniswapExchange(0)) {\r\n                return (new uint256[](rets.length), 0);\r\n            }\r\n\r\n            uint256 fromTokenBalance = fromToken.universalBalanceOf(address(fromExchange));\r\n            uint256 fromEtherBalance = address(fromExchange).balance;\r\n\r\n            for (uint i = 0; i < rets.length; i++) {\r\n                rets[i] = _calculateUniswapFormula(fromTokenBalance, fromEtherBalance, rets[i]);\r\n            }\r\n        }\r\n\r\n        if (!destToken.isETH()) {\r\n            IUniswapExchange toExchange = uniswapFactory.getExchange(destToken);\r\n            if (toExchange == IUniswapExchange(0)) {\r\n                return (new uint256[](rets.length), 0);\r\n            }\r\n\r\n            uint256 toEtherBalance = address(toExchange).balance;\r\n            uint256 toTokenBalance = destToken.universalBalanceOf(address(toExchange));\r\n\r\n            for (uint i = 0; i < rets.length; i++) {\r\n                rets[i] = _calculateUniswapFormula(toEtherBalance, toTokenBalance, rets[i]);\r\n            }\r\n        }\r\n\r\n        return (rets, fromToken.isETH() || destToken.isETH() ? 60_000 : 100_000);\r\n    }\r\n\r\n    function calculateUniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateUniswap(\r\n            fromToken,\r\n            destToken,\r\n            _linearInterpolation(amount, parts),\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _calculateUniswapWrapped(\r\n        IERC20 fromToken,\r\n        IERC20 midToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 midTokenPrice,\r\n        uint256 flags,\r\n        uint256 gas1,\r\n        uint256 gas2\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (!fromToken.isETH() && destToken.isETH()) {\r\n            (rets, gas) = _calculateUniswap(\r\n                midToken,\r\n                destToken,\r\n                _linearInterpolation(amount.mul(1e18).div(midTokenPrice), parts),\r\n                flags\r\n            );\r\n            return (rets, gas + gas1);\r\n        }\r\n        else if (fromToken.isETH() && !destToken.isETH()) {\r\n            (rets, gas) = _calculateUniswap(\r\n                fromToken,\r\n                midToken,\r\n                _linearInterpolation(amount, parts),\r\n                flags\r\n            );\r\n\r\n            for (uint i = 0; i < parts; i++) {\r\n                rets[i] = rets[i].mul(midTokenPrice).div(1e18);\r\n            }\r\n            return (rets, gas + gas2);\r\n        }\r\n\r\n        return (new uint256[](parts), 0);\r\n    }\r\n\r\n    function calculateUniswapCompound(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20 midPreToken;\r\n        if (!fromToken.isETH() && destToken.isETH()) {\r\n            midPreToken = fromToken;\r\n        }\r\n        else if (!destToken.isETH() && fromToken.isETH()) {\r\n            midPreToken = destToken;\r\n        }\r\n\r\n        if (!midPreToken.isETH()) {\r\n            ICompoundToken midToken = compoundRegistry.cTokenByToken(midPreToken);\r\n            if (midToken != ICompoundToken(0)) {\r\n                return _calculateUniswapWrapped(\r\n                    fromToken,\r\n                    midToken,\r\n                    destToken,\r\n                    amount,\r\n                    parts,\r\n                    midToken.exchangeRateStored(),\r\n                    flags,\r\n                    200_000,\r\n                    200_000\r\n                );\r\n            }\r\n        }\r\n\r\n        return (new uint256[](parts), 0);\r\n    }\r\n\r\n    function calculateUniswapChai(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken == dai && destToken.isETH() ||\r\n            fromToken.isETH() && destToken == dai)\r\n        {\r\n            return _calculateUniswapWrapped(\r\n                fromToken,\r\n                chai,\r\n                destToken,\r\n                amount,\r\n                parts,\r\n                chai.chaiPrice(),\r\n                flags,\r\n                180_000,\r\n                160_000\r\n            );\r\n        }\r\n\r\n        return (new uint256[](parts), 0);\r\n    }\r\n\r\n    function calculateUniswapAave(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        IERC20 midPreToken;\r\n        if (!fromToken.isETH() && destToken.isETH()) {\r\n            midPreToken = fromToken;\r\n        }\r\n        else if (!destToken.isETH() && fromToken.isETH()) {\r\n            midPreToken = destToken;\r\n        }\r\n\r\n        if (!midPreToken.isETH()) {\r\n            IAaveToken midToken = aaveRegistry.aTokenByToken(midPreToken);\r\n            if (midToken != IAaveToken(0)) {\r\n                return _calculateUniswapWrapped(\r\n                    fromToken,\r\n                    midToken,\r\n                    destToken,\r\n                    amount,\r\n                    parts,\r\n                    1e18,\r\n                    flags,\r\n                    310_000,\r\n                    670_000\r\n                );\r\n            }\r\n        }\r\n\r\n        return (new uint256[](parts), 0);\r\n    }\r\n\r\n    function calculateKyber1(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateKyber(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0xff4b796265722046707200000000000000000000000000000000000000000000 // 0x63825c174ab367968EC60f061753D3bbD36A0D8F\r\n        );\r\n    }\r\n\r\n    function calculateKyber2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateKyber(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0xffabcd0000000000000000000000000000000000000000000000000000000000 // 0x7a3370075a54B187d7bD5DceBf0ff2B5552d4F7D\r\n        );\r\n    }\r\n\r\n    function calculateKyber3(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateKyber(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0xff4f6e65426974205175616e7400000000000000000000000000000000000000 // 0x4f32BbE8dFc9efD54345Fc936f9fEF1048746fCF\r\n        );\r\n    }\r\n\r\n    function calculateKyber4(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        bytes32 reserveId = _kyberReserveIdByTokens(fromToken, destToken);\r\n        if (reserveId == 0) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        return _calculateKyber(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            reserveId\r\n        );\r\n    }\r\n\r\n    function _kyberGetRate(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/,\r\n        bytes memory hint\r\n    ) private view returns(uint256) {\r\n        (, bytes memory data) = address(kyberNetworkProxy).staticcall(\r\n            abi.encodeWithSelector(\r\n                kyberNetworkProxy.getExpectedRateAfterFee.selector,\r\n                fromToken,\r\n                destToken,\r\n                amount,\r\n                10,\r\n                hint\r\n            )\r\n        );\r\n\r\n        return (data.length == 32) ? abi.decode(data, (uint256)) : 0;\r\n    }\r\n\r\n    function _calculateKyber(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        bytes32 reserveId\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        bytes memory fromHint;\r\n        bytes memory destHint;\r\n        {\r\n            bytes32[] memory reserveIds = new bytes32[](1);\r\n            reserveIds[0] = reserveId;\r\n\r\n            (bool success, bytes memory data) = address(kyberHintHandler).staticcall(\r\n                abi.encodeWithSelector(\r\n                    kyberHintHandler.buildTokenToEthHint.selector,\r\n                    fromToken,\r\n                    IKyberHintHandler.TradeType.MaskIn,\r\n                    reserveIds,\r\n                    new uint256[](0)\r\n                )\r\n            );\r\n            fromHint = success ? abi.decode(data, (bytes)) : bytes(\"\");\r\n\r\n            (success, data) = address(kyberHintHandler).staticcall(\r\n                abi.encodeWithSelector(\r\n                    kyberHintHandler.buildEthToTokenHint.selector,\r\n                    destToken,\r\n                    IKyberHintHandler.TradeType.MaskIn,\r\n                    reserveIds,\r\n                    new uint256[](0)\r\n                )\r\n            );\r\n            destHint = success ? abi.decode(data, (bytes)) : bytes(\"\");\r\n        }\r\n\r\n        uint256 fromTokenDecimals = 10 ** IERC20(fromToken).universalDecimals();\r\n        uint256 destTokenDecimals = 10 ** IERC20(destToken).universalDecimals();\r\n        rets = new uint256[](parts);\r\n        for (uint i = 0; i < parts; i++) {\r\n            if (i > 0 && rets[i - 1] == 0) {\r\n                break;\r\n            }\r\n            rets[i] = amount.mul(i + 1).div(parts);\r\n\r\n            if (!fromToken.isETH()) {\r\n                if (fromHint.length == 0) {\r\n                    rets[i] = 0;\r\n                    break;\r\n                }\r\n                uint256 rate = _kyberGetRate(\r\n                    fromToken,\r\n                    ETH_ADDRESS,\r\n                    rets[i],\r\n                    flags,\r\n                    fromHint\r\n                );\r\n                rets[i] = rate.mul(rets[i]).div(fromTokenDecimals);\r\n            }\r\n\r\n            if (!destToken.isETH() && rets[i] > 0) {\r\n                if (destHint.length == 0) {\r\n                    rets[i] = 0;\r\n                    break;\r\n                }\r\n                uint256 rate = _kyberGetRate(\r\n                    ETH_ADDRESS,\r\n                    destToken,\r\n                    rets[i],\r\n                    10,\r\n                    destHint\r\n                );\r\n                rets[i] = rate.mul(rets[i]).mul(destTokenDecimals).div(1e36);\r\n            }\r\n        }\r\n\r\n        return (rets, 100_000);\r\n    }\r\n\r\n    function calculateBancor(\r\n        IERC20 /*fromToken*/,\r\n        IERC20 /*destToken*/,\r\n        uint256 /*amount*/,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return (new uint256[](parts), 0);\r\n        // IBancorNetwork bancorNetwork = IBancorNetwork(bancorContractRegistry.addressOf(\"BancorNetwork\"));\r\n\r\n        // address[] memory path = bancorFinder.buildBancorPath(\r\n        //     fromToken.isETH() ? bancorEtherToken : fromToken,\r\n        //     destToken.isETH() ? bancorEtherToken : destToken\r\n        // );\r\n\r\n        // rets = _linearInterpolation(amount, parts);\r\n        // for (uint i = 0; i < parts; i++) {\r\n        //     (bool success, bytes memory data) = address(bancorNetwork).staticcall.gas(500000)(\r\n        //         abi.encodeWithSelector(\r\n        //             bancorNetwork.getReturnByPath.selector,\r\n        //             path,\r\n        //             rets[i]\r\n        //         )\r\n        //     );\r\n        //     if (!success || data.length == 0) {\r\n        //         for (; i < parts; i++) {\r\n        //             rets[i] = 0;\r\n        //         }\r\n        //         break;\r\n        //     } else {\r\n        //         (uint256 ret,) = abi.decode(data, (uint256,uint256));\r\n        //         rets[i] = ret;\r\n        //     }\r\n        // }\r\n\r\n        // return (rets, path.length.mul(150_000));\r\n    }\r\n\r\n    function calculateOasis(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = _linearInterpolation(amount, parts);\r\n        for (uint i = 0; i < parts; i++) {\r\n            (bool success, bytes memory data) = address(oasisExchange).staticcall.gas(500000)(\r\n                abi.encodeWithSelector(\r\n                    oasisExchange.getBuyAmount.selector,\r\n                    destToken.isETH() ? weth : destToken,\r\n                    fromToken.isETH() ? weth : fromToken,\r\n                    rets[i]\r\n                )\r\n            );\r\n\r\n            if (!success || data.length == 0) {\r\n                for (; i < parts; i++) {\r\n                    rets[i] = 0;\r\n                }\r\n                break;\r\n            } else {\r\n                rets[i] = abi.decode(data, (uint256));\r\n            }\r\n        }\r\n\r\n        return (rets, 500_000);\r\n    }\r\n\r\n    function calculateMooniswapMany(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256[] memory amounts\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = new uint256[](amounts.length);\r\n\r\n        IMooniswap mooniswap = mooniswapRegistry.pools(\r\n            fromToken.isETH() ? ZERO_ADDRESS : fromToken,\r\n            destToken.isETH() ? ZERO_ADDRESS : destToken\r\n        );\r\n        if (mooniswap == IMooniswap(0)) {\r\n            return (rets, 0);\r\n        }\r\n\r\n        uint256 fee = mooniswap.fee();\r\n        uint256 fromBalance = mooniswap.getBalanceForAddition(fromToken.isETH() ? ZERO_ADDRESS : fromToken);\r\n        uint256 destBalance = mooniswap.getBalanceForRemoval(destToken.isETH() ? ZERO_ADDRESS : destToken);\r\n        if (fromBalance == 0 || destBalance == 0) {\r\n            return (rets, 0);\r\n        }\r\n\r\n        for (uint i = 0; i < amounts.length; i++) {\r\n            uint256 amount = amounts[i].sub(amounts[i].mul(fee).div(1e18));\r\n            rets[i] = amount.mul(destBalance).div(\r\n                fromBalance.add(amount)\r\n            );\r\n        }\r\n\r\n        return (rets, (fromToken.isETH() || destToken.isETH()) ? 80_000 : 110_000);\r\n    }\r\n\r\n    function calculateMooniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return calculateMooniswapMany(\r\n            fromToken,\r\n            destToken,\r\n            _linearInterpolation(amount, parts)\r\n        );\r\n    }\r\n\r\n    function calculateMooniswapOverETH(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken.isETH() || destToken.isETH()) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        (uint256[] memory results, uint256 gas1) = calculateMooniswap(fromToken, ZERO_ADDRESS, amount, parts, flags);\r\n        (rets, gas) = calculateMooniswapMany(ZERO_ADDRESS, destToken, results);\r\n        gas = gas.add(gas1);\r\n    }\r\n\r\n    function calculateMooniswapOverDAI(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken == dai || destToken == dai) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        (uint256[] memory results, uint256 gas1) = calculateMooniswap(fromToken, dai, amount, parts, flags);\r\n        (rets, gas) = calculateMooniswapMany(dai, destToken, results);\r\n        gas = gas.add(gas1);\r\n    }\r\n\r\n    function calculateMooniswapOverUSDC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken == usdc || destToken == usdc) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        (uint256[] memory results, uint256 gas1) = calculateMooniswap(fromToken, usdc, amount, parts, flags);\r\n        (rets, gas) = calculateMooniswapMany(usdc, destToken, results);\r\n        gas = gas.add(gas1);\r\n    }\r\n\r\n    function calculateUniswapV2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        return _calculateUniswapV2(\r\n            fromToken,\r\n            destToken,\r\n            _linearInterpolation(amount, parts),\r\n            flags\r\n        );\r\n    }\r\n\r\n    function calculateUniswapV2ETH(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken.isETH() || fromToken == weth || destToken.isETH() || destToken == weth) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        return _calculateUniswapV2OverMidToken(\r\n            fromToken,\r\n            weth,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function calculateUniswapV2DAI(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken == dai || destToken == dai) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        return _calculateUniswapV2OverMidToken(\r\n            fromToken,\r\n            dai,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function calculateUniswapV2USDC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        if (fromToken == usdc || destToken == usdc) {\r\n            return (new uint256[](parts), 0);\r\n        }\r\n\r\n        return _calculateUniswapV2OverMidToken(\r\n            fromToken,\r\n            usdc,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _calculateUniswapV2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256[] memory amounts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = new uint256[](amounts.length);\r\n\r\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\r\n        IERC20 destTokenReal = destToken.isETH() ? weth : destToken;\r\n        IUniswapV2Exchange exchange = uniswapV2.getPair(fromTokenReal, destTokenReal);\r\n        if (exchange != IUniswapV2Exchange(0)) {\r\n            uint256 fromTokenBalance = fromTokenReal.universalBalanceOf(address(exchange));\r\n            uint256 destTokenBalance = destTokenReal.universalBalanceOf(address(exchange));\r\n            for (uint i = 0; i < amounts.length; i++) {\r\n                rets[i] = _calculateUniswapFormula(fromTokenBalance, destTokenBalance, amounts[i]);\r\n            }\r\n            return (rets, 50_000);\r\n        }\r\n    }\r\n\r\n    function _calculateUniswapV2OverMidToken(\r\n        IERC20 fromToken,\r\n        IERC20 midToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        rets = _linearInterpolation(amount, parts);\r\n\r\n        uint256 gas1;\r\n        uint256 gas2;\r\n        (rets, gas1) = _calculateUniswapV2(fromToken, midToken, rets, flags);\r\n        (rets, gas2) = _calculateUniswapV2(midToken, destToken, rets, flags);\r\n        return (rets, gas1 + gas2);\r\n    }\r\n\r\n    function _calculateNoReturn(\r\n        IERC20 /*fromToken*/,\r\n        IERC20 /*destToken*/,\r\n        uint256 /*amount*/,\r\n        uint256 parts,\r\n        uint256 /*flags*/\r\n    ) internal view returns(uint256[] memory rets, uint256 gas) {\r\n        this;\r\n        return (new uint256[](parts), 0);\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitBaseWrap is IOneSplit, OneSplitRoot {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    ) internal {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        _swapFloor(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _swapFloor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 /*flags*/ // See constants in IOneSplit.sol\r\n    ) internal;\r\n}\r\n\r\n\r\ncontract OneSplit is IOneSplit, OneSplitRoot {\r\n    IOneSplitView public oneSplitView;\r\n\r\n    constructor(IOneSplitView _oneSplitView) public {\r\n        oneSplitView = _oneSplitView;\r\n    }\r\n\r\n    function() external payable {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(msg.sender != tx.origin);\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return oneSplitView.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags  // See constants in IOneSplit.sol\r\n    ) public payable returns(uint256 returnAmount) {\r\n        if (fromToken == destToken) {\r\n            return amount;\r\n        }\r\n\r\n        function(IERC20,IERC20,uint256,uint256)[DEXES_COUNT] memory reserves = [\r\n            _swapOnUniswap,\r\n            _swapOnNowhere,\r\n            _swapOnBancor,\r\n            _swapOnOasis,\r\n            _swapOnCurveCompound,\r\n            _swapOnCurveUSDT,\r\n            _swapOnCurveY,\r\n            _swapOnCurveBinance,\r\n            _swapOnCurveSynthetix,\r\n            _swapOnUniswapCompound,\r\n            _swapOnUniswapChai,\r\n            _swapOnUniswapAave,\r\n            _swapOnMooniswap,\r\n            _swapOnUniswapV2,\r\n            _swapOnUniswapV2ETH,\r\n            _swapOnUniswapV2DAI,\r\n            _swapOnUniswapV2USDC,\r\n            _swapOnCurvePAX,\r\n            _swapOnCurveRenBTC,\r\n            _swapOnCurveTBTC,\r\n            _swapOnDforceSwap,\r\n            _swapOnShell,\r\n            _swapOnMStableMUSD,\r\n            _swapOnCurveSBTC,\r\n            _swapOnBalancer1,\r\n            _swapOnBalancer2,\r\n            _swapOnBalancer3,\r\n            _swapOnKyber1,\r\n            _swapOnKyber2,\r\n            _swapOnKyber3,\r\n            _swapOnKyber4,\r\n            _swapOnMooniswapETH,\r\n            _swapOnMooniswapDAI,\r\n            _swapOnMooniswapUSDC\r\n        ];\r\n\r\n        require(distribution.length <= reserves.length, \"OneSplit: Distribution array should not exceed reserves array size\");\r\n\r\n        uint256 parts = 0;\r\n        uint256 lastNonZeroIndex = 0;\r\n        for (uint i = 0; i < distribution.length; i++) {\r\n            if (distribution[i] > 0) {\r\n                parts = parts.add(distribution[i]);\r\n                lastNonZeroIndex = i;\r\n            }\r\n        }\r\n\r\n        if (parts == 0) {\r\n            if (fromToken.isETH()) {\r\n                msg.sender.transfer(msg.value);\r\n                return msg.value;\r\n            }\r\n            return amount;\r\n        }\r\n\r\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\r\n        uint256 remainingAmount = fromToken.universalBalanceOf(address(this));\r\n\r\n        for (uint i = 0; i < distribution.length; i++) {\r\n            if (distribution[i] == 0) {\r\n                continue;\r\n            }\r\n\r\n            uint256 swapAmount = amount.mul(distribution[i]).div(parts);\r\n            if (i == lastNonZeroIndex) {\r\n                swapAmount = remainingAmount;\r\n            }\r\n            remainingAmount -= swapAmount;\r\n            reserves[i](fromToken, destToken, swapAmount, flags);\r\n        }\r\n\r\n        returnAmount = destToken.universalBalanceOf(address(this));\r\n        require(returnAmount >= minReturn, \"OneSplit: Return amount was not enough\");\r\n        destToken.universalTransfer(msg.sender, returnAmount);\r\n        fromToken.universalTransfer(msg.sender, fromToken.universalBalanceOf(address(this)));\r\n    }\r\n\r\n    // Swap helpers\r\n\r\n    function _swapOnCurveCompound(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        int128 i = (fromToken == dai ? 1 : 0) + (fromToken == usdc ? 2 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) + (destToken == usdc ? 2 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveCompound), amount);\r\n        curveCompound.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveUSDT(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveUSDT), amount);\r\n        curveUSDT.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveY(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == tusd ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == tusd ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveY), amount);\r\n        curveY.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveBinance(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == busd ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == busd ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveBinance), amount);\r\n        curveBinance.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveSynthetix(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == susd ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == susd ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveSynthetix), amount);\r\n        curveSynthetix.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurvePAX(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == pax ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == pax ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curvePAX), amount);\r\n        curvePAX.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnShell(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        fromToken.universalApprove(address(shell), amount);\r\n        shell.swapByOrigin(\r\n            address(fromToken),\r\n            address(destToken),\r\n            amount,\r\n            0,\r\n            now + 50\r\n        );\r\n    }\r\n\r\n    function _swapOnMStableMUSD(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        fromToken.universalApprove(address(musd), amount);\r\n        musd.swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    function _swapOnCurveRenBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        int128 i = (fromToken == renbtc ? 1 : 0) +\r\n            (fromToken == wbtc ? 2 : 0);\r\n        int128 j = (destToken == renbtc ? 1 : 0) +\r\n            (destToken == wbtc ? 2 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveRenBTC), amount);\r\n        curveRenBTC.exchange(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveTBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        int128 i = (fromToken == tbtc ? 1 : 0) +\r\n            (fromToken == wbtc ? 2 : 0) +\r\n            (fromToken == hbtc ? 3 : 0);\r\n        int128 j = (destToken == tbtc ? 1 : 0) +\r\n            (destToken == wbtc ? 2 : 0) +\r\n            (destToken == hbtc ? 3 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveTBTC), amount);\r\n        curveTBTC.exchange(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveSBTC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        int128 i = (fromToken == renbtc ? 1 : 0) +\r\n            (fromToken == wbtc ? 2 : 0) +\r\n            (fromToken == sbtc ? 3 : 0);\r\n        int128 j = (destToken == renbtc ? 1 : 0) +\r\n            (destToken == wbtc ? 2 : 0) +\r\n            (destToken == sbtc ? 3 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return;\r\n        }\r\n\r\n        fromToken.universalApprove(address(curveSBTC), amount);\r\n        curveSBTC.exchange(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnDforceSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        fromToken.universalApprove(address(dforceSwap), amount);\r\n        dforceSwap.swap(fromToken, destToken, amount);\r\n    }\r\n\r\n    function _swapOnUniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        uint256 returnAmount = amount;\r\n\r\n        if (!fromToken.isETH()) {\r\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(fromToken);\r\n            if (fromExchange != IUniswapExchange(0)) {\r\n                fromToken.universalApprove(address(fromExchange), returnAmount);\r\n                returnAmount = fromExchange.tokenToEthSwapInput(returnAmount, 1, now);\r\n            }\r\n        }\r\n\r\n        if (!destToken.isETH()) {\r\n            IUniswapExchange toExchange = uniswapFactory.getExchange(destToken);\r\n            if (toExchange != IUniswapExchange(0)) {\r\n                returnAmount = toExchange.ethToTokenSwapInput.value(returnAmount)(1, now);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapOnUniswapCompound(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        if (!fromToken.isETH()) {\r\n            ICompoundToken fromCompound = compoundRegistry.cTokenByToken(fromToken);\r\n            fromToken.universalApprove(address(fromCompound), amount);\r\n            fromCompound.mint(amount);\r\n            _swapOnUniswap(IERC20(fromCompound), destToken, IERC20(fromCompound).universalBalanceOf(address(this)), flags);\r\n            return;\r\n        }\r\n\r\n        if (!destToken.isETH()) {\r\n            ICompoundToken toCompound = compoundRegistry.cTokenByToken(destToken);\r\n            _swapOnUniswap(fromToken, IERC20(toCompound), amount, flags);\r\n            toCompound.redeem(IERC20(toCompound).universalBalanceOf(address(this)));\r\n            destToken.universalBalanceOf(address(this));\r\n            return;\r\n        }\r\n    }\r\n\r\n    function _swapOnUniswapChai(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        if (fromToken == dai) {\r\n            fromToken.universalApprove(address(chai), amount);\r\n            chai.join(address(this), amount);\r\n            _swapOnUniswap(IERC20(chai), destToken, IERC20(chai).universalBalanceOf(address(this)), flags);\r\n            return;\r\n        }\r\n\r\n        if (destToken == dai) {\r\n            _swapOnUniswap(fromToken, IERC20(chai), amount, flags);\r\n            chai.exit(address(this), chai.balanceOf(address(this)));\r\n            return;\r\n        }\r\n    }\r\n\r\n    function _swapOnUniswapAave(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        if (!fromToken.isETH()) {\r\n            IAaveToken fromAave = aaveRegistry.aTokenByToken(fromToken);\r\n            fromToken.universalApprove(aave.core(), amount);\r\n            aave.deposit(fromToken, amount, 1101);\r\n            _swapOnUniswap(IERC20(fromAave), destToken, IERC20(fromAave).universalBalanceOf(address(this)), flags);\r\n            return;\r\n        }\r\n\r\n        if (!destToken.isETH()) {\r\n            IAaveToken toAave = aaveRegistry.aTokenByToken(destToken);\r\n            _swapOnUniswap(fromToken, IERC20(toAave), amount, flags);\r\n            toAave.redeem(toAave.balanceOf(address(this)));\r\n            return;\r\n        }\r\n    }\r\n\r\n    function _swapOnMooniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        IMooniswap mooniswap = mooniswapRegistry.pools(\r\n            fromToken.isETH() ? ZERO_ADDRESS : fromToken,\r\n            destToken.isETH() ? ZERO_ADDRESS : destToken\r\n        );\r\n        fromToken.universalApprove(address(mooniswap), amount);\r\n        mooniswap.swap.value(fromToken.isETH() ? amount : 0)(\r\n            fromToken.isETH() ? ZERO_ADDRESS : fromToken,\r\n            destToken.isETH() ? ZERO_ADDRESS : destToken,\r\n            amount,\r\n            0,\r\n            0x4D37f28D2db99e8d35A6C725a5f1749A085850a3\r\n        );\r\n    }\r\n\r\n    function _swapOnMooniswapETH(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnMooniswap(fromToken, ZERO_ADDRESS, amount, flags);\r\n        _swapOnMooniswap(ZERO_ADDRESS, destToken, address(this).balance, flags);\r\n    }\r\n\r\n    function _swapOnMooniswapDAI(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnMooniswap(fromToken, dai, amount, flags);\r\n        _swapOnMooniswap(dai, destToken, dai.balanceOf(address(this)), flags);\r\n    }\r\n\r\n    function _swapOnMooniswapUSDC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnMooniswap(fromToken, usdc, amount, flags);\r\n        _swapOnMooniswap(usdc, destToken, usdc.balanceOf(address(this)), flags);\r\n    }\r\n\r\n    function _swapOnNowhere(\r\n        IERC20 /*fromToken*/,\r\n        IERC20 /*destToken*/,\r\n        uint256 /*amount*/,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        revert(\"This source was deprecated\");\r\n    }\r\n\r\n    function _swapOnKyber1(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnKyber(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            flags,\r\n            0xff4b796265722046707200000000000000000000000000000000000000000000\r\n        );\r\n    }\r\n\r\n    function _swapOnKyber2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnKyber(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            flags,\r\n            0xffabcd0000000000000000000000000000000000000000000000000000000000\r\n        );\r\n    }\r\n\r\n    function _swapOnKyber3(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnKyber(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            flags,\r\n            0xff4f6e65426974205175616e7400000000000000000000000000000000000000\r\n        );\r\n    }\r\n\r\n    function _swapOnKyber4(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnKyber(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            flags,\r\n            _kyberReserveIdByTokens(fromToken, destToken)\r\n        );\r\n    }\r\n\r\n    function _swapOnKyber(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/,\r\n        bytes32 reserveId\r\n    ) internal {\r\n        uint256 returnAmount = amount;\r\n\r\n        bytes32[] memory reserveIds = new bytes32[](1);\r\n        reserveIds[0] = reserveId;\r\n\r\n        if (!fromToken.isETH()) {\r\n            bytes memory fromHint = kyberHintHandler.buildTokenToEthHint(\r\n                fromToken,\r\n                IKyberHintHandler.TradeType.MaskIn,\r\n                reserveIds,\r\n                new uint256[](0)\r\n            );\r\n\r\n            fromToken.universalApprove(address(kyberNetworkProxy), amount);\r\n            returnAmount = kyberNetworkProxy.tradeWithHintAndFee(\r\n                fromToken,\r\n                returnAmount,\r\n                ETH_ADDRESS,\r\n                address(this),\r\n                uint256(-1),\r\n                0,\r\n                0x4D37f28D2db99e8d35A6C725a5f1749A085850a3,\r\n                10,\r\n                fromHint\r\n            );\r\n        }\r\n\r\n        if (!destToken.isETH()) {\r\n            bytes memory destHint = kyberHintHandler.buildEthToTokenHint(\r\n                destToken,\r\n                IKyberHintHandler.TradeType.MaskIn,\r\n                reserveIds,\r\n                new uint256[](0)\r\n            );\r\n\r\n            returnAmount = kyberNetworkProxy.tradeWithHintAndFee.value(returnAmount)(\r\n                ETH_ADDRESS,\r\n                returnAmount,\r\n                destToken,\r\n                address(this),\r\n                uint256(-1),\r\n                0,\r\n                0x4D37f28D2db99e8d35A6C725a5f1749A085850a3,\r\n                10,\r\n                destHint\r\n            );\r\n        }\r\n    }\r\n\r\n    function _swapOnBancor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        IBancorNetwork bancorNetwork = IBancorNetwork(bancorContractRegistry.addressOf(\"BancorNetwork\"));\r\n        address[] memory path = bancorNetworkPathFinder.generatePath(\r\n            fromToken.isETH() ? bancorEtherToken : fromToken,\r\n            destToken.isETH() ? bancorEtherToken : destToken\r\n        );\r\n        fromToken.universalApprove(address(bancorNetwork), amount);\r\n        bancorNetwork.convert.value(fromToken.isETH() ? amount : 0)(path, amount, 1);\r\n    }\r\n\r\n    function _swapOnOasis(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal {\r\n        if (fromToken.isETH()) {\r\n            weth.deposit.value(amount)();\r\n        }\r\n\r\n        IERC20 approveToken = fromToken.isETH() ? weth : fromToken;\r\n        approveToken.universalApprove(address(oasisExchange), amount);\r\n        oasisExchange.sellAllAmount(\r\n            fromToken.isETH() ? weth : fromToken,\r\n            amount,\r\n            destToken.isETH() ? weth : destToken,\r\n            1\r\n        );\r\n\r\n        if (destToken.isETH()) {\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function _swapOnUniswapV2Internal(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/\r\n    ) internal returns(uint256 returnAmount) {\r\n        if (fromToken.isETH()) {\r\n            weth.deposit.value(amount)();\r\n        }\r\n\r\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\r\n        IERC20 toTokenReal = destToken.isETH() ? weth : destToken;\r\n        IUniswapV2Exchange exchange = uniswapV2.getPair(fromTokenReal, toTokenReal);\r\n        returnAmount = exchange.getReturn(fromTokenReal, toTokenReal, amount);\r\n\r\n        fromTokenReal.universalTransfer(address(exchange), amount);\r\n        if (uint256(address(fromTokenReal)) < uint256(address(toTokenReal))) {\r\n            exchange.swap(0, returnAmount, address(this), \"\");\r\n        } else {\r\n            exchange.swap(returnAmount, 0, address(this), \"\");\r\n        }\r\n\r\n        if (destToken.isETH()) {\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function _swapOnUniswapV2OverMid(\r\n        IERC20 fromToken,\r\n        IERC20 midToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnUniswapV2Internal(\r\n            midToken,\r\n            destToken,\r\n            _swapOnUniswapV2Internal(\r\n                fromToken,\r\n                midToken,\r\n                amount,\r\n                flags\r\n            ),\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _swapOnUniswapV2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnUniswapV2Internal(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _swapOnUniswapV2ETH(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnUniswapV2OverMid(\r\n            fromToken,\r\n            weth,\r\n            destToken,\r\n            amount,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _swapOnUniswapV2DAI(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnUniswapV2OverMid(\r\n            fromToken,\r\n            dai,\r\n            destToken,\r\n            amount,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _swapOnUniswapV2USDC(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnUniswapV2OverMid(\r\n            fromToken,\r\n            usdc,\r\n            destToken,\r\n            amount,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _swapOnBalancerX(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*flags*/,\r\n        uint256 poolIndex\r\n    ) internal {\r\n        address[] memory pools = balancerRegistry.getBestPoolsWithLimit(\r\n            address(fromToken.isETH() ? weth : fromToken),\r\n            address(destToken.isETH() ? weth : destToken),\r\n            poolIndex + 1\r\n        );\r\n\r\n        if (fromToken.isETH()) {\r\n            weth.deposit.value(amount)();\r\n        }\r\n\r\n        (fromToken.isETH() ? weth : fromToken).universalApprove(pools[poolIndex], amount);\r\n        IBalancerPool(pools[poolIndex]).swapExactAmountIn(\r\n            fromToken.isETH() ? weth : fromToken,\r\n            amount,\r\n            destToken.isETH() ? weth : destToken,\r\n            0,\r\n            uint256(-1)\r\n        );\r\n\r\n        if (destToken.isETH()) {\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function _swapOnBalancer1(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnBalancerX(fromToken, destToken, amount, flags, 0);\r\n    }\r\n\r\n    function _swapOnBalancer2(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnBalancerX(fromToken, destToken, amount, flags, 1);\r\n    }\r\n\r\n    function _swapOnBalancer3(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 flags\r\n    ) internal {\r\n        _swapOnBalancerX(fromToken, destToken, amount, flags, 2);\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitCompound.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitCompoundView is OneSplitViewWrapBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _compoundGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _compoundGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_COMPOUND)) {\r\n            IERC20 underlying = compoundRegistry.tokenByCToken(ICompoundToken(address(fromToken)));\r\n            if (underlying != IERC20(0)) {\r\n                uint256 compoundRate = ICompoundToken(address(fromToken)).exchangeRateStored();\r\n                (returnAmount, estimateGasAmount, distribution) = _compoundGetExpectedReturn(\r\n                    underlying,\r\n                    destToken,\r\n                    amount.mul(compoundRate).div(1e18),\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 295_000, distribution);\r\n            }\r\n\r\n            underlying = compoundRegistry.tokenByCToken(ICompoundToken(address(destToken)));\r\n            if (underlying != IERC20(0)) {\r\n                uint256 _destTokenEthPriceTimesGasPrice = destTokenEthPriceTimesGasPrice;\r\n                uint256 compoundRate = ICompoundToken(address(destToken)).exchangeRateStored();\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    _destTokenEthPriceTimesGasPrice.mul(compoundRate).div(1e18)\r\n                );\r\n                return (returnAmount.mul(1e18).div(compoundRate), estimateGasAmount + 430_000, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitCompound is OneSplitBaseWrap {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _compoundSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _compoundSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_COMPOUND)) {\r\n            IERC20 underlying = compoundRegistry.tokenByCToken(ICompoundToken(address(fromToken)));\r\n            if (underlying != IERC20(0)) {\r\n                ICompoundToken(address(fromToken)).redeem(amount);\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                return _compoundSwap(\r\n                    underlying,\r\n                    destToken,\r\n                    underlyingAmount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            underlying = compoundRegistry.tokenByCToken(ICompoundToken(address(destToken)));\r\n            if (underlying != IERC20(0)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                if (underlying.isETH()) {\r\n                    cETH.mint.value(underlyingAmount)();\r\n                } else {\r\n                    underlying.universalApprove(address(destToken), underlyingAmount);\r\n                    ICompoundToken(address(destToken)).mint(underlyingAmount);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IFulcrum.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IFulcrumToken is IERC20 {\r\n    function tokenPrice() external view returns (uint256);\r\n\r\n    function loanTokenAddress() external view returns (address);\r\n\r\n    function mintWithEther(address receiver) external payable returns (uint256 mintAmount);\r\n\r\n    function mint(address receiver, uint256 depositAmount) external returns (uint256 mintAmount);\r\n\r\n    function burnToEther(address receiver, uint256 burnAmount)\r\n        external\r\n        returns (uint256 loanAmountPaid);\r\n\r\n    function burn(address receiver, uint256 burnAmount) external returns (uint256 loanAmountPaid);\r\n}\r\n\r\n// File: contracts/OneSplitFulcrum.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitFulcrumBase {\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function _isFulcrumToken(IERC20 token) internal view returns(IERC20) {\r\n        if (token.isETH()) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(abi.encodeWithSignature(\r\n            \"name()\"\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        bool foundBZX = false;\r\n        for (uint i = 0; i + 6 < data.length; i++) {\r\n            if (data[i + 0] == \"F\" &&\r\n                data[i + 1] == \"u\" &&\r\n                data[i + 2] == \"l\" &&\r\n                data[i + 3] == \"c\" &&\r\n                data[i + 4] == \"r\" &&\r\n                data[i + 5] == \"u\" &&\r\n                data[i + 6] == \"m\")\r\n            {\r\n                foundBZX = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!foundBZX) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (success, data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            IFulcrumToken(address(token)).loanTokenAddress.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        return abi.decode(data, (IERC20));\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitFulcrumView is OneSplitViewWrapBase, OneSplitFulcrumBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _fulcrumGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _fulcrumGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_FULCRUM)) {\r\n            IERC20 underlying = _isFulcrumToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                uint256 fulcrumRate = IFulcrumToken(address(fromToken)).tokenPrice();\r\n                (returnAmount, estimateGasAmount, distribution) = _fulcrumGetExpectedReturn(\r\n                    underlying,\r\n                    destToken,\r\n                    amount.mul(fulcrumRate).div(1e18),\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 381_000, distribution);\r\n            }\r\n\r\n            underlying = _isFulcrumToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                uint256 _destTokenEthPriceTimesGasPrice = destTokenEthPriceTimesGasPrice;\r\n                uint256 fulcrumRate = IFulcrumToken(address(destToken)).tokenPrice();\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    _destTokenEthPriceTimesGasPrice.mul(fulcrumRate).div(1e18)\r\n                );\r\n                return (returnAmount.mul(1e18).div(fulcrumRate), estimateGasAmount + 354_000, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitFulcrum is OneSplitBaseWrap, OneSplitFulcrumBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _fulcrumSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _fulcrumSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_FULCRUM)) {\r\n            IERC20 underlying = _isFulcrumToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                if (underlying.isETH()) {\r\n                    IFulcrumToken(address(fromToken)).burnToEther(address(this), amount);\r\n                } else {\r\n                    IFulcrumToken(address(fromToken)).burn(address(this), amount);\r\n                }\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                return super._swap(\r\n                    underlying,\r\n                    destToken,\r\n                    underlyingAmount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            underlying = _isFulcrumToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                if (underlying.isETH()) {\r\n                    IFulcrumToken(address(destToken)).mintWithEther.value(underlyingAmount)(address(this));\r\n                } else {\r\n                    underlying.universalApprove(address(destToken), underlyingAmount);\r\n                    IFulcrumToken(address(destToken)).mint(address(this), underlyingAmount);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitChai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitChaiView is OneSplitViewWrapBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_CHAI)) {\r\n            if (fromToken == IERC20(chai)) {\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    dai,\r\n                    destToken,\r\n                    chai.chaiToDai(amount),\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 197_000, distribution);\r\n            }\r\n\r\n            if (destToken == IERC20(chai)) {\r\n                uint256 price = chai.chaiPrice();\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice.mul(1e18).div(price)\r\n                );\r\n                return (returnAmount.mul(price).div(1e18), estimateGasAmount + 168_000, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitChai is OneSplitBaseWrap {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_CHAI)) {\r\n            if (fromToken == IERC20(chai)) {\r\n                chai.exit(address(this), amount);\r\n\r\n                return super._swap(\r\n                    dai,\r\n                    destToken,\r\n                    dai.balanceOf(address(this)),\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            if (destToken == IERC20(chai)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n\r\n                uint256 daiBalance = dai.balanceOf(address(this));\r\n                dai.universalApprove(address(chai), daiBalance);\r\n                chai.join(address(this), daiBalance);\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IBdai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IBdai is IERC20 {\r\n    function join(uint256) external;\r\n\r\n    function exit(uint256) external;\r\n}\r\n\r\n// File: contracts/OneSplitBdai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitBdaiBase {\r\n    IBdai internal constant bdai = IBdai(0x6a4FFAafa8DD400676Df8076AD6c724867b0e2e8);\r\n    IERC20 internal constant btu = IERC20(0xb683D83a532e2Cb7DFa5275eED3698436371cc9f);\r\n}\r\n\r\n\r\ncontract OneSplitBdaiView is OneSplitViewWrapBase, OneSplitBdaiBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_BDAI)) {\r\n            if (fromToken == IERC20(bdai)) {\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    dai,\r\n                    destToken,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 227_000, distribution);\r\n            }\r\n\r\n            if (destToken == IERC20(bdai)) {\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 295_000, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitBdai is OneSplitBaseWrap, OneSplitBdaiBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_BDAI)) {\r\n            if (fromToken == IERC20(bdai)) {\r\n                bdai.exit(amount);\r\n\r\n                uint256 btuBalance = btu.balanceOf(address(this));\r\n                if (btuBalance > 0) {\r\n                    (,uint256[] memory btuDistribution) = getExpectedReturn(\r\n                        btu,\r\n                        destToken,\r\n                        btuBalance,\r\n                        1,\r\n                        flags\r\n                    );\r\n\r\n                    _swap(\r\n                        btu,\r\n                        destToken,\r\n                        btuBalance,\r\n                        btuDistribution,\r\n                        flags\r\n                    );\r\n                }\r\n\r\n                return super._swap(\r\n                    dai,\r\n                    destToken,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            if (destToken == IERC20(bdai)) {\r\n                super._swap(fromToken, dai, amount, distribution, flags);\r\n\r\n                uint256 daiBalance = dai.balanceOf(address(this));\r\n                dai.universalApprove(address(bdai), daiBalance);\r\n                bdai.join(daiBalance);\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(fromToken, destToken, amount, distribution, flags);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IIearn.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IIearn is IERC20 {\r\n    function token() external view returns(IERC20);\r\n\r\n    function calcPoolValueInToken() external view returns(uint256);\r\n\r\n    function deposit(uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _shares) external;\r\n}\r\n\r\n// File: contracts/OneSplitIearn.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitIearnBase {\r\n    function _yTokens() internal pure returns(IIearn[13] memory) {\r\n        return [\r\n            IIearn(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01),\r\n            IIearn(0x04Aa51bbcB46541455cCF1B8bef2ebc5d3787EC9),\r\n            IIearn(0x73a052500105205d34Daf004eAb301916DA8190f),\r\n            IIearn(0x83f798e925BcD4017Eb265844FDDAbb448f1707D),\r\n            IIearn(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e),\r\n            IIearn(0xF61718057901F84C4eEC4339EF8f0D86D2B45600),\r\n            IIearn(0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE),\r\n            IIearn(0xC2cB1040220768554cf699b0d863A3cd4324ce32),\r\n            IIearn(0xE6354ed5bC4b393a5Aad09f21c46E101e692d447),\r\n            IIearn(0x26EA744E5B887E5205727f55dFBE8685e3b21951),\r\n            IIearn(0x99d1Fa417f94dcD62BfE781a1213c092a47041Bc),\r\n            IIearn(0x9777d7E2b60bB01759D0E2f8be2095df444cb07E),\r\n            IIearn(0x1bE5d71F2dA660BFdee8012dDc58D024448A0A59)\r\n        ];\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIearnView is OneSplitViewWrapBase, OneSplitIearnBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _iearnGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _iearnGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (!flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == !flags.check(FLAG_DISABLE_IEARN)) {\r\n            IIearn[13] memory yTokens = _yTokens();\r\n\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (fromToken == IERC20(yTokens[i])) {\r\n                    (returnAmount, estimateGasAmount, distribution) = _iearnGetExpectedReturn(\r\n                        yTokens[i].token(),\r\n                        destToken,\r\n                        amount\r\n                            .mul(yTokens[i].calcPoolValueInToken())\r\n                            .div(yTokens[i].totalSupply()),\r\n                        parts,\r\n                        flags,\r\n                        destTokenEthPriceTimesGasPrice\r\n                    );\r\n                    return (returnAmount, estimateGasAmount + 260_000, distribution);\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (destToken == IERC20(yTokens[i])) {\r\n                    uint256 _destTokenEthPriceTimesGasPrice = destTokenEthPriceTimesGasPrice;\r\n                    IERC20 token = yTokens[i].token();\r\n                    (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                        fromToken,\r\n                        token,\r\n                        amount,\r\n                        parts,\r\n                        flags,\r\n                        _destTokenEthPriceTimesGasPrice\r\n                            .mul(yTokens[i].calcPoolValueInToken())\r\n                            .div(yTokens[i].totalSupply())\r\n                    );\r\n\r\n                    return(\r\n                        returnAmount\r\n                            .mul(yTokens[i].totalSupply())\r\n                            .div(yTokens[i].calcPoolValueInToken()),\r\n                        estimateGasAmount + 743_000,\r\n                        distribution\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIearn is OneSplitBaseWrap, OneSplitIearnBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _iearnSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _iearnSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_IEARN)) {\r\n            IIearn[13] memory yTokens = _yTokens();\r\n\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (fromToken == IERC20(yTokens[i])) {\r\n                    IERC20 underlying = yTokens[i].token();\r\n                    yTokens[i].withdraw(amount);\r\n                    _iearnSwap(underlying, destToken, underlying.balanceOf(address(this)), distribution, flags);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (destToken == IERC20(yTokens[i])) {\r\n                    IERC20 underlying = yTokens[i].token();\r\n                    super._swap(fromToken, underlying, amount, distribution, flags);\r\n\r\n                    uint256 underlyingBalance = underlying.balanceOf(address(this));\r\n                    underlying.universalApprove(address(yTokens[i]), underlyingBalance);\r\n                    yTokens[i].deposit(underlyingBalance);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        return super._swap(fromToken, destToken, amount, distribution, flags);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IIdle.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IIdle is IERC20 {\r\n    function token()\r\n        external view returns (IERC20);\r\n\r\n    function tokenPrice()\r\n        external view returns (uint256);\r\n\r\n    function mintIdleToken(uint256 _amount, uint256[] calldata _clientProtocolAmounts)\r\n        external returns (uint256 mintedTokens);\r\n\r\n    function redeemIdleToken(uint256 _amount, bool _skipRebalance, uint256[] calldata _clientProtocolAmounts)\r\n        external returns (uint256 redeemedTokens);\r\n}\r\n\r\n// File: contracts/OneSplitIdle.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitIdleBase {\r\n    function _idleTokens() internal pure returns(IIdle[8] memory) {\r\n        // https://developers.idle.finance/contracts-and-codebase\r\n        return [\r\n            // V3\r\n            IIdle(0x78751B12Da02728F467A44eAc40F5cbc16Bd7934),\r\n            IIdle(0x12B98C621E8754Ae70d0fDbBC73D6208bC3e3cA6),\r\n            IIdle(0x63D27B3DA94A9E871222CB0A32232674B02D2f2D),\r\n            IIdle(0x1846bdfDB6A0f5c473dEc610144513bd071999fB),\r\n            IIdle(0xcDdB1Bceb7a1979C6caa0229820707429dd3Ec6C),\r\n            IIdle(0x42740698959761BAF1B06baa51EfBD88CB1D862B),\r\n            // V2\r\n            IIdle(0x10eC0D497824e342bCB0EDcE00959142aAa766dD),\r\n            IIdle(0xeB66ACc3d011056B00ea521F8203580C2E5d3991)\r\n        ];\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIdleView is OneSplitViewWrapBase, OneSplitIdleBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _idleGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _idleGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        internal\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (!flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == !flags.check(FLAG_DISABLE_IDLE)) {\r\n            IIdle[8] memory tokens = _idleTokens();\r\n\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                if (fromToken == IERC20(tokens[i])) {\r\n                    (returnAmount, estimateGasAmount, distribution) = _idleGetExpectedReturn(\r\n                        tokens[i].token(),\r\n                        destToken,\r\n                        amount.mul(tokens[i].tokenPrice()).div(1e18),\r\n                        parts,\r\n                        flags,\r\n                        destTokenEthPriceTimesGasPrice\r\n                    );\r\n                    return (returnAmount, estimateGasAmount + 2_400_000, distribution);\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                if (destToken == IERC20(tokens[i])) {\r\n                    uint256 _destTokenEthPriceTimesGasPrice = destTokenEthPriceTimesGasPrice;\r\n                    uint256 _price = tokens[i].tokenPrice();\r\n                    IERC20 token = tokens[i].token();\r\n                    (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                        fromToken,\r\n                        token,\r\n                        amount,\r\n                        parts,\r\n                        flags,\r\n                        _destTokenEthPriceTimesGasPrice.mul(_price).div(1e18)\r\n                    );\r\n                    return (returnAmount.mul(1e18).div(_price), estimateGasAmount + 1_300_000, distribution);\r\n                }\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIdle is OneSplitBaseWrap, OneSplitIdleBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _idleSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _idleSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        if (!flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == !flags.check(FLAG_DISABLE_IDLE)) {\r\n            IIdle[8] memory tokens = _idleTokens();\r\n\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                if (fromToken == IERC20(tokens[i])) {\r\n                    IERC20 underlying = tokens[i].token();\r\n                    uint256 minted = tokens[i].redeemIdleToken(amount, true, new uint256[](0));\r\n                    _idleSwap(underlying, destToken, minted, distribution, flags);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                if (destToken == IERC20(tokens[i])) {\r\n                    IERC20 underlying = tokens[i].token();\r\n                    super._swap(fromToken, underlying, amount, distribution, flags);\r\n\r\n                    uint256 underlyingBalance = underlying.balanceOf(address(this));\r\n                    underlying.universalApprove(address(tokens[i]), underlyingBalance);\r\n                    tokens[i].mintIdleToken(underlyingBalance, new uint256[](0));\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        return super._swap(fromToken, destToken, amount, distribution, flags);\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitAave.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitAaveView is OneSplitViewWrapBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _aaveGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _aaveGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_AAVE)) {\r\n            IERC20 underlying = aaveRegistry.tokenByAToken(IAaveToken(address(fromToken)));\r\n            if (underlying != IERC20(0)) {\r\n                (returnAmount, estimateGasAmount, distribution) = _aaveGetExpectedReturn(\r\n                    underlying,\r\n                    destToken,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 670_000, distribution);\r\n            }\r\n\r\n            underlying = aaveRegistry.tokenByAToken(IAaveToken(address(destToken)));\r\n            if (underlying != IERC20(0)) {\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 310_000, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitAave is OneSplitBaseWrap {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _aaveSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _aaveSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_AAVE)) {\r\n            IERC20 underlying = aaveRegistry.tokenByAToken(IAaveToken(address(fromToken)));\r\n            if (underlying != IERC20(0)) {\r\n                IAaveToken(address(fromToken)).redeem(amount);\r\n\r\n                return _aaveSwap(\r\n                    underlying,\r\n                    destToken,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            underlying = aaveRegistry.tokenByAToken(IAaveToken(address(destToken)));\r\n            if (underlying != IERC20(0)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                underlying.universalApprove(aave.core(), underlyingAmount);\r\n                aave.deposit.value(underlying.isETH() ? underlyingAmount : 0)(\r\n                    underlying.isETH() ? ETH_ADDRESS : underlying,\r\n                    underlyingAmount,\r\n                    1101\r\n                );\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitWeth.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitWethView is OneSplitViewWrapBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _wethGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _wethGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_WETH)) {\r\n            if (fromToken == weth || fromToken == bancorEtherToken) {\r\n                return super.getExpectedReturnWithGas(ETH_ADDRESS, destToken, amount, parts, flags, destTokenEthPriceTimesGasPrice);\r\n            }\r\n\r\n            if (destToken == weth || destToken == bancorEtherToken) {\r\n                return super.getExpectedReturnWithGas(fromToken, ETH_ADDRESS, amount, parts, flags, destTokenEthPriceTimesGasPrice);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitWeth is OneSplitBaseWrap {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _wethSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _wethSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_WETH)) {\r\n            if (fromToken == weth) {\r\n                weth.withdraw(weth.balanceOf(address(this)));\r\n                super._swap(\r\n                    ETH_ADDRESS,\r\n                    destToken,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n                return;\r\n            }\r\n\r\n            if (fromToken == bancorEtherToken) {\r\n                bancorEtherToken.withdraw(bancorEtherToken.balanceOf(address(this)));\r\n                super._swap(\r\n                    ETH_ADDRESS,\r\n                    destToken,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n                return;\r\n            }\r\n\r\n            if (destToken == weth) {\r\n                _wethSwap(\r\n                    fromToken,\r\n                    ETH_ADDRESS,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n                weth.deposit.value(address(this).balance)();\r\n                return;\r\n            }\r\n\r\n            if (destToken == bancorEtherToken) {\r\n                _wethSwap(\r\n                    fromToken,\r\n                    ETH_ADDRESS,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n                bancorEtherToken.deposit.value(address(this).balance)();\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitMStable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitMStableView is OneSplitViewWrapBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_MSTABLE_MUSD)) {\r\n            if (fromToken == IERC20(musd)) {\r\n                {\r\n                    (bool valid1,, uint256 res1,) = musd_helper.getRedeemValidity(musd, amount, destToken);\r\n                    if (valid1) {\r\n                        return (res1, 300_000, new uint256[](DEXES_COUNT));\r\n                    }\r\n                }\r\n\r\n                (bool valid,, address token) = musd_helper.suggestRedeemAsset(musd);\r\n                if (valid) {\r\n                    (,, returnAmount,) = musd_helper.getRedeemValidity(musd, amount, IERC20(token));\r\n                    if (IERC20(token) != destToken) {\r\n                        (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                            IERC20(token),\r\n                            destToken,\r\n                            returnAmount,\r\n                            parts,\r\n                            flags,\r\n                            destTokenEthPriceTimesGasPrice\r\n                        );\r\n                    } else {\r\n                        distribution = new uint256[](DEXES_COUNT);\r\n                    }\r\n\r\n                    return (returnAmount, estimateGasAmount + 300_000, distribution);\r\n                }\r\n            }\r\n\r\n            if (destToken == IERC20(musd)) {\r\n                if (fromToken == usdc || fromToken == dai || fromToken == usdt || fromToken == tusd) {\r\n                    (,, returnAmount) = musd.getSwapOutput(fromToken, destToken, amount);\r\n                    return (returnAmount, 300_000, new uint256[](DEXES_COUNT));\r\n                }\r\n                else {\r\n                    IERC20 _destToken = destToken;\r\n                    (bool valid,, address token) = musd_helper.suggestMintAsset(_destToken);\r\n                    if (valid) {\r\n                        if (IERC20(token) != fromToken) {\r\n                            (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                                fromToken,\r\n                                IERC20(token),\r\n                                amount,\r\n                                parts,\r\n                                flags,\r\n                                _scaleDestTokenEthPriceTimesGasPrice(\r\n                                    _destToken,\r\n                                    IERC20(token),\r\n                                    destTokenEthPriceTimesGasPrice\r\n                                )\r\n                            );\r\n                        } else {\r\n                            returnAmount = amount;\r\n                        }\r\n                        (,, returnAmount) = musd.getSwapOutput(IERC20(token), _destToken, returnAmount);\r\n                        return (returnAmount, estimateGasAmount + 300_000, distribution);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitMStable is OneSplitBaseWrap {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_MSTABLE_MUSD)) {\r\n            if (fromToken == IERC20(musd)) {\r\n                if (destToken == usdc || destToken == dai || destToken == usdt || destToken == tusd) {\r\n                    (,,, uint256 result) = musd_helper.getRedeemValidity(fromToken, amount, destToken);\r\n                    musd.redeem(\r\n                        destToken,\r\n                        result\r\n                    );\r\n                }\r\n                else {\r\n                    (,,, uint256 result) = musd_helper.getRedeemValidity(fromToken, amount, dai);\r\n                    musd.redeem(\r\n                        dai,\r\n                        result\r\n                    );\r\n                    super._swap(\r\n                        dai,\r\n                        destToken,\r\n                        dai.balanceOf(address(this)),\r\n                        distribution,\r\n                        flags\r\n                    );\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (destToken == IERC20(musd)) {\r\n                if (fromToken == usdc || fromToken == dai || fromToken == usdt || fromToken == tusd) {\r\n                    fromToken.universalApprove(address(musd), amount);\r\n                    musd.swap(\r\n                        fromToken,\r\n                        destToken,\r\n                        amount,\r\n                        address(this)\r\n                    );\r\n                }\r\n                else {\r\n                    super._swap(\r\n                        fromToken,\r\n                        dai,\r\n                        amount,\r\n                        distribution,\r\n                        flags\r\n                    );\r\n                    musd.swap(\r\n                        dai,\r\n                        destToken,\r\n                        dai.balanceOf(address(this)),\r\n                        address(this)\r\n                    );\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IDMM.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IDMMController {\r\n    function getUnderlyingTokenForDmm(IERC20 token) external view returns(IERC20);\r\n}\r\n\r\n\r\ncontract IDMM is IERC20 {\r\n    function getCurrentExchangeRate() public view returns(uint256);\r\n    function mint(uint256 underlyingAmount) public returns(uint256);\r\n    function redeem(uint256 amount) public returns(uint256);\r\n}\r\n\r\n// File: contracts/OneSplitDMM.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitDMMBase {\r\n    IDMMController internal constant _dmmController = IDMMController(0x4CB120Dd1D33C9A3De8Bc15620C7Cd43418d77E2);\r\n\r\n    function _getDMMUnderlyingToken(IERC20 token) internal view returns(IERC20) {\r\n        (bool success, bytes memory data) = address(_dmmController).staticcall(\r\n            abi.encodeWithSelector(\r\n                _dmmController.getUnderlyingTokenForDmm.selector,\r\n                token\r\n            )\r\n        );\r\n\r\n        if (!success || data.length == 0) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        return abi.decode(data, (IERC20));\r\n    }\r\n\r\n    function _getDMMExchangeRate(IDMM dmm) internal view returns(uint256) {\r\n        (bool success, bytes memory data) = address(dmm).staticcall(\r\n            abi.encodeWithSelector(\r\n                dmm.getCurrentExchangeRate.selector\r\n            )\r\n        );\r\n\r\n        if (!success || data.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return abi.decode(data, (uint256));\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitDMMView is OneSplitViewWrapBase, OneSplitDMMBase {\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _dmmGetExpectedReturn(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _dmmGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_DMM)) {\r\n            IERC20 underlying = _getDMMUnderlyingToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                if (underlying == weth) {\r\n                    underlying = ETH_ADDRESS;\r\n                }\r\n                IERC20 _fromToken = fromToken;\r\n                (returnAmount, estimateGasAmount, distribution) = _dmmGetExpectedReturn(\r\n                    underlying,\r\n                    destToken,\r\n                    amount.mul(_getDMMExchangeRate(IDMM(address(_fromToken)))).div(1e18),\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice\r\n                );\r\n                return (returnAmount, estimateGasAmount + 295_000, distribution);\r\n            }\r\n\r\n            underlying = _getDMMUnderlyingToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                if (underlying == weth) {\r\n                    underlying = ETH_ADDRESS;\r\n                }\r\n                uint256 price = _getDMMExchangeRate(IDMM(address(destToken)));\r\n                (returnAmount, estimateGasAmount, distribution) = super.getExpectedReturnWithGas(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    flags,\r\n                    destTokenEthPriceTimesGasPrice.mul(price).div(1e18)\r\n                );\r\n                return (\r\n                    returnAmount.mul(1e18).div(price),\r\n                    estimateGasAmount + 430_000,\r\n                    distribution\r\n                );\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitDMM is OneSplitBaseWrap, OneSplitDMMBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        _dmmSwap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _dmmSwap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        if (fromToken == destToken) {\r\n            return;\r\n        }\r\n\r\n        if (flags.check(FLAG_DISABLE_ALL_WRAP_SOURCES) == flags.check(FLAG_DISABLE_DMM)) {\r\n            IERC20 underlying = _getDMMUnderlyingToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                IDMM(address(fromToken)).redeem(amount);\r\n                uint256 balance = underlying.universalBalanceOf(address(this));\r\n                if (underlying == weth) {\r\n                    weth.withdraw(balance);\r\n                }\r\n                _dmmSwap(\r\n                    (underlying == weth) ? ETH_ADDRESS : underlying,\r\n                    destToken,\r\n                    balance,\r\n                    distribution,\r\n                    flags\r\n                );\r\n            }\r\n\r\n            underlying = _getDMMUnderlyingToken(destToken);\r\n            if (underlying != IERC20(-1)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    (underlying == weth) ? ETH_ADDRESS : underlying,\r\n                    amount,\r\n                    distribution,\r\n                    flags\r\n                );\r\n\r\n                uint256 underlyingAmount = ((underlying == weth) ? ETH_ADDRESS : underlying).universalBalanceOf(address(this));\r\n                if (underlying == weth) {\r\n                    weth.deposit.value(underlyingAmount);\r\n                }\r\n\r\n                underlying.universalApprove(address(destToken), underlyingAmount);\r\n                IDMM(address(destToken)).mint(underlyingAmount);\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitMooniswapPoolToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract OneSplitMooniswapTokenBase {\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    struct TokenInfo {\r\n        IERC20 token;\r\n        uint256 reserve;\r\n    }\r\n\r\n    struct PoolDetails {\r\n        TokenInfo[2] tokens;\r\n        uint256 totalSupply;\r\n    }\r\n\r\n    function _getPoolDetails(IMooniswap pool) internal view returns (PoolDetails memory details) {\r\n        for (uint i = 0; i < 2; i++) {\r\n            IERC20 token = pool.tokens(i);\r\n            details.tokens[i] = TokenInfo({\r\n                token: token,\r\n                reserve: token.universalBalanceOf(address(pool))\r\n            });\r\n        }\r\n\r\n        details.totalSupply = IERC20(address(pool)).totalSupply();\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitMooniswapTokenView is OneSplitViewWrapBase, OneSplitMooniswapTokenBase {\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 returnAmount,\r\n            uint256,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken.eq(toToken)) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n\r\n        if (!flags.check(FLAG_DISABLE_MOONISWAP_POOL_TOKEN)) {\r\n            bool isPoolTokenFrom = mooniswapRegistry.isPool(address(fromToken));\r\n            bool isPoolTokenTo = mooniswapRegistry.isPool(address(toToken));\r\n\r\n            if (isPoolTokenFrom && isPoolTokenTo) {\r\n                (\r\n                    uint256 returnETHAmount,\r\n                    uint256[] memory poolTokenFromDistribution\r\n                ) = _getExpectedReturnFromMooniswapPoolToken(\r\n                    fromToken,\r\n                    ETH_ADDRESS,\r\n                    amount,\r\n                    parts,\r\n                    FLAG_DISABLE_MOONISWAP_POOL_TOKEN\r\n                );\r\n\r\n                (\r\n                    uint256 returnPoolTokenToAmount,\r\n                    uint256[] memory poolTokenToDistribution\r\n                ) = _getExpectedReturnToMooniswapPoolToken(\r\n                    ETH_ADDRESS,\r\n                    toToken,\r\n                    returnETHAmount,\r\n                    parts,\r\n                    FLAG_DISABLE_MOONISWAP_POOL_TOKEN\r\n                );\r\n\r\n                for (uint i = 0; i < poolTokenToDistribution.length; i++) {\r\n                    poolTokenFromDistribution[i] |= poolTokenToDistribution[i] << 128;\r\n                }\r\n\r\n                return (returnPoolTokenToAmount, 0, poolTokenFromDistribution);\r\n            }\r\n\r\n            if (isPoolTokenFrom) {\r\n                (returnAmount, distribution) = _getExpectedReturnFromMooniswapPoolToken(\r\n                    fromToken,\r\n                    toToken,\r\n                    amount,\r\n                    parts,\r\n                    FLAG_DISABLE_MOONISWAP_POOL_TOKEN\r\n                );\r\n                return (returnAmount, 0, distribution);\r\n            }\r\n\r\n            if (isPoolTokenTo) {\r\n                (returnAmount, distribution) = _getExpectedReturnToMooniswapPoolToken(\r\n                    fromToken,\r\n                    toToken,\r\n                    amount,\r\n                    parts,\r\n                    FLAG_DISABLE_MOONISWAP_POOL_TOKEN\r\n                );\r\n                return (returnAmount, 0, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _getExpectedReturnFromMooniswapPoolToken(\r\n        IERC20 poolToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        distribution = new uint256[](DEXES_COUNT);\r\n\r\n        PoolDetails memory details = _getPoolDetails(IMooniswap(address(poolToken)));\r\n\r\n        for (uint i = 0; i < 2; i++) {\r\n\r\n            uint256 exchangeAmount = amount\r\n                .mul(details.tokens[i].reserve)\r\n                .div(details.totalSupply);\r\n\r\n            if (toToken.eq(details.tokens[i].token)) {\r\n                returnAmount = returnAmount.add(exchangeAmount);\r\n                continue;\r\n            }\r\n\r\n            (uint256 ret, ,uint256[] memory dist) = super.getExpectedReturnWithGas(\r\n                details.tokens[i].token,\r\n                toToken,\r\n                exchangeAmount,\r\n                parts,\r\n                flags,\r\n                0\r\n            );\r\n\r\n            returnAmount = returnAmount.add(ret);\r\n            for (uint j = 0; j < distribution.length; j++) {\r\n                distribution[j] |= dist[j] << (i * 8);\r\n            }\r\n        }\r\n\r\n        return (returnAmount, distribution);\r\n    }\r\n\r\n    function _getExpectedReturnToMooniswapPoolToken(\r\n        IERC20 fromToken,\r\n        IERC20 poolToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        private\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        distribution = new uint256[](DEXES_COUNT);\r\n\r\n        PoolDetails memory details = _getPoolDetails(IMooniswap(address(poolToken)));\r\n\r\n        // will overwritten to liquidity amounts\r\n        uint256[2] memory amounts;\r\n        amounts[0] = amount.div(2);\r\n        amounts[1] = amount.sub(amounts[0]);\r\n        uint256[] memory dist = new uint256[](distribution.length);\r\n        for (uint i = 0; i < 2; i++) {\r\n\r\n            if (fromToken.eq(details.tokens[i].token)) {\r\n                continue;\r\n            }\r\n\r\n            (amounts[i], ,dist) = super.getExpectedReturnWithGas(\r\n                fromToken,\r\n                details.tokens[i].token,\r\n                amounts[i],\r\n                parts,\r\n                flags,\r\n                0\r\n            );\r\n\r\n            for (uint j = 0; j < distribution.length; j++) {\r\n                distribution[j] |= dist[j] << (i * 8);\r\n            }\r\n        }\r\n\r\n        returnAmount = uint256(-1);\r\n        for (uint i = 0; i < 2; i++) {\r\n            returnAmount = Math.min(\r\n                returnAmount,\r\n                details.totalSupply.mul(amounts[i]).div(details.tokens[i].reserve)\r\n            );\r\n        }\r\n\r\n        return (\r\n            returnAmount,\r\n            distribution\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract OneSplitMooniswapToken is OneSplitBaseWrap, OneSplitMooniswapTokenBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        if (fromToken.eq(toToken)) {\r\n            return;\r\n        }\r\n\r\n        if (!flags.check(FLAG_DISABLE_MOONISWAP_POOL_TOKEN)) {\r\n            bool isPoolTokenFrom = mooniswapRegistry.isPool(address(fromToken));\r\n            bool isPoolTokenTo = mooniswapRegistry.isPool(address(toToken));\r\n\r\n            if (isPoolTokenFrom && isPoolTokenTo) {\r\n                uint256[] memory dist = new uint256[](distribution.length);\r\n                for (uint i = 0; i < distribution.length; i++) {\r\n                    dist[i] = distribution[i] & ((1 << 128) - 1);\r\n                }\r\n\r\n                uint256 ethBalanceBefore = ETH_ADDRESS.universalBalanceOf(address(this));\r\n\r\n                _swapFromMooniswapToken(\r\n                    fromToken,\r\n                    ETH_ADDRESS,\r\n                    amount,\r\n                    dist,\r\n                    FLAG_DISABLE_MOONISWAP_POOL_TOKEN\r\n                );\r\n\r\n                for (uint i = 0; i < distribution.length; i++) {\r\n                    dist[i] = distribution[i] >> 128;\r\n                }\r\n\r\n                uint256 ethBalanceAfter = ETH_ADDRESS.universalBalanceOf(address(this));\r\n\r\n                return _swapToMooniswapToken(\r\n                    ETH_ADDRESS,\r\n                    toToken,\r\n                    ethBalanceAfter.sub(ethBalanceBefore),\r\n                    dist,\r\n                    FLAG_DISABLE_MOONISWAP_POOL_TOKEN\r\n                );\r\n            }\r\n\r\n            if (isPoolTokenFrom) {\r\n                return _swapFromMooniswapToken(\r\n                    fromToken,\r\n                    toToken,\r\n                    amount,\r\n                    distribution,\r\n                    FLAG_DISABLE_MOONISWAP_POOL_TOKEN\r\n                );\r\n            }\r\n\r\n            if (isPoolTokenTo) {\r\n                return _swapToMooniswapToken(\r\n                    fromToken,\r\n                    toToken,\r\n                    amount,\r\n                    distribution,\r\n                    FLAG_DISABLE_MOONISWAP_POOL_TOKEN\r\n                );\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n\r\n    function _swapFromMooniswapToken(\r\n        IERC20 poolToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        IERC20[2] memory tokens = [\r\n            IMooniswap(address(poolToken)).tokens(0),\r\n            IMooniswap(address(poolToken)).tokens(1)\r\n        ];\r\n\r\n        IMooniswap(address(poolToken)).withdraw(\r\n            amount,\r\n            new uint256[](0)\r\n        );\r\n\r\n        uint256[] memory dist = new uint256[](distribution.length);\r\n        for (uint i = 0; i < 2; i++) {\r\n\r\n            if (toToken.eq(tokens[i])) {\r\n                continue;\r\n            }\r\n\r\n            for (uint j = 0; j < distribution.length; j++) {\r\n                dist[j] = (distribution[j] >> (i * 8)) & 0xFF;\r\n            }\r\n\r\n            super._swap(\r\n                tokens[i],\r\n                toToken,\r\n                tokens[i].universalBalanceOf(address(this)),\r\n                dist,\r\n                flags\r\n            );\r\n        }\r\n    }\r\n\r\n    function _swapToMooniswapToken(\r\n        IERC20 fromToken,\r\n        IERC20 poolToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) private {\r\n        IERC20[2] memory tokens = [\r\n            IMooniswap(address(poolToken)).tokens(0),\r\n            IMooniswap(address(poolToken)).tokens(1)\r\n        ];\r\n\r\n        // will overwritten to liquidity amounts\r\n        uint256[] memory amounts = new uint256[](2);\r\n        amounts[0] = amount.div(2);\r\n        amounts[1] = amount.sub(amounts[0]);\r\n        uint256[] memory dist = new uint256[](distribution.length);\r\n        for (uint i = 0; i < 2; i++) {\r\n\r\n            if (fromToken.eq(tokens[i])) {\r\n                continue;\r\n            }\r\n\r\n            for (uint j = 0; j < distribution.length; j++) {\r\n                dist[j] = (distribution[j] >> (i * 8)) & 0xFF;\r\n            }\r\n\r\n            super._swap(\r\n                fromToken,\r\n                tokens[i],\r\n                amounts[i],\r\n                dist,\r\n                flags\r\n            );\r\n\r\n            amounts[i] = tokens[i].universalBalanceOf(address(this));\r\n            tokens[i].universalApprove(address(poolToken), amounts[i]);\r\n        }\r\n\r\n        uint256 ethValue = (tokens[0].isETH() ? amounts[0] : 0) + (tokens[1].isETH() ? amounts[1] : 0);\r\n        IMooniswap(address(poolToken)).deposit.value(ethValue)(\r\n            amounts,\r\n            0\r\n        );\r\n\r\n        for (uint i = 0; i < 2; i++) {\r\n            tokens[i].universalTransfer(\r\n                msg.sender,\r\n                tokens[i].universalBalanceOf(address(this))\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OneSplitViewWrap is\r\n    OneSplitViewWrapBase,\r\n    OneSplitMStableView,\r\n    OneSplitChaiView,\r\n    OneSplitBdaiView,\r\n    OneSplitAaveView,\r\n    OneSplitFulcrumView,\r\n    OneSplitCompoundView,\r\n    OneSplitIearnView,\r\n    OneSplitIdleView,\r\n    OneSplitWethView,\r\n    OneSplitDMMView,\r\n    OneSplitMooniswapTokenView\r\n{\r\n    IOneSplitView public oneSplitView;\r\n\r\n    constructor(IOneSplitView _oneSplit) public {\r\n        oneSplitView = _oneSplit;\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == destToken) {\r\n            return (amount, 0, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        return super.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function _getExpectedReturnRespectingGasFloor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        internal\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return oneSplitView.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitWrap is\r\n    OneSplitBaseWrap,\r\n    OneSplitMStable,\r\n    OneSplitChai,\r\n    OneSplitBdai,\r\n    OneSplitAave,\r\n    OneSplitFulcrum,\r\n    OneSplitCompound,\r\n    OneSplitIearn,\r\n    OneSplitIdle,\r\n    OneSplitWeth,\r\n    OneSplitDMM,\r\n    OneSplitMooniswapToken\r\n{\r\n    IOneSplitView public oneSplitView;\r\n    IOneSplit public oneSplit;\r\n\r\n    constructor(IOneSplitView _oneSplitView, IOneSplit _oneSplit) public {\r\n        oneSplitView = _oneSplitView;\r\n        oneSplit = _oneSplit;\r\n    }\r\n\r\n    function() external payable {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(msg.sender != tx.origin);\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            0\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags,\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return oneSplitView.getExpectedReturnWithGas(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            parts,\r\n            flags,\r\n            destTokenEthPriceTimesGasPrice\r\n        );\r\n    }\r\n\r\n    function getExpectedReturnWithGasMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256[] memory parts,\r\n        uint256[] memory flags,\r\n        uint256[] memory destTokenEthPriceTimesGasPrices\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256[] memory returnAmounts,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        uint256[] memory dist;\r\n\r\n        returnAmounts = new uint256[](tokens.length - 1);\r\n        for (uint i = 1; i < tokens.length; i++) {\r\n            if (tokens[i - 1] == tokens[i]) {\r\n                returnAmounts[i - 1] = (i == 1) ? amount : returnAmounts[i - 2];\r\n                continue;\r\n            }\r\n\r\n            IERC20[] memory _tokens = tokens;\r\n\r\n            (\r\n                returnAmounts[i - 1],\r\n                amount,\r\n                dist\r\n            ) = getExpectedReturnWithGas(\r\n                _tokens[i - 1],\r\n                _tokens[i],\r\n                (i == 1) ? amount : returnAmounts[i - 2],\r\n                parts[i - 1],\r\n                flags[i - 1],\r\n                destTokenEthPriceTimesGasPrices[i - 1]\r\n            );\r\n            estimateGasAmount = estimateGasAmount.add(amount);\r\n\r\n            if (distribution.length == 0) {\r\n                distribution = new uint256[](dist.length);\r\n            }\r\n            for (uint j = 0; j < distribution.length; j++) {\r\n                distribution[j] = distribution[j].add(dist[j] << (8 * (i - 1)));\r\n            }\r\n        }\r\n    }\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) public payable returns(uint256 returnAmount) {\r\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\r\n        uint256 confirmed = fromToken.universalBalanceOf(address(this));\r\n        _swap(fromToken, destToken, confirmed, distribution, flags);\r\n\r\n        returnAmount = destToken.universalBalanceOf(address(this));\r\n        require(returnAmount >= minReturn, \"OneSplit: actual return amount is less than minReturn\");\r\n        destToken.universalTransfer(msg.sender, returnAmount);\r\n        fromToken.universalTransfer(msg.sender, fromToken.universalBalanceOf(address(this)));\r\n    }\r\n\r\n    function swapMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256[] memory flags\r\n    ) public payable returns(uint256 returnAmount) {\r\n        tokens[0].universalTransferFrom(msg.sender, address(this), amount);\r\n\r\n        returnAmount = tokens[0].universalBalanceOf(address(this));\r\n        for (uint i = 1; i < tokens.length; i++) {\r\n            if (tokens[i - 1] == tokens[i]) {\r\n                continue;\r\n            }\r\n\r\n            uint256[] memory dist = new uint256[](distribution.length);\r\n            for (uint j = 0; j < distribution.length; j++) {\r\n                dist[j] = (distribution[j] >> (8 * (i - 1))) & 0xFF;\r\n            }\r\n\r\n            _swap(\r\n                tokens[i - 1],\r\n                tokens[i],\r\n                returnAmount,\r\n                dist,\r\n                flags[i - 1]\r\n            );\r\n            returnAmount = tokens[i].universalBalanceOf(address(this));\r\n            tokens[i - 1].universalTransfer(msg.sender, tokens[i - 1].universalBalanceOf(address(this)));\r\n        }\r\n\r\n        require(returnAmount >= minReturn, \"OneSplit: actual return amount is less than minReturn\");\r\n        tokens[tokens.length - 1].universalTransfer(msg.sender, returnAmount);\r\n    }\r\n\r\n    function _swapFloor(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    ) internal {\r\n        fromToken.universalApprove(address(oneSplit), amount);\r\n        oneSplit.swap.value(fromToken.isETH() ? amount : 0)(\r\n            fromToken,\r\n            destToken,\r\n            amount,\r\n            0,\r\n            distribution,\r\n            flags\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTokenEthPriceTimesGasPrice\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturnWithGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OneSplitView","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6edd3babc2b1cd2408b7f4201057a1c54e76680f8a4568e974da31aecbcdc51a"}]}