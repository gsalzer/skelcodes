{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\Curve\\Curve_General_Zapout_V1_2.sol\r\n\r\n// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\r\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\r\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\r\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\r\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\r\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\r\n// Copyright (C) 2020 zapper, nodarjanashia, suhailg, apoorvlathey, seb, sumit\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// Visit <https://www.gnu.org/licenses/>for a copy of the GNU Affero General Public License\r\n\r\n///@author Zapper\r\n///@notice this contract implements one click ZapOut from Curve Pools\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// interface\r\ninterface ICurveExchange {\r\n    // function coins() external view returns (address[] memory);\r\n    function coins(int128 arg0) external view returns (address);\r\n\r\n    function underlying_coins(int128 arg0) external view returns (address);\r\n\r\n    function balances(int128 arg0) external view returns (uint256);\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_amounts)\r\n        external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount,\r\n        bool donate_dust\r\n    ) external;\r\n\r\n    function exchange(\r\n        int128 from,\r\n        int128 to,\r\n        uint256 _from_amount,\r\n        uint256 _min_to_amount\r\n    ) external;\r\n\r\n    function exchange_underlying(\r\n        int128 from,\r\n        int128 to,\r\n        uint256 _from_amount,\r\n        uint256 _min_to_amount\r\n    ) external;\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\r\n        external\r\n        returns (uint256);\r\n}\r\n\r\ninterface ICurveExchangeBTC {\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount\r\n    ) external;\r\n}\r\n\r\ninterface ICurveExchangeSBTC {\r\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts)\r\n        external;\r\n}\r\n\r\ninterface ICurveExchangeRenBTC {\r\n    function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts)\r\n        external;\r\n}\r\n\r\ninterface IuniswapFactory {\r\n    function getExchange(address token)\r\n        external\r\n        view\r\n        returns (address exchange);\r\n}\r\n\r\ninterface IuniswapExchange {\r\n    // converting ERC20 to ERC20 and transfer\r\n    function tokenToTokenTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address recipient,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n\r\n    function getEthToTokenInputPrice(uint256 eth_sold)\r\n        external\r\n        view\r\n        returns (uint256 tokens_bought);\r\n\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought)\r\n        external\r\n        view\r\n        returns (uint256 eth_sold);\r\n\r\n    function getTokenToEthInputPrice(uint256 tokens_sold)\r\n        external\r\n        view\r\n        returns (uint256 eth_bought);\r\n\r\n    function getTokenToEthOutputPrice(uint256 eth_bought)\r\n        external\r\n        view\r\n        returns (uint256 tokens_sold);\r\n\r\n    function tokenToEthTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_eth,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external returns (uint256 eth_bought);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) external returns (bool success);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface cERC20 {\r\n    function redeem(uint256) external returns (uint256);\r\n}\r\n\r\ninterface yERC20 {\r\n    function withdraw(uint256 _amount) external;\r\n}\r\n\r\ninterface IUniswapRouter02 {\r\n    //get estimated amountOut\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    //token 2 token\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    //eth 2 token\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    //token 2 eth\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IBalancer {\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\r\n}\r\n\r\ncontract Curve_General_ZapOut_V2 is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    bool private stopped = false;\r\n    uint16 public goodwill;\r\n    address public dzgoodwillAddress;\r\n    \r\n    IBalancer private constant BalWBTCPool = IBalancer(0x294de1cdE8b04bf6d25F98f1d547052F8080A177);\r\n\r\n    IuniswapFactory private constant UniSwapFactoryAddress = IuniswapFactory(\r\n        0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95\r\n    );\r\n    IUniswapRouter02 private constant uniswapRouter = IUniswapRouter02(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n\r\n    address private constant wethTokenAddress = address(\r\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n    );\r\n    address private constant WBTCTokenAddress = address(\r\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\r\n    );\r\n    address private constant DaiTokenAddress = address(\r\n        0x6B175474E89094C44Da98b954EedeAC495271d0F\r\n    );\r\n    address private constant UsdcTokenAddress = address(\r\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n    );\r\n    address private constant UsdtTokenAddress = address(\r\n        0xdAC17F958D2ee523a2206206994597C13D831ec7\r\n    );\r\n    address public sUsdTokenAddress = address(\r\n        0x57Ab1ec28D129707052df4dF418D58a2D46d5f51\r\n    );\r\n\r\n    address private constant bUsdTokenAddress = address(\r\n        0x4Fabb145d64652a948d72533023f6E7A623C7C53\r\n    );\r\n\r\n    address private constant sUSDCurveExchangeAddress = address(\r\n        0xFCBa3E75865d2d561BE8D220616520c171F12851\r\n    );\r\n    address private constant sUSDCurvePoolTokenAddress = address(\r\n        0xC25a3A3b969415c80451098fa907EC722572917F\r\n    );\r\n    address private constant yCurveExchangeAddress = address(\r\n        0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3\r\n    );\r\n    address private constant yCurvePoolTokenAddress = address(\r\n        0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8\r\n    );\r\n    address private constant bUSDCurveExchangeAddress = address(\r\n        0xb6c057591E073249F2D9D88Ba59a46CFC9B59EdB\r\n    );\r\n    address private constant bUSDCurvePoolTokenAddress = address(\r\n        0x3B3Ac5386837Dc563660FB6a0937DFAa5924333B\r\n    );\r\n    address private constant paxCurveExchangeAddress = address(\r\n        0xA50cCc70b6a011CffDdf45057E39679379187287\r\n    );\r\n    address private constant paxCurvePoolTokenAddress = address(\r\n        0xD905e2eaeBe188fc92179b6350807D8bd91Db0D8\r\n    );\r\n    address private constant renCurvePoolTokenAddress = address(\r\n        0x49849C98ae39Fff122806C06791Fa73784FB3675\r\n    );\r\n    address private constant sbtcCurvePoolTokenAddress = address(\r\n        0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3\r\n    );\r\n\r\n    address private constant renCurveExchangeAddress = address(\r\n        0x93054188d876f558f4a66B2EF1d97d16eDf0895B\r\n    );\r\n\r\n    address private constant sbtcCurveExchangeAddress = address(\r\n        0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714\r\n    );\r\n\r\n    address private constant yDAI = address(0xC2cB1040220768554cf699b0d863A3cd4324ce32);\r\n    address private constant yUSDC = address(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e);\r\n    address private constant yUSDT = address(0x83f798e925BcD4017Eb265844FDDAbb448f1707D);\r\n    address private constant yBUSD = address(0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE);\r\n    address private constant yTUSD = address(0x73a052500105205d34Daf004eAb301916DA8190f);\r\n\r\n    address private constant ycDAI = address(0x99d1Fa417f94dcD62BfE781a1213c092a47041Bc);\r\n    address private constant ycUSDC = address(0x9777d7E2b60bB01759D0E2f8be2095df444cb07E);\r\n    address private constant ycUSDT = address(0x1bE5d71F2dA660BFdee8012dDc58D024448A0A59);\r\n\r\n    mapping(address => address) public exchange2Token;\r\n    mapping(address => address) public cToken;\r\n    mapping(address => address) public yToken;\r\n\r\n    constructor(\r\n        uint16 _goodwill,\r\n        address _dzgoodwillAddress\r\n    ) public {\r\n        goodwill = _goodwill;\r\n        dzgoodwillAddress = _dzgoodwillAddress;\r\n        approveToken();\r\n        setCRVTokenAddresses();\r\n        setcTokens();\r\n        setyTokens();\r\n    }\r\n\r\n    function approveToken() public {\r\n        IERC20(sUSDCurvePoolTokenAddress).approve(\r\n            sUSDCurveExchangeAddress,\r\n            uint256(-1)\r\n        );\r\n        IERC20(yCurvePoolTokenAddress).approve(\r\n            yCurveExchangeAddress,\r\n            uint256(-1)\r\n        );\r\n        IERC20(bUSDCurvePoolTokenAddress).approve(\r\n            bUSDCurveExchangeAddress,\r\n            uint256(-1)\r\n        );\r\n        IERC20(paxCurvePoolTokenAddress).approve(\r\n            paxCurveExchangeAddress,\r\n            uint256(-1)\r\n        );\r\n        IERC20(renCurvePoolTokenAddress).approve(\r\n            renCurveExchangeAddress,\r\n            uint256(-1)\r\n        );\r\n        IERC20(sbtcCurvePoolTokenAddress).approve(\r\n            sbtcCurveExchangeAddress,\r\n            uint256(-1)\r\n        );\r\n    }\r\n\r\n    function setcTokens() public onlyOwner {\r\n        cToken[address(\r\n            0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643\r\n        )] = DaiTokenAddress;\r\n        cToken[address(\r\n            0x39AA39c021dfbaE8faC545936693aC917d5E7563\r\n        )] = UsdcTokenAddress;\r\n        cToken[address(\r\n            0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9\r\n        )] = UsdtTokenAddress;\r\n        cToken[address(\r\n            0xC11b1268C1A384e55C48c2391d8d480264A3A7F4\r\n        )] = WBTCTokenAddress;\r\n    }\r\n\r\n    function setyTokens() public onlyOwner {\r\n        //y tokens\r\n        yToken[yDAI] = DaiTokenAddress;\r\n        yToken[yUSDC] = UsdcTokenAddress;\r\n        yToken[yUSDT] = UsdtTokenAddress;\r\n        yToken[yBUSD] = bUsdTokenAddress;\r\n\r\n        //yc tokens\r\n        yToken[ycDAI] = DaiTokenAddress;\r\n        yToken[ycUSDC] = UsdcTokenAddress;\r\n        yToken[ycUSDT] = UsdtTokenAddress;\r\n    }\r\n\r\n    function setCRVTokenAddresses() public onlyOwner {\r\n        exchange2Token[sUSDCurveExchangeAddress] = sUSDCurvePoolTokenAddress;\r\n        exchange2Token[yCurveExchangeAddress] = yCurvePoolTokenAddress;\r\n        exchange2Token[bUSDCurveExchangeAddress] = bUSDCurvePoolTokenAddress;\r\n        exchange2Token[paxCurveExchangeAddress] = paxCurvePoolTokenAddress;\r\n        exchange2Token[renCurveExchangeAddress] = renCurvePoolTokenAddress;\r\n        exchange2Token[sbtcCurveExchangeAddress] = sbtcCurvePoolTokenAddress;\r\n    }\r\n\r\n    function addCRVToken(address _exchangeAddress, address _crvTokenAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        exchange2Token[_exchangeAddress] = _crvTokenAddress;\r\n    }\r\n\r\n    function addCToken(address _cToken, address _underlyingToken)\r\n        public\r\n        onlyOwner\r\n    {\r\n        cToken[_cToken] = _underlyingToken;\r\n    }\r\n\r\n    function addYToken(address _yToken, address _underlyingToken)\r\n        public\r\n        onlyOwner\r\n    {\r\n        yToken[_yToken] = _underlyingToken;\r\n    }\r\n\r\n    function set_new_sUSDTokenAddress(address _new_sUSDTokenAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        sUsdTokenAddress = _new_sUSDTokenAddress;\r\n    }\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function ZapoutToUnderlying(\r\n        address _toWhomToIssue,\r\n        address _curveExchangeAddress,\r\n        uint256 _IncomingCRV,\r\n        uint256 _tokenCount\r\n    ) public stopInEmergency {\r\n        require(\r\n            _curveExchangeAddress == sUSDCurveExchangeAddress ||\r\n                _curveExchangeAddress == yCurveExchangeAddress ||\r\n                _curveExchangeAddress == bUSDCurveExchangeAddress ||\r\n                _curveExchangeAddress == paxCurveExchangeAddress ||\r\n                _curveExchangeAddress == renCurveExchangeAddress ||\r\n                _curveExchangeAddress == sbtcCurveExchangeAddress,\r\n            \"Invalid Curve Pool Address\"\r\n        );\r\n\r\n        uint256 goodwillPortion = SafeMath.div(\r\n            SafeMath.mul(_IncomingCRV, goodwill),\r\n            10000\r\n        );\r\n\r\n        require(\r\n            IERC20(exchange2Token[_curveExchangeAddress]).transferFrom(\r\n                msg.sender,\r\n                dzgoodwillAddress,\r\n                goodwillPortion\r\n            ),\r\n            \"Error transferring goodwill\"\r\n        );\r\n\r\n        require(\r\n            IERC20(exchange2Token[_curveExchangeAddress]).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                SafeMath.sub(_IncomingCRV, goodwillPortion)\r\n            ),\r\n            \"Error transferring CRV\"\r\n        );\r\n        require(SafeMath.sub(_IncomingCRV, goodwillPortion) > 0, \"Here\");\r\n        address[] memory coins;\r\n        if (\r\n            (_curveExchangeAddress == renCurveExchangeAddress ||\r\n                _curveExchangeAddress == sbtcCurveExchangeAddress)\r\n        ) {\r\n            coins = getCoins(_curveExchangeAddress, _tokenCount);\r\n        } else {\r\n            coins = getUnderlyingCoins(_curveExchangeAddress, _tokenCount);\r\n        }\r\n\r\n        if (_tokenCount == 4) {\r\n            ICurveExchange(_curveExchangeAddress).remove_liquidity(\r\n                SafeMath.sub(_IncomingCRV, goodwillPortion),\r\n                [uint256(0), 0, 0, 0]\r\n            );\r\n        } else if (_tokenCount == 3) {\r\n            ICurveExchangeSBTC(_curveExchangeAddress).remove_liquidity(\r\n                SafeMath.sub(_IncomingCRV, goodwillPortion),\r\n                [uint256(0), 0, 0]\r\n            );\r\n        } else if (_tokenCount == 2) {\r\n            ICurveExchangeRenBTC(_curveExchangeAddress).remove_liquidity(\r\n                SafeMath.sub(_IncomingCRV, goodwillPortion),\r\n                [uint256(0), 0]\r\n            );\r\n        }\r\n\r\n        for (uint256 index = 0; index < _tokenCount; index++) {\r\n            uint256 tokenReceived = IERC20(coins[index]).balanceOf(\r\n                address(this)\r\n            );\r\n            if (tokenReceived > 0)\r\n                SafeERC20.safeTransfer(\r\n                    IERC20(coins[index]),\r\n                    _toWhomToIssue,\r\n                    tokenReceived\r\n                );\r\n        }\r\n    }\r\n\r\n    function ZapOut(\r\n        address payable _toWhomToIssue,\r\n        address _curveExchangeAddress,\r\n        uint256 _tokenCount,\r\n        uint256 _IncomingCRV,\r\n        address _ToTokenAddress,\r\n        uint256 _minToTokens\r\n    ) public stopInEmergency returns (uint256 ToTokensBought) {\r\n        require(\r\n            _curveExchangeAddress == sUSDCurveExchangeAddress ||\r\n                _curveExchangeAddress == yCurveExchangeAddress ||\r\n                _curveExchangeAddress == bUSDCurveExchangeAddress ||\r\n                _curveExchangeAddress == paxCurveExchangeAddress ||\r\n                _curveExchangeAddress == renCurveExchangeAddress ||\r\n                _curveExchangeAddress == sbtcCurveExchangeAddress,\r\n            \"Invalid Curve Pool Address\"\r\n        );\r\n\r\n        uint256 goodwillPortion = SafeMath.div(\r\n            SafeMath.mul(_IncomingCRV, goodwill),\r\n            10000\r\n        );\r\n\r\n        require(\r\n            IERC20(exchange2Token[_curveExchangeAddress]).transferFrom(\r\n                msg.sender,\r\n                dzgoodwillAddress,\r\n                goodwillPortion\r\n            ),\r\n            \"Error transferring goodwill\"\r\n        );\r\n\r\n        require(\r\n            IERC20(exchange2Token[_curveExchangeAddress]).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                SafeMath.sub(_IncomingCRV, goodwillPortion)\r\n            ),\r\n            \"Error transferring CRV\"\r\n        );\r\n\r\n        (bool flag, uint256 i) = _getIntermediateToken(\r\n            _ToTokenAddress,\r\n            _curveExchangeAddress,\r\n            _tokenCount\r\n        );\r\n\r\n        if (\r\n            flag &&\r\n            (_curveExchangeAddress == renCurveExchangeAddress ||\r\n                _curveExchangeAddress == sbtcCurveExchangeAddress)\r\n        ) {\r\n            uint256 tokenBought = _exitCurve(\r\n                _curveExchangeAddress,\r\n                i,\r\n                SafeMath.sub(_IncomingCRV, goodwillPortion)\r\n            );\r\n            require(tokenBought > 0, \"No liquidity removed\");\r\n            ToTokensBought = _swap(\r\n                _ToTokenAddress,\r\n                WBTCTokenAddress,\r\n                _toWhomToIssue,\r\n                tokenBought\r\n            );\r\n        } else if (flag) {\r\n            uint256 tokenBought = _exitCurve(\r\n                _curveExchangeAddress,\r\n                i,\r\n                SafeMath.sub(_IncomingCRV, goodwillPortion)\r\n            );\r\n            require(tokenBought > 0, \"No liquidity removed\");\r\n            // if wbtc, coin else underlying coin\r\n            ToTokensBought = _swap(\r\n                _ToTokenAddress,\r\n                ICurveExchange(_curveExchangeAddress).underlying_coins(\r\n                    int128(i)\r\n                ),\r\n                _toWhomToIssue,\r\n                tokenBought\r\n            );\r\n        } else {\r\n            //split CRV tokens received\r\n            uint256 _crv = (_IncomingCRV.sub(goodwillPortion)).div(2);\r\n            uint256 tokenBought = _exitCurve(\r\n                _curveExchangeAddress,\r\n                0,\r\n                _crv\r\n            );\r\n            require(tokenBought > 0, \"No liquidity removed\");\r\n            //swap dai\r\n            ToTokensBought = _swap(\r\n                _ToTokenAddress,\r\n                ICurveExchange(_curveExchangeAddress).underlying_coins(\r\n                    int128(0)\r\n                ),\r\n                _toWhomToIssue,\r\n                tokenBought\r\n            );\r\n            tokenBought = _exitCurve(\r\n                _curveExchangeAddress,\r\n                1,\r\n                (_IncomingCRV.sub(goodwillPortion)).sub(_crv)\r\n            );\r\n            require(tokenBought > 0, \"No liquidity removed\");\r\n            //swap usdc\r\n            ToTokensBought += _swap(\r\n                _ToTokenAddress,\r\n                ICurveExchange(_curveExchangeAddress).underlying_coins(\r\n                    int128(1)\r\n                ),\r\n                _toWhomToIssue,\r\n                tokenBought\r\n            );\r\n        }\r\n\r\n        require(ToTokensBought >= _minToTokens, \"ERR: High Slippage\");\r\n    }\r\n\r\n    function _exitCurve(\r\n        address _curveExchangeAddress,\r\n        uint256 i,\r\n        uint256 _IncomingCRV\r\n    ) internal returns (uint256 tokenReceived) {\r\n        // Withdraw to intermediate token from Curve\r\n        if (\r\n            _curveExchangeAddress == renCurveExchangeAddress ||\r\n            _curveExchangeAddress == sbtcCurveExchangeAddress\r\n        ) {\r\n            ICurveExchangeBTC(_curveExchangeAddress).remove_liquidity_one_coin(\r\n                _IncomingCRV,\r\n                int128(i),\r\n                0\r\n            );\r\n            tokenReceived = IERC20(\r\n                ICurveExchange(_curveExchangeAddress).coins(int128(i))\r\n            )\r\n                .balanceOf(address(this));\r\n        } else {\r\n            ICurveExchange(_curveExchangeAddress).remove_liquidity_one_coin(\r\n                _IncomingCRV,\r\n                int128(i),\r\n                0,\r\n                false\r\n            );\r\n            tokenReceived = IERC20(\r\n                ICurveExchange(_curveExchangeAddress).underlying_coins(\r\n                    int128(i)\r\n                )\r\n            )\r\n                .balanceOf(address(this));\r\n        }\r\n        require(tokenReceived > 0, \"No token received\");\r\n    }\r\n\r\n    function _swap(\r\n        address _toToken,\r\n        address _fromToken,\r\n        address payable _toWhomToIssue,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        if (_toToken == _fromToken) {\r\n            SafeERC20.safeTransfer(IERC20(_fromToken), _toWhomToIssue, _amount);\r\n            return _amount;\r\n        } else if (_toToken == address(0)) {\r\n            return\r\n                _token2Eth(_fromToken, _amount, _toWhomToIssue);\r\n        } else {\r\n            return\r\n                _token2Token(\r\n                    _fromToken,\r\n                    _toWhomToIssue,\r\n                    _toToken,\r\n                    _amount\r\n                );\r\n        }\r\n    }\r\n\r\n    function _getIntermediateToken(\r\n        address _ToTokenAddress,\r\n        address _curveExchangeAddress,\r\n        uint256 _tokenCount\r\n    ) public view returns (bool, uint256) {\r\n        address[] memory coins = getCoins(_curveExchangeAddress, _tokenCount);\r\n        address[] memory underlyingCoins = getUnderlyingCoins(\r\n            _curveExchangeAddress,\r\n            _tokenCount\r\n        );\r\n\r\n        //check if toToken is coin\r\n        (bool isCurveToken, uint256 index) = isBound(_ToTokenAddress, coins);\r\n        if (isCurveToken) return (true, index);\r\n\r\n        ////check if toToken is underlying coin\r\n        (isCurveToken, index) = isBound(_ToTokenAddress, underlyingCoins);\r\n        if (isCurveToken) return (true, index);\r\n\r\n        if (\r\n            _curveExchangeAddress == renCurveExchangeAddress ||\r\n            _curveExchangeAddress == sbtcCurveExchangeAddress\r\n        ) {\r\n            //return wbtc for renBTC & sBTC pools\r\n            return (true, 1);\r\n        } else return (false, 0);\r\n    }\r\n\r\n    function isBound(address _token, address[] memory coins)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (_token == address(0)) return (false, 0);\r\n        for (uint256 i = 0; i < coins.length; i++) {\r\n            if (_token == coins[i]) {\r\n                return (true, i);\r\n            }\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    function getUnderlyingCoins(\r\n        address _curveExchangeAddress,\r\n        uint256 _tokenCount\r\n    ) public view returns (address[] memory) {\r\n        if (\r\n            _curveExchangeAddress == renCurveExchangeAddress ||\r\n            _curveExchangeAddress == sbtcCurveExchangeAddress\r\n        ) {\r\n            return new address[](_tokenCount);\r\n        }\r\n        address[] memory coins = new address[](_tokenCount);\r\n        for (uint256 i = 0; i < _tokenCount; i++) {\r\n            address coin = ICurveExchange(_curveExchangeAddress)\r\n                .underlying_coins(int128(i));\r\n            coins[i] = coin;\r\n        }\r\n        return coins;\r\n    }\r\n\r\n    function getCoins(address _curveExchangeAddress, uint256 _tokenCount)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory coins = new address[](_tokenCount);\r\n        for (uint256 i = 0; i < _tokenCount; i++) {\r\n            address coin = ICurveExchange(_curveExchangeAddress).coins(\r\n                int128(i)\r\n            );\r\n            coins[i] = coin;\r\n        }\r\n        return coins;\r\n    }\r\n\r\n    function _token2Eth(\r\n        address _FromTokenContractAddress,\r\n        uint256 tokens2Trade,\r\n        address payable _toWhomToIssue\r\n    ) public returns (uint256) {\r\n        if (_FromTokenContractAddress == wethTokenAddress) {\r\n            IWETH(wethTokenAddress).withdraw(tokens2Trade);\r\n            _toWhomToIssue.transfer(tokens2Trade);\r\n            return tokens2Trade;\r\n        }\r\n        if(_FromTokenContractAddress == WBTCTokenAddress) {\r\n            IERC20(WBTCTokenAddress).approve(\r\n                address(BalWBTCPool),\r\n                tokens2Trade\r\n            );\r\n            (uint256 wethBought, ) = BalWBTCPool.swapExactAmountIn(\r\n                                        WBTCTokenAddress,\r\n                                        tokens2Trade,\r\n                                        wethTokenAddress,\r\n                                        0,\r\n                                        uint(-1)\r\n                                    );\r\n            IWETH(wethTokenAddress).withdraw(wethBought);\r\n            (bool success, ) = _toWhomToIssue.call.value(wethBought)(\"\");\r\n            require(success, \"ETH Transfer failed.\");\r\n            \r\n            return wethBought;\r\n        }\r\n\r\n        //unwrap\r\n        (uint256 tokensUnwrapped, address fromToken) = _unwrap(\r\n            _FromTokenContractAddress,\r\n            tokens2Trade\r\n        );\r\n\r\n        IERC20(fromToken).approve(\r\n            address(uniswapRouter),\r\n            tokensUnwrapped\r\n        );\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = _FromTokenContractAddress;\r\n        path[1] = wethTokenAddress;\r\n        uint256 ethBought = uniswapRouter.swapExactTokensForETH(\r\n                            tokensUnwrapped,\r\n                            1,\r\n                            path,\r\n                            _toWhomToIssue,\r\n                            now + 60\r\n                        )[path.length - 1];\r\n        \r\n        require(ethBought > 0, \"Error in swapping Eth: 1\");\r\n        return ethBought;\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to swap tokens\r\n    @param _FromTokenContractAddress The token address to swap from\r\n    @param _ToWhomToIssue The address to transfer after swap\r\n    @param _ToTokenContractAddress The token address to swap to\r\n    @param tokens2Trade The quantity of tokens to swap\r\n    @return The amount of tokens returned after swap\r\n     */\r\n    function _token2Token(\r\n        address _FromTokenContractAddress,\r\n        address _ToWhomToIssue,\r\n        address _ToTokenContractAddress,\r\n        uint256 tokens2Trade\r\n    ) public returns (uint256 tokenBought) {\r\n        //unwrap\r\n        (uint256 tokensUnwrapped, address fromToken) = _unwrap(\r\n            _FromTokenContractAddress,\r\n            tokens2Trade\r\n        );\r\n\r\n        IERC20(fromToken).approve(\r\n            address(uniswapRouter),\r\n            tokensUnwrapped\r\n        );\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = _FromTokenContractAddress;\r\n        path[1] = wethTokenAddress;\r\n        path[2] = _ToTokenContractAddress;\r\n        tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                            tokensUnwrapped,\r\n                            1,\r\n                            path,\r\n                            _ToWhomToIssue,\r\n                            now + 60\r\n                        )[path.length - 1];\r\n        \r\n        require(tokenBought > 0, \"Error in swapping ERC: 1\");\r\n    }\r\n\r\n    function _unwrap(address _FromTokenContractAddress, uint256 tokens2Trade)\r\n        internal\r\n        returns (uint256 tokensUnwrapped, address toToken)\r\n    {\r\n        if (cToken[_FromTokenContractAddress] != address(0)) {\r\n            require(\r\n                cERC20(_FromTokenContractAddress).redeem(tokens2Trade) == 0,\r\n                \"Error in unwrapping\"\r\n            );\r\n            toToken = cToken[_FromTokenContractAddress];\r\n        } else if (yToken[_FromTokenContractAddress] != address(0)) {\r\n            yERC20(_FromTokenContractAddress).withdraw(tokens2Trade);\r\n            toToken = yToken[_FromTokenContractAddress];\r\n        } else {\r\n            toToken = _FromTokenContractAddress;\r\n        }\r\n        tokensUnwrapped = IERC20(toToken).balanceOf(address(this));\r\n    }\r\n\r\n    function set_new_goodwill(uint16 _new_goodwill) public onlyOwner {\r\n        require(\r\n            _new_goodwill >= 0 && _new_goodwill < 10000,\r\n            \"GoodWill Value not allowed\"\r\n        );\r\n        goodwill = _new_goodwill;\r\n    }\r\n\r\n    function set_new_dzgoodwillAddress(address _new_dzgoodwillAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        dzgoodwillAddress = _new_dzgoodwillAddress;\r\n    }\r\n\r\n    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        _TokenAddress.transfer(owner(), qty);\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() public onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        address payable _to = owner().toPayable();\r\n        _to.transfer(contractBalance);\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_goodwill\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dzgoodwillAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveExchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingCRV\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ToTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minToTokens\",\"type\":\"uint256\"}],\"name\":\"ZapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ToTokensBought\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveExchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingCRV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"name\":\"ZapoutToUnderlying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ToTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveExchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"name\":\"_getIntermediateToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens2Trade\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"}],\"name\":\"_token2Eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ToWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ToTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens2Trade\",\"type\":\"uint256\"}],\"name\":\"_token2Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBought\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvTokenAddress\",\"type\":\"address\"}],\"name\":\"addCRVToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"addCToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"addYToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dzgoodwillAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchange2Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveExchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"name\":\"getCoins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveExchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingCoins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokengetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sUsdTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setCRVTokenAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_dzgoodwillAddress\",\"type\":\"address\"}],\"name\":\"set_new_dzgoodwillAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_new_goodwill\",\"type\":\"uint16\"}],\"name\":\"set_new_goodwill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_sUSDTokenAddress\",\"type\":\"address\"}],\"name\":\"set_new_sUSDTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setcTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Curve_General_ZapOut_V2","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e737b6afec2320f616297e59445b60a11e3ef75f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://095887631bc0e070aa1fee69b74f7285c934955f88cdd9fb52593e2497edee2e"}]}