{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n}\r\n\r\ncontract DOC_v02 {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    address private admin;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    string private last_useVersion;\r\n\r\n    struct LockDetails{\r\n        uint256 lockedTokencnt;\r\n        uint256 releaseTime;\r\n    }\r\n    struct managerDetail{\r\n        string managername;\r\n        uint8 managerlevel;\r\n    }\r\n    mapping(address => LockDetails) private Locked_list;\r\n    address[] private managerList;\r\n    mapping(address => managerDetail) private Managers;\r\n    mapping(address => mapping(bytes32 => string)) user_dataList;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    //////////////////////////////////////// Mint handle //////////////////////////////////////////    function Contadmin() public view returns (address) {return admin;}\r\n    function totalSupply() public view returns (uint256) {return _totalSupply;}\r\n    function name() public view returns (string memory) {return _name;}\r\n    function symbol() public view returns (string memory) {return _symbol;}\r\n    function getlast_useVersion() public view returns (string memory) {return last_useVersion;}\r\n    function decimals() public view returns (uint8) {return _decimals;}\r\n    //////////////////////////////////////// manager handle //////////////////////////////////////////\r\n    function admin_Add_manager(address adr, string memory mname, uint8 mlevel) public returns (bool) {\r\n        managerDetail memory isManager = Managers[msg.sender];\r\n        if(msg.sender != admin){\r\n            require( isManager.managerlevel > 14, \"This is manager level over 15 only ecode-01\");\r\n            if( mlevel > 15 ) mlevel = 15;\r\n        }\r\n        require( msg.sender != adr , \"Can not change self infomation ! ecode-01\");\r\n        \r\n        isManager = Managers[adr];\r\n        bytes memory a1 = bytes(isManager.managername);\r\n        bytes memory a2 = bytes(\"del\");\r\n        if(keccak256(a1) == keccak256(a2)) {\r\n            isManager.managername = mname;\r\n            isManager.managerlevel = mlevel;\r\n        }else if( isManager.managerlevel != 0 ){\r\n            isManager.managername = mname;\r\n            isManager.managerlevel = mlevel;\r\n        }else{\r\n            isManager = managerDetail(mname, mlevel);\r\n            managerList.push(adr);\r\n        }\r\n        Managers[adr] = isManager;\r\n        return true;\r\n    }\r\n    function get_nth_adr_manager(uint256 nth) public view returns (address) {\r\n        //managerDetail memory isManager = Managers[msg.sender];\r\n        //require( isManager.managerlevel > 14, \"This is manager level over 15 only ecode-02\");\r\n        require( nth > 0 && nth <= managerList.length,\"outofrange\");\r\n        return managerList[nth];\r\n    }\r\n    function remove_manager( address adr) public returns (bool) {\r\n        require( admin != adr, \"contract creater cannot be deleted\");\r\n        \r\n        managerDetail memory isManager = Managers[msg.sender];\r\n        require( isManager.managerlevel > 14, \"This is manager level over 15 only ecode-03\");\r\n        \r\n        managerDetail memory DeleteTarget = Managers[adr];\r\n        \r\n        require( DeleteTarget.managerlevel < 15, \"Only super admin can delete level 15 ecode-04\");\r\n        isManager = managerDetail(\"del\", 0);\r\n        Managers[adr] = isManager;\r\n        return true;\r\n    }\r\n\r\n    function get_count_manager() public view returns (uint256) {\r\n        //managerDetail memory isManager = Managers[msg.sender];\r\n        //require( isManager.managerlevel > 14, \"This is manager level over 15 only ecode-04\");\r\n        return managerList.length;\r\n    }\r\n    function get_managername(address adr) public view returns (string memory) {\r\n        //managerDetail memory isManager = Managers[msg.sender];\r\n        //require( isManager.managerlevel > 14, \"This is manager level over 15 only ecode-05\");\r\n        managerDetail memory isManager = Managers[adr];\r\n        return isManager.managername;\r\n    }\r\n\r\n    function get_managerLevel(address adr) public view returns (uint8) {\r\n        managerDetail memory isManager = Managers[msg.sender];\r\n        //require( isManager.managerlevel > 14, \"This is manager level over 15 only ecode-06\");\r\n        isManager = Managers[adr];\r\n        if( isManager.managerlevel > 0 ){\r\n            return isManager.managerlevel;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    //////////////////////////////////////// Lock token handle //////////////////////////////////////////\r\n    function Lock_wallet(address _adr, uint256 lockamount,uint256 releaseTime ) public returns (bool) {\r\n        require(Managers[msg.sender].managerlevel > 9 , \"Latam Manager only\");\r\n        _Lock_wallet(_adr,lockamount,releaseTime);\r\n        return true;\r\n    }\r\n    function _Lock_wallet(address account, uint256 amount,uint256 releaseTime) internal {\r\n        LockDetails memory eaLock = Locked_list[account];\r\n        if( eaLock.releaseTime > 0 ){\r\n            eaLock.lockedTokencnt = amount;\r\n            eaLock.releaseTime = releaseTime;\r\n        }else{\r\n            eaLock = LockDetails(amount, releaseTime);\r\n        }\r\n        Locked_list[account] = eaLock;\r\n    }\r\n    function admin_TransLock(address recipient, uint256 amount,uint256 releaseTime) public returns (bool) {\r\n        require(Managers[msg.sender].managerlevel > 9 , \"Latam Manager only\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n         _Lock_wallet(recipient,amount,releaseTime);\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function getwithdrawablemax(address account) public view returns (uint256) {\r\n        return Locked_list[account].lockedTokencnt;\r\n    }\r\n\r\n    function getLocked_list(address account) public view returns (uint256) {\r\n        return Locked_list[account].releaseTime;\r\n    }\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        last_useVersion = \"Ver 1\";\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 LockhasTime = Locked_list[sender].releaseTime;\r\n        uint256 LockhasMax = Locked_list[sender].lockedTokencnt;\r\n        if( block.timestamp < LockhasTime){\r\n            require( _balances[sender] >= amount , \"You have not enough balance.\");\r\n            uint256 OK1 = _balances[sender].sub( LockhasMax);\r\n            require( OK1 >= amount , \"Your Wallet has time lock\");\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(msg.sender, amount);\r\n    }\r\n    \r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        require(msg.sender == admin, \"Admin only can burn  8547\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    //////////////////////////////////////// Lock token handle //////////////////////////////////////////\r\n\r\n    function getStringData(bytes32 key) public view returns (string memory) {\r\n        return user_dataList[msg.sender][key];\r\n    }\r\n    function setStringData(bytes32 key, string memory value) public {\r\n        user_dataList[msg.sender][key] = value;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLocked_list\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"remove_manager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setStringData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nth\",\"type\":\"uint256\"}],\"name\":\"get_nth_adr_manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"lockamount\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Lock_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"},{\"name\":\"mname\",\"type\":\"string\"},{\"name\":\"mlevel\",\"type\":\"uint8\"}],\"name\":\"admin_Add_manager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"get_managerLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getStringData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"get_managername\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"admin_TransLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_count_manager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getwithdrawablemax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getlast_useVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DOC_v02","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fa25cf00b26e791def8b9f5f50c59c8b51d2509f8a6e9db7fafc3a6a1bd54a72"}]}