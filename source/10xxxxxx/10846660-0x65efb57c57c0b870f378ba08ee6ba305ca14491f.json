{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 <0.6.0;\r\n\r\ncontract Fast3Matrix{\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        bool block;\r\n        uint8 partnercount;\r\n        uint8 level;\r\n        uint8 levelallw;\r\n        mapping(uint8 => address[]) partners;\r\n        mapping(uint8 => uint[]) D5No;\r\n       \r\n    }\r\n    \r\n    \r\n    uint8[6] private referrallevel = [\r\n       10,2,2,2,2,2\r\n    ];\r\n    \r\n    uint[] private L5Matrix;\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public userIds;\r\n    mapping(address => uint) public balances; \r\n    \r\n    uint public lastUserId = 2;\r\n    uint private benid = 1;\r\n    uint8 private seqid = 0;\r\n    address public owner;\r\n    \r\n    event payout(address indexed sender,address indexed receiver,uint indexed dividend,uint8 matrix,uint8 level,uint8 position);\r\n    event Reentry(address indexed sender,uint senderid,uint8 level,uint8 status);\r\n    event Testor(uint benid,uint8 seqid,uint8 status);\r\n\r\n   \r\n    \r\n    constructor(address ownerAddress) public {\r\n        \r\n        owner = ownerAddress;\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnercount : 0,\r\n          //  partners: address(0),\r\n            block: false,\r\n            levelallw:1,\r\n            level : 1\r\n        });\r\n        seqid = 1;\r\n        users[ownerAddress] = user;\r\n        userIds[1] = ownerAddress;\r\n        users[ownerAddress].D5No[0].push(1);\r\n        L5Matrix.push(1);\r\n        L5Matrix.push(1);\r\n    }\r\n    \r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, owner,msg.value);\r\n        }\r\n        \r\n        registration(msg.sender, bytesToAddress(msg.data),msg.value);\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external payable {\r\n       registration(msg.sender, referrerAddress,msg.value);\r\n    }\r\n    \r\n    function addtoMatrix(uint newseqid,uint8 status) private{\r\n        uint newid = uint(L5Matrix.length);\r\n        newid = newid + 1;\r\n        users[userIds[newseqid]].level++;\r\n        users[userIds[newseqid]].D5No[0].push(newid);\r\n        L5Matrix.push(newseqid);\r\n        emit Reentry(userIds[newseqid],newid,users[userIds[newseqid]].level,status);\r\n     }\r\n    \r\n    function registration(address userAddress, address referrerAddress,uint buyvalue) private {\r\n        require(msg.value == 0.25 ether, \"registration cost 0.25\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnercount :0,\r\n            block: false,\r\n            levelallw:1,\r\n            level : 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        users[userAddress].referrer = referrerAddress;\r\n        userIds[lastUserId] = userAddress;\r\n        \r\n        users[referrerAddress].partners[0].push(userAddress);\r\n        users[referrerAddress].partnercount++;\r\n        users[referrerAddress].levelallw = users[referrerAddress].levelallw + 2;\r\n        addtoMatrix(lastUserId,1);\r\n        lastUserId++;\r\n        levelreward(userAddress,referrerAddress,buyvalue);\r\n        findbenid(userAddress,buyvalue);\r\n    }\r\n\r\n    function levelreward(address userAddress,address referrerAddress,uint buyvalue) private{\r\n        uint8 count = 1;\r\n        uint dividend;\r\n        while(count < 7){\r\n            dividend = referrallevel[count-1] * buyvalue / 100;\r\n            if (referrerAddress != owner) {\r\n                emit payout(userAddress,referrerAddress,dividend,2,0,count);\r\n                sendreward(referrerAddress,dividend);\r\n                referrerAddress = users[referrerAddress].referrer;\r\n            }else{\r\n                emit payout(userAddress,owner,dividend,2,0,count);\r\n                sendreward(owner,dividend); \r\n            }\r\n            count++;\r\n        }\r\n    \r\n    }\r\n    \r\n    function findbenid(address userAddress,uint buyvalue) private {\r\n        uint dividend = 80 * buyvalue / 100;\r\n       address reinvest = userAddress;\r\n        if(seqid == 3){\r\n            //users[userIds[newseqid]].level;\r\n            emit payout(userAddress,userIds[L5Matrix[benid]],0,1,users[userIds[L5Matrix[benid]]].level,seqid);\r\n            addtoMatrix(L5Matrix[benid],2);\r\n            reinvest = userIds[L5Matrix[benid]];\r\n            benid = findqualifier(benid,userAddress);\r\n            seqid = 1;\r\n        }\r\n            emit payout(reinvest,userIds[L5Matrix[benid]],dividend,1,users[userIds[L5Matrix[benid]]].level,seqid);\r\n        sendreward(userIds[L5Matrix[benid]],dividend);\r\n        seqid++;\r\n     }\r\n      \r\n    function findqualifier(uint newseqid,address userAddress) internal returns(uint) {\r\n        uint newbenid = 0;\r\n        while (newbenid == 0) {\r\n            newseqid++;\r\n            if (users[userIds[L5Matrix[newseqid]]].level <= users[userIds[L5Matrix[newseqid]]].levelallw) {\r\n                newbenid = newseqid;\r\n            }else{\r\n                users[userIds[L5Matrix[newseqid]]].block = true;\r\n                emit Reentry(userAddress,newseqid,users[userIds[L5Matrix[newseqid]]].level,3);\r\n            }\r\n        }\r\n        return newseqid;\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    \r\n    function usersD5Matrix(address userAddress) public view returns(uint, uint[] memory) {\r\n        return (L5Matrix.length,users[userAddress].D5No[0]);\r\n    }\r\n    \r\n    function userspartner(address userAddress) public view returns(address[] memory) {\r\n        return (users[userAddress].partners[0]);\r\n    }\r\n    \r\n\r\n    function sendreward(address receiver,uint dividend) private {\r\n        \r\n        if (!address(uint160(receiver)).send(dividend)) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n        \r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Reentry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"benid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"seqid\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Testor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"position\",\"type\":\"uint8\"}],\"name\":\"payout\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"block\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"partnercount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"levelallw\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"usersD5Matrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userspartner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Fast3Matrix","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a97d3d7ecddee9403c4f1b2531ca6726dda78d2a","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://806b439142fe6766b1ca56d9ce89ba8e082eb14f682e0e281ad993731cc8e74d"}]}