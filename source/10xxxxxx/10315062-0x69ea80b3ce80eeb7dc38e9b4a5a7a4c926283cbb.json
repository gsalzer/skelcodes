{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n    \r\ncontract ShapeshiftVault {\r\n    address private owner;\r\n    bytes32 private vaulthash;\r\n    uint256 private unlockDate;\r\n    event Initialized(uint256 _unlockDate);\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        unlockDate = now + 3 days;\r\n        emit Initialized(unlockDate);\r\n    }\r\n    modifier onlyOwner(){\r\n        require(owner == msg.sender,'unauthorized');\r\n        _;\r\n    }\r\n    function setVault(bytes32 _hash) public onlyOwner {\r\n        vaulthash = _hash;\r\n    } \r\n    function message() public pure returns( string memory) {\r\n        return \"contact me on email@cryptoguard.pw to retrieve\";\r\n    }\r\n    function message2() public pure returns( string memory) {\r\n        return \"i send an email to security@shapeshift.io but got no response\";\r\n    }\r\n    function message3() public pure returns( string memory) {\r\n        return \"for safekeeping till time expires\";\r\n    }\r\n    function withdraw(address payable _to) public onlyOwner{\r\n        require(unlockDate < now);\r\n        _to.transfer(address(this).balance);\r\n    }\r\n    function withdrawTokens(address _to, IERC20 _token) public onlyOwner{\r\n        require(unlockDate < now);\r\n        _token.transfer(_to, _token.balanceOf(address(this)));\r\n    }\r\n    function getHashOf(string memory _string) public pure returns(bytes32) {\r\n        return keccak256(abi.encode(_string));\r\n    }\r\n    function retrieve(string memory password, address payable _to) public {\r\n        bytes32 hash = keccak256(abi.encode(password));\r\n        require(hash == vaulthash);\r\n        _to.transfer(address(this).balance);\r\n    }\r\n    function retrieveTokens(string memory password, address _to, IERC20 _token) public {\r\n        bytes32 hash = keccak256(abi.encode(password));\r\n        require(hash == vaulthash);\r\n        _token.transfer(_to, _token.balanceOf(address(this)));\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"getHashOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message3\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ShapeshiftVault","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}