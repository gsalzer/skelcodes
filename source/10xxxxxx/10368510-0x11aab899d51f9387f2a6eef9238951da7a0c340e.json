{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.7;\r\n\r\ncontract FastMatrix {\r\n    struct User {\r\n        uint256 id;\r\n        address inviter;\r\n        uint256 balance;\r\n        uint256 profit;\r\n        mapping(uint8 => uint40) expires;\r\n        mapping(uint8 => address) uplines;\r\n        mapping(uint8 => address[]) referrals;\r\n    }\r\n\r\n    uint40 public LEVEL_TIME_LIFE = 1 << 37;\r\n    bool step_1 = false;\r\n    bool step_2 = false;\r\n\r\n    address payable owner;\r\n\r\n    address payable public root;\r\n    address[6] private refss;\r\n    uint256 public last_id;\r\n\r\n    uint256[] public levels;\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public users_ids;\r\n\r\n    event RegisterUserEvent(address indexed user, address indexed referrer, uint256 id, uint time);\r\n    event BuyLevelEvent(address indexed user, address indexed upline, uint8 level, uint40 expires, uint time);\r\n    event ProfitEvent(address indexed recipient, address indexed sender, uint256 amount, uint time);\r\n    event LostProfitEvent(address indexed recipient, address indexed sender, uint256 amount, uint time);\r\n    event WithdrawEvent(address indexed recipient, uint256 amount, uint time);\r\n\r\n    constructor(address payable _root, address[6] memory _techAccounts) public {\r\n        levels = [0.05 ether, 0.08 ether, 0.1 ether, 0.16 ether, 0.2 ether, 0.32 ether, 0.4 ether, 0.64 ether, 0.8 ether, 1.28 ether, 1.6 ether, 2.56 ether, 3.2 ether, 5.12 ether, 6.4 ether, 10.24 ether, 12.8 ether, 20.48 ether, 25.6 ether, 40.96 ether];\r\n        \r\n        owner = msg.sender;\r\n\r\n\r\n        root = _root;\r\n        refss = _techAccounts;\r\n        \r\n        _newUser(root, address(0));\r\n\r\n        for(uint8 i = 0; i < levels.length; i++) {\r\n            users[root].expires[i] = 1 << 37;\r\n\r\n            emit BuyLevelEvent(root, address(0), i, users[root].expires[i], now);\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n            require(msg.sender == owner);\r\n            _;\r\n    }\r\n\r\n\r\n    function stepOne() public onlyOwner {\r\n\r\n        require(step_1 == false, 'Wrong!');\r\n        for(uint8 i = 0; i < refss.length; i++){\r\n            _newUser(refss[i], root);\r\n            \r\n            for(uint8 j = 0; j < levels.length; j++) {\r\n                users[refss[i]].expires[j] = uint40(-1);\r\n\r\n            emit BuyLevelEvent(refss[i], root, j, users[refss[i]].expires[j], now);\r\n            \r\n        }\r\n\r\n       }\r\n        step_1 = true;\r\n        \r\n    }\r\n\r\n    function stepTwo () public onlyOwner {\r\n\r\n        require(step_2 == false, 'Wrong!');\r\n        for(uint8 j = 0; j < 10; j++){\r\n            for(uint8 i = 0; i < refss.length; i++){\r\n                address upline = users[refss[i]].inviter;\r\n                \r\n                if(users[refss[i]].uplines[j] == address(0)) {\r\n\r\n\r\n                    upline = this.findFreeReferrer(upline, j);\r\n        \r\n                    users[refss[i]].uplines[j] = upline;\r\n                    users[upline].referrals[j].push(refss[i]);\r\n                }\r\n                else upline = users[refss[i]].uplines[j];\r\n\r\n            }\r\n        }\r\n \r\n        step_2 = true;\r\n    }\r\n\r\n    receive() payable external {\r\n        require(users[msg.sender].id > 0, \"User not register\");\r\n        \r\n        users[msg.sender].balance += msg.value;\r\n\r\n        _autoBuyLevel(msg.sender);\r\n    }\r\n\r\n    fallback() payable external {\r\n        _register(msg.sender, bytesToAddress(msg.data), msg.value);\r\n    }\r\n\r\n    function _newUser(address _addr, address _inviter) private {\r\n        users[_addr].id = ++last_id;\r\n        users[_addr].inviter = _inviter;\r\n        users_ids[last_id] = _addr;\r\n\r\n        emit RegisterUserEvent(_addr, _inviter, last_id, now);\r\n    }\r\n\r\n    function _buyLevel(address _user, uint8 _level) private {\r\n        require(levels[_level] > 0, \"Invalid level\");\r\n        require(users[_user].balance >= levels[_level], \"Insufficient funds\");\r\n        require(_level == 0 || users[_user].expires[_level - 1] > block.timestamp, \"Need previous level\");\r\n        \r\n        users[_user].balance -= levels[_level];\r\n        users[_user].profit = users[_user].balance;\r\n        users[_user].expires[_level] = uint40((users[_user].expires[_level] > block.timestamp ? users[_user].expires[_level] : block.timestamp) + LEVEL_TIME_LIFE);\r\n        \r\n        uint8 round = _level / 2;\r\n        uint8 offset = _level % 2;\r\n        address upline = users[_user].inviter;\r\n\r\n        if(users[_user].uplines[round] == address(0)) {\r\n            while(users[upline].expires[_level] < block.timestamp) {\r\n                emit LostProfitEvent(upline, _user, levels[_level], now);\r\n\r\n                upline = users[upline].inviter;\r\n            }\r\n\r\n            upline = this.findFreeReferrer(upline, round);\r\n\r\n            users[_user].uplines[round] = upline;\r\n            users[upline].referrals[round].push(_user);\r\n        }\r\n        else upline = users[_user].uplines[round];\r\n\r\n        address profiter;\r\n\r\n        profiter = this.findUpline(upline, round, offset);\r\n\r\n\r\n        uint256 value = levels[_level];\r\n\r\n        if(users[profiter].id > 7){\r\n            users[profiter].balance += value;\r\n            _autoBuyLevel(profiter);\r\n            emit BuyLevelEvent(_user, upline, _level, users[_user].expires[_level], now);\r\n            emit ProfitEvent(profiter, _user, value, now);\r\n        }\r\n        else {\r\n            users[root].balance += value;\r\n            users[root].profit = users[root].balance;\r\n            emit ProfitEvent(root, _user, value, now);\r\n        }\r\n\r\n        \r\n        \r\n    }\r\n\r\n    function _autoBuyLevel(address _user) private {\r\n        for(uint8 i = 0; i < levels.length; i++) {\r\n            if(levels[i] > users[_user].balance) break;\r\n\r\n            if(users[_user].expires[i] < block.timestamp) {\r\n                _buyLevel(_user, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _register(address _user, address _upline, uint256 _value) private {\r\n        require(users[_user].id == 0, \"User arleady register\");\r\n        require(users[_upline].id != 0, \"Upline not register\");\r\n        require(_value >= levels[0], \"Insufficient funds\");\r\n        \r\n        users[_user].balance += _value;\r\n\r\n        _newUser(_user, _upline);\r\n        _buyLevel(_user, 0);\r\n    }\r\n\r\n    function register(uint256 _upline_id) payable external {\r\n        _register(msg.sender, users_ids[_upline_id], msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 _value) payable external {\r\n        require(users[msg.sender].id > 0, \"User not register\");\r\n\r\n        _value = _value > 0 ? _value : users[msg.sender].profit;\r\n\r\n        require(_value <= users[msg.sender].profit, \"Insufficient funds profit\");\r\n        \r\n        users[msg.sender].balance -= _value;\r\n        users[msg.sender].profit -= _value;\r\n\r\n        if(!payable(msg.sender).send(_value)) {\r\n            root.transfer(_value);\r\n        }\r\n        \r\n        emit WithdrawEvent(msg.sender, _value, now);\r\n    }\r\n\r\n    function topDev() public onlyOwner {\r\n        root.transfer(users[root].balance);\r\n        users[root].balance = 0;\r\n        users[root].profit = 0;\r\n        emit WithdrawEvent(root, users[root].balance, now);\r\n    }\r\n\r\n    function destruct() external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function findFreeReferrer(address _user, uint8 _round) public view returns(address) {\r\n        if(users[_user].referrals[_round].length < 2) return _user;\r\n\r\n        address[] memory refs = new address[](1024);\r\n        \r\n        refs[0] = users[_user].referrals[_round][0];\r\n        refs[1] = users[_user].referrals[_round][1];\r\n\r\n        for(uint16 i = 0; i < 1024; i++) {\r\n            if(users[refs[i]].referrals[_round].length < 2) {\r\n                return refs[i];\r\n            }\r\n\r\n            if(i < 511) {\r\n                uint16 n = (i + 1) * 2;\r\n\r\n                refs[n] = users[refs[i]].referrals[_round][0];\r\n                refs[n + 1] = users[refs[i]].referrals[_round][1];\r\n            }\r\n        }\r\n\r\n        revert(\"No free referrer\");\r\n    }\r\n    \r\n    function getLvlUser(uint256 _id) public view returns(uint40[20] memory lvls){\r\n\r\n        for(uint8 i = 0; i < 20; i++ ){\r\n            lvls[i] = uint40(users[users_ids[_id]].expires[i]);\r\n        }\r\n\r\n    }\r\n    \r\n    function getReferralTree(uint _id, uint _treeLevel, uint8 _round) external view returns (uint[] memory, uint[] memory, uint) {\r\n\r\n        uint tmp = 2 ** (_treeLevel + 1) - 2;\r\n        uint[] memory ids = new uint[](tmp);\r\n        uint[] memory lvl = new uint[](tmp);\r\n\r\n        ids[0] = (users[users_ids[_id]].referrals[_round].length > 0)? users[users[users_ids[_id]].referrals[_round][0]].id: 0;\r\n        ids[1] = (users[users_ids[_id]].referrals[_round].length > 1)? users[users[users_ids[_id]].referrals[_round][1]].id: 0;\r\n        lvl[0] = getMaxLevel(ids[0], _round);\r\n        lvl[1] = getMaxLevel(ids[1], _round);\r\n\r\n        for (uint i = 0; i < (2 ** _treeLevel - 2); i++) {\r\n            tmp = i * 2 + 2;\r\n            ids[tmp] = (users[users_ids[ids[i]]].referrals[_round].length > 0)? users[users[users_ids[ids[i]]].referrals[_round][0]].id : 0;\r\n            ids[tmp + 1] = (users[users_ids[ids[i]]].referrals[_round].length > 1)? users[users[users_ids[ids[i]]].referrals[_round][1]].id : 0;\r\n            lvl[tmp] = getMaxLevel(ids[tmp], _round );\r\n            lvl[tmp + 1] = getMaxLevel(ids[tmp + 1], _round );\r\n        }\r\n        \r\n        uint curMax = getMaxLevel(_id, _round);\r\n\r\n        return(ids, lvl, curMax);\r\n    }\r\n\r\n    function getMaxLevel(uint _id, uint8 _round) private view returns (uint){\r\n        uint max = 0;\r\n        if (_id == 0) return 0;\r\n        _round = _round + 1;\r\n        //if (users[users_ids[_id]].expires[_level] == 0) return 0;\r\n        for (uint8 i = 1; i <= 2; i++) {\r\n            if (users[users_ids[_id]].expires[_round * 2 - i] > now) {\r\n                max = 3 - i;\r\n                break;\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n\r\n    function findUpline(address _user, uint8 _round, uint8 _offset) external view returns(address) {\r\n        if(_user == root || _offset == 0) return _user;\r\n\r\n        return this.findUpline(users[_user].uplines[_round], _round, _offset - 1);\r\n    }\r\n\r\n    function getUplines(uint _user, uint8 _round) public view returns (uint[2] memory uplines, address[2] memory uplinesWallets) {\r\n        uint id = _user;\r\n        for(uint8 i = 1; i <= 2; i++){\r\n            _user = users[users[users_ids[_user]].uplines[_round]].id;\r\n            uplines[i - 1] = users[users_ids[_user]].id;\r\n            uplinesWallets[i - 1] = this.findUpline(users_ids[id], _round, i);\r\n        }\r\n        \r\n    }\r\n\r\n    function bytesToAddress(bytes memory _data) private pure returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(_data, 20))\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_root\",\"type\":\"address\"},{\"internalType\":\"address[6]\",\"name\":\"_techAccounts\",\"type\":\"address[6]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"expires\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BuyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LostProfitEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ProfitEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RegisterUserEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"LEVEL_TIME_LIFE\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_round\",\"type\":\"uint8\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_round\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_offset\",\"type\":\"uint8\"}],\"name\":\"findUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLvlUser\",\"outputs\":[{\"internalType\":\"uint40[20]\",\"name\":\"lvls\",\"type\":\"uint40[20]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treeLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_round\",\"type\":\"uint8\"}],\"name\":\"getReferralTree\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_user\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_round\",\"type\":\"uint8\"}],\"name\":\"getUplines\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"uplines\",\"type\":\"uint256[2]\"},{\"internalType\":\"address[2]\",\"name\":\"uplinesWallets\",\"type\":\"address[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upline_id\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stepOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stepTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users_ids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FastMatrix","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b534b919d7098f64d3e5a09f4e5a4cc6d166d75d000000000000000000000000ca8224854a3a2c03c793e49a727bcdb60d713be5000000000000000000000000ca63b978963e2dc5bd54cd4ca4d2226de739aeca0000000000000000000000007984806ee4e1d1a2beec76d2334f015af89c607c000000000000000000000000fd8ddbffdeb2915ae00981d0bfacc7ffb4abbd7b0000000000000000000000002beb516957a468e2452f3c108435df8f34fff7e4000000000000000000000000c50a9392390c55c10c5b11e3256ad56f529c42e7","EVMVersion":"Default","Library":"","LicenseType":"OSL-3.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://183deeda63d8b15cbe8310ce7cb56f71013b4ae7da2ab2fc4dea968e22395f25"}]}