{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * SafeMath from OpenZeppelin - commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/5dfe7215a9156465d550030eadc08770503b2b2f\r\n *\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title MBDAAsset is a template for MB Digital Asset token\r\n * */\r\ncontract MBDAAsset {\r\n    using SafeMath for uint256;\r\n\r\n    //\r\n    // events\r\n    //\r\n    // ERC20 events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    // mint/burn events\r\n    event Mint(address indexed _to, uint256 _amount, uint256 _newTotalSupply);\r\n    event Burn(address indexed _from, uint256 _amount, uint256 _newTotalSupply);\r\n\r\n    // admin events\r\n    event BlockLockSet(uint256 _value);\r\n    event NewAdmin(address _newAdmin);\r\n    event NewManager(address _newManager);\r\n    event NewInvestor(address _newInvestor);\r\n    event RemovedInvestor(address _investor);\r\n    event FundAssetsChanged(\r\n        string indexed tokenSymbol,\r\n        string assetInfo,\r\n        uint8 amount,\r\n        uint256 totalAssetAmount\r\n    );\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"Only admin can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    modifier managerOrAdmin {\r\n        require(\r\n            msg.sender == manager || msg.sender == admin,\r\n            \"Only manager or admin can perform this operation\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier boardOrAdmin {\r\n        require(\r\n            msg.sender == board || msg.sender == admin,\r\n            \"Only admin or board can perform this operation\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier blockLock(address _sender) {\r\n        require(\r\n            !isLocked() || _sender == admin,\r\n            \"Contract is locked except for the admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfMintable() {\r\n      require(mintable, \"Token minting is disabled\");\r\n      _;\r\n    }\r\n\r\n    struct Asset {\r\n        string assetTicker;\r\n        string assetInfo;\r\n        uint8 assetPercentageParticipation;\r\n    }\r\n\r\n    struct Investor {\r\n        string info;\r\n        bool exists;\r\n    }\r\n\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    address public admin;\r\n    address public board;\r\n    address public manager;\r\n    uint256 public lockedUntilBlock;\r\n    bool public canChangeAssets;\r\n    bool public mintable;\r\n    bool public hasWhiteList;\r\n    bool public isSyndicate;\r\n    string public urlFinancialDetailsDocument;\r\n    bytes32 public financialDetailsHash;\r\n    string[] public tradingPlatforms;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n    mapping(address => Investor) public clearedInvestors;\r\n    Asset[] public assets;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _fundAdmin - Fund admin\r\n     * @param _fundBoard - Board\r\n     * @param _tokenName - Detailed ERC20 token name\r\n     * @param _decimalUnits - Detailed ERC20 decimal units\r\n     * @param _tokenSymbol - Detailed ERC20 token symbol\r\n     * @param _lockedUntilBlock - Block lock\r\n     * @param _newTotalSupply - Total Supply owned by the contract itself, only Manager can move\r\n     * @param _canChangeAssets - True allows the Manager to change assets in the portfolio\r\n     * @param _mintable - True allows Manager to rebalance the portfolio\r\n     * @param _hasWhiteList - Allows transfering only between whitelisted addresses\r\n     * @param _isSyndicate - Allows secondary market\r\n     */\r\n    constructor(\r\n        address _fundAdmin,\r\n        address _fundBoard,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        uint256 _lockedUntilBlock,\r\n        uint256 _newTotalSupply,\r\n        bool _canChangeAssets,\r\n        bool _mintable,\r\n        bool _hasWhiteList,\r\n        bool _isSyndicate\r\n    ) public {\r\n        name = _tokenName;\r\n        require(_decimalUnits <= 18, \"Decimal units should be 18 or lower\");\r\n        decimals = _decimalUnits;\r\n        symbol = _tokenSymbol;\r\n        lockedUntilBlock = _lockedUntilBlock;\r\n        admin = _fundAdmin;\r\n        board = _fundBoard;\r\n        totalSupply = _newTotalSupply;\r\n        canChangeAssets = _canChangeAssets;\r\n        mintable = _mintable;\r\n        hasWhiteList = _hasWhiteList;\r\n        isSyndicate = _isSyndicate;\r\n        balances[address(this)] = totalSupply;\r\n        Investor memory tmp = Investor(\"Contract\", true);\r\n        clearedInvestors[address(this)] = tmp;\r\n        emit NewInvestor(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Set financial details url\r\n     * @param _url - URL\r\n     * @return True if success\r\n     */\r\n    function setFinancialDetails(string memory _url)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        urlFinancialDetailsDocument = _url;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set financial details IPFS hash\r\n     * @param _hash - URL\r\n     * @return True if success\r\n     */\r\n    function setFinancialDetailsHash(bytes32 _hash)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        financialDetailsHash = _hash;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Add trading platform\r\n     * @param _details - Details of the trading platform\r\n     * @return True if success\r\n     */\r\n    function addTradingPlatform(string memory _details)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        tradingPlatforms.push(_details);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove trading platform\r\n     * @param _index - Index of the trading platform to be removed\r\n     * @return True if success\r\n     */\r\n    function removeTradingPlatform(uint256 _index)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_index < tradingPlatforms.length, \"Invalid platform index\");\r\n        tradingPlatforms[_index] = tradingPlatforms[tradingPlatforms.length -\r\n            1];\r\n        tradingPlatforms.pop();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Whitelists an Investor\r\n     * @param _investor - Address of the investor\r\n     * @param _investorInfo - Info\r\n     * @return True if success\r\n     */\r\n    function addNewInvestor(address _investor, string memory _investorInfo)\r\n        public\r\n        onlyAdmin\r\n        returns (bool)\r\n    {\r\n        require(_investor != address(0), \"Invalid investor address\");\r\n        Investor memory tmp = Investor(_investorInfo, true);\r\n        clearedInvestors[_investor] = tmp;\r\n        emit NewInvestor(_investor);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes an Investor from whitelist\r\n     * @param _investor - Address of the investor\r\n     * @return True if success\r\n     */\r\n    function removeInvestor(address _investor) public onlyAdmin returns (bool) {\r\n        require(_investor != address(0), \"Invalid investor address\");\r\n        delete (clearedInvestors[_investor]);\r\n        emit RemovedInvestor(_investor);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new asset to Portfolio\r\n     * @param _assetTicker - Ticker\r\n     * @param _assetInfo - Info\r\n     * @param _assetPercentageParticipation - % of portfolio taken by the asset\r\n     * @return success\r\n     */\r\n    function addNewAsset(\r\n        string memory _assetTicker,\r\n        string memory _assetInfo,\r\n        uint8 _assetPercentageParticipation\r\n    ) public onlyAdmin returns (bool success) {\r\n        uint256 totalPercentageAssets = 0;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            require(\r\n                keccak256(bytes(_assetTicker)) !=\r\n                    keccak256(bytes(assets[i].assetTicker)),\r\n                \"An asset cannot be assigned twice\"\r\n            );\r\n            totalPercentageAssets = SafeMath.add(\r\n                assets[i].assetPercentageParticipation,\r\n                totalPercentageAssets\r\n            );\r\n        }\r\n        totalPercentageAssets = SafeMath.add(\r\n            totalPercentageAssets,\r\n            _assetPercentageParticipation\r\n        );\r\n        require(\r\n            totalPercentageAssets <= 100,\r\n            \"Total assets number cannot be higher than 100\"\r\n        );\r\n        emit FundAssetsChanged(\r\n            _assetTicker,\r\n            _assetInfo,\r\n            _assetPercentageParticipation,\r\n            totalPercentageAssets\r\n        );\r\n        Asset memory newAsset = Asset(\r\n            _assetTicker,\r\n            _assetInfo,\r\n            _assetPercentageParticipation\r\n        );\r\n        assets.push(newAsset);\r\n        success = true;\r\n        return success;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove asset from Portfolio\r\n     * @param _assetIndex - Asset\r\n     * @return True if success\r\n     */\r\n    function removeAnAsset(uint8 _assetIndex) public onlyAdmin returns (bool) {\r\n        require(canChangeAssets, \"Cannot change asset portfolio\");\r\n        require(\r\n            _assetIndex < assets.length,\r\n            \"Invalid asset index number. Greater than total assets\"\r\n        );\r\n        string memory assetTicker = assets[_assetIndex].assetTicker;\r\n        assets[_assetIndex] = assets[assets.length - 1];\r\n        delete assets[assets.length - 1];\r\n        assets.pop();\r\n        emit FundAssetsChanged(assetTicker, \"\", 0, 0);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates an asset\r\n     * @param _assetTicker - Ticker\r\n     * @param _assetInfo - Info to update\r\n     * @param _newAmount - % of portfolio taken by the asset\r\n     * @return True if success\r\n     */\r\n    function updateAnAssetQuantity(\r\n        string memory _assetTicker,\r\n        string memory _assetInfo,\r\n        uint8 _newAmount\r\n    ) public onlyAdmin returns (bool) {\r\n        require(canChangeAssets, \"Cannot change asset amount\");\r\n        require(_newAmount > 0, \"Cannot set zero asset amount\");\r\n        uint256 totalAssets = 0;\r\n        uint256 assetIndex = 0;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            if (\r\n                keccak256(bytes(_assetTicker)) ==\r\n                keccak256(bytes(assets[i].assetTicker))\r\n            ) {\r\n                assetIndex = i;\r\n                totalAssets = SafeMath.add(totalAssets, _newAmount);\r\n            } else {\r\n                totalAssets = SafeMath.add(\r\n                    totalAssets,\r\n                    assets[i].assetPercentageParticipation\r\n                );\r\n            }\r\n        }\r\n        emit FundAssetsChanged(\r\n            _assetTicker,\r\n            _assetInfo,\r\n            _newAmount,\r\n            totalAssets\r\n        );\r\n        require(\r\n            totalAssets <= 100,\r\n            \"Fund assets total percentage must be less than 100\"\r\n        );\r\n        assets[assetIndex].assetPercentageParticipation = _newAmount;\r\n        assets[assetIndex].assetInfo = _assetInfo;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return Number of assets in Portfolio\r\n     */\r\n    function totalAssetsArray() public view returns (uint256) {\r\n        return assets.length;\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 Transfer\r\n     * @param _to - destination address\r\n     * @param _value - value to transfer\r\n     * @return True if success\r\n     */\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\r\n        require(\r\n            isTransferValid(from, _to, _value),\r\n            \"Invalid Transfer Operation\"\r\n        );\r\n        balances[from] = balances[from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 Approve\r\n     * @param _spender - destination address\r\n     * @param _value - value to be approved\r\n     * @return True if success\r\n     */\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        address from = (admin == msg.sender) ? address(this) : msg.sender;\r\n        allowed[from][_spender] = _value;\r\n        emit Approval(from, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 TransferFrom\r\n     * @param _from - source address\r\n     * @param _to - destination address\r\n     * @param _value - value\r\n     * @return True if success\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        blockLock(_from)\r\n        returns (bool)\r\n    {\r\n        // check sufficient allowance\r\n        require(\r\n            _value <= allowed[_from][msg.sender],\r\n            \"Value informed is invalid\"\r\n        );\r\n        require(\r\n            isTransferValid(_from, _to, _value),\r\n            \"Invalid Transfer Operation\"\r\n        );\r\n        // transfer tokens\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(\r\n            _value,\r\n            \"Value lower than approval\"\r\n        );\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint new tokens. Can only be called by minter or owner\r\n     * @param _to - destination address\r\n     * @param _value - value\r\n     * @return True if success\r\n     */\r\n    function mint(address _to, uint256 _value)\r\n        public\r\n        onlyIfMintable\r\n        managerOrAdmin\r\n        blockLock(msg.sender)\r\n        returns (bool)\r\n    {\r\n        balances[_to] = balances[_to].add(_value);\r\n        totalSupply = totalSupply.add(_value);\r\n\r\n        emit Mint(_to, _value, totalSupply);\r\n        emit Transfer(address(0), _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens\r\n     * @param _account - address\r\n     * @param _value - value\r\n     * @return True if success\r\n     */\r\n    function burn(address payable _account, uint256 _value)\r\n        public\r\n        payable\r\n        blockLock(msg.sender)\r\n        managerOrAdmin\r\n        returns (bool)\r\n    {\r\n        require(_account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n        balances[_account] = balances[_account].sub(_value);\r\n        emit Transfer(_account, address(0), _value);\r\n        emit Burn(_account, _value, totalSupply);\r\n        if (msg.value > 0) {\r\n            (bool success, ) = _account.call{value: msg.value}(\"\");\r\n            require(success, \"Ether transfer failed.\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set block lock. Until that block (exclusive) transfers are disallowed\r\n     * @param _lockedUntilBlock - Block Number\r\n     * @return True if success\r\n     */\r\n    function setBlockLock(uint256 _lockedUntilBlock)\r\n        public\r\n        boardOrAdmin\r\n        returns (bool)\r\n    {\r\n        lockedUntilBlock = _lockedUntilBlock;\r\n        emit BlockLockSet(_lockedUntilBlock);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Replace current admin with new one\r\n     * @param _newAdmin New token admin\r\n     * @return True if success\r\n     */\r\n    function replaceAdmin(address _newAdmin)\r\n        public\r\n        boardOrAdmin\r\n        returns (bool)\r\n    {\r\n        require(_newAdmin != address(0x0), \"Null address\");\r\n        admin = _newAdmin;\r\n        emit NewAdmin(_newAdmin);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set an account can perform some operations\r\n     * @param _newManager Manager address\r\n     * @return True if success\r\n     */\r\n    function setManager(address _newManager) public onlyAdmin returns (bool) {\r\n        manager = _newManager;\r\n        emit NewManager(_newManager);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 balanceOf\r\n     * @param _owner Owner address\r\n     * @return True if success\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 allowance\r\n     * @param _owner Owner address\r\n     * @param _spender Address allowed to spend from Owner's balance\r\n     * @return uint256 allowance\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Are transfers currently disallowed\r\n     * @return True if disallowed\r\n     */\r\n    function isLocked() public view returns (bool) {\r\n        return lockedUntilBlock > block.number;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if transfer parameters are valid\r\n     * @param _from Source address\r\n     * @param _to Destination address\r\n     * @param _amount Amount to check\r\n     * @return True if valid\r\n     */\r\n    function isTransferValid(address _from, address _to, uint256 _amount)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (_from == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        if (_to == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        if (!hasWhiteList) {\r\n            return balances[_from] >= _amount; // sufficient balance\r\n        }\r\n\r\n        bool fromOK = clearedInvestors[_from].exists;\r\n\r\n        if (!isSyndicate) {\r\n            return\r\n                balances[_from] >= _amount && // sufficient balance\r\n                fromOK; // a seller holder within the whitelist\r\n        }\r\n\r\n        bool toOK = clearedInvestors[_to].exists;\r\n\r\n        return\r\n            balances[_from] >= _amount && // sufficient balance\r\n            fromOK && // a seller holder within the whitelist\r\n            toOK; // a buyer holder within the whitelist\r\n    }\r\n}\r\n\r\n\r\ncontract MBDAWallet {\r\n    mapping(address => bool) public controllers;\r\n    address[] public controllerList;\r\n    bytes32 public recipientID;\r\n    string public recipient;\r\n\r\n    modifier onlyController() {\r\n        require(controllers[msg.sender], \"Sender must be a Controller Member\");\r\n        _;\r\n    }\r\n\r\n    event EtherReceived(address sender, uint256 amount);\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _controller - Controller of the new wallet\r\n     * @param recipientExternalID - The Recipient ID (managed externally)\r\n     */\r\n    constructor(address _controller, string memory recipientExternalID) public {\r\n        require(_controller != address(0), \"Invalid address of controller 1\");\r\n        controllers[_controller] = true;\r\n        controllerList.push(_controller);\r\n        recipientID = keccak256(abi.encodePacked(recipientExternalID));\r\n        recipient = recipientExternalID;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total number of controllers\r\n     * @return Total number of controllers\r\n     */\r\n    function getTotalControllers() public view returns (uint256) {\r\n        return controllerList.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a new Controller\r\n     * @param _controller - Controller to be added\r\n     * @return True if success\r\n     */\r\n    function newController(address _controller)\r\n        public\r\n        onlyController\r\n        returns (bool)\r\n    {\r\n        require(!controllers[_controller], \"Already a controller\");\r\n        require(_controller != address(0), \"Invalid Controller address\");\r\n        require(\r\n            msg.sender != _controller,\r\n            \"The sender cannot vote to include himself\"\r\n        );\r\n        controllers[_controller] = true;\r\n        controllerList.push(_controller);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Deletes a Controller\r\n     * @param _controller - Controller to be deleted\r\n     * @return True if success\r\n     */\r\n    function deleteController(address _controller)\r\n        public\r\n        onlyController\r\n        returns (bool)\r\n    {\r\n        require(_controller != address(0), \"Invalid Controller address\");\r\n        require(\r\n            controllerList.length > 1,\r\n            \"Cannot leave the wallet without a controller\"\r\n        );\r\n        delete (controllers[_controller]);\r\n        for (uint256 i = 0; i < controllerList.length; i++) {\r\n            if (controllerList[i] == _controller) {\r\n                controllerList[i] = controllerList[controllerList.length - 1];\r\n                delete controllerList[controllerList.length - 1];\r\n                controllerList.pop();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the wallet balance for a given asset\r\n     * @param _assetAddress - Asset to check balance\r\n     * @return Balance\r\n     */\r\n    function getBalance(address _assetAddress) public view returns (uint256) {\r\n        MBDAAsset mbda2 = MBDAAsset(_assetAddress);\r\n        return mbda2.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer and ERC20 asset\r\n     * @param _assetAddress - Asset\r\n     * @param _recipient - Recipient\r\n     * @param _amount - Amount to be transferred\r\n     * @notice USE NATIVE TOKEN DECIMAL PLACES\r\n     * @return True if success\r\n     */\r\n    function transfer(\r\n        address _assetAddress,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) public onlyController returns (bool) {\r\n        require(_recipient != address(0), \"Invalid address\");\r\n        MBDAAsset mbda = MBDAAsset(_assetAddress);\r\n        require(\r\n            mbda.balanceOf(address(this)) >= _amount,\r\n            \"Insufficient balance\"\r\n        );\r\n        return mbda.transfer(_recipient, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the Recipient\r\n     * @return Recipient (string converted)\r\n     */\r\n    function getRecipient() public view returns (string memory) {\r\n        return recipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the Recipient ID\r\n     * @return Recipient (bytes32)\r\n     */\r\n    function getRecipientID() external view returns (bytes32) {\r\n        return recipientID;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the recipient of the wallet\r\n     * @param recipientExternalID - Recipient ID\r\n     * @return True if success\r\n     */\r\n    function changeRecipient(string memory recipientExternalID)\r\n        public\r\n        onlyController\r\n        returns (bool)\r\n    {\r\n        recipientID = keccak256(abi.encodePacked(recipientExternalID));\r\n        recipient = recipientExternalID;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Receive\r\n     * Emits an event on ether received\r\n     */\r\n    receive() external payable {\r\n        emit EtherReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ether from the contract\r\n     * @param _beneficiary - Destination\r\n     * @param _amount - Amount\r\n     * @return True if success\r\n     */\r\n    function withdrawEther(address payable _beneficiary, uint256 _amount)\r\n        public\r\n        onlyController\r\n        returns (bool)\r\n    {\r\n        require(\r\n            address(this).balance >= _amount,\r\n            \"There is not enough balance\"\r\n        );\r\n        (bool success, ) = _beneficiary.call{value: _amount}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n        return success;\r\n    }\r\n\r\n    function isController(address _checkAddress) external view returns (bool) {\r\n        return controllers[_checkAddress];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wallet Factory\r\n */\r\ncontract MBDAWalletFactory {\r\n    struct Wallet {\r\n        string recipientID;\r\n        address walletAddress;\r\n        address controller;\r\n    }\r\n\r\n    Wallet[] public wallets;\r\n    mapping(string => Wallet) public walletsIDMap;\r\n\r\n    event NewWalletCreated(\r\n        address walletAddress,\r\n        address indexed controller,\r\n        string recipientExternalID\r\n    );\r\n\r\n    /**\r\n     * @dev Creates a new wallet\r\n     * @param _controller - Controller of the new wallet\r\n     * @param recipientExternalID - The Recipient ID (managed externally)\r\n     * @return true if success\r\n     */\r\n    function CreateWallet(\r\n        address _controller,\r\n        string memory recipientExternalID\r\n    ) public returns (bool) {\r\n        Wallet storage wallet = walletsIDMap[recipientExternalID];\r\n        require(wallet.walletAddress == address(0x0), \"WalletFactory: cannot associate same recipientExternalID twice.\");\r\n\r\n        MBDAWallet newWallet = new MBDAWallet(\r\n            _controller,\r\n            recipientExternalID\r\n        );\r\n\r\n        wallet.walletAddress = address(newWallet);\r\n        wallet.controller = _controller;\r\n        wallet.recipientID = recipientExternalID;\r\n\r\n        wallets.push(wallet);\r\n        walletsIDMap[recipientExternalID] = wallet;\r\n\r\n        emit NewWalletCreated(\r\n            address(newWallet),\r\n            _controller,\r\n            recipientExternalID\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Total Wallets ever created\r\n     * @return the total wallets ever created\r\n     */\r\n    function getTotalWalletsCreated() public view returns (uint256) {\r\n        return wallets.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Wallet getter\r\n     * @param recipientID recipient ID\r\n     * @return Wallet (for frontend use)\r\n     */\r\n    function getWallet(string calldata recipientID)\r\n        external\r\n        view\r\n        returns (Wallet memory)\r\n    {\r\n        require(\r\n            walletsIDMap[recipientID].walletAddress != address(0x0),\r\n            \"invalid wallet\"\r\n        );\r\n        return walletsIDMap[recipientID];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title MBDAManager is a contract that generates tokens that represents a investment fund units and manages them\r\n */\r\ncontract MBDAManager {\r\n    struct FundTokenContract {\r\n        address fundManager;\r\n        address fundContractAddress;\r\n        string fundTokenSymbol;\r\n        bool exists;\r\n    }\r\n\r\n    FundTokenContract[] public contracts;\r\n    mapping(address => FundTokenContract) public contractsMap;\r\n\r\n    event NewFundCreated(\r\n        address indexed fundManager,\r\n        address indexed tokenAddress,\r\n        string indexed tokenSymbol\r\n    );\r\n\r\n    /**\r\n     * @dev Creates a new fund token\r\n     * @param _fundManager - Manager\r\n     * @param _fundChairman - Chairman\r\n     * @param _tokenName - Detailed ERC20 token name\r\n     * @param _decimalUnits - Detailed ERC20 decimal units\r\n     * @param _tokenSymbol - Detailed ERC20 token symbol\r\n     * @param _lockedUntilBlock - Block lock\r\n     * @param _newTotalSupply - Total Supply owned by the contract itself, only Manager can move\r\n     * @param _canChangeAssets - True allows the Manager to change assets in the portfolio\r\n     * @param _mintable - True allows Manager to min new tokens\r\n     * @param _hasWhiteList - Allows transfering only between whitelisted addresses\r\n     * @param _isSyndicate - Allows secondary market\r\n     * @return newFundTokenAddress the address of the newly created token\r\n     */\r\n    function newFund(\r\n        address _fundManager,\r\n        address _fundChairman,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        uint256 _lockedUntilBlock,\r\n        uint256 _newTotalSupply,\r\n        bool _canChangeAssets,    //  ---> Deixar tudo _canChangeAssets\r\n        bool _mintable, //  ---> Usar aqui _canMintNewTokens\r\n        bool _hasWhiteList,\r\n        bool _isSyndicate\r\n    ) public returns (address newFundTokenAddress) {\r\n        MBDAAsset ft = new MBDAAsset(\r\n            _fundManager,\r\n            _fundChairman,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _lockedUntilBlock,\r\n            _newTotalSupply,\r\n            _canChangeAssets,\r\n            _mintable,\r\n            _hasWhiteList,\r\n            _isSyndicate\r\n        );\r\n        newFundTokenAddress = address(ft);\r\n        FundTokenContract memory ftc = FundTokenContract(\r\n            _fundManager,\r\n            newFundTokenAddress,\r\n            _tokenSymbol,\r\n            true\r\n        );\r\n        contracts.push(ftc);\r\n        contractsMap[ftc.fundContractAddress] = ftc;\r\n        emit NewFundCreated(_fundManager, newFundTokenAddress, _tokenSymbol);\r\n        return newFundTokenAddress;\r\n    }\r\n\r\n    /**\r\n     * @return Total number of funds created\r\n     */\r\n    function totalContractsGenerated() public view returns (uint256) {\r\n        return contracts.length;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title MbdaBoard is the smart contract that will control all funds\r\n * */\r\ncontract MbdaBoard {\r\n    uint256 public minVotes; //minimum number of votes to execute a proposal\r\n\r\n    mapping(address => bool) public boardMembers; //board members\r\n    address[] public boardMembersList; // array with member addresses\r\n\r\n    /// @dev types of proposal allowed they are Solidity function signatures (bytes4) default ones are added on deploy later more can be added through a proposal\r\n    mapping(string => bytes4) public proposalTypes;\r\n    uint256 public totalProposals;\r\n\r\n    /// @notice proposal Struct\r\n    struct Proposal {\r\n        string proposalType;\r\n        address payable destination;\r\n        uint256 value;\r\n        uint8 votes;\r\n        bool executed;\r\n        bool exists;\r\n        bytes proposal; /// @dev ABI encoded parameters for the function of the proposal type\r\n        bool success;\r\n        bytes returnData;\r\n        mapping(address => bool) voters;\r\n    }\r\n\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    /// @dev restricts calls to board members\r\n    modifier onlyBoardMember() {\r\n        require(boardMembers[msg.sender], \"Sender must be a Board Member\");\r\n        _;\r\n    }\r\n\r\n    /// @dev restricts calls to the board itself (these can only be called from a voted proposal)\r\n    modifier onlyBoard() {\r\n        require(msg.sender == address(this), \"Sender must the Board\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Events\r\n    event NewProposal(\r\n        uint256 proposalID,\r\n        string indexed proposalType,\r\n        bytes proposalPayload\r\n    );\r\n    event Voted(address boardMember, uint256 proposalId);\r\n    event ProposalApprovedAndEnforced(\r\n        uint256 proposalID,\r\n        bytes payload,\r\n        bool success,\r\n        bytes returnData\r\n    );\r\n    event Deposit(uint256 value);\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param _initialMembers - Initial board's members\r\n     * @param _minVotes - minimum votes to approve a proposal\r\n     * @param _proposalTypes - Proposal types to add upon deployment\r\n     * @param _ProposalTypeDescriptions - Description of the proposal types\r\n     */\r\n    constructor(\r\n        address[] memory _initialMembers,\r\n        uint256 _minVotes,\r\n        bytes4[] memory _proposalTypes,\r\n        string[] memory _ProposalTypeDescriptions\r\n    ) public {\r\n        require(_minVotes > 0, \"Should require at least 1 vote\");\r\n        require(\r\n            _initialMembers.length >= _minVotes,\r\n            \"Member list length must be equal or higher than minVotes\"\r\n        );\r\n        for (uint256 i = 0; i < _initialMembers.length; i++) {\r\n            require(\r\n                !boardMembers[_initialMembers[i]],\r\n                \"Duplicate Board Member sent\"\r\n            );\r\n            boardMembersList.push(_initialMembers[i]);\r\n            boardMembers[_initialMembers[i]] = true;\r\n        }\r\n        minVotes = _minVotes;\r\n\r\n        // setting up default proposalTypes (board management txs)\r\n        proposalTypes[\"addProposalType\"] = 0xeaa0dff1;\r\n        proposalTypes[\"removeProposalType\"] = 0x746d26b5;\r\n        proposalTypes[\"changeMinVotes\"] = 0x9bad192a;\r\n        proposalTypes[\"addBoardMember\"] = 0x1eac03ae;\r\n        proposalTypes[\"removeBoardMember\"] = 0x39a169f9;\r\n        proposalTypes[\"replaceBoardMember\"] = 0xbec44b4f;\r\n\r\n        // setting up user provided approved proposalTypes\r\n        if (_proposalTypes.length > 0) {\r\n            require(\r\n                _proposalTypes.length == _ProposalTypeDescriptions.length,\r\n                \"Proposal types and descriptions do not match\"\r\n            );\r\n            for (uint256 i = 0; i < _proposalTypes.length; i++)\r\n                proposalTypes[_ProposalTypeDescriptions[i]] = _proposalTypes[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a proposal and vote on it (onlyMember)\r\n     * @notice every proposal is a transaction to be executed by the board transaction type of proposal have to be previously approved (function sig)\r\n     * @param _type - proposal type\r\n     * @param _data - proposal data (ABI encoded)\r\n     * @param _destination - address to send the transaction to\r\n     * @param _value - value of the transaction\r\n     * @return proposalID The ID of the proposal\r\n     */\r\n    function addProposal(\r\n        string memory _type,\r\n        bytes memory _data,\r\n        address payable _destination,\r\n        uint256 _value\r\n    ) public onlyBoardMember returns (uint256 proposalID) {\r\n        require(proposalTypes[_type] != bytes4(0x0), \"Invalid proposal type\");\r\n        totalProposals++;\r\n        proposalID = totalProposals;\r\n\r\n        Proposal memory prop = Proposal(\r\n            _type,\r\n            _destination,\r\n            _value,\r\n            0,\r\n            false,\r\n            true,\r\n            _data,\r\n            false,\r\n            bytes(\"\")\r\n        );\r\n        proposals[proposalID] = prop;\r\n        emit NewProposal(proposalID, _type, _data);\r\n\r\n        // proposer automatically votes\r\n        require(vote(proposalID), \"Voting on the new proposal failed\");\r\n        return proposalID;\r\n    }\r\n\r\n    /**\r\n     * @dev Vote on a given proposal (onlyMember)\r\n     * @param _proposalID - Proposal ID\r\n     * @return True if success\r\n     */\r\n    function vote(uint256 _proposalID) public onlyBoardMember returns (bool) {\r\n        require(proposals[_proposalID].exists, \"The proposal is not found\");\r\n        require(\r\n            !proposals[_proposalID].voters[msg.sender],\r\n            \"This board member has voted already\"\r\n        );\r\n        require(\r\n            !proposals[_proposalID].executed,\r\n            \"This proposal has been approved and enforced\"\r\n        );\r\n\r\n        proposals[_proposalID].votes++;\r\n        proposals[_proposalID].voters[msg.sender] = true;\r\n        emit Voted(msg.sender, _proposalID);\r\n\r\n        if (proposals[_proposalID].votes >= minVotes)\r\n            executeProposal(_proposalID);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Executes a proposal (internal)\r\n     * @param _proposalID - Proposal ID\r\n     */\r\n    function executeProposal(uint256 _proposalID) internal {\r\n        Proposal memory prop = proposals[_proposalID];\r\n        bytes memory payload = abi.encodePacked(\r\n            proposalTypes[prop.proposalType],\r\n            prop.proposal\r\n        );\r\n        proposals[_proposalID].executed = true;\r\n        (bool success, bytes memory returnData) = prop.destination.call{value: prop.value}(payload);\r\n        proposals[_proposalID].success = success;\r\n        proposals[_proposalID].returnData = returnData;\r\n        emit ProposalApprovedAndEnforced(\r\n            _proposalID,\r\n            payload,\r\n            success,\r\n            returnData\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a proposal type (onlyBoard)\r\n     * @param _id - The name of the proposal Type\r\n     * @param _signature - 4 byte signature of the function to be called\r\n     * @return True if success\r\n     */\r\n    function addProposalType(string memory _id, bytes4 _signature)\r\n        public\r\n        onlyBoard\r\n        returns (bool)\r\n    {\r\n        proposalTypes[_id] = _signature;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a proposal type (onlyBoard)\r\n     * @param _id - The name of the proposal Type\r\n     * @return True if success\r\n     */\r\n    function removeProposalType(string memory _id)\r\n        public\r\n        onlyBoard\r\n        returns (bool)\r\n    {\r\n        proposalTypes[_id] = bytes4(\"\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the amount of votes needed to approve a proposal (onlyBoard)\r\n     * @param _minVotes - New minimum quorum to approve proposals\r\n     * @return True if success\r\n     */\r\n    function changeMinVotes(uint256 _minVotes) public onlyBoard returns (bool) {\r\n        require(_minVotes > 0, \"MinVotes cannot be less than 0\");\r\n        require(\r\n            _minVotes <= boardMembersList.length,\r\n            \"MinVotes lower than number of members\"\r\n        );\r\n        minVotes = _minVotes;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a board member (onlyBoard)\r\n     * @param _newMember - New member to be added\r\n     * @return True if success\r\n     */\r\n    function addBoardMember(address _newMember)\r\n        public\r\n        onlyBoard\r\n        returns (bool)\r\n    {\r\n        require(!boardMembers[_newMember], \"Duplicate Board Member sent\");\r\n        boardMembersList.push(_newMember);\r\n        boardMembers[_newMember] = true;\r\n        if (boardMembersList.length > 1 && minVotes == 0) {\r\n            minVotes = 1;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a board member (onlyBoard)\r\n     * @param _member - Member to be added\r\n     * @return True if success\r\n     */\r\n    function removeBoardMember(address _member)\r\n        public\r\n        onlyBoard\r\n        returns (bool)\r\n    {\r\n        boardMembers[_member] = false;\r\n        for (uint256 i = 0; i < boardMembersList.length; i++) {\r\n            if (boardMembersList[i] == _member) {\r\n                boardMembersList[i] = boardMembersList[boardMembersList.length -\r\n                    1];\r\n                boardMembersList.pop();\r\n            }\r\n        }\r\n        if (boardMembersList.length < minVotes) {\r\n            minVotes = boardMembersList.length;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Replaces a board member (onlyBoard)\r\n     * @param _oldMember - Old member to be replaced\r\n     * @param _newMember - New member to be added\r\n     * @return True if success\r\n     */\r\n    function replaceBoardMember(address _oldMember, address _newMember)\r\n        public\r\n        onlyBoard\r\n        returns (bool)\r\n    {\r\n        require(removeBoardMember(_oldMember), \"Failed to remove old member\");\r\n        return addBoardMember(_newMember);\r\n    }\r\n\r\n    /**\r\n     * @dev Receive\r\n     */\r\n    receive() external payable {\r\n        emit Deposit(msg.value);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"NewFundCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"fundTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractsMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"fundTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundChairman\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_lockedUntilBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_canChangeAssets\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_mintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_hasWhiteList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isSyndicate\",\"type\":\"bool\"}],\"name\":\"newFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newFundTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContractsGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MBDAManager","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://190902ba84154487cd5ba20820b4d11c501d45c75107e337b96a1cfc83b3c913"}]}