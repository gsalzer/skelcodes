{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/registry/Registry.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\ninterface RegistryClone {\r\n    function syncAttributeValue(\r\n        address _who,\r\n        bytes32 _attribute,\r\n        uint256 _value\r\n    ) external;\r\n}\r\n\r\ncontract Registry {\r\n    struct AttributeData {\r\n        uint256 value;\r\n        bytes32 notes;\r\n        address adminAddr;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    // never remove any storage variables\r\n    address public owner;\r\n    address public pendingOwner;\r\n    bool initialized;\r\n\r\n    // Stores arbitrary attributes for users. An example use case is an IERC20\r\n    // token that requires its users to go through a KYC/AML check - in this case\r\n    // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\r\n    // that account can use the token. This mapping stores that value (1, in the\r\n    // example) as well as which validator last set the value and at what time,\r\n    // so that e.g. the check can be renewed at appropriate intervals.\r\n    mapping(address => mapping(bytes32 => AttributeData)) attributes;\r\n    // The logic governing who is allowed to set what attributes is abstracted as\r\n    // this accessManager, so that it may be replaced by the owner as needed\r\n    bytes32 constant WRITE_PERMISSION = keccak256(\"canWriteTo-\");\r\n    mapping(bytes32 => RegistryClone[]) subscribers;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\r\n    event SetManager(address indexed oldManager, address indexed newManager);\r\n    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n\r\n    // Allows a write if either a) the writer is that Registry's owner, or\r\n    // b) the writer is writing to attribute foo and that writer already has\r\n    // the canWriteTo-foo attribute set (in that same Registry)\r\n    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\r\n        return (_admin == owner || hasAttribute(_admin, keccak256(abi.encodePacked(WRITE_PERMISSION ^ _attribute))));\r\n    }\r\n\r\n    // Writes are allowed only if the accessManager approves\r\n    function setAttribute(\r\n        address _who,\r\n        bytes32 _attribute,\r\n        uint256 _value,\r\n        bytes32 _notes\r\n    ) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\r\n\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index-- > 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\r\n        subscribers[_attribute].push(_syncer);\r\n        emit StartSubscription(_attribute, _syncer);\r\n    }\r\n\r\n    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\r\n        uint256 length = subscribers[_attribute].length;\r\n        require(_index < length);\r\n        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\r\n        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\r\n        subscribers[_attribute].pop();\r\n    }\r\n\r\n    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\r\n        return subscribers[_attribute].length;\r\n    }\r\n\r\n    function setAttributeValue(\r\n        address _who,\r\n        bytes32 _attribute,\r\n        uint256 _value\r\n    ) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, \"\", msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, \"\", msg.sender);\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index-- > 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    // Returns true if the uint256 value stored for this attribute is non-zero\r\n    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\r\n        return attributes[_who][_attribute].value != 0;\r\n    }\r\n\r\n    // Returns the exact value of the attribute, as well as its metadata\r\n    function getAttribute(address _who, bytes32 _attribute)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            bytes32,\r\n            address,\r\n            uint256\r\n        )\r\n    {\r\n        AttributeData memory data = attributes[_who][_attribute];\r\n        return (data.value, data.notes, data.adminAddr, data.timestamp);\r\n    }\r\n\r\n    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].value;\r\n    }\r\n\r\n    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\r\n        return attributes[_who][_attribute].adminAddr;\r\n    }\r\n\r\n    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].timestamp;\r\n    }\r\n\r\n    function syncAttribute(\r\n        bytes32 _attribute,\r\n        uint256 _startIndex,\r\n        address[] calldata _addresses\r\n    ) external {\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index-- > _startIndex) {\r\n            RegistryClone target = targets[index];\r\n            for (uint256 i = _addresses.length; i-- > 0; ) {\r\n                address who = _addresses[i];\r\n                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function reclaimEther(address payable _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/truecurrencies/proxy/OwnedUpgradeabilityProxy.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title OwnedUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\r\n */\r\ncontract OwnedUpgradeabilityProxy {\r\n    /**\r\n     * @dev Event to show ownership has been transferred\r\n     * @param previousOwner representing the address of the previous owner\r\n     * @param newOwner representing the address of the new owner\r\n     */\r\n    event ProxyOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Event to show ownership transfer is pending\r\n     * @param currentOwner representing the address of the current owner\r\n     * @param pendingOwner representing the address of the pending owner\r\n     */\r\n    event NewPendingOwner(address currentOwner, address pendingOwner);\r\n\r\n    // Storage position of the owner and pendingOwner of the contract\r\n    bytes32 private constant proxyOwnerPosition = 0x6279e8199720cf3557ecd8b58d667c8edc486bd1cf3ad59ea9ebdfcae0d0dfac; //keccak256(\"trueUSD.proxy.owner\");\r\n    bytes32 private constant pendingProxyOwnerPosition = 0x8ddbac328deee8d986ec3a7b933a196f96986cb4ee030d86cc56431c728b83f4; //keccak256(\"trueUSD.pending.proxy.owner\");\r\n\r\n    /**\r\n     * @dev the constructor sets the original owner of the contract to the sender account.\r\n     */\r\n    constructor() public {\r\n        _setUpgradeabilityOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyProxyOwner() {\r\n        require(msg.sender == proxyOwner(), \"only Proxy Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the pending owner.\r\n     */\r\n    modifier onlyPendingProxyOwner() {\r\n        require(msg.sender == pendingProxyOwner(), \"only pending Proxy Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the owner\r\n     * @return owner the address of the owner\r\n     */\r\n    function proxyOwner() public view returns (address owner) {\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            owner := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the owner\r\n     * @return pendingOwner the address of the pending owner\r\n     */\r\n    function pendingProxyOwner() public view returns (address pendingOwner) {\r\n        bytes32 position = pendingProxyOwnerPosition;\r\n        assembly {\r\n            pendingOwner := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the owner\r\n     */\r\n    function _setUpgradeabilityOwner(address newProxyOwner) internal {\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            sstore(position, newProxyOwner)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the owner\r\n     */\r\n    function _setPendingUpgradeabilityOwner(address newPendingProxyOwner) internal {\r\n        bytes32 position = pendingProxyOwnerPosition;\r\n        assembly {\r\n            sstore(position, newPendingProxyOwner)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     *changes the pending owner to newOwner. But doesn't actually transfer\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferProxyOwnership(address newOwner) external onlyProxyOwner {\r\n        require(newOwner != address(0));\r\n        _setPendingUpgradeabilityOwner(newOwner);\r\n        emit NewPendingOwner(proxyOwner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner to claim ownership of the proxy\r\n     */\r\n    function claimProxyOwnership() external onlyPendingProxyOwner {\r\n        emit ProxyOwnershipTransferred(proxyOwner(), pendingProxyOwner());\r\n        _setUpgradeabilityOwner(pendingProxyOwner());\r\n        _setPendingUpgradeabilityOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the proxy owner to upgrade the current version of the proxy.\r\n     * @param implementation representing the address of the new implementation to be set.\r\n     */\r\n    function upgradeTo(address implementation) public virtual onlyProxyOwner {\r\n        address currentImplementation;\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            currentImplementation := sload(position)\r\n        }\r\n        require(currentImplementation != implementation);\r\n        assembly {\r\n            sstore(position, implementation)\r\n        }\r\n        emit Upgraded(implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev This event will be emitted every time the implementation gets upgraded\r\n     * @param implementation representing the address of the upgraded implementation\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    // Storage position of the address of the current implementation\r\n    bytes32 private constant implementationPosition = 0x6e41e0fbe643dfdb6043698bf865aada82dc46b953f754a3468eaa272a362dc7; //keccak256(\"trueUSD.proxy.implementation\");\r\n\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            impl := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback functions allowing to perform a delegatecall to the given implementation.\r\n     * This function will return whatever the implementation call returns\r\n     */\r\n    fallback() external payable {\r\n        proxyCall();\r\n    }\r\n\r\n    receive() external payable {\r\n        proxyCall();\r\n    }\r\n\r\n    function proxyCall() internal {\r\n        bytes32 position = implementationPosition;\r\n\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, returndatasize(), calldatasize())\r\n            let result := delegatecall(gas(), sload(position), ptr, calldatasize(), returndatasize(), returndatasize())\r\n            returndatacopy(ptr, 0, returndatasize())\r\n\r\n            switch result\r\n                case 0 {\r\n                    revert(ptr, returndatasize())\r\n                }\r\n                default {\r\n                    return(ptr, returndatasize())\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/true-currencies-new/ProxyStorage.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n// solhint-disable max-states-count, var-name-mixedcase\r\n\r\n/**\r\n * Defines the storage layout of the token implementation contract. Any\r\n * newly declared state variables in future upgrades should be appended\r\n * to the bottom. Never remove state variables from this list, however variables\r\n * can be renamed. Please add _Deprecated to deprecated variables.\r\n */\r\ncontract ProxyStorage {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    bool initialized;\r\n\r\n    address balances_Deprecated;\r\n    address allowances_Deprecated;\r\n\r\n    uint256 _totalSupply;\r\n\r\n    bool private paused_Deprecated = false;\r\n    address private globalPause_Deprecated;\r\n\r\n    uint256 public burnMin = 0;\r\n    uint256 public burnMax = 0;\r\n\r\n    address registry_Deprecated;\r\n\r\n    string name_Deprecated;\r\n    string symbol_Deprecated;\r\n\r\n    uint256[] gasRefundPool_Deprecated;\r\n    uint256 private redemptionAddressCount_Deprecated;\r\n    uint256 minimumGasPriceForFutureRefunds_Deprecated;\r\n\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n    mapping(bytes32 => mapping(address => uint256)) attributes_Deprecated;\r\n\r\n    // reward token storage\r\n    mapping(address => address) finOps_Deprecated;\r\n    mapping(address => mapping(address => uint256)) finOpBalances_Deprecated;\r\n    mapping(address => uint256) finOpSupply_Deprecated;\r\n\r\n    // true reward allocation\r\n    // proportion: 1000 = 100%\r\n    struct RewardAllocation {\r\n        uint256 proportion;\r\n        address finOp;\r\n    }\r\n    mapping(address => RewardAllocation[]) _rewardDistribution_Deprecated;\r\n    uint256 maxRewardProportion_Deprecated = 1000;\r\n\r\n    mapping(address => bool) isBlacklisted;\r\n    mapping(address => bool) public canBurn;\r\n\r\n    /* Additionally, we have several keccak-based storage locations.\r\n     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\r\n     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\r\n     * A preimage collision can be used to attack the contract by treating one storage location as another,\r\n     * which would always be a critical issue.\r\n     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\r\n     *******************************************************************************************************\r\n     ** length     input                                                         usage\r\n     *******************************************************************************************************\r\n     ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner\r\n     ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner\r\n     ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation\r\n     ** 32         uint256(11)                                                   gasRefundPool_Deprecated\r\n     ** 64         uint256(address),uint256(14)                                  balanceOf\r\n     ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance\r\n     ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes\r\n     **/\r\n}\r\n\r\n// File: contracts/true-currencies-new/ClaimableOwnable.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title ClamableOwnable\r\n * @dev The ClamableOwnable contract is a copy of Claimable Contract by Zeppelin.\r\n * and provides basic authorization control functions. Inherits storage layout of\r\n * ProxyStorage.\r\n */\r\ncontract ClaimableOwnable is ProxyStorage {\r\n    /**\r\n     * @dev emitted when ownership is transferred\r\n     * @param previousOwner previous owner of this contract\r\n     * @param newOwner new owner of this contract\r\n     */\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev sets the original `owner` of the contract to the sender\r\n     * at construction. Must then be reinitialized\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"only pending owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/true-currencies-new/ERC20.sol\r\n\r\n/**\r\n * @notice This is a copy of openzeppelin ERC20 contract with removed state variables.\r\n * Removing state variables has been necessary due to proxy pattern usage.\r\n * Changes to Openzeppelin ERC20 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/de99bccbfd4ecd19d7369d01b070aa72c64423c9/contracts/token/ERC20/ERC20.sol:\r\n * - Remove state variables _name, _symbol, _decimals\r\n * - Use state variables _balances, _allowances, _totalSupply from ProxyStorage\r\n * - Remove constructor\r\n * - Solidity version changed from ^0.6.0 to 0.6.10\r\n * - Contract made abstract\r\n *\r\n * See also: ClaimableOwnable.sol and ProxyStorage.sol\r\n */\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\nabstract contract ERC20 is ClaimableOwnable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public virtual pure returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public virtual pure returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public virtual pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/true-currencies-new/ReclaimerToken.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title ReclaimerToken\r\n * @dev ERC20 token which allows owner to reclaim ERC20 tokens\r\n * or ether sent to this contract\r\n */\r\nabstract contract ReclaimerToken is ERC20 {\r\n    /**\r\n     * @dev send all eth balance in the contract to another address\r\n     * @param _to address to send eth balance to\r\n     */\r\n    function reclaimEther(address payable _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev send all token balance of an arbitrary erc20 token\r\n     * in the contract to another address\r\n     * @param token token to reclaim\r\n     * @param _to address to send eth balance to\r\n     */\r\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(_to, balance);\r\n    }\r\n}\r\n\r\n// File: contracts/true-currencies-new/BurnableTokenWithBounds.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title BurnableTokenWithBounds\r\n * @dev Burning functions as redeeming money from the system.\r\n * The platform will keep track of who burns coins,\r\n * and will send them back the equivalent amount of money (rounded down to the nearest cent).\r\n */\r\nabstract contract BurnableTokenWithBounds is ReclaimerToken {\r\n    /**\r\n     * @dev Emitted when `value` tokens are burnt from one account (`burner`)\r\n     * @param burner address which burned tokens\r\n     * @param value amount of tokens burned\r\n     */\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when new burn bounds were set\r\n     * @param newMin new minimum burn amount\r\n     * @param newMax new maximum burn amount\r\n     * @notice `newMin` should never be greater than `newMax`\r\n     */\r\n    event SetBurnBounds(uint256 newMin, uint256 newMax);\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `msg.sender`, reducing the\r\n     * total supply.\r\n     * @param amount amount of tokens to burn\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     * Emits a {Burn} event with `burner` set to `msg.sender`\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must have at least `amount` tokens.\r\n     *\r\n     */\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Change the minimum and maximum amount that can be burned at once.\r\n     * Burning may be disabled by setting both to 0 (this will not be done\r\n     * under normal operation, but we can't add checks to disallow it without\r\n     * losing a lot of flexibility since burning could also be as good as disabled\r\n     * by setting the minimum extremely high, and we don't want to lock\r\n     * in any particular cap for the minimum)\r\n     * @param _min minimum amount that can be burned at once\r\n     * @param _max maximum amount that can be burned at once\r\n     */\r\n    function setBurnBounds(uint256 _min, uint256 _max) external onlyOwner {\r\n        require(_min <= _max, \"BurnableTokenWithBounds: min > max\");\r\n        burnMin = _min;\r\n        burnMax = _max;\r\n        emit SetBurnBounds(_min, _max);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if amount is within allowed burn bounds and\r\n     * destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     * @param account account to burn tokens for\r\n     * @param amount amount of tokens to burn\r\n     *\r\n     * Emits a {Burn} event\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual override {\r\n        require(amount >= burnMin, \"BurnableTokenWithBounds: below min burn bound\");\r\n        require(amount <= burnMax, \"BurnableTokenWithBounds: exceeds max burn bound\");\r\n\r\n        super._burn(account, amount);\r\n        emit Burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/true-currencies-new/GasRefund.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Gas Reclaim Legacy\r\n *\r\n * Note: this contract does not affect any of the token logic. It merely\r\n * exists so the TokenController (owner) can reclaim the sponsored gas\r\n *\r\n * Previously TrueCurrency has a feature called \"gas boost\" which allowed\r\n * us to sponsor gas by setting non-empty storage slots to 1.\r\n * We are depricating this feature, but there is a bunch of gas saved\r\n * from years of sponsoring gas. This contract is meant to allow the owner\r\n * to take advantage of this leftover gas. Once all the slots are used,\r\n * this contract can be removed from TrueCurrency.\r\n *\r\n * Utilitzes the gas refund mechanism in EVM. Each time an non-empty\r\n * storage slot is set to 0, evm will refund 15,000 to the sender.\r\n * Also utilized the refund for selfdestruct, see gasRefund39\r\n *\r\n */\r\nabstract contract GasRefund {\r\n    /**\r\n     * @dev Refund 15,000 gas per slot.\r\n     * @param amount number of slots to free\r\n     */\r\n    function gasRefund15(uint256 amount) internal {\r\n        // refund gas\r\n        assembly {\r\n            // get number of free slots\r\n            let offset := sload(0xfffff)\r\n            // make sure there are enough slots\r\n            if lt(offset, amount) {\r\n                amount := offset\r\n            }\r\n            if eq(amount, 0) {\r\n                stop()\r\n            }\r\n            // get location of first slot\r\n            let location := add(offset, 0xfffff)\r\n            // calculate loop end\r\n            let end := sub(location, amount)\r\n            // loop until end is reached\r\n            for {\r\n            } gt(location, end) {\r\n                location := sub(location, 1)\r\n            } {\r\n                // set storage location to zero\r\n                // this refunds 15,000 gas\r\n                sstore(location, 0)\r\n            }\r\n            // store new number of free slots\r\n            sstore(0xfffff, sub(offset, amount))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev use smart contract self-destruct to refund gas\r\n     * will refund 39,000 * amount gas\r\n     */\r\n    function gasRefund39(uint256 amount) internal {\r\n        assembly {\r\n            // get amount of gas slots\r\n            let offset := sload(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            // make sure there are enough slots\r\n            if lt(offset, amount) {\r\n                amount := offset\r\n            }\r\n            if eq(amount, 0) {\r\n                stop()\r\n            }\r\n            // first sheep pointer\r\n            let location := sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, offset)\r\n            // last sheep pointer\r\n            let end := add(location, amount)\r\n            // loop from location to end\r\n            for {\r\n            } lt(location, end) {\r\n                location := add(location, 1)\r\n            } {\r\n                // load sheep address\r\n                let sheep := sload(location)\r\n                // call selfdestruct on sheep\r\n                pop(call(gas(), sheep, 0, 0, 0, 0, 0))\r\n                // clear sheep address\r\n                sstore(location, 0)\r\n            }\r\n\r\n            sstore(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, sub(offset, amount))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the remaining sponsored gas slots\r\n     */\r\n    function remainingGasRefundPool() public view returns (uint256 length) {\r\n        assembly {\r\n            length := sload(0xfffff)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the remaining sheep slots\r\n     */\r\n    function remainingSheepRefundPool() public view returns (uint256 length) {\r\n        assembly {\r\n            length := sload(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/true-currencies-new/TrueCurrency.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title TrueCurrency\r\n * @dev TrueCurrency is an ERC20 with blacklist & redemption addresses\r\n *\r\n * TrueCurrency is a compliant stablecoin with blacklist and redemption\r\n * addresses. Only the owner can blacklist accounts. Redemption addresses\r\n * are assigned automatically to the first 0x100000 addresses. Sending\r\n * tokens to the redemption address will trigger a burn operation. Only\r\n * the owner can mint or blacklist accounts.\r\n *\r\n * This contract is owned by the TokenController, which manages token\r\n * minting & admin functionality. See TokenController.sol\r\n *\r\n * See also: BurnableTokenWithBounds.sol\r\n *\r\n * ~~~~ Features ~~~~\r\n *\r\n * Redemption Addresses\r\n * - The first 0x100000 addresses are redemption addresses\r\n * - Tokens sent to redemption addresses are burned\r\n * - Redemptions are tracked off-chain\r\n * - Cannot mint tokens to redemption addresses\r\n *\r\n * Blacklist\r\n * - Owner can blacklist accounts in accordance with local regulatory bodies\r\n * - Only a court order will merit a blacklist; blacklisting is extremely rare\r\n *\r\n * Burn Bounds & CanBurn\r\n * - Owner can set min & max burn amounts\r\n * - Only accounts flagged in canBurn are allowed to burn tokens\r\n * - canBurn prevents tokens from being sent to the incorrect address\r\n *\r\n * Reclaimer Token\r\n * - ERC20 Tokens and Ether sent to this contract can be reclaimed by the owner\r\n */\r\nabstract contract TrueCurrency is BurnableTokenWithBounds, GasRefund {\r\n    uint256 constant CENT = 10**16;\r\n    uint256 constant REDEMPTION_ADDRESS_COUNT = 0x100000;\r\n\r\n    /**\r\n     * @dev Emitted when account blacklist status changes\r\n     */\r\n    event Blacklisted(address indexed account, bool isBlacklisted);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are minted for `to`\r\n     * @param to address to mint tokens for\r\n     * @param value amount of tokens to be minted\r\n     */\r\n    event Mint(address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     * @param account address to mint tokens for\r\n     * @param amount amount of tokens to be minted\r\n     *\r\n     * Emits a {Mint} event\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` cannot be blacklisted.\r\n     * - `account` cannot be a redemption address.\r\n     */\r\n    function mint(address account, uint256 amount) external onlyOwner {\r\n        require(!isBlacklisted[account], \"TrueCurrency: account is blacklisted\");\r\n        require(!isRedemptionAddress(account), \"TrueCurrency: account is a redemption address\");\r\n        _mint(account, amount);\r\n        emit Mint(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Set blacklisted status for the account.\r\n     * @param account address to set blacklist flag for\r\n     * @param _isBlacklisted blacklist flag value\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `msg.sender` should be owner.\r\n     */\r\n    function setBlacklisted(address account, bool _isBlacklisted) external onlyOwner {\r\n        require(uint256(account) >= REDEMPTION_ADDRESS_COUNT, \"TrueCurrency: blacklisting of redemption address is not allowed\");\r\n        isBlacklisted[account] = _isBlacklisted;\r\n        emit Blacklisted(account, _isBlacklisted);\r\n    }\r\n\r\n    /**\r\n     * @dev Set canBurn status for the account.\r\n     * @param account address to set canBurn flag for\r\n     * @param _canBurn canBurn flag value\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `msg.sender` should be owner.\r\n     */\r\n    function setCanBurn(address account, bool _canBurn) external onlyOwner {\r\n        canBurn[account] = _canBurn;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if neither account is blacklisted before performing transfer\r\n     * If transfer recipient is a redemption address, burns tokens\r\n     * @notice Transfer to redemption address will burn tokens with a 1 cent precision\r\n     * @param sender address of sender\r\n     * @param recipient address of recipient\r\n     * @param amount amount of tokens to transfer\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        require(!isBlacklisted[sender], \"TrueCurrency: sender is blacklisted\");\r\n        require(!isBlacklisted[recipient], \"TrueCurrency: recipient is blacklisted\");\r\n\r\n        if (isRedemptionAddress(recipient)) {\r\n            super._transfer(sender, recipient, amount.sub(amount.mod(CENT)));\r\n            _burn(recipient, amount.sub(amount.mod(CENT)));\r\n        } else {\r\n            super._transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Requere neither accounts to be blacklisted before approval\r\n     * @param owner address of owner giving approval\r\n     * @param spender address of spender to approve for\r\n     * @param amount amount of tokens to approve\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(!isBlacklisted[owner], \"TrueCurrency: tokens owner is blacklisted\");\r\n        require(!isBlacklisted[spender] || amount == 0, \"TrueCurrency: tokens spender is blacklisted\");\r\n\r\n        super._approve(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if tokens can be burned at address before burning\r\n     * @param account account to burn tokens from\r\n     * @param amount amount of tokens to burn\r\n     */\r\n    function _burn(address account, uint256 amount) internal override {\r\n        require(canBurn[account], \"TrueCurrency: cannot burn from this address\");\r\n        super._burn(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev First 0x100000-1 addresses (0x0000000000000000000000000000000000000001 to 0x00000000000000000000000000000000000fffff)\r\n     * are the redemption addresses.\r\n     * @param account address to check is a redemption address\r\n     *\r\n     * All transfers to redemption address will trigger token burn.\r\n     *\r\n     * @notice For transfer to succeed, canBurn must be true for redemption address\r\n     *\r\n     * @return is `account` a redemption address\r\n     */\r\n    function isRedemptionAddress(address account) internal pure returns (bool) {\r\n        return uint256(account) < REDEMPTION_ADDRESS_COUNT && uint256(account) != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev reclaim gas from legacy gas refund #1\r\n     * will refund 15,000 * amount gas to sender (minus exection cost)\r\n     * If gas pool is empty, refund 39,000 * amount gas by calling selfdestruct\r\n     */\r\n    function refundGas(uint256 amount) external onlyOwner {\r\n        if (remainingGasRefundPool() > 0) {\r\n            gasRefund15(amount);\r\n        } else {\r\n            gasRefund39(amount.div(3));\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/true-currencies-new/TokenControllerV2.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @dev Contract that can be called with a gas refund\r\n */\r\ninterface IHook {\r\n    function hook() external;\r\n}\r\n\r\n/** @title TokenController\r\n * @dev This contract allows us to split ownership of the TrueCurrency contract\r\n * into two addresses. One, called the \"owner\" address, has unfettered control of the TrueCurrency contract -\r\n * it can mint new tokens, transfer ownership of the contract, etc. However to make\r\n * extra sure that TrueCurrency is never compromised, this owner key will not be used in\r\n * day-to-day operations, allowing it to be stored at a heightened level of security.\r\n * Instead, the owner appoints an various \"admin\" address.\r\n * There are 3 different types of admin addresses;  MintKey, MintRatifier, and MintPauser.\r\n * MintKey can request and revoke mints one at a time.\r\n * MintPausers can pause individual mints or pause all mints.\r\n * MintRatifiers can approve and finalize mints with enough approval.\r\n\r\n * There are three levels of mints: instant mint, ratified mint, and multiSig mint. Each have a different threshold\r\n * and deduct from a different pool.\r\n * Instant mint has the lowest threshold and finalizes instantly without any ratifiers. Deduct from instant mint pool,\r\n * which can be refilled by one ratifier.\r\n * Ratify mint has the second lowest threshold and finalizes with one ratifier approval. Deduct from ratify mint pool,\r\n * which can be refilled by three ratifiers.\r\n * MultiSig mint has the highest threshold and finalizes with three ratifier approvals. Deduct from multiSig mint pool,\r\n * which can only be refilled by the owner.\r\n*/\r\n\r\ncontract TokenControllerV2 {\r\n    using SafeMath for uint256;\r\n\r\n    struct MintOperation {\r\n        address to;\r\n        uint256 value;\r\n        uint256 requestedBlock;\r\n        uint256 numberOfApproval;\r\n        bool paused;\r\n        mapping(address => bool) approved;\r\n    }\r\n\r\n    address payable public owner;\r\n    address payable public pendingOwner;\r\n\r\n    bool public initialized;\r\n\r\n    uint256 public instantMintThreshold;\r\n    uint256 public ratifiedMintThreshold;\r\n    uint256 public multiSigMintThreshold;\r\n\r\n    uint256 public instantMintLimit;\r\n    uint256 public ratifiedMintLimit;\r\n    uint256 public multiSigMintLimit;\r\n\r\n    uint256 public instantMintPool;\r\n    uint256 public ratifiedMintPool;\r\n    uint256 public multiSigMintPool;\r\n    address[2] public ratifiedPoolRefillApprovals;\r\n\r\n    uint8 public constant RATIFY_MINT_SIGS = 1; //number of approvals needed to finalize a Ratified Mint\r\n    uint8 public constant MULTISIG_MINT_SIGS = 3; //number of approvals needed to finalize a MultiSig Mint\r\n\r\n    bool public mintPaused;\r\n    uint256 public mintReqInvalidBeforeThisBlock; //all mint request before this block are invalid\r\n    address public mintKey;\r\n    MintOperation[] public mintOperations; //list of a mint requests\r\n\r\n    TrueCurrency public token;\r\n    Registry public registry;\r\n    address public fastPause; // deprecated\r\n    address public trueRewardManager; // deprecated\r\n\r\n    // Registry attributes for admin keys\r\n    bytes32 public constant IS_MINT_PAUSER = \"isTUSDMintPausers\";\r\n    bytes32 public constant IS_MINT_RATIFIER = \"isTUSDMintRatifier\";\r\n    bytes32 public constant IS_REDEMPTION_ADMIN = \"isTUSDRedemptionAdmin\";\r\n    bytes32 public constant IS_GAS_REFUNDER = \"isGasRefunder\";\r\n    bytes32 public constant IS_REGISTRY_ADMIN = \"isRegistryAdmin\";\r\n\r\n    // paused version of TrueCurrency in Production\r\n    // pausing the contract upgrades the proxy to this implementation\r\n    address public constant PAUSED_IMPLEMENTATION = 0x3c8984DCE8f68FCDEEEafD9E0eca3598562eD291;\r\n\r\n    modifier onlyFastPauseOrOwner() {\r\n        require(msg.sender == fastPause || msg.sender == owner, \"must be pauser or owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMintKeyOrOwner() {\r\n        require(msg.sender == mintKey || msg.sender == owner, \"must be mintKey or owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMintPauserOrOwner() {\r\n        require(registry.hasAttribute(msg.sender, IS_MINT_PAUSER) || msg.sender == owner, \"must be pauser or owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMintRatifierOrOwner() {\r\n        require(registry.hasAttribute(msg.sender, IS_MINT_RATIFIER) || msg.sender == owner, \"must be ratifier or owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrRedemptionAdmin() {\r\n        require(registry.hasAttribute(msg.sender, IS_REDEMPTION_ADMIN) || msg.sender == owner, \"must be Redemption admin or owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGasRefunder() {\r\n        require(registry.hasAttribute(msg.sender, IS_GAS_REFUNDER) || msg.sender == owner, \"must be gas refunder or owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegistryAdmin() {\r\n        require(registry.hasAttribute(msg.sender, IS_REGISTRY_ADMIN) || msg.sender == owner, \"must be registry admin or owner\");\r\n        _;\r\n    }\r\n\r\n    //mint operations by the mintkey cannot be processed on when mints are paused\r\n    modifier mintNotPaused() {\r\n        if (msg.sender != owner) {\r\n            require(!mintPaused, \"minting is paused\");\r\n        }\r\n        _;\r\n    }\r\n    /// @dev Emitted when ownership of controller was transferred\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /// @dev Emitted when ownership of controller transfer procedure was started\r\n    event NewOwnerPending(address indexed currentOwner, address indexed pendingOwner);\r\n    /// @dev Emitted when new registry was set\r\n    event SetRegistry(address indexed registry);\r\n    /// @dev Emitted when owner was transferred for child contract\r\n    // event TransferChild(address indexed child, address indexed newOwner);\r\n    /// @dev Emitted when child ownership was claimed\r\n    event RequestReclaimContract(address indexed other);\r\n    /// @dev Emitted when child token was changed\r\n    event SetToken(TrueCurrency newContract);\r\n\r\n    /// @dev Emitted when mint was requested\r\n    event RequestMint(address indexed to, uint256 indexed value, uint256 opIndex, address mintKey);\r\n    /// @dev Emitted when mint was finalized\r\n    event FinalizeMint(address indexed to, uint256 indexed value, uint256 opIndex, address mintKey);\r\n    /// @dev Emitted on instant mint\r\n    event InstantMint(address indexed to, uint256 indexed value, address indexed mintKey);\r\n\r\n    /// @dev Emitted when mint key was replaced\r\n    event TransferMintKey(address indexed previousMintKey, address indexed newMintKey);\r\n    /// @dev Emitted when mint was ratified\r\n    event MintRatified(uint256 indexed opIndex, address indexed ratifier);\r\n    /// @dev Emitted when mint is revoked\r\n    event RevokeMint(uint256 opIndex);\r\n    /// @dev Emitted when all mining is paused (status=true) or unpaused (status=false)\r\n    event AllMintsPaused(bool status);\r\n    /// @dev Emitted when opIndex mint is paused (status=true) or unpaused (status=false)\r\n    event MintPaused(uint256 opIndex, bool status);\r\n    /// @dev Emitted when mint is approved\r\n    event MintApproved(address approver, uint256 opIndex);\r\n    /// @dev Emitted when fast pause contract is changed\r\n    event FastPauseSet(address _newFastPause);\r\n\r\n    /// @dev Emitted when mint threshold changes\r\n    event MintThresholdChanged(uint256 instant, uint256 ratified, uint256 multiSig);\r\n    /// @dev Emitted when mint limits change\r\n    event MintLimitsChanged(uint256 instant, uint256 ratified, uint256 multiSig);\r\n    /// @dev Emitted when instant mint pool is refilled\r\n    event InstantPoolRefilled();\r\n    /// @dev Emitted when instant mint pool is ratified\r\n    event RatifyPoolRefilled();\r\n    /// @dev Emitted when multisig mint pool is ratified\r\n    event MultiSigPoolRefilled();\r\n\r\n    /*\r\n    ========================================\r\n    Ownership functions\r\n    ========================================\r\n    */\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) external onlyOwner {\r\n        pendingOwner = newOwner;\r\n        emit NewOwnerPending(address(owner), address(pendingOwner));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() external onlyPendingOwner {\r\n        emit OwnershipTransferred(address(owner), address(pendingOwner));\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /*\r\n    ========================================\r\n    proxy functions\r\n    ========================================\r\n    */\r\n\r\n    function transferTrueCurrencyProxyOwnership(address _newOwner) external onlyOwner {\r\n        OwnedUpgradeabilityProxy(address(uint160(address(token)))).transferProxyOwnership(_newOwner);\r\n    }\r\n\r\n    function claimTrueCurrencyProxyOwnership() external onlyOwner {\r\n        OwnedUpgradeabilityProxy(address(uint160(address(token)))).claimProxyOwnership();\r\n    }\r\n\r\n    function upgradeTrueCurrencyProxyImplTo(address _implementation) external onlyOwner {\r\n        OwnedUpgradeabilityProxy(address(uint160(address(token)))).upgradeTo(_implementation);\r\n    }\r\n\r\n    /*\r\n    ========================================\r\n    Minting functions\r\n    ========================================\r\n    */\r\n\r\n    /**\r\n     * @dev set the threshold for a mint to be considered an instant mint, \r\n     * ratify mint and multiSig mint. Instant mint requires no approval, \r\n     * ratify mint requires 1 approval and multiSig mint requires 3 approvals\r\n     */\r\n    function setMintThresholds(\r\n        uint256 _instant,\r\n        uint256 _ratified,\r\n        uint256 _multiSig\r\n    ) external onlyOwner {\r\n        require(_instant <= _ratified && _ratified <= _multiSig);\r\n        instantMintThreshold = _instant;\r\n        ratifiedMintThreshold = _ratified;\r\n        multiSigMintThreshold = _multiSig;\r\n        emit MintThresholdChanged(_instant, _ratified, _multiSig);\r\n    }\r\n\r\n    /**\r\n     * @dev set the limit of each mint pool. For example can only instant mint up to the instant mint pool limit\r\n     * before needing to refill\r\n     */\r\n    function setMintLimits(\r\n        uint256 _instant,\r\n        uint256 _ratified,\r\n        uint256 _multiSig\r\n    ) external onlyOwner {\r\n        require(_instant <= _ratified && _ratified <= _multiSig);\r\n        instantMintLimit = _instant;\r\n        if (instantMintPool > instantMintLimit) {\r\n            instantMintPool = instantMintLimit;\r\n        }\r\n        ratifiedMintLimit = _ratified;\r\n        if (ratifiedMintPool > ratifiedMintLimit) {\r\n            ratifiedMintPool = ratifiedMintLimit;\r\n        }\r\n        multiSigMintLimit = _multiSig;\r\n        if (multiSigMintPool > multiSigMintLimit) {\r\n            multiSigMintPool = multiSigMintLimit;\r\n        }\r\n        emit MintLimitsChanged(_instant, _ratified, _multiSig);\r\n    }\r\n\r\n    /**\r\n     * @dev Ratifier can refill instant mint pool\r\n     */\r\n    function refillInstantMintPool() external onlyMintRatifierOrOwner {\r\n        ratifiedMintPool = ratifiedMintPool.sub(instantMintLimit.sub(instantMintPool));\r\n        instantMintPool = instantMintLimit;\r\n        emit InstantPoolRefilled();\r\n    }\r\n\r\n    /**\r\n     * @dev Owner or 3 ratifiers can refill Ratified Mint Pool\r\n     */\r\n    function refillRatifiedMintPool() external onlyMintRatifierOrOwner {\r\n        if (msg.sender != owner) {\r\n            address[2] memory refillApprovals = ratifiedPoolRefillApprovals;\r\n            require(msg.sender != refillApprovals[0] && msg.sender != refillApprovals[1]);\r\n            if (refillApprovals[0] == address(0)) {\r\n                ratifiedPoolRefillApprovals[0] = msg.sender;\r\n                return;\r\n            }\r\n            if (refillApprovals[1] == address(0)) {\r\n                ratifiedPoolRefillApprovals[1] = msg.sender;\r\n                return;\r\n            }\r\n        }\r\n        delete ratifiedPoolRefillApprovals; // clears the whole array\r\n        multiSigMintPool = multiSigMintPool.sub(ratifiedMintLimit.sub(ratifiedMintPool));\r\n        ratifiedMintPool = ratifiedMintLimit;\r\n        emit RatifyPoolRefilled();\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can refill MultiSig Mint Pool\r\n     */\r\n    function refillMultiSigMintPool() external onlyOwner {\r\n        multiSigMintPool = multiSigMintLimit;\r\n        emit MultiSigPoolRefilled();\r\n    }\r\n\r\n    /**\r\n     * @dev mintKey initiates a request to mint _value for account _to\r\n     * @param _to the address to mint to\r\n     * @param _value the amount requested\r\n     */\r\n    function requestMint(address _to, uint256 _value) external mintNotPaused onlyMintKeyOrOwner {\r\n        MintOperation memory op = MintOperation(_to, _value, block.number, 0, false);\r\n        emit RequestMint(_to, _value, mintOperations.length, msg.sender);\r\n        mintOperations.push(op);\r\n    }\r\n\r\n    /**\r\n     * @dev Instant mint without ratification if the amount is less \r\n     * than instantMintThreshold and instantMintPool\r\n     * @param _to the address to mint to\r\n     * @param _value the amount minted\r\n     */\r\n    function instantMint(address _to, uint256 _value) external mintNotPaused onlyMintKeyOrOwner {\r\n        require(_value <= instantMintThreshold, \"over the instant mint threshold\");\r\n        require(_value <= instantMintPool, \"instant mint pool is dry\");\r\n        instantMintPool = instantMintPool.sub(_value);\r\n        emit InstantMint(_to, _value, msg.sender);\r\n        token.mint(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev ratifier ratifies a request mint. If the number of \r\n     * ratifiers that signed off is greater than the number of \r\n     * approvals required, the request is finalized\r\n     * @param _index the index of the requestMint to ratify\r\n     * @param _to the address to mint to\r\n     * @param _value the amount requested\r\n     */\r\n    function ratifyMint(\r\n        uint256 _index,\r\n        address _to,\r\n        uint256 _value\r\n    ) external mintNotPaused onlyMintRatifierOrOwner {\r\n        MintOperation memory op = mintOperations[_index];\r\n        require(op.to == _to, \"to address does not match\");\r\n        require(op.value == _value, \"amount does not match\");\r\n        require(!mintOperations[_index].approved[msg.sender], \"already approved\");\r\n        mintOperations[_index].approved[msg.sender] = true;\r\n        mintOperations[_index].numberOfApproval = mintOperations[_index].numberOfApproval.add(1);\r\n        emit MintRatified(_index, msg.sender);\r\n        if (hasEnoughApproval(mintOperations[_index].numberOfApproval, _value)) {\r\n            finalizeMint(_index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev finalize a mint request, mint the amount requested to the specified address\r\n     * @param _index of the request (visible in the RequestMint event accompanying the original request)\r\n     */\r\n    function finalizeMint(uint256 _index) public mintNotPaused {\r\n        MintOperation memory op = mintOperations[_index];\r\n        address to = op.to;\r\n        uint256 value = op.value;\r\n        if (msg.sender != owner) {\r\n            require(canFinalize(_index));\r\n            _subtractFromMintPool(value);\r\n        }\r\n        delete mintOperations[_index];\r\n        token.mint(to, value);\r\n        emit FinalizeMint(to, value, _index, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * assumption: only invoked when canFinalize\r\n     */\r\n    function _subtractFromMintPool(uint256 _value) internal {\r\n        if (_value <= ratifiedMintPool && _value <= ratifiedMintThreshold) {\r\n            ratifiedMintPool = ratifiedMintPool.sub(_value);\r\n        } else {\r\n            multiSigMintPool = multiSigMintPool.sub(_value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev compute if the number of approvals is enough for a given mint amount\r\n     */\r\n    function hasEnoughApproval(uint256 _numberOfApproval, uint256 _value) public view returns (bool) {\r\n        if (_value <= ratifiedMintPool && _value <= ratifiedMintThreshold) {\r\n            if (_numberOfApproval >= RATIFY_MINT_SIGS) {\r\n                return true;\r\n            }\r\n        }\r\n        if (_value <= multiSigMintPool && _value <= multiSigMintThreshold) {\r\n            if (_numberOfApproval >= MULTISIG_MINT_SIGS) {\r\n                return true;\r\n            }\r\n        }\r\n        if (msg.sender == owner) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev compute if a mint request meets all the requirements to be finalized\r\n     * utility function for a front end\r\n     */\r\n    function canFinalize(uint256 _index) public view returns (bool) {\r\n        MintOperation memory op = mintOperations[_index];\r\n        require(op.requestedBlock > mintReqInvalidBeforeThisBlock, \"this mint is invalid\"); //also checks if request still exists\r\n        require(!op.paused, \"this mint is paused\");\r\n        require(hasEnoughApproval(op.numberOfApproval, op.value), \"not enough approvals\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev revoke a mint request, Delete the mintOperation\r\n     * @param _index of the request (visible in the RequestMint event accompanying the original request)\r\n     */\r\n    function revokeMint(uint256 _index) external onlyMintKeyOrOwner {\r\n        delete mintOperations[_index];\r\n        emit RevokeMint(_index);\r\n    }\r\n\r\n    /**\r\n     * @dev get mint operatino count\r\n     * @return mint operation count\r\n     */\r\n    function mintOperationCount() public view returns (uint256) {\r\n        return mintOperations.length;\r\n    }\r\n\r\n    /*\r\n    ========================================\r\n    Key management\r\n    ========================================\r\n    */\r\n\r\n    /**\r\n     * @dev Replace the current mintkey with new mintkey\r\n     * @param _newMintKey address of the new mintKey\r\n     */\r\n    function transferMintKey(address _newMintKey) external onlyOwner {\r\n        require(_newMintKey != address(0), \"new mint key cannot be 0x0\");\r\n        emit TransferMintKey(mintKey, _newMintKey);\r\n        mintKey = _newMintKey;\r\n    }\r\n\r\n    /*\r\n    ========================================\r\n    Mint Pausing\r\n    ========================================\r\n    */\r\n\r\n    /**\r\n     * @dev invalidates all mint request initiated before the current block\r\n     */\r\n    function invalidateAllPendingMints() external onlyOwner {\r\n        mintReqInvalidBeforeThisBlock = block.number;\r\n    }\r\n\r\n    /**\r\n     * @dev pause any further mint request and mint finalizations\r\n     */\r\n    function pauseMints() external onlyMintPauserOrOwner {\r\n        mintPaused = true;\r\n        emit AllMintsPaused(true);\r\n    }\r\n\r\n    /**\r\n     * @dev unpause any further mint request and mint finalizations\r\n     */\r\n    function unpauseMints() external onlyOwner {\r\n        mintPaused = false;\r\n        emit AllMintsPaused(false);\r\n    }\r\n\r\n    /**\r\n     * @dev pause a specific mint request\r\n     * @param  _opIndex the index of the mint request the caller wants to pause\r\n     */\r\n    function pauseMint(uint256 _opIndex) external onlyMintPauserOrOwner {\r\n        mintOperations[_opIndex].paused = true;\r\n        emit MintPaused(_opIndex, true);\r\n    }\r\n\r\n    /**\r\n     * @dev unpause a specific mint request\r\n     * @param  _opIndex the index of the mint request the caller wants to unpause\r\n     */\r\n    function unpauseMint(uint256 _opIndex) external onlyOwner {\r\n        mintOperations[_opIndex].paused = false;\r\n        emit MintPaused(_opIndex, false);\r\n    }\r\n\r\n    /*\r\n    ========================================\r\n    set and claim contracts, administrative\r\n    ========================================\r\n    */\r\n\r\n    /**\r\n     * @dev Update this contract's token pointer to newContract (e.g. if the\r\n     * contract is upgraded)\r\n     */\r\n    function setToken(TrueCurrency _newContract) external onlyOwner {\r\n        token = _newContract;\r\n        emit SetToken(_newContract);\r\n    }\r\n\r\n    /**\r\n     * @dev Update this contract's registry pointer to _registry\r\n     */\r\n    function setRegistry(Registry _registry) external onlyOwner {\r\n        registry = _registry;\r\n        emit SetRegistry(address(registry));\r\n    }\r\n\r\n    /**\r\n     * @dev Claim ownership of an arbitrary HasOwner contract\r\n     \r\n    function issueClaimOwnership(address _other) public onlyOwner {\r\n        HasOwner other = HasOwner(_other);\r\n        other.claimOwnership();\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer ownership of _child to _newOwner.\r\n     * Can be used e.g. to upgrade this TokenController contract.\r\n     * @param _child contract that tokenController currently Owns\r\n     * @param _newOwner new owner/pending owner of _child\r\n     \r\n    function transferChild(HasOwner _child, address _newOwner) external onlyOwner {\r\n        _child.transferOwnership(_newOwner);\r\n        emit TransferChild(address(_child), _newOwner);\r\n    }\r\n    */\r\n\r\n\r\n    /**\r\n     * @dev send all ether in token address to the owner of tokenController\r\n     */\r\n    function requestReclaimEther() external onlyOwner {\r\n        token.reclaimEther(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer all tokens of a particular type in token address to the\r\n     * owner of tokenController\r\n     * @param _token token address of the token to transfer\r\n     */\r\n    function requestReclaimToken(IERC20 _token) external onlyOwner {\r\n        token.reclaimToken(_token, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev pause all pausable actions on TrueCurrency, mints/burn/transfer/approve\r\n     */\r\n    function pauseToken() external virtual onlyFastPauseOrOwner {\r\n        OwnedUpgradeabilityProxy(address(uint160(address(token)))).upgradeTo(PAUSED_IMPLEMENTATION);\r\n    }\r\n\r\n    /**\r\n     * @dev Change the minimum and maximum amounts that TrueCurrency users can\r\n     * burn to newMin and newMax\r\n     * @param _min minimum amount user can burn at a time\r\n     * @param _max maximum amount user can burn at a time\r\n    */\r\n    function setBurnBounds(uint256 _min, uint256 _max) external onlyOwner {\r\n        token.setBurnBounds(_min, _max);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can send ether balance in contract address\r\n     * @param _to address to which the funds will be send to\r\n     */\r\n    function reclaimEther(address payable _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can send erc20 token balance in contract address\r\n     * @param _token address of the token to send\r\n     * @param _to address to which the funds will be send to\r\n     */\r\n    function reclaimToken(IERC20 _token, address _to) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        _token.transfer(_to, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can allow address to burn tokens\r\n     * @param burner address of the token that can burn\r\n     * @param canBurn true if account is allowed to burn, false otherwise\r\n     */\r\n    function setCanBurn(address burner, bool canBurn) external onlyRegistryAdmin {\r\n        token.setCanBurn(burner, canBurn);\r\n    }\r\n\r\n    /**\r\n     * Call hook in `hookContract` with gas refund\r\n     */\r\n    function refundGasWithHook(IHook hookContract) external onlyGasRefunder {\r\n        // calculate start gas amount\r\n        uint256 startGas = gasleft();\r\n        // call hook\r\n        hookContract.hook();\r\n        // calculate gas used\r\n        uint256 gasUsed = startGas.sub(gasleft());\r\n        // 1 refund = 15,000 gas. EVM refunds maximum half of used gas, so divide by 2.\r\n        // Add 20% to compensate inter contract communication\r\n        // (x + 20%) / 2 / 15000 = x / 25000\r\n        token.refundGas(gasUsed.div(25000));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AllMintsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFastPause\",\"type\":\"address\"}],\"name\":\"FastPauseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintKey\",\"type\":\"address\"}],\"name\":\"FinalizeMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintKey\",\"type\":\"address\"}],\"name\":\"InstantMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InstantPoolRefilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"}],\"name\":\"MintApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratified\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiSig\",\"type\":\"uint256\"}],\"name\":\"MintLimitsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"MintPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ratifier\",\"type\":\"address\"}],\"name\":\"MintRatified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratified\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiSig\",\"type\":\"uint256\"}],\"name\":\"MintThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MultiSigPoolRefilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"NewOwnerPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RatifyPoolRefilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintKey\",\"type\":\"address\"}],\"name\":\"RequestMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"other\",\"type\":\"address\"}],\"name\":\"RequestReclaimContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"}],\"name\":\"RevokeMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract TrueCurrency\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"SetToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMintKey\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMintKey\",\"type\":\"address\"}],\"name\":\"TransferMintKey\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_GAS_REFUNDER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_MINT_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_MINT_RATIFIER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_REDEMPTION_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_REGISTRY_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTISIG_MINT_SIGS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSED_IMPLEMENTATION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIFY_MINT_SIGS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"canFinalize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTrueCurrencyProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastPause\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"finalizeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfApproval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"hasEnoughApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"instantMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantMintPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantMintThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invalidateAllPendingMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintOperationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfApproval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReqInvalidBeforeThisBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigMintPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigMintThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_opIndex\",\"type\":\"uint256\"}],\"name\":\"pauseMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratifiedMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratifiedMintPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratifiedMintThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ratifiedPoolRefillApprovals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ratifyMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refillInstantMintPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refillMultiSigMintPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refillRatifiedMintPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHook\",\"name\":\"hookContract\",\"type\":\"address\"}],\"name\":\"refundGasWithHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"requestMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestReclaimEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"requestReclaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"revokeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBurnBounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canBurn\",\"type\":\"bool\"}],\"name\":\"setCanBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_instant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratified\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiSig\",\"type\":\"uint256\"}],\"name\":\"setMintLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_instant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratified\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiSig\",\"type\":\"uint256\"}],\"name\":\"setMintThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TrueCurrency\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract TrueCurrency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMintKey\",\"type\":\"address\"}],\"name\":\"transferMintKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTrueCurrencyProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trueRewardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_opIndex\",\"type\":\"uint256\"}],\"name\":\"unpauseMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"upgradeTrueCurrencyProxyImplTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenControllerV2","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5debff33e0add232e489ae7bdb7cbbc58874185c3f80213300d0c282f68459e3"}]}