{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-04-26\r\n*/\r\n\r\npragma solidity ^0.4.26;\r\n    \r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint public decimals;\r\n    string public    name;\r\n    string public   symbol;\r\n    mapping(address => uint) public balances;\r\n    mapping (address => mapping (address => uint)) public allowed;\r\n    \r\n   \r\n    \r\n    uint public _totalSupply;\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n \r\n\r\n\r\ncontract MBTCXToken is ERC20{\r\n    using SafeMath for uint;\r\n    \r\n\r\n    address public platformAdmin;\r\n    string public name='MBTCX';\r\n    string public symbol='MBTCX';\r\n    uint256 public decimals=8;\r\n    uint256 public _initialSupply=10000;\r\n    \r\n    address[] public users;\r\n    mapping (address => bool) public usersMapping; \r\n    \r\n    \r\n \r\n    address mbtcAddr=0xa7F79C7e2c1CcAD34df7A42A04F9732Efd986FBC;\r\n    uint mbtcDecimals=8;\r\n    \r\n  \r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == platformAdmin);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        platformAdmin = msg.sender;\r\n        _totalSupply = _initialSupply * 10 ** decimals; \r\n        balances[msg.sender]=_totalSupply;\r\n    }\r\n    \r\n\r\n    \r\n     function totalSupply() public constant returns (uint){\r\n         return _totalSupply;\r\n     }\r\n     \r\n     function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n     }\r\n  \r\n    function approve(address _spender, uint _value) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n    \r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n        \r\n        \r\n   function transfer(address _to, uint _value) public {\r\n        require(balances[msg.sender] >= _value);\r\n        require(balances[_to].add(_value) > balances[_to]);\r\n        balances[msg.sender]=balances[msg.sender].sub(_value);\r\n        balances[_to]=balances[_to].add(_value);\r\n        if(_to!=platformAdmin&&!usersMapping[_to]){\r\n            users.push(_to);\r\n            usersMapping[_to]=true;\r\n        }\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public  {\r\n        require(balances[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n        require(balances[_to] + _value > balances[_to]);\r\n        balances[_to]=balances[_to].add(_value);\r\n        balances[_from]=balances[_from].sub(_value);\r\n        allowed[_from][msg.sender]=allowed[_from][msg.sender].sub(_value);\r\n        if(_to!=platformAdmin&&!usersMapping[_to]){\r\n            users.push(_to);\r\n            usersMapping[_to]=true;\r\n        }\r\n        Transfer(_from, _to, _value);\r\n    }\r\n        \r\n\r\n\r\n\r\n    function withdrawToken(address _tokenAddress,address _addr,uint256 _tokenAmount)public onlyOwner returns (bool) {\r\n         ERC20 token =ERC20(_tokenAddress);\r\n         token.transfer(_addr,_tokenAmount);\r\n         return true;\r\n    }\r\n    \r\n   \r\n    \r\n     function getEffectiveCount() constant  returns (uint) {\r\n         ERC20 token =ERC20(mbtcAddr);\r\n         uint effective;\r\n         for(uint i=0;i<users.length;i++){\r\n            uint pSize=balances[users[i]].div(1 * 10 ** decimals);\r\n            if(pSize>0){\r\n                effective+=pSize;\r\n            }\r\n         }\r\n            return effective;\r\n    }\r\n    \r\n   \r\n    function getUserCount() constant  returns (uint) {\r\n            return users.length;\r\n    }\r\n    \r\n\r\n    \r\n    function settle(uint _startIndex,uint _count,uint _enchangeRate)public onlyOwner () {\r\n        ERC20 token =ERC20(mbtcAddr);\r\n        uint256 amount;\r\n        for(uint i=_startIndex;i<(_startIndex+_count)&&i<users.length;i++){\r\n            uint pSize=balances[users[i]].div(1 * 10 ** decimals);\r\n            if(pSize>=1){\r\n                amount=pSize.mul(_enchangeRate).mul(1*10**mbtcDecimals);\r\n            }else{\r\n                continue;\r\n            }\r\n            token.transfer(users[i],amount);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_enchangeRate\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEffectiveCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MBTCXToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d1d1906be36f609bd287dd293d21b85d052e80293b9049838c2d53ecf93f4f59"}]}