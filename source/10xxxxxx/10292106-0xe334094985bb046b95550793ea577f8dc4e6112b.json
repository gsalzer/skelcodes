{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity =0.6.6;\r\n\r\ninterface IPermitAndCall {\r\n  function permitAndCall(\r\n    address token,\r\n    uint value,\r\n    bytes4 permitSelector,\r\n    bytes calldata permitData,\r\n    bytes4 routerFunctionSelector,\r\n    bytes calldata routerFunctionData\r\n  )\r\n    external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n  function WETH() external pure returns (address); \r\n}\r\n\r\ninterface IERC20 {\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n}\r\n\r\ncontract PermitAndCall is IPermitAndCall {\r\n  address public immutable router;\r\n  address public immutable WETH;\r\n\r\n  constructor(address _router) public {\r\n    router = _router;\r\n    WETH = IUniswapV2Router02(_router).WETH();\r\n  }\r\n\r\n  receive() external payable {\r\n    assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\r\n  }\r\n\r\n  function permitAndCall(\r\n    address token,\r\n    uint value,\r\n    bytes4 permitSelector,\r\n    bytes memory permitData,\r\n    bytes4 routerFunctionSelector,\r\n    bytes memory routerFunctionData\r\n  )\r\n    public\r\n    override\r\n  {\r\n    // if the `msg.sender`'s allowance for this contract is less than `value`, execute a permit\r\n    if (IERC20(token).allowance(msg.sender, address(this)) < value) {\r\n      (bool success,) = token.call(abi.encodePacked(permitSelector, permitData));\r\n      require(success, 'PermitAndCall: permit failed.');\r\n    }\r\n    // execute a router function\r\n    (bool success,) = router.delegatecall(abi.encodePacked(routerFunctionSelector, routerFunctionData));\r\n    require(success, 'PermitAndCall: router failed.');\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"permitSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"routerFunctionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"routerFunctionData\",\"type\":\"bytes\"}],\"name\":\"permitAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PermitAndCall","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8295be1f9a36fd87b062085bde3e2ae940c78035b348319aeb23e3aaa298ef66"}]}