{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0; abstract contract Gem {\r\n    function dec() virtual public returns (uint);\r\n    function gem() virtual public returns (Gem);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n\r\n    function approve(address, uint) virtual public;\r\n    function transfer(address, uint) virtual public returns (bool);\r\n    function transferFrom(address, address, uint) virtual public returns (bool);\r\n    function deposit() virtual public payable;\r\n    function withdraw(uint) virtual public;\r\n    function allowance(address, address) virtual public returns (uint);\r\n} abstract contract Join {\r\n    bytes32 public ilk;\r\n\r\n    function dec() virtual public view returns (uint);\r\n    function gem() virtual public view returns (Gem);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n} interface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n} abstract contract Vat {\r\n\r\n    struct Urn {\r\n        uint256 ink;   // Locked Collateral  [wad]\r\n        uint256 art;   // Normalised Debt    [wad]\r\n    }\r\n\r\n    struct Ilk {\r\n        uint256 Art;   // Total Normalised Debt     [wad]\r\n        uint256 rate;  // Accumulated Rates         [ray]\r\n        uint256 spot;  // Price with Safety Margin  [ray]\r\n        uint256 line;  // Debt Ceiling              [rad]\r\n        uint256 dust;  // Urn Debt Floor            [rad]\r\n    }\r\n\r\n    mapping (bytes32 => mapping (address => Urn )) public urns;\r\n    mapping (bytes32 => Ilk)                       public ilks;\r\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\r\n\r\n    function can(address, address) virtual public view returns (uint);\r\n    function dai(address) virtual public view returns (uint);\r\n    function frob(bytes32, address, address, address, int, int) virtual public;\r\n    function hope(address) virtual public;\r\n    function move(address, address, uint) virtual public;\r\n    function fork(bytes32, address, address, int, int) virtual public;\r\n} abstract contract Flipper {\r\n    function bids(uint _bidId) public virtual returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\r\n    function tend(uint id, uint lot, uint bid) virtual external;\r\n    function dent(uint id, uint lot, uint bid) virtual external;\r\n    function deal(uint id) virtual external;\r\n} contract BidProxy {\r\n\r\n    address public constant DAI_JOIN = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n\r\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    function daiBid(uint _bidId, uint _amount, address _flipper) public {\r\n        uint tendAmount = _amount * (10 ** 27);\r\n\r\n        joinDai(_amount);\r\n\r\n        (, uint lot, , , , , , ) = Flipper(_flipper).bids(_bidId);\r\n\r\n        Vat(VAT_ADDRESS).hope(_flipper);\r\n\r\n        Flipper(_flipper).tend(_bidId, lot, tendAmount);\r\n    }\r\n\r\n    function collateralBid(uint _bidId, uint _amount, address _flipper) public {\r\n        (uint bid, , , , , , , ) = Flipper(_flipper).bids(_bidId);\r\n\r\n        joinDai(bid / (10**27));\r\n\r\n        Vat(VAT_ADDRESS).hope(_flipper);\r\n\r\n        Flipper(_flipper).dent(_bidId, _amount, bid);\r\n    }\r\n\r\n    function closeBid(uint _bidId, address _flipper, address _joinAddr) public {\r\n        bytes32 ilk = Join(_joinAddr).ilk();\r\n\r\n        Flipper(_flipper).deal(_bidId);\r\n        uint amount = Vat(VAT_ADDRESS).gem(ilk, address(this));\r\n\r\n        Vat(VAT_ADDRESS).hope(_joinAddr);\r\n        Gem(_joinAddr).exit(msg.sender, amount);\r\n    }\r\n\r\n    function exitCollateral(address _joinAddr) public {\r\n        bytes32 ilk = Join(_joinAddr).ilk();\r\n\r\n        uint amount = Vat(VAT_ADDRESS).gem(ilk, address(this));\r\n\r\n        Vat(VAT_ADDRESS).hope(_joinAddr);\r\n        Gem(_joinAddr).exit(msg.sender, amount);\r\n    }\r\n\r\n    function exitDai() public {\r\n        uint amount = Vat(VAT_ADDRESS).dai(address(this)) / (10**27);\r\n\r\n        Vat(VAT_ADDRESS).hope(DAI_JOIN);\r\n        Gem(DAI_JOIN).exit(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawToken(address _token) public {\r\n        uint balance = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(msg.sender, balance);\r\n    }\r\n\r\n    function withdrawEth() public {\r\n        uint balance = address(this).balance;\r\n        msg.sender.transfer(balance);\r\n    }\r\n\r\n    function joinDai(uint _amount) internal {\r\n        uint amountInVat = Vat(VAT_ADDRESS).dai(address(this)) / (10**27);\r\n\r\n        if (_amount > amountInVat) {\r\n            uint amountDiff = (_amount - amountInVat) + 1;\r\n\r\n            ERC20(DAI_ADDRESS).transferFrom(msg.sender, address(this), amountDiff);\r\n            ERC20(DAI_ADDRESS).approve(DAI_JOIN, amountDiff);\r\n            Join(DAI_JOIN).join(address(this), amountDiff);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_JOIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_flipper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"}],\"name\":\"closeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_flipper\",\"type\":\"address\"}],\"name\":\"collateralBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_flipper\",\"type\":\"address\"}],\"name\":\"daiBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"}],\"name\":\"exitCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BidProxy","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ab1a40cfbd969e4ce0d38d57665353bd0b15f6c8badc34bec616b374cbcdeb43"}]}