{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Bonding Curve Interface\r\n * @dev A bonding curve is a method for continous token minting / burning.\r\n */\r\n/* solhint-disable func-order */\r\ninterface ICurveModule {\r\n    /**\r\n     * @notice Calculates amount of pTokens to mint\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param debtCommitments Debt commitments\r\n     * @param lAmount Amount of liquidTokens to deposit\r\n     * @return Amount of pTokens to mint/unlock\r\n     */\r\n    function calculateEnter(uint256 liquidAssets, uint256 debtCommitments, uint256 lAmount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param lAmount Amount of liquid tokens to withdraw (full: sum of withdrawU and withdrawP)\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculateExit(uint256 liquidAssets, uint256 lAmount) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include fee = withdrawU\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculateExitWithFee(uint256 liquidAssets, uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of liquid tokens one can withdraw from the pool when pTokens are burned/locked\r\n     * @param liquidAssets Liquid assets in Pool\r\n     * @param pAmount Amount of pTokens to withdraw\r\n     * @return Amount of liquid tokens to withdraw: total, for user, for pool\r\n     */\r\n    function calculateExitInverseWithFee(uint256 liquidAssets, uint256 pAmount) external view returns (uint256 withdraw, uint256 withdrawU, uint256 withdrawP);\r\n\r\n    /**\r\n     * @notice Calculates lAmount to be taken as fee upon withdraw\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include fee\r\n     * @return Amount of liquid tokens which will be additionally taken as a pool fee\r\n     */\r\n    function calculateExitFee(uint256 lAmount) external view returns(uint256);\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for token transfers, provides info about current liquidity/debts and pool token price.\r\n */\r\ninterface IFundsModule {\r\n    event Status(uint256 lBalance, uint256 lDebts, uint256 lProposals, uint256 pEnterPrice, uint256 pExitPrice);\r\n\r\n    /**\r\n     * @notice Deposit liquid tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositLTokens(address from, uint256 amount) external;\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     * @param poolFee Pool fee will be sent to pool owner\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount, uint256 poolFee) external;\r\n\r\n    /**\r\n     * @notice Deposit pool tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositPTokens(address from, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw pool tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawPTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mint new PTokens\r\n     * @param to Address of the user, who sends tokens.\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function mintPTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mint new PTokens and distribute the to other PToken holders\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function distributePTokens(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Burn pool tokens\r\n     * @param from Address of the user, whos tokens we burning. Should have enough allowance.\r\n     * @param amount Amount of tokens to burn\r\n     */\r\n    function burnPTokens(address from, uint256 amount) external;\r\n\r\n    function lockPTokens(address[] calldata from, uint256[] calldata amount) external;\r\n\r\n    function mintAndLockPTokens(uint256 amount) external;\r\n\r\n    function unlockAndWithdrawPTokens(address to, uint256 amount) external;\r\n\r\n    function burnLockedPTokens(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount, uint256 liquidityCorrection) external view returns(uint256);\r\n    \r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExit(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many liquid tokens should be removed from pool when decreasing liquidity\r\n     * @param pAmount Amount of pToken which should be taken from sender\r\n     * @return Amount of liquid tokens which will be removed from the pool: total, part for sender, part for pool\r\n     */\r\n    function calculatePoolExitInverse(uint256 pAmount) external view returns(uint256, uint256, uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include part for pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount, uint256 liquidityCorrection) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Current pool liquidity\r\n     * @return available liquidity\r\n     */\r\n    function lBalance() external view returns(uint256);\r\n\r\n    /**\r\n     * @return Amount of pTokens locked in FundsModule by account\r\n     */\r\n    function pBalanceOf(address account) external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for deposits, withdrawals, debt proposals, debts and repay.\r\n */\r\ninterface ILoanModule {\r\n    event Repay(address indexed sender, uint256 debt, uint256 lDebtLeft, uint256 lFullPaymentAmount, uint256 lInterestPaid, uint256 pInterestPaid, uint256 newlastPayment);\r\n    event UnlockedPledgeWithdraw(address indexed sender, address indexed borrower, uint256 proposal, uint256 debt, uint256 pAmount);\r\n    event DebtDefaultExecuted(address indexed borrower, uint256 debt, uint256 pBurned);\r\n\r\n    /**\r\n     * @notice Creates Debt from proposal\r\n     * @dev Used by LoanProposalModule to create debt\r\n     * @param borrower Address of borrower\r\n     * @param proposal Index of DebtProposal\r\n     * @param lAmount Amount of the loan\r\n     * @return Index of created Debt\r\n     */\r\n    function createDebt(address borrower, uint256 proposal, uint256 lAmount) external returns(uint256);\r\n\r\n    /**\r\n     * @notice Repay amount of liquidToken and unlock pTokens\r\n     * @param debt Index of Debt\r\n     * @param lAmount Amount of liquid tokens to repay\r\n     */\r\n    function repay(uint256 debt, uint256 lAmount) external;\r\n\r\n    function repayPTK(uint256 debt, uint256 pAmount, uint256 lAmountMin) external;\r\n\r\n    function repayAllInterest(address borrower) external;\r\n\r\n    /**\r\n     * @notice Allows anyone to default a debt which is behind it's repay deadline\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     */\r\n    function executeDebtDefault(address borrower, uint256 debt) external;\r\n\r\n    /**\r\n     * @notice Withdraw part of the pledge which is already unlocked (borrower repaid part of the debt) + interest\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     */\r\n    function withdrawUnlockedPledge(address borrower, uint256 debt) external;\r\n\r\n    /**\r\n     * @notice Calculates if default time for the debt is reached\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     * @return true if debt is defaulted\r\n     */\r\n    function isDebtDefaultTimeReached(address borrower, uint256 debt) external view returns(bool);\r\n\r\n    /**\r\n     * @notice Check if user has active debts\r\n     * @param borrower Address to check\r\n     * @return True if borrower has unpaid debts\r\n     */\r\n    function hasActiveDebts(address borrower) external view returns(bool);\r\n\r\n    /**\r\n     * @notice Total amount of debts\r\n     * @return Summ of all liquid token in debts\r\n     */\r\n    function totalLDebts() external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for deposits, withdrawals, debt proposals, debts and repay.\r\n */\r\ninterface ILoanProposalsModule {\r\n    event DebtProposalCreated(address indexed sender, uint256 proposal, uint256 lAmount, uint256 interest, bytes32 descriptionHash);\r\n    event PledgeAdded(address indexed sender, address indexed borrower, uint256 proposal, uint256 lAmount, uint256 pAmount);\r\n    event PledgeWithdrawn(address indexed sender, address indexed borrower, uint256 proposal, uint256 lAmount, uint256 pAmount);\r\n    event DebtProposalCanceled(address indexed sender, uint256 proposal);\r\n    event DebtProposalExecuted(address indexed sender, uint256 proposal, uint256 debt, uint256 lAmount);\r\n\r\n    /**\r\n     * @notice Create DebtProposal\r\n     * @param debtLAmount Amount of debt in liquid tokens\r\n     * @param interest Annual interest rate multiplied by INTEREST_MULTIPLIER (to allow decimal numbers)\r\n     * @param pAmountMax Max amount of pTokens to use as collateral\r\n     * @param descriptionHash Hash of loan description\r\n     * @return Index of created DebtProposal\r\n     */\r\n    function createDebtProposal(uint256 debtLAmount, uint256 interest, uint256 pAmountMax, bytes32 descriptionHash) external returns(uint256);\r\n\r\n    /**\r\n     * @notice Add pledge to DebtProposal\r\n     * @param borrower Address of borrower\r\n     * @param proposal Index of borroers's proposal\r\n     * @param pAmount Amount of pTokens to use as collateral\r\n     * @param lAmountMin Minimal amount of liquid tokens to cover by this pledge\r\n     */\r\n    function addPledge(address borrower, uint256 proposal, uint256 pAmount, uint256 lAmountMin) external;\r\n\r\n    /**\r\n     * @notice Withdraw pledge from DebtProposal\r\n     * @param borrower Address of borrower\r\n     * @param proposal Index of borrowers's proposal\r\n     * @param pAmount Amount of pTokens to withdraw\r\n     */\r\n    function withdrawPledge(address borrower, uint256 proposal, uint256 pAmount) external;\r\n\r\n    /**\r\n     * @notice Execute DebtProposal\r\n     * @dev Creates Debt using data of DebtProposal\r\n     * @param proposal Index of DebtProposal\r\n     * @return Index of created Debt\r\n     */\r\n    function executeDebtProposal(uint256 proposal) external returns(uint256);\r\n\r\n\r\n    /**\r\n     * @notice Total amount of collateral locked in proposals\r\n     * Although this is measured in liquid tokens, it's not actual tokens,\r\n     * just a value wich is supposed to represent the collateral locked in proposals.\r\n     * @return Summ of all collaterals in proposals\r\n     */\r\n    function totalLProposals() external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Returns most used data from proposal and pledge\r\n     * @param borrower Address of borrower\r\n     * @param proposal Proposal id\r\n     * @param supporter Address of supporter (can be same as borrower)\r\n     */\r\n    function getProposalAndPledgeInfo(address borrower, uint256 proposal, address supporter) external view\r\n    returns(uint256 lAmount, uint256 lCovered, uint256 pCollected, uint256 interest, uint256 lPledge, uint256 pPledge);\r\n\r\n    /**\r\n    * @dev Returns interest rate of proposal. Usefull when only this value is required\r\n    */\r\n    function getProposalInterestRate(address borrower, uint256 proposal) external view returns(uint256);\r\n}\r\n\r\n/**\r\n * @title PToken Interface\r\n */\r\ninterface IPToken {\r\n    /* solhint-disable func-order */\r\n    //Standart ERC20\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    //Mintable & Burnable\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    //Distributions\r\n    function distribute(uint256 amount) external;\r\n    function claimDistributions(address account) external returns(uint256);\r\n    function claimDistributions(address account, uint256 lastDistribution) external returns(uint256);\r\n    function claimDistributions(address[] calldata accounts) external;\r\n    function claimDistributions(address[] calldata accounts, uint256 toDistribution) external;\r\n    function fullBalanceOf(address account) external view returns(uint256);\r\n    function calculateDistributedAmount(uint256 startDistribution, uint256 nextDistribution, uint256 initialBalance) external view returns(uint256);\r\n    function nextDistribution() external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string public constant MODULE_ACCESS            = \"access\";\r\n    string public constant MODULE_PTOKEN            = \"ptoken\";\r\n    string public constant MODULE_CURVE             = \"curve\";\r\n    string public constant MODULE_FUNDS             = \"funds\";\r\n    string public constant MODULE_LIQUIDITY         = \"liquidity\";\r\n    string public constant MODULE_LOAN              = \"loan\";\r\n    string public constant MODULE_LOAN_LIMTS        = \"loan_limits\";\r\n    string public constant MODULE_LOAN_PROPOSALS    = \"loan_proposals\";\r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string public constant MODULE_LTOKEN            = \"ltoken\";\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        require(moduleAddress != ZERO_ADDRESS, \"Module: requested module not found\");\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract FundsOperatorRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event FundsOperatorAdded(address indexed account);\r\n    event FundsOperatorRemoved(address indexed account);\r\n\r\n    Roles.Role private _operators;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isFundsOperator(sender)) {\r\n            _addFundsOperator(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyFundsOperator() {\r\n        require(isFundsOperator(_msgSender()), \"FundsOperatorRole: caller does not have the FundsOperator role\");\r\n        _;\r\n    }\r\n\r\n    function addFundsOperator(address account) public onlyFundsOperator {\r\n        _addFundsOperator(account);\r\n    }\r\n\r\n    function renounceFundsOperator() public {\r\n        _removeFundsOperator(_msgSender());\r\n    }\r\n\r\n    function isFundsOperator(address account) public view returns (bool) {\r\n        return _operators.has(account);\r\n    }\r\n\r\n    function _addFundsOperator(address account) internal {\r\n        _operators.add(account);\r\n        emit FundsOperatorAdded(account);\r\n    }\r\n\r\n    function _removeFundsOperator(address account) internal {\r\n        _operators.remove(account);\r\n        emit FundsOperatorRemoved(account);\r\n    }\r\n\r\n}\r\n\r\ncontract FundsModule is Module, IFundsModule, FundsOperatorRole {\r\n    using SafeMath for uint256;\r\n    uint256 private constant STATUS_PRICE_AMOUNT = 10**18;  // Used to calculate price for Status event, should represent 1 DAI\r\n\r\n    uint256 public lBalance;    //Tracked balance of liquid token, may be less or equal to lToken.balanceOf(address(this))\r\n    mapping(address=>uint256) pBalances;    //Stores how many pTokens is locked in FundsModule by user\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n        FundsOperatorRole.initialize(_msgSender());\r\n        //lBalance = lToken.balanceOf(address(this)); //We do not initialize lBalance to preserve it's previous value when updgrade\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit liquid tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositLTokens(address from, uint256 amount) public onlyFundsOperator {\r\n        lBalance = lBalance.add(amount);\r\n        require(lToken().transferFrom(from, address(this), amount), \"FundsModule: deposit failed\");\r\n        emitStatus();\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount) public onlyFundsOperator {\r\n        withdrawLTokens(to, amount, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     * @param poolFee Pool fee will be sent to pool owner\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount, uint256 poolFee) public onlyFundsOperator {\r\n        lBalance = lBalance.sub(amount);\r\n        if (amount > 0) { //This will be false for \"fee only\" withdrawal in LiquidityModule.withdrawForRepay()\r\n            require(lToken().transfer(to, amount), \"FundsModule: withdraw failed\");\r\n        }\r\n        if (poolFee > 0) {\r\n            lBalance = lBalance.sub(poolFee);\r\n            require(lToken().transfer(owner(), poolFee), \"FundsModule: fee transfer failed\");\r\n        }\r\n        emitStatus();\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit pool tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositPTokens(address from, uint256 amount) public onlyFundsOperator {\r\n        require(pToken().transferFrom(from, address(this), amount), \"FundsModule: deposit failed\"); //this also runs claimDistributions(from)\r\n        pBalances[from] = pBalances[from].add(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw pool tokens from the pool\r\n     * @param to Address of the user, who receivs tokens.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawPTokens(address to, uint256 amount) public onlyFundsOperator {\r\n        require(pToken().transfer(to, amount), \"FundsModule: withdraw failed\");  //this also runs claimDistributions(to)\r\n        pBalances[to] = pBalances[to].sub(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Mint new PTokens\r\n     * @param to Address of the user, who sends tokens.\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function mintPTokens(address to, uint256 amount) public onlyFundsOperator {\r\n        assert(to != address(this)); //Use mintAndLockPTokens\r\n        require(pToken().mint(to, amount), \"FundsModule: mint failed\");\r\n    }\r\n\r\n    function distributePTokens(uint256 amount) public onlyFundsOperator {\r\n        pToken().distribute(amount);    // This call will eventually mint new pTokens (with next distribution, which should be once a day)\r\n    }\r\n    \r\n    /**\r\n     * @notice Burn pool tokens\r\n     * @param from Address of the user, whos tokens we burning. Should have enough allowance.\r\n     * @param amount Amount of tokens to burn\r\n     */\r\n    function burnPTokens(address from, uint256 amount) public onlyFundsOperator {\r\n        assert(from != address(this)); //Use burnLockedPTokens\r\n        pToken().burnFrom(from, amount); // This call will revert if sender has not enough pTokens. Allowance is always unlimited for FundsModule\r\n    }\r\n\r\n    /**\r\n     * @notice Lock pTokens for a loan\r\n     * @param from list of addresses to lock tokens from\r\n     * @param amount list of amounts addresses to lock tokens from\r\n     */\r\n    function lockPTokens(address[] calldata from, uint256[] calldata amount) external onlyFundsOperator {\r\n        require(from.length == amount.length, \"FundsModule: from and amount length should match\");\r\n        //pToken().claimDistributions(address(this));\r\n        pToken().claimDistributions(from);\r\n        uint256 lockAmount;\r\n        for (uint256 i=0; i < from.length; i++) {\r\n            address account = from[i];\r\n            pBalances[account] = pBalances[account].sub(amount[i]);                \r\n            lockAmount = lockAmount.add(amount[i]);\r\n        }\r\n        pBalances[address(this)] = pBalances[address(this)].add(lockAmount);\r\n    }\r\n\r\n    function mintAndLockPTokens(uint256 amount) public onlyFundsOperator {\r\n        require(pToken().mint(address(this), amount), \"FundsModule: mint failed\"); \r\n        pBalances[address(this)] = pBalances[address(this)].add(amount);\r\n    }\r\n\r\n    function unlockAndWithdrawPTokens(address to, uint256 amount) public onlyFundsOperator {\r\n        require(pToken().transfer(to, amount), \"FundsModule: withdraw failed\"); //this also runs claimDistributions(to)\r\n        pBalances[address(this)] = pBalances[address(this)].sub(amount);\r\n    }\r\n\r\n    function burnLockedPTokens(uint256 amount) public onlyFundsOperator {\r\n        pToken().burn(amount); //This call will revert if something goes wrong\r\n        pBalances[address(this)] = pBalances[address(this)].sub(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Refund liquid tokens accidentially sent directly to this contract\r\n     * @param to Address of the user, who receives refund\r\n     * @param amount Amount of tokens to send\r\n     */\r\n    function refundLTokens(address to, uint256 amount) public onlyFundsOperator {\r\n        uint256 realLBalance = lToken().balanceOf(address(this));\r\n        require(realLBalance.sub(amount) >= lBalance, \"FundsModule: not enough tokens to refund\");\r\n        require(lToken().transfer(to, amount), \"FundsModule: refund failed\");\r\n    }\r\n\r\n    /**\r\n     * @return Amount of pTokens locked in FundsModule by account\r\n     */\r\n    function pBalanceOf(address account) public view returns(uint256){\r\n        return pBalances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount) public view returns(uint256) {\r\n        uint256 lDebts = loanModule().totalLDebts();\r\n        return curveModule().calculateEnter(lBalance, lDebts, lAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount, uint256 liquidityCorrection) public view returns(uint256) {\r\n        uint256 lDebts = loanModule().totalLDebts();\r\n        return curveModule().calculateEnter(lBalance.sub(liquidityCorrection), lDebts, lAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExit(uint256 lAmount) public view returns(uint256) {\r\n        uint256 lProposals = loanProposalsModule().totalLProposals();\r\n        return curveModule().calculateExit(lBalance.sub(lProposals), lAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include part for pool\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount) public view returns(uint256) {\r\n        uint256 lProposals = loanProposalsModule().totalLProposals();\r\n        return curveModule().calculateExitWithFee(lBalance.sub(lProposals), lAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include part for pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount, uint256 liquidityCorrection) public view returns(uint256) {\r\n        uint256 lProposals = loanProposalsModule().totalLProposals();\r\n        return curveModule().calculateExitWithFee(lBalance.sub(liquidityCorrection).sub(lProposals), lAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates how many liquid tokens should be removed from pool when decreasing liquidity\r\n     * @param pAmount Amount of pToken which should be taken from sender\r\n     * @return Amount of liquid tokens which will be removed from the pool: total, part for sender, part for pool\r\n     */\r\n    function calculatePoolExitInverse(uint256 pAmount) public view returns(uint256, uint256, uint256) {\r\n        uint256 lProposals = loanProposalsModule().totalLProposals();\r\n        return curveModule().calculateExitInverseWithFee(lBalance.sub(lProposals), pAmount);\r\n    }\r\n\r\n    function emitStatus() private {\r\n        uint256 lDebts = loanModule().totalLDebts();\r\n        uint256 lProposals = loanProposalsModule().totalLProposals();\r\n        uint256 pEnterPrice = curveModule().calculateEnter(lBalance, lDebts, STATUS_PRICE_AMOUNT);\r\n        uint256 pExitPrice; // = 0; //0 is default value\r\n        if (lBalance >= STATUS_PRICE_AMOUNT) {\r\n            pExitPrice = curveModule().calculateExit(lBalance.sub(lProposals), STATUS_PRICE_AMOUNT);\r\n        } else {\r\n            pExitPrice = 0;\r\n        }\r\n        emit Status(lBalance, lDebts, lProposals, pEnterPrice, pExitPrice);\r\n    }\r\n\r\n    function curveModule() private view returns(ICurveModule) {\r\n        return ICurveModule(getModuleAddress(MODULE_CURVE));\r\n    }\r\n    \r\n    function loanModule() private view returns(ILoanModule) {\r\n        return ILoanModule(getModuleAddress(MODULE_LOAN));\r\n    }\r\n\r\n    function loanProposalsModule() private view returns(ILoanProposalsModule) {\r\n        return ILoanProposalsModule(getModuleAddress(MODULE_LOAN_PROPOSALS));\r\n    }\r\n\r\n    function pToken() private view returns(IPToken){\r\n        return IPToken(getModuleAddress(MODULE_PTOKEN));\r\n    }\r\n    \r\n    function lToken() private view returns(IERC20){\r\n        return IERC20(getModuleAddress(MODULE_LTOKEN));\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FundsOperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FundsOperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lDebts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lProposals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pEnterPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pExitPrice\",\"type\":\"uint256\"}],\"name\":\"Status\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_ACCESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_CURVE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_FUNDS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LIQUIDITY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN_LIMTS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN_PROPOSALS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LTOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_PTOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addFundsOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnLockedPTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnPTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityCorrection\",\"type\":\"uint256\"}],\"name\":\"calculatePoolEnter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"calculatePoolEnter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"calculatePoolExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"calculatePoolExitInverse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"calculatePoolExitWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityCorrection\",\"type\":\"uint256\"}],\"name\":\"calculatePoolExitWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositLTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositPTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributePTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFundsOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"lockPTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintAndLockPTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintPTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refundLTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceFundsOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockAndWithdrawPTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolFee\",\"type\":\"uint256\"}],\"name\":\"withdrawLTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FundsModule","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c1fdb48ec6b8aaecf0e09fa8a1eed92ff2615decc8c7800b6a8dff6cc638478a"}]}