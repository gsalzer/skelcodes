{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface OneProtoInterface {\r\n    function getExpectedReturn(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n    external\r\n    view\r\n    returns(\r\n        uint256 returnAmount,\r\n        uint256[] memory distribution\r\n    );\r\n\r\n    function getExpectedReturnWithGas(\r\n        TokenInterface fromToken,\r\n        TokenInterface destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n    external\r\n    view\r\n    returns(\r\n        uint256 returnAmount,\r\n        uint256 estimateGasAmount,\r\n        uint256[] memory distribution\r\n    );\r\n\r\n    function getExpectedReturnWithGasMulti(\r\n        TokenInterface[] calldata tokens,\r\n        uint256 amount,\r\n        uint256[] calldata parts,\r\n        uint256[] calldata flags,\r\n        uint256[] calldata destTokenEthPriceTimesGasPrices\r\n    )\r\n    external\r\n    view\r\n    returns(\r\n        uint256[] memory returnAmounts,\r\n        uint256 estimateGasAmount,\r\n        uint256[] memory distribution\r\n    );\r\n}\r\n\r\ninterface OneProtoMappingInterface {\r\n    function oneProtoAddress() external view returns(address);\r\n}\r\n\r\n\r\ninterface TokenInterface {\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    /**\r\n     * @dev get Ethereum address\r\n     */\r\n    function getAddressETH() public pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\n\r\ncontract OneProtoHelpers is Helpers {\r\n   /**\r\n     * @dev Return 1proto mapping Address\r\n     */\r\n    function getOneProtoMappingAddress() internal pure returns (address payable) {\r\n        return 0x8d0287AFa7755BB5f2eFe686AA8d4F0A7BC4AE7F;\r\n    }\r\n\r\n    /**\r\n     * @dev Return 1proto Address\r\n     */\r\n    function getOneProtoAddress() internal view returns (address payable) {\r\n        return payable(OneProtoMappingInterface(getOneProtoMappingAddress()).oneProtoAddress());\r\n    }\r\n\r\n    function getTokenDecimals(TokenInterface buy, TokenInterface sell) internal view returns(uint _buyDec, uint _sellDec){\r\n        _buyDec = address(buy) == getAddressETH() ? 18 : buy.decimals();\r\n        _sellDec = address(sell) == getAddressETH() ? 18 : sell.decimals();\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getBuyUnitAmt(\r\n        TokenInterface buyAddr,\r\n        uint expectedAmt,\r\n        TokenInterface sellAddr,\r\n        uint sellAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        (uint buyDec, uint sellDec) = getTokenDecimals(buyAddr, sellAddr);\r\n        uint _sellAmt = convertTo18(sellDec, sellAmt);\r\n        uint _buyAmt = convertTo18(buyDec, expectedAmt);\r\n        unitAmt = wdiv(_buyAmt, _sellAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is OneProtoHelpers {\r\n\r\n    function getBuyAmount(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint slippage,\r\n        uint distribution,\r\n        uint disableDexes\r\n    ) public view returns (uint buyAmt, uint unitAmt, uint[] memory distributions) {\r\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\r\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\r\n        (buyAmt, distributions) = OneProtoInterface(getOneProtoAddress())\r\n                .getExpectedReturn(\r\n                    _sellAddr,\r\n                    _buyAddr,\r\n                    sellAmt,\r\n                    distribution,\r\n                    disableDexes\r\n                    );\r\n        unitAmt = getBuyUnitAmt(_buyAddr, buyAmt, _sellAddr, sellAmt, slippage);\r\n    }\r\n\r\n    function getBuyAmountWithGas(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint slippage,\r\n        uint distribution,\r\n        uint disableDexes,\r\n        uint destTokenEthPriceTimesGasPrices\r\n    ) public view returns (uint buyAmt, uint unitAmt, uint[] memory distributions, uint estimateGasAmount) {\r\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\r\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\r\n        (buyAmt, estimateGasAmount, distributions) = OneProtoInterface(getOneProtoAddress())\r\n                .getExpectedReturnWithGas(\r\n                    _sellAddr,\r\n                    _buyAddr,\r\n                    sellAmt,\r\n                    distribution,\r\n                    disableDexes,\r\n                    destTokenEthPriceTimesGasPrices\r\n                    );\r\n        unitAmt = getBuyUnitAmt(_buyAddr, buyAmt, _sellAddr, sellAmt, slippage);\r\n    }\r\n\r\n\r\n    function getBuyAmountMultiWithGas(\r\n        TokenInterface[] memory tokens,\r\n        uint sellAmt,\r\n        uint slippage,\r\n        uint[] memory distribution,\r\n        uint[] memory disableDexes,\r\n        uint[] memory destTokenEthPriceTimesGasPrices\r\n    )\r\n    public\r\n    view\r\n    returns(\r\n        uint buyAmt,\r\n        uint unitAmt,\r\n        uint[] memory distributions,\r\n        uint[] memory returnAmounts,\r\n        uint estimateGasAmount\r\n    ) {\r\n        uint len = tokens.length;\r\n        (returnAmounts, estimateGasAmount, distributions) = OneProtoInterface(getOneProtoAddress())\r\n                .getExpectedReturnWithGasMulti(\r\n                    tokens,\r\n                    sellAmt,\r\n                    distribution,\r\n                    disableDexes,\r\n                    destTokenEthPriceTimesGasPrices\r\n                    );\r\n        buyAmt = returnAmounts[len - 1];\r\n        unitAmt = getBuyUnitAmt(TokenInterface(tokens[len - 1]), buyAmt, TokenInterface(tokens[0]), sellAmt, slippage);\r\n    }\r\n\r\n    struct MultiTokenPaths {\r\n        TokenInterface[] tokens;\r\n        uint[] distribution;\r\n        uint[] disableDexes;\r\n        uint[] destTokenEthPriceTimesGasPrices;\r\n    }\r\n\r\n    struct MultiTokenPathsBuyAmt {\r\n        uint buyAmt;\r\n        uint unitAmt;\r\n        uint[] distributions;\r\n        uint[] returnAmounts;\r\n        uint estimateGasAmount;\r\n    }\r\n\r\n    function getBuyAmountsMulti(\r\n        MultiTokenPaths[] memory multiTokenPaths,\r\n        uint sellAmt,\r\n        uint slippage\r\n    )\r\n    public\r\n    view\r\n    returns (MultiTokenPathsBuyAmt[] memory)\r\n    {\r\n        uint len = multiTokenPaths.length;\r\n        MultiTokenPathsBuyAmt[] memory data = new MultiTokenPathsBuyAmt[](len);\r\n        for (uint i = 0; i < len; i++) {\r\n            data[i] = MultiTokenPathsBuyAmt({\r\n               buyAmt: 0,\r\n               unitAmt: 0,\r\n               distributions: new uint[](0),\r\n               returnAmounts: new uint[](0),\r\n               estimateGasAmount: 0\r\n            });\r\n            (\r\n                data[i].buyAmt,\r\n                data[i].unitAmt,\r\n                data[i].distributions,\r\n                data[i].returnAmounts,\r\n                data[i].estimateGasAmount\r\n            ) = getBuyAmountMultiWithGas(\r\n                multiTokenPaths[i].tokens,\r\n                sellAmt,\r\n                slippage,\r\n                multiTokenPaths[i].distribution,\r\n                multiTokenPaths[i].disableDexes,\r\n                multiTokenPaths[i].destTokenEthPriceTimesGasPrices\r\n            );\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\r\n\r\ncontract InstaOneProtoResolver is Resolver {\r\n    string public constant name = \"1Proto-Resolver-v1\";\r\n}","ABI":"[{\"inputs\":[],\"name\":\"getAddressETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableDexes\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distributions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TokenInterface[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"disableDexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"destTokenEthPriceTimesGasPrices\",\"type\":\"uint256[]\"}],\"name\":\"getBuyAmountMultiWithGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distributions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"returnAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableDexes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTokenEthPriceTimesGasPrices\",\"type\":\"uint256\"}],\"name\":\"getBuyAmountWithGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distributions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract TokenInterface[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"disableDexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"destTokenEthPriceTimesGasPrices\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Resolver.MultiTokenPaths[]\",\"name\":\"multiTokenPaths\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getBuyAmountsMulti\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distributions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"returnAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Resolver.MultiTokenPathsBuyAmt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaOneProtoResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c85c3d4d209866cf618867b57c974708eacbad46255a3e29d12a5bf236fb43e1"}]}