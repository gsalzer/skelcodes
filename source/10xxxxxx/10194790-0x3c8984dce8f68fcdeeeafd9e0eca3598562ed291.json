{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @trusttoken/registry/contracts/Registry.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ninterface RegistryClone {\r\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) external;\r\n}\r\n\r\ncontract Registry {\r\n    struct AttributeData {\r\n        uint256 value;\r\n        bytes32 notes;\r\n        address adminAddr;\r\n        uint256 timestamp;\r\n    }\r\n    \r\n    // never remove any storage variables\r\n    address public owner;\r\n    address public pendingOwner;\r\n    bool initialized;\r\n\r\n    // Stores arbitrary attributes for users. An example use case is an IERC20\r\n    // token that requires its users to go through a KYC/AML check - in this case\r\n    // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\r\n    // that account can use the token. This mapping stores that value (1, in the\r\n    // example) as well as which validator last set the value and at what time,\r\n    // so that e.g. the check can be renewed at appropriate intervals.\r\n    mapping(address => mapping(bytes32 => AttributeData)) attributes;\r\n    // The logic governing who is allowed to set what attributes is abstracted as\r\n    // this accessManager, so that it may be replaced by the owner as needed\r\n    bytes32 constant WRITE_PERMISSION = keccak256(\"canWriteTo-\");\r\n    mapping(bytes32 => RegistryClone[]) subscribers;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\r\n    event SetManager(address indexed oldManager, address indexed newManager);\r\n    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n\r\n    // Allows a write if either a) the writer is that Registry's owner, or\r\n    // b) the writer is writing to attribute foo and that writer already has\r\n    // the canWriteTo-foo attribute set (in that same Registry)\r\n    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\r\n        return (_admin == owner || hasAttribute(_admin, keccak256(abi.encodePacked(WRITE_PERMISSION ^ _attribute))));\r\n    }\r\n\r\n    // Writes are allowed only if the accessManager approves\r\n    function setAttribute(address _who, bytes32 _attribute, uint256 _value, bytes32 _notes) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\r\n\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\r\n        subscribers[_attribute].push(_syncer);\r\n        emit StartSubscription(_attribute, _syncer);\r\n    }\r\n\r\n    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\r\n        uint256 length = subscribers[_attribute].length;\r\n        require(_index < length);\r\n        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\r\n        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\r\n        subscribers[_attribute].length = length - 1;\r\n    }\r\n\r\n    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\r\n        return subscribers[_attribute].length;\r\n    }\r\n\r\n    function setAttributeValue(address _who, bytes32 _attribute, uint256 _value) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, \"\", msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, \"\", msg.sender);\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    // Returns true if the uint256 value stored for this attribute is non-zero\r\n    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\r\n        return attributes[_who][_attribute].value != 0;\r\n    }\r\n\r\n\r\n    // Returns the exact value of the attribute, as well as its metadata\r\n    function getAttribute(address _who, bytes32 _attribute) public view returns (uint256, bytes32, address, uint256) {\r\n        AttributeData memory data = attributes[_who][_attribute];\r\n        return (data.value, data.notes, data.adminAddr, data.timestamp);\r\n    }\r\n\r\n    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].value;\r\n    }\r\n\r\n    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\r\n        return attributes[_who][_attribute].adminAddr;\r\n    }\r\n\r\n    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].timestamp;\r\n    }\r\n\r\n    function syncAttribute(bytes32 _attribute, uint256 _startIndex, address[] calldata _addresses) external {\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> _startIndex) {\r\n            RegistryClone target = targets[index];\r\n            for (uint256 i = _addresses.length; i --> 0; ) {\r\n                address who = _addresses[i];\r\n                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function reclaimEther(address payable _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/InstantiatableOwnable.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n * @title InstantiatableOwnable\r\n * @dev The InstantiatableOwnable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract InstantiatableOwnable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The InstantiatableOwnable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/Claimable.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the InstantiatableOwnable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is InstantiatableOwnable {\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/BalanceSheet.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n// A wrapper around the balanceOf mapping.\r\ncontract BalanceSheet is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].add(_value);\r\n    }\r\n\r\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].sub(_value);\r\n    }\r\n\r\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/AllowanceSheet.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n// A wrapper around the allowanceOf mapping.\r\ncontract AllowanceSheet is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowanceOf;\r\n\r\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);\r\n    }\r\n\r\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\r\n    }\r\n\r\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueReward/FinancialOpportunity.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n/**\r\n * @title FinancialOpportunity\r\n * @dev Interface for third parties to implement financial opportunities\r\n *\r\n * -- Overview --\r\n * The goal of this contract is to allow anyone to create an opportunity\r\n * to earn interest on TUSD. deposit() \"mints\" yTUSD whcih is redeemable\r\n * for some amount of TUSD. TrueUSD wraps this contractwith TrustToken\r\n * Assurance, which provides protection from bugs and system design flaws\r\n * TUSD is a compliant stablecoin, therefore we do not allow transfers of\r\n * yTUSD, thus there are no transfer functions\r\n *\r\n * -- tokenValue() --\r\n * This function returns the value in TUSD of 1 yTUSD\r\n * This value should never decrease\r\n *\r\n * -- TUSD vs yTUSD --\r\n * yTUSD represents a fixed value which is redeemable for some amount of TUSD\r\n * Think of yTUSD like cTUSD, where cTokens are minted and increase in value versus\r\n * the underlying asset as interest is accrued\r\n *\r\n * -- totalSupply() --\r\n * This function returns the total supply of yTUSD issued by this contract\r\n * It is important to track this value accuratley and add/deduct the correct\r\n * amount on deposit/redemptions\r\n *\r\n * -- Assumptions --\r\n * - tokenValue can never decrease\r\n * - total TUSD owed to depositors = tokenValue() * totalSupply()\r\n */\r\ninterface FinancialOpportunity {\r\n\r\n    /**\r\n     * @dev Returns total supply of yTUSD in this contract\r\n     *\r\n     * @return total supply of yTUSD in this contract\r\n    **/\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Exchange rate between TUSD and yTUSD\r\n     *\r\n     * tokenValue should never decrease\r\n     *\r\n     * @return TUSD / yTUSD price ratio\r\n     */\r\n    function tokenValue() external view returns(uint);\r\n\r\n    /**\r\n     * @dev deposits TrueUSD and returns yTUSD minted\r\n     *\r\n     * We can think of deposit as a minting function which\r\n     * will increase totalSupply of yTUSD based on the deposit\r\n     *\r\n     * @param from account to transferFrom\r\n     * @param amount amount in TUSD to deposit\r\n     * @return yTUSD minted from this deposit\r\n     */\r\n    function deposit(address from, uint amount) external returns(uint);\r\n\r\n    /**\r\n     * @dev Redeem yTUSD for TUSD and withdraw to account\r\n     *\r\n     * This function should use tokenValue to calculate\r\n     * how much TUSD is owed. This function should burn yTUSD\r\n     * after redemption\r\n     *\r\n     * This function must return value in TUSD\r\n     *\r\n     * @param to account to transfer TUSD for\r\n     * @param amount amount in TUSD to withdraw from finOp\r\n     * @return TUSD amount returned from this transaction\r\n     */\r\n    function redeem(address to, uint amount) external returns(uint);\r\n}\r\n\r\n// File: contracts/TrueCurrencies/ProxyStorage.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nDefines the storage layout of the token implementation contract. Any newly declared\r\nstate variables in future upgrades should be appended to the bottom. Never remove state variables\r\nfrom this list\r\n */\r\ncontract ProxyStorage {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    bool initialized;\r\n\r\n    BalanceSheet balances_Deprecated;\r\n    AllowanceSheet allowances_Deprecated;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    bool private paused_Deprecated = false;\r\n    address private globalPause_Deprecated;\r\n\r\n    uint256 public burnMin = 0;\r\n    uint256 public burnMax = 0;\r\n\r\n    Registry public registry;\r\n\r\n    string name_Deprecated;\r\n    string symbol_Deprecated;\r\n\r\n    uint[] gasRefundPool_Deprecated;\r\n    uint256 private redemptionAddressCount_Deprecated;\r\n    uint256 public minimumGasPriceForFutureRefunds;\r\n\r\n    mapping (address => uint256) _balanceOf;\r\n    mapping (address => mapping (address => uint256)) _allowance;\r\n    mapping (bytes32 => mapping (address => uint256)) attributes;\r\n\r\n    // reward token storage\r\n    mapping(address => FinancialOpportunity) finOps;\r\n    mapping(address => mapping(address => uint256)) finOpBalances;\r\n    mapping(address => uint256) finOpSupply;\r\n\r\n    // true reward allocation\r\n    // proportion: 1000 = 100%\r\n    struct RewardAllocation { uint proportion; address finOp; }\r\n    mapping(address => RewardAllocation[]) _rewardDistribution;\r\n    uint256 maxRewardProportion = 1000;\r\n\r\n    /* Additionally, we have several keccak-based storage locations.\r\n     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\r\n     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\r\n     * A preimage collision can be used to attack the contract by treating one storage location as another,\r\n     * which would always be a critical issue.\r\n     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\r\n     *******************************************************************************************************\r\n     ** length     input                                                         usage\r\n     *******************************************************************************************************\r\n     ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner\r\n     ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner\r\n     ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation\r\n     ** 32         uint256(11)                                                   gasRefundPool_Deprecated\r\n     ** 64         uint256(address),uint256(14)                                  balanceOf\r\n     ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance\r\n     ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes\r\n    **/\r\n}\r\n\r\n// File: contracts/TrueCurrencies/HasOwner.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n * @title HasOwner\r\n * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin.\r\n and provides basic authorization control functions. Inherits storage layout of\r\n ProxyStorage.\r\n */\r\ncontract HasOwner is ProxyStorage {\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n    * @dev sets the original `owner` of the contract to the sender\r\n    * at construction. Must then be reinitialized\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/utilities/PausedToken.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\ncontract PausedToken is HasOwner, RegistryClone {\r\n    using SafeMath for uint256;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event AllowanceSheetSet(address indexed sheet);\r\n    event BalanceSheetSet(address indexed sheet);\r\n    uint8 constant DECIMALS = 18;\r\n    uint8 constant ROUNDING = 2;\r\n\r\n    event WipeBlacklistedAccount(address indexed account, uint256 balance);\r\n    event SetRegistry(address indexed registry);\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function rounding() public pure returns (uint8) {\r\n        return ROUNDING;\r\n    }\r\n\r\n    /**\r\n     *@dev send all eth balance in the TrueUSD contract to another address\r\n     */\r\n    function reclaimEther(address payable _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n    *@dev send all token balance of an arbitary erc20 token\r\n    in the TrueUSD contract to another address\r\n    */\r\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n    /**\r\n     *@dev allows owner of TrueUSD to gain ownership of any contract that TrueUSD currently owns\r\n     */\r\n    function reclaimContract(InstantiatableOwnable _ownable)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _ownable.transferOwnership(owner);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     *@dev Return the remaining sponsored gas slots\r\n     */\r\n    function remainingGasRefundPool() public view returns (uint256 length) {\r\n        assembly {\r\n            length := sload(0xfffff)\r\n        }\r\n    }\r\n\r\n    function sponsorGas() external {\r\n        uint256 refundPrice = minimumGasPriceForFutureRefunds;\r\n        require(refundPrice > 0);\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            let result := add(offset, 9)\r\n            sstore(0xfffff, result)\r\n            let position := add(offset, 0x100000)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n        }\r\n    }\r\n\r\n    bytes32 constant CAN_SET_FUTURE_REFUND_MIN_GAS_PRICE = \"canSetFutureRefundMinGasPrice\";\r\n\r\n    function setMinimumGasPriceForFutureRefunds(\r\n        uint256 _minimumGasPriceForFutureRefunds\r\n    ) public {\r\n        require(\r\n            registry.hasAttribute(\r\n                msg.sender,\r\n                CAN_SET_FUTURE_REFUND_MIN_GAS_PRICE\r\n            )\r\n        );\r\n        minimumGasPriceForFutureRefunds = _minimumGasPriceForFutureRefunds;\r\n    }\r\n\r\n    function balanceOf(address _who) public view returns (uint256) {\r\n        return _getBalance(_who);\r\n    }\r\n\r\n    function _getBalance(address _who) internal view returns (uint256 value) {\r\n        return _balanceOf[_who];\r\n    }\r\n\r\n    function _setBalance(address _who, uint256 _value) internal {\r\n        _balanceOf[_who] = _value;\r\n    }\r\n\r\n    function allowance(address _who, address _spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _getAllowance(_who, _spender);\r\n    }\r\n\r\n    function _getAllowance(address _who, address _spender)\r\n        internal\r\n        view\r\n        returns (uint256 value)\r\n    {\r\n        return _allowance[_who][_spender];\r\n    }\r\n\r\n    function transfer(\r\n        address, /*_to*/\r\n        uint256 /*_value*/\r\n    ) public pure returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function transferFrom(\r\n        address, /*_from*/\r\n        address, /*_to*/\r\n        uint256 /*_value*/\r\n    ) public pure returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function burn(\r\n        uint256 /*_value*/\r\n    ) public pure {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function mint(\r\n        address, /*_to*/\r\n        uint256 /*_value*/\r\n    ) public view onlyOwner {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function approve(\r\n        address, /*_spender*/\r\n        uint256 /*_value*/\r\n    ) public pure returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address, /*_spender*/\r\n        uint256 /*_addedValue*/\r\n    ) public pure returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address, /*_spender*/\r\n        uint256 /*_subtractedValue*/\r\n    ) public pure returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function paused() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function setRegistry(Registry _registry) public onlyOwner {\r\n        registry = _registry;\r\n        emit SetRegistry(address(registry));\r\n    }\r\n\r\n    modifier onlyRegistry {\r\n        require(msg.sender == address(registry));\r\n        _;\r\n    }\r\n\r\n    function syncAttributeValue(\r\n        address _who,\r\n        bytes32 _attribute,\r\n        uint256 _value\r\n    ) public onlyRegistry {\r\n        attributes[_attribute][_who] = _value;\r\n    }\r\n\r\n    bytes32 constant IS_BLACKLISTED = \"isBlacklisted\";\r\n\r\n    function wipeBlacklistedAccount(address _account) public onlyOwner {\r\n        require(\r\n            attributes[IS_BLACKLISTED][_account] != 0,\r\n            \"_account is not blacklisted\"\r\n        );\r\n        uint256 oldValue = _getBalance(_account);\r\n        _setBalance(_account, 0);\r\n        totalSupply_ = totalSupply_.sub(oldValue);\r\n        emit WipeBlacklistedAccount(_account, oldValue);\r\n        emit Transfer(_account, address(0), oldValue);\r\n    }\r\n}\r\n\r\n\r\n/** @title PausedDelegateERC20\r\nAccept forwarding delegation calls from the old TrueUSD (V1) contract. This way the all the ERC20\r\nfunctions in the old contract still works (except Burn).\r\n*/\r\ncontract PausedDelegateERC20 is PausedToken {\r\n    address public constant DELEGATE_FROM = 0x8dd5fbCe2F6a956C3022bA3663759011Dd51e73E;\r\n\r\n    modifier onlyDelegateFrom() {\r\n        require(msg.sender == DELEGATE_FROM);\r\n        _;\r\n    }\r\n\r\n    function delegateTotalSupply() public view returns (uint256) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function delegateBalanceOf(address who) public view returns (uint256) {\r\n        return balanceOf(who);\r\n    }\r\n\r\n    function delegateTransfer(\r\n        address, /*to*/\r\n        uint256, /*value*/\r\n        address /*origSender*/\r\n    ) public view onlyDelegateFrom returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function delegateAllowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _getAllowance(owner, spender);\r\n    }\r\n\r\n    function delegateTransferFrom(\r\n        address, /*from*/\r\n        address, /*to*/\r\n        uint256, /*value*/\r\n        address /*origSender*/\r\n    ) public view onlyDelegateFrom returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function delegateApprove(\r\n        address, /*spender*/\r\n        uint256, /*value*/\r\n        address /*origSender*/\r\n    ) public view onlyDelegateFrom returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function delegateIncreaseApproval(\r\n        address, /*spender*/\r\n        uint256, /*addedValue*/\r\n        address /*origSender*/\r\n    ) public view onlyDelegateFrom returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n\r\n    function delegateDecreaseApproval(\r\n        address, /*spender*/\r\n        uint256, /*subtractedValue*/\r\n        address /*origSender*/\r\n    ) public view onlyDelegateFrom returns (bool) {\r\n        revert(\"Token Paused\");\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/PausedTrueUSD.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\ncontract PausedTrueUSD is PausedDelegateERC20 {\r\n    function name() public pure returns (string memory) {\r\n        return \"TrueUSD\";\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return \"TUSD\";\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sheet\",\"type\":\"address\"}],\"name\":\"AllowanceSheetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sheet\",\"type\":\"address\"}],\"name\":\"BalanceSheetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WipeBlacklistedAccount\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATE_FROM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"delegateAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"delegateBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateDecreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateIncreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegateTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumGasPriceForFutureRefunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract InstantiatableOwnable\",\"name\":\"_ownable\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingGasRefundPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounding\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumGasPriceForFutureRefunds\",\"type\":\"uint256\"}],\"name\":\"setMinimumGasPriceForFutureRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sponsorGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_attribute\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"syncAttributeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"wipeBlacklistedAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PausedTrueUSD","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8a11a3a7148c8ad2b54ba08632c28279b35ec397a393eb42b9e32a2267f551aa"}]}