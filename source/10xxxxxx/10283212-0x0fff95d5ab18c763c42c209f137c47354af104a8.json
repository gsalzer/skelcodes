{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.2;\n\n\n// SPDX-License-Identifier: MIT\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) internal _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 internal _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    uint256 private _cap;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        require(recipient != address(this), \"ERC20: Cannot transfer to self\");\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.S\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n\n// SPDX-License-Identifier: MIT\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n\nlibrary WhitelistLib {\n    struct AllowedAddress {\n        bool tradeable;\n        uint256 lockPeriod;\n        uint256 dailyLimit;\n        uint256 dailyLimitToday;\n        uint256 addedAt;\n        uint256 recordTime;\n    }\n}\n\ncontract HexWhitelist is AccessControl, ReentrancyGuard {\n    bytes32 public constant DEPLOYER_ROLE = keccak256(\"DEPLOYER_ROLE\");\n\n    uint256 public constant SECONDS_IN_DAY = 86400;\n\n    using WhitelistLib for WhitelistLib.AllowedAddress;\n\n    mapping(address => WhitelistLib.AllowedAddress) internal exchanges;\n    mapping(address => WhitelistLib.AllowedAddress) internal dapps;\n    mapping(address => WhitelistLib.AllowedAddress) internal referrals;\n\n    uint256 internal whitelistRecordTime;\n\n    modifier onlyAdminOrDeployerRole() {\n        bool hasAdminRole = hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        bool hasDeployerRole = hasRole(DEPLOYER_ROLE, _msgSender());\n        require(hasAdminRole || hasDeployerRole, \"Must have admin or deployer role\");\n        _;\n    }\n\n    constructor (address _adminAddress) public {\n        _setupRole(DEPLOYER_ROLE, _msgSender());\n        _setupRole(DEFAULT_ADMIN_ROLE, _adminAddress);\n\n        whitelistRecordTime = SafeMath.add(block.timestamp, SafeMath.mul(1, SECONDS_IN_DAY));\n    }\n    function registerExchangeTradeable(address _address, uint256 dailyLimit) public onlyAdminOrDeployerRole {\n        _registerExchange(_address, true, 0, dailyLimit);\n    }\n\n    function registerDappTradeable(address _address, uint256 dailyLimit) public onlyAdminOrDeployerRole {\n        _registerDapp(_address, true, 0, dailyLimit);\n    }\n\n    function registerReferralTradeable(address _address, uint256 dailyLimit) public onlyAdminOrDeployerRole {\n        _registerReferral(_address, true, 0, dailyLimit);\n    }\n\n    function registerExchangeNonTradeable(address _address, uint256 dailyLimit, uint256 lockPeriod) public onlyAdminOrDeployerRole {\n        _registerExchange(_address, false, lockPeriod, dailyLimit);\n    }\n\n    function registerDappNonTradeable(address _address, uint256 dailyLimit, uint256 lockPeriod) public onlyAdminOrDeployerRole {\n        _registerDapp(_address, false, lockPeriod, dailyLimit);\n    }\n\n    function registerReferralNonTradeable(address _address, uint256 dailyLimit, uint256 lockPeriod) public onlyAdminOrDeployerRole {\n        _registerReferral(_address, false, lockPeriod, dailyLimit);\n    }\n\n\n    function unregisterExchange(address _address) public onlyAdminOrDeployerRole {\n        delete exchanges[_address];\n    }\n\n    function unregisterDapp(address _address) public onlyAdminOrDeployerRole {\n        delete dapps[_address];\n    }\n\n    function unregisterReferral(address _address) public onlyAdminOrDeployerRole {\n        delete referrals[_address];\n    }\n\n    function setExchangepDailyLimit(address _address, uint256 _dailyLimit) public onlyAdminOrDeployerRole {\n        exchanges[_address].dailyLimit = _dailyLimit;\n    }\n\n    function setDappDailyLimit(address _address, uint256 _dailyLimit) public onlyAdminOrDeployerRole {\n        dapps[_address].dailyLimit = _dailyLimit;\n    }\n\n    function setReferralDailyLimit(address _address, uint256 _dailyLimit) public onlyAdminOrDeployerRole {\n        referrals[_address].dailyLimit = _dailyLimit;\n    }\n\n    function setExchangeLockPeriod(address _address, uint256 _lockPeriod) public onlyAdminOrDeployerRole {\n        require(!getExchangeTradeable(_address), \"cannot set lock period to tradeable address\");\n        exchanges[_address].lockPeriod = _lockPeriod;\n    }\n\n    function setDappLockPeriod(address _address, uint256 _lockPeriod) public onlyAdminOrDeployerRole {\n        require(!getExchangeTradeable(_address), \"cannot set lock period to tradeable address\");\n        dapps[_address].lockPeriod = _lockPeriod;\n    }\n\n    function setReferralLockPeriod(address _address, uint256 _lockPeriod) public onlyAdminOrDeployerRole {\n        require(!getExchangeTradeable(_address), \"cannot set lock period to tradeable address\");\n        dapps[_address].lockPeriod = _lockPeriod;\n    }\n\n    function addToExchangeDailyLimit(address _address, uint256 amount) public {\n        if (exchanges[_address].dailyLimit > 0) {\n            if (isNewDayStarted(exchanges[_address].recordTime)) {\n                exchanges[_address].dailyLimitToday = 0;\n                exchanges[_address].recordTime = getNewRecordTime();\n            }\n\n            uint256 limitToday = dapps[_address].dailyLimitToday;\n            require(SafeMath.add(limitToday, amount) < exchanges[_address].dailyLimit, \"daily limit exceeded\");\n\n            exchanges[_address].dailyLimitToday = SafeMath.add(limitToday, amount);\n        }\n    }\n\n    function addToDappDailyLimit(address _address, uint256 amount) public {\n        if (dapps[_address].dailyLimit > 0) {\n            if (isNewDayStarted(dapps[_address].recordTime)) {\n                dapps[_address].dailyLimitToday = 0;\n                dapps[_address].recordTime = getNewRecordTime();\n            }\n\n            uint256 limitToday = dapps[_address].dailyLimitToday;\n            require(SafeMath.add(limitToday, amount) < dapps[_address].dailyLimit, \"daily limit exceeded\");\n\n            dapps[_address].dailyLimitToday = SafeMath.add(limitToday, amount);\n        }\n    }\n\n    function addToReferralDailyLimit(address _address, uint256 amount) public {\n        if (referrals[_address].dailyLimit > 0) {\n            if (isNewDayStarted(referrals[_address].recordTime)) {\n                referrals[_address].dailyLimitToday = 0;\n                referrals[_address].recordTime = getNewRecordTime();\n            }\n\n            uint256 limitToday = referrals[_address].dailyLimitToday;\n            require(SafeMath.add(limitToday, amount) < referrals[_address].dailyLimit, \"daily limit exceeded\");\n\n            referrals[_address].dailyLimitToday = SafeMath.add(limitToday, amount);\n        }\n    }\n\n\n    function isRegisteredDapp(address _address) public view returns (bool) {\n        return (dapps[_address].addedAt != 0) ? true : false;\n    }\n\n    function isRegisteredReferral(address _address) public view returns (bool) {\n        if (dapps[_address].addedAt != 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function isRegisteredDappOrReferral(address executionAddress) public view returns (bool) {\n        if (isRegisteredDapp(executionAddress) || isRegisteredReferral(executionAddress)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function isRegisteredExchange(address _address) public view returns (bool) {\n        if (exchanges[_address].addedAt != 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function getExchangeTradeable(address _address) public view returns (bool) {\n        return exchanges[_address].tradeable;\n    }\n\n    function getDappTradeable(address _address) public view returns (bool) {\n        return dapps[_address].tradeable;\n    }\n\n    function getReferralTradeable(address _address) public view returns (bool) {\n        return referrals[_address].tradeable;\n    }\n\n    function getDappOrReferralTradeable(address _address) public view returns (bool) {\n        if (isRegisteredDapp(_address)) {\n            return dapps[_address].tradeable;\n        } else {\n            return referrals[_address].tradeable;\n        }\n    }\n\n    function getExchangeLockPeriod(address _address) public view returns (uint256) {\n        return exchanges[_address].lockPeriod;\n    }\n\n    function getDappLockPeriod(address _address) public view returns (uint256) {\n        return dapps[_address].lockPeriod;\n    }\n\n    function getReferralLockPeriod(address _address) public view returns (uint256) {\n        return referrals[_address].lockPeriod;\n    }\n\n    function getDappOrReferralLockPeriod(address _address) public view returns (uint256) {\n        if (isRegisteredDapp(_address)) {\n            return dapps[_address].lockPeriod;\n        } else {\n            return referrals[_address].lockPeriod;\n        }\n    }\n\n    function getDappDailyLimit(address _address) public view returns (uint256) {\n        return dapps[_address].dailyLimit;\n    }\n\n    function getReferralDailyLimit(address _address) public view returns (uint256) {\n        return referrals[_address].dailyLimit;\n    }\n\n    function getDappOrReferralDailyLimit(address _address) public view returns (uint256) {\n        if (isRegisteredDapp(_address)) {\n            return dapps[_address].dailyLimit;\n        } else {\n            return referrals[_address].dailyLimit;\n        }\n    }\n    function getExchangeTodayMinted(address _address) public view returns (uint256) {\n        return exchanges[_address].dailyLimitToday;\n    }\n\n    function getDappTodayMinted(address _address) public view returns (uint256) {\n        return dapps[_address].dailyLimitToday;\n    }\n\n    function getReferralTodayMinted(address _address) public view returns (uint256) {\n        return referrals[_address].dailyLimitToday;\n    }\n\n    function getExchangeRecordTimed(address _address) public view returns (uint256) {\n        return exchanges[_address].recordTime;\n    }\n\n    function getDappRecordTimed(address _address) public view returns (uint256) {\n        return dapps[_address].recordTime;\n    }\n\n    function getReferralRecordTimed(address _address) public view returns (uint256) {\n        return referrals[_address].recordTime;\n    }\n\n    function getNewRecordTime() internal view returns (uint256) {\n        return SafeMath.add(block.timestamp, SafeMath.mul(1, SECONDS_IN_DAY));\n    }\n\n    function isNewDayStarted(uint256 oldRecordTime) internal view returns (bool) {\n        return block.timestamp > oldRecordTime ? true : false;\n    }\n\n    function _registerExchange(address _address, bool tradeable, uint256 lockPeriod, uint256 dailyLimit) internal\n    {\n        require(!isRegisteredDappOrReferral(_address), \"address already registered as dapp or referral\");\n        require(!isRegisteredExchange(_address), \"exchange already registered\");\n        exchanges[_address] = WhitelistLib.AllowedAddress({\n            tradeable: tradeable,\n            lockPeriod: lockPeriod,\n            dailyLimit: dailyLimit,\n            dailyLimitToday: 0,\n            addedAt: block.timestamp,\n            recordTime: getNewRecordTime()\n            });\n    }\n\n    function _registerDapp(address _address, bool tradeable, uint256 lockPeriod, uint256 dailyLimit) internal\n    {\n        require(!isRegisteredExchange(_address) && !isRegisteredReferral(_address), \"address already registered as exchange or referral\");\n        require(!isRegisteredDapp(_address), \"address already registered\");\n        dapps[_address] = WhitelistLib.AllowedAddress({\n            tradeable: tradeable,\n            lockPeriod: lockPeriod,\n            dailyLimit: dailyLimit,\n            dailyLimitToday: 0,\n            addedAt: block.timestamp,\n            recordTime: getNewRecordTime()\n            });\n    }\n\n    function _registerReferral(address _address, bool tradeable, uint256 lockPeriod, uint256 dailyLimit) internal\n    {\n        require(!isRegisteredExchange(_address) && !isRegisteredDapp(_address), \"address already registered as exchange or referral\");\n        require(!isRegisteredReferral(_address), \"address already registered\");\n        referrals[_address] = WhitelistLib.AllowedAddress({\n            tradeable: tradeable,\n            lockPeriod: lockPeriod,\n            dailyLimit: dailyLimit,\n            dailyLimitToday: 0,\n            addedAt: block.timestamp,\n            recordTime: getNewRecordTime()\n            });\n    }\n}\n\ncontract HexMoneyInternal is AccessControl, ReentrancyGuard {\n    bytes32 public constant DEPLOYER_ROLE = keccak256(\"DEPLOYER_ROLE\");\n\n    // production\n    uint256 public constant SECONDS_IN_DAY = 86400;\n\n    HexWhitelist internal whitelist;\n\n    modifier onlyAdminOrDeployerRole() {\n        bool hasAdminRole = hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        bool hasDeployerRole = hasRole(DEPLOYER_ROLE, _msgSender());\n        require(hasAdminRole || hasDeployerRole, \"Must have admin or deployer role\");\n        _;\n    }\n\n    function getWhitelistAddress() public view returns (address) {\n        return address(whitelist);\n    }\n\n}\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20FreezableCapped is ERC20, HexMoneyInternal {\n    uint256 public constant MINIMAL_FREEZE_PERIOD = 7;    // 7 days\n\n    // freezing chains\n    mapping (bytes32 => uint256) internal chains;\n    // freezing amounts for each chain\n    //mapping (bytes32 => uint) internal freezings;\n    mapping(bytes32 => Freezing) internal freezings;\n    // total freezing balance per address\n    mapping (address => uint) internal freezingBalance;\n\n    mapping(address => bytes32[]) internal freezingsByUser;\n\n    mapping (address => uint256) internal latestFreezingTime;\n\n    struct Freezing {\n        address user;\n        uint256 startDate;\n        uint256 freezeDays;\n        uint256 freezeAmount;\n        bool capitalized;\n    }\n\n\n\n    event Freezed(address indexed to, uint256 release, uint amount);\n    event Released(address indexed owner, uint amount);\n\n    uint256 private _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor (uint256 cap) public {\n        require(cap > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address include freezing tokens.\n     * @param account The address to query the the balance of.\n     * @return balance An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return super.balanceOf(account) + freezingBalance[account];\n    }\n\n    /**\n     * @dev Gets the balance of the specified address without freezing tokens.\n     * @param account The address to query the the balance of.\n     * @return balance An uint256 representing the amount owned by the passed address.\n     */\n    function actualBalanceOf(address account) public view returns (uint256 balance) {\n        return super.balanceOf(account);\n    }\n\n    function freezingBalanceOf(address account) public view returns (uint256 balance) {\n        return freezingBalance[account];\n    }\n\n    function latestFreezeTimeOf(address account) public view returns (uint256) {\n        return latestFreezingTime[account];\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n    \n    function getUserFreezings(address _user) public view returns (bytes32[] memory userFreezings) {\n        return freezingsByUser[_user];\n    }\n\n    function getFreezingById(bytes32 freezingId)\n        public\n        view\n        returns (address user, uint256 startDate, uint256 freezeDays, uint256 freezeAmount, bool capitalized)\n    {\n        Freezing memory userFreeze = freezings[freezingId];\n        user = userFreeze.user;\n        startDate = userFreeze.startDate;\n        freezeDays = userFreeze.freezeDays;\n        freezeAmount = userFreeze.freezeAmount;\n        capitalized = userFreeze.capitalized;\n    }\n\n\n    function freeze(address _to, uint256 _start, uint256 _freezeDays, uint256 _amount) internal {\n        require(_to != address(0x0), \"FreezeContract: address cannot be zero\");\n        require(_start >= block.timestamp, \"FreezeContract: start date cannot be in past\");\n        require(_freezeDays >= 0, \"FreezeContract: amount of freeze days cannot be zero\");\n        require(_amount <= _balances[_msgSender()], \"FreezeContract: freeze amount exceeds unfrozen balance\");\n\n        Freezing memory userFreeze = Freezing({\n            user: _to,\n            startDate: _start,\n            freezeDays: _freezeDays,\n            freezeAmount: _amount,\n            capitalized: false\n        });\n\n        bytes32 freezeId = _toFreezeKey(_to, _start);\n\n        _balances[_msgSender()] = _balances[_msgSender()].sub(_amount);\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n        freezings[freezeId] = userFreeze;\n        freezingsByUser[_to].push(freezeId);\n        latestFreezingTime[_to] = _start;\n\n        emit Transfer(_msgSender(), _to, _amount);\n        emit Freezed(_to, _start, _amount);\n    }\n\n    function mintAndFreeze(address _to, uint256 _start, uint256 _freezeDays, uint256 _amount) internal {\n        require(_to != address(0x0), \"FreezeContract: address cannot be zero\");\n        require(_start >= block.timestamp, \"FreezeContract: start date cannot be in past\");\n        require(_freezeDays >= 0, \"FreezeContract: amount of freeze days cannot be zero\");\n\n        Freezing memory userFreeze = Freezing({\n            user: _to,\n            startDate: _start,\n            freezeDays: _freezeDays,\n            freezeAmount: _amount,\n            capitalized: false\n        });\n\n        bytes32 freezeId = _toFreezeKey(_to, _start);\n\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n        freezings[freezeId] = userFreeze;\n        freezingsByUser[_to].push(freezeId);\n        latestFreezingTime[_to] = _start;\n\n        _totalSupply = _totalSupply.add(_amount);\n\n        emit Transfer(_msgSender(), _to, _amount);\n        emit Freezed(_to, _start, _amount);\n    }\n\n    function _toFreezeKey(address _user, uint256 _startDate) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_user, _startDate));\n    }\n\n    function release(uint256 _startTime) internal {\n        bytes32 freezeId = _toFreezeKey(_msgSender(), _startTime);\n        Freezing memory userFreeze = freezings[freezeId];\n\n        uint256 lockUntil = _daysToTimestampFrom(userFreeze.startDate, userFreeze.freezeDays);\n        require(block.timestamp >= lockUntil, \"cannot release before lock\");\n\n        uint256 amount = userFreeze.freezeAmount;\n\n        _balances[_msgSender()] = _balances[_msgSender()].add(amount);\n        freezingBalance[_msgSender()] = freezingBalance[_msgSender()].sub(amount);\n\n        _deleteFreezing(freezeId, freezingsByUser[_msgSender()]);\n\n        emit Released(_msgSender(), amount);\n    }\n\n    function refreeze(uint256 _startTime, uint256 addAmount) internal {\n        bytes32 freezeId = _toFreezeKey(_msgSender(), _startTime);\n        Freezing storage userFreeze = freezings[freezeId];\n\n        uint256 lockUntil;\n        if (!userFreeze.capitalized) {\n            lockUntil = _daysToTimestampFrom(userFreeze.startDate, userFreeze.freezeDays);\n        } else {\n            lockUntil = _daysToTimestampFrom(userFreeze.startDate, 1);\n        }\n\n        require(block.timestamp >= lockUntil, \"cannot refreeze before lock\");\n\n        bytes32 newFreezeId = _toFreezeKey(userFreeze.user, block.timestamp);\n        uint256 oldFreezeAmount = userFreeze.freezeAmount;\n        uint256 newFreezeAmount = SafeMath.add(userFreeze.freezeAmount, addAmount);\n\n        Freezing memory newFreeze = Freezing({\n            user: userFreeze.user,\n            startDate: block.timestamp,\n            freezeDays: userFreeze.freezeDays,\n            freezeAmount: newFreezeAmount,\n            capitalized: true\n        });\n\n        freezingBalance[_msgSender()] = freezingBalance[_msgSender()].add(addAmount);\n\n        freezings[newFreezeId] = newFreeze;\n        freezingsByUser[userFreeze.user].push(newFreezeId);\n        latestFreezingTime[userFreeze.user] = block.timestamp;\n\n        _deleteFreezing(freezeId, freezingsByUser[_msgSender()]);\n        delete freezings[freezeId];\n\n        emit Released(_msgSender(), oldFreezeAmount);\n        emit Transfer(_msgSender(), _msgSender(), addAmount);\n        emit Freezed(_msgSender(), block.timestamp, newFreezeAmount);\n    }\n\n    function _deleteFreezing(bytes32 freezingId, bytes32[] storage userFreezings) internal {\n        uint256 freezingIndex;\n        bool freezingFound;\n        for (uint256 i; i < userFreezings.length; i++) {\n            if (userFreezings[i] == freezingId) {\n                freezingIndex = i;\n                freezingFound = true;\n            }\n        }\n\n        if (freezingFound) {\n            userFreezings[freezingIndex] = userFreezings[userFreezings.length - 1];\n            delete userFreezings[userFreezings.length - 1];\n            userFreezings.pop();\n        }\n    }\n\n    function _daysToTimestampFrom(uint256 from, uint256 lockDays) internal pure returns(uint256) {\n        return SafeMath.add(from, SafeMath.mul(lockDays, SECONDS_IN_DAY));\n    }\n\n    function _daysToTimestamp(uint256 lockDays) internal view returns(uint256) {\n        return _daysToTimestampFrom(block.timestamp, lockDays);\n    }\n\n    function _getBaseLockDays() internal view returns (uint256) {\n        return _daysToTimestamp(MINIMAL_FREEZE_PERIOD);\n    }\n\n    function _getBaseLockDaysFrom(uint256 from) internal pure returns (uint256) {\n        return _daysToTimestampFrom(from, MINIMAL_FREEZE_PERIOD);\n    }\n\n\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - minted tokens must not cause the total supply to go over the cap.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) { // When minting tokens\n            require(totalSupply().add(amount) <= _cap, \"ERC20Capped: cap exceeded\");\n        }\n    }\n}\n\nabstract contract HexMoneyTeam is AccessControl {\n    bytes32 public constant TEAM_ROLE = keccak256(\"TEAM_ROLE\");\n\n    address payable internal teamAddress;\n\n    modifier onlyTeamRole() {\n        require(hasRole(TEAM_ROLE, _msgSender()), \"Must have admin role to setup\");\n        _;\n    }\n\n    function getTeamAddress() public view returns (address) {\n        return teamAddress;\n    }\n}\n\ncontract HXY is ERC20FreezableCapped, HexMoneyTeam {\n    using WhitelistLib for WhitelistLib.AllowedAddress;\n\n    uint256 internal liquidSupply = 694866350105876;\n    uint256 internal lockedSupply = SafeMath.mul(6, 10 ** 14);\n\n    uint256 internal lockedSupplyFreezingStarted;\n\n    address internal lockedSupplyAddress;\n    address internal liquidSupplyAddress;\n\n    struct LockedSupplyAddresses {\n        address firstAddress;\n        address secondAddress;\n        address thirdAddress;\n        address fourthAddress;\n        address fifthAddress;\n        address sixthAddress;\n    }\n\n    LockedSupplyAddresses internal lockedSupplyAddresses;\n    bool internal lockedSupplyPreminted;\n\n    // total amounts variables\n    uint256 internal totalMinted;\n    uint256 internal totalFrozen;\n    uint256 internal totalCirculating;\n    uint256 internal totalPayedInterest;\n\n    // round logic structures\n    uint256 internal hxyMintedMultiplier = 10 ** 6;\n    uint256[] internal hxyRoundMintAmount = [3, 6, 9, 12, 15, 18, 21, 24, 27];\n    uint256 internal baseHexToHxyRate = 10 ** 3;\n    uint256[] internal hxyRoundBaseRate = [2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n    uint256 internal maxHxyRounds = 9;\n\n    // initial round\n    uint256 internal currentHxyRound;\n    uint256 internal currentHxyRoundRate = SafeMath.mul(hxyRoundBaseRate[0], baseHexToHxyRate);\n\n\n\n    //constructor(address payable _teamAddress,  address _liqSupAddress, address _lockSupAddress, address _migratedSupplyAddress)\n    constructor(address _whitelistAddress,  address _liqSupAddress, uint256 _liqSupAmount)\n    public\n    ERC20FreezableCapped(SafeMath.mul(60,  10 ** 14))        // cap = 60,000,000\n    ERC20(\"HEX Money\", \"HXY\")\n    {\n        require(address(_whitelistAddress) != address(0x0), \"whitelist address should not be empty\");\n        require(address(_liqSupAddress) != address(0x0), \"liquid supply address should not be empty\");\n        _setupDecimals(8);\n\n        _setupRole(DEPLOYER_ROLE, _msgSender());\n\n\n        whitelist = HexWhitelist(_whitelistAddress);\n        _premintLiquidSupply(_liqSupAddress, _liqSupAmount);\n    }\n\n    function getRemainingHxyInRound() public view returns (uint256) {\n        return _getRemainingHxyInRound(currentHxyRound);\n    }\n\n    function getTotalHxyInRound() public view returns (uint256) {\n        return _getTotalHxyInRound(currentHxyRound);\n    }\n\n    function getTotalHxyMinted() public view returns (uint256) {\n        return totalMinted;\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return totalCirculating;\n    }\n\n    function getCurrentHxyRound() public view returns (uint256) {\n        return currentHxyRound;\n    }\n\n    function getCurrentHxyRate() public view returns (uint256) {\n        return currentHxyRoundRate;\n    }\n\n    function getTotalFrozen() public view returns (uint256) {\n        return totalFrozen;\n    }\n\n    function getTotalPayedInterest() public view returns (uint256) {\n        return totalPayedInterest;\n    }\n\n\n    function getCurrentInterestAmount(address _addr, uint256 _freezeStartDate) public view returns (uint256) {\n        bytes32 freezeId = _toFreezeKey(_addr, _freezeStartDate);\n        Freezing memory userFreeze = freezings[freezeId];\n\n        uint256 frozenTokens = userFreeze.freezeAmount;\n        if (frozenTokens != 0) {\n            uint256 startFreezeDate = userFreeze.startDate;\n            uint256 interestDays = SafeMath.div(SafeMath.sub(block.timestamp, startFreezeDate), SECONDS_IN_DAY);\n            return SafeMath.mul(SafeMath.div(frozenTokens, 1000), interestDays);\n        } else {\n            return 0;\n        }\n    }\n\n    function mintFromExchange(address account, uint256 amount) public {\n        address executionAddress = _msgSender();\n        require(whitelist.isRegisteredExchange(executionAddress), \"must be executed from whitelisted dapp\");\n        whitelist.addToExchangeDailyLimit(executionAddress, amount);\n\n        if (whitelist.getExchangeTradeable(executionAddress)) {\n            mint(account, amount);\n        } else {\n            uint256 lockPeriod = whitelist.getExchangeLockPeriod(executionAddress);\n            mintAndFreezeTo(account, amount, lockPeriod);\n        }\n    }\n\n    function mintFromDappOrReferral(address account, uint256 amount) public {\n        address executionAddress = _msgSender();\n        require(whitelist.isRegisteredDappOrReferral(executionAddress), \"must be executed from whitelisted address\");\n        if (whitelist.isRegisteredDapp(executionAddress)) {\n            whitelist.addToDappDailyLimit(executionAddress, amount);\n        } else {\n            whitelist.addToReferralDailyLimit(executionAddress, amount);\n        }\n\n        if (whitelist.getDappTradeable(executionAddress)) {\n            _mintDirectly(account, amount);\n        } else {\n            uint256 lockPeriod = whitelist.getDappOrReferralLockPeriod(executionAddress);\n            _mintAndFreezeDirectly(account, amount, lockPeriod);\n        }\n    }\n\n    function freezeHxy(uint256 lockAmount) public {\n        freeze(_msgSender(), block.timestamp, MINIMAL_FREEZE_PERIOD, lockAmount);\n        totalFrozen = SafeMath.add(totalFrozen, lockAmount);\n        totalCirculating = SafeMath.sub(totalCirculating, lockAmount);\n    }\n\n    function refreezeHxy(uint256 startDate) public {\n        bytes32 freezeId = _toFreezeKey(_msgSender(), startDate);\n        Freezing memory userFreezing = freezings[freezeId];\n\n        uint256 frozenTokens = userFreezing.freezeAmount;\n        uint256 interestDays = SafeMath.div(SafeMath.sub(block.timestamp, userFreezing.startDate), SECONDS_IN_DAY);\n        uint256 interestAmount = SafeMath.mul(SafeMath.div(frozenTokens, 1000), interestDays);\n\n        refreeze(startDate, interestAmount);\n        totalFrozen = SafeMath.add(totalFrozen, interestAmount);\n    }\n\n    function releaseFrozen(uint256 _startDate) public {\n        bytes32 freezeId = _toFreezeKey(_msgSender(), _startDate);\n        Freezing memory userFreezing = freezings[freezeId];\n\n        uint256 frozenTokens = userFreezing.freezeAmount;\n\n        release(_startDate);\n\n        if (!_isLockedAddress()) {\n            uint256 interestDays = SafeMath.div(SafeMath.sub(block.timestamp, userFreezing.startDate), SECONDS_IN_DAY);\n            uint256 interestAmount = SafeMath.mul(SafeMath.div(frozenTokens, 1000), interestDays);\n            _mint(_msgSender(), interestAmount);\n\n            totalFrozen = SafeMath.sub(totalFrozen, frozenTokens);\n            totalCirculating = SafeMath.add(totalCirculating, frozenTokens);\n            totalPayedInterest = SafeMath.add(totalPayedInterest, interestAmount);\n        }\n    }\n\n    function mint(address _to, uint256 _amount) internal {\n        _preprocessMint(_to, _amount);\n    }\n\n    function mintAndFreezeTo(address _to, uint _amount, uint256 _lockDays) internal {\n        _preprocessMintWithFreeze(_to, _amount, _lockDays);\n    }\n\n    function _premintLiquidSupply(address _liqSupAddress, uint256 _liqSupAmount) internal {\n        require(_liqSupAddress != address(0x0), \"liquid supply address cannot be zero\");\n        require(_liqSupAmount != 0, \"liquid supply amount cannot be zero\");\n        liquidSupplyAddress = _liqSupAddress;\n        liquidSupply = _liqSupAmount;\n        _mint(_liqSupAddress, _liqSupAmount);\n    }\n\n    function premintLocked(address[6] memory _lockSupAddresses,  uint256[10] memory _unlockDates) public {\n        require(hasRole(DEPLOYER_ROLE, _msgSender()), \"Must have deployer role\");\n        require(!lockedSupplyPreminted, \"cannot premint locked twice\");\n        _premintLockedSupply(_lockSupAddresses, _unlockDates);\n    }\n\n    function _premintLockedSupply(address[6] memory _lockSupAddresses, uint256[10] memory _unlockDates) internal {\n\n        lockedSupplyAddresses.firstAddress = _lockSupAddresses[0];\n        lockedSupplyAddresses.secondAddress = _lockSupAddresses[1];\n        lockedSupplyAddresses.thirdAddress = _lockSupAddresses[2];\n        lockedSupplyAddresses.fourthAddress = _lockSupAddresses[3];\n        lockedSupplyAddresses.fifthAddress = _lockSupAddresses[4];\n        lockedSupplyAddresses.sixthAddress = _lockSupAddresses[4];\n\n        for (uint256 i = 0; i < 10; i++) {\n            uint256 startDate = SafeMath.add(block.timestamp, SafeMath.add(i, 5));\n\n            uint256 endFreezeDate = _unlockDates[i];\n            uint256 lockSeconds = SafeMath.sub(endFreezeDate, startDate);\n            uint256 lockDays = SafeMath.div(lockSeconds, SECONDS_IN_DAY);\n\n\n            uint256 firstSecondAmount = SafeMath.mul(180000, 10 ** uint256(decimals()));\n            uint256 thirdAmount = SafeMath.mul(120000, 10 ** uint256(decimals()));\n            uint256 fourthAmount = SafeMath.mul(90000, 10 ** uint256(decimals()));\n            uint256 fifthSixthAmount = SafeMath.mul(15000, 10 ** uint256(decimals()));\n\n            mintAndFreeze(lockedSupplyAddresses.firstAddress, startDate, lockDays, firstSecondAmount);\n            mintAndFreeze(lockedSupplyAddresses.secondAddress, startDate, lockDays, firstSecondAmount);\n            mintAndFreeze(lockedSupplyAddresses.thirdAddress, startDate, lockDays, thirdAmount);\n            mintAndFreeze(lockedSupplyAddresses.fourthAddress, startDate, lockDays, fourthAmount);\n            mintAndFreeze(lockedSupplyAddresses.fifthAddress, startDate, lockDays, fifthSixthAmount);\n            mintAndFreeze(lockedSupplyAddresses.sixthAddress, startDate, lockDays, fifthSixthAmount);\n        }\n\n        lockedSupplyPreminted = true;\n    }\n\n\n    function _preprocessMint(address _account, uint256 _hexAmount) internal {\n        uint256 currentRoundHxyAmount = SafeMath.div(_hexAmount, currentHxyRoundRate);\n        if (currentRoundHxyAmount < getRemainingHxyInRound()) {\n            uint256 hxyAmount = currentRoundHxyAmount;\n            _mint(_account, hxyAmount);\n\n            totalMinted = SafeMath.add(totalMinted, hxyAmount);\n            totalCirculating = SafeMath.add(totalCirculating, hxyAmount);\n        } else if (currentRoundHxyAmount == getRemainingHxyInRound()) {\n            uint256 hxyAmount = currentRoundHxyAmount;\n            _mint(_account, hxyAmount);\n\n            _incrementHxyRateRound();\n\n            totalMinted = SafeMath.add(totalMinted, hxyAmount);\n            totalCirculating = SafeMath.add(totalCirculating, hxyAmount);\n        } else {\n            uint256 hxyAmount;\n            uint256 hexPaymentAmount;\n            while (hexPaymentAmount < _hexAmount) {\n                uint256 hxyRoundTotal = SafeMath.mul(_toDecimals(hxyRoundMintAmount[currentHxyRound]), hxyMintedMultiplier);\n\n                uint256 hxyInCurrentRoundMax = SafeMath.sub(hxyRoundTotal, totalMinted);\n                uint256 hexInCurrentRoundMax = SafeMath.mul(hxyInCurrentRoundMax, currentHxyRoundRate);\n\n                uint256 hexInCurrentRound;\n                uint256 hxyInCurrentRound;\n                if (SafeMath.sub(_hexAmount, hexPaymentAmount) < hexInCurrentRoundMax) {\n                    hexInCurrentRound = SafeMath.sub(_hexAmount, hexPaymentAmount);\n                    hxyInCurrentRound = SafeMath.div(hexInCurrentRound, currentHxyRoundRate);\n                } else {\n                    hexInCurrentRound = hexInCurrentRoundMax;\n                    hxyInCurrentRound = hxyInCurrentRoundMax;\n\n                    _incrementHxyRateRound();\n                }\n\n                hxyAmount = SafeMath.add(hxyAmount, hxyInCurrentRound);\n                hexPaymentAmount = SafeMath.add(hexPaymentAmount, hexInCurrentRound);\n\n                totalMinted = SafeMath.add(totalMinted, hxyInCurrentRound);\n                totalCirculating = SafeMath.add(totalCirculating, hxyAmount);\n            }\n            _mint(_account, hxyAmount);\n        }\n    }\n\n    function _preprocessMintWithFreeze(address _account, uint256 _hexAmount, uint256 _freezeDays) internal {\n        uint256 currentRoundHxyAmount = SafeMath.div(_hexAmount, currentHxyRoundRate);\n        if (currentRoundHxyAmount < getRemainingHxyInRound()) {\n            uint256 hxyAmount = currentRoundHxyAmount;\n            totalMinted = SafeMath.add(totalMinted, hxyAmount);\n            mintAndFreeze(_account, block.timestamp, _freezeDays, hxyAmount);\n        } else if (currentRoundHxyAmount == getRemainingHxyInRound()) {\n            uint256 hxyAmount = currentRoundHxyAmount;\n            mintAndFreeze(_account, block.timestamp, _freezeDays, hxyAmount);\n\n            totalMinted = SafeMath.add(totalMinted, hxyAmount);\n\n            _incrementHxyRateRound();\n        } else {\n            uint256 hxyAmount;\n            uint256 hexPaymentAmount;\n            while (hexPaymentAmount < _hexAmount) {\n                uint256 hxyRoundTotal = SafeMath.mul(_toDecimals(hxyRoundMintAmount[currentHxyRound]), hxyMintedMultiplier);\n\n                uint256 hxyInCurrentRoundMax = SafeMath.sub(hxyRoundTotal, totalMinted);\n                uint256 hexInCurrentRoundMax = SafeMath.mul(hxyInCurrentRoundMax, currentHxyRoundRate);\n\n                uint256 hexInCurrentRound;\n                uint256 hxyInCurrentRound;\n                if (SafeMath.sub(_hexAmount, hexPaymentAmount) < hexInCurrentRoundMax) {\n                    hexInCurrentRound = SafeMath.sub(_hexAmount, hexPaymentAmount);\n                    hxyInCurrentRound = SafeMath.div(hexInCurrentRound, currentHxyRoundRate);\n                } else {\n                    hexInCurrentRound = hexInCurrentRoundMax;\n                    hxyInCurrentRound = hxyInCurrentRoundMax;\n\n                    _incrementHxyRateRound();\n                }\n\n                hxyAmount = SafeMath.add(hxyAmount, hxyInCurrentRound);\n                hexPaymentAmount = SafeMath.add(hexPaymentAmount, hexInCurrentRound);\n\n                totalMinted = SafeMath.add(totalMinted, hxyInCurrentRound);\n            }\n            mintAndFreeze(_account, block.timestamp, _freezeDays, hxyAmount);\n        }\n    }\n\n    function _mintDirectly(address _account, uint256 _hxyAmount) internal {\n        _mint(_account, _hxyAmount);\n    }\n\n    function _mintAndFreezeDirectly(address _account, uint256 _hxyAmount, uint256 _freezeDays) internal {\n        mintAndFreeze(_account, block.timestamp, _freezeDays, _hxyAmount);\n    }\n\n    function _isLockedAddress() internal view returns (bool) {\n        if (_msgSender() == lockedSupplyAddresses.firstAddress) {\n            return true;\n        } else if (_msgSender() == lockedSupplyAddresses.secondAddress) {\n            return true;\n        } else if (_msgSender() == lockedSupplyAddresses.thirdAddress) {\n            return true;\n        } else if (_msgSender() == lockedSupplyAddresses.fourthAddress) {\n            return true;\n        } else if (_msgSender() == lockedSupplyAddresses.fifthAddress) {\n            return true;\n        } else if (_msgSender() == lockedSupplyAddresses.sixthAddress) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _getTotalHxyInRound(uint256 _round) public view returns (uint256) {\n        return SafeMath.mul(_toDecimals(hxyRoundMintAmount[_round]),hxyMintedMultiplier);\n    }\n\n    function _getRemainingHxyInRound(uint256 _round) public view returns (uint256) {\n        return SafeMath.sub(SafeMath.mul(_toDecimals(hxyRoundMintAmount[_round]), hxyMintedMultiplier), totalMinted);\n    }\n\n    function _incrementHxyRateRound() internal {\n        currentHxyRound = SafeMath.add(currentHxyRound, 1);\n        currentHxyRoundRate = SafeMath.mul(hxyRoundBaseRate[currentHxyRound], baseHexToHxyRate);\n    }\n\n    function _toDecimals(uint256 amount) internal view returns (uint256) {\n        return SafeMath.mul(amount, 10 ** uint256(decimals()));\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liqSupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liqSupAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"release\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPLOYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMAL_FREEZE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"_getRemainingHxyInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"_getTotalHxyInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"actualBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"freezeHxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freezingBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentHxyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentHxyRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_freezeStartDate\",\"type\":\"uint256\"}],\"name\":\"getCurrentInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"freezingId\",\"type\":\"bytes32\"}],\"name\":\"getFreezingById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"capitalized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingHxyInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTeamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalHxyInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalHxyMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPayedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserFreezings\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"userFreezings\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"latestFreezeTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintFromDappOrReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintFromExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[6]\",\"name\":\"_lockSupAddresses\",\"type\":\"address[6]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_unlockDates\",\"type\":\"uint256[10]\"}],\"name\":\"premintLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"name\":\"refreezeHxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"releaseFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HXY","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a3949cf9bd468141e533ad17e3c6bca292a06354000000000000000000000000b9f8e9dad5d985df35036c61b6aded2ad08bd53f000000000000000000000000000000000000000000000000000277fa2df6e514","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}