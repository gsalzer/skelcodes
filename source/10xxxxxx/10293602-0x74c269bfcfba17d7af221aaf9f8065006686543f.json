{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.26;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract IERC20Token {\r\n    function name() public view returns (string memory) {this;}\r\n    function symbol() public view returns (string memory) {this;}\r\n    function decimals() public view returns (uint8) {this;}\r\n    function totalSupply() public view returns (uint256) {this;}\r\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string fromSymbol, string toSymbol, string  venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string  symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string  symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string  symbol ) external view returns ( address );\r\n}\r\n\r\n\r\ninterface IContractRegistry {\r\n    function addressOf(bytes32 _contractName) external view returns (address);\r\n}\r\n\r\ninterface IBancorNetwork {\r\n    function getReturnByPath(address[]  _path, uint256 _amount) external view returns (uint256, uint256);\r\n}\r\n\r\ninterface IBancorNetworkPathFinder {\r\n    function generatePath(address _sourceToken, address _targetToken) external view returns (address[]);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal view returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal view returns(uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal view returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal view returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BancorPrices{\r\nOrFeedInterface orfeed = OrFeedInterface(0x8316b082621cfedab95bf4a44a1d4b64a6ffc336);\r\n   address owner;\r\n      modifier onlyOwner() {\r\n            if (msg.sender != owner) {\r\n                throw;\r\n            }\r\n             _;\r\n        }\r\n\r\n      constructor() public payable {\r\n            owner = msg.sender;\r\n\r\n\r\n        }\r\n\r\n   function kill() onlyOwner{\r\n       selfdestruct(owner);\r\n   }\r\n\r\n\r\n    function getPriceFromOracle(string fromParam, string toParam, string venue, uint256 amount) public constant returns (uint256){\r\n\r\n        address tokenFirst = orfeed.getTokenAddress(fromParam);\r\n        address tokenSecond = orfeed.getTokenAddress(toParam);\r\n\r\n        uint256 answer = bancorPrice(tokenSecond, tokenFirst, amount);\r\n        return answer;\r\n\r\n    }\r\n    function bancorPrice(address token1, address token2, uint256 amount) constant returns (uint256){\r\n        // updated with the newest address of the BancorNetwork contract deployed under the circumstances of old versions of `getReturnByPath`\r\n        IContractRegistry contractRegistry = IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\r\n\r\n        //\r\n  // IBancorNetwork bancorNetwork = IBancorNetwork(contractRegistry.addressOf(0x42616e636f724e6574776f726b));\r\n\r\n    //IBancorNetwork bancorNetwork = IBancorNetwork(0x3Ab6564d5c214bc416EE8421E05219960504eeAD);\r\n    IBancorNetwork bancorNetwork = IBancorNetwork(0x2F9EC37d6CcFFf1caB21733BdaDEdE11c823cCB0);\r\n\r\n   //\r\n       // IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(contractRegistry.addressOf(0x42616e636f724e6574776f726b5061746846696e646572));\r\n         IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\r\n       // address token1ToBancor = token1;\r\n        //address token2ToBancor = token2;\r\n        // in case of Ether (or Weth), we need to provide the address of the EtherToken to the BancorNetwork\r\n\r\n        if (token1 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token1 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\r\n            // the EtherToken addresss for BancorNetwork\r\n          //  token1 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\r\n          token1 = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n        }\r\n        if (token2 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token2 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\r\n          //  token2 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\r\n          token2 = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n        }\r\n\r\n        address[] memory addressPath;\r\n\r\n\r\n            addressPath = bancorNetworkPathFinder.generatePath(token2, token1);\r\n/*\r\n        IERC20Token[] memory tokenPath = new IERC20Token[](addressPath.length);\r\n\r\n        for(uint256 i = 0; i < addressPath.length; i++) {\r\n            tokenPath[i] = IERC20Token(addressPath[i]);\r\n        }\r\n       */\r\n       (uint256 price, ) = bancorNetwork.getReturnByPath(addressPath, amount);\r\n       return price;\r\n    }\r\n\r\n\r\n\r\n    function contains (string memory what, string memory where) public view returns(bool){\r\n    bytes memory whatBytes = bytes (what);\r\n    bytes memory whereBytes = bytes (where);\r\n\r\n    bool found = false;\r\n    for (uint i = 0; i < whereBytes.length - whatBytes.length; i++) {\r\n        bool flag = true;\r\n        for (uint j = 0; j < whatBytes.length; j++)\r\n            if (whereBytes [i + j] != whatBytes [j]) {\r\n                flag = false;\r\n                break;\r\n            }\r\n        if (flag) {\r\n            found = true;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return found;\r\n\r\n}\r\n\r\n\r\n   function compare(string memory _a, string memory _b) public returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n    /// @dev Compares two strings and returns true iff they are equal.\r\n    function equal(string memory _a, string memory _b) public returns (bool) {\r\n        return compare(_a, _b) == 0;\r\n    }\r\n    /// @dev Finds the index of the first occurrence of _needle in _haystack\r\n    function indexOf(string memory _haystack, string memory _needle) public returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\r\n            return -1;\r\n        else if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \"int\" type with a max length of (2^128 - 1)\r\n            return -1;\r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0]) // found the first char of b\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b\r\n                    {\r\n                        subindex++;\r\n                    }\r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"compare\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"what\",\"type\":\"string\"},{\"name\":\"where\",\"type\":\"string\"}],\"name\":\"contains\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"equal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_haystack\",\"type\":\"string\"},{\"name\":\"_needle\",\"type\":\"string\"}],\"name\":\"indexOf\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token2\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bancorPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fromParam\",\"type\":\"string\"},{\"name\":\"toParam\",\"type\":\"string\"},{\"name\":\"venue\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceFromOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"BancorPrices","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://21713a13638d7d227124144fa0f10744035306a3ab9e01fd6e4a1d01b46be081"}]}