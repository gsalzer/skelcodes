{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title EIP1154 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-1154\r\n */\r\ninterface IOracleConsumer {\r\n\tfunction receiveResult(bytes32, bytes calldata)\r\n\t\texternal;\r\n}\r\n\r\ninterface IOracle {\r\n\tfunction resultFor(bytes32)\r\n\t\texternal view returns (bytes memory);\r\n}\r\n\r\ninterface IERC2362 {\r\n  function valueFor(bytes32 _id) external view returns(int256,uint256,uint256);\r\n}\r\n\r\ninterface IOwnable {\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tfunction owner() external view returns (address);\r\n\tfunction renounceOwnership() external;\r\n\tfunction transferOwnership(address) external;\r\n}\r\n\r\nlibrary IexecLibCore_v5 {\r\n\t/**\r\n\t* Tools\r\n\t*/\r\n\tstruct Account\r\n\t{\r\n\t\tuint256 stake;\r\n\t\tuint256 locked;\r\n\t}\r\n\tstruct Category\r\n\t{\r\n\t\tstring  name;\r\n\t\tstring  description;\r\n\t\tuint256 workClockTimeRef;\r\n\t}\r\n\r\n\t/**\r\n\t * Clerk - Deals\r\n\t */\r\n\tstruct Resource\r\n\t{\r\n\t\taddress pointer;\r\n\t\taddress owner;\r\n\t\tuint256 price;\r\n\t}\r\n\tstruct Deal\r\n\t{\r\n\t\t// Ressources\r\n\t\tResource app;\r\n\t\tResource dataset;\r\n\t\tResource workerpool;\r\n\t\tuint256 trust;\r\n\t\tuint256 category;\r\n\t\tbytes32 tag;\r\n\t\t// execution details\r\n\t\taddress requester;\r\n\t\taddress beneficiary;\r\n\t\taddress callback;\r\n\t\tstring  params;\r\n\t\t// execution settings\r\n\t\tuint256 startTime;\r\n\t\tuint256 botFirst;\r\n\t\tuint256 botSize;\r\n\t\t// consistency\r\n\t\tuint256 workerStake;\r\n\t\tuint256 schedulerRewardRatio;\r\n\t}\r\n\r\n\t/**\r\n\t * Tasks\r\n\t */\r\n\tenum TaskStatusEnum\r\n\t{\r\n\t\tUNSET,     // Work order not yet initialized (invalid address)\r\n\t\tACTIVE,    // Marketed â†’ constributions are open\r\n\t\tREVEALING, // Starting consensus reveal\r\n\t\tCOMPLETED, // Consensus achieved\r\n\t\tFAILED     // Failed consensus\r\n\t}\r\n\tstruct Task\r\n\t{\r\n\t\tTaskStatusEnum status;\r\n\t\tbytes32   dealid;\r\n\t\tuint256   idx;\r\n\t\tuint256   timeref;\r\n\t\tuint256   contributionDeadline;\r\n\t\tuint256   revealDeadline;\r\n\t\tuint256   finalDeadline;\r\n\t\tbytes32   consensusValue;\r\n\t\tuint256   revealCounter;\r\n\t\tuint256   winnerCounter;\r\n\t\taddress[] contributors;\r\n\t\tbytes32   resultDigest;\r\n\t\tbytes     results;\r\n\t\tuint256   resultsTimestamp;\r\n\t\tbytes     resultsCallback; // Expansion - result separation\r\n\t}\r\n\r\n\t/**\r\n\t * Consensus\r\n\t */\r\n\tstruct Consensus\r\n\t{\r\n\t\tmapping(bytes32 => uint256) group;\r\n\t\tuint256                     total;\r\n\t}\r\n\r\n\t/**\r\n\t * Consensus\r\n\t */\r\n\tenum ContributionStatusEnum\r\n\t{\r\n\t\tUNSET,\r\n\t\tCONTRIBUTED,\r\n\t\tPROVED,\r\n\t\tREJECTED\r\n\t}\r\n\tstruct Contribution\r\n\t{\r\n\t\tContributionStatusEnum status;\r\n\t\tbytes32 resultHash;\r\n\t\tbytes32 resultSeal;\r\n\t\taddress enclaveChallenge;\r\n\t\tuint256 weight;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\nabstract contract IRegistry is IERC721Enumerable\r\n{\r\n\tfunction isRegistered(address _entry) external virtual view returns (bool);\r\n}\r\n\r\ninterface IexecAccessors is IOracle\r\n{\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n\tfunction frozenOf(address) external view returns (uint256);\r\n\tfunction allowance(address,address) external view returns (uint256);\r\n\tfunction viewAccount(address) external view returns (IexecLibCore_v5.Account memory);\r\n\tfunction token() external view returns (address);\r\n\tfunction viewDeal(bytes32) external view returns (IexecLibCore_v5.Deal memory);\r\n\tfunction viewConsumed(bytes32) external view returns (uint256);\r\n\tfunction viewPresigned(bytes32) external view returns (address);\r\n\tfunction viewTask(bytes32) external view returns (IexecLibCore_v5.Task memory);\r\n\tfunction viewContribution(bytes32,address) external view returns (IexecLibCore_v5.Contribution memory);\r\n\tfunction viewScore(address) external view returns (uint256);\r\n\t// function resultFor(bytes32) external view returns (bytes memory); // Already part of IOracle\r\n\tfunction viewCategory(uint256) external view returns (IexecLibCore_v5.Category memory);\r\n\tfunction countCategory() external view returns (uint256);\r\n\r\n\tfunction appregistry() external view returns (IRegistry);\r\n\tfunction datasetregistry() external view returns (IRegistry);\r\n\tfunction workerpoolregistry() external view returns (IRegistry);\r\n\tfunction teebroker() external view returns (address);\r\n\tfunction callbackgas() external view returns (uint256);\r\n\r\n\tfunction contribution_deadline_ratio() external view returns (uint256);\r\n\tfunction reveal_deadline_ratio() external view returns (uint256);\r\n\tfunction final_deadline_ratio() external view returns (uint256);\r\n\tfunction workerpool_stake_ratio() external view returns (uint256);\r\n\tfunction kitty_ratio() external view returns (uint256);\r\n\tfunction kitty_min() external view returns (uint256);\r\n\tfunction kitty_address() external view returns (address);\r\n\tfunction groupmember_purpose() external view returns (uint256);\r\n\tfunction eip712domain_separator() external view returns (bytes32);\r\n}\r\n\r\ninterface IexecCategoryManager {\r\n\tevent CreateCategory(uint256 catid, string  name, string  description, uint256 workClockTimeRef);\r\n\r\n\tfunction createCategory(string calldata,string calldata,uint256) external returns (uint256);\r\n}\r\n\r\ninterface IexecERC20 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tfunction transfer(address,uint256) external returns (bool);\r\n\tfunction approve(address,uint256) external returns (bool);\r\n\tfunction transferFrom(address,address,uint256) external returns (bool);\r\n\tfunction increaseAllowance(address,uint256) external returns (bool);\r\n\tfunction decreaseAllowance(address,uint256) external returns (bool);\r\n\tfunction approveAndCall(address,uint256,bytes calldata) external returns (bool);\r\n}\r\n\r\ninterface IexecEscrowToken {\r\n\treceive() external payable;\r\n\tfunction deposit(uint256) external returns (bool);\r\n\tfunction depositFor(uint256,address) external returns (bool);\r\n\tfunction depositForArray(uint256[] calldata,address[] calldata) external returns (bool);\r\n\tfunction withdraw(uint256) external returns (bool);\r\n\tfunction recover() external returns (uint256);\r\n}\r\n\r\nlibrary IexecLibOrders_v5 {\r\n\t// bytes32 public constant             EIP712DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\r\n\t// bytes32 public constant                 APPORDER_TYPEHASH = keccak256('AppOrder(address app,uint256 appprice,uint256 volume,bytes32 tag,address datasetrestrict,address workerpoolrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant             DATASETORDER_TYPEHASH = keccak256('DatasetOrder(address dataset,uint256 datasetprice,uint256 volume,bytes32 tag,address apprestrict,address workerpoolrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant          WORKERPOOLORDER_TYPEHASH = keccak256('WorkerpoolOrder(address workerpool,uint256 workerpoolprice,uint256 volume,bytes32 tag,uint256 category,uint256 trust,address apprestrict,address datasetrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant             REQUESTORDER_TYPEHASH = keccak256('RequestOrder(address app,uint256 appmaxprice,address dataset,uint256 datasetmaxprice,address workerpool,uint256 workerpoolmaxprice,address requester,uint256 volume,bytes32 tag,uint256 category,uint256 trust,address beneficiary,address callback,string params,bytes32 salt)');\r\n\t// bytes32 public constant        APPORDEROPERATION_TYPEHASH = keccak256('AppOrderOperation(AppOrder order,uint256 operation)AppOrder(address app,uint256 appprice,uint256 volume,bytes32 tag,address datasetrestrict,address workerpoolrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant    DATASETORDEROPERATION_TYPEHASH = keccak256('DatasetOrderOperation(DatasetOrder order,uint256 operation)DatasetOrder(address dataset,uint256 datasetprice,uint256 volume,bytes32 tag,address apprestrict,address workerpoolrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant WORKERPOOLORDEROPERATION_TYPEHASH = keccak256('WorkerpoolOrderOperation(WorkerpoolOrder order,uint256 operation)WorkerpoolOrder(address workerpool,uint256 workerpoolprice,uint256 volume,bytes32 tag,uint256 category,uint256 trust,address apprestrict,address datasetrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant    REQUESTORDEROPERATION_TYPEHASH = keccak256('RequestOrderOperation(RequestOrder order,uint256 operation)RequestOrder(address app,uint256 appmaxprice,address dataset,uint256 datasetmaxprice,address workerpool,uint256 workerpoolmaxprice,address requester,uint256 volume,bytes32 tag,uint256 category,uint256 trust,address beneficiary,address callback,string params,bytes32 salt)');\r\n\tbytes32 public constant             EIP712DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\r\n\tbytes32 public constant                 APPORDER_TYPEHASH = 0x60815a0eeec47dddf1615fe53b31d016c31444e01b9d796db365443a6445d008;\r\n\tbytes32 public constant             DATASETORDER_TYPEHASH = 0x6cfc932a5a3d22c4359295b9f433edff52b60703fa47690a04a83e40933dd47c;\r\n\tbytes32 public constant          WORKERPOOLORDER_TYPEHASH = 0xaa3429fb281b34691803133d3d978a75bb77c617ed6bc9aa162b9b30920022bb;\r\n\tbytes32 public constant             REQUESTORDER_TYPEHASH = 0xf24e853034a3a450aba845a82914fbb564ad85accca6cf62be112a154520fae0;\r\n\tbytes32 public constant        APPORDEROPERATION_TYPEHASH = 0x0638bb0702457e2b4b01be8a202579b8bf97e587fb4f2cc4d4aad01f21a06ee0;\r\n\tbytes32 public constant    DATASETORDEROPERATION_TYPEHASH = 0x075eb6f7578ff4292c241bd2484cd5c1d5e6ecc2ddd3317e1d8176b5a45865ec;\r\n\tbytes32 public constant WORKERPOOLORDEROPERATION_TYPEHASH = 0x322d980b7d7a6a1f7c39ff0c5445da6ae1d8e0393ff0dd468c8be3e2c8644388;\r\n\tbytes32 public constant    REQUESTORDEROPERATION_TYPEHASH = 0x0ded7b52c2d77595a40d242eca751df172b18e686326dbbed3f4748828af77c7;\r\n\r\n\tenum OrderOperationEnum\r\n\t{\r\n\t\tSIGN,\r\n\t\tCLOSE\r\n\t}\r\n\r\n\tstruct EIP712Domain\r\n\t{\r\n\t\tstring  name;\r\n\t\tstring  version;\r\n\t\tuint256 chainId;\r\n\t\taddress verifyingContract;\r\n\t}\r\n\r\n\tstruct AppOrder\r\n\t{\r\n\t\taddress app;\r\n\t\tuint256 appprice;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\taddress datasetrestrict;\r\n\t\taddress workerpoolrestrict;\r\n\t\taddress requesterrestrict;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\r\n\tstruct DatasetOrder\r\n\t{\r\n\t\taddress dataset;\r\n\t\tuint256 datasetprice;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\taddress apprestrict;\r\n\t\taddress workerpoolrestrict;\r\n\t\taddress requesterrestrict;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\r\n\tstruct WorkerpoolOrder\r\n\t{\r\n\t\taddress workerpool;\r\n\t\tuint256 workerpoolprice;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\tuint256 category;\r\n\t\tuint256 trust;\r\n\t\taddress apprestrict;\r\n\t\taddress datasetrestrict;\r\n\t\taddress requesterrestrict;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\r\n\tstruct RequestOrder\r\n\t{\r\n\t\taddress app;\r\n\t\tuint256 appmaxprice;\r\n\t\taddress dataset;\r\n\t\tuint256 datasetmaxprice;\r\n\t\taddress workerpool;\r\n\t\tuint256 workerpoolmaxprice;\r\n\t\taddress requester;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\tuint256 category;\r\n\t\tuint256 trust;\r\n\t\taddress beneficiary;\r\n\t\taddress callback;\r\n\t\tstring  params;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\r\n\tstruct AppOrderOperation\r\n\t{\r\n\t\tAppOrder           order;\r\n\t\tOrderOperationEnum operation;\r\n\t\tbytes              sign;\r\n\t}\r\n\r\n\tstruct DatasetOrderOperation\r\n\t{\r\n\t\tDatasetOrder       order;\r\n\t\tOrderOperationEnum operation;\r\n\t\tbytes              sign;\r\n\t}\r\n\r\n\tstruct WorkerpoolOrderOperation\r\n\t{\r\n\t\tWorkerpoolOrder    order;\r\n\t\tOrderOperationEnum operation;\r\n\t\tbytes              sign;\r\n\t}\r\n\r\n\tstruct RequestOrderOperation\r\n\t{\r\n\t\tRequestOrder       order;\r\n\t\tOrderOperationEnum operation;\r\n\t\tbytes              sign;\r\n\t}\r\n\r\n\tfunction hash(EIP712Domain memory _domain)\r\n\tpublic pure returns (bytes32 domainhash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tEIP712DOMAIN_TYPEHASH\r\n\t\t,\tkeccak256(bytes(_domain.name))\r\n\t\t,\tkeccak256(bytes(_domain.version))\r\n\t\t,\t_domain.chainId\r\n\t\t,\t_domain.verifyingContract\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(AppOrder memory _apporder)\r\n\tpublic pure returns (bytes32 apphash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tAPPORDER_TYPEHASH\r\n\t\t,\t_apporder.app\r\n\t\t,\t_apporder.appprice\r\n\t\t,\t_apporder.volume\r\n\t\t,\t_apporder.tag\r\n\t\t,\t_apporder.datasetrestrict\r\n\t\t,\t_apporder.workerpoolrestrict\r\n\t\t,\t_apporder.requesterrestrict\r\n\t\t,\t_apporder.salt\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(DatasetOrder memory _datasetorder)\r\n\tpublic pure returns (bytes32 datasethash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tDATASETORDER_TYPEHASH\r\n\t\t,\t_datasetorder.dataset\r\n\t\t,\t_datasetorder.datasetprice\r\n\t\t,\t_datasetorder.volume\r\n\t\t,\t_datasetorder.tag\r\n\t\t,\t_datasetorder.apprestrict\r\n\t\t,\t_datasetorder.workerpoolrestrict\r\n\t\t,\t_datasetorder.requesterrestrict\r\n\t\t,\t_datasetorder.salt\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(WorkerpoolOrder memory _workerpoolorder)\r\n\tpublic pure returns (bytes32 workerpoolhash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tWORKERPOOLORDER_TYPEHASH\r\n\t\t,\t_workerpoolorder.workerpool\r\n\t\t,\t_workerpoolorder.workerpoolprice\r\n\t\t,\t_workerpoolorder.volume\r\n\t\t,\t_workerpoolorder.tag\r\n\t\t,\t_workerpoolorder.category\r\n\t\t,\t_workerpoolorder.trust\r\n\t\t,\t_workerpoolorder.apprestrict\r\n\t\t,\t_workerpoolorder.datasetrestrict\r\n\t\t,\t_workerpoolorder.requesterrestrict\r\n\t\t,\t_workerpoolorder.salt\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(RequestOrder memory _requestorder)\r\n\tpublic pure returns (bytes32 requesthash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\treturn keccak256(abi.encodePacked(\r\n\t\t\tabi.encode(\r\n\t\t\t\tREQUESTORDER_TYPEHASH\r\n\t\t\t,\t_requestorder.app\r\n\t\t\t,\t_requestorder.appmaxprice\r\n\t\t\t,\t_requestorder.dataset\r\n\t\t\t,\t_requestorder.datasetmaxprice\r\n\t\t\t,\t_requestorder.workerpool\r\n\t\t\t,\t_requestorder.workerpoolmaxprice\r\n\t\t\t),\r\n\t\t\tabi.encode(\r\n\t\t\t\t_requestorder.requester\r\n\t\t\t,\t_requestorder.volume\r\n\t\t\t,\t_requestorder.tag\r\n\t\t\t,\t_requestorder.category\r\n\t\t\t,\t_requestorder.trust\r\n\t\t\t,\t_requestorder.beneficiary\r\n\t\t\t,\t_requestorder.callback\r\n\t\t\t,\tkeccak256(bytes(_requestorder.params))\r\n\t\t\t,\t_requestorder.salt\r\n\t\t\t)\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(AppOrderOperation memory _apporderoperation)\r\n\tpublic pure returns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tAPPORDEROPERATION_TYPEHASH\r\n\t\t,\thash(_apporderoperation.order)\r\n\t\t,\t_apporderoperation.operation\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(DatasetOrderOperation memory _datasetorderoperation)\r\n\tpublic pure returns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tDATASETORDEROPERATION_TYPEHASH\r\n\t\t,\thash(_datasetorderoperation.order)\r\n\t\t,\t_datasetorderoperation.operation\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(WorkerpoolOrderOperation memory _workerpoolorderoperation)\r\n\tpublic pure returns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tWORKERPOOLORDEROPERATION_TYPEHASH\r\n\t\t,\thash(_workerpoolorderoperation.order)\r\n\t\t,\t_workerpoolorderoperation.operation\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(RequestOrderOperation memory _requestorderoperation)\r\n\tpublic pure returns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tREQUESTORDEROPERATION_TYPEHASH\r\n\t\t,\thash(_requestorderoperation.order)\r\n\t\t,\t_requestorderoperation.operation\r\n\t\t));\r\n\t}\r\n}\r\n\r\ninterface IexecMaintenance {\r\n\tfunction configure(address,string calldata,string calldata,uint8,address,address,address,address) external;\r\n\tfunction domain() external view returns (IexecLibOrders_v5.EIP712Domain memory);\r\n\tfunction updateDomainSeparator() external;\r\n\tfunction importScore(address) external;\r\n\tfunction setTeeBroker(address) external;\r\n\tfunction setCallbackGas(uint256) external;\r\n}\r\n\r\ninterface IexecOrderManagement {\r\n\tevent SignedAppOrder       (bytes32 appHash);\r\n\tevent SignedDatasetOrder   (bytes32 datasetHash);\r\n\tevent SignedWorkerpoolOrder(bytes32 workerpoolHash);\r\n\tevent SignedRequestOrder   (bytes32 requestHash);\r\n\tevent ClosedAppOrder       (bytes32 appHash);\r\n\tevent ClosedDatasetOrder   (bytes32 datasetHash);\r\n\tevent ClosedWorkerpoolOrder(bytes32 workerpoolHash);\r\n\tevent ClosedRequestOrder   (bytes32 requestHash);\r\n\r\n\tfunction manageAppOrder       (IexecLibOrders_v5.AppOrderOperation        calldata) external;\r\n\tfunction manageDatasetOrder   (IexecLibOrders_v5.DatasetOrderOperation    calldata) external;\r\n\tfunction manageWorkerpoolOrder(IexecLibOrders_v5.WorkerpoolOrderOperation calldata) external;\r\n\tfunction manageRequestOrder   (IexecLibOrders_v5.RequestOrderOperation    calldata) external;\r\n}\r\n\r\ninterface IexecPoco {\r\n\tevent Reward  (address owner, uint256 amount, bytes32 ref);\r\n\tevent Seize   (address owner, uint256 amount, bytes32 ref);\r\n\tevent Lock    (address owner, uint256 amount);\r\n\tevent Unlock  (address owner, uint256 amount);\r\n\r\n\tevent OrdersMatched  (bytes32 dealid, bytes32 appHash, bytes32 datasetHash, bytes32 workerpoolHash, bytes32 requestHash, uint256 volume);\r\n\tevent SchedulerNotice(address indexed workerpool, bytes32 dealid);\r\n\r\n\tevent TaskInitialize(bytes32 indexed taskid, address indexed workerpool);\r\n\tevent TaskContribute(bytes32 indexed taskid, address indexed worker, bytes32 hash);\r\n\tevent TaskConsensus (bytes32 indexed taskid, bytes32 consensus);\r\n\tevent TaskReveal    (bytes32 indexed taskid, address indexed worker, bytes32 digest);\r\n\tevent TaskReopen    (bytes32 indexed taskid);\r\n\tevent TaskFinalize  (bytes32 indexed taskid, bytes results);\r\n\tevent TaskClaimed   (bytes32 indexed taskid);\r\n\r\n\tevent AccurateContribution(address indexed worker, bytes32 indexed taskid);\r\n\tevent FaultyContribution  (address indexed worker, bytes32 indexed taskid);\r\n\r\n\tfunction verifySignature(address,bytes32,bytes calldata) external view returns (bool);\r\n\tfunction verifyPresignature(address,bytes32) external view returns (bool);\r\n\tfunction verifyPresignatureOrSignature(address,bytes32,bytes calldata) external view returns (bool);\r\n\tfunction matchOrders(IexecLibOrders_v5.AppOrder calldata,IexecLibOrders_v5.DatasetOrder calldata,IexecLibOrders_v5.WorkerpoolOrder calldata,IexecLibOrders_v5.RequestOrder calldata) external returns (bytes32);\r\n\tfunction initialize(bytes32,uint256) external returns (bytes32);\r\n\tfunction contribute(bytes32,bytes32,bytes32,address,bytes calldata,bytes calldata) external;\r\n\tfunction reveal(bytes32,bytes32) external;\r\n\tfunction reopen(bytes32) external;\r\n\tfunction finalize(bytes32,bytes calldata,bytes calldata) external; // Expansion - result separation\r\n\tfunction claim(bytes32) external;\r\n\tfunction contributeAndFinalize(bytes32,bytes32,bytes calldata,bytes calldata,address,bytes calldata,bytes calldata) external; // Expansion - result separation\r\n\tfunction initializeArray(bytes32[] calldata,uint256[] calldata) external returns (bool);\r\n\tfunction claimArray(bytes32[] calldata) external returns (bool);\r\n\tfunction initializeAndClaimArray(bytes32[] calldata,uint256[] calldata) external returns (bool);\r\n}\r\n\r\ninterface IexecRelay {\r\n\tevent BroadcastAppOrder       (IexecLibOrders_v5.AppOrder        apporder       );\r\n\tevent BroadcastDatasetOrder   (IexecLibOrders_v5.DatasetOrder    datasetorder   );\r\n\tevent BroadcastWorkerpoolOrder(IexecLibOrders_v5.WorkerpoolOrder workerpoolorder);\r\n\tevent BroadcastRequestOrder   (IexecLibOrders_v5.RequestOrder    requestorder   );\r\n\r\n\tfunction broadcastAppOrder       (IexecLibOrders_v5.AppOrder        calldata) external;\r\n\tfunction broadcastDatasetOrder   (IexecLibOrders_v5.DatasetOrder    calldata) external;\r\n\tfunction broadcastWorkerpoolOrder(IexecLibOrders_v5.WorkerpoolOrder calldata) external;\r\n\tfunction broadcastRequestOrder   (IexecLibOrders_v5.RequestOrder    calldata) external;\r\n}\r\n\r\ninterface IexecTokenSpender {\r\n\tfunction receiveApproval(address,uint256,address,bytes calldata) external returns (bool);\r\n}\r\n\r\ninterface ENSIntegration {\r\n\tfunction setName(address ens, string calldata name) external;\r\n}\r\n\r\ninterface IexecInterfaceToken is IOwnable, IexecAccessors, IexecCategoryManager, IexecERC20, IexecEscrowToken, IexecMaintenance, IexecOrderManagement, IexecPoco, IexecRelay, IexecTokenSpender, ENSIntegration\r\n{\r\n}\r\n\r\ncontract WithIexecToken {\r\n\taddress constant IEXECPROXY = 0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f;\r\n\r\n\tIexecInterfaceToken public iexecproxy;\r\n\r\n\tconstructor(address _iexecproxy)\r\n\tpublic\r\n\t{\r\n\t\tif      (_isContract(_iexecproxy)) { iexecproxy = IexecInterfaceToken(payable(_iexecproxy)); }\r\n\t\telse if (_isContract(IEXECPROXY )) { iexecproxy = IexecInterfaceToken(payable(IEXECPROXY )); }\r\n\t\telse                               { revert(\"invalid-iexecproxy-address\");                   }\r\n\t}\r\n\r\n\tfunction _isContract(address _addr)\r\n\tinternal view returns (bool)\r\n\t{\r\n\t\tuint32 size;\r\n\t\tassembly { size := extcodesize(_addr) }\r\n\t\treturn size > 0;\r\n\t}\r\n}\r\n\r\nabstract contract IERC734 {\r\n\t// 1: MANAGEMENT keys, which can manage the identity\r\n\tuint256 public constant MANAGEMENT_KEY = 1;\r\n\t// 2: ACTION keys, which perform actions in this identities name (signing, logins, transactions, etc.)\r\n\tuint256 public constant ACTION_KEY = 2;\r\n\t// 3: CLAIM signer keys, used to sign claims on other identities which need to be revokable.\r\n\tuint256 public constant CLAIM_SIGNER_KEY = 3;\r\n\t// 4: ENCRYPTION keys, used to encrypt data e.g. hold in claims.\r\n\tuint256 public constant ENCRYPTION_KEY = 4;\r\n\r\n\t// KeyType\r\n\tuint256 public constant ECDSA_TYPE = 1;\r\n\t// https://medium.com/@alexberegszaszi/lets-bring-the-70s-to-ethereum-48daa16a4b51\r\n\tuint256 public constant RSA_TYPE = 2;\r\n\r\n\t// Events\r\n\tevent KeyAdded          (bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n\tevent KeyRemoved        (bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n\tevent ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\tevent Executed          (uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\tevent ExecutionFailed   (uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\tevent Approved          (uint256 indexed executionId, bool approved);\r\n\r\n\t// Functions\r\n\tfunction getKey          (bytes32 _key                                     ) external virtual view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\r\n\tfunction keyHasPurpose   (bytes32 _key, uint256 purpose                    ) external virtual view returns (bool exists);\r\n\tfunction getKeysByPurpose(uint256 _purpose                                 ) external virtual view returns (bytes32[] memory keys);\r\n\tfunction addKey          (bytes32 _key, uint256 _purpose, uint256 _keyType ) external virtual      returns (bool success);\r\n\tfunction removeKey       (bytes32 _key, uint256 _purpose                   ) external virtual      returns (bool success);\r\n\tfunction execute         (address _to, uint256 _value, bytes calldata _data) external virtual      returns (uint256 executionId);\r\n\tfunction approve         (uint256 _id, bool _approve                       ) external virtual      returns (bool success);\r\n}\r\n\r\ncontract IexecDoracle is WithIexecToken\r\n{\r\n\taddress public m_authorizedApp;\r\n\taddress public m_authorizedDataset;\r\n\taddress public m_authorizedWorkerpool;\r\n\tbytes32 public m_requiredtag;\r\n\tuint256 public m_requiredtrust;\r\n\r\n\tconstructor(address _iexecproxy)\r\n\tpublic WithIexecToken(_iexecproxy)\r\n\t{}\r\n\r\n\tfunction _iexecDoracleUpdateSettings(\r\n\t\taddress _authorizedApp,\r\n\t\taddress _authorizedDataset,\r\n\t\taddress _authorizedWorkerpool,\r\n\t\tbytes32 _requiredtag,\r\n\t\tuint256 _requiredtrust)\r\n\tinternal\r\n\t{\r\n\t\tm_authorizedApp        = _authorizedApp;\r\n\t\tm_authorizedDataset    = _authorizedDataset;\r\n\t\tm_authorizedWorkerpool = _authorizedWorkerpool;\r\n\t\tm_requiredtag          = _requiredtag;\r\n\t\tm_requiredtrust        = _requiredtrust;\r\n\t}\r\n\r\n\tfunction _iexecDoracleGetResults(bytes32 _doracleCallId)\r\n\tinternal view returns (bool, bytes memory)\r\n\t{\r\n\t\tIexecLibCore_v5.Task memory task = iexecproxy.viewTask(_doracleCallId);\r\n\t\tIexecLibCore_v5.Deal memory deal = iexecproxy.viewDeal(task.dealid);\r\n\r\n\t\tif (task.status   != IexecLibCore_v5.TaskStatusEnum.COMPLETED                                                  ) { return (false, bytes(\"result-not-available\"             ));  }\r\n\t\tif (deal.callback != address(this)                                                                             ) { return (false, bytes(\"result-not-validated-for-callback\"));  }\r\n\t\tif (m_authorizedApp        != address(0) && !_checkIdentity(m_authorizedApp,        deal.app.pointer,        4)) { return (false, bytes(\"unauthorized-app\"                 ));  }\r\n\t\tif (m_authorizedDataset    != address(0) && !_checkIdentity(m_authorizedDataset,    deal.dataset.pointer,    4)) { return (false, bytes(\"unauthorized-dataset\"             ));  }\r\n\t\tif (m_authorizedWorkerpool != address(0) && !_checkIdentity(m_authorizedWorkerpool, deal.workerpool.pointer, 4)) { return (false, bytes(\"unauthorized-workerpool\"          ));  }\r\n\t\tif (m_requiredtag & ~deal.tag != bytes32(0)                                                                    ) { return (false, bytes(\"invalid-tag\"                      ));  }\r\n\t\tif (m_requiredtrust > deal.trust                                                                               ) { return (false, bytes(\"invalid-trust\"                    ));  }\r\n\t\treturn (true, task.resultsCallback);\r\n\t}\r\n\r\n\tfunction _iexecDoracleGetVerifiedResult(bytes32 _doracleCallId)\r\n\tinternal view returns (bytes memory)\r\n\t{\r\n\t\t(bool success, bytes memory results) = _iexecDoracleGetResults(_doracleCallId);\r\n\t\trequire(success, string(results));\r\n\t\treturn results;\r\n\t}\r\n\r\n\tfunction _checkIdentity(address _identity, address _candidate, uint256 _purpose)\r\n\tinternal view returns (bool valid)\r\n\t{\r\n\t\treturn _identity == _candidate || IERC734(_identity).keyHasPurpose(bytes32(uint256(_candidate)), _purpose); // Simple address || ERC 734 identity contract\r\n\t}\r\n}\r\n\r\n\r\ncontract PriceOracle is IexecDoracle, Ownable, IOracleConsumer, IERC2362\r\n{\r\n\t// Data storage\r\n\tstruct TimedValue\r\n\t{\r\n\t\tbytes32 oracleCallID;\r\n\t\tuint256 date;\r\n\t\tint256  value;\r\n\t\tstring  details;\r\n\t}\r\n\r\n\tmapping(bytes32 => TimedValue) public values;\r\n\r\n\t// Event\r\n\tevent ValueUpdated(bytes32 indexed id, bytes32 indexed oracleCallID, uint256 date, int256 value);\r\n\r\n\tconstructor()\r\n\tpublic IexecDoracle(address(0))\r\n\t{}\r\n\r\n\tfunction updateEnv(\r\n\t  address _authorizedApp\r\n\t, address _authorizedDataset\r\n\t, address _authorizedWorkerpool\r\n\t, bytes32 _requiredtag\r\n\t, uint256 _requiredtrust\r\n\t)\r\n\tpublic onlyOwner\r\n\t{\r\n\t\t_iexecDoracleUpdateSettings(_authorizedApp, _authorizedDataset, _authorizedWorkerpool, _requiredtag, _requiredtrust);\r\n\t}\r\n\r\n\t// ERC1154 - Callback processing\r\n\tfunction receiveResult(bytes32 _callID, bytes calldata)\r\n\texternal override\r\n\t{\r\n\t\t// Parse results\r\n\t\t(uint256 date, string memory details, int256 value) = abi.decode(_iexecDoracleGetVerifiedResult(_callID), (uint256, string, int256));\r\n\r\n\t\t// Process results\r\n\t\tbytes32 id = keccak256(bytes(details));\r\n\t\trequire(values[id].date < date, \"new-value-is-too-old\");\r\n\t\tvalues[id].oracleCallID = _callID;\r\n\t\tvalues[id].date         = date;\r\n\t\tvalues[id].value        = value;\r\n\t\tvalues[id].details      = details;\r\n\r\n\t\temit ValueUpdated(id, _callID, date, value);\r\n\t}\r\n\r\n\t// ERC2362 - ADO result viewer\r\n\tfunction valueFor(bytes32 _id)\r\n\texternal override view returns (int256, uint256, uint256)\r\n\t{\r\n\t\tif (values[_id].oracleCallID == bytes32(0))\r\n\t\t{\r\n\t\t\treturn (0, 0, 404);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn (values[_id].value, values[_id].date, 200);\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"oracleCallID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"ValueUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"iexecproxy\",\"outputs\":[{\"internalType\":\"contract IexecInterfaceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_authorizedApp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_authorizedDataset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_authorizedWorkerpool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_requiredtag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_requiredtrust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_callID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"receiveResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizedApp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authorizedDataset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authorizedWorkerpool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_requiredtag\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_requiredtrust\",\"type\":\"uint256\"}],\"name\":\"updateEnv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"valueFor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"values\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"oracleCallID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PriceOracle","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://669f28744901fc19dd0fbcfedb4fc33c75200ecec24d911958ec60f6712cd92a"}]}