{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts\\SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: contracts\\Crowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conforms\r\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale is Context, ReentrancyGuard {\r\n    // Humanity test\r\n    modifier onlyHuman {\r\n        if (_isHuman()) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // The token being sold\r\n    IERC20 private _token;\r\n\r\n    // Addresses where funds are collected\r\n    address payable private _platformWallet;\r\n    address payable private _priceTokenBackingWallet;\r\n    address payable private _investBoxWallet;\r\n    address payable private _otherWallet;\r\n\r\n    // How many token units a buyer gets per wei.\r\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\r\n    // 1 wei will give you 1 unit, or 0.001 TOK.\r\n    uint256 private _rate;\r\n\r\n    // Amount of wei raised\r\n    uint256 private _weiRaised;\r\n\r\n    /**\r\n     * Event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev standard crowdale Constructor\r\n     * @param platformWallet The address where the funds raised for the development of the platform will be directed\r\n     * @param priceTokenBackingWallet The address where the funds raised to support the token price on the exchange will be sent\r\n     * @param investBoxWallet Address where the funds raised for investBox will be directed\r\n     * @param otherWallet Address where the rest of the collected funds will be sent\r\n     * @param token Address of the token being sold\r\n     */\r\n    constructor (\r\n        address payable platformWallet,\r\n        address payable priceTokenBackingWallet,\r\n        address payable investBoxWallet,\r\n        address payable otherWallet,\r\n        IERC20 token\r\n    )\r\n    public\r\n    {\r\n        require(platformWallet != address(0), \"Crowdsale: platformWallet is the zero address\");\r\n        require(priceTokenBackingWallet != address(0), \"Crowdsale: priceTokenBackingWallet is the zero address\");\r\n        require(investBoxWallet != address(0), \"Crowdsale: investBoxWallet is the zero address\");\r\n        require(otherWallet != address(0), \"Crowdsale: otherWallet is the zero address\");\r\n        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\r\n\r\n        _platformWallet = platformWallet;\r\n        _priceTokenBackingWallet = priceTokenBackingWallet;\r\n        _investBoxWallet = investBoxWallet;\r\n        _otherWallet = otherWallet;\r\n        _token = token;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     * Note that other contracts will transfer funds with a base gas stipend\r\n     * of 2300, which is not enough to call buyTokens. Consider calling\r\n     * buyTokens directly when purchasing tokens from a contract.\r\n     */\r\n    function () external onlyHuman payable {\r\n        buyTokens(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Checking if the calling function is a contract\r\n     */\r\n    function _isContract() view internal returns(bool) {\r\n        return msg.sender != tx.origin;\r\n    }\r\n\r\n    /**\r\n     * @dev Humanity test\r\n     */\r\n    function _isHuman() view internal returns(bool) {\r\n        return !_isContract();\r\n    }\r\n\r\n    /**\r\n     * @return the token being sold.\r\n     */\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the address where the funds raised for the development of the platform are collected.\r\n     */\r\n    function platformWallet() public view returns (address payable) {\r\n        return _platformWallet;\r\n    }\r\n\r\n    /**\r\n     * @return the number of token units a buyer gets per wei.\r\n     */\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    /**\r\n     * @dev internal function for setting the amount of tokens that the buyer receives for the vey.\r\n     * Used to change the price during the transition from stage to stage\r\n     */\r\n    function setRate(uint256 stageRate) internal {\r\n        _rate = stageRate;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of wei raised.\r\n     */\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    /**\r\n     * @dev low level token purchase ***DO NOT OVERRIDE***\r\n     * This function has a non-reentrancy guard, so it shouldn't be called by\r\n     * another `nonReentrant` function.\r\n     * @param beneficiary Recipient of the token purchase\r\n     */\r\n    function buyTokens(address beneficiary) public nonReentrant onlyHuman payable {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(beneficiary, tokens);\r\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\r\n\r\n        _updatePurchasingState(beneficiary, weiAmount);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\r\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n     *     super._preValidatePurchase(beneficiary, weiAmount);\r\n     *     require(weiRaised().add(weiAmount) <= cap);\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\r\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\r\n\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    }\r\n\r\n    /**\r\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\r\n     * conditions are not met.\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\r\n     * its tokens.\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param tokenAmount Number of tokens to be emitted\r\n     */\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        _token.safeTransfer(beneficiary, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\r\n     * tokens.\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param tokenAmount Number of tokens to be purchased\r\n     */\r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _deliverTokens(beneficiary, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\r\n     * etc.)\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @dev Override to extend the way in which ether is converted to tokens.\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return weiAmount.mul(_rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines how ETH is stored/forwarded on purchases.\r\n     */\r\n    function _forwardFunds() internal {\r\n        uint256 sum = msg.value;\r\n        uint256 platformSum = sum.div(100).mul(25);\r\n        uint256 backingSum = sum.div(100).mul(7);\r\n        uint256 investBoxSum = sum.div(100).mul(10);\r\n        uint256 buyoutSum = sum.div(100).mul(20);\r\n        uint256 otherSum = sum.sub(platformSum).sub(backingSum).sub(investBoxSum).sub(buyoutSum);\r\n\r\n        _platformWallet.transfer(platformSum);\r\n        _priceTokenBackingWallet.transfer(backingSum);\r\n        _investBoxWallet.transfer(investBoxSum);\r\n        _otherWallet.transfer(otherSum);\r\n    }\r\n}\r\n\r\n// File: contracts\\StatCrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale statistics\r\n * @dev To collect crowdsale statistics\r\n */\r\ncontract StatCrowdsale is Crowdsale {\r\n    struct partDist {   // A structural unit indicating whether the address to which this unit belongs is involved in the distribution of unsold tokens at each stage\r\n        uint256 sumWei;     // the amount of wei spent by the address in the stage\r\n        uint256 sumHpa;     // the amount of tokens acquired by the address at the stage\r\n        bool part;          // true if the address is involved in the distribution of unsold tokens\r\n    }\r\n\r\n    struct stageStat {          // Stage statistics unit\r\n        uint256 tokensSold;         // The number of tokens sold at the stage\r\n        uint256 numPurchases;       // Number of purchases per stage\r\n        uint256 tokensUnsold;       // The number of unsold tokens at the stage\r\n        uint256 numBuyersDist;      // The number of participants in the distribution of unsold tokens at the stage\r\n        mapping (address => partDist) partsDist;    // indicates whether the address is involved in the distribution of unsold tokens at each stage\r\n        uint256 start;              // Stage Start Time (in timestamp)\r\n        uint256 end;                // Stage End Time (in timestamp)\r\n    }\r\n\r\n    struct buyerStat {              //Buyer Statistics unit\r\n        buyerReferral[] referrals;      // Array of referral addresses for this customer\r\n        uint256 numReferrals;           // Number of customer referrals\r\n        mapping (uint256 => bool) stagesPartDist;   // Stages in which a given buyer is involved in the distribution of unsold tokens\r\n        purchase[] purchases;           // Purchase statistics\r\n        uint256 numPurchases;           // Number of purchases\r\n    }\r\n\r\n    struct buyerReferral {      // The structural unit of statistics on referrals for the buyer\r\n        address referral;           // Referral Address\r\n        uint256 referralSum;        // The amount of tokens brought by a referral\r\n        uint256 referralEth;        // The amount of ether (in wei) that the referral brought\r\n    }\r\n\r\n    struct purchase {       // Purchase Statistics Unit\r\n        uint256 stage;          // Stage at which the purchase was made\r\n        uint256 price;          // The price for the token at which the purchase was made\r\n        uint256 sumEth;         // Amount of spent ether (in wei)\r\n        uint256 sumHpa;         // Amount of purchased tokens\r\n        uint256 time;           // Purchase time\r\n    }\r\n\r\n    // Stage Statistics\r\n    stageStat[15] internal _stagesStats;\r\n    // Customer statistics\r\n    mapping (address => buyerStat) internal buyersStats;\r\n\r\n    /**\r\n     * @dev When creating a contract, initial statistics for the stages are set\r\n     */\r\n    constructor () public {\r\n        setStageStat(0,0,0,0,0);\r\n        setStageStat(1,0,0,50000 ether,0);\r\n        setStageStat(2,0,0,500000 ether,0);\r\n        setStageStat(3,0,0,2500000 ether,0);\r\n        setStageStat(4,0,0,7500000 ether,0);\r\n        setStageStat(5,0,0,15000000 ether,0);\r\n        setStageStat(6,0,0,22500000 ether,0);\r\n        setStageStat(7,0,0,10000000 ether,0);\r\n        setStageStat(8,0,0,5000000 ether,0);\r\n        setStageStat(9,0,0,3000000 ether,0);\r\n        setStageStat(10,0,0,1000000 ether,0);\r\n        setStageStat(11,0,0,500004 ether,0);\r\n        setStageStat(12,0,0,200004 ether,0);\r\n        setStageStat(13,0,0,100002 ether,0);\r\n        setStageStat(14,0,0,50000 ether,0);\r\n    }\r\n\r\n    /**\r\n    * @dev sets statistics for the stage\r\n    * @param stageNumber The stage number\r\n    * @param tokensSold The number of tokens sold at the stage\r\n    * @param numPurchases Number of purchases per stage\r\n    * @param tokensUnsold The number of unsold tokens at the stage\r\n    * @param numBuyersDist The number of participants in the distribution of unsold tokens at the stage\r\n    */\r\n    function setStageStat(\r\n        uint256 stageNumber,\r\n        uint256 tokensSold,\r\n        uint256 numPurchases,\r\n        uint256 tokensUnsold,\r\n        uint256 numBuyersDist\r\n    )\r\n    internal\r\n    {\r\n        _stagesStats[stageNumber] = stageStat({\r\n            tokensSold: tokensSold,\r\n            numPurchases: numPurchases,\r\n            tokensUnsold: tokensUnsold,\r\n            numBuyersDist: numBuyersDist,\r\n            start: 0,\r\n            end: 0\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @return stage stats.\r\n     * @param s stage\r\n     */\r\n    function viewStageStat(uint256 s) public view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        stageStat memory _stat = _stagesStats[s];\r\n        return (_stat.tokensSold, _stat.numPurchases, _stat.tokensUnsold, _stat.numBuyersDist, _stat.start, _stat.end);\r\n    }\r\n\r\n    /**\r\n     * @dev sets the start time of the stage\r\n     * @param stageNumber The stage number\r\n     * @param time timestamp\r\n     */\r\n    function setStageStartTime(uint256 stageNumber, uint256 time) internal {\r\n        _stagesStats[stageNumber].start = time;\r\n    }\r\n\r\n    /**\r\n     * @dev sets stage end time\r\n     * @param stageNumber The stage number\r\n     * @param time timestamp\r\n     */\r\n    function setStageEndTime(uint256 stageNumber, uint256 time) internal {\r\n        _stagesStats[stageNumber].end = time;\r\n    }\r\n\r\n    /**\r\n     * @dev records referral statistics for the specified referrer\r\n     * @param referer who attracted\r\n     * @param referral who attracted\r\n     * @param sum earn HPA tokens\r\n     * @param sumEth earn ether\r\n     */\r\n    function addReferralStat(address referer, address referral, uint256 sum, uint256 sumEth) internal {\r\n        buyersStats[referer].referrals.push(buyerReferral({\r\n            referral: referral,\r\n            referralSum: sum,\r\n            referralEth: sumEth\r\n            }));\r\n        buyersStats[referer].numReferrals = buyersStats[referer].numReferrals.add(1);\r\n    }\r\n\r\n    /**\r\n     * @return information about the participation of the specified buyer\r\n     * in the distribution of unsold tokens at the specified stage\r\n     * @param stage for what stage information is requested\r\n     * @param buyer for which participant information is requested\r\n     */\r\n    function getBuyerStagePartDistInfo(uint256 stage, address buyer) public view returns (uint256, uint256, bool) {\r\n        return (\r\n        _stagesStats[stage].partsDist[buyer].sumWei,\r\n        _stagesStats[stage].partsDist[buyer].sumHpa,\r\n        _stagesStats[stage].partsDist[buyer].part\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return statistics on purchases of the address that called this function\r\n     */\r\n    function getMyInfo() public view returns (uint256, buyerReferral[] memory, uint256, purchase[] memory) {\r\n        address buyer = msg.sender;\r\n        return (\r\n        buyersStats[buyer].numReferrals,\r\n        buyersStats[buyer].referrals,\r\n        buyersStats[buyer].numPurchases,\r\n        buyersStats[buyer].purchases\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: contracts\\Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts\\MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts\\MintedCrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title MintedCrowdsale\r\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\r\n * Token ownership should be transferred to MintedCrowdsale for minting.\r\n */\r\ncontract MintedCrowdsale is Crowdsale {\r\n    /**\r\n     * @dev Overrides delivery by minting tokens upon purchase.\r\n     * @param beneficiary Token purchaser\r\n     * @param tokenAmount Number of tokens to be minted\r\n     */\r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        // Potentially dangerous assumption about the type of the token.\r\n        require(\r\n            ERC20Mintable(address(token())).mint(beneficiary, tokenAmount),\r\n            \"MintedCrowdsale: minting failed\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts\\ReferralCrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Referral Crowdsale\r\n * @dev Crowdsale with referral reward system for attracting participants\r\n */\r\ncontract ReferralCrowdsale is StatCrowdsale, MintedCrowdsale {\r\n    // Referrals persent\r\n    uint256 private _refPercent;\r\n\r\n    /**\r\n     * @dev Sets the initial percentage that the referrer receives from the purchase of a referral\r\n     * @param startPercent initial percentage\r\n     */\r\n    constructor (uint256 startPercent) public {\r\n        require(startPercent > 0, \"ReferralCrowdsale: percentage must be greater than zero\");\r\n\r\n        _refPercent = startPercent;\r\n    }\r\n\r\n    /**\r\n     * @return the referral percent.\r\n     */\r\n    function refPercent() public view returns (uint256) {\r\n        return _refPercent;\r\n    }\r\n\r\n    /**\r\n    * @dev setup referral percent for current stage\r\n    * @param stageRefPercent Referral percent\r\n    */\r\n    function setRefPercent(uint256 stageRefPercent) internal {\r\n        _refPercent = stageRefPercent;\r\n    }\r\n\r\n    function bytesToAddress(bytes memory source) internal pure returns(address) {\r\n        uint result;\r\n        uint mul = 1;\r\n        for(uint i = 20; i > 0; i--) {\r\n            result += uint8(source[i-1])*mul;\r\n            mul = mul*256;\r\n        }\r\n        return address(result);\r\n    }\r\n\r\n    /**\r\n     * @dev calculate and transfer tokens to refer\r\n     * @param beneficiary Address performing the token purchase\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal {\r\n\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        if(msg.data.length == 20) {\r\n            address referer = bytesToAddress(bytes(msg.data));\r\n            address payable refererPayable = address(uint160(referer));\r\n            require(referer != beneficiary, \"Referral crowdsale: The beneficiary cannot be a referer\");\r\n            require(referer != msg.sender, \"Referral crowdsale: The sender cannot be a referer\");\r\n            require(referer != address(0), \"Referral crowdsale: referer is the zero address\");\r\n            uint refererTokens = tokens.mul(_refPercent).div(100);\r\n            uint256 refSum = weiAmount.div(100).mul(10);\r\n            // transfer tokens to refer\r\n            emit TokensPurchased(_msgSender(), beneficiary, 0, refererTokens);\r\n            addReferralStat(referer, beneficiary, refererTokens, refSum);\r\n            _deliverTokens(referer, refererTokens);\r\n            refererPayable.transfer(refSum);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\StagesCrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title StagesCrowdsale\r\n * @dev Crowdsale passing through stages with limits and a time limit.\r\n */\r\ncontract StagesCrowdsale is ReferralCrowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Current stage\r\n    uint256 private _currentStage;\r\n\r\n    struct stage {                  // Structural Unit of Stage Parameters\r\n        uint256 rate;\r\n        uint256 cap;\r\n        uint256 refPercent;\r\n        uint256 unsoldDistPercent;\r\n        uint256 minEthDist;\r\n        uint256 minHpaDist;\r\n        uint256 period;\r\n    }\r\n\r\n    // Parameters of all stages\r\n    stage[15] internal _stages;\r\n\r\n    /**\r\n     * Stage close event\r\n     * @param stage closing stage\r\n     * @param time closing time\r\n     */\r\n    event CloseStage(uint256 stage, uint256 time);\r\n    /**\r\n     * Stage opening event\r\n     * @param stage open stage\r\n     * @param time opening time\r\n     */\r\n    event OpenStage(uint256 stage, uint256 time);\r\n\r\n    /**\r\n     * @dev When creating a contract, stage parameters and other parameters are set\r\n     */\r\n    constructor () public ReferralCrowdsale(5) {\r\n        setStage(0,0,0,0,0,0,0,0);\r\n        setStage(1,100000000,500 szabo,5,0,0,0,0);\r\n        setStage(2,10000000,50500 szabo,5,0,0,0,0);\r\n        setStage(3,1000000,2550500 szabo,7,0,0,0,0);\r\n        setStage(4,100000,77550500 szabo,10,0,0,0,0);\r\n        setStage(5,10000,1577550500 szabo,15,0,0,0,0);\r\n        setStage(6,1000,24077550500 szabo,20,0,0,0,0);\r\n        setStage(7,200,74077550500 szabo,25,0,0,0,10 days);\r\n        setStage(8,100,124077550500 szabo,30,3,10 ether,1000 ether,10 days);\r\n        setStage(9,50,184077550500 szabo,35,5,7 ether,350 ether,10 days);\r\n        setStage(10,25,224077550500 szabo,40,7,5 ether,125 ether,10 days);\r\n        setStage(11,12,265744550500 szabo,45,10,3 ether,36 ether,10 days);\r\n        setStage(12,6,299078550500 szabo,50,15,2 ether,12 ether,10 days);\r\n        setStage(13,3,332412550500 szabo,70,20,1 ether,3 ether,10 days);\r\n        setStage(14,2,357412550500 szabo,100,40,200 finney,400 finney,10 days);\r\n\r\n        _currentStage = 1;\r\n        setRefPercent(_stages[_currentStage].refPercent);\r\n        setRate(_stages[_currentStage].rate);\r\n        setStageStartTime(_currentStage, now);\r\n    }\r\n\r\n    /**\r\n     * @return current stage.\r\n     */\r\n    function currentStage() public view returns (uint256) {\r\n        return _currentStage;\r\n    }\r\n\r\n    /**\r\n     * @dev Setting Stage Parameters\r\n     */\r\n    function setStage(\r\n        uint256 stageNumber,\r\n        uint256 rate,\r\n        uint256 cap,\r\n        uint256 refPercent,\r\n        uint256 unsoldDistPercent,\r\n        uint256 minEthDist,\r\n        uint256 minHpaDist,\r\n        uint256 period\r\n    )\r\n    internal\r\n    {\r\n        _stages[stageNumber] = stage({\r\n            rate: rate,\r\n            cap: cap,\r\n            refPercent: refPercent,\r\n            unsoldDistPercent: unsoldDistPercent,\r\n            minEthDist: minEthDist,\r\n            minHpaDist: minHpaDist,\r\n            period: period\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @return Remaining Stage Time\r\n     */\r\n    function remStageTime() public view returns (uint256) {\r\n        if (_stages[_currentStage].period > 0) {\r\n            return _stages[_currentStage].period - (now - _stagesStats[_currentStage].start);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Closes the current stage\r\n     */\r\n    function closeCurrentStage() internal {\r\n        emit CloseStage(_currentStage, now);\r\n        setStageEndTime(_currentStage, now);\r\n    }\r\n\r\n    /**\r\n     * @dev Activates the next stage, provided that not all stages have passed and the crowdsale has not ended\r\n     */\r\n    function openNewStage() internal {\r\n        _currentStage = _currentStage.add(1);\r\n        setRefPercent(_stages[_currentStage].refPercent);\r\n        setRate(_stages[_currentStage].rate);\r\n        emit OpenStage(_currentStage, now);\r\n        setStageStartTime(_currentStage, now);\r\n    }\r\n\r\n    /**\r\n     * @return stage parameters.\r\n     */\r\n    function viewStage(uint256 s) public view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        stage memory _stage = _stages[s];\r\n        return (_stage.rate, _stage.cap, _stage.refPercent, _stage.unsoldDistPercent, _stage.minEthDist, _stage.minHpaDist, _stage.period);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the stage cap has been reached.\r\n     * @return Whether the stage cap was reached\r\n     */\r\n    function stageCapReached() public view returns (bool) {\r\n        return weiRaised() >= _stages[_currentStage].cap;\r\n    }\r\n\r\n    /**\r\n     * @return the stage opening and closing time.\r\n     */\r\n    function stageTiming(uint256 stageNumber) public view returns (uint256, uint256) {\r\n        return (_stagesStats[stageNumber].start, _stagesStats[stageNumber].end);\r\n    }\r\n\r\n    /**\r\n     * @return true if the crowdsale is open, false otherwise.\r\n     */\r\n    function isOpen() public view returns (bool) {\r\n        uint256 numStages = _stages.length.sub(1);\r\n        if (_currentStage == numStages) {\r\n            if (_stagesStats[_currentStage].end > 0) {\r\n                return false;\r\n            }\r\n            if (_stages[_currentStage].period > 0) {\r\n                if (_stagesStats[_currentStage].start + _stages[_currentStage].period <= now) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (weiRaised() == _stages[_currentStage].cap) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n     * @return Whether crowdsale period has elapsed\r\n     */\r\n    function hasClosed() public view returns (bool) {\r\n        return !isOpen();\r\n    }\r\n\r\n    /**\r\n     * @dev checks the current stage, closes it and returns true if it is finished.\r\n     * Returns false if the stage is not finished.\r\n     */\r\n    function checkEndStage() internal returns (bool) {\r\n        if (_stagesStats[_currentStage].end > 0) {\r\n            return true;\r\n        }\r\n        if (_stages[_currentStage].period > 0) {\r\n            if (_stagesStats[_currentStage].start + _stages[_currentStage].period <= now) {\r\n                closeCurrentStage();\r\n                return true;\r\n            }\r\n        }\r\n        if (weiRaised() == _stages[_currentStage].cap) {\r\n            closeCurrentStage();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Manualy close current stage\r\n     */\r\n    function manualyCloseCurrentStage() public onlyOwner returns (bool) {\r\n        if (checkEndStage()) {\r\n            if (isOpen()) {\r\n                openNewStage();\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n     * It works before the purchase operation.\r\n     * Checks before buying whether the crowdsale is closed, if the limit for the current stage is not exceeded,\r\n     * and also the maximum percentage of purchase for the current stage is not exceeded\r\n     * @param beneficiary Token purchaser\r\n     * @param weiAmount Amount of wei contributed\r\n     */\r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        super._preValidatePurchase(beneficiary, weiAmount);\r\n        require(isOpen(), \"StagesCrowdsale: Final stage completed. Crowdsale already closed\");\r\n        require(weiRaised().add(weiAmount) <= _stages[_currentStage].cap, \"StagesCrowdsale: stage cap exceeded\");\r\n        require(weiAmount <= _stages[_currentStage].cap.div(5), \"StagesCrowdsale: cannot buy more than 20% stage cap\");\r\n    }\r\n\r\n    /**\r\n    * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\r\n    * conditions are not met.\r\n    * Checks completion of a stage and opens a new one if the current stage is completed\r\n    * @param beneficiary Address performing the token purchase\r\n    * @param weiAmount Value in wei involved in the purchase\r\n    */\r\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal {\r\n        super._postValidatePurchase(beneficiary, weiAmount);\r\n        if (checkEndStage()) {\r\n            if (isOpen()) {\r\n                openNewStage();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\r\n     * etc.)\r\n     * Saves statistics of the operation\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\r\n        super._updatePurchasingState(beneficiary, weiAmount);\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        setCurrentStageStat(beneficiary, weiAmount, tokens);\r\n        setPurchaseStat(beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\r\n     * etc.)\r\n     * Saves stage statistics\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     * @param tokens Value in HPA tokens involved in the purchase\r\n     */\r\n    function setCurrentStageStat(address beneficiary, uint256 weiAmount, uint256 tokens) internal {\r\n        _stagesStats[_currentStage].tokensSold = _stagesStats[_currentStage].tokensSold.add(tokens);\r\n        _stagesStats[_currentStage].numPurchases = _stagesStats[_currentStage].numPurchases.add(1);\r\n        _stagesStats[_currentStage].tokensUnsold = _stagesStats[_currentStage].tokensUnsold.sub(tokens);\r\n        if (_stages[_currentStage].unsoldDistPercent > 0) {\r\n            _stagesStats[_currentStage].partsDist[beneficiary].sumWei = _stagesStats[_currentStage].partsDist[beneficiary].sumWei.add(weiAmount);\r\n            _stagesStats[_currentStage].partsDist[beneficiary].sumHpa = _stagesStats[_currentStage].partsDist[beneficiary].sumHpa.add(tokens);\r\n            if (\r\n                _stagesStats[_currentStage].partsDist[beneficiary].sumWei >= _stages[_currentStage].minEthDist &&\r\n                _stagesStats[_currentStage].partsDist[beneficiary].sumHpa >= _stages[_currentStage].minHpaDist\r\n            ) {\r\n                if (!_stagesStats[_currentStage].partsDist[beneficiary].part) {\r\n                    _stagesStats[_currentStage].numBuyersDist = _stagesStats[_currentStage].numBuyersDist.add(1);\r\n                }\r\n                _stagesStats[_currentStage].partsDist[beneficiary].part = true;\r\n                buyersStats[beneficiary].stagesPartDist[_currentStage] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\r\n     * etc.)\r\n     * Saves statistics of the operation\r\n     * @param beneficiary Address receiving the tokens\r\n     * @param weiAmount Value in wei involved in the purchase\r\n     * @param tokens Value in HPA tokens involved in the purchase\r\n     */\r\n    function setPurchaseStat(address beneficiary, uint256 weiAmount, uint256 tokens) internal {\r\n        uint256 hpa = 1 ether;\r\n        uint256 price = hpa.div(rate());\r\n        buyersStats[beneficiary].purchases.push(purchase({\r\n            stage: _currentStage,\r\n            price: price,\r\n            sumEth: weiAmount,\r\n            sumHpa: tokens,\r\n            time: now\r\n            }));\r\n        buyersStats[beneficiary].numPurchases = buyersStats[beneficiary].numPurchases.add(1);\r\n    }\r\n\r\n    /**\r\n     * @return contract balance in wei\r\n     */\r\n    function getThisBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n\r\n// File: contracts\\DistCrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Distribution on crowdsale\r\n * @dev Accounting and regulation of the distribution of unsold tokens in the late stages of Crowdsale\r\n */\r\ncontract DistCrowdsale is StagesCrowdsale {\r\n    uint256 private _unsoldTokens;  // Total unsold tokens\r\n    uint256 private _numStages;     // Total number of stages\r\n    uint256 private _distTokens;    // Total number of tokens received during distribution (requested tokens)\r\n    bool private _calcDone = false; // Have tokens been calculated for distribution?\r\n\r\n    struct stagesUnsoldTokens {     // A structural unit containing information on the distribution of unsold tokens by stages\r\n        uint256 stage;                  // The stage for which information is contained in the structural unit\r\n        uint256 percent;                // The percentage of allocated unsold tokens for distribution at this stage\r\n        uint256 stageUnsoldTokens;      // Unsold tokens at this stage\r\n        uint256 distTokens;             // The number of tokens allocated to each participant who has fulfilled the requirement to receive unsold tokens\r\n    }\r\n\r\n    // Information on the distribution of unsold tokens for all stages\r\n    mapping (uint256 => stagesUnsoldTokens) _stagesDistTokens;\r\n    // Information about the tokens received during the distribution process for each address that made the distribution request\r\n    mapping (address => uint256) collectedUnsoldTokens;\r\n\r\n    /**\r\n     * Event triggered when calculating the number of tokens that each participant in the distribution program will receive\r\n     * @param unsoldTokens Total unsold tokens\r\n     * @param time Calculation Time\r\n     */\r\n    event DistCalculation(uint256 unsoldTokens, uint256 time);\r\n\r\n    /**\r\n     * @dev Creating a contract with setting the total number of stages\r\n     */\r\n    constructor () public {\r\n        _numStages = _stages.length.sub(1);\r\n    }\r\n\r\n    /**\r\n     * @return information about the distribution of tokens at the specified stage\r\n     * @param s stage\r\n     */\r\n    function viewStageDistTokens(uint256 s) public view returns (uint256, uint256, uint256) {\r\n        stagesUnsoldTokens memory _dist = _stagesDistTokens[s];\r\n        return (_dist.percent, _dist.stageUnsoldTokens, _dist.distTokens);\r\n    }\r\n\r\n    /**\r\n     * @return total number of tokens received during distribution (requested tokens)\r\n     */\r\n    function getDistTokens() public view returns(uint) {\r\n        return _distTokens;\r\n    }\r\n\r\n    /**\r\n     * @return total unsold tokens\r\n     */\r\n    function getUnsoldTokens() public view returns(uint) {\r\n        return _unsoldTokens;\r\n    }\r\n\r\n    /**\r\n     * @return the number of tokens received during the distribution process for the specified buyer\r\n     * @param buyer for which participant information is requested\r\n     */\r\n    function getBuyerCollectedUnsoldTokens(address buyer) public view returns (uint256) {\r\n        return collectedUnsoldTokens[buyer];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function calculating the total number of unsold tokens.\r\n     * It is possible to start only after the crowdsale ends.\r\n     */\r\n    function sumUnsoldTokens() internal {\r\n        require(hasClosed(), \"DistCrowdsale: Crowdsale not complete\");\r\n        uint256 unsoldTokens;\r\n        for (uint256 i = 1; i <= _numStages; i++) {\r\n            //if (_stages[i].unsoldDistPercent > 0) {\r\n            unsoldTokens = unsoldTokens.add(_stagesStats[i].tokensUnsold);\r\n            _stagesDistTokens[i].percent = _stages[i].unsoldDistPercent;\r\n            //}\r\n        }\r\n        _unsoldTokens = unsoldTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev An internal function that calculates the number of tokens to be distributed\r\n     * to each and other information. Calculated for each stage.\r\n     * It is possible to launch only after the end of the sale and provided that not all tokens are sold\r\n     */\r\n    function calcDistUnsoldTokens() internal {\r\n        require(hasClosed(), \"DistCrowdsale: Crowdsale not complete\");\r\n        require(_unsoldTokens > 0, \"DistCrowdsale: The number of unsold tokens should not be zero\");\r\n        for (uint256 i = 1; i <= _numStages; i++) {\r\n            if (_stages[i].unsoldDistPercent > 0) {\r\n                _stagesDistTokens[i].stage = i;\r\n                _stagesDistTokens[i].stageUnsoldTokens = _unsoldTokens.div(100).mul(_stagesDistTokens[i].percent);\r\n                if (_stagesStats[i].numBuyersDist > 0) {\r\n                    _stagesDistTokens[i].distTokens = _stagesDistTokens[i].stageUnsoldTokens.div(_stagesStats[i].numBuyersDist);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev An external function to run all calculations.\r\n     * It is possible to start only if the calculations have not yet been made and if the sale is completed.\r\n     */\r\n    function distCalc() external onlyHuman {\r\n        require(hasClosed(), \"DistCrowdsale: Crowdsale not complete\");\r\n        require(!_calcDone, \"DistCrowdsale: Calculation complete\");\r\n        sumUnsoldTokens();\r\n        emit DistCalculation(_unsoldTokens, now);\r\n        calcDistUnsoldTokens();\r\n        _calcDone = true;\r\n    }\r\n\r\n    /**\r\n     * @dev An external function for requesting the accrual of unsold tokens to the specified address from each stage.\r\n     * It is checked whether the address that made the function call is involved in the distribution of tokens at each stage\r\n     * It is possible to start only if the calculations have not yet been made and if the sale is completed.\r\n     * @param beneficiary The address tokens will be transferred to\r\n     */\r\n    function withdrawalUnsoldTokens(address beneficiary) external onlyHuman {\r\n        require(hasClosed(), \"DistCrowdsale: Crowdsale not complete\");\r\n        require(_calcDone, \"DistCrowdsale: Calculation not complete\");\r\n        uint256 tokensSend = 0;\r\n        for (uint256 i = 1; i <= _numStages; i++) {\r\n            if (buyersStats[beneficiary].stagesPartDist[i]) {\r\n                tokensSend = tokensSend.add(_stagesDistTokens[i].distTokens);\r\n                buyersStats[beneficiary].stagesPartDist[i] = false;\r\n            }\r\n        }\r\n        _distTokens = _distTokens.add(tokensSend);\r\n        collectedUnsoldTokens[beneficiary] = tokensSend;\r\n\r\n        emit TokensPurchased(_msgSender(), beneficiary, 0, tokensSend);\r\n        _processPurchase(beneficiary, tokensSend);\r\n    }\r\n}\r\n\r\n// File: contracts\\BuybackCrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Token buyback contract\r\n * @dev The calculation of the redemption price of tokens, as well as the\r\n * redemption of tokens after the crowdsale at the calculated price\r\n */\r\ncontract BuybackCrowdsale is DistCrowdsale {\r\n    uint256 private _buybackBalance;    // ETH balance for redemption of tokens\r\n    uint256 private _buybackPrice;      // Token buyback price\r\n    uint256 private _timeCalc;          // Price calculation time\r\n\r\n    // Token buyback completion time, after which the contract owner\r\n    // will be able to withdraw the ETH remaining on the contract.\r\n    // The countdown starts from the time of the price calculation (_timeCalc).\r\n    uint256 private _timeBuybackEnd;\r\n\r\n    address private _burnAddress;       // Address for burning purchased tokens\r\n    bool private _calcDone = false;     // The parameter determining whether the price was calculated\r\n\r\n    struct buyerBuyback {       // The structure of accounting statistics of token buyback operations\r\n        address beneficiary;        // ETH receiving address\r\n        uint256 tokenAmount;        // Token Amount\r\n        uint256 price;              // Calculated Token Buyback Price\r\n        uint256 sumEther;           // Amount ETH\r\n        uint256 time;               // Operation time\r\n    }\r\n\r\n    // Accounting for all statistics of token buyback operations\r\n    mapping (address => buyerBuyback[]) buyersBuybacks;\r\n\r\n    /**\r\n     * Event Token price calculation event\r\n     * @param buybackBalance ETH balance for redemption of tokens\r\n     * @param buybackPrice token buyback price\r\n     * @param timeCalc price calculation time\r\n     * @param timeBuybackEnd token buyback completion time\r\n     */\r\n    event BuybackCalculation(uint256 buybackBalance, uint256 buybackPrice, uint256 timeCalc, uint256 timeBuybackEnd);\r\n\r\n    /**\r\n     * Event Token buyback event\r\n     * @param beneficiary ETH receiving address\r\n     * @param amount Token Amount\r\n     * @param sumEther Amount ETH\r\n     * @param time Event time\r\n     */\r\n    event Buyback(address indexed beneficiary, uint256 amount, uint256 sumEther, uint256 time);\r\n\r\n    /**\r\n     * Event ETN withdrawal event after the end of the crowdsale\r\n     * @param ownerAddress ETH receiving address\r\n     * @param amount Amount ETH\r\n     * @param time Event time\r\n     */\r\n    event Withdrawal(address indexed ownerAddress, uint256 amount, uint256 time);\r\n\r\n    /**\r\n     * @dev Launch of a token buyback contract after the end of the sale.\r\n     * The address to which the tokens will be sent is owned by no one and no one will be able to access the tokens.\r\n     * In the process of creating a contract, a deadline is established after which the redemption of tokens ends\r\n     * and the contract owner will be able to withdraw the remaining ETH\r\n     * @param burnAddress The address tokens will be sent after the buyback (token burning)\r\n     */\r\n    constructor (address burnAddress) public {\r\n        _timeBuybackEnd = 180 days;\r\n        //_burnAddress = address(0x0000000000000000000000000000000000000001);\r\n        _burnAddress = burnAddress;\r\n    }\r\n\r\n    /**\r\n     * @return ETH balance for redemption of tokens\r\n     */\r\n    function getBuybackBalance() public view returns (uint256) {\r\n        return _buybackBalance;\r\n    }\r\n\r\n    /**\r\n     * @return Token buyback price\r\n     */\r\n    function getBuybackPrice() public view returns (uint256) {\r\n        return _buybackPrice;\r\n    }\r\n\r\n    /**\r\n     * @return Price calculation time\r\n     */\r\n    function getTimeCalc() public view returns (uint256) {\r\n        return _timeCalc;\r\n    }\r\n\r\n    /**\r\n     * @return Token buyback completion time\r\n     */\r\n    function getTimeBuyback() public view returns (uint256) {\r\n        return _timeBuybackEnd;\r\n    }\r\n\r\n    /**\r\n     * @dev request statistics on distributed tokens for the specified participant\r\n     * @param buyer Token buyer who sold the tokens to the contract (according to the token redemption procedure)\r\n     * @return An array of statistics on token buyback operations of a specified buyer\r\n     */\r\n    function getBuyerBuybacks(address buyer) public view returns (buyerBuyback[] memory) {\r\n        return buyersBuybacks[buyer];\r\n    }\r\n\r\n    /**\r\n     * @dev The function of calculating the price of tokens, which can be called by anyone\r\n     * (if the owner of the contract does not), but only after the sale is completed.\r\n     * The calculation is made only once and only if the account balance has ETH.\r\n     */\r\n    function buybackCalc() external onlyHuman {\r\n        require(hasClosed(), \"BuybackCrowdsale: Crowdsale not complete\");\r\n        require(!_calcDone, \"BuybackCrowdsale: Calculation complete\");\r\n        _buybackBalance = address(this).balance;\r\n        require(_buybackBalance > 0, \"BuybackCrowdsale: Contract ETH should not be zero\");\r\n        _buybackPrice = _buybackBalance.div(token().totalSupply().div(10 ether));\r\n        _calcDone = true;\r\n        _timeCalc = now;\r\n        emit BuybackCalculation(_buybackBalance, _buybackPrice, _timeCalc, _timeCalc.add(_timeBuybackEnd));\r\n    }\r\n\r\n    /**\r\n     * @dev An external function that is used to request a buyback of tokens.\r\n     * The caller of this function sells tokens to the contract at the previously calculated price.\r\n     * Calling this function is possible only after the end of the crowdsale and the price calculation.\r\n     * If there is no money left on the contract, then this function will stop working.\r\n     * The address (beneficiary) to which ETH will be transferred for tokens should not be empty.\r\n     * The minimum token sale amount is 1 HPA token.\r\n     * The indicated amount of tokens (hpaAmount) should be on the account of the address that called this function.\r\n     *\r\n     * @param beneficiary ETH receiving address\r\n     * @param hpaAmount Token Amount\r\n     */\r\n    function buyback(address payable beneficiary, uint256 hpaAmount) external onlyHuman {\r\n        require(hasClosed(), \"BuybackCrowdsale: Crowdsale not complete\");\r\n        require(_calcDone, \"BuybackCrowdsale: Calculation not complete\");\r\n        require(address(this).balance > 0, \"BuybackCrowdsale: Contract ETH should not be zero\");\r\n        require(beneficiary != address(0), \"BuybackCrowdsale: Beneficiary is the zero address\");\r\n        require(hpaAmount >= 1 ether, \"BuybackCrowdsale: You must specify at least one token\");\r\n        require(token().balanceOf(beneficiary) >= hpaAmount, \"BuybackCrowdsale: Missing HPA token amount\");\r\n\r\n        uint256 sumEther = hpaAmount.div(1 ether).mul(_buybackPrice);\r\n        require(address(this).balance >= sumEther, \"BuybackCrowdsale: There is not enough ether on the contract for this transaction. Specify fewer tokens\");\r\n        buyersBuybacks[msg.sender].push(buyerBuyback({\r\n            beneficiary: beneficiary,\r\n            tokenAmount: hpaAmount,\r\n            price: _buybackPrice,\r\n            sumEther: sumEther,\r\n            time: now\r\n            }));\r\n        _buybackBalance = _buybackBalance.sub(sumEther);\r\n        emit Buyback(beneficiary, hpaAmount, sumEther, now);\r\n        token().transferFrom(msg.sender, _burnAddress, hpaAmount);\r\n        beneficiary.transfer(sumEther);\r\n    }\r\n\r\n    /**\r\n     * @dev The function of withdrawing the remaining and not requested for redemption ETH.\r\n     * It can only be called by the owner of the contract, after the end of the token buyback period\r\n     *\r\n     * @param ownerAddress Address of the owner to which the withdrawal ETH`s will be displayed\r\n     */\r\n    function withdrawal(address payable ownerAddress) external onlyOwner {\r\n        require(hasClosed(), \"BuybackCrowdsale: Crowdsale not complete\");\r\n        require(_calcDone, \"BuybackCrowdsale: Calculation not complete\");\r\n        require(now > _timeCalc.add(_timeBuybackEnd), \"BuybackCrowdsale: Buyback not complete\");\r\n        require(ownerAddress != address(0), \"BuybackCrowdsale: ownerAddress is the zero address\");\r\n\r\n        emit Withdrawal(ownerAddress, address(this).balance, now);\r\n        ownerAddress.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts\\HighlyProfitableAnonymousToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title HighlyProfitableAnonymousToken\r\n * @dev Very simple ERC20 Token that can be minted.\r\n * It is meant to be used in a crowdsale contract.\r\n */\r\ncontract HighlyProfitableAnonymousToken is ERC20Mintable, ERC20Detailed {\r\n    constructor () public ERC20Detailed(\"Highly Profitable Anonymous Token\", \"HPA\", 18) {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n}\r\n\r\n// File: contracts\\HPACrowdsale.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**************************************************************************************************\\\r\n|$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$|\r\n|$$ -------------------------------------------------------------------------------------------- $$|\r\n|$$|                                                                                            |$$|\r\n|$$|   ¶¶  ¶¶ ¶¶¶¶¶   ¶¶¶¶      ¶¶¶¶  ¶¶¶¶¶   ¶¶¶¶  ¶¶   ¶¶ ¶¶¶¶¶   ¶¶¶¶   ¶¶¶¶  ¶¶     ¶¶¶¶¶   |$$|\r\n|$$|   ¶¶  ¶¶ ¶¶  ¶¶ ¶¶  ¶¶    ¶¶  ¶¶ ¶¶  ¶¶ ¶¶  ¶¶ ¶¶   ¶¶ ¶¶  ¶¶ ¶¶     ¶¶  ¶¶ ¶¶     ¶¶      |$$|\r\n|$$|   ¶¶¶¶¶¶ ¶¶¶¶¶  ¶¶¶¶¶¶    ¶¶     ¶¶¶¶¶  ¶¶  ¶¶ ¶¶ ¶ ¶¶ ¶¶  ¶¶  ¶¶¶¶  ¶¶¶¶¶¶ ¶¶     ¶¶¶¶    |$$|\r\n|$$|   ¶¶  ¶¶ ¶¶     ¶¶  ¶¶    ¶¶  ¶¶ ¶¶  ¶¶ ¶¶  ¶¶ ¶¶¶¶¶¶¶ ¶¶  ¶¶     ¶¶ ¶¶  ¶¶ ¶¶     ¶¶      |$$|\r\n|$$|   ¶¶  ¶¶ ¶¶     ¶¶  ¶¶     ¶¶¶¶  ¶¶  ¶¶  ¶¶¶¶   ¶¶ ¶¶  ¶¶¶¶¶   ¶¶¶¶  ¶¶  ¶¶ ¶¶¶¶¶¶ ¶¶¶¶¶   |$$|\r\n|$$|                                                                                            |$$|\r\n|$$ -------------------------------------------------------------------------------------------- $$|\r\n|$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$|\r\n\\**************************************************************************************************/\r\n\r\n/**\r\n * @title HpaCrowdsale\r\n * @dev Highly Profitable Anonymous Token\r\n * Highly Profitable Anonymous Token is an ICO Token that provides the opportunity to earn money\r\n * on the purchase of currencies with a significant discount and other bonuses, as well as\r\n * the opportunity to participate in crowdfunding of the platform of cryptocurrency projects.\r\n *\r\n */\r\ncontract HpaCrowdsale is BuybackCrowdsale {\r\n    uint256 private _platformTokens = 100000; // Tokens issued for the needs of the platform\r\n\r\n    // The time after the sale is completed, during which it impossible to withdraw tokens issued\r\n    // for the needs of the platform\r\n    uint256 private _withdrawalTokensTime = 30 days;\r\n    address payable initPlatformWallet = 0x4B536E67f532ea3129881266eC8B1D562D7B89E8;\r\n    address payable initPriceTokenBackingWallet = 0x4830121fb404b279D8354D99468D723bcaf69702;\r\n    address payable initInvestBoxWallet = 0x0Ee5bb8371A2605Fe5D46a915650CDDb745372cf;\r\n    address payable initOtherWallet = 0x0450080ba40cb9c27326304749064cd628E967E5;\r\n    address initBurnAddress = 0x0000000000000000000000000000000000000001;\r\n\r\n    constructor ()\r\n    public\r\n    Crowdsale(\r\n        initPlatformWallet,\r\n        initPriceTokenBackingWallet,\r\n        initInvestBoxWallet,\r\n        initOtherWallet,\r\n        new  HighlyProfitableAnonymousToken()\r\n    )\r\n    BuybackCrowdsale(initBurnAddress)\r\n    {\r\n        uint256 tokenAmount = _platformTokens.mul(1 ether);\r\n        emit TokensPurchased(_msgSender(), address(this), 0, tokenAmount);\r\n        _processPurchase(address(this), tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev The function of withdrawing tokens issued for the needs of the platform.\r\n     * You can use the output after the time specified in the _withdrawalTokensTime parameter,\r\n     * after the crowdsale is completed\r\n     * @param ownerAddress Recipient of the token purchase\r\n     */\r\n    function withdrawalPlatformTokens(address payable ownerAddress) external onlyOwner {\r\n        require(hasClosed(), \"HpaCrowdsale: Crowdsale not complete\");\r\n        require(now > _stagesStats[14].end.add(_withdrawalTokensTime), \"HpaCrowdsale: Please wait\");\r\n        require(ownerAddress != address(0), \"HpaCrowdsale: ownerAddress is the zero address\");\r\n\r\n        token().transfer(ownerAddress, _platformTokens.mul(1 ether));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HighlyProfitableAnonymousToken","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"petersburg","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fc491088bd81b09d3cc6980162b066cb495eb515184a4310bde9d0f49930285e"}]}