{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.11;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;}\r\n}\r\n\r\ninterface Uniswap{\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface Token{\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function primary() external view returns (address payable);\r\n}\r\n\r\ncontract Balancer {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address constant public ROUTER      = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant public FACTORY     = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address constant public WETHAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    uint constant public INF = 33136721784;\r\n    \r\n    function sqrt(uint y) public pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n    \r\n    function min(uint a, uint b) public pure returns (uint) {\r\n       \r\n       if(a < b){\r\n           return a;\r\n       }else{\r\n           return b;\r\n       }\r\n    }\r\n    \r\n    function min3(uint a, uint b, uint c) public pure returns (uint) {\r\n        return min( min(a,b), c );\r\n    }\r\n    \r\n    function Balance(address tokenAddress, uint ethPrice, uint assetPrice) public payable{\r\n        \r\n        //get pool address for token\r\n        address poolAddress = Uniswap(FACTORY).getPair(tokenAddress, WETHAddress);\r\n        \r\n        uint tokenAmount = Token(tokenAddress).balanceOf(poolAddress);//token in uniswap\r\n        uint ethAmount = Token(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n\r\n        //if the $ amount in eth is greater than $ amount in asset\r\n        if(ethAmount.mul(ethPrice) > tokenAmount.mul(assetPrice)){\r\n            //then remove eth and add token\r\n            \r\n            uint a = tokenAmount;\r\n            uint b = ethAmount;\r\n            \r\n            uint d = ethPrice;\r\n            uint g = assetPrice;\r\n            \r\n            uint tokenAdded = ( sqrt(g*a*(9*a*g + 3988000*b*d)) - 1997*a*g )/(1994*g);\r\n            uint userTokenAmount = Token(tokenAddress).balanceOf(msg.sender);\r\n            uint allowance = Token(tokenAddress).allowance(msg.sender, address(this));\r\n            \r\n            //whichever smallest\r\n            tokenAdded = min3(tokenAdded, userTokenAmount, allowance);\r\n\r\n            //receive token from user\r\n            require( Token(tokenAddress).transferFrom(msg.sender, address(this), tokenAdded), \"Could not move token to this contract, no approval?\");\r\n            \r\n            //trade with uniswap and send eth to user\r\n            address[] memory path = new address[](2);\r\n            path[0] = tokenAddress;\r\n            path[1] = WETHAddress;\r\n            Token(tokenAddress).approve(ROUTER, tokenAdded ); \r\n    \r\n            Uniswap(ROUTER).swapExactTokensForETH(tokenAdded,1, path, msg.sender, INF);\r\n\r\n        }else{\r\n            //if not, remove token and add eth\r\n\r\n            uint a = ethAmount;\r\n            uint b = tokenAmount;\r\n            \r\n            uint d = assetPrice;\r\n            uint g = ethPrice;\r\n            \r\n            uint ethAdded = ( sqrt(g*a*(9*a*g + 3988000*b*d)) - 1997*a*g )/(1994*g);\r\n            \r\n            //trade with uniswap and send token to user\r\n            address[] memory path = new address[](2);\r\n            path[0] = WETHAddress;\r\n            path[1] = tokenAddress;\r\n            \r\n            if(address(this).balance < ethAdded){\r\n                ethAdded = address(this).balance;\r\n            }\r\n \r\n            Uniswap(ROUTER).swapExactETHForTokens.value(ethAdded)(1, path, msg.sender, INF);\r\n        }\r\n        \r\n        //send remaining eth back to user\r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetPrice\",\"type\":\"uint256\"}],\"name\":\"Balance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"min3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Balancer","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a31259b2a45e0c5b8a73dead3047298714778ca4bc5697136a474ef0fb330dca"}]}