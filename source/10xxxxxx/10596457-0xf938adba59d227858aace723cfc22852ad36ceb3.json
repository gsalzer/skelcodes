{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nDEAR MSG.SENDER(S):\r\n\r\n/ LexART is a project in beta.\r\n// Please audit and use at your own risk.\r\n/// There is also a DAO to join if you're curious.\r\n//// This is code, don't construed this as legal advice or replacement for professional counsel.\r\n///// STEAL THIS C0D3SL4W\r\n\r\n~presented by Open, ESQ || LexDAO LLC || LexART DAO\r\n*/\r\n\r\npragma solidity 0.5.17;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract LexDAORole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event LexDAOadded(address indexed account);\r\n    event LexDAOremoved(address indexed account);\r\n\r\n    Roles.Role private _lexDAOs;\r\n\r\n    modifier onlyLexDAO() {\r\n        require(isLexDAO(_msgSender()), \"LexDAORole: caller does not have the LexDAO role\");\r\n        _;\r\n    }\r\n\r\n    function isLexDAO(address account) public view returns (bool) {\r\n        return _lexDAOs.has(account);\r\n    }\r\n\r\n    function addLexDAO(address account) public onlyLexDAO {\r\n        _addLexDAO(account);\r\n    }\r\n\r\n    function renounceLexDAO() public {\r\n        _removeLexDAO(_msgSender());\r\n    }\r\n\r\n    function _addLexDAO(address account) internal {\r\n        _lexDAOs.add(account);\r\n        emit LexDAOadded(account);\r\n    }\r\n\r\n    function _removeLexDAO(address account) internal {\r\n        _lexDAOs.remove(account);\r\n        emit LexDAOremoved(account);\r\n    }\r\n}\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal { }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\r\n */\r\ncontract ERC20Capped is ERC20 {\r\n    uint256 private _cap;\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    constructor (uint256 cap) public {\r\n        require(cap > 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - minted tokens must not cause the total supply to go over the cap.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        if (from == address(0)) { // When minting tokens\r\n            require(totalSupply().add(amount) <= _cap, \"ERC20Capped: cap exceeded\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n */\r\ncontract ERC20Mintable is MinterRole, ERC20 {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev ERC20 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\ncontract ERC20Pausable is Pausable, ERC20 {\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of ERC20 standard designed for detailed tokenization with optional lexDAO governance.\r\n */\r\ncontract LexArt is LexDAORole, ERC20Burnable, ERC20Capped, ERC20Mintable, ERC20Pausable {\r\n\r\n    uint256 public periodDuration = 86400; // default = 1 day (or 86400 seconds)\r\n\r\n    //***** Art *****//\r\n    // address payable public owner; // owner of LexArt\r\n    address public buyer; // buyer of LexArt\r\n    string public artworkHash; // hash of artwork\r\n    string public certificateHash; // hash of certificate of authenticity\r\n    uint8 public ownerOffered; // 1 = offer active, 0 = offer inactive\r\n    uint256 public transactionValue; // pricing for LexArt\r\n    uint256 public totalRoyaltyPayout; // total royalties payout for this LexArt\r\n\r\n\r\n    //***** Royalties *****//\r\n    struct Owner {\r\n        address payable ownerAddress;\r\n        uint8 royalties;\r\n        uint256 royaltiesReceived;\r\n        uint8 gifted; // 1 = gifted (gifted owner retains royalties), 0 = not gifted\r\n    }\r\n\r\n    uint8 public startingRoyalties = 10; // percentage of royalty retained by minter-owner\r\n    uint8 public ownerCount = 0; // total owners of Art\r\n    mapping(uint256 => Owner) public owners; // a dictionary of owners\r\n\r\n\r\n    //***** License *****//\r\n    struct License {\r\n        // license details set by original owner\r\n        address licensee;\r\n        uint256 licenseFee;\r\n        string licenseDocument;\r\n        uint8 licensePeriodLength; // Number of periodDuration a license will last\r\n\r\n        // time related license data\r\n        uint256 licenseStartTime;\r\n        uint256 licenseEndTime;\r\n        uint8 licensePeriodLengthReached; // 1 = reached, 0 = not reached\r\n\r\n        // license results\r\n        uint8 licenseOffered; // 1 = offer active, 0 = offer inactive\r\n        uint8 licenseCompleted; // 1 = license completed, 0 = license incomplete\r\n        uint8 licenseTerminated; // 1 = license terminated, 0 = license not terminated\r\n        string licenseReport; // Licensee submits license report to complete active license\r\n        string terminationDetail; // Mintor-owner submits termination detail to terminate an active license\r\n    }\r\n\r\n    uint8 public licenseCount = 0; // total license created\r\n    mapping(uint256 => License) public licenses; // a dictionary of licenses\r\n\r\n\r\n    //***** Events *****//\r\n    event LexDAOtransferred(string indexed details);\r\n    event ArtworkUpdated(string indexed _artworkHash);\r\n    event CertificateUpdated(string indexed _certificatekHash);\r\n    event LicenseCreated(address _licensee, string indexed _licenseDocument, uint8 _licenseDuration, uint256 _licenseStartTime);\r\n\r\n    constructor (\r\n        string memory name,\r\n        string memory symbol,\r\n        string memory _artworkHash,\r\n        string memory _certificateHash,\r\n        address payable _owner,\r\n        address _lexDAO) public\r\n        ERC20(name, symbol)\r\n        ERC20Capped(1) {\r\n        artworkHash = _artworkHash;\r\n        certificateHash = _certificateHash;\r\n\r\n        owners[ownerCount].ownerAddress = _owner;\r\n        owners[ownerCount].royalties = startingRoyalties;\r\n\r\n\t    _addLexDAO(_lexDAO);\r\n        _addMinter(owners[ownerCount].ownerAddress);\r\n        _addPauser(_lexDAO);\r\n        _mint(owners[ownerCount].ownerAddress, 1);\r\n        _setupDecimals(0);\r\n    }\r\n\r\n    function giftLexART(address payable newOwner) public payable {\r\n        require(msg.sender == owners[ownerCount].ownerAddress, \"You do not currently own this Art!\");\r\n        require(newOwner != owners[ownerCount].ownerAddress, \"Owner cannot gift to herself!\");\r\n\r\n        _transfer(owners[ownerCount].ownerAddress, newOwner, 1);\r\n\r\n        ownerCount += 1;\r\n        owners[ownerCount].ownerAddress = newOwner;\r\n        owners[ownerCount].royalties = decayRoyalties(owners[ownerCount - 1].royalties);\r\n        owners[ownerCount].gifted = 1;\r\n    }\r\n\r\n    function decayRoyalties(uint8 royalties) private view returns (uint8) {\r\n        if (royalties <= startingRoyalties) {\r\n            if (royalties > 0) {\r\n                royalties = royalties - 1;\r\n                return royalties;\r\n            }\r\n        }\r\n    }\r\n\r\n    // owner makes offer by assigning buyer\r\n    function makeOffer(address _buyer, uint256 _transactionValue) public {\r\n        require(msg.sender == owners[ownerCount].ownerAddress, \"You are not the owner!\");\r\n        require(_buyer != owners[ownerCount].ownerAddress, \"Owner cannot be a buyer!\");\r\n        require(_transactionValue != 0, \"Transaction value cannot be 0!\");\r\n\r\n        transactionValue = _transactionValue;\r\n        buyer = _buyer;\r\n        ownerOffered = 1;\r\n    }\r\n\r\n    // distribute royalties\r\n    function distributeRoyalties(uint256 _transactionValue) private returns (uint256) {\r\n        uint256 totalPayout = _transactionValue.div(100);\r\n        uint256 royaltyPayout;\r\n\r\n        // royalties distribution\r\n        for (uint256 i = 0; i <= ownerCount; i++) {\r\n            uint256 eachPayout;\r\n\r\n            eachPayout = totalPayout.mul(owners[i].royalties);\r\n            royaltyPayout += eachPayout;\r\n\r\n            owners[i].ownerAddress.transfer(eachPayout);\r\n            owners[i].royaltiesReceived += eachPayout;\r\n        }\r\n        return royaltyPayout;\r\n    }\r\n\r\n    // buyer accepts offer\r\n    function acceptOffer() public payable {\r\n        require(msg.sender == buyer, \"You are not the buyer to accept owner's offer!\");\r\n        require(msg.value == transactionValue, \"Incorrect payment amount!\");\r\n        require(ownerOffered == 1, \"Owner has not made any offer!\");\r\n\r\n        // Calculate royalty payout\r\n        uint256 royaltyPayout = distributeRoyalties(transactionValue);\r\n\r\n        // Calculate all time royalty payout\r\n        totalRoyaltyPayout += royaltyPayout;\r\n\r\n        // Owner receives transactionValue less royaltyPayout\r\n        owners[ownerCount].ownerAddress.transfer(transactionValue - royaltyPayout);\r\n        _transfer(owners[ownerCount].ownerAddress, buyer, 1);\r\n\r\n        // Add new owner to owners mapping\r\n        ownerCount += 1;\r\n        owners[ownerCount].ownerAddress = msg.sender;\r\n        owners[ownerCount].royalties = decayRoyalties(owners[ownerCount - 1].royalties);\r\n        owners[ownerCount].gifted = 0;\r\n\r\n        // Complete owner's offer\r\n        ownerOffered = 0;\r\n    }\r\n\r\n    // creator can create license accepted only by designated licensee\r\n    function createLicense(\r\n        address _licensee,\r\n        uint256 _licenseFee,\r\n        string memory _licenseDocument,\r\n        uint8 _licensePeriodLength) public {\r\n        require(msg.sender == owners[0].ownerAddress, \"You are not the minter-owner!\");\r\n        require(_licensee != owners[0].ownerAddress, \"Mintor-owner doesn't need a license!\");\r\n        require(_licensee != address(0), \"Licensee zeroed!\");\r\n        require(_licensePeriodLength != 0, \"License is set to 0 days!\");\r\n\r\n        License memory license = License({\r\n            licensee : _licensee,\r\n            licenseFee : _licenseFee,\r\n            licenseDocument : _licenseDocument,\r\n            licensePeriodLength : _licensePeriodLength,\r\n            licenseStartTime : 0,\r\n            licenseEndTime : 0,\r\n            licensePeriodLengthReached : 0,\r\n            licenseOffered : 1,\r\n            licenseCompleted : 0,\r\n            licenseTerminated : 0,\r\n            licenseReport : \"\",\r\n            terminationDetail : \"\"\r\n        });\r\n\r\n        licenses[licenseCount] = license;\r\n        emit LicenseCreated(licenses[licenseCount].licensee, licenses[licenseCount].licenseDocument, licenses[licenseCount].licensePeriodLength, licenses[licenseCount].licenseStartTime);\r\n\r\n        licenseCount += 1;\r\n    }\r\n\r\n    // designated licensee can accept license\r\n    function acceptLicense(uint256 _licenseCount) public payable {\r\n        require(msg.sender == licenses[_licenseCount].licensee, \"Not licensee!\");\r\n        require(msg.value == licenses[_licenseCount].licenseFee, \"Licensee fee incorrect!\");\r\n        require(licenses[_licenseCount].licenseOffered == 1, \"Cannot accept offer never created or already claimed!\");\r\n\r\n        // record time of acceptance... maybe connect LexGrow for escrow?\r\n        licenses[_licenseCount].licenseStartTime = now;\r\n\r\n        // license contract formed and so license offer is no longer active\r\n        licenses[_licenseCount].licenseOffered = 0;\r\n\r\n        // licensee pays licensee fee\r\n        owners[0].ownerAddress.transfer(msg.value);\r\n    }\r\n\r\n    // licensee can complete active licenses\r\n    function completeLicense(uint256 _licenseCount, string memory _licenseReport) public payable {\r\n        require(msg.sender == licenses[_licenseCount].licensee, \"Not licensee!\");\r\n        require(msg.value > 0, \"Cannot complete a license without paying!\"); // is this needed??????????\r\n        require(licenses[_licenseCount].licenseOffered == 0, \"Cannot complete a license that is pending acceptance!\");\r\n        require(licenses[_licenseCount].licenseTerminated == 0, \"Cannot complete a license that has been terminated!\");\r\n\r\n        licenses[_licenseCount].licenseReport = _licenseReport;\r\n        owners[0].ownerAddress.transfer(msg.value);\r\n        licenses[_licenseCount].licenseCompleted = 1;\r\n        licenses[_licenseCount].licenseEndTime = now;\r\n\r\n        // Record whether the license has lapsed\r\n        getCurrentPeriod(_licenseCount) > licenses[_licenseCount].licensePeriodLength ? licenses[_licenseCount].licensePeriodLengthReached = 1 : licenses[_licenseCount].licensePeriodLengthReached = 0;\r\n    }\r\n\r\n    // creator can terminate active licenses\r\n    function terminateLicense(uint256 _licenseCount, string memory _terminationDetail) public {\r\n        require(msg.sender == owners[0].ownerAddress, \"You are not the creator!\");\r\n        require(licenses[_licenseCount].licensee != address(0), \"License does not have a licensee!\");\r\n        require(licenses[_licenseCount].licenseOffered == 0, \"Cannot terminate a license not accepted by licensee!\");\r\n        require(licenses[_licenseCount].licenseCompleted == 0, \"Cannot terminate a license that has been completed!\");\r\n\r\n        licenses[_licenseCount].terminationDetail = _terminationDetail;\r\n        licenses[_licenseCount].licenseTerminated = 1;\r\n        licenses[_licenseCount].licenseEndTime = now;\r\n\r\n        // Record whether the license has lapsed\r\n        getCurrentPeriod(_licenseCount) > licenses[_licenseCount].licensePeriodLength ? licenses[_licenseCount].licensePeriodLengthReached = 1 : licenses[_licenseCount].licensePeriodLengthReached = 0;\r\n    }\r\n\r\n    function getCurrentPeriod(uint256 _licenseCount) public view returns (uint256) {\r\n        return now.sub(licenses[_licenseCount].licenseStartTime).div(periodDuration);\r\n    }\r\n\r\n     /***************\r\n    LEXDAO FUNCTIONS\r\n    ***************/\r\n\r\n    // DAO can vote to effectuate transfer of this token\r\n    function lexDAOtransfer(string memory details, address currentOwner, address newOwner) public onlyLexDAO {\r\n        _transfer(currentOwner, newOwner, 1);\r\n        emit LexDAOtransferred(details);\r\n    }\r\n\r\n    // DAO can vote to burn this token\r\n    function lexDAOburn(string memory details, address currentOwner) public onlyLexDAO {\r\n        _burn(currentOwner, 1);\r\n        emit LexDAOtransferred(details);\r\n    }\r\n\r\n    // DAO can vote to update artwork hash\r\n    function updateArtworkHash(string memory _artworkHash) public onlyLexDAO {\r\n        artworkHash = _artworkHash; // pauser admin(s) adjust token stamp\r\n        emit ArtworkUpdated(_artworkHash);\r\n    }\r\n\r\n    // DAO can vote to update certificate hash\r\n    function updateCertificateHash(string memory _certificateHash) public onlyLexDAO {\r\n        certificateHash = _certificateHash;\r\n        emit CertificateUpdated(_certificateHash);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Factory pattern to create new token contracts with LexARTDAO governance.\r\n */\r\ncontract LexArtFactory is Context {\r\n\r\n    string public factoryName;\r\n    uint256 public factoryFee = 5000000000000000; // default - 0.005 Ξ\r\n    address payable public lexDAO = 0x9455b183F9a6f716F8F46E5C6856A9775e40240d; // WARNING: This is a LexART DAO temp account.\r\n    address payable public factoryOwner; // owner of LexArtFactory\r\n\r\n    address[] public arts;\r\n\r\n    event FactoryFeeUpdated(uint256 indexed _factoryFee);\r\n    event FactoryNameUpdated(string indexed _factoryName);\r\n    event FactoryOwnerUpdated(address indexed _factoryOwner);\r\n    event LexDAOpaid(string indexed details, uint256 indexed payment, address indexed sender);\r\n    event LexDAOupdated(address indexed lexDAO);\r\n    event LexTokenDeployed(address indexed LT, address indexed owner, bool indexed _lexDAOgoverned);\r\n\r\n    constructor (string memory _factoryName) public {\r\n        factoryName = _factoryName;\r\n        factoryOwner = lexDAO;\r\n    }\r\n\r\n    function newLexArt(\r\n        string memory name,\r\n        string memory symbol,\r\n        string memory artworkHash,\r\n        string memory certificateHash\r\n        ) payable public {\r\n\r\n        require(msg.sender == factoryOwner, \"Only factory owners can mint Art!\");\r\n\t    require(msg.value == factoryFee, \"Factory Fee not attached!\");\r\n\r\n        LexArt LA = new LexArt (\r\n            name,\r\n            symbol,\r\n            artworkHash,\r\n            certificateHash,\r\n            factoryOwner,\r\n            lexDAO);\r\n\r\n        arts.push(address(LA));\r\n        address(lexDAO).transfer(msg.value);\r\n    }\r\n\r\n    function getLexArtCount() public view returns (uint256 LexArtCount) {\r\n        return arts.length;\r\n    }\r\n\r\n    /***************\r\n    LEXDAO FUNCTIONS\r\n    ***************/\r\n    modifier onlyLexDAO () {\r\n        require(_msgSender() == lexDAO, \"caller not lexDAO\");\r\n        _;\r\n    }\r\n\r\n    function updateFactoryFee(uint256 _factoryFee) public onlyLexDAO {\r\n       factoryFee = _factoryFee;\r\n       emit FactoryFeeUpdated(_factoryFee);\r\n    }\r\n\r\n    function updateFactoryName(string memory _factoryName) public {\r\n        require(msg.sender == factoryOwner, \"Not factory owner!\");\r\n        factoryName = _factoryName;\r\n        emit FactoryNameUpdated(_factoryName);\r\n    }\r\n\r\n    function assignFactoryOwner(address payable _factoryOwner) public onlyLexDAO {\r\n        require(msg.sender == lexDAO, \"Not factory owner!\");\r\n        factoryOwner = _factoryOwner;\r\n        emit FactoryOwnerUpdated(_factoryOwner);\r\n    }\r\n\r\n    function updateLexDAO(address payable __lexDAO) public onlyLexDAO {\r\n        lexDAO = __lexDAO;\r\n        emit LexDAOupdated(lexDAO);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_factoryName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_factoryFee\",\"type\":\"uint256\"}],\"name\":\"FactoryFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_factoryName\",\"type\":\"string\"}],\"name\":\"FactoryNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factoryOwner\",\"type\":\"address\"}],\"name\":\"FactoryOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LexDAOpaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lexDAO\",\"type\":\"address\"}],\"name\":\"LexDAOupdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"LT\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_lexDAOgoverned\",\"type\":\"bool\"}],\"name\":\"LexTokenDeployed\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_factoryOwner\",\"type\":\"address\"}],\"name\":\"assignFactoryOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factoryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factoryName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factoryOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLexArtCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"LexArtCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lexDAO\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"certificateHash\",\"type\":\"string\"}],\"name\":\"newLexArt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_factoryFee\",\"type\":\"uint256\"}],\"name\":\"updateFactoryFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_factoryName\",\"type\":\"string\"}],\"name\":\"updateFactoryName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"__lexDAO\",\"type\":\"address\"}],\"name\":\"updateLexDAO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LexArtFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000007526567616c696100000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0b79700265d173f276c196c63309ccdbd1b2eec49a6c7c0c344e29e73f046b09"}]}