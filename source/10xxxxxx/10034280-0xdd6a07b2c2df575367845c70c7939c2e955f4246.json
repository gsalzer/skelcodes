{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.6;\r\n\r\ncontract NTeria {\r\n    address payable owner;\r\n    struct Person {\r\n        address payable voter;\r\n        uint256 amount;\r\n        string decision;\r\n    }\r\n    bytes32 private_key_hashed;\r\n    uint people_count;\r\n    bool voting_in_progress;\r\n    mapping(uint => Person) people;\r\n    \r\n    event RevealKey(string);\r\n    event VotingClosed(uint);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    function add_funds() public payable isOwner {}\r\n    \r\n    function withdraw_funds() public isOwner {\r\n        require(address(this).balance>0, 'Balance is zero');\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function open_voting(bytes32 _private_key_hashed) public isOwner {\r\n        private_key_hashed = _private_key_hashed;\r\n        voting_in_progress = true;\r\n    }\r\n    \r\n    function get_vote(string memory _private_key, string memory _decision) internal pure returns(uint _vote) {\r\n        bytes32 _data = keccak256(abi.encodePacked(_private_key,_decision));\r\n        assembly { \r\n            _vote := and(_data,0xf)\r\n        }\r\n        return _vote;        \r\n    }\r\n    \r\n    function close_voting() public isOwner {\r\n        require(voting_in_progress, \"No voting to close\");\r\n        uint _balance = get_voting_balance();\r\n        delete voting_in_progress;\r\n        emit VotingClosed(_balance);\r\n    }\r\n    \r\n    function reveal_key_and_pay(string memory  _private_key) public isOwner {\r\n        require(!voting_in_progress, \"First, close voting\");\r\n        require(keccak256(abi.encodePacked(_private_key)) == private_key_hashed, \"Wrong private key\");\r\n        emit RevealKey(_private_key);\r\n        \r\n        uint[16] memory _people_votes;\r\n        for (uint i;i<people_count;i++)\r\n            _people_votes[get_vote(_private_key,people[i].decision)]++;\r\n        \r\n        uint _max_votes = 0;\r\n        for (uint j;j<16;j++)\r\n            if (_people_votes[j] > _max_votes)\r\n                _max_votes = _people_votes[j];\r\n        \r\n        uint _money_to_give;\r\n        uint _winners_count = 1;\r\n        for (uint i;i<people_count;i++) {\r\n            uint _vote = get_vote(_private_key,people[i].decision);\r\n            if (_people_votes[_vote] == _max_votes) {\r\n                _money_to_give += people[i].amount;\r\n                delete people[i];\r\n            } else if (people[i].amount > 0) {\r\n                _winners_count ++;\r\n            }\r\n        }\r\n        \r\n        _money_to_give -= _money_to_give%_winners_count;\r\n        uint _qty = _money_to_give/_winners_count;\r\n\r\n        for (uint i;i<people_count;i++) {\r\n            if (people[i].amount > 0) {\r\n                people[i].voter.transfer(_qty+people[i].amount);\r\n                delete people[i];\r\n            }\r\n        }\r\n        delete people_count;\r\n        delete private_key_hashed;\r\n    }\r\n    \r\n    function make_vote(string memory _decision) public payable {\r\n        require(voting_in_progress, \"Voting is closed\");\r\n        require(msg.value > 0, \"You should pay something\");\r\n        people[people_count] = Person(msg.sender,msg.value,_decision);\r\n        people_count ++;\r\n    }\r\n    \r\n    function cancel_vote() public {\r\n        require(voting_in_progress, \"Voting is closed\");\r\n        for (uint i;i<people_count;i++) {\r\n            if (people[i].voter == msg.sender) {\r\n                msg.sender.transfer(people[i].amount);\r\n                delete people[i];\r\n            }\r\n            \r\n        }\r\n    }\r\n    \r\n    function get_voting_balance() public view returns(uint _val){\r\n        _val = 0;\r\n        for (uint i;i<people_count;i++) {\r\n            _val += people[i].amount;\r\n        }\r\n    }\r\n\r\n    function get_number_votes() public view returns(uint _val){\r\n        _val = 0;\r\n        for (uint i;i<people_count;i++) {\r\n            if (people[i].amount>0) {\r\n                _val ++;\r\n            }\r\n        }\r\n    }\r\n \r\n    function destroy_contract() public isOwner{\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"RevealKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VotingClosed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"add_funds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel_vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close_voting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy_contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_number_votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_voting_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_decision\",\"type\":\"string\"}],\"name\":\"make_vote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_private_key_hashed\",\"type\":\"bytes32\"}],\"name\":\"open_voting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_private_key\",\"type\":\"string\"}],\"name\":\"reveal_key_and_pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_funds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NTeria","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3be2bb33bd86deea0ce219a7ee83bbeabb55c8c62018a99d3ff278bce8c80d68"}]}