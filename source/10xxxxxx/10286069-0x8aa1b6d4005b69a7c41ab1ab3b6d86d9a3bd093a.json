{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/* ETHART - A DFO-based ERC721\r\n * A ERC-721 standard Non Fungible Tokens implementation that exploits all the power of DFO\r\n * DFOBased721 Smart Contract is a wrapper that lets third-party applications (e.g. OpenSea, Cryptovoxels, etc.) easily interface and interact with NFTs\r\n * In fact, all standard ERC721 methods called in this Contract are totally redirected to the ethArt DFO which really stores and manages real data through its Microservices.\r\n * Advantages\r\n * 1. Flexibility: The community can directly manage it to solve protocol bugs or add features.\r\n * 2. Extension: If, for any reason in the future, a new NFT standard will come out, this wrapper can be changed to accept new capabilities without the need to migrate any single byte of data.\r\n * 3. Perpetual Storage: To avoid classical ERC721 censorship problems, NFTs made with this Dapp can be also stored on-chain, to keep them always available in any circumstances.\r\n * 4. Triple interaction: You can use it passing through this wrapper, the DFOHub portal or the ethArt web Application. They retrieve and set data from/to the same source.\r\n*/\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC721Metadata {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Enumerable {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ninterface IDFOBased721 {\r\n    function getProxy() external view returns (address);\r\n    function setProxy(address proxy) external;\r\n    function raiseTransferEvent(address from, address to, uint256 tokenId) external;\r\n    function raiseApprovalEvent(address subject, address operator, bool forAll, bool approved, uint256 tokenId) external;\r\n    function checkOnERC721Received(address subject, address from, address to, uint256 tokenId, bytes calldata _data) external returns (bool);\r\n}\r\n\r\ncontract DFOBased721 is IDFOBased721, IERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    bytes32 private constant EMPTY_STRING = keccak256(\"\");\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    address private _proxy;\r\n\r\n    constructor(address proxy) public {\r\n        setProxy(proxy);\r\n    }\r\n\r\n    modifier authorizedOnly {\r\n        require(IMVDFunctionalitiesManager(IMVDProxy(_proxy).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), \"Unauthorized Access!\");\r\n        _;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return\r\n        interfaceId == _INTERFACE_ID_ERC165 ||\r\n        interfaceId == _INTERFACE_ID_ERC721 ||\r\n        interfaceId == _INTERFACE_ID_ERC721_METADATA ||\r\n        interfaceId == _INTERFACE_ID_ERC721_ENUMERABLE;\r\n    }\r\n\r\n    function setProxy(address proxy) public override {\r\n        require(_proxy == address(0) || IMVDFunctionalitiesManager(IMVDProxy(_proxy).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), \"Unauthorized action!\");\r\n        _proxy = proxy;\r\n    }\r\n\r\n    function getProxy() public override view returns (address) {\r\n        return _proxy;\r\n    }\r\n\r\n    function name() public override view returns(string memory) {\r\n        return IERC20(IMVDProxy(_proxy).getToken()).name();\r\n    }\r\n\r\n    function symbol() public override view returns(string memory) {\r\n        return IERC20(IMVDProxy(_proxy).getToken()).symbol();\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public override view returns (string memory) {\r\n        IStateHolder stateHolder = IStateHolder(IMVDProxy(_proxy).getStateHolderAddress());\r\n        return stateHolder.getString(_stringConcat(_toString(stateHolder.exists(_stringConcat(_toString(tokenId), \"parent\", \"\")) ? stateHolder.getUint256(_stringConcat(_toString(tokenId), \"parent\", \"\")) : tokenId), \"\", \"\"));\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return IStateHolder(IMVDProxy(_proxy).getStateHolderAddress()).getUint256(\"totalSupply\");\r\n    }\r\n\r\n    function balanceOf(address owner) public override view returns (uint256) {\r\n        return IStateHolder(IMVDProxy(_proxy).getStateHolderAddress()).getUint256(_stringConcat(_toString(owner), \"balance\", \"\"));\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public override view returns (address) {\r\n        return IStateHolder(IMVDProxy(_proxy).getStateHolderAddress()).getAddress(_stringConcat(_toString(tokenId), \"owner\", \"\"));\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public override view returns (address) {\r\n        return IStateHolder(IMVDProxy(_proxy).getStateHolderAddress()).getAddress(_stringConcat(_toString(ownerOf(tokenId)), \"approved\", _toString(tokenId)));\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public override view returns (bool) {\r\n        return IStateHolder(IMVDProxy(_proxy).getStateHolderAddress()).getBool(_stringConcat(_toString(owner), \"approved\", _toString(operator)));\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public override view returns (uint256) {\r\n        return IStateHolder(IMVDProxy(_proxy).getStateHolderAddress()).getUint256(_stringConcat(_toString(owner), _toString(index), \"\"));\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public override view returns (uint256) {\r\n        if(index + 1 >= IStateHolder(IMVDProxy(_proxy).getStateHolderAddress()).getUint256(\"nextId\")) {\r\n            return 0;\r\n        }\r\n        return index + 1;\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public override {\r\n        IMVDProxy(_proxy).submit('transfer', abi.encode(address(0), 0, msg.sender, from, to, tokenId, true, data));\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public override {\r\n        IMVDProxy(_proxy).submit('transfer', abi.encode(address(0), 0, msg.sender, from, to, tokenId, false, \"\"));\r\n    }\r\n\r\n    function approve(address operator, uint256 tokenId) public override {\r\n        IMVDProxy(_proxy).submit('approve', abi.encode(address(0), 0, msg.sender, operator, false, false, tokenId));\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public override {\r\n        IMVDProxy(_proxy).submit('approve', abi.encode(address(0), 0, msg.sender, operator, true, _approved, 0));\r\n    }\r\n\r\n    function raiseTransferEvent(address from, address to, uint256 tokenId) public override authorizedOnly {\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function raiseApprovalEvent(address subject, address operator, bool forAll, bool approved, uint256 tokenId) public override authorizedOnly {\r\n        if(forAll) {\r\n            emit ApprovalForAll(subject, operator, approved);\r\n        } else {\r\n            emit Approval(subject, operator, tokenId);\r\n        }\r\n    }\r\n\r\n    function checkOnERC721Received(address subject, address from, address to, uint256 tokenId, bytes memory _data) public override authorizedOnly returns (bool) {\r\n        if (!_isContract(to)) {\r\n            return true;\r\n        }\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            subject,\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ));\r\n        if (!success) {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n            }\r\n        } else {\r\n            bytes4 retval = abi.decode(returndata, (bytes4));\r\n            return (retval == _ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _isContract(address account) private view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function _stringConcat(string memory a, string memory b, string memory c) private pure returns(string memory) {\r\n        bool aEmpty = _isEmpty(a);\r\n        bool bEmpty = _isEmpty(b);\r\n        bool cEmpty = _isEmpty(c);\r\n        return _toLowerCase(string(abi.encodePacked(\r\n            a,\r\n            aEmpty || bEmpty ? \"\" : \"_\",\r\n            b,\r\n            (aEmpty && bEmpty) || cEmpty ? \"\" : \"_\",\r\n            c\r\n        )));\r\n    }\r\n\r\n    function _isEmpty(string memory test) private pure returns(bool) {\r\n        return keccak256(bytes(test)) == EMPTY_STRING;\r\n    }\r\n\r\n    function _toString(address _addr) private pure returns(string memory) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function _toString(uint _i) private pure returns(string memory) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function _toLowerCase(string memory str) private pure returns(string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        for (uint i = 0; i < bStr.length; i++) {\r\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\r\n        }\r\n        return string(bStr);\r\n    }\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getToken() external view returns(address);\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getStateHolderAddress() external view returns(address);\r\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function exists(string calldata varName) external view returns(bool);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n    function setBytes(string calldata varName, bytes calldata val) external returns(bytes memory);\r\n    function getBytes(string calldata varName) external view returns(bytes memory);\r\n    function setString(string calldata varName, string calldata val) external returns(string memory);\r\n    function getString(string calldata varName) external view returns (string memory);\r\n    function setBool(string calldata varName, bool val) external returns(bool);\r\n    function getBool(string calldata varName) external view returns (bool);\r\n    function getUint256(string calldata varName) external view returns (uint256);\r\n    function setUint256(string calldata varName, uint256 val) external returns(uint256);\r\n    function getAddress(string calldata varName) external view returns (address);\r\n    function setAddress(string calldata varName, address val) external returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"checkOnERC721Received\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"forAll\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"raiseApprovalEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"raiseTransferEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DFOBased721","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004a08d087817fa803ef3e0b4e17d7856692f5d68d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6eba648c6a0d66746b2eedd9780990a527391fba3ea0caf789d3a48599739da6"}]}