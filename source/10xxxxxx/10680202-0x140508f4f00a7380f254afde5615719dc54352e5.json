{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\n\ncontract IStructuredStorage {\n\n    function setProxyLogicContractAndDeployer(address _proxyLogicContract, address _deployer) external;\n    function setProxyLogicContract(address _proxyLogicContract) external;\n\n    // *** Getter Methods ***\n    function getUint(bytes32 _key) external view returns(uint);\n    function getString(bytes32 _key) external view returns(string);\n    function getAddress(bytes32 _key) external view returns(address);\n    function getBytes(bytes32 _key) external view returns(bytes);\n    function getBool(bytes32 _key) external view returns(bool);\n    function getInt(bytes32 _key) external view returns(int);\n    function getBytes32(bytes32 _key) external view returns(bytes32);\n\n    // *** Getter Methods For Arrays ***\n    function getBytes32Array(bytes32 _key) external view returns (bytes32[]);\n    function getAddressArray(bytes32 _key) external view returns (address[]);\n    function getUintArray(bytes32 _key) external view returns (uint[]);\n    function getIntArray(bytes32 _key) external view returns (int[]);\n    function getBoolArray(bytes32 _key) external view returns (bool[]);\n\n    // *** Setter Methods ***\n    function setUint(bytes32 _key, uint _value) external;\n    function setString(bytes32 _key, string _value) external;\n    function setAddress(bytes32 _key, address _value) external;\n    function setBytes(bytes32 _key, bytes _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setBytes32(bytes32 _key, bytes32 _value) external;\n\n    // *** Setter Methods For Arrays ***\n    function setBytes32Array(bytes32 _key, bytes32[] _value) external;\n    function setAddressArray(bytes32 _key, address[] _value) external;\n    function setUintArray(bytes32 _key, uint[] _value) external;\n    function setIntArray(bytes32 _key, int[] _value) external;\n    function setBoolArray(bytes32 _key, bool[] _value) external;\n\n    // *** Delete Methods ***\n    function deleteUint(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteAddress(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteBytes32(bytes32 _key) external;\n}\n\ncontract ITwoKeyMaintainersRegistry {\n    function checkIsAddressMaintainer(address _sender) public view returns (bool);\n    function checkIsAddressCoreDev(address _sender) public view returns (bool);\n\n    function addMaintainers(address [] _maintainers) public;\n    function addCoreDevs(address [] _coreDevs) public;\n    function removeMaintainers(address [] _maintainers) public;\n    function removeCoreDevs(address [] _coreDevs) public;\n}\n\ncontract ITwoKeySingletoneRegistryFetchAddress {\n    function getContractProxyAddress(string _contractName) public view returns (address);\n    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n    function getLatestCampaignApprovedVersion(string campaignType) public view returns (string);\n}\n\ninterface ITwoKeySingletonesRegistry {\n\n    /**\n    * @dev This event will be emitted every time a new proxy is created\n    * @param proxy representing the address of the proxy created\n    */\n    event ProxyCreated(address proxy);\n\n\n    /**\n    * @dev This event will be emitted every time a new implementation is registered\n    * @param version representing the version name of the registered implementation\n    * @param implementation representing the address of the registered implementation\n    * @param contractName is the name of the contract we added new version\n    */\n    event VersionAdded(string version, address implementation, string contractName);\n\n    /**\n    * @dev Registers a new version with its implementation address\n    * @param version representing the version name of the new implementation to be registered\n    * @param implementation representing the address of the new implementation to be registered\n    */\n    function addVersion(string _contractName, string version, address implementation) public;\n\n    /**\n    * @dev Tells the address of the implementation for a given version\n    * @param _contractName is the name of the contract we're querying\n    * @param version to query the implementation of\n    * @return address of the implementation registered for the given version\n    */\n    function getVersion(string _contractName, string version) public view returns (address);\n}\n\ncontract ITwoKeySignatureValidatorStorage is IStructuredStorage {\n\n}\n\nlibrary Call {\n    function params0(address c, bytes _method) public view returns (uint answer) {\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n        //    dc = c;\n        bytes4 sig = bytes4(keccak256(_method));\n        assembly {\n        // move pointer to free memory spot\n            let ptr := mload(0x40)\n        // put function sig at memory spot\n            mstore(ptr,sig)\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n            15000, // gas limit\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n            0, // not transfer any ether (comment if using staticcall)\n            ptr, // Inputs are stored at location ptr\n            0x04, // Inputs are 0 bytes long\n            ptr,  //Store output over input\n            0x20) //Outputs are 1 bytes long\n\n            if eq(result, 0) {\n                revert(0, 0)\n            }\n\n            answer := mload(ptr) // Assign output to answer var\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n        }\n    }\n\n    function params1(address c, bytes _method, uint _val) public view returns (uint answer) {\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n        //    dc = c;\n        bytes4 sig = bytes4(keccak256(_method));\n        assembly {\n        // move pointer to free memory spot\n            let ptr := mload(0x40)\n        // put function sig at memory spot\n            mstore(ptr,sig)\n        // append argument after function sig\n            mstore(add(ptr,0x04), _val)\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n            15000, // gas limit\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n            0, // not transfer any ether (comment if using staticcall)\n            ptr, // Inputs are stored at location ptr\n            0x24, // Inputs are 0 bytes long\n            ptr,  //Store output over input\n            0x20) //Outputs are 1 bytes long\n\n            if eq(result, 0) {\n                revert(0, 0)\n            }\n\n            answer := mload(ptr) // Assign output to answer var\n            mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n        }\n    }\n\n    function params2(address c, bytes _method, uint _val1, uint _val2) public view returns (uint answer) {\n        // https://medium.com/@blockchain101/calling-the-function-of-another-contract-in-solidity-f9edfa921f4c\n        //    dc = c;\n        bytes4 sig = bytes4(keccak256(_method));\n        assembly {\n            // move pointer to free memory spot\n            let ptr := mload(0x40)\n            // put function sig at memory spot\n            mstore(ptr,sig)\n            // append argument after function sig\n            mstore(add(ptr,0x04), _val1)\n            mstore(add(ptr,0x24), _val2)\n\n            let result := call(  // use WARNING because this should be staticcall BUT geth crash!\n            15000, // gas limit\n            c, // sload(dc_slot),  // to addr. append var to _slot to access storage variable\n            0, // not transfer any ether (comment if using staticcall)\n            ptr, // Inputs are stored at location ptr\n            0x44, // Inputs are 4 bytes for signature and 2 uint256\n            ptr,  //Store output over input\n            0x20) //Outputs are 1 uint long\n\n            answer := mload(ptr) // Assign output to answer var\n            mstore(0x40,add(ptr,0x20)) // Set storage pointer to new space\n        }\n    }\n\n    function loadAddress(bytes sig, uint idx) public pure returns (address) {\n        address influencer;\n        idx += 20;\n        assembly\n        {\n            influencer := mload(add(sig, idx))\n        }\n        return influencer;\n    }\n\n    function loadUint8(bytes sig, uint idx) public pure returns (uint8) {\n        uint8 weight;\n        idx += 1;\n        assembly\n        {\n            weight := mload(add(sig, idx))\n        }\n        return weight;\n    }\n\n\n    function recoverHash(bytes32 hash, bytes sig, uint idx) public pure returns (address) {\n        // same as recoverHash in utils/sign.js\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        require (sig.length >= 65+idx, 'bad signature length');\n        idx += 32;\n        bytes32 r;\n        assembly\n        {\n            r := mload(add(sig, idx))\n        }\n\n        idx += 32;\n        bytes32 s;\n        assembly\n        {\n            s := mload(add(sig, idx))\n        }\n\n        idx += 1;\n        uint8 v;\n        assembly\n        {\n            v := mload(add(sig, idx))\n        }\n        if (v >= 32) { // handle case when signature was made with ethereum web3.eth.sign or getSign which is for signing ethereum transactions\n            v -= 32;\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\"; // 32 is the number of bytes in the following hash\n            hash = keccak256(abi.encodePacked(prefix, hash));\n        }\n        if (v <= 1) v += 27;\n        require(v==27 || v==28,'bad sig v');\n        //https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol#L57\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, 'bad sig s');\n        return ecrecover(hash, v, r, s);\n\n    }\n\n    function recoverSigMemory(bytes sig) private pure returns (address[], address[], uint8[], uint[], uint) {\n        uint8 version = loadUint8(sig, 0);\n        uint msg_len = (version == 1) ? 1+65+20 : 1+20+20;\n        uint n_influencers = (sig.length-21) / (65+msg_len);\n        uint8[] memory weights = new uint8[](n_influencers);\n        address[] memory keys = new address[](n_influencers);\n        if ((sig.length-21) % (65+msg_len) > 0) {\n            n_influencers++;\n        }\n        address[] memory influencers = new address[](n_influencers);\n        uint[] memory offsets = new uint[](n_influencers);\n\n        return (influencers, keys, weights, offsets, msg_len);\n    }\n\n    function recoverSigParts(bytes sig, address last_address) private pure returns (address[], address[], uint8[], uint[]) {\n        // sig structure:\n        // 1 byte version 0 or 1\n        // 20 bytes are the address of the contractor or the influencer who created sig.\n        //  this is the \"anchor\" of the link\n        //  It must have a public key aleady stored for it in public_link_key\n        // Begining of a loop on steps in the link:\n        // * 65 bytes are step-signature using the secret from previous step\n        // * message of the step that is going to be hashed and used to compute the above step-signature.\n        //   message length depend on version 41 (version 0) or 86 (version 1):\n        //   * 1 byte cut (percentage) each influencer takes from the bounty. the cut is stored in influencer2cut or weight for voting\n        //   * 20 bytes address of influencer (version 0) or 65 bytes of signature of cut using the influencer address to sign\n        //   * 20 bytes public key of the last secret\n        // In the last step the message can be optional. If it is missing the message used is the address of the sender\n        uint idx = 0;\n        uint msg_len;\n        uint8[] memory weights;\n        address[] memory keys;\n        address[] memory influencers;\n        uint[] memory offsets;\n        (influencers, keys, weights, offsets, msg_len) = recoverSigMemory(sig);\n        idx += 1;  // skip version\n\n        idx += 20; // skip old_address which should be read by the caller in order to get old_key\n        uint count_influencers = 0;\n\n        while (idx + 65 <= sig.length) {\n            offsets[count_influencers] = idx;\n            idx += 65;  // idx was increased by 65 for the signature at the begining which we will process later\n\n            if (idx + msg_len <= sig.length) {  // its  a < and not a <= because we dont want this to be the final iteration for the converter\n                weights[count_influencers] = loadUint8(sig, idx);\n                require(weights[count_influencers] > 0,'weight not defined (1..255)');  // 255 are used to indicate default (equal part) behaviour\n                idx++;\n\n\n                if (msg_len == 41)  // 1+20+20 version 0\n                {\n                    influencers[count_influencers] = loadAddress(sig, idx);\n                    idx += 20;\n                    keys[count_influencers] = loadAddress(sig, idx);\n                    idx += 20;\n                } else if (msg_len == 86)  // 1+65+20 version 1\n                {\n                    keys[count_influencers] = loadAddress(sig, idx+65);\n                    influencers[count_influencers] = recoverHash(\n                        keccak256(\n                            abi.encodePacked(\n                                keccak256(abi.encodePacked(\"bytes binding to weight\",\"bytes binding to public\")),\n                                keccak256(abi.encodePacked(weights[count_influencers],keys[count_influencers]))\n                            )\n                        ),sig,idx);\n                    idx += 65;\n                    idx += 20;\n                }\n\n            } else {\n                // handle short signatures generated with free_take\n                influencers[count_influencers] = last_address;\n            }\n            count_influencers++;\n        }\n        require(idx == sig.length,'illegal message size');\n\n        return (influencers, keys, weights, offsets);\n    }\n\n    function recoverSig(bytes sig, address old_key, address last_address) public pure returns (address[], address[], uint8[]) {\n        // validate sig AND\n        // recover the information from the signature: influencers, public_link_keys, weights/cuts\n        // influencers may have one more address than the keys and weights arrays\n        //\n        require(old_key != address(0),'no public link key');\n\n        address[] memory influencers;\n        address[] memory keys;\n        uint8[] memory weights;\n        uint[] memory offsets;\n        (influencers, keys, weights, offsets) = recoverSigParts(sig, last_address);\n\n        // check if we received a valid signature\n        for(uint i = 0; i < influencers.length; i++) {\n            if (i < weights.length) {\n                require (recoverHash(keccak256(abi.encodePacked(weights[i], keys[i], influencers[i])),sig,offsets[i]) == old_key, 'illegal signature');\n                old_key = keys[i];\n            } else {\n                // signed message for the last step is the address of the converter\n                require (recoverHash(keccak256(abi.encodePacked(influencers[i])),sig,offsets[i]) == old_key, 'illegal last signature');\n            }\n        }\n\n        return (influencers, keys, weights);\n    }\n}\n\ncontract Utils {\n\n    /**\n     * @notice Function to transform string to bytes32\n     * @dev string should be less than 32 chars\n     */\n    function stringToBytes32(\n        string memory source\n    )\n    internal\n    pure\n    returns (bytes32 result)\n    {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n\n    /**\n     * @notice Function to concat at most 3 strings\n     * @dev If you want to handle concatenation of less than 3, then pass first their values and for the left pass empty strings\n     * @return string concatenated\n     */\n    function strConcat(\n        string _a,\n        string _b,\n        string _c\n    )\n    internal\n    pure\n    returns (string)\n    {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        return string(babcde);\n    }\n\n\n}\n\ncontract ITwoKeySingletonUtils {\n\n    address public TWO_KEY_SINGLETON_REGISTRY;\n\n    // Modifier to restrict method calls only to maintainers\n    modifier onlyMaintainer {\n        address twoKeyMaintainersRegistry = getAddressFromTwoKeySingletonRegistry(\"TwoKeyMaintainersRegistry\");\n        require(ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).checkIsAddressMaintainer(msg.sender));\n        _;\n    }\n\n    /**\n     * @notice Function to get any singleton contract proxy address from TwoKeySingletonRegistry contract\n     * @param contractName is the name of the contract we're looking for\n     */\n    function getAddressFromTwoKeySingletonRegistry(\n        string contractName\n    )\n    internal\n    view\n    returns (address)\n    {\n        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n            .getContractProxyAddress(contractName);\n    }\n\n    function getNonUpgradableContractAddressFromTwoKeySingletonRegistry(\n        string contractName\n    )\n    internal\n    view\n    returns (address)\n    {\n        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n            .getNonUpgradableContractAddress(contractName);\n    }\n}\n\ncontract UpgradeabilityStorage {\n    // Versions registry\n    ITwoKeySingletonesRegistry internal registry;\n\n    // Address of the current implementation\n    address internal _implementation;\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n}\n\ncontract Upgradeable is UpgradeabilityStorage {\n    /**\n     * @dev Validates the caller is the versions registry.\n     * @param sender representing the address deploying the initial behavior of the contract\n     */\n    function initialize(address sender) public payable {\n        require(msg.sender == address(registry));\n    }\n}\n\ncontract TwoKeySignatureValidator is Upgradeable, Utils, ITwoKeySingletonUtils {\n\n    using Call for *;\n    bool initialized;\n    // using constants to avoid typos\n    string constant message = \"bytes binding to name\";\n\n    // Pointer to storage contract\n    ITwoKeySignatureValidatorStorage public PROXY_STORAGE_CONTRACT;\n\n    /**\n     * @notice Function to simulate constructor\n     * @param _twoKeySingletonRegistry is the address of TWO_KEY_SINGLETON_REGISTRY\n     * @param _proxyStorage is the address of proxy of storage contracts\n     */\n    function setInitialParams(\n        address _twoKeySingletonRegistry,\n        address _proxyStorage\n    )\n    public\n    {\n        require(initialized == false);\n\n        TWO_KEY_SINGLETON_REGISTRY = _twoKeySingletonRegistry;\n        PROXY_STORAGE_CONTRACT = ITwoKeySignatureValidatorStorage(_proxyStorage);\n\n        initialized = true;\n    }\n\n    /**\n     * @notice Function to validate signature which will sign user data\n     * @param _name is the name of user\n     * @param _fullName is the full name of user\n     * @param _email is the email of user\n     * @param signature is the signature\n     * @return if signature is good it will resolve address, otherwise it will be address(0)\n     */\n    function validateSignUserData(\n        string _name,\n        string _fullName,\n        string _email,\n        bytes signature\n    )\n    public\n    pure\n    returns (address)\n    {\n        string memory concatenatedValues = strConcat(_name,_fullName,_email);\n        bytes32 hash = keccak256(abi.encodePacked(keccak256(abi.encodePacked(message)),\n            keccak256(abi.encodePacked(concatenatedValues))));\n        address message_signer = Call.recoverHash(hash, signature, 0);\n        return message_signer;\n    }\n\n    /**\n     * @notice Function to validate signature which will sign name\n     * @param _name is user name to be signed\n     * @param signature is signature containing that signed name\n     * @return if signature is good it will resolve address, otherwise it will be address(0)\n     */\n    function validateSignName(\n        string _name,\n        bytes signature\n    )\n    public\n    pure\n    returns (address)\n    {\n        bytes32 hash = keccak256(abi.encodePacked(keccak256(abi.encodePacked(message)),\n            keccak256(abi.encodePacked(_name))));\n        address eth_address = Call.recoverHash(hash,signature,0);\n        return eth_address;\n    }\n\n    /**\n     * @notice Function to validate signature which will sign wallet name\n     * @param username is the username of the user\n     * @param _username_walletName is = concat(username,'_',walletName)\n     * @return if signature is good it will resolve address, otherwise it will be address(0)\n     */\n    function validateSignWalletName(\n        string memory username,\n        string memory _username_walletName,\n        bytes signature\n    )\n    pure\n    returns (address)\n    {\n        string memory concatenatedValues = strConcat(username,_username_walletName,\"\");\n\n        bytes32 hash = keccak256(abi.encodePacked(keccak256(abi.encodePacked(message)),\n            keccak256(abi.encodePacked(concatenatedValues))));\n        address message_signer = Call.recoverHash(hash, signature, 0);\n        return message_signer;\n    }\n\n    /**\n     * @notice          Function to validate signature which will sign plasma2ethereum bindings\n     * @param           plasmaAddress is the address\n     * @param           signature is the signature\n     * @return if signature is good it will resolve address, otherwise it will be address(0)\n    */\n\n    function validatePlasmaToEthereum(\n        address plasmaAddress,\n        bytes signature\n    )\n    public\n    pure\n    returns (address) {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                keccak256(abi.encodePacked(\"bytes binding to plasma address\")),\n                keccak256(abi.encodePacked(plasmaAddress))\n            )\n        );\n\n        // Recover ethereumAddress from signature\n        address recoveredEthereumAddress = Call.recoverHash(hash,signature,0);\n        return recoveredEthereumAddress;\n    }\n}\n\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_twoKeySingletonRegistry\",\"type\":\"address\"},{\"name\":\"_proxyStorage\",\"type\":\"address\"}],\"name\":\"setInitialParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_STORAGE_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"_username_walletName\",\"type\":\"string\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignWalletName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_fullName\",\"type\":\"string\"},{\"name\":\"_email\",\"type\":\"string\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignUserData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TWO_KEY_SINGLETON_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plasmaAddress\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validatePlasmaToEthereum\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"TwoKeySignatureValidator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"Call:eefce35a5f748ab47d574214897b90d5d09f6047","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}