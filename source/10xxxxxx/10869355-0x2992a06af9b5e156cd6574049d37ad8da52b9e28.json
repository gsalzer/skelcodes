{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n// \r\n// Needed to handle structures externally\r\n/**\r\n * @author Balancer Labs\r\n * @title Manage Configurable Rights for the smart pool\r\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\r\n *                         by default, it is off on initialization and can only be turned on\r\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\r\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\r\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\r\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\r\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\r\n */\r\nlibrary RightsManager {\r\n\r\n    // Type declarations\r\n\r\n    enum Permissions { PAUSE_SWAPPING,\r\n                       CHANGE_SWAP_FEE,\r\n                       CHANGE_WEIGHTS,\r\n                       ADD_REMOVE_TOKENS,\r\n                       WHITELIST_LPS,\r\n                       CHANGE_CAP }\r\n\r\n    struct Rights {\r\n        bool canPauseSwapping;\r\n        bool canChangeSwapFee;\r\n        bool canChangeWeights;\r\n        bool canAddRemoveTokens;\r\n        bool canWhitelistLPs;\r\n        bool canChangeCap;\r\n    }\r\n\r\n    // State variables (can only be constants in a library)\r\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\r\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\r\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\r\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\r\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\r\n    bool public constant DEFAULT_CAN_CHANGE_CAP = false;\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * @notice create a struct from an array (or return defaults)\r\n     * @dev If you pass an empty array, it will construct it using the defaults\r\n     * @param a - array input\r\n     * @return Rights struct\r\n     */ \r\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\r\n        if (a.length == 0) {\r\n            return Rights(DEFAULT_CAN_PAUSE_SWAPPING,\r\n                          DEFAULT_CAN_CHANGE_SWAP_FEE,\r\n                          DEFAULT_CAN_CHANGE_WEIGHTS,\r\n                          DEFAULT_CAN_ADD_REMOVE_TOKENS,\r\n                          DEFAULT_CAN_WHITELIST_LPS,\r\n                          DEFAULT_CAN_CHANGE_CAP);\r\n        }\r\n        else {\r\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\r\n     * @dev avoids multiple calls to hasPermission\r\n     * @param rights - the rights struct to convert\r\n     * @return boolean array containing the rights settings\r\n     */\r\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\r\n        bool[] memory result = new bool[](6);\r\n\r\n        result[0] = rights.canPauseSwapping;\r\n        result[1] = rights.canChangeSwapFee;\r\n        result[2] = rights.canChangeWeights;\r\n        result[3] = rights.canAddRemoveTokens;\r\n        result[4] = rights.canWhitelistLPs;\r\n        result[5] = rights.canChangeCap;\r\n\r\n        return result;\r\n    }\r\n\r\n    // Though it is actually simple, the number of branches triggers code-complexity\r\n    /* solhint-disable code-complexity */\r\n\r\n    /**\r\n     * @notice Externally check permissions using the Enum\r\n     * @param self - Rights struct containing the permissions\r\n     * @param permission - The permission to check\r\n     * @return Boolean true if it has the permission\r\n     */\r\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\r\n        if (Permissions.PAUSE_SWAPPING == permission) {\r\n            return self.canPauseSwapping;\r\n        }\r\n        else if (Permissions.CHANGE_SWAP_FEE == permission) {\r\n            return self.canChangeSwapFee;\r\n        }\r\n        else if (Permissions.CHANGE_WEIGHTS == permission) {\r\n            return self.canChangeWeights;\r\n        }\r\n        else if (Permissions.ADD_REMOVE_TOKENS == permission) {\r\n            return self.canAddRemoveTokens;\r\n        }\r\n        else if (Permissions.WHITELIST_LPS == permission) {\r\n            return self.canWhitelistLPs;\r\n        }\r\n        else if (Permissions.CHANGE_CAP == permission) {\r\n            return self.canChangeCap;\r\n        }\r\n    }\r\n\r\n    /* solhint-enable code-complexity */\r\n}","ABI":"[{\"inputs\":[],\"name\":\"DEFAULT_CAN_ADD_REMOVE_TOKENS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_CHANGE_CAP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_CHANGE_SWAP_FEE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_CHANGE_WEIGHTS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_PAUSE_SWAPPING\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_WHITELIST_LPS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"a\",\"type\":\"bool[]\"}],\"name\":\"constructRights\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"}],\"name\":\"convertRights\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"self\",\"type\":\"tuple\"},{\"internalType\":\"enum RightsManager.Permissions\",\"name\":\"permission\",\"type\":\"RightsManager.Permissions\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"RightsManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c0febe12c4659b1e7788ee8d55a5d9c0abc68b79000992feae37f4f8ca131a50"}]}