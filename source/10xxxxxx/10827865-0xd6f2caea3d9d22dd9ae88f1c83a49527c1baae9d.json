{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Gather_coin.sol\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n /**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event Mintai(address indexed owner, address indexed msgSender, uint256 msgSenderBalance, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  mapping(address=>uint256) mintPermissions;\r\n\r\n  uint256 public maxMintLimit;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(checkMintPermission(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function checkMintPermission(address _minter) private view returns (bool) {\r\n    if (_minter == owner) {\r\n      return true;\r\n    }\r\n\r\n    return mintPermissions[_minter] > 0;\r\n\r\n  }\r\n\r\n  function setMinter(address _minter, uint256 _amount) public onlyOwner {\r\n    require(_minter != owner);\r\n    mintPermissions[_minter] = _amount;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens. Delegates minting to internal function\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    return mintInternal(_to, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mintInternal(address _to, uint256 _amount) internal returns (bool) {\r\n    if (msg.sender != owner) {\r\n      mintPermissions[msg.sender] = mintPermissions[msg.sender].sub(_amount);\r\n    }\r\n\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    require(totalSupply_ <= maxMintLimit);\r\n\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function mintAllowed(address _minter) public view returns (uint256) {\r\n    return mintPermissions[_minter];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract GatherToken is MintableToken {\r\n\r\n  string public constant name = \"Gather\";\r\n  string public constant symbol = \"GTH\";\r\n  uint32 public constant decimals = 18;\r\n\r\n  bool public transferPaused = true;\r\n\r\n  constructor() public {\r\n    maxMintLimit = 400000000 * (10 ** uint(decimals));\r\n  }\r\n\r\n  function unpauseTransfer() public onlyOwner {\r\n    transferPaused = false;\r\n  }\r\n\r\n  function pauseTransfer() public onlyOwner {\r\n    transferPaused = true;\r\n  }\r\n\r\n  // The modifier checks, if address can send tokens or not at current contract state.\r\n  modifier tranferable() {\r\n    require(!transferPaused, \"Gath3r: Token transfer is pauses\");\r\n    _;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public tranferable returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public tranferable returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/VestingPool.sol\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n\r\n\r\n\r\ncontract VestingPool is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being vested\r\n  GatherToken public token;\r\n\r\n  // Category name identifiers\r\n  bytes32 public privateCategory = keccak256(\"privateCategory\");\r\n  bytes32 public platformCategory = keccak256(\"platformCategory\");\r\n  bytes32 public seedCategory = keccak256(\"seedCategory\");\r\n  bytes32 public foundationCategory = keccak256(\"foundationCategory\");\r\n  bytes32 public marketingCategory = keccak256(\"marketingCategory\");\r\n  bytes32 public teamCategory = keccak256(\"teamCategory\");\r\n  bytes32 public advisorCategory = keccak256(\"advisorCategory\");\r\n\r\n  bool public isVestingStarted;\r\n  uint256 public vestingStartDate;\r\n\r\n  struct vestingInfo {\r\n    uint256 limit;\r\n    uint256 released;\r\n    uint256[] scheme;\r\n    mapping(address => bool) adminEmergencyFirstApprove;\r\n    mapping(address => bool) adminEmergencySecondApprove;\r\n    bool multiownedEmergencyFirstApprove;\r\n    bool multiownedEmergencySecondApprove;\r\n    uint256 initEmergencyDate;\r\n  }\r\n\r\n  mapping(bytes32 => vestingInfo) public vesting;\r\n\r\n  uint32 private constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n  uint32 private constant SECONDS_PER_MONTH = SECONDS_PER_DAY * 30;\r\n\r\n  address public admin1address;\r\n  address public admin2address;\r\n\r\n  event Withdraw(address _to, uint256 _amount);\r\n\r\n\r\n  constructor(address _token) public {\r\n    require(_token != address(0), \"Gath3r: Token address must be set for vesting\");\r\n\r\n    token = GatherToken(_token);\r\n\r\n    // Setup vesting data for each category\r\n    _initVestingData();\r\n  }\r\n\r\n  modifier isNotStarted() {\r\n    require(!isVestingStarted, \"Gath3r: Vesting is already started\");\r\n    _;\r\n  }\r\n\r\n  modifier isStarted() {\r\n    require(isVestingStarted, \"Gath3r: Vesting is not started yet\");\r\n    _;\r\n  }\r\n\r\n  modifier approvedByAdmins(bytes32 _category) {\r\n    require(vesting[_category].adminEmergencyFirstApprove[admin1address], \"Gath3r: Emergency transfer must be approved by Admin 1\");\r\n    require(vesting[_category].adminEmergencyFirstApprove[admin2address], \"Gath3r: Emergency transfer must be approved by Admin 2\");\r\n    require(vesting[_category].adminEmergencySecondApprove[admin1address], \"Gath3r: Emergency transfer must be approved twice by Admin 1\");\r\n    require(vesting[_category].adminEmergencySecondApprove[admin2address], \"Gath3r: Emergency transfer must be approved twice by Admin 2\");\r\n    _;\r\n  }\r\n\r\n  modifier approvedByMultiowned(bytes32 _category) {\r\n    require(vesting[_category].multiownedEmergencyFirstApprove, \"Gath3r: Emergency transfer must be approved by Multiowned\");\r\n    require(vesting[_category].multiownedEmergencySecondApprove, \"Gath3r: Emergency transfer must be approved twice by Multiowned\");\r\n    _;\r\n  }\r\n\r\n  function startVesting() public onlyOwner isNotStarted {\r\n    vestingStartDate = now;\r\n    isVestingStarted = true;\r\n  }\r\n\r\n  // Two Admins for emergency transfer\r\n  function addAdmin1address(address _admin) public onlyOwner {\r\n    require(_admin != address(0), \"Gath3r: Admin 1 address must be exist for emergency transfer\");\r\n    _resetAllAdminApprovals(_admin);\r\n    admin1address = _admin;\r\n  }\r\n\r\n  function addAdmin2address(address _admin) public onlyOwner {\r\n    require(_admin != address(0), \"Gath3r: Admin 2 address must be exist for emergency transfer\");\r\n    _resetAllAdminApprovals(_admin);\r\n    admin2address = _admin;\r\n  }\r\n\r\n  function multipleWithdraw(address[] _addresses, uint256[] _amounts, bytes32 _category) public onlyOwner isStarted {\r\n    require(_addresses.length == _amounts.length, \"Gath3r: Amount of adddresses must be equal withdrawal amounts length\");\r\n\r\n    uint256 withdrawalAmount;\r\n    uint256 availableAmount = getAvailableAmountFor(_category);\r\n    for(uint i = 0; i < _amounts.length; i++) {\r\n      withdrawalAmount = withdrawalAmount.add(_amounts[i]);\r\n    }\r\n    require(withdrawalAmount <= availableAmount, \"Gath3r: Withdraw amount more than available limit\");\r\n\r\n    for(i = 0; i < _addresses.length; i++) {\r\n      _withdraw(_addresses[i], _amounts[i], _category);\r\n    }\r\n  }\r\n\r\n  function getAvailableAmountFor(bytes32 _category) public view returns (uint256) {\r\n    uint256 currentMonth = now.sub(vestingStartDate).div(SECONDS_PER_MONTH);\r\n    uint256 totalUnlockedAmount;\r\n\r\n    for(uint8 i = 0; i <= currentMonth; i++ ) {\r\n      totalUnlockedAmount = totalUnlockedAmount.add(vesting[_category].scheme[i]);\r\n    }\r\n\r\n    return totalUnlockedAmount.sub(vesting[_category].released);\r\n  }\r\n\r\n  function firstAdminEmergencyApproveFor(bytes32 _category, address _admin) public onlyOwner {\r\n    require(_admin == admin1address || _admin == admin2address, \"Gath3r: Approve for emergency address must be from admin address\");\r\n    require(!vesting[_category].adminEmergencyFirstApprove[_admin]);\r\n\r\n    if (vesting[_category].initEmergencyDate == 0) {\r\n      vesting[_category].initEmergencyDate = now;\r\n    }\r\n    vesting[_category].adminEmergencyFirstApprove[_admin] = true;\r\n  }\r\n\r\n  function secondAdminEmergencyApproveFor(bytes32 _category, address _admin) public onlyOwner {\r\n    require(_admin == admin1address || _admin == admin2address, \"Gath3r: Approve for emergency address must be from admin address\");\r\n    require(vesting[_category].adminEmergencyFirstApprove[_admin]);\r\n    require(now.sub(vesting[_category].initEmergencyDate) > SECONDS_PER_DAY);\r\n\r\n    vesting[_category].adminEmergencySecondApprove[_admin] = true;\r\n  }\r\n\r\n  function firstMultiownedEmergencyApproveFor(bytes32 _category) public onlyOwner {\r\n    require(!vesting[_category].multiownedEmergencyFirstApprove);\r\n\r\n    if (vesting[_category].initEmergencyDate == 0) {\r\n      vesting[_category].initEmergencyDate = now;\r\n    }\r\n    vesting[_category].multiownedEmergencyFirstApprove = true;\r\n  }\r\n\r\n  function secondMultiownedEmergencyApproveFor(bytes32 _category) public onlyOwner {\r\n    require(vesting[_category].multiownedEmergencyFirstApprove, \"Gath3r: Second multiowned approval must be after fisrt multiowned approval\");\r\n    require(now.sub(vesting[_category].initEmergencyDate) > SECONDS_PER_DAY);\r\n\r\n    vesting[_category].multiownedEmergencySecondApprove = true;\r\n  }\r\n\r\n  function emergencyTransferFor(bytes32 _category, address _to) public onlyOwner approvedByAdmins(_category) approvedByMultiowned(_category) {\r\n    require(_to != address(0), \"Gath3r: Address must be transmit for emergency transfer\");\r\n    uint256 limit = vesting[_category].limit;\r\n    uint256 released = vesting[_category].released;\r\n    uint256 availableAmount = limit.sub(released);\r\n    _withdraw(_to, availableAmount, _category);\r\n  }\r\n\r\n  function _withdraw(address _beneficiary, uint256 _amount, bytes32 _category) internal {\r\n    token.transfer(_beneficiary, _amount);\r\n    vesting[_category].released = vesting[_category].released.add(_amount);\r\n\r\n    emit Withdraw(_beneficiary, _amount);\r\n  }\r\n\r\n  function _resetAllAdminApprovals(address _admin) internal {\r\n    vesting[seedCategory].adminEmergencyFirstApprove[_admin] = false;\r\n    vesting[seedCategory].adminEmergencySecondApprove[_admin] = false;\r\n    vesting[foundationCategory].adminEmergencyFirstApprove[_admin] = false;\r\n    vesting[foundationCategory].adminEmergencySecondApprove[_admin] = false;\r\n    vesting[marketingCategory].adminEmergencyFirstApprove[_admin] = false;\r\n    vesting[marketingCategory].adminEmergencySecondApprove[_admin] = false;\r\n    vesting[teamCategory].adminEmergencyFirstApprove[_admin] = false;\r\n    vesting[teamCategory].adminEmergencySecondApprove[_admin] = false;\r\n    vesting[advisorCategory].adminEmergencyFirstApprove[_admin] = false;\r\n    vesting[advisorCategory].adminEmergencySecondApprove[_admin] = false;\r\n  }\r\n\r\n  function _amountWithPrecision(uint256 _amount) internal view returns (uint256) {\r\n    return _amount.mul(10 ** uint(token.decimals()));\r\n  }\r\n\r\n  // Vesting data for public sale category\r\n  function _initVestingData() internal {\r\n    // Vesting data for private sale category\r\n    vesting[privateCategory].limit = _expandToDecimals(20000000);\r\n    vesting[privateCategory].scheme = [\r\n      /* initial amount */\r\n      10500000,\r\n      /* M+1 M+2 */\r\n      10500000, 9000000\r\n    ];\r\n\r\n    // Vesting data for platform category\r\n    vesting[platformCategory].limit = _expandToDecimals(30000000);\r\n    vesting[platformCategory].scheme = [\r\n      /* initial amount */\r\n      30000000\r\n    ];\r\n\r\n    // Vesting data for seed category\r\n    vesting[seedCategory].limit = _expandToDecimals(22522500);\r\n    vesting[seedCategory].scheme = [\r\n      /* initial amount */\r\n      5630625,\r\n      /* M+1 M+2 M+3 M+4 M+5 */\r\n      3378375, 3378375, 3378375, 3378375, 3378375\r\n    ];\r\n\r\n    // Vesting data for foundation category\r\n    vesting[foundationCategory].limit = _expandToDecimals(193477500);\r\n    vesting[foundationCategory].scheme = [\r\n      /* initial amount */\r\n      0,\r\n      /* M+1 M+2 M+3 M+4 M+5 M+6 M+7 M+8 M+9 M+10 M+11 M+12 */\r\n      0, 0, 0, 0, 0, 6000000, 6000000, 6000000, 6000000, 6000000, 6000000, 6000000,\r\n      /* Y+2 */\r\n      4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000,\r\n      /* Y+3 */\r\n      4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000, 4000000,\r\n      /* Y+4 */\r\n      3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000, 3000000,\r\n      /* Y+5 */\r\n      19477500\r\n    ];\r\n\r\n    // Vesting data for marketing category\r\n    vesting[marketingCategory].limit = _expandToDecimals(50000000);\r\n    vesting[marketingCategory].scheme = [\r\n      /* initial amount */\r\n      0,\r\n      /* M+1 M+2 M+3 M+4 M+5 M+6 M+7 M+8 M+9 M+10 M+11 M+12 */\r\n      0, 0, 2000000, 2000000, 2000000, 2000000, 2000000, 2000000, 2000000, 2000000, 2000000, 2000000,\r\n      /* Y+2 */\r\n      1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000, 1500000,\r\n      /* Y+3 */\r\n      1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000\r\n    ];\r\n\r\n    // Vesting data for team category\r\n    vesting[teamCategory].limit = _expandToDecimals(50000000);\r\n    vesting[teamCategory].scheme = [\r\n      /* initial amount */\r\n      0,\r\n      /* M+1 M+2 M+3 M+4 M+5 M+6 M+7 M+8 M+9 M+10 M+11 M+12 */\r\n      0, 0, 0, 0, 0, 7000000, 0, 0, 0, 7000000, 0, 0,\r\n      /* Y+2 */\r\n      0, 7000000, 0, 0, 0, 7000000, 0, 0, 7000000, 0, 0, 0,\r\n      /* Y+3 */\r\n      0, 7500000, 0, 0, 0, 7500000\r\n    ];\r\n\r\n    // Vesting data for advisor category\r\n    vesting[advisorCategory].limit = _expandToDecimals(24000000);\r\n    vesting[advisorCategory].scheme = [\r\n      /* initial amount */\r\n      0,\r\n      /* M+1 M+2 M+3 M+4 M+5 M+6 M+7 M+8 M+9 */\r\n      0, 0, 6000000, 6000000, 4500000, 4500000, 0, 1500000, 1500000\r\n    ];\r\n\r\n    _expandToDecimalsVestingScheme(privateCategory);\r\n    _expandToDecimalsVestingScheme(platformCategory);\r\n    _expandToDecimalsVestingScheme(seedCategory);\r\n    _expandToDecimalsVestingScheme(foundationCategory);\r\n    _expandToDecimalsVestingScheme(marketingCategory);\r\n    _expandToDecimalsVestingScheme(teamCategory);\r\n    _expandToDecimalsVestingScheme(advisorCategory);\r\n  }\r\n\r\n  function _expandToDecimalsVestingScheme(bytes32 _category) internal returns (uint256[]) {\r\n    for(uint i = 0; i < vesting[_category].scheme.length; i++) {\r\n      vesting[_category].scheme[i] = _expandToDecimals(vesting[_category].scheme[i]);\r\n    }\r\n  }\r\n\r\n  function _expandToDecimals(uint256 _amount) internal view returns (uint256) {\r\n    return _amount.mul(10 ** uint(18));\r\n  }\r\n}\r\n\r\n// File: contracts/multiowned.sol\r\n\r\n// Copyright (C) 2017  MixBytes, LLC\r\n\r\n// Licensed under the Apache License, Version 2.0 (the \"License\").\r\n// You may not use this file except in compliance with the License.\r\n\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\r\n\r\n// Code taken from https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol\r\n// Audit, refactoring and improvements by github.com/Eenae\r\n\r\n// @authors:\r\n// Gav Wood <g@ethdev.com>\r\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\r\n// single, or, crucially, each of a number of, designated owners.\r\n// usage:\r\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\r\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\r\n// interior is executed.\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\r\n// TODO acceptOwnership\r\ncontract multiowned {\r\n\r\n  // TYPES\r\n\r\n  // struct for the status of a pending operation.\r\n  struct MultiOwnedOperationPendingState {\r\n    // count of confirmations needed\r\n    uint yetNeeded;\r\n\r\n    // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\r\n    uint ownersDone;\r\n\r\n    // position of this operation key in m_multiOwnedPendingIndex\r\n    uint index;\r\n  }\r\n\r\n  // EVENTS\r\n\r\n  event Confirmation(address owner, bytes32 operation);\r\n  event Revoke(address owner, bytes32 operation);\r\n  event FinalConfirmation(address owner, bytes32 operation);\r\n  event Op(bytes32 operation);\r\n\r\n  // some others are in the case of an owner changing.\r\n  event OwnerChanged(address oldOwner, address newOwner);\r\n  event OwnerAdded(address newOwner);\r\n  event OwnerRemoved(address oldOwner);\r\n\r\n  // the last one is emitted if the required signatures change\r\n  event RequirementChanged(uint newRequirement);\r\n\r\n  // MODIFIERS\r\n\r\n  // simple single-sig function modifier.\r\n  modifier onlyowner {\r\n    require(isOwner(msg.sender));\r\n    _;\r\n  }\r\n  // multi-sig function modifier: the operation must have an intrinsic hash in order\r\n  // that later attempts can be realised as the same underlying operation and\r\n  // thus count as confirmations.\r\n  modifier onlymanyowners(bytes32 _operation) {\r\n    if (confirmAndCheck(_operation)) {\r\n      _;\r\n    }\r\n    // Even if required number of confirmations has't been collected yet,\r\n    // we can't throw here - because changes to the state have to be preserved.\r\n    // But, confirmAndCheck itself will throw in case sender is not an owner.\r\n  }\r\n\r\n  modifier onlyallowners(bytes32 _operation) {\r\n    if (confirmAndCheckForAll(_operation)) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier onlyalmostallowners(bytes32 _operation) {\r\n    if (confirmAndCheckForAlmostAll(_operation)) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier validNumOwners(uint _numOwners) {\r\n    require(_numOwners > 0 && _numOwners <= c_maxOwners);\r\n    _;\r\n  }\r\n\r\n  modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\r\n    require(_required > 0 && _required <= _numOwners);\r\n    _;\r\n  }\r\n\r\n  modifier ownerExists(address _address) {\r\n    require(isOwner(_address));\r\n    _;\r\n  }\r\n\r\n  modifier ownerDoesNotExist(address _address) {\r\n    require(!isOwner(_address));\r\n    _;\r\n  }\r\n\r\n  modifier multiOwnedOperationIsActive(bytes32 _operation) {\r\n    require(isOperationActive(_operation));\r\n    _;\r\n  }\r\n\r\n  // METHODS\r\n\r\n  // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\r\n  // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\r\n  constructor(address[] _owners, uint _required)\r\n      public\r\n      validNumOwners(_owners.length)\r\n      multiOwnedValidRequirement(_required, _owners.length)\r\n  {\r\n    assert(c_maxOwners <= 255);\r\n\r\n    require(_owners.length == 6, \"Gath3r: Number of total multisig owners must be equal to 6\");\r\n    require(_required == 3, \"Gath3r: Number of required multisig owners must be equal to 3\");\r\n\r\n    m_numOwners = _owners.length;\r\n    m_multiOwnedRequired = _required;\r\n\r\n    for (uint i = 0; i < _owners.length; ++i)\r\n    {\r\n      address owner = _owners[i];\r\n      // invalid and duplicate addresses are not allowed\r\n      require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\r\n\r\n      uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\r\n      m_owners[currentOwnerIndex] = owner;\r\n      m_ownerIndex[owner] = currentOwnerIndex;\r\n    }\r\n\r\n    assertOwnersAreConsistent();\r\n  }\r\n\r\n  /// @notice replaces an owner `_from` with another `_to`.\r\n  /// @param _from address of owner to replace\r\n  /// @param _to address of new owner\r\n  // All pending operations will be canceled!\r\n  function changeOwner(address _from, address _to)\r\n      external\r\n      ownerExists(_from)\r\n      ownerDoesNotExist(_to)\r\n      onlyalmostallowners(keccak256(msg.data))\r\n  {\r\n    assertOwnersAreConsistent();\r\n\r\n    clearPending();\r\n    uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\r\n    m_owners[ownerIndex] = _to;\r\n    m_ownerIndex[_from] = 0;\r\n    m_ownerIndex[_to] = ownerIndex;\r\n\r\n    assertOwnersAreConsistent();\r\n    emit OwnerChanged(_from, _to);\r\n  }\r\n\r\n  /// @notice adds an owner\r\n  /// @param _owner address of new owner\r\n  // All pending operations will be canceled!\r\n  function addOwner(address _owner)\r\n      external\r\n      ownerDoesNotExist(_owner)\r\n      validNumOwners(m_numOwners + 1)\r\n      onlyalmostallowners(keccak256(msg.data))\r\n  {\r\n    assertOwnersAreConsistent();\r\n\r\n    clearPending();\r\n    m_numOwners++;\r\n    m_owners[m_numOwners] = _owner;\r\n    m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\r\n\r\n    assertOwnersAreConsistent();\r\n    OwnerAdded(_owner);\r\n  }\r\n\r\n  /// @notice removes an owner\r\n  /// @param _owner address of owner to remove\r\n  // All pending operations will be canceled!\r\n  function removeOwner(address _owner)\r\n    external\r\n    ownerExists(_owner)\r\n    validNumOwners(m_numOwners - 1)\r\n    multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\r\n    onlyalmostallowners(keccak256(msg.data))\r\n  {\r\n    assertOwnersAreConsistent();\r\n\r\n    clearPending();\r\n    uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\r\n    m_owners[ownerIndex] = 0;\r\n    m_ownerIndex[_owner] = 0;\r\n    //make sure m_numOwners is equal to the number of owners and always points to the last owner\r\n    reorganizeOwners();\r\n\r\n    assertOwnersAreConsistent();\r\n    OwnerRemoved(_owner);\r\n  }\r\n\r\n  /// @notice changes the required number of owner signatures\r\n  /// @param _newRequired new number of signatures required\r\n  // All pending operations will be canceled!\r\n  function changeRequirement(uint _newRequired)\r\n    external\r\n    multiOwnedValidRequirement(_newRequired, m_numOwners)\r\n    onlymanyowners(keccak256(msg.data))\r\n  {\r\n    m_multiOwnedRequired = _newRequired;\r\n    clearPending();\r\n    RequirementChanged(_newRequired);\r\n  }\r\n\r\n  /// @notice Gets an owner by 0-indexed position\r\n  /// @param ownerIndex 0-indexed owner position\r\n  function getOwner(uint ownerIndex) public view returns (address) {\r\n    return m_owners[ownerIndex + 1];\r\n  }\r\n\r\n  /// @notice Gets owners\r\n  /// @return memory array of owners\r\n  function getOwners() public view returns (address[]) {\r\n    address[] memory result = new address[](m_numOwners);\r\n    for (uint i = 0; i < m_numOwners; i++)\r\n      result[i] = getOwner(i);\r\n\r\n    return result;\r\n  }\r\n\r\n  /// @notice checks if provided address is an owner address\r\n  /// @param _addr address to check\r\n  /// @return true if it's an owner\r\n  function isOwner(address _addr) public view returns (bool) {\r\n    return m_ownerIndex[_addr] > 0;\r\n  }\r\n\r\n  /// @notice Tests ownership of the current caller.\r\n  /// @return true if it's an owner\r\n  // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n  // addOwner/changeOwner and to isOwner.\r\n  function amIOwner() external view onlyowner returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @notice Revokes a prior confirmation of the given operation\r\n  /// @param _operation operation value, typically keccak256(msg.data)\r\n  function revoke(bytes32 _operation)\r\n    external\r\n    multiOwnedOperationIsActive(_operation)\r\n    onlyowner\r\n  {\r\n    uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n    require(pending.ownersDone & ownerIndexBit > 0);\r\n\r\n    assertOperationIsConsistent(_operation);\r\n\r\n    pending.yetNeeded++;\r\n    pending.ownersDone -= ownerIndexBit;\r\n\r\n    assertOperationIsConsistent(_operation);\r\n    Revoke(msg.sender, _operation);\r\n  }\r\n\r\n  /// @notice Checks if owner confirmed given operation\r\n  /// @param _operation operation value, typically keccak256(msg.data)\r\n  /// @param _owner an owner address\r\n  function hasConfirmed(bytes32 _operation, address _owner)\r\n    external\r\n    view\r\n    multiOwnedOperationIsActive(_operation)\r\n    ownerExists(_owner)\r\n    returns (bool)\r\n  {\r\n    return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\r\n  }\r\n\r\n  // INTERNAL METHODS\r\n\r\n  function confirmAndCheck(bytes32 _operation)\r\n    private\r\n    onlyowner\r\n    returns (bool)\r\n  {\r\n    if (512 == m_multiOwnedPendingIndex.length)\r\n      // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n      // we won't be able to do it because of block gas limit.\r\n      // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n      // TODO use more graceful approach like compact or removal of clearPending completely\r\n      clearPending();\r\n\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n\r\n    // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n    if (! isOperationActive(_operation)) {\r\n      // reset count of confirmations needed.\r\n      pending.yetNeeded = m_multiOwnedRequired;\r\n      // reset which owners have confirmed (none) - set our bitmap to 0.\r\n      pending.ownersDone = 0;\r\n      pending.index = m_multiOwnedPendingIndex.length++;\r\n      m_multiOwnedPendingIndex[pending.index] = _operation;\r\n      assertOperationIsConsistent(_operation);\r\n    }\r\n\r\n    // determine the bit to set for this owner.\r\n    uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n    // make sure we (the message sender) haven't confirmed this operation previously.\r\n    if (pending.ownersDone & ownerIndexBit == 0) {\r\n      // ok - check if count is enough to go ahead.\r\n      assert(pending.yetNeeded > 0);\r\n      if (pending.yetNeeded == 1) {\r\n        // enough confirmations: reset and run interior.\r\n        delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n        delete m_multiOwnedPending[_operation];\r\n        FinalConfirmation(msg.sender, _operation);\r\n        return true;\r\n      }\r\n      else\r\n      {\r\n        // not enough: record that this owner in particular confirmed.\r\n        pending.yetNeeded--;\r\n        pending.ownersDone |= ownerIndexBit;\r\n        assertOperationIsConsistent(_operation);\r\n        Confirmation(msg.sender, _operation);\r\n      }\r\n    }\r\n  }\r\n\r\n  function confirmAndCheckForAll(bytes32 _operation)\r\n    private\r\n    onlyowner\r\n    returns (bool)\r\n  {\r\n    if (512 == m_multiOwnedPendingIndex.length)\r\n      // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n      // we won't be able to do it because of block gas limit.\r\n      // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n      // TODO use more graceful approach like compact or removal of clearPending completely\r\n      clearPending();\r\n\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n\r\n    // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n    if (! isOperationActive(_operation)) {\r\n      // reset count of confirmations needed.\r\n      pending.yetNeeded = m_numOwners;\r\n      // reset which owners have confirmed (none) - set our bitmap to 0.\r\n      pending.ownersDone = 0;\r\n      pending.index = m_multiOwnedPendingIndex.length++;\r\n      m_multiOwnedPendingIndex[pending.index] = _operation;\r\n      assertOperationIsConsistentForAll(_operation);\r\n    }\r\n\r\n    // determine the bit to set for this owner.\r\n    uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n    // make sure we (the message sender) haven't confirmed this operation previously.\r\n    if (pending.ownersDone & ownerIndexBit == 0) {\r\n      // ok - check if count is enough to go ahead.\r\n      assert(pending.yetNeeded > 0);\r\n      if (pending.yetNeeded == 1) {\r\n        // enough confirmations: reset and run interior.\r\n        delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n        delete m_multiOwnedPending[_operation];\r\n        FinalConfirmation(msg.sender, _operation);\r\n        return true;\r\n      }\r\n      else\r\n      {\r\n        // not enough: record that this owner in particular confirmed.\r\n        pending.yetNeeded--;\r\n        pending.ownersDone |= ownerIndexBit;\r\n        assertOperationIsConsistentForAll(_operation);\r\n        Confirmation(msg.sender, _operation);\r\n      }\r\n    }\r\n  }\r\n\r\n  function confirmAndCheckForAlmostAll(bytes32 _operation)\r\n    private\r\n    onlyowner\r\n    returns (bool)\r\n  {\r\n    if (512 == m_multiOwnedPendingIndex.length)\r\n      // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n      // we won't be able to do it because of block gas limit.\r\n      // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n      // TODO use more graceful approach like compact or removal of clearPending completely\r\n      clearPending();\r\n\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n\r\n    // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n    if (! isOperationActive(_operation)) {\r\n      // reset count of confirmations needed.\r\n      pending.yetNeeded = m_numOwners - 1;\r\n      // reset which owners have confirmed (none) - set our bitmap to 0.\r\n      pending.ownersDone = 0;\r\n      pending.index = m_multiOwnedPendingIndex.length++;\r\n      m_multiOwnedPendingIndex[pending.index] = _operation;\r\n      assertOperationIsConsistentForAlmostAll(_operation);\r\n    }\r\n\r\n    // determine the bit to set for this owner.\r\n    uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n    // make sure we (the message sender) haven't confirmed this operation previously.\r\n    if (pending.ownersDone & ownerIndexBit == 0) {\r\n      // ok - check if count is enough to go ahead.\r\n      assert(pending.yetNeeded > 0);\r\n      if (pending.yetNeeded == 1) {\r\n        // enough confirmations: reset and run interior.\r\n        delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n        delete m_multiOwnedPending[_operation];\r\n        FinalConfirmation(msg.sender, _operation);\r\n        return true;\r\n      }\r\n      else\r\n      {\r\n        // not enough: record that this owner in particular confirmed.\r\n        pending.yetNeeded--;\r\n        pending.ownersDone |= ownerIndexBit;\r\n        assertOperationIsConsistentForAlmostAll(_operation);\r\n        Confirmation(msg.sender, _operation);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Reclaims free slots between valid owners in m_owners.\r\n  // TODO given that its called after each removal, it could be simplified.\r\n  function reorganizeOwners() private {\r\n    uint free = 1;\r\n    while (free < m_numOwners)\r\n    {\r\n      // iterating to the first free slot from the beginning\r\n      while (free < m_numOwners && m_owners[free] != 0) free++;\r\n\r\n      // iterating to the first occupied slot from the end\r\n      while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\r\n\r\n      // swap, if possible, so free slot is located at the end after the swap\r\n      if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\r\n      {\r\n        // owners between swapped slots should't be renumbered - that saves a lot of gas\r\n        m_owners[free] = m_owners[m_numOwners];\r\n        m_ownerIndex[m_owners[free]] = free;\r\n        m_owners[m_numOwners] = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  function clearPending() private onlyowner {\r\n    uint length = m_multiOwnedPendingIndex.length;\r\n    // TODO block gas limit\r\n    for (uint i = 0; i < length; ++i) {\r\n      if (m_multiOwnedPendingIndex[i] != 0)\r\n        delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\r\n    }\r\n    delete m_multiOwnedPendingIndex;\r\n  }\r\n\r\n  function checkOwnerIndex(uint ownerIndex) private pure returns (uint) {\r\n    assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\r\n    return ownerIndex;\r\n  }\r\n\r\n  function makeOwnerBitmapBit(address owner) private view returns (uint) {\r\n    uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\r\n    return 2 ** ownerIndex;\r\n  }\r\n\r\n  function isOperationActive(bytes32 _operation) private view returns (bool) {\r\n    return 0 != m_multiOwnedPending[_operation].yetNeeded;\r\n  }\r\n\r\n\r\n  function assertOwnersAreConsistent() private view {\r\n    assert(m_numOwners > 0);\r\n    assert(m_numOwners <= c_maxOwners);\r\n    assert(m_owners[0] == 0);\r\n    assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\r\n  }\r\n\r\n  function assertOperationIsConsistent(bytes32 _operation) private view {\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n    assert(0 != pending.yetNeeded);\r\n    assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n    assert(pending.yetNeeded <= m_multiOwnedRequired);\r\n  }\r\n\r\n  function assertOperationIsConsistentForAll(bytes32 _operation) private view {\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n    assert(0 != pending.yetNeeded);\r\n    assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n    assert(pending.yetNeeded <= m_numOwners);\r\n  }\r\n\r\n  function assertOperationIsConsistentForAlmostAll(bytes32 _operation) private view {\r\n    MultiOwnedOperationPendingState pending = m_multiOwnedPending[_operation];\r\n    assert(0 != pending.yetNeeded);\r\n    assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n    assert(pending.yetNeeded <= m_numOwners - 1);\r\n  }\r\n\r\n\r\n  // FIELDS\r\n\r\n  uint constant c_maxOwners = 250;\r\n\r\n  // the number of owners that must confirm the same operation before it is run.\r\n  uint256 public m_multiOwnedRequired;\r\n\r\n\r\n  // pointer used to find a free slot in m_owners\r\n  uint public m_numOwners;\r\n\r\n  // list of owners (addresses),\r\n  // slot 0 is unused so there are no owner which index is 0.\r\n  // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\r\n  address[256] internal m_owners;\r\n\r\n  // index on the list of owners to allow reverse lookup: owner address => index in m_owners\r\n  mapping(address => uint) internal m_ownerIndex;\r\n\r\n\r\n  // the ongoing operations.\r\n  mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\r\n  bytes32[] internal m_multiOwnedPendingIndex;\r\n}\r\n\r\n// File: contracts/VestingPoolController.sol\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VestingPoolController is multiowned {\r\n\r\n  VestingPool public vestingPool;\r\n\r\n  // Category name identifiers\r\n  bytes32 public privateCategory = keccak256(\"privateCategory\");\r\n  bytes32 public platformCategory = keccak256(\"platformCategory\");\r\n  bytes32 public seedCategory = keccak256(\"seedCategory\");\r\n  bytes32 public foundationCategory = keccak256(\"foundationCategory\");\r\n  bytes32 public marketingCategory = keccak256(\"marketingCategory\");\r\n  bytes32 public teamCategory = keccak256(\"teamCategory\");\r\n  bytes32 public advisorCategory = keccak256(\"advisorCategory\");\r\n\r\n\r\n  constructor(address[] _owners, uint _required, address _vestingPoolAddress) multiowned(_owners, _required) public {\r\n    vestingPool = VestingPool(_vestingPoolAddress);\r\n  }\r\n\r\n  function startVesting() public onlymanyowners(keccak256(msg.data)) {\r\n    vestingPool.startVesting();\r\n  }\r\n\r\n  // Withdraw\r\n  function privateWithdraw(address[] _beneficiaries, uint256[] _amounts) public onlymanyowners(keccak256(msg.data)) {\r\n    vestingPool.multipleWithdraw(_beneficiaries, _amounts, privateCategory);\r\n  }\r\n\r\n  function platformWithdraw(address[] _beneficiaries, uint256[] _amounts) public onlymanyowners(keccak256(msg.data)) {\r\n    vestingPool.multipleWithdraw(_beneficiaries, _amounts, platformCategory);\r\n  }\r\n\r\n  function seedWithdraw(address[] _beneficiaries, uint256[] _amounts) public onlymanyowners(keccak256(msg.data)) {\r\n    vestingPool.multipleWithdraw(_beneficiaries, _amounts, seedCategory);\r\n  }\r\n\r\n  function foundationWithdraw(address[] _beneficiaries, uint256[] _amounts) public onlymanyowners(keccak256(msg.data)) {\r\n    vestingPool.multipleWithdraw(_beneficiaries, _amounts, foundationCategory);\r\n  }\r\n\r\n  function marketingWithdraw(address[] _beneficiaries, uint256[] _amounts) public onlymanyowners(keccak256(msg.data)) {\r\n    vestingPool.multipleWithdraw(_beneficiaries, _amounts, marketingCategory);\r\n  }\r\n\r\n  function teamWithdraw(address[] _beneficiaries, uint256[] _amounts) public onlymanyowners(keccak256(msg.data)) {\r\n    vestingPool.multipleWithdraw(_beneficiaries, _amounts, teamCategory);\r\n  }\r\n\r\n  function advisorWithdraw(address[] _beneficiaries, uint256[] _amounts) public onlymanyowners(keccak256(msg.data)) {\r\n    vestingPool.multipleWithdraw(_beneficiaries, _amounts, advisorCategory);\r\n  }\r\n\r\n  // Get available amount\r\n  function getAvailableAmountForPrivate() public view returns (uint256) {\r\n    return vestingPool.getAvailableAmountFor(privateCategory);\r\n  }\r\n  function getAvailableAmountForPlatform() public view returns (uint256) {\r\n    return vestingPool.getAvailableAmountFor(platformCategory);\r\n  }\r\n\r\n  function getAvailableAmountForSeed() public view returns (uint256) {\r\n    return vestingPool.getAvailableAmountFor(seedCategory);\r\n  }\r\n\r\n  function getAvailableAmountForFoundation() public view returns (uint256) {\r\n    return vestingPool.getAvailableAmountFor(foundationCategory);\r\n  }\r\n\r\n  function getAvailableAmountForMarketing() public view returns (uint256) {\r\n    return vestingPool.getAvailableAmountFor(marketingCategory);\r\n  }\r\n\r\n  function getAvailableAmountForTeam() public view returns (uint256) {\r\n    return vestingPool.getAvailableAmountFor(teamCategory);\r\n  }\r\n\r\n  function getAvailableAmountForAdvisor() public view returns (uint256) {\r\n    return vestingPool.getAvailableAmountFor(advisorCategory);\r\n  }\r\n\r\n  // Add Admin 1\r\n  function addAdmin1(address _admin) public onlyowner {\r\n    vestingPool.addAdmin1address(_admin);\r\n  }\r\n  // Add Admin 2\r\n  function addAdmin2(address _admin) public onlyowner {\r\n    vestingPool.addAdmin2address(_admin);\r\n  }\r\n\r\n  // Approve for emergency transfer from admin for each category\r\n  function firstAdminEmergencyApproveFor(bytes32 _category) public {\r\n    vestingPool.firstAdminEmergencyApproveFor(_category, msg.sender);\r\n  }\r\n\r\n  function secondAdminEmergencyApproveFor(bytes32 _category) public {\r\n    vestingPool.secondAdminEmergencyApproveFor(_category, msg.sender);\r\n  }\r\n\r\n  // Approve from multiowned for each category\r\n  function firstMultiownedEmergencyApproveFor(bytes32 _category) public onlyallowners(keccak256(msg.data)) {\r\n    vestingPool.firstMultiownedEmergencyApproveFor(_category);\r\n  }\r\n\r\n  function secondMultiownedEmergencyApproveFor(bytes32 _category) public onlyallowners(keccak256(msg.data)) {\r\n    vestingPool.secondMultiownedEmergencyApproveFor(_category);\r\n  }\r\n\r\n  // Emergency transfer for each category\r\n  function emergencyTransferFor(bytes32 _category, address _wallet) public onlyowner {\r\n    vestingPool.emergencyTransferFor(_category, _wallet);\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyalmostallowners(keccak256(msg.data)) {\r\n    vestingPool.transferOwnership(_newOwner);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"emergencyTransferFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"platformWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableAmountForSeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"advisorWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"}],\"name\":\"firstAdminEmergencyApproveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableAmountForFoundation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableAmountForPrivate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_numOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amIOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"privateWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"teamWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"foundationWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_multiOwnedRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableAmountForAdvisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"}],\"name\":\"firstMultiownedEmergencyApproveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableAmountForMarketing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"marketingWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerIndex\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableAmountForPlatform\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"}],\"name\":\"secondMultiownedEmergencyApproveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"bytes32\"}],\"name\":\"secondAdminEmergencyApproveFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableAmountForTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"seedWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"},{\"name\":\"_vestingPoolAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"FinalConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Op\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"}]","ContractName":"VestingPoolController","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000044374e40e77b85cc6373995d05a37dffec9a1640000000000000000000000000000000000000000000000000000000000000006000000000000000000000000fa9d5f6d0a4823a87f37f9a3216d80e34cbb75ab00000000000000000000000050ec98ffd7fc601240679462b5a9cd490879587a0000000000000000000000004f959d80040bc1c5a799521eebc450b3b3b95ed4000000000000000000000000fd5b2eaeb9792c21674c723b0091336a1db39b6d000000000000000000000000b179210b997b60c4c2a2cd64ba417e95a3e33faa0000000000000000000000001b5c5d240447f7792186404233a13b8623c61cbf","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1d36a0dd40c063f8918f5e06289ade2dd7ac4a75ff75ac46268b66b243b0685f"}]}