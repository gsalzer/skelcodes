{"status":"1","message":"OK","result":[{"SourceCode":"// File @openzeppelin/contracts/GSN/Context.sol@v3.1.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.1.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.1.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n// File contracts/Vesting.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n// Vesting provides the main functionality for the vesting approach taken\r\n// The goal is to enable releasing funds from the timelocks after the exchange listing has happened.\r\n// To keep things simple the contract is Ownable, and the owner (a multisig wallet) is able to indicate that\r\n// the exchange listing has happened. All release dates are defined in days relative to the listing date.\r\n\r\n// All release schedules are set up during minting, HOWEVER, ERC20 balances will be transferred from the initial\r\n// multisig wallets to the Vesting contracts after minting the ERC20.\r\n// Caveat: The release schedules (timelocks) do need a sufficient balance and will otherwise fail. We decided not\r\n// to write any guards for this situation since it's a 1-time only event and it is easy to remedy (send more RAMP).\r\n\r\n// It will be the responsibility of the RAMP team to fund the Vesting contracts as soon as possible, and with\r\n// the amounts necessary.\r\n// It will also be the responsibility of the RAMP team to call the \"setListingTime\" function at the appropriate time.\r\n\r\nabstract contract Vesting is Ownable {\r\n\r\n    // Every timelock has this structure\r\n    struct Timelock {\r\n        address beneficiary;\r\n        uint256 balance;\r\n        uint256 releaseTimeOffset;\r\n    }\r\n\r\n    // The timelocks, publicly queryable\r\n    Timelock[] public timelocks;\r\n\r\n    // The time of exchange listing, as submitted by the Owner. Starts as 0.\r\n    uint256 public listingTime = 0;\r\n\r\n    // The token (RAMP DEFI)\r\n    IERC20 token;\r\n\r\n    // Event fired when tokens are released\r\n    event TimelockRelease(address receiver, uint256 amount, uint256 timelock);\r\n\r\n    // Vesting is initialized with the token contract\r\n    constructor(address tokenContract) public {\r\n        token = IERC20(tokenContract);\r\n    }\r\n\r\n    // Sets up a timelock. Intended to be used during instantiation of an implementing contract\r\n    function setupTimelock(address beneficiary, uint256 amount, uint256 releaseTimeOffset)\r\n    internal\r\n    {\r\n        // Create a variable\r\n        Timelock memory timelock;\r\n\r\n        // Set beneficiary\r\n        timelock.beneficiary = beneficiary;\r\n\r\n        // Set balance\r\n        timelock.balance = amount;\r\n\r\n        // Set the release time offset. This is a uint256 representing seconds after listingTime\r\n        timelock.releaseTimeOffset = releaseTimeOffset;\r\n\r\n        // Add the timelock to the array.\r\n        timelocks.push(timelock);\r\n    }\r\n\r\n    // Lets Owner set the listingTime. Can be done only once.\r\n    function setListingTime()\r\n    public\r\n    onlyOwner\r\n    {\r\n        // We can run this only once since listingTime will be a timestamp after.\r\n        require(listingTime == 0, \"Listingtime was already set\");\r\n\r\n        // Set the listingtime to the current timestamp.\r\n        listingTime = block.timestamp;\r\n    }\r\n\r\n    // Initiates the process to release tokens in a given timelock.\r\n    // Anyone can call this function, but funds will always be released to the beneficiary that was initially set.\r\n    // If the transfer fails for any reason, the transaction will revert.\r\n    // NOTE: It is the RAMP team responsibility to ensure the tokens are indeed owned by this contract.\r\n    function release(uint256 timelockNumber)\r\n    public\r\n    {\r\n        // Check if listingTime is set, otherwise it is not possible to release funds yet.\r\n        require(listingTime > 0, \"Listing time was not set yet\");\r\n\r\n        // Retrieve the requested timelock struct\r\n        Timelock storage timelock = timelocks[timelockNumber];\r\n\r\n        // Check if the timelock is ready for release.\r\n        require(listingTime + timelock.releaseTimeOffset <= now, \"Timelock can not be released yet.\");\r\n\r\n        // Get the amount to transfer\r\n        uint256 amount = timelock.balance;\r\n\r\n        // Set the timelock balance to 0\r\n        timelock.balance = 0;\r\n\r\n        // Transfer the token amount to the beneficiary. If this fails, the transaction will revert.\r\n        require(token.transfer(timelock.beneficiary, amount), \"Transfer of amount failed\");\r\n\r\n        // Emit an event for this.\r\n        emit TimelockRelease(timelock.beneficiary, amount, timelockNumber);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/VestingPrivateSale.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract VestingPrivateSale is Vesting {\r\n\r\n    constructor(address tokenContract, address beneficiary) Vesting(tokenContract) public {\r\n\r\n        // 1 = Private1-5\r\n        setupTimelock(beneficiary, 36000000e18, 0 days);\r\n\r\n        // 2 = Private2-5\r\n        setupTimelock(beneficiary, 36000000e18, 91 days);\r\n\r\n        // 3 = Private3-5\r\n        setupTimelock(beneficiary, 36000000e18, 182 days);\r\n\r\n        // 4 = Private4-5\r\n        setupTimelock(beneficiary, 36000000e18, 273 days);\r\n\r\n        // 5 = Private5-5\r\n        setupTimelock(beneficiary, 36000000e18, 365 days);\r\n\r\n        // Make the beneficiary (Team multisig) owner of this contract\r\n        transferOwnership(beneficiary);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"name\":\"TimelockRelease\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"listingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timelockNumber\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setListingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timelocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTimeOffset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VestingPrivateSale","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000033d0568941c0c64ff7e0fb4fba0b11bd37deed9f000000000000000000000000906a96fb54fdf91c04097253410d35ec2dec283f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7f418221ff3057678488f1f432f296f913c157d83cc00f5c30929c886fbd99ea"}]}