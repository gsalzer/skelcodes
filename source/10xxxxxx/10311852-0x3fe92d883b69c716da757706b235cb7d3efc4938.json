{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity 0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IDepositContractRegistry {\r\n  function operatorOf(address owner, address operator) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title DepositContract\r\n *\r\n * Allows owner, parent (DepositContractRegistry) and the \r\n * current set version (presumably of Dolomite Direct) to\r\n * call contract functions and transfer Ether from the context\r\n * of this address (pass-though functions).\r\n *\r\n * Using CREATE-2 this address can be sent tokens/Ether before it\r\n * is created.\r\n */\r\ncontract DepositContract {\r\n  address public owner;\r\n  address public parent;\r\n  address public version;\r\n\r\n  constructor(address _owner) public {\r\n    parent = msg.sender;\r\n    owner = _owner;\r\n  }\r\n\r\n  /*\r\n   * Contract can receive Ether\r\n   */\r\n  function() external payable { }\r\n\r\n  /*\r\n   * Set the version that has access to this contracts \r\n   * `transfer` and `perform` functions. Can only be set by\r\n   * the parent (DepositContractRegistry)\r\n   */\r\n  function setVersion(address newVersion) external {\r\n    require(msg.sender == parent);\r\n    version = newVersion;\r\n  }\r\n\r\n  /*\r\n   * Will call a smart contract function from the context of this contract;\r\n   * msg.sender on the receiving end will equal this contract's address.\r\n   *\r\n   * Only the owner, parent (DepositContractRegistry) and version are allowed to call\r\n   * this function. When upgrading versions, make sure the code of the version being\r\n   * upgraded to does not abuse this function.\r\n   *\r\n   * Because the msg.sender of the receiving end will equal this contract's address,\r\n   * this function allows the caller to perform actions such as setting token approvals\r\n   * and wrapping Ether (to WETH).\r\n   *\r\n   * If the signature is an empty string (\"\" where bytes(signature).length == 0) this method\r\n   * will instead execute the transfer function, passing along the specified value\r\n   */\r\n  function perform(\r\n    address addr, \r\n    string calldata signature, \r\n    bytes calldata encodedParams,\r\n    uint value\r\n  ) \r\n    external \r\n    returns (bytes memory) \r\n  {\r\n    require(\r\n      msg.sender == owner || \r\n      msg.sender == parent || \r\n      msg.sender == version ||\r\n      IDepositContractRegistry(parent).operatorOf(address(this), msg.sender)\r\n    , \"NOT_PERMISSIBLE\");\r\n\r\n    if (bytes(signature).length == 0) {\r\n      address(uint160(addr)).transfer(value); // convert address to address payable\r\n    } else {\r\n      bytes4 functionSelector = bytes4(keccak256(bytes(signature)));\r\n      bytes memory payload = abi.encodePacked(functionSelector, encodedParams);\r\n      \r\n      (bool success, bytes memory returnData) = addr.call.value(value)(payload);\r\n      require(success, \"OPERATION_REVERTED\");\r\n\r\n      return returnData;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newVersion\",\"type\":\"address\"}],\"name\":\"setVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"string\"},{\"name\":\"encodedParams\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"perform\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DepositContract","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"00000000000000000000000058c0bfa9e51f350154f265bd00489026254260fa","EVMVersion":"petersburg","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://482f9b0e9aa587d12eb78f3acc276833c54b24bf190087c42ad64951bcded710"}]}