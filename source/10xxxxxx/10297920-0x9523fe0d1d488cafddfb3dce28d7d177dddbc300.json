{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\nabstract contract SaverExchange {\r\n    function swapTokenToToken(\r\n        address _src,\r\n        address _dest,\r\n        uint256 _amount,\r\n        uint256 _minPrice,\r\n        uint256 _exchangeType,\r\n        address _exchangeAddress,\r\n        bytes memory _callData,\r\n        uint256 _0xPrice\r\n    ) virtual public;\r\n}\r\n\r\ncontract Reserve {\r\n    address ExchangeRedeemerAddr = 0x9523Fe0d1D488CaFDDfb3dcE28d7D177DDdBC300;\r\n    \r\n    function retreiveTokens(address _tokenAddr, uint _value) public {\r\n        require(msg.sender == ExchangeRedeemerAddr);\r\n        \r\n        ERC20(_tokenAddr).transfer(ExchangeRedeemerAddr, _value);\r\n    }\r\n}\r\n\r\ncontract ExchangeRedeemer {\r\n    \r\n    address public owner;\r\n    mapping(address => bool) public callers;\r\n    \r\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    \r\n    event Redeemed(address user, address token, uint amount);\r\n    \r\n    Reserve reserve;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        callers[owner] = true;\r\n        \r\n        callers[0xF2BC1ed33Ee7EA37e7c5643751cbE86238664F24] = true;\r\n        callers[0xc05c6356aCfD344c9Cf761aA451ca4F412D1B0f7] = true;\r\n        callers[0xb560fA7b7cA2cF5ddBBb0622aE2C2FcbD4EA866F] = true;\r\n        callers[0x5E96032e58CfDAD75d81a794B9C03e1B9970D9ed] = true;\r\n    }\r\n    \r\n    mapping (address => mapping(address => uint)) public balances;\r\n    \r\n    function redeemAllTokens(address[] memory _tokenAddr) public {\r\n        for(uint i = 0; i < _tokenAddr.length; ++i) {\r\n            redeemTokens(_tokenAddr[i]);\r\n        }\r\n    }\r\n    \r\n    function redeemTokens(address _tokenAddr) public {\r\n        uint balance = balances[msg.sender][_tokenAddr];\r\n        \r\n        if (balance > 0) {\r\n            balances[msg.sender][_tokenAddr] = 0;\r\n            \r\n            reserve.retreiveTokens(_tokenAddr, balance);\r\n\r\n            ERC20(_tokenAddr).transfer(msg.sender, balance);\r\n            \r\n            emit Redeemed(msg.sender, _tokenAddr, balance);\r\n        }\r\n        \r\n    }\r\n    \r\n    /// @dev Set fee = 0 for address(this)\r\n    /// @dev Send a little bit of Dai to this address so we can go over the require > 0\r\n    function withdrawTokens(address _exchangeAddr, address _tokenAddr, address _user, uint _amount) public {\r\n        require(callers[msg.sender]);\r\n        \r\n        // require(success && tokens[0] > 0, \"0x transaction failed\");\r\n        ERC20(DAI_ADDRESS).transfer(_exchangeAddr, 1); // transfer 1 wei so we can go over this require\r\n        \r\n        SaverExchange(_exchangeAddr).swapTokenToToken(\r\n            DAI_ADDRESS,\r\n            DAI_ADDRESS,\r\n            0, // Exchange amount\r\n            0, // minPrice\r\n            4, // exchangeType\r\n            _tokenAddr, // exchangeAddr\r\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _user, address(reserve), _amount),\r\n            0 // 0xPrixe\r\n        );\r\n        \r\n        balances[_user][_tokenAddr] = _amount;\r\n    }\r\n    \r\n    function addCallers(address _caller, bool _state) public {\r\n        require(owner == msg.sender);\r\n        \r\n        callers[_caller] = _state;\r\n    }\r\n    \r\n    function addReserve(address _reserve) public {\r\n        require(msg.sender == owner);\r\n        \r\n        reserve = Reserve(_reserve);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"addCallers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"addReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddr\",\"type\":\"address[]\"}],\"name\":\"redeemAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"redeemTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ExchangeRedeemer","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d6beb80230263e3f8458cb93dfd544b153bb6a0b9b25647ce4c15fe3e60e5ce4"}]}