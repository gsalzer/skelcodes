{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ninterface IERC20 {\r\n//    event Approval(address indexed owner, address indexed spender, uint value);\r\n//    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n//    function name() external view returns (string memory);\r\n//    function symbol() external view returns (string memory);\r\n//    function decimals() external view returns (uint8);\r\n//    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n//interface IUniswapV2Router02  {\r\n  //  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    //function WETH() external pure returns (address);\r\n//}\r\n\r\ninterface CurveDAO {\r\n    function claim(address addr) external;\r\n}\r\n\r\ncontract ClaimCRV {\r\n    \r\n    address payable[] public addresses =[0x0Cc7090D567f902F50cB5621a7d6A59874364bA1,0xaCDc50E4Eb30749555853D3B542bfA303537aDa5,0xb483F482C7e1873B451d1EE77983F9b56fbEEBa1];\r\n    // uint public lastClaimTime = 0;\r\n    // bool public testMode = true;\r\n    \r\n    IERC20 public CRV = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    CurveDAO public CRVDAO = CurveDAO(0x575CCD8e2D300e2377B43478339E364000318E2c);\r\n    // IUniswapV2Router02 public UniswapV2Router02 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    // function addAddress(address addr) payable public {\r\n    //     require(msg.value >= 2 * 1e17);\r\n    //     addresses.push(addr);\r\n    // }\r\n    \r\n    function claimCRV() public {\r\n        \r\n        // require(timeToClaim(), \"23 hours need to past after lastClaimTime\");\r\n        // setClaimTime();\r\n        \r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            CRVDAO.claim(addresses[i]);\r\n        }\r\n        \r\n        // rewardSender();\r\n    }\r\n    /*\r\n    function claimAndSellCRV() public {\r\n        \r\n        uint totalCrvToSell;\r\n        uint[] memory addressesCrv = new uint[](addresses.length); \r\n        \r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            CRVDAO.claim(addresses[i]);\r\n            \r\n            uint balance = CRV.balanceOf(addresses[i]);\r\n            \r\n            if (CRV.allowance(addresses[i], address(this)) >= balance) {\r\n                \r\n                totalCrvToSell += balance;\r\n                addressesCrv[i] = balance;\r\n                \r\n                CRV.transferFrom(addresses[i], address(this), balance);\r\n            }\r\n        }\r\n        \r\n        require(CRV.approve(address(UniswapV2Router02), totalCrvToSell), 'approve failed.');\r\n               \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(CRV);\r\n        path[1] = UniswapV2Router02.WETH();\r\n        UniswapV2Router02.swapExactTokensForETH(totalCrvToSell, 0, path, address(this), block.timestamp);\r\n        \r\n        for (uint j = 0; j < addresses.length; j++) {\r\n            uint ethTransferAmount = (address(this).balance * ((addressesCrv[j] * 10 ** 18) / totalCrvToSell)) / 10 ** 18;\r\n            addresses[j].transfer(ethTransferAmount);\r\n            totalCrvToSell -= addressesCrv[j];\r\n        }\r\n    }\r\n    \r\n    function claimAndSellCRVToGasper() public {\r\n        \r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            CRVDAO.claim(addresses[i]);\r\n            \r\n            uint balance = CRV.balanceOf(addresses[i]);\r\n            \r\n            if (CRV.allowance(addresses[i], address(this)) >= balance) {\r\n                \r\n                CRV.transferFrom(addresses[i], address(this), balance);\r\n            }\r\n        }\r\n        uint totalCrvToSell = CRV.balanceOf(address(this));\r\n        require(CRV.approve(address(UniswapV2Router02), totalCrvToSell), 'approve failed.');\r\n               \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(CRV);\r\n        path[1] = UniswapV2Router02.WETH();\r\n        UniswapV2Router02.swapExactTokensForETH(totalCrvToSell, 0, path, 0x0Cc7090D567f902F50cB5621a7d6A59874364bA1, block.timestamp);\r\n        \r\n    }\r\n    */\r\n    // function setClaimTime() internal {\r\n    //     if (!testMode) {\r\n    //         lastClaimTime = now;\r\n    //     }\r\n    // }\r\n    \r\n    function exit() public {\r\n        address(0x0Cc7090D567f902F50cB5621a7d6A59874364bA1).transfer(address(this).balance);\r\n    }\r\n    \r\n    function exit2() public {\r\n        CRV.transfer(0x0Cc7090D567f902F50cB5621a7d6A59874364bA1, CRV.balanceOf(address(this)));\r\n    }\r\n    \r\n    // function disableTestMode() public {\r\n    //     require(testMode);\r\n    //     testMode = false;\r\n    // }\r\n    \r\n    // function claimForAddress(address addr) internal {\r\n    //     crvDAO.claim(addr);\r\n    // }\r\n    \r\n    // function timeToClaim() public view returns(bool) {\r\n    //     return lastClaimTime + 23 hours < now;\r\n    // }\r\n    \r\n    // function rewardSender() internal {\r\n    //     msg.sender.transfer(address(this).balance / 100);\r\n    // }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CRVDAO\",\"outputs\":[{\"internalType\":\"contract CurveDAO\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimCRV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ClaimCRV","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b269b2a8cac557e6789c536dab7253eb061c7d56d201c65623e8285a5e37f20b"}]}