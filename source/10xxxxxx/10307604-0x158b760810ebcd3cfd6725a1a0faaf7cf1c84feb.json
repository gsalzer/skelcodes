{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.10 <0.7.0;\r\n\r\ncontract ETHPlusX3 {\r\n    address public creator;\r\n    uint256 public last_uid;\r\n    uint256 MAX_LEVEL = 9;\r\n    uint256 REFERRALS_LIMIT = 2;\r\n    uint256 LEVEL_EXPIRE_TIME = 90 days;\r\n    uint256 LEVEL_HIGHER_FOUR_EXPIRE_TIME = 180 days;\r\n    mapping(uint256 => address) public userAddresses;\r\n    mapping(uint256 => uint256) directPrice;\r\n    mapping(uint256 => uint256) levelPrice;\r\n    mapping(address => User) public users;\r\n\r\n    struct User {\r\n        uint256 id;\r\n        uint256 referrerID;\r\n        address[] referrals;\r\n        mapping(uint256 => uint256) levelExpiresAt;\r\n    }\r\n\r\n    modifier validLevelAmount(uint256 _level) {\r\n        require(msg.value == levelPrice[_level], \"Invalid level amount sent\");\r\n        _;\r\n    }\r\n\r\n    modifier userRegistered() {\r\n        require(users[msg.sender].id != 0, \"User does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier validReferrerID(uint256 _referrerID) {\r\n        require(\r\n            _referrerID > 0 && _referrerID <= last_uid,\r\n            \"Invalid referrer ID\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier userNotRegistered() {\r\n        require(users[msg.sender].id == 0, \"User is already registered\");\r\n        _;\r\n    }\r\n\r\n    modifier validLevel(uint256 _level) {\r\n        require(_level > 0 && _level <= MAX_LEVEL, \"Invalid level entered\");\r\n        _;\r\n    }\r\n\r\n    event GetLevelProfitEvent(\r\n        address indexed user,\r\n        address indexed referral,\r\n        uint256 referralID,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor() public {\r\n        last_uid++;\r\n        creator = msg.sender;\r\n        levelPrice[1] = 0.05 ether;\r\n        levelPrice[2] = 0.72 ether;\r\n        levelPrice[3] = 1.96 ether;\r\n        levelPrice[4] = 4.00 ether;\r\n        levelPrice[5] = 8.10 ether;\r\n        levelPrice[6] = 15.00 ether;\r\n        levelPrice[7] = 20.90 ether;\r\n        levelPrice[8] = 35.40 ether;\r\n        levelPrice[9] = 50.70 ether;\r\n        directPrice[1] = 0.01 ether;\r\n        directPrice[2] = 0.09 ether;\r\n        directPrice[3] = 0.49 ether;\r\n        directPrice[4] = 0.50 ether;\r\n        directPrice[5] = 1.00 ether;\r\n        directPrice[6] = 1.87 ether;\r\n        directPrice[7] = 2.60 ether;\r\n        directPrice[8] = 4.42 ether;\r\n        directPrice[9] = 6.30 ether;\r\n\r\n        users[creator] = User({\r\n            id: last_uid,\r\n            referrerID: 0,\r\n            referrals: new address[](0)\r\n        });\r\n        userAddresses[last_uid] = creator;\r\n\r\n        for (uint256 i = 1; i <= MAX_LEVEL; i++) {\r\n            users[creator].levelExpiresAt[i] = 1 << 37;\r\n        }\r\n    }\r\n\r\n    function registerUser(uint256 _referrerID)\r\n        public\r\n        payable\r\n        userNotRegistered()\r\n        validReferrerID(_referrerID)\r\n        validLevelAmount(1)\r\n    {\r\n        uint256 _level = 1;\r\n\r\n        if (\r\n            users[userAddresses[_referrerID]].referrals.length >=\r\n            REFERRALS_LIMIT\r\n        ) {\r\n            _referrerID = users[findReferrer(userAddresses[_referrerID])].id;\r\n        }\r\n        last_uid++;\r\n        users[msg.sender] = User({\r\n            id: last_uid,\r\n            referrerID: _referrerID,\r\n            referrals: new address[](0)\r\n        });\r\n        userAddresses[last_uid] = msg.sender;\r\n        users[msg.sender].levelExpiresAt[_level] =\r\n            now +\r\n            getLevelExpireTime(_level);\r\n        users[userAddresses[_referrerID]].referrals.push(msg.sender);\r\n\r\n        transferLevelPayment(_level, msg.sender);\r\n    }\r\n\r\n    function buyLevel(uint256 _level)\r\n        public\r\n        payable\r\n        userRegistered()\r\n        validLevel(_level)\r\n        validLevelAmount(_level)\r\n    {\r\n        for (uint256 l = _level - 1; l > 0; l--) {\r\n            require(\r\n                getUserLevelExpiresAt(msg.sender, l) >= now,\r\n                \"Buy previous level first\"\r\n            );\r\n        }\r\n\r\n        if (getUserLevelExpiresAt(msg.sender, _level) == 0) {\r\n            users[msg.sender].levelExpiresAt[_level] =\r\n                now +\r\n                getLevelExpireTime(_level);\r\n        } else {\r\n            users[msg.sender].levelExpiresAt[_level] += getLevelExpireTime(\r\n                _level\r\n            );\r\n        }\r\n\r\n        transferLevelPayment(_level, msg.sender);\r\n    }\r\n\r\n    function getLevelExpireTime(uint256 _level)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_level < 5) {\r\n            return LEVEL_EXPIRE_TIME;\r\n        } else {\r\n            return LEVEL_HIGHER_FOUR_EXPIRE_TIME;\r\n        }\r\n    }\r\n\r\n    function findReferrer(address _user) internal view returns (address) {\r\n        if (users[_user].referrals.length < REFERRALS_LIMIT) {\r\n            return _user;\r\n        }\r\n\r\n        address[1632] memory referrals;\r\n        referrals[0] = users[_user].referrals[0];\r\n        referrals[1] = users[_user].referrals[1];\r\n\r\n        address referrer;\r\n\r\n        for (uint256 i = 0; i < 16382; i++) {\r\n            if (users[referrals[i]].referrals.length < REFERRALS_LIMIT) {\r\n                referrer = referrals[i];\r\n                break;\r\n            }\r\n\r\n            if (i >= 8191) {\r\n                continue;\r\n            }\r\n\r\n            referrals[(i + 1) * 2] = users[referrals[i]].referrals[0];\r\n            referrals[(i + 1) * 2 + 1] = users[referrals[i]].referrals[1];\r\n        }\r\n\r\n        require(referrer != address(0), \"Referrer not found\");\r\n        return referrer;\r\n    }\r\n\r\n    function transferLevelPayment(uint256 _level, address _user) internal {\r\n        address referrer = getUserUpline(_user, _level);\r\n        address sender = msg.sender;\r\n\r\n        if (referrer == address(0)) {\r\n            referrer = creator;\r\n        }\r\n\r\n        uint256 uplines = 3;\r\n        uint256 eth = msg.value;\r\n        uint256 ethToReferrer = (eth - (directPrice[_level] * 2)) / uplines;\r\n\r\n        for (uint256 i = 1; i <= uplines; i++) {\r\n            referrer = getUserUpline(_user, i);\r\n\r\n            if (\r\n                referrer != address(0) &&\r\n                (users[_user].levelExpiresAt[_level] == 0 ||\r\n                    getUserLevelExpiresAt(referrer, _level) < now)\r\n            ) {\r\n                uplines++;\r\n                continue;\r\n            }\r\n\r\n            if (referrer == address(0)) {\r\n                referrer = creator;\r\n            }\r\n\r\n            eth = eth - ethToReferrer;\r\n\r\n            (bool success, ) = address(uint256(referrer)).call{\r\n                value: ethToReferrer\r\n            }(\"\");\r\n            require(success, \"Transfer failed.\");\r\n            emit GetLevelProfitEvent(\r\n                referrer,\r\n                sender,\r\n                users[sender].id,\r\n                ethToReferrer\r\n            );\r\n        }\r\n\r\n        address directRefer = userAddresses[users[msg.sender].referrerID];\r\n\r\n        eth = eth - directPrice[_level];\r\n        (bool success2, ) = address(uint256(directRefer)).call{\r\n            value: directPrice[_level]\r\n        }(\"\");\r\n        require(success2, \"Transfer failed.\");\r\n        emit GetLevelProfitEvent(\r\n            directRefer,\r\n            sender,\r\n            users[sender].id,\r\n            directPrice[_level]\r\n        );\r\n\r\n        (bool success3, ) = address(uint256(creator)).call{value: eth}(\"\");\r\n        require(success3, \"Transfer failed.\");\r\n    }\r\n\r\n    function getUserUpline(address _user, uint256 height)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        if (height <= 0 || _user == address(0)) {\r\n            return _user;\r\n        }\r\n\r\n        return\r\n            this.getUserUpline(\r\n                userAddresses[users[_user].referrerID],\r\n                height - 1\r\n            );\r\n    }\r\n\r\n    function getUserLevelExpiresAt(address _user, uint256 _level)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[_user].levelExpiresAt[_level];\r\n    }\r\n\r\n    function getUserReferrals(address _user)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return users[_user].referrals;\r\n    }\r\n\r\n    function getUserLevel(address _user) public view returns (uint256) {\r\n        if (getUserLevelExpiresAt(_user, 1) < now) {\r\n            return (0);\r\n        } else if (getUserLevelExpiresAt(_user, 2) < now) {\r\n            return (1);\r\n        } else if (getUserLevelExpiresAt(_user, 3) < now) {\r\n            return (2);\r\n        } else if (getUserLevelExpiresAt(_user, 4) < now) {\r\n            return (3);\r\n        } else if (getUserLevelExpiresAt(_user, 5) < now) {\r\n            return (4);\r\n        } else if (getUserLevelExpiresAt(_user, 6) < now) {\r\n            return (5);\r\n        } else if (getUserLevelExpiresAt(_user, 7) < now) {\r\n            return (6);\r\n        } else if (getUserLevelExpiresAt(_user, 8) < now) {\r\n            return (7);\r\n        } else if (getUserLevelExpiresAt(_user, 9) < now) {\r\n            return (8);\r\n        } else if (getUserLevelExpiresAt(_user, 10) < now) {\r\n            return (9);\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GetLevelProfitEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getUserLevelExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"getUserUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_uid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ETHPlusX3","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d342f80fc4e34e8dfda10f26a29f58f354f627632b17117fd5ed10ddf49ba04b"}]}