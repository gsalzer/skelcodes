{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    // SMARTXXX: function feeTo() external view returns (address);\r\n    // SMARTXXX: function feeToSetter() external view returns (address);\r\n    function feeInfoSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    // SMARTXXX: function setFeeTo(address) external;\r\n    function setFeeInfo(address, uint32, uint32) external;\r\n    // SMARTXXX: function setFeeToSetter(address) external;\r\n    function setFeeInfoSetter(address) external;\r\n\r\n    // SMARTXXX: fee info getter\r\n    function getFeeInfo() external view returns (address, uint32, uint32);\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20Uniswap {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2ERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n// File: contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/uniswapv2/libraries/SafeMath.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMathUniswap {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n// File: contracts/uniswapv2/libraries/UniswapV2Library.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMathUniswap for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'1c879dcd3af04306445addd2c308bd4d26010c7ca84c959c3564d4f6957ab20c' // init code hash\r\n            ))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IEqualizer.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IEqualizer {\r\n    function getAPY(address token0, address token1) external view returns (uint256);\r\n\r\n    function getPoolWeight(address token0, address token1) external view returns (uint256);\r\n\r\n    function getPoolAndUserInfo(address token0, address token1, address user) external view returns (\r\n        uint256 lastAllocPoint,\r\n        uint256 currentAllocPoint,\r\n        uint256 userInfoAmount,\r\n        uint256 pending,\r\n        uint256 allocPointGain\r\n    );\r\n\r\n    function getRoundLengthAndLastEndBlock() external view returns (\r\n        uint256 length,\r\n        uint256 endBlock\r\n    );\r\n\r\n    function rounds(uint256 index) external view returns (\r\n        uint256 allocPoint,\r\n        uint256 totalAllocPoint,\r\n        uint256 endBlock\r\n    );\r\n}\r\n\r\n// File: contracts/EqualizerRouter.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract EqualizerRouter {\r\n\r\n    IUniswapV2Factory public factory;\r\n    IEqualizer public master;\r\n    address public weth;\r\n\r\n    uint256 constant REQUEST_POOL_LIMIT = 200;\r\n\r\n    constructor(\r\n        IUniswapV2Factory _factory,\r\n        IEqualizer _master,\r\n        address _weth\r\n    ) public {\r\n        factory = _factory;\r\n        master = _master;\r\n        weth = _weth;\r\n    }\r\n\r\n    function getMyPairs()\r\n    public\r\n    virtual\r\n    view\r\n    returns (address[] memory addresses)\r\n    {\r\n        uint256 length;\r\n        for (uint256 i = 0; i < factory.allPairsLength(); i++) {\r\n            address pair = factory.allPairs(i);\r\n            if (IUniswapV2Pair(pair).balanceOf(msg.sender) > 0) {\r\n                length++;\r\n            }\r\n        }\r\n        addresses = new address[](length);\r\n        length = 0;\r\n        for (uint256 i = 0; i < factory.allPairsLength(); i++) {\r\n            address pair = factory.allPairs(i);\r\n            if (IUniswapV2Pair(pair).balanceOf(msg.sender) > 0) {\r\n                addresses[length++] = pair;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getLiquidityInfo(address pair)\r\n    public\r\n    virtual\r\n    view\r\n    returns (\r\n        address token0,\r\n        address token1,\r\n        uint256 tokens,\r\n        uint256 totalSupply,\r\n        uint256 reserve0,\r\n        uint256 reserve1,\r\n        string memory token0Symbol,\r\n        string memory token1Symbol,\r\n        uint256 token0Decimals,\r\n        uint256 token1Decimals\r\n    )\r\n    {\r\n        IUniswapV2Pair p = IUniswapV2Pair(pair);\r\n        token0 = p.token0();\r\n        token1 = p.token1();\r\n        token0Symbol = IERC20Uniswap(token0).symbol();\r\n        token1Symbol = IERC20Uniswap(token1).symbol();\r\n        token0Decimals = IERC20Uniswap(token0).decimals();\r\n        token1Decimals = IERC20Uniswap(token1).decimals();\r\n        tokens = p.balanceOf(msg.sender);\r\n        totalSupply = p.totalSupply();\r\n        (reserve0, reserve1) = UniswapV2Library.getReserves(\r\n            address(factory),\r\n            token0,\r\n            token1\r\n        );\r\n    }\r\n\r\n    function getPairInfos(uint256 page)\r\n    external\r\n    view\r\n    returns (\r\n        address[REQUEST_POOL_LIMIT] memory lpTokens,\r\n        address[REQUEST_POOL_LIMIT] memory token0Address,\r\n        address[REQUEST_POOL_LIMIT] memory token1Address,\r\n        bytes32[REQUEST_POOL_LIMIT] memory token0Symbols,\r\n        bytes32[REQUEST_POOL_LIMIT] memory token1Symbols\r\n    )\r\n    {\r\n        uint256 position = page * REQUEST_POOL_LIMIT;\r\n        uint256 end = Math.min(position + REQUEST_POOL_LIMIT, factory.allPairsLength());\r\n        uint8 i = 0;\r\n        for (; position < end; position++) {\r\n            lpTokens[i] = factory.allPairs(position);\r\n            IUniswapV2Pair pair = IUniswapV2Pair(lpTokens[i]);\r\n            token0Address[i] = pair.token0();\r\n            token1Address[i] = pair.token1();\r\n            token0Symbols[i] = stringToBytes32(IUniswapV2ERC20(pair.token0()).symbol());\r\n            token1Symbols[i] = stringToBytes32(IUniswapV2ERC20(pair.token1()).symbol());\r\n            i++;\r\n        }\r\n    }\r\n\r\n    function getPairInfo(address pairAddress)\r\n    external\r\n    view\r\n    returns (\r\n        address token0,\r\n        address token1,\r\n        bool token0EthRoute,\r\n        bool token1EthRoute,\r\n        bytes32 token0Symbol,\r\n        bytes32 token1Symbol\r\n    )\r\n    {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n        require(factory.getPair(pair.token0(), pair.token1()) != address(0x0), \"lp token not exist\");\r\n\r\n        // token0\r\n        token0 = pair.token0();\r\n        IUniswapV2ERC20 token0ERC = IUniswapV2ERC20(token0);\r\n        token0Symbol = stringToBytes32(token0ERC.symbol());\r\n        token0EthRoute = (token0 == weth || token1 == weth) ||\r\n        factory.getPair(token0, weth) != address(0x0);\r\n        // token1\r\n        token1 = pair.token1();\r\n        IUniswapV2ERC20 token1ERC = IUniswapV2ERC20(token1);\r\n        token1Symbol = stringToBytes32(token1ERC.symbol());\r\n        token1EthRoute = (token0 == weth || token1 == weth) ||\r\n        factory.getPair(token1, weth) != address(0x0);\r\n    }\r\n\r\n    function getPoolInfos(uint256 page)\r\n    external\r\n    view\r\n    returns (\r\n        uint256[REQUEST_POOL_LIMIT] memory lpTokenBalances,\r\n        uint256[REQUEST_POOL_LIMIT] memory allocPoints,\r\n        uint256[REQUEST_POOL_LIMIT] memory userInfoAmounts,\r\n        uint256[REQUEST_POOL_LIMIT] memory pendingSmarts,\r\n        uint256[REQUEST_POOL_LIMIT] memory allocPointGains\r\n    )\r\n    {\r\n        uint256 position = page * REQUEST_POOL_LIMIT;\r\n        uint256 end = Math.min(position + REQUEST_POOL_LIMIT, factory.allPairsLength());\r\n        uint8 i = 0;\r\n        for (; position < end; position++) {\r\n            IUniswapV2Pair pair = IUniswapV2Pair(factory.allPairs(position));\r\n            lpTokenBalances[i] = pair.balanceOf(msg.sender);\r\n            (allocPoints[i], , userInfoAmounts[i], pendingSmarts[i], allocPointGains[i]) = master\r\n        .getPoolAndUserInfo(pair.token0(), pair.token1(), msg.sender);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    function getPoolInfo(address pairAddress)\r\n    external\r\n    view\r\n    returns (\r\n        uint256 userInfoAmount,\r\n        uint256 pending,\r\n        uint256 totalStaked,\r\n        uint256 lastAllocPoint,\r\n        uint256 lastTotalAllocPoint,\r\n        uint256 currentAllocPoint,\r\n        uint256 currentTotalAllocPoint\r\n    )\r\n    {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n        totalStaked = pair.balanceOf(address(master));\r\n        (lastAllocPoint, currentAllocPoint, userInfoAmount, pending,) = master.getPoolAndUserInfo(\r\n            pair.token0(),\r\n            pair.token1(),\r\n            msg.sender\r\n        );\r\n\r\n        (uint256 length,) = master.getRoundLengthAndLastEndBlock();\r\n        lastTotalAllocPoint = 0;\r\n        if (length > 1) {\r\n            (, lastTotalAllocPoint,) = master.rounds(length - 2);\r\n        }\r\n        (, currentTotalAllocPoint,) = master.rounds(length - 1);\r\n    }\r\n\r\n    function getAPYs(uint256 page)\r\n    external\r\n    view\r\n    returns (uint256[REQUEST_POOL_LIMIT] memory apys)\r\n    {\r\n        uint256 position = page * REQUEST_POOL_LIMIT;\r\n        uint256 end = Math.min(position + REQUEST_POOL_LIMIT, factory.allPairsLength());\r\n        uint8 i = 0;\r\n        for (; position < end; position++) {\r\n            apys[i] = getAPY(factory.allPairs(position));\r\n            i++;\r\n        }\r\n    }\r\n\r\n    function getAPY(address pairAddress) public view returns (uint256 apy) {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n        apy = master.getAPY(pair.token0(), pair.token1());\r\n    }\r\n\r\n    function stringToBytes32(string memory source)\r\n    public\r\n    pure\r\n    returns (bytes32 result)\r\n    {\r\n        bytes memory data = bytes(source);\r\n        if (data.length == 0) {\r\n            return 0x0;\r\n        }\r\n        /* solium-disable-next-line */\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IEqualizer\",\"name\":\"_master\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getAPYs\",\"outputs\":[{\"internalType\":\"uint256[200]\",\"name\":\"apys\",\"type\":\"uint256[200]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getLiquidityInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0Decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"getPairInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"token0EthRoute\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"token1EthRoute\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"token0Symbol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"token1Symbol\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getPairInfos\",\"outputs\":[{\"internalType\":\"address[200]\",\"name\":\"lpTokens\",\"type\":\"address[200]\"},{\"internalType\":\"address[200]\",\"name\":\"token0Address\",\"type\":\"address[200]\"},{\"internalType\":\"address[200]\",\"name\":\"token1Address\",\"type\":\"address[200]\"},{\"internalType\":\"bytes32[200]\",\"name\":\"token0Symbols\",\"type\":\"bytes32[200]\"},{\"internalType\":\"bytes32[200]\",\"name\":\"token1Symbols\",\"type\":\"bytes32[200]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userInfoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTotalAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTotalAllocPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getPoolInfos\",\"outputs\":[{\"internalType\":\"uint256[200]\",\"name\":\"lpTokenBalances\",\"type\":\"uint256[200]\"},{\"internalType\":\"uint256[200]\",\"name\":\"allocPoints\",\"type\":\"uint256[200]\"},{\"internalType\":\"uint256[200]\",\"name\":\"userInfoAmounts\",\"type\":\"uint256[200]\"},{\"internalType\":\"uint256[200]\",\"name\":\"pendingSmarts\",\"type\":\"uint256[200]\"},{\"internalType\":\"uint256[200]\",\"name\":\"allocPointGains\",\"type\":\"uint256[200]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"contract IEqualizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EqualizerRouter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"000000000000000000000000f14421f0bcf9401d8930872c2d44d8e67e40529a000000000000000000000000ef1ecdb17c7d4adbb4db5c4a8068ab66f3dd0902000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a661488df2d3eba0a6101705d2c2654c69eabd5eeddca36a105b23e30afb3624"}]}