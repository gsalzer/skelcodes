{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.9;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    // function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    //     require(b != 0, \"SafeMath: modulo by zero\");\r\n    //     return a % b;\r\n    // }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address _owner;\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor (address own) internal {\r\n        _owner = own;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n}\r\n\r\ncontract SDCPStaking is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    address private immutable sdcpToken;\r\n    address private immutable v2Pair;\r\n\r\n    uint8 private immutable sdcpDec;\r\n\r\n    uint constant BASE_EP = 5;\r\n\r\n    uint constant DAY =  60 * 60 * 24;\r\n\r\n    uint constant RATE = 1660000;  // \r\n    uint constant LEAST = 500;\r\n\r\n    constructor(address sdcp , address v2) Ownable(msg.sender) public {\r\n      sdcpToken = sdcp;\r\n      sdcpDec = IERC20(sdcp).decimals();\r\n      v2Pair = v2;\r\n      require(IUniswapV2Pair(v2).token0() == sdcp || IUniswapV2Pair(v2).token1() == sdcp, \"E/no sdcp\");\r\n    }\r\n\r\n    struct Staking {\r\n      uint128 amount;\r\n      uint32 stakeTime;\r\n      uint32 earnTime;\r\n      uint64 stype;   \r\n    }\r\n\r\n    mapping(address => Staking) V2Stakings;\r\n\r\n    mapping(uint => uint) dayPrices;\r\n\r\n    mapping(uint => uint) public earnPercent;\r\n\r\n    function myV2Staking() external view returns (uint128, uint32, uint32, uint64, uint) {\r\n      return (V2Stakings[msg.sender].amount,\r\n              V2Stakings[msg.sender].stakeTime,\r\n              V2Stakings[msg.sender].earnTime,\r\n              V2Stakings[msg.sender].stype,\r\n              myV2Earn());\r\n    }\r\n\r\n    function stakingV2(uint amount, uint64 stype) external {\r\n      require(V2Stakings[msg.sender].amount == 0, \"E/aleady staking\");\r\n      require(stype <= 2, \"E/type error\");\r\n      require(IERC20(v2Pair).transferFrom(msg.sender, address(this), amount), \"E/transfer error\");\r\n      V2Stakings[msg.sender] = Staking(uint128(amount), uint32(now), uint32(now), stype);\r\n    }\r\n\r\n    function wdV2(uint amount) external {\r\n      Staking memory s = V2Stakings[msg.sender];\r\n      uint stakingToal = s.amount;\r\n      uint stakingTime = s.stakeTime;\r\n\r\n      require(stakingToal >= amount, \"E/not enough\");\r\n      if(s.stype == 1) {\r\n        require(now >= stakingTime + DAY, \"E/locked\"); \r\n      } else {\r\n        require(now >= stakingTime + 30 * DAY, \"E/12 locked\"); \r\n      } \r\n\r\n\r\n      wdV2Earn() ;\r\n\r\n      IERC20(v2Pair).transfer(msg.sender, amount);\r\n\r\n      if(stakingToal - amount > 0) {\r\n        V2Stakings[msg.sender] = Staking(uint128(stakingToal - amount), uint32(now), uint32(now), s.stype);\r\n      } else {\r\n        delete V2Stakings[msg.sender];\r\n      }\r\n    }\r\n\r\n    function myV2Earn() internal view returns (uint) {\r\n      Staking memory s = V2Stakings[msg.sender];\r\n      if(s.amount == 0) {\r\n        return 0;\r\n      }\r\n\r\n      uint endDay = getDay(now);\r\n      uint startDay = getDay(s.earnTime);\r\n      if(endDay > startDay) {\r\n        uint earnDays = endDay - startDay;\r\n        uint earnPs = earnDays * BASE_EP;\r\n\r\n        while(endDay > startDay) {\r\n          if(earnPercent[startDay] > 0) {\r\n            earnPs += earnPercent[startDay];\r\n          }\r\n          startDay += 1;\r\n        }\r\n\r\n        uint earns = 0;\r\n        if(earnPs > 0) {\r\n          earns = uint(s.amount).mul(earnPs).mul(RATE).div(1000).div(10 ** (uint(18).sub(sdcpDec)));\r\n        }\r\n        if(s.stype == 2) {\r\n          return earns * 2;\r\n        } else {\r\n          return earns;\r\n        }\r\n      } \r\n      return 0;\r\n    }\r\n\r\n    function wdV2Earn() public {\r\n      uint earnsTotal = myV2Earn();\r\n\r\n      IERC20(sdcpToken).transfer(msg.sender, earnsTotal);\r\n      V2Stakings[msg.sender].earnTime = uint32(now);\r\n    }\r\n\r\n\r\n    // get 1 sdcp  =  x eth\r\n    function fetchPrice() internal view returns (uint) {\r\n      (uint reserve0, uint reserve1,) = IUniswapV2Pair(v2Pair).getReserves();\r\n      require(reserve0 > 0 && reserve1 > 0, 'E/INSUFFICIENT_LIQUIDITY');\r\n      uint oneSdcp = 10 ** uint(sdcpDec);  \r\n\r\n      if(IUniswapV2Pair(v2Pair).token0() == sdcpToken) {\r\n        return oneSdcp.mul(reserve1) / reserve0;\r\n      } else {\r\n        return oneSdcp.mul(reserve0) / reserve1;\r\n      }\r\n    }\r\n\r\n    function getDay(uint ts) internal pure returns (uint) {   \r\n      return ts / DAY;\r\n    }\r\n\r\n    function updatePrice() external {\r\n      uint d = getDay(now);\r\n      uint p = fetchPrice();\r\n\r\n      dayPrices[d] = p;\r\n      uint lastPrice = dayPrices[d-1];\r\n      \r\n      if(lastPrice > 0 && p > lastPrice) {\r\n        \r\n        uint ep = BASE_EP;\r\n        uint t = (p - lastPrice) / (lastPrice / 10); \r\n        earnPercent[d] = ep * t;\r\n      }\r\n    }\r\n\r\n    function withdrawSDCP(uint amount) external onlyOwner {\r\n      IERC20(sdcpToken).transfer(msg.sender, amount);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sdcp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myV2Staking\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"stype\",\"type\":\"uint64\"}],\"name\":\"stakingV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wdV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wdV2Earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSDCP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SDCPStaking","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c59ddee8be619680a3b9489eb864b30270f2070d0000000000000000000000002ea6fac74c898811b504aa6f74d8e33bf0dc8554","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://19c389e4756fd3746c0771d4f346e0dfdb79e6bf2464a844a0da9304826f7f16"}]}