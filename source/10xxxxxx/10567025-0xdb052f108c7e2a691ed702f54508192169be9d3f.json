{"status":"1","message":"OK","result":[{"SourceCode":"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\r\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\r\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\r\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\r\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\r\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\r\n// Copyright (C) 2020 zapper, nodar, suhail, seb, sumit, apoorv\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n\r\n///@author Zapper\r\n///@notice This contract moves liquidity between UniswapV2 and Balancer pools.\r\n\r\npragma solidity 0.5.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor() internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external pure returns (address);\r\n\r\n    function token1() external pure returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        );\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external;\r\n}\r\n\r\ninterface IUniswapV2ZapIn {\r\n    function ZapIn(\r\n        address _FromTokenContractAddress,\r\n        address _ToUnipoolToken0,\r\n        address _ToUnipoolToken1,\r\n        uint256 _amount,\r\n        uint256 _minPoolTokens\r\n    ) external payable returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2ZapOut {\r\n    function ZapOut(\r\n        address _ToTokenContractAddress,\r\n        address _FromUniPoolAddress,\r\n        uint256 _IncomingLP,\r\n        uint256 _minTokensRec\r\n    ) external payable returns (uint256);\r\n}\r\n\r\ninterface IBalancerZapInGen {\r\n    function EasyZapIn(\r\n        address _FromTokenContractAddress,\r\n        address _ToBalancerPoolAddress,\r\n        uint256 _amount,\r\n        uint256 _minPoolTokens\r\n    ) external payable returns (uint256 tokensBought);\r\n}\r\n\r\ninterface IBalancerUnZap {\r\n    function EasyZapOut(\r\n        address _ToTokenContractAddress,\r\n        address _FromBalancerPoolAddress,\r\n        uint256 _IncomingBPT,\r\n        uint256 _minTokensRec\r\n    ) external payable returns (uint256);\r\n}\r\n\r\ninterface IBPool {\r\n    function isBound(address t) external view returns (bool);\r\n}\r\n\r\ncontract Balancer_UniswapV2_Pipe_V1_1 is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    bool private stopped = false;\r\n\r\n    IUniswapV2Factory\r\n        private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\r\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n    );\r\n\r\n    IBalancerUnZap public balancerUnZap;\r\n    IUniswapV2ZapIn public uniZapIn;\r\n    IBalancerZapInGen public balancerZapIn;\r\n    IUniswapV2ZapOut public uniUnZap;\r\n\r\n    constructor(\r\n        address _balancerZapIn,\r\n        address _balancerUnZap,\r\n        address _uniZapIn,\r\n        address _uniUnZap\r\n    ) public {\r\n        balancerUnZap = IBalancerUnZap(_balancerUnZap);\r\n        uniZapIn = IUniswapV2ZapIn(_uniZapIn);\r\n        balancerZapIn = IBalancerZapInGen(_balancerZapIn);\r\n        uniUnZap = IUniswapV2ZapOut(_uniUnZap);\r\n    }\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function PipeBalancerUniV2(\r\n        address _FromBalancerPoolAddress,\r\n        uint256 _IncomingBPT,\r\n        address _toUniswapPoolAddress,\r\n        address _toWhomToIssue,\r\n        uint256 _minUniV2Tokens\r\n    ) public nonReentrant stopInEmergency returns (uint256) {\r\n        // Get BPT\r\n        IERC20(_FromBalancerPoolAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _IncomingBPT\r\n        );\r\n        // Approve BalUnZap\r\n        IERC20(_FromBalancerPoolAddress).approve(\r\n            address(balancerUnZap),\r\n            _IncomingBPT\r\n        );\r\n\r\n        // Get pair addresses from UniV2Pair\r\n        address token0 = IUniswapV2Pair(_toUniswapPoolAddress).token0();\r\n        address token1 = IUniswapV2Pair(_toUniswapPoolAddress).token1();\r\n\r\n        address zapOutToToken = address(0);\r\n        if (IBPool(_FromBalancerPoolAddress).isBound(token0)) {\r\n            zapOutToToken = token0;\r\n        } else if (IBPool(_FromBalancerPoolAddress).isBound(token1)) {\r\n            zapOutToToken = token1;\r\n        }\r\n\r\n        // ZapOut from Balancer\r\n        uint256 zappedOutAmt = balancerUnZap.EasyZapOut(\r\n            zapOutToToken,\r\n            _FromBalancerPoolAddress,\r\n            _IncomingBPT,\r\n            0\r\n        );\r\n\r\n        uint256 LPTBought;\r\n        if (zapOutToToken == address(0)) {\r\n            // use ETH to ZapIn to UNIV2\r\n            LPTBought = uniZapIn.ZapIn.value(zappedOutAmt)(\r\n                address(0),\r\n                token0,\r\n                token1,\r\n                0,\r\n                _minUniV2Tokens\r\n            );\r\n        } else {\r\n            IERC20(zapOutToToken).approve(\r\n                address(uniZapIn),\r\n                IERC20(zapOutToToken).balanceOf(address(this))\r\n            );\r\n            LPTBought = uniZapIn.ZapIn.value(0)(\r\n                zapOutToToken,\r\n                token0,\r\n                token1,\r\n                zappedOutAmt,\r\n                _minUniV2Tokens\r\n            );\r\n        }\r\n        // Send LPT to user\r\n        address _ToUniPoolAddress = UniSwapV2FactoryAddress.getPair(\r\n            token0,\r\n            token1\r\n        );\r\n        IERC20(_ToUniPoolAddress).transfer(_toWhomToIssue, LPTBought);\r\n\r\n        return LPTBought;\r\n    }\r\n\r\n    function PipeUniV2Balancer(\r\n        address _FromUniswapPoolAddress,\r\n        uint256 _IncomingLPT,\r\n        address _ToBalancerPoolAddress,\r\n        address _toWhomToIssue,\r\n        uint256 _minBPTokens\r\n    ) public nonReentrant stopInEmergency returns (uint256) {\r\n        // Get LPT\r\n        IERC20(_FromUniswapPoolAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _IncomingLPT\r\n        );\r\n\r\n        // Approve UniUnZap\r\n        IERC20(_FromUniswapPoolAddress).approve(\r\n            address(uniUnZap),\r\n            _IncomingLPT\r\n        );\r\n\r\n        // Get pair addresses from UniV2Pair\r\n        address token0 = IUniswapV2Pair(_FromUniswapPoolAddress).token0();\r\n        address token1 = IUniswapV2Pair(_FromUniswapPoolAddress).token1();\r\n\r\n        address zapOutToToken = address(0);\r\n        if (IBPool(_ToBalancerPoolAddress).isBound(token0)) {\r\n            zapOutToToken = token0;\r\n        } else if (IBPool(_ToBalancerPoolAddress).isBound(token1)) {\r\n            zapOutToToken = token1;\r\n        }\r\n\r\n        // ZapOut from Uni\r\n        uint256 tokensRec = uniUnZap.ZapOut(\r\n            zapOutToToken,\r\n            _FromUniswapPoolAddress,\r\n            _IncomingLPT,\r\n            0\r\n        );\r\n\r\n        // ZapIn to Balancer\r\n        uint256 BPTBought;\r\n        if (zapOutToToken == address(0)) {\r\n            // use ETH to ZapIn to Balancer\r\n            BPTBought = balancerZapIn.EasyZapIn.value(tokensRec)(\r\n                address(0),\r\n                _ToBalancerPoolAddress,\r\n                0,\r\n                _minBPTokens\r\n            );\r\n        } else {\r\n            IERC20(zapOutToToken).approve(address(balancerZapIn), tokensRec);\r\n            BPTBought = balancerZapIn.EasyZapIn.value(0)(\r\n                zapOutToToken,\r\n                _ToBalancerPoolAddress,\r\n                tokensRec,\r\n                _minBPTokens\r\n            );\r\n        }\r\n\r\n        IERC20(_ToBalancerPoolAddress).transfer(_toWhomToIssue, BPTBought);\r\n\r\n        return BPTBought;\r\n    }\r\n\r\n    // fallback to receive ETH\r\n    function() external payable {}\r\n\r\n    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        _TokenAddress.transfer(owner(), qty);\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() public onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        address payable _to = owner().toPayable();\r\n        _to.transfer(contractBalance);\r\n    }\r\n\r\n    function updateZapAddresses(\r\n        address _balancerUnZap,\r\n        address _uniZapIn,\r\n        address _balancerZapIn,\r\n        address _uniUnZap\r\n    ) public onlyOwner {\r\n        balancerUnZap = IBalancerUnZap(_balancerUnZap);\r\n        uniZapIn = IUniswapV2ZapIn(_uniZapIn);\r\n        balancerZapIn = IBalancerZapInGen(_balancerZapIn);\r\n        uniUnZap = IUniswapV2ZapOut(_uniUnZap);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerZapIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerUnZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniZapIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniUnZap\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromBalancerPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingBPT\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toUniswapPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minUniV2Tokens\",\"type\":\"uint256\"}],\"name\":\"PipeBalancerUniV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromUniswapPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingLPT\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ToBalancerPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toWhomToIssue\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBPTokens\",\"type\":\"uint256\"}],\"name\":\"PipeUniV2Balancer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balancerUnZap\",\"outputs\":[{\"internalType\":\"contract IBalancerUnZap\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balancerZapIn\",\"outputs\":[{\"internalType\":\"contract IBalancerZapInGen\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokengetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniUnZap\",\"outputs\":[{\"internalType\":\"contract IUniswapV2ZapOut\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniZapIn\",\"outputs\":[{\"internalType\":\"contract IUniswapV2ZapIn\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerUnZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniZapIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerZapIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniUnZap\",\"type\":\"address\"}],\"name\":\"updateZapAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Balancer_UniswapV2_Pipe_V1_1","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a2acfaaaa01c4999385104787c1f24a9cf95b7250000000000000000000000005ccb8c39bf68612c7997cbc498ae55908d32d223000000000000000000000000775ee938186fddc13bd7c89d24820e1b0758f91d000000000000000000000000343e3a490c9251dc0eaa81da146ba6abe6c78b2d","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5761e1d4c6596543df91ae9c22a7ca1b23d872630ede22b3190779ba3b88fed2"}]}