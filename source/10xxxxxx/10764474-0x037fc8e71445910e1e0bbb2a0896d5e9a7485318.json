{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-08-30\r\n*/\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n//\r\n// Original work by Pine.Finance\r\n//  - https://github.com/pine-finance\r\n//\r\n// Authors:\r\n//  - Ignacio Mazzara <@nachomazzara>\r\n//  - Agustin Aguilar <@agusx1211>\r\n\r\n//\r\n//                                                                                                    \r\n//                                                /                                                   \r\n//                                                @,                                                  \r\n//                                               /&&                                                  \r\n//                                              &&%%&/                                                \r\n//                                            &%%%%&%%,..                                             \r\n//                                         */%&,*&&&&&&%%&*                                           \r\n//                                           /&%%%%%%%#.                                              \r\n//                                    ./%&%%%&#/%%%%&#&%%%&#(*.                                       \r\n//                                         .%%%%%%%&&%&/ ..,...                                       \r\n//                                       .*,%%%%%%%%%&&%%%%(                                          \r\n//                                     ,&&%%%&&*%%%%%%%%.*(#%&/                                       \r\n//                                  ./,(*,*,#%%%%%%%%%%%%%%%(,                                        \r\n//                                 ,(%%%%%%%%%%%%&%%%%%%%%%#&&%%%#/(*                                 \r\n//                                     *#%%%%%%%&%%%&%%#%%%%%%(                                       \r\n//                              .(####%%&%&#*&%%##%%%%%%%%%%%#.,,                                     \r\n//                                      ,&%%%%%###%%%%%%%%%%%%#&&.                                    \r\n//                             ..,(&%%%%%%%%%%%%%%%%%%&&%%%%#%&&%&%%%%&&#,                            \r\n//                           ,##//%((#*/#%%%%%%%%%%%%%%%%%%%%%&(.                                     \r\n//                                  (%%%%%%%%%%%%%%%%%%%#%%%%%%%%%&&&&#(*,                            \r\n//                                   ./%%%%&%%%%#%&%%%%%%##%%&&&&%%(*,                                \r\n//                                #%%%%%%&&%%%#%%%%%%%%%%%%%%%&#,*&&#.                                \r\n//                            /%##%(%&/ #%%%%%%%%%%%%%%%%%%%%%%%%%&%%%.                               \r\n//                                 *&%%%%&%%%%%%%%#%%%%%%%%%%%%%%%%%&%%%#%#%%,                        \r\n//                        .*(#&%%%%%%%%&&%%%%%%%%%%#%%%%%%%%%%%%%%%(,                                 \r\n//                    ./#%%%%%%%%%%%%%%%%%%%%%%%#%&%#%%%%%%%%%%%%%%%%%%%%&%%%#####(.                  \r\n//                          .,,*#%%%%%%%%%%%%%##%%&&%#%%%%%%%%&&%%%%%%(&*#&**/(*                      \r\n//                        .,(&%%%%%#((%%%%%%#%%%%%%%%%#%%%%%%%&&&&&%%%%&%*                            \r\n//                         ,,,,,..*&%%%%%%%%%%%%%%%%%%%%%%%&%%%%%%%%%#/*.                             \r\n//                           ,#&%%%%%%%%%%%%%%%%%%%%%%%%&%%%%%%%%%%%%%%%%%%/,                         \r\n//           .     .,*(#%%%%%%%%%&&&&%%%%%%&&&%%%%%%%%%&&%##%%%%%#,(%%%%%%%%%%%(((*                   \r\n//             ,/((%%%%%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%&#  . . ...                       \r\n//                      .,.,,**(%%%%%%%%&%##%%%%%%%%%%%%%%%%%%###%%%%%%%%%&*                          \r\n//                       ,%&%%%%%&&%%%%%%%#%%%%%%%%%%%%%%%%%%&%%%%##%%%%%%%%%%%%%%%%&&#.              \r\n//              .(&&&%%%%%%&#&&%&%%%%%%%##%%%%&&%%%#%%%%%%&%%%%%%&&%%%%&&&/*(,(#(,,.                  \r\n//                         ..&%%%%%%#%#%%%%%%%%%%%##%%%%%%%&%%%%%%%%%%%%%%%%&&(.                      \r\n//                      ,%%%%%%%%%##%%%&%%%%%%%%&%%#%%&&%%%%&%%%%%%&%%%%%&(#%%%#,                     \r\n//              ./%&%%%%%%%%%%%%%%%%%%%%%%%%%&&&%%%##%%%%%%%%%%%%%&&&%%%%%%%%&#.//*/,..               \r\n//      ,#%%%%%%%%%%%%%%%%%%&&%%%%%&&&&%%%%%&&&%%%%%#%%%%#%%%%%%%%%%%%%%%%%%%%%%%%%%&&(,..            \r\n//            ,#* ,&&&%,.,*(%%%%%%%%%&%%%%&&&%%%%%&%%%%#%%%%##%%%%%%%&&%%%%%%%%%%%#%%%%%%%%&%(*.      \r\n//          .,,/((#%&%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&%#%%%%%%%%%%%%%%%%%#%%%%%%%((*           \r\n// *,//**,...,/#%%%%%%%%%%%&&&&%%%%%%%%%%%%%#%%%%%%&&&%%%%&&&&%%%#%%#%%%%%%%%%%%%%%%#*.       .,(#%&@*\r\n//  .*%%(*(%%%%%%%%%%&&&&&&&&%%%%%%%&&%%%%%%%%%%%%%&&&%%%%%%%%%##%%%%%%%%%%%%%%%%%%%%%%%%%%%&%%%/..   \r\n//      .,/%&%%%%%%@#(&%&%%%%%%%%%#&&%%##%#%%%#%%%%&&&%%%%%%%%###%%%%%&&&%%%%%%%%%%%%%%%%&(//%%/      \r\n//          ,..     .(%%%%##%%%#%%%%%%#%%%%%##%%%%%&&&&%%%%%%%#&%#%%%%%%&&&%%%%%##//  ,,.             \r\n//            .,(%#%%##%%%#%%%#%%%#%%*,.*%%%%%%%%%&.,/&%%%%%%% #&%%#%%%%%&%(&%((%&&&(*                \r\n//                        ,/#/(%%,    ,&%%#%/.//         %*&(%#    .(,(%%%.          \r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IModule.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\n\r\ninterface IModule {\r\n    /// @notice receive ETH\r\n    receive() external payable;\r\n\r\n    /**\r\n     * @notice Executes an order\r\n     * @param _inputToken - Address of the input token\r\n     * @param _inputAmount - uint256 of the input token amount (order amount)\r\n     * @param _owner - Address of the order's owner\r\n     * @param _data - Bytes of the order's data\r\n     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\r\n     * @return bought - amount of output token bought\r\n     */\r\n    function execute(\r\n        IERC20 _inputToken,\r\n        uint256 _inputAmount,\r\n        address payable _owner,\r\n        bytes calldata _data,\r\n        bytes calldata _auxData\r\n    ) external returns (uint256 bought);\r\n\r\n    /**\r\n     * @notice Check whether an order can be executed or not\r\n     * @param _inputToken - Address of the input token\r\n     * @param _inputAmount - uint256 of the input token amount (order amount)\r\n     * @param _data - Bytes of the order's data\r\n     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\r\n     * @return bool - whether the order can be executed or not\r\n     */\r\n    function canExecute(\r\n        IERC20 _inputToken,\r\n        uint256 _inputAmount,\r\n        bytes calldata _data,\r\n        bytes calldata _auxData\r\n    ) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IHandler.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\ninterface IHandler {\r\n    /// @notice receive ETH\r\n    receive() external payable;\r\n\r\n    /**\r\n     * @notice Handle an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _minReturn - uint256 of the min return amount of output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bought - Amount of output token bought\r\n     */\r\n    function handle(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256 _inputAmount,\r\n        uint256 _minReturn,\r\n        bytes calldata _data\r\n    ) external payable returns (uint256 bought);\r\n\r\n    /**\r\n     * @notice Check whether can handle an order execution\r\n     * @param _inputToken - Address of the input token\r\n     * @param _outputToken - Address of the output token\r\n     * @param _inputAmount - uint256 of the input token amount\r\n     * @param _minReturn - uint256 of the min return amount of output token\r\n     * @param _data - Bytes of arbitrary data\r\n     * @return bool - Whether the execution can be handled or not\r\n     */\r\n    function canHandle(\r\n        IERC20 _inputToken,\r\n        IERC20 _outputToken,\r\n        uint256 _inputAmount,\r\n        uint256 _minReturn,\r\n        bytes calldata _data\r\n    ) external view returns (bool);\r\n}\r\n\r\n// File: contracts/commons/Order.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\ncontract Order {\r\n    address public constant ETH_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n}\r\n\r\n// File: contracts/libs/SafeMath.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/SafeERC20.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    function transfer(IERC20 _token, address _to, uint256 _val) internal returns (bool) {\r\n        (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(_token.transfer.selector, _to, _val));\r\n        return success && (data.length == 0 || abi.decode(data, (bool)));\r\n    }\r\n}\r\n\r\n// File: contracts/libs/PineUtils.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\n\r\nlibrary PineUtils {\r\n    address internal constant ETH_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    /**\r\n     * @notice Get the account's balance of token or ETH\r\n     * @param _token - Address of the token\r\n     * @param _addr - Address of the account\r\n     * @return uint256 - Account's balance of token or ETH\r\n     */\r\n    function balanceOf(IERC20 _token, address _addr) internal view returns (uint256) {\r\n        if (ETH_ADDRESS == address(_token)) {\r\n            return _addr.balance;\r\n        }\r\n\r\n        return _token.balanceOf(_addr);\r\n    }\r\n\r\n     /**\r\n     * @notice Transfer token or ETH to a destinatary\r\n     * @param _token - Address of the token\r\n     * @param _to - Address of the recipient\r\n     * @param _val - Uint256 of the amount to transfer\r\n     * @return bool - Whether the transfer was success or not\r\n     */\r\n    function transfer(IERC20 _token, address _to, uint256 _val) internal returns (bool) {\r\n        if (ETH_ADDRESS == address(_token)) {\r\n            (bool success, ) = _to.call{value:_val}(\"\");\r\n            return success;\r\n        }\r\n\r\n        return SafeERC20.transfer(_token, _to, _val);\r\n    }\r\n}\r\n\r\n// File: contracts/modules/LimitOrders.sol\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * Original work by Pine.Finance\r\n * - https://github.com/pine-finance\r\n *\r\n * Authors:\r\n * - Agustin Aguilar <agusx1211>\r\n * - Ignacio Mazzara <nachomazzara>\r\n */\r\ncontract LimitOrders is IModule, Order {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice receive ETH\r\n    receive() external override payable { }\r\n\r\n    /**\r\n     * @notice Executes an order\r\n     * @param _inputToken - Address of the input token\r\n     * @param _owner - Address of the order's owner\r\n     * @param _data - Bytes of the order's data\r\n     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\r\n     * @return bought - amount of output token bought\r\n     */\r\n    function execute(\r\n        IERC20 _inputToken,\r\n        uint256,\r\n        address payable _owner,\r\n        bytes calldata _data,\r\n        bytes calldata _auxData\r\n    ) external override returns (uint256 bought) {\r\n        (\r\n            IERC20 outputToken,\r\n            uint256 minReturn\r\n        ) = abi.decode(\r\n            _data,\r\n            (\r\n                IERC20,\r\n                uint256\r\n            )\r\n        );\r\n\r\n        (IHandler handler) = abi.decode(_auxData, (IHandler));\r\n\r\n        // Do not trust on _inputToken, it can mismatch the real balance\r\n        uint256 inputAmount = PineUtils.balanceOf(_inputToken, address(this));\r\n        _transferAmount(_inputToken, address(handler), inputAmount);\r\n\r\n        handler.handle(\r\n            _inputToken,\r\n            outputToken,\r\n            inputAmount,\r\n            minReturn,\r\n            _auxData\r\n        );\r\n\r\n        bought = PineUtils.balanceOf(outputToken, address(this));\r\n        require(bought >= minReturn, \"LimitOrders#execute: ISSUFICIENT_BOUGHT_TOKENS\");\r\n\r\n        _transferAmount(outputToken, _owner, bought);\r\n\r\n        return bought;\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether an order can be executed or not\r\n     * @param _inputToken - Address of the input token\r\n     * @param _inputAmount - uint256 of the input token amount (order amount)\r\n     * @param _data - Bytes of the order's data\r\n     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\r\n     * @return bool - whether the order can be executed or not\r\n     */\r\n    function canExecute(\r\n        IERC20 _inputToken,\r\n        uint256 _inputAmount,\r\n        bytes calldata _data,\r\n        bytes calldata _auxData\r\n    ) external override view returns (bool) {\r\n         (\r\n            IERC20 outputToken,\r\n            uint256 minReturn\r\n        ) = abi.decode(\r\n            _data,\r\n            (\r\n                IERC20,\r\n                uint256\r\n            )\r\n        );\r\n        (IHandler handler) = abi.decode(_auxData, (IHandler));\r\n\r\n        return handler.canHandle(\r\n            _inputToken,\r\n            outputToken,\r\n            _inputAmount,\r\n            minReturn,\r\n            _auxData\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer token or Ether amount to a recipient\r\n     * @param _token - Address of the token\r\n     * @param _to - Address of the recipient\r\n     * @param _amount - uint256 of the amount to be transferred\r\n     */\r\n    function _transferAmount(\r\n        IERC20 _token,\r\n        address payable _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (address(_token) == ETH_ADDRESS) {\r\n            (bool success,) = _to.call{value: _amount}(\"\");\r\n            require(success, \"LimitOrders#_transferAmount: ETH_TRANSFER_FAILED\");\r\n        } else {\r\n            require(SafeERC20.transfer(_token, _to, _amount), \"LimitOrders#_transferAmount: TOKEN_TRANSFER_FAILED\");\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_auxData\",\"type\":\"bytes\"}],\"name\":\"canExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_auxData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LimitOrders","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d8520b231374e6eca10f8940764394af157186ac6148805cce06e37ab888e457"}]}