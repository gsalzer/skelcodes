{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b,\"MUL ERROR\");\r\n    c = c / (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    c = c * (10 ** decimal);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a,\"Sub Error\");\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a,\"add ERROR\");\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n\r\n     // function totalSupply() public view returns (uint256);\r\n      function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n      function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n      function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n      function approve(address spender, uint256 tokens) public returns (bool success);\r\n      function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n      function decimals() public view returns(uint256);\r\n      function intTransfer(address _from, address _to, uint256 _amount) external returns(bool); // only for shuttleone token\r\n }\r\n\r\ncontract Permissions {\r\n\r\n  mapping (address=>bool) public permits;\r\n  bool allPermit;\r\n\r\n// all events will be saved as log files\r\n  event AddPermit(address _addr);\r\n  event RemovePermit(address _addr);\r\n\r\n  constructor() public {\r\n    permits[msg.sender] = true;\r\n    allPermit = false;\r\n  }\r\n\r\n  \r\n  modifier onlyPermits(){\r\n    require(permits[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  function isPermit(address _addr) public view returns(bool){\r\n    return permits[_addr];\r\n  }\r\n\r\n  function addPermit(address _addr) public onlyPermits{\r\n    require(permits[_addr] == false);\r\n    permits[_addr] = true;\r\n    emit AddPermit(_addr);\r\n  }\r\n\r\n\r\n\r\n  function removePermit(address _addr) public onlyPermits{\r\n    require(_addr != msg.sender);\r\n    permits[_addr] = false;\r\n    emit RemovePermit(_addr);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract ShuttleOneDepositPools is Permissions{\r\n  \r\n  event Deposit(address indexed _from,uint256 amount);\r\n    event Withdraw(address indexed _from,uint256 amount);\r\n    event WithdrawInterest(address indexed _from,uint256 amount);\r\n    event Borrow(address indexed _from,uint256 amount,uint256 interest);\r\n    event Interest(uint256 _old,uint256 _new);\r\n    event Repayment(address indexed,uint256 indexed contractID,uint256 amount);\r\n\r\n    struct BorrowContract{\r\n        uint256 amount;\r\n        uint256 repayAmount;\r\n        uint256 interestPay;\r\n        uint256 interest;\r\n        uint256 time;\r\n        uint256 status;  // 1 active 0 close\r\n        uint256 startTime;\r\n    }\r\n\r\n    struct DepositContract{\r\n        uint256 amount;\r\n        uint256 interest; //profit\r\n        uint256 startTime;\r\n    }\r\n\r\n    mapping (address => uint256) public balance;\r\n    mapping (address => uint256) depositIdx;\r\n\r\n    BorrowContract[] borrows;\r\n    DepositContract[]  deposits;\r\n\r\n    mapping (address=>uint256[]) contracts;\r\n\r\n    using SafeMath for uint256;\r\n    uint256 public borrowInterest;\r\n    uint256 public totalInterest;\r\n    uint256 public totalClaimInterest;\r\n    // uint256 public supplyInterest;\r\n    uint256 public totalSupply;\r\n    uint256 public totalBorrow;\r\n    uint256 public decimal;\r\n    string public TOKEN_POOLS;\r\n\r\n    ERC20  public token;\r\n    ERC20  public catToken;\r\n\r\n    uint256 oneYear = 365 days;\r\n    uint256 hundred;\r\n    bool  public  wrapPools;\r\n\r\n    uint256 public version = 5;\r\n\r\n    constructor() public{\r\n        \r\n    wrapPools = true;\r\n    token = ERC20(0xF2e2F3B79545F2EE6d2414C7463Ea2Dd740FafC0); // SWDAI\r\n    catToken = ERC20(0x2D916e99E53b31Ae968991472b15b90e1355E7B9); // CAT\r\n    decimal = token.decimals();\r\n    hundred = 100 * (10 ** decimal);\r\n    borrowInterest = 10 * (10 ** decimal);\r\n    TOKEN_POOLS = \"SWDAI\";\r\n    //catToken =\r\n  }\r\n\r\n  function loanBalance() public view returns(uint256){\r\n    if(totalBorrow > totalSupply) return 0;\r\n    else\r\n      return totalSupply - totalBorrow;\r\n  }\r\n\r\n  function setCatToken(address _addr) public onlyPermits{\r\n    catToken = ERC20(_addr);\r\n  }\r\n\r\n  function setBorrowInterest(uint256 _newInterst) public onlyPermits{\r\n     emit Interest(borrowInterest,_newInterst);\r\n     borrowInterest = _newInterst;\r\n  }\r\n\r\n  function getInterestProfit() public view returns(uint256){\r\n//      require(depositIdx[msg.sender] > 0,\"Not have deposit\");\r\n      if(depositIdx[msg.sender] == 0)\r\n         return 0;\r\n         \r\n      uint256 idx = depositIdx[msg.sender] - 1;\r\n\r\n      return deposits[idx].interest;\r\n  }\r\n\r\n  function deposit(address _from,uint256 amount) public returns (bool){\r\n      // check amount should not have decimal\r\n      uint256 havDecimal;\r\n      havDecimal = amount % (10 ** decimal);\r\n      if(havDecimal > 0){\r\n            \r\n          return false;\r\n      }\r\n      \r\n      \r\n       if(token.transferFrom(_from,address(this),amount) == true){\r\n            balance[_from] += amount;\r\n            emit Deposit(_from,amount);\r\n            totalSupply += amount;\r\n\r\n            uint256 idx = depositIdx[_from];\r\n            if(idx == 0){\r\n                DepositContract memory dep = DepositContract({\r\n                  amount:amount,\r\n                  interest:0,\r\n                  startTime:now\r\n                });\r\n                idx = deposits.push(dep);\r\n                depositIdx[_from] = idx;\r\n            }\r\n            else\r\n            {\r\n                idx = idx - 1;\r\n                if(balance[_from] == amount){\r\n                    deposits[idx].startTime = now;\r\n                }   \r\n                deposits[idx].amount += amount;\r\n            }\r\n\r\n\r\n        }\r\n        \r\n        return true;\r\n  } \r\n\r\n// When witdraw interest will reset to 0\r\n  function withdraw(uint256 amount) public returns(bool){\r\n    require(balance[msg.sender] >= amount,\"Not enought Token\");\r\n    require(loanBalance() >= amount,\"Not enouth FUND to withdraw\");\r\n    require(amount <= totalSupply,\"Not enouth token\");\r\n\r\n    if(token.transfer(msg.sender,amount) == true){\r\n        balance[msg.sender] -= amount;\r\n        uint256 idx = depositIdx[msg.sender] - 1;\r\n        deposits[idx].amount -= amount;\r\n        emit Withdraw(msg.sender,amount);\r\n        totalSupply -= amount;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function withdrawInterest(uint256 amount) public returns(bool){\r\n      require(depositIdx[msg.sender] > 0,\"Not deposit\");\r\n\r\n      \r\n      uint256 idx = depositIdx[msg.sender] - 1;\r\n      if(deposits[idx].interest < amount){\r\n          amount = deposits[idx].interest;\r\n          deposits[idx].interest = 0;\r\n\r\n      }\r\n      else\r\n      {\r\n          deposits[idx].interest -= amount;\r\n      }\r\n\r\n      totalClaimInterest += amount;\r\n      token.transfer(msg.sender,amount);\r\n      return true;\r\n\r\n  }\r\n  \r\n  function withdrawWithInterest(uint256 amount) public returns(bool){\r\n      require(depositIdx[msg.sender] > 0,\"Not deposit\");\r\n      require(amount > 0);\r\n      \r\n      uint256 idx = depositIdx[msg.sender] - 1;\r\n      \r\n      uint256 principle;\r\n      uint256 interest;\r\n      \r\n      if(deposits[idx].interest >= amount){\r\n          principle = 0;\r\n          interest = amount;\r\n      }\r\n      else\r\n      {\r\n          principle = amount - deposits[idx].interest;\r\n          interest = deposits[idx].interest;\r\n      }\r\n      if(principle > 0)\r\n          withdraw(principle);\r\n          \r\n      withdrawInterest(interest);\r\n      \r\n      return true;\r\n  }\r\n  \r\n  \r\n\r\n//============ All About contract ==============\r\n  function maxContractUser() public view returns(uint256){\r\n    return contracts[msg.sender].length;\r\n  }\r\n\r\n  function getContractUser() public view returns(uint256[] memory cons){\r\n    uint256 leng = contracts[msg.sender].length;\r\n    cons = new uint256[](leng);\r\n    cons = contracts[msg.sender];\r\n    \r\n  }\r\n  \r\n  function getMaxDeposit() public view returns(uint256){\r\n      return deposits.length;\r\n  }\r\n  \r\n  function getDepositDataIdx(uint256 idx) public view returns(uint256[] memory _data){\r\n      require(idx >=0 && idx < deposits.length);\r\n      \r\n      _data = new uint256[](3);\r\n      _data[0] = deposits[idx].amount;\r\n      _data[1] = deposits[idx].interest;\r\n      _data[2] = deposits[idx].startTime;\r\n  }\r\n  \r\n   function getDepositData(address addr) public view returns(uint256[] memory _data){\r\n      require(depositIdx[addr] > 0);\r\n      uint256 idx = depositIdx[addr] - 1;\r\n      return getDepositDataIdx(idx);\r\n  }\r\n  \r\n  \r\n  function getMaxBorrowContract() public view returns(uint256){\r\n      return borrows.length;\r\n  }\r\n\r\n  function getBorrowData(uint256 condIdx) public view returns(uint256[] memory _data){\r\n      require(condIdx <= borrows.length && condIdx > 0,\"Error not have this idx\");\r\n      uint256 idx = condIdx - 1;\r\n      _data = new uint256[](7);\r\n\r\n      _data[0] = borrows[idx].amount;\r\n      _data[1] = borrows[idx].interest;\r\n      _data[2] = borrows[idx].repayAmount;\r\n      _data[3] = borrows[idx].interestPay;\r\n      _data[4] = borrows[idx].time;\r\n      _data[5] = borrows[idx].status;\r\n      _data[6] = borrows[idx].startTime;\r\n\r\n  }\r\n\r\n  uint256 public SECPYEAR = 31536000;\r\n\r\n  \r\n    function _interest(uint256 _amount,uint256 _intPY,uint256 _time) internal view returns(uint256 fullInt){\r\n      \r\n\r\n      fullInt = _intPY / SECPYEAR / 100;\r\n      fullInt = (fullInt * _time); //fullInt.mul(_amount,decimal);\r\n      fullInt = fullInt.mul(_amount,decimal);\r\n\r\n  }\r\n  \r\n\r\n\r\n  function pricipleAndInterest(uint256 conIdx) public view returns(uint256 principle,uint256 _int){\r\n      require(conIdx <= borrows.length && conIdx > 0,\"Error not have this idx\");\r\n  \r\n      uint256 idx = conIdx - 1;\r\n\r\n      if(borrows[idx].status == 0)\r\n      {\r\n         return (0,0);\r\n      }\r\n\r\n      if(borrows[idx].repayAmount > borrows[idx].amount)\r\n        principle = 0;\r\n      else\r\n        principle = borrows[idx].amount - borrows[idx].repayAmount; \r\n\r\n      uint256 fullInt = _interest(principle,borrows[idx].interest,now - borrows[idx].time); //_intPerSec(borrows[idx].interest) * (now - borrows[idx].time); \r\n\r\n//      fullInt = fullInt.mul(borrows[idx].amount,decimal);\r\n\r\n      if(borrows[idx].interestPay > fullInt)\r\n         _int = 0;\r\n      else\r\n         _int  = fullInt - borrows[idx].interestPay;\r\n\r\n  }\r\n\r\n\r\n  function supplyInterest() public view returns(uint256){\r\n      uint256 supInt;\r\n      uint256 totalSupplyNoDecimal = totalSupply / (10 ** decimal);\r\n      \r\n      if(totalSupplyNoDecimal == 0)\r\n          return 0;\r\n      else\r\n      {\r\n          supInt =  (totalInterest * 100) / totalSupplyNoDecimal;\r\n      \r\n        //supInt =  totalInterest.div(totalSupply,decimal);\r\n        //supInt = supInt.mul(hundred,decimal);\r\n         return supInt;\r\n      }\r\n  }\r\n\r\n\r\n// amount in CATToken only\r\n  function _borrow(uint256 amount,address _addr) internal returns(uint256 contractID){\r\n      amount  = (amount / (10 ** 18)) * (10 ** 18);\r\n      require(amount <= catToken.balanceOf(_addr),\"not enought CAT Token\");\r\n      uint256 amountStable = (amount / (10 ** 18)) * (10 ** decimal);\r\n      require(amountStable <= totalSupply - totalBorrow,\"Not have fund to borrw\");\r\n\r\n      BorrowContract memory br = BorrowContract({\r\n          amount : amountStable,\r\n          interest: borrowInterest,\r\n          repayAmount:0,\r\n          interestPay:0,\r\n          time:now,\r\n          status:1,\r\n          startTime:now\r\n        });\r\n\r\n      uint256 idx = borrows.push(br);\r\n      contracts[_addr].push(idx);\r\n      catToken.intTransfer(_addr,address(this),amount);\r\n      token.transfer(_addr,amountStable);\r\n      totalBorrow += amountStable;\r\n\r\n      emit Borrow(_addr,amountStable,borrowInterest);\r\n      \r\n      return idx;\r\n  }\r\n\r\n  function borrow(uint256 amount) public returns(uint256 contractID){\r\n    return _borrow(amount,msg.sender);\r\n\r\n  }\r\n\r\n  function borrowWithAddr(uint256 amount,address _addr)public onlyPermits returns(uint256 contractID){\r\n    return _borrow(amount,_addr);\r\n  }\r\n  \r\n  function _getSupplyPercent(uint256 amount) internal view returns(uint256){\r\n      uint256 totalSupplyNoDecimal = totalSupply / (10 ** decimal);\r\n      uint256 percent = amount / totalSupplyNoDecimal;\r\n      \r\n      return percent;\r\n  }\r\n\r\n  function _shareInterest(uint256 amount) internal returns(uint256){\r\n    //  uint256 shareInt = amount.div(totalSupply,decimal); // it will be 0 \r\n      uint256 percent;\r\n      for(uint256 i=0;i<deposits.length;i++){\r\n          if(deposits[i].amount > 0){\r\n            percent = _getSupplyPercent(deposits[i].amount);\r\n            \r\n            deposits[i].interest +=   (amount * percent) / (10 ** decimal); \r\n          }\r\n      }\r\n  }\r\n  \r\n  //rePayment address want to approve first for DAI token\r\n  // Then will got CAT back\r\n\r\n  function _rePayment(uint256 amount,uint256 conIdx,address _addr,bool wrap) internal returns(bool){\r\n        require(conIdx > 0 && conIdx <= borrows.length);\r\n        uint256 idx = conIdx - 1;\r\n        require(borrows[idx].status == 1);\r\n\r\n        uint256 principle;\r\n        uint256 interest;\r\n        uint256 catReturn;\r\n        (principle,interest) = pricipleAndInterest(conIdx);\r\n\r\n\r\n        if(amount >= principle + interest){\r\n            amount = principle + interest; \r\n            if(wrap == true)\r\n              token.intTransfer(_addr,address(this),amount);\r\n            else\r\n              token.transferFrom(_addr,address(this),amount);\r\n\r\n            emit Repayment(_addr,conIdx,amount);\r\n\r\n            borrows[idx].interestPay += interest;\r\n            borrows[idx].repayAmount += principle;\r\n            totalInterest += interest;  \r\n            totalBorrow -= principle;\r\n            if(decimal < 18)\r\n               catReturn = principle * (10 ** (18 - decimal));\r\n            else\r\n               catReturn = principle;\r\n\r\n\r\n            catToken.transfer(_addr,catReturn);\r\n            _shareInterest(interest);\r\n            borrows[idx].time = now;\r\n            return true;\r\n        }\r\n        else{\r\n           if(wrap == true)\r\n            token.intTransfer(_addr,address(this),amount);\r\n           else\r\n            token.transferFrom(_addr,address(this),amount);\r\n           emit Repayment(_addr,conIdx,amount);\r\n\r\n           if(amount > interest){\r\n              principle = amount - interest;\r\n              borrows[idx].interestPay += interest;\r\n              borrows[idx].repayAmount += principle;\r\n              totalInterest += interest;\r\n              totalBorrow -= principle;\r\n              if(decimal < 18)\r\n                catReturn = principle * (10 ** (18 - decimal));\r\n              else\r\n                catReturn = principle;\r\n\r\n\r\n              catToken.transfer(_addr,catReturn);\r\n              _shareInterest(interest);\r\n               borrows[idx].time = now;\r\n              return true;\r\n           }\r\n           else\r\n           {\r\n              borrows[idx].interestPay += amount;\r\n              totalInterest += amount;\r\n              _shareInterest(amount);\r\n               borrows[idx].time = now;\r\n              return true;\r\n           }\r\n        }\r\n\r\n  }\r\n \r\n  function rePaymentWithWrap(uint256 amount,uint256 conIdx,address _addr) public onlyPermits returns(bool){\r\n      return _rePayment(amount,conIdx,_addr,true);\r\n  }\r\n\r\n  function rePayment(uint256 amount,uint256 conIdx) public returns(bool){\r\n      return _rePayment(amount,conIdx,msg.sender,false);\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"Interest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"RemovePermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawInterest\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECPYEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_POOLS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"borrowWithAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"catToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"condIdx\",\"type\":\"uint256\"}],\"name\":\"getBorrowData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cons\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDepositData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDepositDataIdx\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_data\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInterestProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxBorrowContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContractUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"conIdx\",\"type\":\"uint256\"}],\"name\":\"pricipleAndInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_int\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conIdx\",\"type\":\"uint256\"}],\"name\":\"rePayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"rePaymentWithWrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removePermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterst\",\"type\":\"uint256\"}],\"name\":\"setBorrowInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCatToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWithInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrapPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ShuttleOneDepositPools","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://51d4ef8aa670838768023bd4d90e59a19c68892b14cf2a2aeedfaab23a2c5b2d"}]}