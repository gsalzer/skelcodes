{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\ninterface IMoloch {\r\n    function getProposalFlags(uint256 proposalId) external view returns (bool[6] memory);\r\n    \r\n    function submitProposal(\r\n        address applicant,\r\n        uint256 sharesRequested,\r\n        uint256 lootRequested,\r\n        uint256 tributeOffered,\r\n        address tributeToken,\r\n        uint256 paymentRequested,\r\n        address paymentToken,\r\n        string calldata details\r\n    ) external returns (uint256);\r\n    \r\n    function withdrawBalance(address token, uint256 amount) external;\r\n}\r\n\r\ncontract Minion {\r\n    IMoloch public mol;\r\n    address public molochApprovedToken;\r\n    string public constant MINION_ACTION_DETAILS = '{\"isMinion\": true, \"title\":\"MINION\", \"description\":\"';\r\n    mapping (uint256 => Action) public actions; // proposalId => Action\r\n\r\n    struct Action {\r\n        uint256 value;\r\n        address to;\r\n        address proposer;\r\n        bool executed;\r\n        bytes data;\r\n    }\r\n\r\n    event ActionProposed(uint256 proposalId, address proposer);\r\n    event ActionExecuted(uint256 proposalId, address executor);\r\n\r\n    constructor(address _moloch, address _molochApprovedToken) public {\r\n        mol = IMoloch(_moloch);\r\n        molochApprovedToken = _molochApprovedToken;\r\n    }\r\n\r\n    // withdraw funds from the moloch\r\n    function doWithdraw(address _token, uint256 _amount) public {\r\n        mol.withdrawBalance(_token, _amount);\r\n    }\r\n\r\n    function proposeAction(\r\n        address _actionTo,\r\n        uint256 _actionValue,\r\n        bytes memory _actionData,\r\n        string memory _description\r\n    )\r\n        public\r\n        returns (uint256)\r\n    {\r\n        // No calls to zero address allows us to check that Minion submitted\r\n        // the proposal without getting the proposal struct from the moloch\r\n        require(_actionTo != address(0), \"Minion::invalid _actionTo\");\r\n\r\n        string memory details = string(abi.encodePacked(MINION_ACTION_DETAILS, _description, '\"}'));\r\n\r\n        uint256 proposalId = mol.submitProposal(\r\n            address(this),\r\n            0,\r\n            0,\r\n            0,\r\n            molochApprovedToken,\r\n            0,\r\n            molochApprovedToken,\r\n            details\r\n        );\r\n\r\n        Action memory action = Action({\r\n            value: _actionValue,\r\n            to: _actionTo,\r\n            proposer: msg.sender,\r\n            executed: false,\r\n            data: _actionData\r\n        });\r\n\r\n        actions[proposalId] = action;\r\n\r\n        emit ActionProposed(proposalId, msg.sender);\r\n        return proposalId;\r\n    }\r\n\r\n    function executeAction(uint256 _proposalId) public returns (bytes memory) {\r\n        Action memory action = actions[_proposalId];\r\n        bool[6] memory flags = mol.getProposalFlags(_proposalId);\r\n\r\n        // minion did not submit this proposal\r\n        require(action.to != address(0), \"Minion::invalid _proposalId\");\r\n        // can't call arbitrary functions on parent moloch\r\n        require(action.to != address(mol), \"Minion::invalid target\");\r\n        require(!action.executed, \"Minion::action executed\");\r\n        require(address(this).balance >= action.value, \"Minion::insufficient eth\");\r\n        require(flags[2], \"Minion::proposal not passed\");\r\n\r\n        // execute call\r\n        actions[_proposalId].executed = true;\r\n        (bool success, bytes memory retData) = action.to.call.value(action.value)(action.data);\r\n        require(success, \"Minion::call failure\");\r\n        emit ActionExecuted(_proposalId, msg.sender);\r\n        return retData;\r\n    }\r\n\r\n    function() external payable { }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moloch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_molochApprovedToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ActionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ActionProposed\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINION_ACTION_DETAILS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"doWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"executeAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mol\",\"outputs\":[{\"internalType\":\"contract IMoloch\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"molochApprovedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_actionTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"proposeAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Minion","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000066ef58ca2a388e779e4b2fdc19c8ac49104605ca000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://524effe597c62bf21cc249cbdf15945d78a6830ebccd8af7790a2f22e97a118b"}]}