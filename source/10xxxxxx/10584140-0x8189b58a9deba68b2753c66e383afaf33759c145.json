{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/src/Math/SafeMath.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/src/GCC/Oracle/GCCOracleInterface.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ncontract GCCOracleInterface {\r\n\r\n    function testConnection() public pure returns (bool);\r\n\r\n    function getAddress() public view returns (address);\r\n\r\n    function getFilterLength() public view returns (uint256);\r\n\r\n    function getFilter(uint256 index) public view returns (string memory, string memory, string memory, uint256);\r\n\r\n    function nowFilter() public view returns (string memory, string memory, string memory, uint256);\r\n\r\n    function addProof(address addr, bytes32 txid, uint64 coin) public returns (bool);\r\n\r\n    function addProofs(address[] memory addrList, bytes32[] memory txidList, uint64[] memory coinList) public returns (bool);\r\n\r\n    function getProof(address addr, bytes32 txid) public view returns (address, bytes32, uint64);\r\n\r\n    function getProofs(address addr) public view returns (address[] memory, bytes32[] memory, uint64[] memory);\r\n\r\n    function getProofs(address addr, uint cursor, uint limit) public view returns (address[] memory, bytes32[] memory, uint64[] memory);\r\n}\r\n\r\n// File: contracts/src/Base/Initializable.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  //uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/src/Base/Context.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/src/Access/Ownable.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    //uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/src/GCC/Oracle/GCCOracleReader.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\ncontract GCCOracleReader is Ownable {\r\n\r\n    address internal oracleAddr = address(0);\r\n    GCCOracleInterface internal oracle = GCCOracleInterface(oracleAddr);\r\n\r\n    function initialize(address sender) public initializer {\r\n        Ownable.initialize(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the oracle contract to use\r\n     *\r\n     * @return true if connection to the new oracle address was successful\r\n     */\r\n    function setOracleAddress(address _oracleAddress) public onlyOwner returns (bool) {\r\n        oracleAddr = _oracleAddress;\r\n        oracle = GCCOracleInterface(oracleAddr);\r\n        return oracle.testConnection();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the boxing oracle being used\r\n     */\r\n    function getOracleAddress() public view returns (address) {\r\n        return oracleAddr;\r\n    }\r\n\r\n    /**\r\n     * @dev Tests that the boxing oracle is callable\r\n     */\r\n    function testOracleConnection() public view returns (bool) {\r\n        return oracle.testConnection();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns length of added computation proofs\r\n     */\r\n    function getFilterLength() public view returns (uint256) {\r\n        return oracle.getFilterLength();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns computation strategy by index.\r\n     */\r\n    function getFilter(uint256 index) public view returns (string memory, string memory, string memory, uint256) {\r\n        return oracle.getFilter(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns newest computation strategy.\r\n     */\r\n    function nowFilter() public view returns (string memory, string memory, string memory, uint256) {\r\n        return oracle.nowFilter();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns existing proof by given address and txid\r\n     */\r\n    function getProof(address addr, bytes32 txid) public view returns (address, bytes32, uint64) {\r\n        return oracle.getProof(addr, txid);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns list of all proofs belonging to specified address\r\n     */\r\n    function getProofs(address addr) public view returns (address[] memory, bytes32[] memory, uint64[] memory) {\r\n        return oracle.getProofs(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns list of paged proofs belonging to specified address contrainted by cursor and limit\r\n     */\r\n    function getProofs(address addr, uint cursor, uint limit) public view returns (address[] memory, bytes32[] memory, uint64[] memory) {\r\n        return oracle.getProofs(addr, cursor, limit);\r\n    }\r\n}\r\n\r\n// File: contracts/src/GCC/Oracle/GCCOracleProofConsumer.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\ncontract GCCOracleProofConsumer is GCCOracleReader {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal _fullAmount;\r\n    uint256 internal _usedAmount;\r\n    mapping(address => uint256) internal _consumedProofs;\r\n\r\n    function initialize(address sender, uint256 maxAmount) public initializer {\r\n        _fullAmount = maxAmount;\r\n        GCCOracleReader.initialize(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Proves amount for given address with all accessible proofs.\r\n     */\r\n    function consumeProofs(address addr) public returns (bool) {\r\n        _consumeProofs(addr, 1000);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Proves amount for given address with a limit of newly processed proofs.\r\n     */\r\n    function consumeLimitedProofs(address addr, uint256 limit) public returns (bool) {\r\n        _consumeProofs(addr, limit);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns full consumable amount.\r\n     */\r\n    function getConsumableFullAmount() public view returns (uint256) {\r\n        return _fullAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns already used consumable amount.\r\n     */\r\n    function getConsumableUsedAmount() public view returns (uint256) {\r\n        return _usedAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns list of all already consumed proofs\r\n     */\r\n    function getConsumedProofs(address addr) public view returns (address[] memory, bytes32[] memory, uint64[] memory) {\r\n        uint256 consumedLimit = _consumedProofs[addr];\r\n        return oracle.getProofs(addr, 0, consumedLimit);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns list of few already consumed proofs constrained by cursor and limit\r\n     */\r\n    function fewConsumedProofs(address addr, uint cursor, uint limit) public view returns (address[] memory, bytes32[] memory, uint64[] memory) {\r\n        uint256 consumedLimit = _consumedProofs[addr].sub(cursor) < limit ? _consumedProofs[addr].sub(cursor) : limit;\r\n        return oracle.getProofs(addr, cursor, consumedLimit);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for proving amount(s)\r\n     */\r\n    function _consumeProofs(address addr, uint256 limit) internal {\r\n        require(getOracleAddress() != address(0), \"GCCOracleProofConsumer: Cannot provably mint tokens while there is no oracle!\");\r\n\r\n        uint256 prevCursor = _consumedProofs[addr];\r\n\r\n        address[] memory addrList;\r\n        bytes32[] memory txidList;\r\n        uint64 [] memory coinList;\r\n\r\n        (addrList, txidList, coinList) = getProofs(addr, prevCursor, limit);\r\n        uint256 size = addrList.length;\r\n        if (size == 0) return;\r\n\r\n        uint256 nextCursor = prevCursor.add(size);\r\n        uint256 mintAmount = 0;\r\n\r\n        for (uint256 i=0; i<size; i++) {\r\n            mintAmount = mintAmount.add(coinList[i]);\r\n        }\r\n\r\n        uint256 freeAmount = _fullAmount.sub(_usedAmount);\r\n        require(mintAmount <= freeAmount, \"GCCOracleProofConsumer: Cannot mint more tokens, limit exhausted!\");\r\n\r\n        _usedAmount = _usedAmount.add(mintAmount);\r\n        _consumedProofs[addr] = nextCursor;\r\n        _afterConsumeProofs(addr, mintAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook to execute when proving amount\r\n     */\r\n    function _afterConsumeProofs(address account, uint256 amount) internal {\r\n    }\r\n}\r\n\r\n// File: contracts/src/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/src/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * We have followed general guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal {\r\n    }\r\n\r\n    //uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/src/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is ERC20 {\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    //uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/src/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n\r\n    //uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/src/ERC20/ERC20StakableDiscreetly.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds staking mechanism.\r\n */\r\ncontract ERC20StakableDiscreetly is ERC20, Ownable {\r\n\r\n    uint256 internal _minTotalSupply;\r\n    uint256 internal _maxTotalSupply;\r\n\r\n    uint256 internal _stakeStartCheck; //stake start time\r\n    uint256 internal _stakeMinAge; // (3 days) minimum age for coin age: 3D\r\n    uint256 internal _stakeMaxAge; // (90 days) stake age of full weight: 90D\r\n    uint256 internal _stakeMinAmount; // (10**18) 1 token\r\n    uint8 internal _stakePrecision; // (10**18)\r\n\r\n    uint256 internal _stakeCheckpoint; // current checkpoint\r\n    uint256 internal _stakeInterval; // interval between checkpoints\r\n\r\n    struct stakeStruct {\r\n        uint256 amount; // staked amount\r\n        uint256 minCheckpoint; // timestamp of min checkpoint stakes qualifies for\r\n        uint256 maxCheckpoint; // timestamp of max checkpoint stakes qualifies for\r\n    }\r\n\r\n    uint256 internal _stakeSumReward;\r\n    uint256[] internal _stakeRewardAmountVals;\r\n    uint256[] internal _stakeRewardTimestamps;\r\n\r\n    mapping(address => stakeStruct) internal _stakes; // stakes\r\n    mapping(uint256 => mapping(uint256 => uint256)) internal _history; // historical stakes per checkpoint\r\n\r\n    uint256[] internal _tierThresholds; // thresholds between tiers\r\n    uint256[] internal _tierShares; // shares of reward per tier\r\n\r\n    event Stake(address indexed from, address indexed to, uint256 value);\r\n    event Checkpoint(uint256 timestamp, uint256 minted);\r\n\r\n    modifier activeStake() {\r\n        require(_stakeStartCheck > 0, \"ERC20: Staking has not started yet!\");\r\n        _tick();\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address sender, uint256 minTotalSupply, uint256 maxTotalSupply, uint8 stakePrecision\r\n    ) public initializer\r\n    {\r\n        Ownable.initialize(sender);\r\n\r\n        _minTotalSupply = minTotalSupply;\r\n        _maxTotalSupply = maxTotalSupply;\r\n        _mint(sender, minTotalSupply);\r\n\r\n        _stakePrecision = stakePrecision;\r\n        _stakeMinAmount = 10**(uint256(_stakePrecision)); // def is 1\r\n\r\n        _tierThresholds.push(10**(uint256(_stakePrecision)+6));\r\n        _tierThresholds.push(0);\r\n\r\n        _tierShares.push(20); // 20%\r\n        _tierShares.push(80); // 80%\r\n    }\r\n\r\n    /**\r\n     * @dev Set staking open timer and additional params.\r\n     */\r\n    function open(\r\n        uint256 stakeMinAmount, uint64 stakeMinAge, uint64 stakeMaxAge, uint64 stakeStart, uint64 stakeInterval\r\n    ) public onlyOwner returns (bool) {\r\n        require(_stakeStartCheck == 0, \"ERC20: Contract has been already opened!\");\r\n        _stakeInterval = uint256(stakeInterval);\r\n        _stakeStartCheck = uint256(stakeStart);\r\n        _stakeCheckpoint = uint256(stakeStart);\r\n        _stakeMinAge = uint256(stakeMinAge);\r\n        _stakeMaxAge = uint256(stakeMaxAge);\r\n        _stakeMinAmount = stakeMinAmount;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets reward by timestamp\r\n    */\r\n    function setReward(uint256 timestamp, uint256 amount) public onlyOwner returns (bool) {\r\n        _setReward(timestamp, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets reward by timestamp\r\n     */\r\n    function getReward(uint256 timestamp) public view returns (uint256) {\r\n        return _getReward(timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns number of coins staked by `account`\r\n     */\r\n    function stakeOf(address account) public view returns (uint256) {\r\n        return _stakeOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns number of valid coins staked by `account`\r\n     */\r\n    function activeStakeOf(address account) public view returns (uint256) {\r\n        return _stakeOf(account, _nextCheckpoint());\r\n    }\r\n\r\n    /**\r\n     * @dev Stakes all of user tokens and reward if possible.\r\n     *\r\n     * Emits {Stake} event indicating amount of tokens staked.\r\n     */\r\n    function restake() public activeStake returns (bool) {\r\n        _restake(_msgSender(), _nextCheckpoint());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Stakes specified `amount` of user tokens.\r\n     *\r\n     * Emits {Stake} event indicating amount of tokens staked.\r\n     */\r\n    function stake(uint256 amount) public activeStake returns (bool) {\r\n        _stake(_msgSender(), amount, _nextCheckpoint());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Stake all of user tokens.\r\n     *\r\n     * Emits {Stake} event indicating amount of tokens staked.\r\n     */\r\n    function stakeAll() public activeStake returns (bool) {\r\n        _stake(_msgSender(), balanceOf(_msgSender()),  _nextCheckpoint());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Stakes specified `amount` of user tokens.\r\n     *\r\n     * Emits {Stake} event indicating amount of tokens staked.\r\n     */\r\n    function unstake(uint256 amount) public activeStake returns (bool) {\r\n        _unstake(_msgSender(), amount, _nextCheckpoint());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes all of user tokens.\r\n     *\r\n     * Emits {Stake} event indicating amount of tokens unstaked.\r\n     */\r\n    function unstakeAll() public activeStake returns (bool) {\r\n        _unstake(_msgSender(), stakeOf(_msgSender()), _nextCheckpoint());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw user's reward for staking his tokens.\r\n     *\r\n     * Emits {Transfer} event.\r\n     * Emits {Stake} event.\r\n     */\r\n    function withdrawReward() public activeStake returns (bool) {\r\n        _mintReward(_msgSender(), _nextCheckpoint());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the potential reward that user can get for his/her staked coins if he/she was to withdraw it.\r\n     */\r\n    function estimateReward() public view returns (uint256) {\r\n        return _calcReward(_msgSender(), _nextCheckpoint());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns upcoming checkpoint timeout\r\n     */\r\n    function nextCheckpoint() public view returns (uint256) {\r\n        return _nextCheckpoint();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns previous checkpoint\r\n     */\r\n    function lastCheckpoint() public view returns (uint256) {\r\n        return _lastCheckpoint();\r\n    }\r\n\r\n    /**\r\n     * @dev Owner's method to manually update checkpoints.\r\n     */\r\n    function tick(uint256 repeats) public onlyOwner returns (bool) {\r\n        _tick(repeats);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner's method to manually tick next checkpoint.\r\n     */\r\n    function tickNext() public onlyOwner returns (bool) {\r\n        return _tickNext();\r\n    }\r\n\r\n    /**\r\n     * @dev Reward user.\r\n     */\r\n    function rewardStaker(address account) public onlyOwner activeStake returns (bool) {\r\n        _mintReward(account, _nextCheckpoint());\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns number of coins staked by `account`.\r\n     *\r\n     * This function returns number of all coins staked regardless of the time range.\r\n     */\r\n    function _stakeOf(address account) internal view returns (uint256) {\r\n        return _stakes[account].amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns number of coins staked by `account`\r\n     *\r\n     * This function returns number of only valid staked coins.\r\n     */\r\n    function _stakeOf(address account, uint256 checkpoint) internal view returns (uint256) {\r\n        if (_stakes[account].minCheckpoint <= checkpoint && _stakes[account].maxCheckpoint > checkpoint) {\r\n            return _stakes[account].amount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns upcoming checkpoint timeout\r\n     */\r\n    function _nextCheckpoint() internal view returns (uint256) {\r\n        return _stakeCheckpoint;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns previous checkpoint\r\n     */\r\n    function _lastCheckpoint() internal view returns (uint256) {\r\n        return _stakeCheckpoint.sub(_stakeInterval);\r\n    }\r\n\r\n    /**\r\n     * @dev Stakes given amount of coins belonging to user, with addition of any possible reward.\r\n     *\r\n     * Emits {Stake} event indicating amount of tokens staked.\r\n     *\r\n     * Requirements\r\n     * - `sender` cannot be the zero address\r\n     */\r\n    function _restake(address _sender, uint256 _nxtCheckpoint) internal {\r\n        _unstake(_sender, stakeOf(_sender), _nxtCheckpoint);\r\n        _stake(_sender, balanceOf(_sender), _nxtCheckpoint);\r\n    }\r\n\r\n    /**\r\n     * @dev Stakes given amount of coins belonging to user. New stake is always added to the old one, not replaced.\r\n     *\r\n     * Emits {Stake} event indicating amount of tokens staked.\r\n     *\r\n     * Requirements\r\n     * - `sender` cannot be the zero address\r\n     * - `amount` cannot be lesser than `_stakeMinAmount`\r\n     */\r\n    function _stake(address _sender, uint256 _amount, uint256 _nxtCheckpoint) internal {\r\n        require(_sender != address(0), \"ERC20Stakable: stake from the zero address!\");\r\n        require(_amount >= _stakeMinAmount, \"ERC20Stakable: stake amount is too low!\");\r\n        require(_nxtCheckpoint >= _stakeStartCheck && _stakeStartCheck > 0, \"ERC20Stakable: staking has not started yet!\");\r\n\r\n        stakeStruct memory prevStake = _stakes[_sender];\r\n        uint256 _prevAmount = prevStake.amount;\r\n        uint256 _nextAmount = _prevAmount.add(_amount);\r\n        if (_nextAmount == 0) return;\r\n\r\n        _unstake(_sender, _prevAmount, _nxtCheckpoint);\r\n\r\n        uint256 _minCheckpoint = _nxtCheckpoint.add(_stakeMinAge).sub(_stakeInterval);\r\n        uint256 _maxCheckpoint = _minCheckpoint.add(_stakeMaxAge);\r\n\r\n        uint256 _tierNext = _tierOf(_nextAmount);\r\n\r\n        uint256 _tmpCheckpoint = _minCheckpoint;\r\n        uint size = _maxCheckpoint.sub(_minCheckpoint).div(_stakeInterval);\r\n\r\n        for (uint i = 0; i < size; i++) {\r\n            _history[_tmpCheckpoint][_tierNext] = _history[_tmpCheckpoint][_tierNext].add(_nextAmount);\r\n            _tmpCheckpoint = _tmpCheckpoint.add(_stakeInterval);\r\n        }\r\n\r\n        stakeStruct memory nextStake = stakeStruct(_nextAmount, _minCheckpoint, _maxCheckpoint);\r\n\r\n        _decreaseBalance(_sender, _nextAmount);\r\n        _stakes[_sender] = nextStake;\r\n\r\n        emit Stake(address(0), _sender, _nextAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes all of the coins staked by the user and put them back into his/her balance.\r\n     *\r\n     * Requirements\r\n     * - `sender` cannot be the zero address\r\n     */\r\n    function _unstake(address _sender, uint256 _amount, uint256 _nxtCheckpoint) internal {\r\n        require(_sender != address(0), \"ERC20Stakable: unstake from the zero address!\");\r\n        require(_nxtCheckpoint >= _stakeStartCheck && _stakeStartCheck > 0, \"ERC20Stakable: staking has not started yet!\");\r\n\r\n        _mintReward(_sender, _nxtCheckpoint);\r\n\r\n        stakeStruct memory prevStake = _stakes[_sender];\r\n        uint256 _prevAmount = prevStake.amount;\r\n        if (_prevAmount == 0) return;\r\n        uint256 _nextAmount = _prevAmount.sub(_amount);\r\n\r\n        uint256 _minCheckpoint = _nxtCheckpoint > prevStake.minCheckpoint ? _nxtCheckpoint : prevStake.minCheckpoint;\r\n        uint256 _maxCheckpoint = prevStake.maxCheckpoint;\r\n        if (_minCheckpoint > _maxCheckpoint) _minCheckpoint = _maxCheckpoint;\r\n\r\n        uint256 _tierPrev = _tierOf(_prevAmount);\r\n        uint256 _tierNext = _tierOf(_nextAmount);\r\n\r\n        uint256 _tmpCheckpoint = _minCheckpoint;\r\n        uint size = _maxCheckpoint.sub(_minCheckpoint).div(_stakeInterval);\r\n\r\n        for (uint i = 0; i < size; i++) {\r\n            _history[_tmpCheckpoint][_tierPrev] = _history[_tmpCheckpoint][_tierPrev].sub(_prevAmount);\r\n            _history[_tmpCheckpoint][_tierNext] = _history[_tmpCheckpoint][_tierNext].add(_nextAmount);\r\n            _tmpCheckpoint = _tmpCheckpoint.add(_stakeInterval);\r\n        }\r\n\r\n        stakeStruct memory nextStake = stakeStruct(_nextAmount, prevStake.minCheckpoint, prevStake.maxCheckpoint);\r\n\r\n        _stakes[_sender] = nextStake;\r\n        _increaseBalance(_sender, _amount);\r\n\r\n        emit Stake(_sender, address(0), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints the reward to which `_address` is entitled to, adds this reward to his/her balance, and restakes his/her\r\n     * staked coins with resetted coinAge.\r\n     *\r\n     * Emits a {Transfer} event indicating the reward received by the user.\r\n     *\r\n     * Requirements\r\n     * - `_address` cannot be the zero address\r\n     */\r\n    function _mintReward(address _address, uint256 _nxtCheckpoint) internal {\r\n        require(_address != address(0), \"ERC20Stakable: withdraw from the zero address!\");\r\n        require(_nxtCheckpoint >= _stakeStartCheck && _stakeStartCheck > 0, \"ERC20Stakable: staking has not started yet!\");\r\n\r\n        stakeStruct memory prevStake = _stakes[_address];\r\n        uint256 _prevAmount = prevStake.amount;\r\n        if (_prevAmount == 0) return;\r\n\r\n        uint256 _minCheckpoint = prevStake.minCheckpoint;\r\n        uint256 _maxCheckpoint = _nxtCheckpoint < prevStake.maxCheckpoint ? _nxtCheckpoint : prevStake.maxCheckpoint;\r\n        if (_minCheckpoint >= _maxCheckpoint) return;\r\n\r\n        uint256 rewardAmount = _getProofOfStakeReward(_address, _minCheckpoint, _maxCheckpoint);\r\n        uint256 remainAmount = _maxTotalSupply.sub(_jointSupply());\r\n        if (rewardAmount > remainAmount) {\r\n            rewardAmount = remainAmount;\r\n        }\r\n\r\n        stakeStruct memory nextStake = stakeStruct(_prevAmount, _maxCheckpoint, prevStake.maxCheckpoint);\r\n\r\n        _stakes[_address] = nextStake;\r\n        _mint(_address, rewardAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the potential reward that user can get for his/her staked coins if he/she was to withdraw it.\r\n     */\r\n    function _calcReward(address _address, uint256 _nxtCheckpoint) internal view returns (uint256) {\r\n        require(_address != address(0), \"ERC20Stakable: calculate reward from the zero address!\");\r\n        require(_nxtCheckpoint >= _stakeStartCheck && _stakeStartCheck > 0, \"ERC20Stakable: staking has not started yet!\");\r\n\r\n        stakeStruct memory prevStake = _stakes[_address];\r\n        uint256 _minCheckpoint = prevStake.minCheckpoint;\r\n        uint256 _maxCheckpoint = _nxtCheckpoint < prevStake.maxCheckpoint ? _nxtCheckpoint : prevStake.maxCheckpoint;\r\n        if (_minCheckpoint >= _maxCheckpoint) return 0;\r\n        return _getProofOfStakeReward(_address, _minCheckpoint, _maxCheckpoint);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Proof of Stake Reward for given checkpoint\r\n     */\r\n    function _getProofOfStakeReward(address _address, uint256 _minCheckpoint, uint256 _maxCheckpoint) internal view returns (uint256) {\r\n        if (_minCheckpoint == 0 || _maxCheckpoint == 0) return 0;\r\n        uint256 _curReward = 0;\r\n        uint256 _tmpCheckpoint = _minCheckpoint;\r\n        uint size = _maxCheckpoint.sub(_minCheckpoint).div(_stakeInterval);\r\n\r\n        for (uint i = 0; i < size; i++) {\r\n            _curReward = _curReward.add(_getCheckpointReward(_address, _tmpCheckpoint));\r\n            _tmpCheckpoint = _tmpCheckpoint.add(_stakeInterval);\r\n        }\r\n        return _curReward;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns reward that owner of _address is entitled to for staking his coins.\r\n     *\r\n     * Requirements:\r\n     * - `_stakeStartCheck` must be lesser or equal to now time and different than zero.\r\n     */\r\n    function _getCheckpointReward(address _address, uint256 _checkpoint) internal view returns (uint256) {\r\n        if (_checkpoint < _stakeStartCheck || _stakeStartCheck <= 0) return 0;\r\n        uint256 maxReward = _getReward(_checkpoint);\r\n        uint256 userStake = _stakeOf(_address);\r\n        uint256 tier = _tierOf(userStake);\r\n        uint256 tierStake = _history[_checkpoint][tier];\r\n        if (tierStake == 0) return 0;\r\n        return maxReward.mul(_tierShares[tier]).div(100).mul(userStake).div(tierStake);\r\n    }\r\n\r\n    /**\r\n     * @dev Increases balance of tokens belonging to one user without increasing total supply!\r\n     *\r\n     * This is internal function designed to use when _balances variable is not the only one containing user overall\r\n     * balance. This method changes state of only that variable, so it needs to be used with caution. Make sure to use it\r\n     * properly and to not introduce state inconsistencies!!!\r\n     *\r\n     * Requirements:\r\n     * - `account` cannot be the zero address\r\n     * - `account` must have free space for balance of at least `amount`\r\n     */\r\n    function _increaseBalance(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20Stakable: balance increase from the zero address!\");\r\n        _balances[account] = _balances[account].add(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases balance of tokens belonging to one user without increasing total supply!\r\n     *\r\n     * This is internal function designed to use when _balances variable is not the only one containing user overall\r\n     * balance. This method changes state of only that variable, so it needs to be used with caution. Make sure to use it\r\n     * properly and to not introduce state inconsistencies!!!\r\n     *\r\n     * Requirements:\r\n     * - `account` cannot be the zero address\r\n     * - `account` must have a balance of at least `amount`\r\n     */\r\n    function _decreaseBalance(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20Stakable: balance decrease from the zero address!\");\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20Stakable: balance decrease amount exceeds balance!\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns initial balance with addition to all potential rewards received.\r\n     */\r\n    function _jointSupply() internal view returns (uint256) {\r\n        return _minTotalSupply.add(_stakeSumReward);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates checkpoint to the newest one.\r\n     */\r\n    function _tick() internal {\r\n        while (_tickNext()) {}\r\n    }\r\n\r\n    /**\r\n     * @dev Updates checkpoint to the newest one with circuit breaker.\r\n     */\r\n    function _tick(uint256 limit) internal {\r\n        for (uint256 max = limit; _tickNext() && max > 0; max--) {}\r\n    }\r\n\r\n    /**\r\n     * @dev Updates checkpoint to the next one.\r\n     */\r\n    function _tickNext() internal returns (bool) {\r\n        uint256 _now = uint256(now);\r\n        if (_now >= _stakeCheckpoint && _stakeCheckpoint > 0) {\r\n            _tickCheckpoint(_stakeCheckpoint, _stakeCheckpoint.add(_stakeInterval));\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates checkpoint to the next one.\r\n     */\r\n    function _tickCheckpoint(uint256 _prvCheckpoint, uint256 _newCheckpoint) internal {\r\n        uint256 _maxReward = (_prvCheckpoint == _stakeStartCheck) ? 0 :_getReward(_prvCheckpoint);\r\n\r\n        _stakeCheckpoint = _newCheckpoint;\r\n        _stakeSumReward = _stakeSumReward.add(_maxReward);\r\n\r\n        emit Checkpoint(_prvCheckpoint, _maxReward);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns tier of an amount.\r\n     */\r\n    function _tierOf(uint256 _amount) internal view returns (uint256) {\r\n        uint256 tier = 0;\r\n        uint256 tlen = _tierThresholds.length;\r\n        for (uint i = 0; i < tlen; i++) {\r\n            if (tier == i && _tierThresholds[i] != 0 && _tierThresholds[i] <= _amount) tier++;\r\n        }\r\n        return tier;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets reward by timestamp\r\n    */\r\n    function _setReward(uint256 timestamp, uint256 amount) internal {\r\n        uint256 _newestLen = _stakeRewardTimestamps.length;\r\n        uint256 _newestTimestamp = _newestLen == 0 ? 0 : _stakeRewardTimestamps[_newestLen-1];\r\n        require(amount >= 0, \"ERC20Stakable: future reward set too low\");\r\n        require(timestamp >= _newestTimestamp, \"ERC20Stakable: future timestamp cannot be set before current timestamp\");\r\n        _stakeRewardTimestamps.push(timestamp);\r\n        _stakeRewardAmountVals.push(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets reward by timestamp\r\n     */\r\n    function _getReward(uint256 timestamp) internal view returns (uint256) {\r\n        uint256 _currentTimestamp = 0;\r\n        uint256 _currentRewardVal = 0;\r\n        uint256 _rewardLen = _stakeRewardTimestamps.length;\r\n        for (uint256 i=0; i<_rewardLen; i++) {\r\n            if (timestamp >= _stakeRewardTimestamps[i]) {\r\n                _currentTimestamp = _stakeRewardTimestamps[i];\r\n                _currentRewardVal = _stakeRewardAmountVals[i];\r\n            }\r\n        }\r\n        return _currentRewardVal;\r\n    }\r\n\r\n    //uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/src/Role/Roles.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/src/Role/PauserRole.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\ncontract PauserRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isPauser(sender)) {\r\n            _addPauser(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n\r\n    //uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/src/Access/Pausable.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool internal _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        PauserRole.initialize(sender);\r\n\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    //uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/src/GCC/GCCDiscreteToken.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GCCDiscreteToken is GCCOracleProofConsumer, ERC20Detailed, ERC20Burnable, ERC20StakableDiscreetly, Pausable {\r\n\r\n    function initialize(\r\n        address sender, string memory name, string memory symbol, uint8 decimals, uint256 minTotalSupply, uint256 maxTotalSupply,\r\n        uint256 provableSupply\r\n    ) public initializer {\r\n        GCCOracleProofConsumer.initialize(sender, provableSupply);\r\n        ERC20Detailed.initialize(name, symbol, decimals);\r\n        ERC20StakableDiscreetly.initialize(sender, minTotalSupply, maxTotalSupply, decimals);\r\n        Pausable.initialize(sender);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    function restake() public whenNotPaused returns (bool) {\r\n        return super.restake();\r\n    }\r\n\r\n    function stake(uint256 amount) public whenNotPaused returns (bool) {\r\n        return super.stake(amount);\r\n    }\r\n\r\n    function stakeAll() public whenNotPaused returns (bool) {\r\n        return super.stakeAll();\r\n    }\r\n\r\n    function unstake(uint256 amount) public whenNotPaused returns (bool) {\r\n        return super.unstake(amount);\r\n    }\r\n\r\n    function unstakeAll() public whenNotPaused returns (bool) {\r\n        return super.unstakeAll();\r\n    }\r\n\r\n    function withdrawReward() public whenNotPaused returns (bool) {\r\n        return super.withdrawReward();\r\n    }\r\n\r\n    function estimateReward() public view whenNotPaused returns (uint256) {\r\n        return super.estimateReward();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook to execute when proving amount\r\n     */\r\n    function _afterConsumeProofs(address account, uint256 amount) internal {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    //uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/src/GCCDiscrete.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\ncontract GCCDiscrete is GCCDiscreteToken {\r\n\r\n    constructor(\r\n        string memory name, string memory symbol, uint8 decimals, uint256 minTotalSupply, uint256 maxTotalSupply,\r\n        uint256 provableSupply\r\n    ) public {\r\n        GCCDiscreteToken.initialize(_msgSender(), name, symbol, decimals, minTotalSupply, maxTotalSupply, provableSupply);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"name\":\"Checkpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"activeStakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"consumeLimitedProofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"consumeProofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"estimateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"fewConsumedProofs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConsumableFullAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConsumableUsedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getConsumedProofs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFilter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFilterLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getProofs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getProofs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provableSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"stakePrecision\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nowFilter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"stakeMinAge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeMaxAge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeInterval\",\"type\":\"uint64\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"testOracleConnection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repeats\",\"type\":\"uint256\"}],\"name\":\"tick\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tickNext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GCCDiscrete","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000017970b794f000000000000000000000000000000000000000000000000000000886c98b760000000000000000000000000000000000000000000000000000000669a34fd1d0000000000000000000000000000000000000000000000000000000000000000012476c6f62616c2033442043757272656e6379000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054743433344000000000000000000000000000000000000000000000000000000","EVMVersion":"petersburg","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3ef547811e8f184f5d76033d3068a986a4404ba159be0dc6396c76a44995dae2"}]}