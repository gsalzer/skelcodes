{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract A5T_Management{\r\n    address payable _owner;\r\n    uint constant decimals = 18;\r\n    address public A5T_Token_Address = address(0xe8272210954eA85DE6D2Ae739806Ab593B5d9c51);\r\n    address public InstantSale_Address = address(0x45341948A1197d08a648F9deEf87b5c32d0ea2b1);\r\n    address public BusinessDev_Address = address(0x45341948A1197d08a648F9deEf87b5c32d0ea2b1);\r\n    address public CoreTeam_Address = address(0x45341948A1197d08a648F9deEf87b5c32d0ea2b1);\r\n    address public Investor1_Address = address(0x45341948A1197d08a648F9deEf87b5c32d0ea2b1);\r\n\r\n    struct Variables {\r\n        uint ForSale;\r\n        uint InstantSale;\r\n        uint BusinessDev;\r\n        uint CoreTeam;\r\n        uint Investor1;\r\n        uint lockup_tokenSale_Time;\r\n        uint lockup_instantSale_Time;\r\n        uint lockup_BusinessDev_Time;\r\n        uint lockup_CoreTeam_Time;\r\n        uint lockup_Investor1_Time;\r\n        \r\n        uint startDate;\r\n        uint endDate;\r\n        \r\n    }\r\n    Variables public vars;\r\n    \r\n    uint public totalSold;\r\n    uint public totalClaimByIndividuals;\r\n    \r\n    event TokenBuy(address _buyer,uint _tokenAmount,uint _buyTime,uint _claimTime);\r\n    event TokenUpdate(address _buyer,uint _tokenAmount,uint _updateTime);\r\n    event TokenClaim(address _buyer,uint _tokenAmount,uint _claimTime);    \r\n    mapping(address => uint) public buyers;\r\n    \r\n    constructor () public {\r\n        _owner = msg.sender;\r\n        vars.ForSale                    =       5000000 * (10**decimals);        //5M\r\n        vars.InstantSale                =       70000   * (10**decimals);\r\n        vars.BusinessDev                =       1930000 * (10**decimals);        //1.93M\r\n        vars.CoreTeam                   =       7150000 * (10**decimals);        //7.15M\r\n        vars.Investor1                  =       5850000 * (10**decimals);        //5.85M\r\n        vars.lockup_tokenSale_Time      =       60;             //60 days\r\n        vars.lockup_instantSale_Time    =       0;              //instant distribution\r\n        vars.lockup_BusinessDev_Time    =       60;             //60 days\r\n        vars.lockup_CoreTeam_Time       =       545;            //545 days\r\n        vars.lockup_Investor1_Time      =       545;            //545 days\r\n        totalSold                       =       0;\r\n        vars.startDate                  =       0;\r\n        vars.endDate                    =       0;\r\n        totalClaimByIndividuals         =       0;\r\n    }\r\n    function addA5T(address _buyer,uint amount) public onlyOwner returns(uint _tokens){\r\n        require(totalSold + amount <= vars.ForSale,'no more for sale');\r\n        require(amount>0,'A5T must be >0');\r\n        \r\n        uint current_value = buyers[_buyer];\r\n        buyers[_buyer] = (current_value + amount);\r\n        totalSold += amount;\r\n        emit TokenBuy(_buyer,amount,now, now + vars.lockup_tokenSale_Time* 24 * 60 * 60);\r\n        return amount;\r\n    }\r\n    function updateA5Tsale(address _buyer,uint amount) public onlyOwner {\r\n        uint currentAmount = buyers[_buyer];\r\n        require(currentAmount>0,'not exist');\r\n        require(totalSold + amount - currentAmount <= vars.ForSale,'no more for sale');\r\n        buyers[_buyer] = amount;\r\n        totalSold = totalSold + amount - currentAmount;\r\n        emit TokenUpdate(_buyer,amount,now);\r\n    }\r\n    function claimInstantSale() public {\r\n        require(msg.sender == InstantSale_Address,'not the right one');\r\n        require(vars.startDate>0,'ICO not started');\r\n        require(vars.endDate>vars.startDate,'wrong end Date');\r\n        require(msg.sender == tx.origin, 'Caller must not be Contract Address');\r\n        require(now >= vars.endDate + vars.lockup_instantSale_Time * 24 * 60 * 60);\r\n        require(vars.InstantSale>0,'already claimed');\r\n        \r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        //send token from owner address to buyer\r\n        if (token.transferFrom(_owner,msg.sender,vars.InstantSale))\r\n        {\r\n            emit TokenClaim(msg.sender,vars.InstantSale,now);\r\n            vars.InstantSale = 0;\r\n        }\r\n        else\r\n            revert(); \r\n    }\r\n    function claimTokenSale() public {\r\n        require(buyers[msg.sender] >0,'no token to claim');\r\n        require(vars.startDate>0,'ICO not started');\r\n        require(vars.endDate>vars.startDate,'wrong end Date');\r\n        require(msg.sender == tx.origin, 'Caller must not be Contract Address');\r\n        require(now >= vars.endDate + vars.lockup_tokenSale_Time * 24 * 60 * 60,'not time for claim yet');\r\n \r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        //send token from owner address to buyer\r\n        totalClaimByIndividuals += buyers[msg.sender];\r\n        uint256 temp =  buyers[msg.sender];\r\n        buyers[msg.sender] = 0;\r\n        \r\n        if (token.transferFrom(_owner,msg.sender,temp))\r\n        {\r\n            emit TokenClaim(msg.sender,temp,now);\r\n        }\r\n        else\r\n            revert(); \r\n        \r\n    }\r\n    function claimCoreTeam() public {\r\n        require(msg.sender == CoreTeam_Address,'not the right one');\r\n        require(vars.startDate>0,'ICO not started');\r\n        require(vars.endDate>vars.startDate,'wrong end Date');\r\n        require(msg.sender == tx.origin, 'Caller must not be Contract Address');\r\n        require(now >= vars.endDate + vars.lockup_CoreTeam_Time * 24 * 60 * 60);\r\n        require(vars.CoreTeam>0,'already claimed');\r\n        \r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        //send token from owner address to buyer\r\n        if (token.transferFrom(_owner,msg.sender,vars.CoreTeam))\r\n        {\r\n            emit TokenClaim(msg.sender,vars.CoreTeam,now);\r\n            vars.CoreTeam = 0;\r\n        }\r\n        else\r\n            revert(); \r\n    }\r\n    function claimInvestor1() public {\r\n        require(msg.sender == Investor1_Address,'not the right one');\r\n        require(vars.startDate>0,'ICO not started');\r\n        require(vars.endDate>vars.startDate,'wrong end Date');\r\n        require(msg.sender == tx.origin, 'Caller must not be Contract Address');\r\n        require(now >= vars.endDate + vars.lockup_Investor1_Time * 24 * 60 * 60);\r\n        require(vars.Investor1>0,'already claimed');\r\n        \r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        //send token from owner address to buyer\r\n        if (token.transferFrom(_owner,msg.sender,vars.Investor1))\r\n        {\r\n            emit TokenClaim(msg.sender,vars.Investor1,now);\r\n            vars.Investor1 = 0;\r\n        }\r\n        else\r\n            revert(); \r\n    }\r\n    function claimBusinessDev() public {\r\n        require(msg.sender == BusinessDev_Address,'not the right one');\r\n        require(vars.startDate>0,'ICO not started');\r\n        require(vars.endDate>vars.startDate,'wrong end Date');\r\n        require(msg.sender == tx.origin, 'Caller must not be Contract Address');\r\n        require(now >= vars.endDate + vars.lockup_BusinessDev_Time * 24 * 60 * 60);\r\n        require(vars.BusinessDev>0,'already claimed');\r\n        \r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        //send token from owner address to buyer\r\n        if (token.transferFrom(_owner,msg.sender,vars.BusinessDev))\r\n        {\r\n            emit TokenClaim(msg.sender,vars.BusinessDev,now);\r\n            vars.BusinessDev = 0;\r\n        }\r\n        else\r\n            revert(); \r\n    }\r\n    \r\n    function ownerDistributeToken(address _holder)  public onlyOwner {\r\n        require(vars.startDate>0,'ICO not started');\r\n        require(vars.endDate>vars.startDate,'wrong end Date');\r\n        require(buyers[_holder] >0,'no token to claim');\r\n        require(now >= vars.endDate + vars.lockup_tokenSale_Time * 24 * 60 * 60,'not time for claim yet');\r\n \r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        //send token from owner address to buyer\r\n        if (token.transferFrom(_owner,_holder,buyers[_holder]))\r\n        {\r\n            emit TokenClaim(_holder,buyers[_holder],now);\r\n            buyers[_holder] = 0;\r\n        }\r\n        else\r\n            revert(); \r\n    }\r\n    function ownerDistributeInstantSale() public onlyOwner {\r\n        require(vars.startDate>0,'ICO not started');\r\n        require(vars.endDate>vars.startDate,'wrong end Date');\r\n        require(now >= vars.endDate + vars.lockup_instantSale_Time * 24 * 60 * 60);\r\n        require(vars.InstantSale>0,'already claimed');\r\n        \r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        //send token from owner address to buyer\r\n        if (token.transferFrom(_owner,InstantSale_Address,vars.InstantSale))\r\n        {\r\n            emit TokenClaim(InstantSale_Address,vars.InstantSale,now);\r\n            vars.InstantSale = 0;\r\n        }\r\n        else\r\n            revert(); \r\n    }\r\n    function ownerDistributeBusinessDev() public onlyOwner {\r\n        require(vars.startDate>0,'ICO not started');\r\n        require(vars.endDate>vars.startDate,'wrong end Date');\r\n        require(now >= vars.endDate + vars.lockup_BusinessDev_Time * 24 * 60 * 60);\r\n        require(vars.BusinessDev>0,'already claimed');\r\n        \r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        //send token from owner address to buyer\r\n        if (token.transferFrom(_owner,BusinessDev_Address,vars.BusinessDev))\r\n        {\r\n            emit TokenClaim(BusinessDev_Address,vars.BusinessDev,now);\r\n            vars.BusinessDev = 0;\r\n        }\r\n        else\r\n            revert(); \r\n    }\r\n    function ownerDistributeCoreTeam() public onlyOwner {\r\n        require(vars.startDate>0,'ICO not started');\r\n        require(vars.endDate>vars.startDate,'wrong end Date');\r\n        require(now >= vars.endDate + vars.lockup_CoreTeam_Time * 24 * 60 * 60);\r\n        require(vars.CoreTeam>0,'already claimed');\r\n        \r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        //send token from owner address to buyer\r\n        if (token.transferFrom(_owner,CoreTeam_Address,vars.CoreTeam))\r\n        {\r\n            emit TokenClaim(CoreTeam_Address,vars.CoreTeam,now);\r\n            vars.CoreTeam = 0;\r\n        }\r\n        else\r\n            revert(); \r\n    }\r\n    function ownerDistributeInvestor1() public onlyOwner {\r\n        require(vars.startDate>0,'ICO not started');\r\n        require(vars.endDate>vars.startDate,'wrong end Date');\r\n        require(now >= vars.endDate + vars.lockup_Investor1_Time * 24 * 60 * 60);\r\n        require(vars.Investor1>0,'already claimed');\r\n        \r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        //send token from owner address to buyer\r\n        if (token.transferFrom(_owner,Investor1_Address,vars.Investor1))\r\n        {\r\n            emit TokenClaim(Investor1_Address,vars.Investor1,now);\r\n            vars.Investor1 = 0;\r\n        }\r\n        else\r\n            revert(); \r\n    }\r\n    function burnUnsoldToken() public onlyOwner {\r\n        require(now >= vars.endDate + vars.lockup_tokenSale_Time * 24 * 60 * 60,'not time for claim yet');\r\n        A5TToken token = A5TToken(A5T_Token_Address);\r\n        token.burnFrom(_owner,vars.ForSale - totalSold);\r\n    }\r\n    \r\n    //getters setters\r\n    function setTokenDistribution(\r\n        uint ForSale,\r\n        uint InstantSale,\r\n        uint BusinessDev,\r\n        uint CoreTeam,\r\n        uint Investor1) onlyOwner public {\r\n            vars.ForSale = ForSale;\r\n            vars.InstantSale = InstantSale;\r\n            vars.BusinessDev = BusinessDev;\r\n            vars.CoreTeam = CoreTeam;\r\n            vars.Investor1 = Investor1;\r\n        }\r\n        \r\n    function setLockup(uint lockup_tokenSale_Time,\r\n        uint lockup_instantSale_Time,\r\n        uint lockup_BusinessDev_Time,\r\n        uint lockup_CoreTeam_Time,\r\n        uint lockup_Investor1_Time) onlyOwner public{\r\n            vars.lockup_tokenSale_Time = lockup_tokenSale_Time;\r\n            vars.lockup_instantSale_Time = lockup_instantSale_Time;\r\n            vars.lockup_BusinessDev_Time = lockup_BusinessDev_Time;\r\n            vars.lockup_CoreTeam_Time = lockup_CoreTeam_Time;\r\n            vars.lockup_Investor1_Time = lockup_Investor1_Time;\r\n        }\r\n        \r\n    function setstartDate(uint _date) onlyOwner public {\r\n        vars.startDate=_date;              \r\n    }\r\n    function setendDate(uint _date) onlyOwner public {\r\n        vars.endDate=_date;              \r\n    }\r\n    function setInstantSale_Address(address _InstantSale_Address) onlyOwner public {\r\n        require(_InstantSale_Address != address(0));\r\n        InstantSale_Address=_InstantSale_Address;              \r\n    }\r\n    function setA5T_Token_Address(address _A5T_Token_Address) onlyOwner public {\r\n        require(_A5T_Token_Address != address(0));\r\n        A5T_Token_Address=_A5T_Token_Address;              \r\n    }\r\n    function setBusinessDev_Address(address _address) onlyOwner public {\r\n        require(_address != address(0));\r\n        BusinessDev_Address=_address;              \r\n    }\r\n    function setCoreTeam_Address(address _address) onlyOwner public {\r\n        require(_address != address(0));\r\n        CoreTeam_Address=_address;              \r\n    }\r\n    function setInvestor1_Address(address _address) onlyOwner public {\r\n        require(_address != address(0));\r\n        Investor1_Address=_address;              \r\n    }\r\n    function getOwner() public view returns(address _oAddress) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner(){\r\n        require(msg.sender==_owner,'Not Owner');\r\n        _;\r\n    }  \r\n    function getOwnerBalance() public view returns(uint256 _balance) {\r\n        return _owner.balance;\r\n    }\r\n    function getContractBalance() public view returns(uint256 _contractBalance) {    \r\n        return address(this).balance;\r\n    }\r\n    //Protect the pool in case of hacking\r\n    function transferOwnership(address payable _newOwner) external {\r\n        require(msg.sender == _owner);\r\n        require(_newOwner != address(0) && _newOwner != _owner);\r\n        _owner = _newOwner;\r\n        \r\n    }\r\n    function kill() public {\r\n        require (msg.sender == _owner,'Not Owner');\r\n        _owner.transfer(address(this).balance);\r\n        selfdestruct(_owner);\r\n    }\r\n    function transferFund(uint256 amount) public {\r\n        require (msg.sender == _owner,'Not Owner');\r\n        require(amount<=address(this).balance,'exceed contract balance');\r\n        _owner.transfer(amount);\r\n    }\r\n}\r\n\r\n\r\ncontract A5TToken\r\n{\r\n    function getOwner() public returns(address);\r\n    function transferFrom(address, address, uint256) public returns (bool);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function gettotalSupply() public returns(uint256);\r\n    function burn(uint256 amount) public;\r\n    function burnFrom(address account, uint256 amount) public ;\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"}],\"name\":\"TokenBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"}],\"name\":\"TokenClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_updateTime\",\"type\":\"uint256\"}],\"name\":\"TokenUpdate\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"A5T_Token_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BusinessDev_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CoreTeam_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InstantSale_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Investor1_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addA5T\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsoldToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBusinessDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimCoreTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimInstantSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimInvestor1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_oAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerDistributeBusinessDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerDistributeCoreTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerDistributeInstantSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerDistributeInvestor1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"ownerDistributeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_A5T_Token_Address\",\"type\":\"address\"}],\"name\":\"setA5T_Token_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBusinessDev_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCoreTeam_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_InstantSale_Address\",\"type\":\"address\"}],\"name\":\"setInstantSale_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInvestor1_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockup_tokenSale_Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockup_instantSale_Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockup_BusinessDev_Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockup_CoreTeam_Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockup_Investor1_Time\",\"type\":\"uint256\"}],\"name\":\"setLockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"InstantSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BusinessDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CoreTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Investor1\",\"type\":\"uint256\"}],\"name\":\"setTokenDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setendDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setstartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimByIndividuals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateA5Tsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"InstantSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BusinessDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CoreTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Investor1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockup_tokenSale_Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockup_instantSale_Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockup_BusinessDev_Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockup_CoreTeam_Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockup_Investor1_Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"A5T_Management","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8972043ad94ce882a51c4d737ad8307525f9e825c4f9482367a8571fee5192ac"}]}