{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\n\r\n/*       AmpleForthGold AAU Midas Distributor. \r\n** \r\n**       (c) 2020. Developed by the AmpleForthGold Team.\r\n**  \r\n**       www.ampleforth.gold\r\n*/\r\n\r\n\r\n//import \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\r\n//pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n//import \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\r\n//pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n//import \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\r\n//pragma solidity ^0.5.0;\r\n\r\n//import \"../GSN/Context.sol\";\r\n//pragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n//import \"./TokenPool.sol\";\r\n//pragma solidity 0.5.0;\r\n\r\n//import \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\r\n//import \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title A simple holder of tokens.\r\n * This is a simple contract to hold tokens. It's useful in the case where a separate contract\r\n * needs to hold multiple distinct pools of the same token.\r\n */\r\ncontract TokenPool is Ownable {\r\n    IERC20 public token;\r\n\r\n    constructor(IERC20 _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return token.transfer(to, value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Midas Distributor\r\n * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\r\n *      Compound, Uniswap and Ampleforth.\r\n *\r\n *      The ampleforth geyser has the concept of a 'locked pool' in the geyser. MidasDistributor\r\n *      performs a similar action to the ampleforth geyser locked pool but allows for multiple\r\n *      geysers (which we call MidasAgents).\r\n *\r\n *      Distribution tokens are added to a pool in the contract and, over time, are sent to\r\n *      multiple midas agents based on a distribution share. Each agent gets a set\r\n *      percentage of the pool each time a distribution occurs.\r\n *\r\n *      Before unstaking the tokens in an agent it would be benifical to maximise the \r\n *      take: to perform a distribution. That distribution event would be at the stakholders\r\n *      expense, and we allow anyone to perform a distribution.\r\n *\r\n *      Multiple midas agents can be registered, deregistered and have their distribution\r\n *      percentage adjusted. The distributor must be locked for adjustments to be made.\r\n *\r\n *      More background and motivation available at the AmpleForthGold github & website.\r\n */\r\ncontract MidasDistributor is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event TokensLocked(uint256 amount, uint256 total);\r\n    event TokensDistributed(uint256 amount, uint256 total);\r\n\r\n    /* the ERC20 token to distribute */\r\n    IERC20 public token;\r\n\r\n    /* timestamp of last distribution event. */\r\n    uint256 public lastDistributionTimestamp;\r\n\r\n    /* When *true* the distributor:\r\n     *      1) shall distribute tokens to agents,\r\n     *      2) shall not allow for the registration or\r\n     *         modification of agent details.\r\n     * When *false* the distributor:\r\n     *      1) shall not distribute tokens to agents,\r\n     *      2) shall allow for the registration and\r\n     *         modification of agent details.\r\n     */\r\n    bool public distributing = false;\r\n\r\n    /* Allows us to represent a number by moving the decimal point. */\r\n    uint256 public constant DECIMALS_EXP = 10**12;\r\n\r\n    /* Represents the distribution rate per second.\r\n     * Distribution rate is (0.5% per day) == (5.78703e-8 per second).\r\n     */\r\n    uint256 public constant PER_SECOND_INTEREST \r\n        = (DECIMALS_EXP * 5) / (1000 * 1 days);\r\n\r\n    /* The collection of Agents and their percentage share. */\r\n    struct MidasAgent {\r\n        \r\n        /* reference to a Midas Agent (destination for distributions) */\r\n        address agent;\r\n\r\n        /* Share of the distribution as a percentage.\r\n         * i.e. 14% == 14\r\n         * The sum of all shares must be equal to 100.\r\n         */\r\n        uint8 share;\r\n    }\r\n    MidasAgent[] public agents;\r\n\r\n    /**\r\n     * @param _distributionToken The token to be distributed.\r\n     */\r\n    constructor(IERC20 _distributionToken) public {\r\n        token = _distributionToken;\r\n        lastDistributionTimestamp = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the distributing state of the contract\r\n     * @param _distributing the distributing state.\r\n     */\r\n    function setDistributionState(bool _distributing) external onlyOwner {\r\n        /* we can only become enabled if the sum of shares == 100%. */\r\n        if (_distributing == true) {\r\n            require(checkAgentPercentage() == true);\r\n        }\r\n\r\n        distributing = _distributing;\r\n    }\r\n\r\n    /**\r\n     * @notice Adds an Agent\r\n     * @param _agent Address of the destination agent\r\n     * @param _share Percentage share of distribution (can be 0)\r\n     */\r\n    function addAgent(address _agent, uint8 _share) external onlyOwner {\r\n        require(_share <= uint8(100));\r\n        distributing = false;\r\n        agents.push(MidasAgent({agent: _agent, share: _share}));\r\n    }\r\n\r\n    /**\r\n     * @notice Removes an Agent\r\n     * @param _index Index of Agent to remove.\r\n     *              Agent ordering may have changed since adding.\r\n     */\r\n    function removeAgent(uint256 _index) external onlyOwner {\r\n        require(_index < agents.length, \"index out of bounds\");\r\n        distributing = false;\r\n        if (_index < agents.length - 1) {\r\n            agents[_index] = agents[agents.length - 1];\r\n        }\r\n        agents.length--;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets an Agents share of the distribution.\r\n     * @param _index Index of Agents. Ordering may have changed since adding.\r\n     * @param _share Percentage share of the distribution (can be 0).\r\n     */\r\n    function setAgentShare(uint256 _index, uint8 _share) external onlyOwner {\r\n        require(\r\n            _index < agents.length,\r\n            \"index must be in range of stored tx list\"\r\n        );\r\n        require(_share <= uint8(100));\r\n        distributing = false;\r\n        agents[_index].share = _share;\r\n    }\r\n\r\n    /**\r\n     * @return Number of midas agents in agents list.\r\n     */\r\n    function agentsSize() public view returns (uint256) {\r\n        return agents.length;\r\n    }\r\n\r\n    /**\r\n     * @return boolean true if the percentage of all\r\n     *         agents equals 100%. */\r\n    function checkAgentPercentage() public view returns (bool) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < agents.length; i++) {\r\n            sum += agents[i].share;\r\n        }\r\n        return (uint256(100) == sum);\r\n    }\r\n\r\n    /**\r\n     * @return gets the total balance of the distributor\r\n     */\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getElapsedTime() public view returns(uint256) {\r\n        /* Checking for a wormhole or time dialation event.\r\n         * this error may also be caused by sunspots. */\r\n        require(block.timestamp >= lastDistributionTimestamp);\r\n        return (block.timestamp - lastDistributionTimestamp);\r\n    }\r\n\r\n    /* Gets the (total) amount that would be distributed\r\n     * if a distribution event happened now. */\r\n    function getDistributionAmount() public view returns (uint256) {\r\n        return\r\n            balance()\r\n            .mul(getElapsedTime())\r\n            .mul(PER_SECOND_INTEREST)\r\n            .div(DECIMALS_EXP);\r\n    }\r\n\r\n    /* Gets the amount that would be distributed to a specific agent\r\n     * if a distribution event happened now. */\r\n    function getAgentDistributionAmount(uint256 index)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(checkAgentPercentage() == true);\r\n        require(index < agents.length);\r\n\r\n        return\r\n            getDistributionAmount()\r\n            .mul(agents[index].share)\r\n            .div(100);\r\n    }\r\n\r\n    /**\r\n     * Distributes the tokens based on the balance and the distribution rate.\r\n     *\r\n     * Anyone can call, and should call prior to an unstake event.\r\n     */\r\n    function distribute() external {\r\n        require(distributing == true);\r\n        require(checkAgentPercentage() == true);\r\n        require(getDistributionAmount() > 0);\r\n\r\n        for (uint256 i = 0; i < agents.length; i++) {\r\n            uint256 amount = getAgentDistributionAmount(i);\r\n            if (amount > 0) {\r\n                require(token.transfer(agents[i].agent, amount));\r\n            }\r\n        }\r\n        lastDistributionTimestamp = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * Returns the balance to the owner of the contract. This is needed\r\n     * if there is a contract upgrade & for testing & validation purposes.\r\n     */\r\n    function returnBalance2Owner() external onlyOwner returns (bool) {\r\n        uint256 value = balance();\r\n        if (value == 0) {\r\n            return true;\r\n        }\r\n        return token.transfer(owner(), value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"agentsSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getElapsedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDistributionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnBalance2Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agents\",\"outputs\":[{\"name\":\"agent\",\"type\":\"address\"},{\"name\":\"share\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_share\",\"type\":\"uint8\"}],\"name\":\"addAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDistributionAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_distributing\",\"type\":\"bool\"}],\"name\":\"setDistributionState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PER_SECOND_INTEREST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgentDistributionAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkAgentPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_share\",\"type\":\"uint8\"}],\"name\":\"setAgentShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS_EXP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_distributionToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MidasDistributor","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008e54954b3bbc07dbe3349aebb6eaff8d91db5734","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://57775281e14ae4321337634e43f1a11f7267085f9e552d4a36ba9245269b9f8d"}]}