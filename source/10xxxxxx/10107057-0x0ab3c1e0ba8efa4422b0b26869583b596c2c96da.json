{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n** ██████╗ ██████╗ ███████╗███╗   ██╗        \r\n* ██╔═══██╗██╔══██╗██╔════╝████╗  ██║        \r\n* ██║   ██║██████╔╝█████╗  ██╔██╗ ██║        \r\n* ██║   ██║██╔═══╝ ██╔══╝  ██║╚██╗██║        \r\n* ╚██████╔╝██║     ███████╗██║ ╚████║        \r\n*  ╚═════╝ ╚═╝     ╚══════╝╚═╝  ╚═══╝        \r\n*                                           \r\n** ██████╗ ██████╗ ██╗   ██╗██████╗ ████████╗\r\n* ██╔════╝██╔═══██╗██║   ██║██╔══██╗╚══██╔══╝\r\n* ██║     ██║   ██║██║   ██║██████╔╝   ██║   \r\n* ██║     ██║   ██║██║   ██║██╔══██╗   ██║   \r\n* ╚██████╗╚██████╔╝╚██████╔╝██║  ██║   ██║   \r\n*/\r\n\r\npragma solidity 0.5.17;\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IToken { // brief ERC-20 interface\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n/*****************\r\nOpenCourt Protocol\r\n*****************/\r\ncontract OpenCourt is Context { \r\n    // internal references\r\n    address public judgeToken = 0x17A83B1eA24942fb6a913bCB87f38035AB205b68;\r\n    IToken private judge = IToken(judgeToken);\r\n    address public judgmentToken = 0x067b408EDDEea54D61172198Ae5D9077789da2A9;\r\n    IToken private judgment = IToken(judgmentToken);\r\n    string public emoji = \"🌐⚖👥️\";\r\n    string public procedures = \"lawdocs.eth\";\r\n    \r\n    // dispute tracking \r\n    uint256 public dispute; \r\n    mapping (uint256 => Dispute) public disp;\r\n    \r\n    struct Dispute {  \r\n        address complainant; \r\n        address respondent;\r\n        uint256 number;\r\n        string complaint;\r\n        string response;\r\n        string verdict;\r\n        bool resolved;\r\n        bool responded;\r\n    }\r\n    \r\n    event Complaint(address indexed complainant, address indexed respondent, uint256 indexed number, string complaint);\r\n    event ComplaintUpdated(uint256 indexed number, string complaint);\r\n    event Response(uint256 indexed number, string response);\r\n    event Verdict(uint256 indexed number, string verdict);\r\n    \r\n    /**************\r\n    COURT FUNCTIONS\r\n    **************/\r\n    /**Complaint*/\r\n    function submitComplaint(address respondent, string memory complaint) public {\r\n\tuint256 number = dispute + 1; \r\n\tdispute = dispute + 1;\r\n\t    \r\n        disp[number] = Dispute( \r\n            _msgSender(),\r\n            respondent,\r\n            number,\r\n            complaint,\r\n            \"PENDING\",\r\n            \"PENDING\",\r\n            false,\r\n            false);\r\n                \r\n        emit Complaint(_msgSender(), respondent, number, complaint);\r\n    }\r\n    \r\n    function updateComplaint(uint256 number, string memory updatedComplaint) public {\r\n        Dispute storage dis = disp[number];\r\n        require(_msgSender() == dis.complainant);\r\n        dis.complaint = updatedComplaint;\r\n        emit ComplaintUpdated(number, updatedComplaint);\r\n    }\r\n    \r\n    /**Response*/\r\n    function submitResponse(uint256 number, string memory response) public {\r\n\tDispute storage dis = disp[number];\r\n        require(_msgSender() == dis.respondent);\r\n        dis.response = response;\r\n        dis.responded = true;\r\n        emit Response(number, response);\r\n    }\r\n\r\n    /**Verdict*/\r\n    function issueVerdict(uint256 number, string memory verdict) public {\r\n        Dispute storage dis = disp[number];\r\n        require(dis.responded == true);\r\n        require(judge.balanceOf(_msgSender()) >= 1, \"judgeToken balance insufficient\");\r\n        require(_msgSender() != dis.complainant || _msgSender() != dis.respondent);\r\n        dis.verdict = verdict;\r\n        dis.resolved = true;\r\n        judgment.transfer(_msgSender(), 100000);\r\n        emit Verdict(number, verdict);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"complainant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"respondent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"complaint\",\"type\":\"string\"}],\"name\":\"Complaint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"complaint\",\"type\":\"string\"}],\"name\":\"ComplaintUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"}],\"name\":\"Response\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"verdict\",\"type\":\"string\"}],\"name\":\"Verdict\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"complainant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"respondent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"complaint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"verdict\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"responded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emoji\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"verdict\",\"type\":\"string\"}],\"name\":\"issueVerdict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"judgeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"judgmentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"procedures\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"respondent\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"complaint\",\"type\":\"string\"}],\"name\":\"submitComplaint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"}],\"name\":\"submitResponse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"updatedComplaint\",\"type\":\"string\"}],\"name\":\"updateComplaint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OpenCourt","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://97ec9e80f1541c54e991d36c42b7f2b60de4602c1157d20ada37662d894f55c4"}]}