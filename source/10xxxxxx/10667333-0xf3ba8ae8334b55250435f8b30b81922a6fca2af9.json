{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n/*\r\n\r\n                                      https://www.UniGraph.finance\r\n\r\n      ___           ___                       ___           ___           ___           ___           ___     \r\n     /\\__\\         /\\__\\          ___        /\\  \\         /\\  \\         /\\  \\         /\\  \\         /\\__\\    \r\n    /:/  /        /::|  |        /\\  \\      /::\\  \\       /::\\  \\       /::\\  \\       /::\\  \\       /:/  /    \r\n   /:/  /        /:|:|  |        \\:\\  \\    /:/\\:\\  \\     /:/\\:\\  \\     /:/\\:\\  \\     /:/\\:\\  \\     /:/__/     \r\n  /:/  /  ___   /:/|:|  |__      /::\\__\\  /:/  \\:\\  \\   /::\\~\\:\\  \\   /::\\~\\:\\  \\   /::\\~\\:\\  \\   /::\\  \\ ___ \r\n /:/__/  /\\__\\ /:/ |:| /\\__\\  __/:/\\/__/ /:/__/_\\:\\__\\ /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:\\__\\ /:/\\:\\  /\\__\\\r\n \\:\\  \\ /:/  / \\/__|:|/:/  / /\\/:/  /    \\:\\  /\\ \\/__/ \\/_|::\\/:/  / \\/__\\:\\/:/  / \\/__\\:\\/:/  / \\/__\\:\\/:/  /\r\n  \\:\\  /:/  /      |:/:/  /  \\::/__/      \\:\\ \\:\\__\\      |:|::/  /       \\::/  /       \\::/  /       \\::/  / \r\n   \\:\\/:/  /       |::/  /    \\:\\__\\       \\:\\/:/  /      |:|\\/__/        /:/  /         \\/__/        /:/  /  \r\n    \\::/  /        /:/  /      \\/__/        \\::/  /       |:|  |         /:/  /                      /:/  /   \r\n     \\/__/         \\/__/                     \\/__/         \\|__|         \\/__/                       \\/__/    \r\n\r\n\r\n*/\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// Uniswap v2 interfaces\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract Graph is Ownable {\r\n    string public name = \"UniGraph\";\r\n    string public symbol = \"GRAPH\";\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    constructor() public override {\r\n        _owner = msg.sender;\r\n        _feeTaker = msg.sender;\r\n        \r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonBalances[_owner] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        lastPoolFeeTime = now;\r\n        \r\n        emit Transfer(address(0x0), _owner, _totalSupply);\r\n    }\r\n\r\n    function updateBranding(string memory newName, string memory newSymbol) public onlyOwner {\r\n        name = newName;\r\n        symbol = newSymbol;\r\n    }\r\n\r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 100_000 * 10**DECIMALS;\r\n\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);  // (2^128) - 1\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    mapping(address => uint256) private _gonBalances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowedFragments;\r\n    \r\n    address public _feeTaker;\r\n    event FeeTakerTransferred(address indexed previousFeeTaker, address indexed newFeeTaker);\r\n    function transferFeeTaker(address newFeeTaker) public virtual onlyOwner {\r\n        emit FeeTakerTransferred(_feeTaker, newFeeTaker);\r\n        _feeTaker = newFeeTaker;\r\n    }\r\n    function feeTaker() public view returns (address) {\r\n        return _feeTaker;\r\n    }\r\n    \r\n    uint256 epoch = 0;\r\n    \r\n    function rebasePer(uint256 supplyPercent) external onlyOwner returns (uint256) {\r\n        epoch = epoch.add(1);\r\n        if(supplyPercent <= 50 || supplyPercent >= 100) {\r\n            revert();\r\n        }\r\n        uint256 absSupplyPercent = uint256(supplyPercent);\r\n        _totalSupply = _totalSupply.mul(absSupplyPercent).div(100);\r\n        \r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        emit LogRebase(epoch, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n\r\n    function rebase(int256 supplyDelta) external onlyOwner returns (uint256) {\r\n        epoch = epoch.add(1);\r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n\r\n        uint256 absSupplyDelta = uint256(supplyDelta);\r\n        if(supplyDelta < 0) {\r\n            absSupplyDelta = uint256(-supplyDelta);\r\n        }\r\n        if(supplyDelta < 0) {\r\n            _totalSupply = _totalSupply.sub(absSupplyDelta);\r\n        }\r\n        else {\r\n            _totalSupply = _totalSupply.add(absSupplyDelta);\r\n        }\r\n\r\n        \r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        emit LogRebase(epoch, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n        uint256 gonValue = value.mul(_gonsPerFragment);\r\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\r\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value);\r\n\r\n        uint256 gonValue = value.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\r\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] =\r\n            _allowedFragments[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    // Uniswap Pool Methods\r\n    IUniswapV2Factory public uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    \r\n    uint256 public POOL_FEE_DAILY_PERCENT = 1;\r\n    \r\n    function setPoolFeePercent(uint256 newPer) public onlyOwner {\r\n        require(newPer >= 0);\r\n        require(newPer < 5);\r\n        POOL_FEE_DAILY_PERCENT = newPer;\r\n    }\r\n    \r\n    function poolFeeAvailable() public view returns (uint256) {\r\n        uint256 timeBetweenLastPoolBurn = now - lastPoolFeeTime;\r\n        uint256 tokensInUniswapPool = balanceOf(uniswapPool);\r\n        uint256 dayInSeconds = 1 days;\r\n        return (tokensInUniswapPool.mul(POOL_FEE_DAILY_PERCENT)\r\n            .mul(timeBetweenLastPoolBurn))\r\n            .div(dayInSeconds)\r\n            .div(100);\r\n    }\r\n    \r\n    function pretty() public view returns (uint256) {\r\n        return _totalSupply.div(1e18);\r\n    }\r\n\r\n    address public uniswapPool;\r\n    uint256 public lastPoolFeeTime;\r\n    event PoolFeeDropped(uint256 amount, uint256 poolBalance);\r\n    function processFeePool() external onlyOwner {\r\n        // Reset last fee time\r\n        lastPoolFeeTime = now;\r\n\r\n        uint256 feeQty = poolFeeAvailable();\r\n\r\n        _totalSupply = _totalSupply.sub(feeQty);\r\n        \r\n        uint256 burnQtyInGons = _gonsPerFragment  * feeQty;\r\n        \r\n        _gonBalances[uniswapPool] = _gonBalances[uniswapPool].sub(burnQtyInGons);\r\n        _gonBalances[_owner] = _gonBalances[_owner].add(burnQtyInGons);\r\n\r\n        IUniswapV2Pair(uniswapPool).sync();\r\n\r\n        emit PoolFeeDropped(feeQty, balanceOf(uniswapPool));\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeTaker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTaker\",\"type\":\"address\"}],\"name\":\"FeeTakerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolBalance\",\"type\":\"uint256\"}],\"name\":\"PoolFeeDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_FEE_DAILY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPoolFeeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFeeAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pretty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyPercent\",\"type\":\"uint256\"}],\"name\":\"rebasePer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPer\",\"type\":\"uint256\"}],\"name\":\"setPoolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTaker\",\"type\":\"address\"}],\"name\":\"transferFeeTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"updateBranding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Graph","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3bff37d35432e1adb3805d1e11397dc297bfcaa3c78f16d59f94338bad8d7041"}]}