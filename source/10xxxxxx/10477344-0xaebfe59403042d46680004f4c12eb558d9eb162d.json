{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract owned {\r\n    address payable public owner;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n   function transfer(address _to, uint256 _value) external;\r\n   function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract ERC20Holder is owned {\r\n    mapping (address => bool) acceptedTokens;\r\n    function modToken(address token,bool accepted) public onlyOwner {\r\n        acceptedTokens[token] = accepted;\r\n    }\r\n    \r\n    function tokenFallback(address _from, uint _value, bytes memory _data) pure public returns (bytes32 hash) {\r\n        bytes32 tokenHash = keccak256(abi.encodePacked(_from,_value,_data));\r\n        return tokenHash;\r\n    }\r\n    \r\n    function() external  payable {}\r\n    \r\n    function withdraw() onlyOwner public {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function transferToken (address token,address to,uint256 val) public onlyOwner {\r\n        IERC20 erc20 = IERC20(token);\r\n        erc20.transfer(to,val);\r\n    }\r\n    \r\n}\r\n\r\ncontract oracleClient is ERC20Holder {\r\n    \r\n    address oracle;\r\n    \r\n    function setOracle(address a) public  onlyOwner {\r\n        \r\n        oracle = a;\r\n    }\r\n}\r\n\r\ninterface IOracle {\r\n    function  ask (uint8 typeSN, string calldata idPost,string calldata idUser, bytes32 idRequest) external;\r\n}\r\n\r\n\r\ncontract campaign is oracleClient {\r\n    \r\n    struct cpRatio {\r\n        uint256 likeRatio;\r\n        uint256 shareRatio;\r\n        uint256 viewRatio;\r\n    }\r\n    \r\n    struct Campaign {\r\n\t\taddress advertiser;\r\n\t\tstring dataUrl; \r\n\t\tuint64 startDate;\r\n\t\tuint64 endDate;\r\n\t\tuint64 nbProms;\r\n\t\tuint64 nbValidProms;\r\n\t\tmapping (uint64 => bytes32) proms;\r\n\t\tFund funds;\r\n\t\tmapping(uint8 => cpRatio) ratios;\r\n\t}\r\n\t\r\n\t\r\n\tstruct Fund {\r\n\t    address token;\r\n\t    uint256 amount;\r\n\t}\r\n\t\r\n\tstruct Result  {\r\n\t    bytes32 idProm;\r\n\t    uint64 likes;\r\n\t    uint64 shares;\r\n\t    uint64 views;\r\n\t}\r\n\t\r\n\tstruct promElement {\r\n\t    address influencer;\r\n\t    bytes32 idCampaign;\r\n\t    bool isAccepted;\r\n\t    Fund funds;\r\n\t    uint8 typeSN;\r\n\t    string idPost;\r\n\t    string idUser;\r\n\t    uint64 nbResults;\r\n\t    mapping (uint64 => bytes32) results;\r\n\t    bytes32 prevResult;\r\n\t}\r\n\r\n\t\r\n\tmapping (bytes32  => Campaign) public campaigns;\r\n\tmapping (bytes32  => promElement) public proms;\r\n\tmapping (bytes32  => Result) public results;\r\n\tmapping (bytes32 => bool) public isAlreadyUsed;\r\n\t\r\n\t\r\n\tevent CampaignCreated(bytes32 indexed id,uint64 startDate,uint64 endDate,string dataUrl);\r\n\tevent CampaignFundsSpent(bytes32 indexed id );\r\n\tevent CampaignApplied(bytes32 indexed id ,bytes32 indexed prom );\r\n\t\r\n    \r\n    function createCampaign(string memory dataUrl,\tuint64 startDate,uint64 endDate) public returns (bytes32 idCampaign) {\r\n        require(startDate > now);\r\n        require(endDate > now);\r\n        require(endDate > startDate);\r\n       \r\n        bytes32 campaignId = keccak256(abi.encodePacked(msg.sender,dataUrl,startDate,endDate,now));\r\n        campaigns[campaignId] = Campaign(msg.sender,dataUrl,startDate,endDate,0,0,Fund(address(0),0));\r\n        emit CampaignCreated(campaignId,startDate,endDate,dataUrl);\r\n        return campaignId;\r\n    }\r\n    \r\n    \r\n    \r\n    function modCampaign(bytes32 idCampaign,string memory dataUrl,\tuint64 startDate,uint64 endDate) public {\r\n        require(campaigns[idCampaign].advertiser == msg.sender);\r\n        require(campaigns[idCampaign].startDate > now);\r\n        require(startDate > now);\r\n        require(endDate > now);\r\n        require(endDate > startDate);\r\n       \r\n        campaigns[idCampaign].dataUrl = dataUrl;\r\n        campaigns[idCampaign].startDate = startDate;\r\n        campaigns[idCampaign].endDate = endDate;\r\n        emit CampaignCreated(idCampaign,startDate,endDate,dataUrl);\r\n    }\r\n    \r\n     function priceRatioCampaign(bytes32 idCampaign,uint8 typeSN,uint256 likeRatio,uint256 shareRatio,uint256 viewRatio) public {\r\n        require(campaigns[idCampaign].advertiser == msg.sender);\r\n        require(campaigns[idCampaign].startDate > now);\r\n        campaigns[idCampaign].ratios[typeSN] = cpRatio(likeRatio,shareRatio,viewRatio);\r\n    }\r\n    \r\n  \r\n    \r\n    function fundCampaign (bytes32 idCampaign,address token,uint256 amount) public {\r\n        require(campaigns[idCampaign].endDate > now);\r\n        require(campaigns[idCampaign].funds.token == address(0) || campaigns[idCampaign].funds.token == token);\r\n       \r\n        IERC20 erc20 = IERC20(token);\r\n        erc20.transferFrom(msg.sender,address(this),amount);\r\n        uint256 prev_amount = campaigns[idCampaign].funds.amount;\r\n        \r\n        campaigns[idCampaign].funds = Fund(token,amount+prev_amount);\r\n      \r\n    }\r\n    \r\n    function createPriceFundYt(string memory dataUrl,uint64 startDate,uint64 endDate,uint256 likeRatio,uint256 viewRatio,address token,uint256 amount) public returns (bytes32 idCampaign) {\r\n        bytes32 campaignId = createCampaign(dataUrl,startDate,endDate);\r\n        priceRatioCampaign(campaignId,2,likeRatio,0,viewRatio);\r\n        fundCampaign(campaignId,token,amount);\r\n        return campaignId;\r\n    }\r\n    \r\n    function createPriceFundAll(\r\n            string memory dataUrl,\r\n            uint64  startDate,\r\n            uint64 endDate,\r\n            \r\n             uint256[] memory ratios,\r\n            address token,\r\n            uint256 amount) public returns (bytes32 idCampaign) {\r\n        \r\n        require(startDate > now);\r\n        require(endDate > now);\r\n        require(endDate > startDate);\r\n       \r\n        bytes32 campaignId = keccak256(abi.encodePacked(msg.sender,dataUrl,startDate,endDate,now));\r\n        campaigns[campaignId] = Campaign(msg.sender,dataUrl,startDate,endDate,0,0,Fund(address(0),0));\r\n        emit CampaignCreated(campaignId,startDate,endDate,dataUrl);\r\n        \r\n       \r\n            priceRatioCampaign(campaignId,1,ratios[0],ratios[1],ratios[2]);\r\n            priceRatioCampaign(campaignId,2,ratios[3],ratios[4],ratios[5]);\r\n            priceRatioCampaign(campaignId,3,ratios[6],ratios[7],ratios[8]);\r\n            priceRatioCampaign(campaignId,4,ratios[9],ratios[10],ratios[11]);\r\n        \r\n        fundCampaign(campaignId,token,amount);\r\n        return campaignId;\r\n    }\r\n    \r\n    function applyCampaign(bytes32 idCampaign,uint8 typeSN, string memory idPost, string memory idUser) public returns (bytes32 idProm) {\r\n        bytes32 prom = keccak256(abi.encodePacked(idCampaign,typeSN,idPost,idUser));\r\n        require(campaigns[idCampaign].endDate > now);\r\n        require(!isAlreadyUsed[prom]);\r\n        idProm = keccak256(abi.encodePacked( msg.sender,typeSN,idPost,idUser,now));\r\n        proms[idProm] = promElement(msg.sender,idCampaign,false,Fund(address(0),0),typeSN,idPost,idUser,0,0);\r\n        campaigns[idCampaign].proms[campaigns[idCampaign].nbProms++] = idProm;\r\n        \r\n        bytes32 idRequest = keccak256(abi.encodePacked(typeSN,idPost,idUser,now));\r\n        results[idRequest] = Result(idProm,0,0,0);\r\n        proms[idProm].results[0] = proms[idProm].prevResult = idRequest;\r\n        proms[idProm].nbResults = 1;\r\n        \r\n        //ask(typeSN,idPost,idUser,idRequest);\r\n        \r\n        isAlreadyUsed[prom] = true;\r\n        \r\n        emit CampaignApplied(idCampaign,idProm);\r\n        return idProm;\r\n    }\r\n    \r\n    function validateProm(bytes32 idProm) public {\r\n        Campaign storage cmp = campaigns[proms[idProm].idCampaign];\r\n        require(cmp.endDate > now);\r\n        require(cmp.advertiser == msg.sender);\r\n        require(!proms[idProm].isAccepted);\r\n        \r\n        proms[idProm].isAccepted = true;\r\n        cmp.nbValidProms++;\r\n    }\r\n    \r\n    function applyAndValidate(bytes32 idCampaign,address influencer ,uint8 typeSN, string memory idPost, string memory idUser) public returns (bytes32 idProm) {\r\n        require(campaigns[idCampaign].advertiser == msg.sender || msg.sender == owner );\r\n         bytes32 prom = keccak256(abi.encodePacked(idCampaign,typeSN,idPost,idUser));\r\n        require(campaigns[idCampaign].endDate > now);\r\n        require(!isAlreadyUsed[prom]);\r\n        idProm = keccak256(abi.encodePacked( influencer,typeSN,idPost,idUser,now));\r\n        proms[idProm] = promElement(influencer,idCampaign,true,Fund(address(0),0),typeSN,idPost,idUser,0,0);\r\n        campaigns[idCampaign].proms[campaigns[idCampaign].nbProms++] = idProm;\r\n        campaigns[idCampaign].nbValidProms++;\r\n        \r\n        bytes32 idRequest = keccak256(abi.encodePacked(typeSN,idPost,idUser,now));\r\n        results[idRequest] = Result(idProm,0,0,0);\r\n        proms[idProm].results[0] = proms[idProm].prevResult = idRequest;\r\n        proms[idProm].nbResults = 1;\r\n        \r\n        //ask(typeSN,idPost,idUser,idRequest);\r\n        \r\n        isAlreadyUsed[prom] = true;\r\n        \r\n        emit CampaignApplied(idCampaign,idProm);\r\n        return idProm;\r\n    }\r\n    \r\n    \r\n    function startCampaign(bytes32 idCampaign) public  {\r\n         require(campaigns[idCampaign].advertiser == msg.sender || msg.sender == owner );\r\n         require(campaigns[idCampaign].startDate > now);\r\n         campaigns[idCampaign].startDate = uint64(now);\r\n    }\r\n    \r\n    function updateCampaignStats(bytes32 idCampaign) public  {\r\n        for(uint64 i = 0;i < campaigns[idCampaign].nbProms ;i++)\r\n        {\r\n            bytes32 idProm = campaigns[idCampaign].proms[i];\r\n            if(proms[idProm].isAccepted) {\r\n                bytes32 idRequest = keccak256(abi.encodePacked(proms[idProm].typeSN,proms[idProm].idPost,proms[idProm].idUser,now));\r\n                results[idRequest] = Result(idProm,0,0,0);\r\n                proms[idProm].results[proms[idProm].nbResults++] = idRequest;\r\n                ask(proms[idProm].typeSN,proms[idProm].idPost,proms[idProm].idUser,idRequest);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function updatePromStats(bytes32 idProm) public returns (bytes32 requestId) {\r\n        require(proms[idProm].isAccepted); \r\n        bytes32 idRequest = keccak256(abi.encodePacked(proms[idProm].typeSN,proms[idProm].idPost,proms[idProm].idUser,now));\r\n        results[idRequest] = Result(idProm,0,0,0);\r\n        proms[idProm].results[proms[idProm].nbResults++] = idRequest;\r\n        ask(proms[idProm].typeSN,proms[idProm].idPost,proms[idProm].idUser,idRequest);\r\n        return idRequest;\r\n    }\r\n    \r\n    function endCampaign(bytes32 idCampaign) public  {\r\n        require(campaigns[idCampaign].endDate > now);\r\n        require(campaigns[idCampaign].advertiser == msg.sender || msg.sender == owner );\r\n        campaigns[idCampaign].endDate = uint64(now);\r\n    }\r\n    \r\n    \r\n    function ask(uint8 typeSN, string memory idPost,string memory idUser,bytes32 idRequest) public {\r\n        IOracle o = IOracle(oracle);\r\n        o.ask(typeSN,idPost,idUser,idRequest);\r\n    }\r\n    \r\n    \r\n    function update(bytes32 idRequest,uint64 likes,uint64 shares,uint64 views) external  returns (bool ok) {\r\n        require(msg.sender == oracle);\r\n       \r\n        results[idRequest].likes = likes;\r\n        results[idRequest].shares = shares;\r\n        results[idRequest].views = views;\r\n        promElement storage prom = proms[results[idRequest].idProm];\r\n        uint256 gain = 0;\r\n        \r\n        if(likes > results[prom.prevResult].likes)\r\n            gain += (likes - results[prom.prevResult].likes)* campaigns[prom.idCampaign].ratios[prom.typeSN].likeRatio;\r\n        if(shares > results[prom.prevResult].shares)\r\n            gain += (shares - results[prom.prevResult].shares)* campaigns[prom.idCampaign].ratios[prom.typeSN].shareRatio;\r\n         if(views > results[prom.prevResult].views)\r\n        gain += (views - results[prom.prevResult].views)* campaigns[prom.idCampaign].ratios[prom.typeSN].viewRatio;\r\n        prom.prevResult = idRequest;\r\n        \r\n        //\r\n        // warn campaign low credits\r\n        //\r\n       \r\n       \r\n        if(prom.funds.token == address(0))\r\n        {\r\n            prom.funds.token = campaigns[prom.idCampaign].funds.token;\r\n        }\r\n        if(campaigns[prom.idCampaign].funds.amount <= gain )\r\n        {\r\n            campaigns[prom.idCampaign].endDate = uint64(now);\r\n            prom.funds.amount += campaigns[prom.idCampaign].funds.amount;\r\n            campaigns[prom.idCampaign].funds.amount = 0;\r\n            emit CampaignFundsSpent(prom.idCampaign);\r\n            return true;\r\n        }\r\n        campaigns[prom.idCampaign].funds.amount -= gain;\r\n        prom.funds.amount += gain;\r\n        return true;\r\n    }\r\n    \r\n    function getGains(bytes32 idProm) public {\r\n        require(proms[idProm].influencer == msg.sender);\r\n        IERC20 erc20 = IERC20(proms[idProm].funds.token);\r\n        uint256 amount = proms[idProm].funds.amount;\r\n        proms[idProm].funds.amount = 0;\r\n        erc20.transfer(proms[idProm].influencer,amount);\r\n        \r\n    }\r\n    \r\n    function getRemainingFunds(bytes32 idCampaign) public {\r\n        require(campaigns[idCampaign].advertiser == msg.sender);\r\n        require(campaigns[idCampaign].endDate < now);\r\n        IERC20 erc20 = IERC20(campaigns[idCampaign].funds.token);\r\n        uint256 amount = campaigns[idCampaign].funds.amount;\r\n        campaigns[idCampaign].funds.amount = 0;\r\n        erc20.transfer(campaigns[idCampaign].advertiser,amount);\r\n    }\r\n    \r\n    function getProms (bytes32 idCampaign) public view returns (bytes32[] memory cproms)\r\n    {\r\n        uint nbProms = campaigns[idCampaign].nbProms;\r\n        cproms = new bytes32[](nbProms);\r\n        \r\n        for (uint64 i = 0;i<nbProms;i++)\r\n        {\r\n            cproms[i] = campaigns[idCampaign].proms[i];\r\n        }\r\n        return cproms;\r\n    }\r\n    \r\n    function getRatios (bytes32 idCampaign) public view returns (uint8[] memory types,uint256[] memory likeRatios,uint256[] memory shareRatios,uint256[] memory viewRatios )\r\n    {   \r\n        types = new uint8[](4);\r\n        likeRatios = new uint256[](4);\r\n        shareRatios = new uint256[](4);\r\n        viewRatios = new uint256[](4);\r\n        for (uint8 i = 0;i<4;i++)\r\n        {\r\n            types[i] = i+1;\r\n            likeRatios[i] = campaigns[idCampaign].ratios[i+1].likeRatio;\r\n            shareRatios[i] = campaigns[idCampaign].ratios[i+1].shareRatio;\r\n            viewRatios[i] = campaigns[idCampaign].ratios[i+1].viewRatio;\r\n        }\r\n        return (types,likeRatios,shareRatios,viewRatios);\r\n    }\r\n    \r\n    \r\n    function getResults (bytes32 idProm) public view returns (bytes32[] memory creq)\r\n    {\r\n        uint nbResults = proms[idProm].nbResults;\r\n        creq = new bytes32[](nbResults);\r\n        for (uint64 i = 0;i<nbResults;i++)\r\n        {\r\n            creq[i] = proms[idProm].results[i];\r\n        }\r\n        return creq;\r\n    }\r\n    \r\n    function getIsUsed(bytes32 idCampaign,uint8 typeSN, string memory idPost, string memory idUser) public view returns (bool) {\r\n        bytes32 prom = keccak256(abi.encodePacked(idCampaign,typeSN,idPost,idUser));\r\n        return isAlreadyUsed[prom];\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"prom\",\"type\":\"bytes32\"}],\"name\":\"CampaignApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataUrl\",\"type\":\"string\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"CampaignFundsSpent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"influencer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"idPost\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"idUser\",\"type\":\"string\"}],\"name\":\"applyAndValidate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"idPost\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"idUser\",\"type\":\"string\"}],\"name\":\"applyCampaign\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"idPost\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"idUser\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"idRequest\",\"type\":\"bytes32\"}],\"name\":\"ask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"advertiser\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dataUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nbProms\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nbValidProms\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct campaign.Fund\",\"name\":\"funds\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"dataUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"dataUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"ratios\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createPriceFundAll\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"dataUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"likeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"viewRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createPriceFundYt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"endCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"name\":\"getGains\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"idPost\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"idUser\",\"type\":\"string\"}],\"name\":\"getIsUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"getProms\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"cproms\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"getRatios\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"types\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"likeRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"viewRatios\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"getRemainingFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"name\":\"getResults\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"creq\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isAlreadyUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"dataUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"}],\"name\":\"modCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"modToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"likeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"viewRatio\",\"type\":\"uint256\"}],\"name\":\"priceRatioCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"influencer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct campaign.Fund\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"typeSN\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"idPost\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"idUser\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"nbResults\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"prevResult\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"results\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"likes\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"shares\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"views\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"startCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idRequest\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"likes\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"shares\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"views\",\"type\":\"uint64\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idCampaign\",\"type\":\"bytes32\"}],\"name\":\"updateCampaignStats\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"name\":\"updatePromStats\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"idProm\",\"type\":\"bytes32\"}],\"name\":\"validateProm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"campaign","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://64ffc83ebfe7462807727e504ff490df9cdcb4ded391af0dd8c5d111363b1268"}]}