{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n//pragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\ncontract Governable is Initializable {\r\n    address public governor;\r\n\r\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\r\n\r\n    /**\r\n     * @dev Contract initializer.\r\n     * called once by the factory at time of deployment\r\n     */\r\n    function initialize(address governor_) virtual public initializer {\r\n        governor = governor_;\r\n        emit GovernorshipTransferred(address(0), governor);\r\n    }\r\n\r\n    modifier governance() {\r\n        require(msg.sender == governor);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governor to relinquish control of the contract.\r\n     * @notice Renouncing to governorship will leave the contract without an governor.\r\n     * It will not be possible to call the functions with the `governance`\r\n     * modifier anymore.\r\n     */\r\n    function renounceGovernorship() public governance {\r\n        emit GovernorshipTransferred(governor, address(0));\r\n        governor = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\r\n     * @param newGovernor The address to transfer governorship to.\r\n     */\r\n    function transferGovernorship(address newGovernor) public governance {\r\n        _transferGovernorship(newGovernor);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newGovernor.\r\n     * @param newGovernor The address to transfer governorship to.\r\n     */\r\n    function _transferGovernorship(address newGovernor) internal {\r\n        require(newGovernor != address(0));\r\n        emit GovernorshipTransferred(governor, newGovernor);\r\n        governor = newGovernor;\r\n    }\r\n}\r\n\r\n\r\ncontract Configurable is Governable {\r\n\r\n    mapping (bytes32 => uint) internal config;\r\n    \r\n    function getConfig(bytes32 key) public view returns (uint) {\r\n        return config[key];\r\n    }\r\n    function getConfig(bytes32 key, uint index) public view returns (uint) {\r\n        return config[bytes32(uint(key) ^ index)];\r\n    }\r\n    function getConfig(bytes32 key, address addr) public view returns (uint) {\r\n        return config[bytes32(uint(key) ^ uint(addr))];\r\n    }\r\n\r\n    function _setConfig(bytes32 key, uint value) internal {\r\n        if(config[key] != value)\r\n            config[key] = value;\r\n    }\r\n    function _setConfig(bytes32 key, uint index, uint value) internal {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function _setConfig(bytes32 key, address addr, uint value) internal {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n    \r\n    function setConfig(bytes32 key, uint value) external governance {\r\n        _setConfig(key, value);\r\n    }\r\n    function setConfig(bytes32 key, uint index, uint value) external governance {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function setConfig(bytes32 key, address addr, uint value) public governance {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n}\r\n\r\n\r\ninterface IFarm {\r\n    function getBonusToken() external view returns (address);\r\n}\r\n\r\ninterface IPool {\r\n    event Farming(address indexed farmer, address indexed from, uint amount);\r\n    event Unfarming(address indexed farmer, address indexed to, uint amount);\r\n    event Harvest(address indexed farmer, address indexed to, uint amount);\r\n    \r\n    function farming(uint amount) external;\r\n    function farming(address from, uint amount) external;\r\n    function unfarming() external returns (uint amount);\r\n    function unfarming(uint amount) external returns (uint);\r\n    function unfarming(address to, uint amount) external returns (uint);\r\n    function harvest() external returns (uint amount);\r\n    function harvest(address to) external returns (uint amount);\r\n    function harvestCapacity(address farmer) external view returns (uint amount);\r\n}\r\n\r\ncontract SimplePool is IPool, Configurable {\r\n    using SafeMath for uint;\r\n    using TransferHelper for address;\r\n\r\n\taddress public farm;\r\n\taddress public underlying;\r\n\tuint public span;\r\n\tuint public end;\r\n\tuint public totalStaking;\r\n\tmapping(address => uint) public stakingOf;\r\n\tmapping(address => uint) public lasttimeOf;\r\n\t\r\n\tfunction initialize(address governor, address _farm, address _underlying) public initializer {\r\n\t    super.initialize(governor);\r\n\t    \r\n\t    farm        = _farm;\r\n\t    underlying  = _underlying;\r\n\t    \r\n\t    IFarm(farm).getBonusToken();                  // just check\r\n\t    IERC20(underlying).totalSupply();          // just check\r\n\t}\r\n    \r\n    function setHarvestSpan(uint _span, bool isLinear) virtual external governance {\r\n        span = _span;\r\n        if(isLinear)\r\n            end = now + _span;\r\n        else\r\n            end = 0;\r\n    }\r\n    \r\n    function farming(uint amount) virtual override external {\r\n        farming(msg.sender, amount);\r\n    }\r\n    function farming(address from, uint amount) virtual override public {\r\n        harvest();\r\n        \r\n        _farming(from, amount);\r\n        \r\n        stakingOf[msg.sender] = stakingOf[msg.sender].add(amount);\r\n        totalStaking = totalStaking.add(amount);\r\n        \r\n        emit Farming(msg.sender, from, amount);\r\n    }\r\n    function _farming(address from, uint amount) virtual internal {\r\n        underlying.safeTransferFrom(from, address(this), amount);\r\n    }\r\n    \r\n    function unfarming() virtual override external returns (uint amount){\r\n        return unfarming(msg.sender, stakingOf[msg.sender]);\r\n    }\r\n    function unfarming(uint amount) virtual override external returns (uint){\r\n        return unfarming(msg.sender, amount);\r\n    }\r\n    function unfarming(address to, uint amount) virtual override public returns (uint){\r\n        harvest();\r\n        \r\n        totalStaking = totalStaking.sub(amount);\r\n        stakingOf[msg.sender] = stakingOf[msg.sender].sub(amount);\r\n        \r\n        _unfarming(to, amount);\r\n        \r\n        emit Unfarming(msg.sender, to, amount);\r\n        return amount;\r\n    }\r\n    function _unfarming(address to, uint amount) virtual internal returns (uint){\r\n        underlying.safeTransfer(to, amount);\r\n        return amount;\r\n    }\r\n    \r\n    function harvest() virtual override public returns (uint amount) {\r\n        return harvest(msg.sender);\r\n    }\r\n    function harvest(address to) virtual override public returns (uint amount) {\r\n        amount = harvestCapacity(msg.sender);\r\n        _harvest(to, amount);\r\n    \r\n        lasttimeOf[msg.sender] = now;\r\n\r\n        emit Harvest(msg.sender, to, amount);\r\n    }\r\n    function _harvest(address to, uint amount) virtual internal {\r\n        if(amount > 0) {\r\n            IFarm(farm).getBonusToken().safeTransferFrom(farm, to, amount);\r\n            if(config['teamAddr'] != 0 && config['teamRatio'] != 0)\r\n                IFarm(farm).getBonusToken().safeTransferFrom(farm, address(config['teamAddr']), amount.mul(config['teamRatio']).div(1 ether));\r\n        }\r\n    }\r\n    \r\n    function harvestCapacity(address farmer) virtual override public view returns (uint amount) {\r\n        if(span == 0 || totalStaking == 0)\r\n            return amount;\r\n        \r\n        amount = IERC20(IFarm(farm).getBonusToken()).allowance(farm, address(this));\r\n        amount = amount.mul(stakingOf[farmer]).div(totalStaking);\r\n        \r\n        uint lasttime = lasttimeOf[farmer];\r\n        if(end == 0) {                                                         // isNonLinear, endless\r\n            if(now.sub(lasttime) < span)\r\n                amount = amount.mul(now.sub(lasttime)).div(span);\r\n        }else if(now < end)\r\n            amount = amount.mul(now.sub(lasttime)).div(end.sub(lasttime));\r\n        else if(lasttime >= end)\r\n            amount = 0;\r\n    }\r\n} \r\n\r\ncontract ExactPool is IPool, Configurable {\r\n    using SafeMath for uint;\r\n    using TransferHelper for address;\r\n\r\n\tbytes32 constant private _bonusPerDay_\t\t= 'bonusPerDay';\r\n\r\n\taddress public farm;\r\n\taddress public underlying;\r\n\tuint public totalStaking;\r\n\tmapping(address => uint) public stakingOf;\r\n\tmapping(address => uint) public sumRewardPerOf;\r\n\tuint public sumRewardPer;\r\n\tuint public lasttime;\r\n\t\r\n\tfunction initialize(address governor, address _farm, address _underlying, uint bonusPerDay) virtual public initializer {\r\n\t    super.initialize(governor);\r\n\t    \r\n\t    farm     = _farm;\r\n\t    underlying  = _underlying;\r\n\t\tconfig[_bonusPerDay_] = bonusPerDay;\r\n        lasttime = now;\r\n\t    \r\n\t    IFarm(farm).getBonusToken();                   // just check\r\n\t    IERC20(underlying).totalSupply();           // just check\r\n\t}\r\n    \r\n    function farming(uint amount) virtual override external {\r\n        farming(msg.sender, amount);\r\n    }\r\n    function farming(address from, uint amount) virtual override public {\r\n        harvest();\r\n        \r\n        _farming(from, amount);\r\n        \r\n        stakingOf[msg.sender] = stakingOf[msg.sender].add(amount);\r\n        totalStaking = totalStaking.add(amount);\r\n        \r\n        emit Farming(msg.sender, from, amount);\r\n    }\r\n    function _farming(address from, uint amount) virtual internal {\r\n        underlying.safeTransferFrom(from, address(this), amount);\r\n    }\r\n    \r\n    function unfarming() virtual override external returns (uint amount){\r\n        return unfarming(msg.sender, stakingOf[msg.sender]);\r\n    }\r\n    function unfarming(uint amount) virtual override external returns (uint){\r\n        return unfarming(msg.sender, amount);\r\n    }\r\n    function unfarming(address to, uint amount) virtual override public returns (uint){\r\n        harvest();\r\n        \r\n        totalStaking = totalStaking.sub(amount);\r\n        stakingOf[msg.sender] = stakingOf[msg.sender].sub(amount);\r\n        \r\n        _unfarming(to, amount);\r\n        \r\n        emit Unfarming(msg.sender, to, amount);\r\n        return amount;\r\n    }\r\n    function _unfarming(address to, uint amount) virtual internal returns (uint){\r\n        underlying.safeTransfer(to, amount);\r\n        return amount;\r\n    }\r\n    \r\n    function harvest() virtual override public returns (uint amount) {\r\n        return harvest(msg.sender);\r\n    }\r\n    function harvest(address to) virtual override public returns (uint amount) {\r\n        amount = 0;\r\n        if(totalStaking == 0)\r\n            return amount;\r\n        \r\n        uint delta = _harvestDelta();\r\n        amount = _harvestCapacity(msg.sender, delta, sumRewardPer, sumRewardPerOf[msg.sender]);\r\n        \r\n        if(delta > 0)\r\n            sumRewardPer = sumRewardPer.add(delta.mul(1 ether).div(totalStaking));\r\n        if(sumRewardPerOf[msg.sender] != sumRewardPer)\r\n            sumRewardPerOf[msg.sender] = sumRewardPer;\r\n        lasttime = now;\r\n\r\n        _harvest(to, amount);\r\n    \r\n        emit Harvest(msg.sender, to, amount);\r\n    }\r\n    function _harvest(address to, uint amount) virtual internal {\r\n        if(amount > 0) {\r\n            IFarm(farm).getBonusToken().safeTransferFrom(farm, to, amount);\r\n            if(config['teamAddr'] != 0 && config['teamRatio'] != 0)\r\n                IFarm(farm).getBonusToken().safeTransferFrom(farm, address(config['teamAddr']), amount.mul(config['teamRatio']).div(1 ether));\r\n        }\r\n    }\r\n    \r\n    function harvestCapacity(address farmer) virtual override public view returns (uint amount) {\r\n        amount = _harvestCapacity(farmer, _harvestDelta(), sumRewardPer, sumRewardPerOf[farmer]);\r\n    }\r\n    function _harvestCapacity(address farmer, uint delta, uint sumPer, uint lastSumPer) virtual internal view returns (uint amount) {\r\n        if(totalStaking == 0)\r\n            return 0;\r\n        \r\n        amount = sumPer.sub(lastSumPer);\r\n        amount = amount.add(delta.mul(1 ether).div(totalStaking));\r\n        amount = amount.mul(stakingOf[farmer]).div(1 ether);\r\n    }\r\n    function _harvestDelta() virtual internal view returns(uint) {\r\n\t\tif(now > lasttime)\r\n\t\t\treturn getBonusPerDay().mul(now.sub(lasttime)).div(1 days);\r\n\t\telse\r\n\t\t    return 0;\r\n    }\r\n    \r\n    function getBonusPerDay() public view returns (uint) {\r\n        return config[_bonusPerDay_];\r\n    }\r\n} \r\n\r\ncontract LiquidityPool is ExactPool {\r\n\tfunction initialize(address governor, address bounce, address lp_token, uint bonusPerDay) virtual override public initializer {\r\n\t    super.initialize(governor, bounce, lp_token, bonusPerDay);\r\n\t}\r\n}\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Farming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unfarming\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"farming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"farming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBonusPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"harvestCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bounce\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonusPerDay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lasttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumRewardPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sumRewardPerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unfarming\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unfarming\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfarming\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquidityPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://12968eb56a2fff182beff4c3b985d7001dd25f38f4c3d6061793bc9c7ff4b60d"}]}