{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n/*\r\n\r\n                 _     _   _                  _     _                         _         \r\n  _ __    __ _  (_)   (_) (_)  _ __     ___  | |_  | |__     ___   _ __      (_)   ___  \r\n | '__|  / _` | | |   | | | | | '_ \\   / _ \\ | __| | '_ \\   / _ \\ | '__|     | |  / _ \\ \r\n | |    | (_| | | |   | | | | | | | | |  __/ | |_  | | | | |  __/ | |     _  | | | (_) |\r\n |_|     \\__,_| |_|  _/ | |_| |_| |_|  \\___|  \\__| |_| |_|  \\___| |_|    (_) |_|  \\___/ \r\n                    |__/                                                                \r\n\r\nhttps://raijinether.io/\r\n*/\r\n\r\n\r\ncontract raijinether {\r\n    struct MemberInfo {\r\n        uint userID; address referrer;\r\n    }\r\n    struct MatrixInfo {\r\n        bool isActive; uint enterred; address[] referrals; uint totalcyle;\r\n    }\r\n    mapping(uint => address) public userIds;\r\n    mapping (address => MemberInfo)  memberInfos;\r\n    mapping(uint => mapping(uint => MatrixInfo))  matrixInfos;\r\n    mapping(address => uint) public balance;\r\n    mapping(uint => uint) public matrixTransaction;\r\n    uint256 public totalTransactions;\r\n    address[] public members;\r\n    address public owner;\r\n    uint public lastID = 2;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        userIds[1] = owner;\r\n        MemberInfo storage _memberInfo = memberInfos[owner];\r\n        _memberInfo.userID = 1;\r\n        MatrixInfo storage _newMatrixInfo = matrixInfos[1][1];\r\n        _newMatrixInfo.isActive = true;\r\n    }\r\n    function registration(address uplineAddress) external payable {\r\n        require(msg.value >= 0.05 ether, \"registration starts at 0.05\");\r\n        uint packageLvl = getPackageLevel(msg.value);\r\n        uint memberId = getUserId(msg.sender);\r\n        bool memberHasPackage = matrixInfos[memberId][packageLvl].isActive;\r\n        require(!memberHasPackage, \"member already registered to this level\");\r\n        uint uplineUserId = getUserId(uplineAddress);\r\n        require(uplineUserId > 0, \"upline address not found\");\r\n        bool uplineHasPackage = matrixInfos[uplineUserId][packageLvl].isActive;\r\n        require(uplineHasPackage, \"upline not registered to this level\");\r\n        if(memberId == 0){\r\n            memberId = lastID++;   \r\n            MemberInfo storage _memberInfo = memberInfos[msg.sender]; \r\n            _memberInfo.referrer = uplineAddress;\r\n            _memberInfo.userID = memberId;\r\n            userIds[memberId] = msg.sender;  \r\n        }        \r\n        MatrixInfo storage _newMatrixInfo = matrixInfos[memberId][packageLvl];\r\n        _newMatrixInfo.isActive = true;\r\n        \r\n        MatrixInfo storage _uplineMatrixInfo = matrixInfos[uplineUserId][packageLvl];\r\n        _uplineMatrixInfo.referrals.push(msg.sender);\r\n            \r\n        if(uplineUserId == 1){\r\n            owner.transfer(msg.value);\r\n        }else{\r\n            uint profit = msg.value / 2;\r\n            \r\n            if(_uplineMatrixInfo.enterred == 3){\r\n                _uplineMatrixInfo.enterred = 0;\r\n                _uplineMatrixInfo.totalcyle += 1;\r\n                owner.transfer(profit);\r\n            }else{\r\n                \r\n                _uplineMatrixInfo.enterred += 1;\r\n                uplineAddress.transfer(profit);\r\n                balance[uplineAddress] += profit;\r\n                address xRefAddress = uplineAddress;\r\n                \r\n                for(int i=1; i<=2; i++){\r\n                    address indirectUpline = getUpline(xRefAddress);\r\n                    if(indirectUpline != address(0)){\r\n                        indirectUpline.transfer(profit / 2);\r\n                        balance[indirectUpline] += profit / 2;\r\n                        xRefAddress = indirectUpline;\r\n                    }else{\r\n                        owner.transfer(profit / 2);\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n        \r\n        members.push(msg.sender) -1;\r\n        totalTransactions += msg.value;\r\n        matrixTransaction[packageLvl] += 1;\r\n    }\r\n    \r\n    function buynewpackage() external payable {\r\n        require(msg.value >= 0.5 ether, \"upgrade starts from 0.5 eth\");\r\n        uint memberId = getUserId(msg.sender);\r\n        require(memberId > 0, \"register to matrix level 1 first\");\r\n        uint packageLvl = getPackageLevel(msg.value);\r\n        require(packageLvl > 1, \"invalid package amount entry\");\r\n        bool hasPackage = matrixInfos[memberId][packageLvl].isActive;\r\n        require(!hasPackage, \"you are already registered to this level\");\r\n        MatrixInfo storage _newMatrixInfo = matrixInfos[memberId][packageLvl];\r\n        _newMatrixInfo.isActive = true;\r\n        uint profit = msg.value / 2;\r\n        address directUpline = getUpline(msg.sender);\r\n        if(directUpline != address(0)){\r\n            directUpline.transfer(profit);\r\n            balance[directUpline] += profit;\r\n            owner.transfer(profit);\r\n        }else{\r\n            owner.transfer(msg.value);\r\n        }\r\n        members.push(msg.sender) -1;\r\n        totalTransactions += msg.value;\r\n        matrixTransaction[packageLvl] += 1;\r\n    }\r\n    \r\n    \r\n    function getPackageLevel(uint amount) pure internal  returns (uint) {\r\n        uint level = 0;\r\n\r\n        if(amount == 0.5 ether){\r\n            level = 2;\r\n        }else if(amount == 1 ether){\r\n            level = 3;\r\n        }else if(amount == 3 ether){\r\n            level = 4;\r\n        }else if(amount == 5 ether){\r\n            level = 5;\r\n        }else if(amount == 10 ether){\r\n            level = 6;\r\n        }else if(amount == 15 ether){\r\n            level = 7;\r\n        }else if(amount == 20 ether){\r\n            level = 8;\r\n        }else if(amount == 30 ether){\r\n            level = 9;\r\n        }else if(amount == 50 ether){\r\n            level = 10;\r\n        }else{\r\n            level = 1;\r\n        }\r\n        \r\n        return level;\r\n    }\r\n    \r\n    //other public functions to use to retrieve data\r\n    \r\n    function getUserId(address _address) view public returns (uint) { \r\n        if(_address == owner){\r\n            return 1;\r\n        }\r\n        return (memberInfos[_address].userID);\r\n    }\r\n    \r\n    function getUpline(address _address) view public returns (address) { \r\n        return (memberInfos[_address].referrer);\r\n    }\r\n    \r\n    function getMatrixInfo(uint userId, uint level) view public returns (bool, uint, uint) {\r\n        return (matrixInfos[userId][level].isActive, matrixInfos[userId][level].enterred, matrixInfos[userId][level].totalcyle);\r\n    }\r\n    \r\n    function getAllReferrals(address _address, uint level) view public returns (address[]) {\r\n        uint memberId = getUserId(_address);\r\n        return (matrixInfos[memberId][level].referrals);\r\n    }\r\n    \r\n    function getAllReferralsById(uint userId , uint level) view public returns (address[]) {\r\n        return (matrixInfos[userId][level].referrals);\r\n    }\r\n    \r\n    function totalMembers() view public returns (uint) {\r\n        return members.length;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"uplineAddress\",\"type\":\"address\"}],\"name\":\"registration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matrixTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getAllReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buynewpackage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getAllReferralsById\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUpline\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getMatrixInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"raijinether","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3078ba5d435b6029756ec6c0cb98fe874616d7a3e254a6694091b3d6e0537014"}]}