{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// Some math and mining capability borrowed from _0xBitcoinToken\r\n// Which can be found at https://etherscan.io/address/0xb6ed7644c69416d67b522e20bc294a9a9b405b31#code\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// -----------------------------------------\r\n\r\n// Standard Context Getter\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\r\n\r\n// -----------------------------------------\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    \r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    \r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// -----------------------------------------\r\n\r\n// Essential functions for ERC20 implementation\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\n// -----------------------------------------\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// -----------------------------------------\r\n\r\n// Optional functions from the ERC20 standard \r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\n// -----------------------------------------\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// -----------------------------------------\r\n\r\n// Safe Math\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\n\r\n// -----------------------------------------\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        \r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        \r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        \r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a== b * c + a % b); // This will always hold\r\n        \r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// -----------------------------------------\r\n\r\n// Implementation of ERC20 interface\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\r\n\r\n// -----------------------------------------\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal virtual {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// -----------------------------------------\r\n\r\n// Math and mining capability borrowed from _0xBitcoinToken\r\n// https://etherscan.io/address/0xb6ed7644c69416d67b522e20bc294a9a9b405b31#code\r\n\r\n// -----------------------------------------\r\n\r\nlibrary ExtendedMath {\r\n    // Return the smaller of the two inputs (a or b)\r\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\r\n        if(a > b) return b;\r\n        return a;\r\n    }\r\n}\r\n\r\ncontract Units is ERC20, ERC20Detailed {\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n    \r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n    \r\n    uint public miningTarget;\r\n    bytes32 public challengeNumber;\r\n    \r\n    uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount;\r\n    uint public rewardEra;\r\n    uint public currentMonthlyRate;\r\n    \r\n    uint[4] public bonusEraMonthlyRate;\r\n    uint[4] public bonusEraLengthInMonths;\r\n    uint[4] public maxSupplyForBonusEra;\r\n    uint public lastBonusEra;\r\n    uint public standardEraMonthlyRate;\r\n    \r\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\r\n    uint public _MINIMUM_TARGET = 2**16; // Hardest\r\n    uint public _MAXIMUM_TARGET = 2**255; // Easiest\r\n    \r\n    \r\n    bool locked = false;\r\n    mapping(bytes32 => bytes32) solutionForChallenge; // Digested solutions\r\n    \r\n    \r\n    // -----------------------------------------\r\n    \r\n    // Constructor\r\n    \r\n    // -----------------------------------------\r\n    constructor() ERC20Detailed(\"Units\", \"UNTS\", 18) public {\r\n        if(locked) revert();\r\n        locked = true;\r\n        \r\n        // Era rules\r\n        bonusEraMonthlyRate = [7111*10**4 * 10**uint(decimals()),\r\n                               3556*10**4 * 10**uint(decimals()),\r\n                               1778*10**4 * 10**uint(decimals()),\r\n                               8889*10**3 * 10**uint(decimals())];\r\n                               \r\n        maxSupplyForBonusEra = [6133*10**5 * 10**uint(decimals()),\r\n                                7200*10**5 * 10**uint(decimals()),\r\n                                7733*10**5 * 10**uint(decimals()),\r\n                                8000*10**5 * 10**uint(decimals())];\r\n        \r\n        standardEraMonthlyRate = 8889*10**2 * 10**uint(decimals());\r\n        \r\n        // Err Check\r\n        assert(bonusEraMonthlyRate.length == maxSupplyForBonusEra.length);\r\n        \r\n        // Init vars\r\n        rewardEra = 0;\r\n        epochCount = 0;\r\n        currentMonthlyRate = bonusEraMonthlyRate[rewardEra];\r\n        miningTarget = _MAXIMUM_TARGET;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        \r\n        // Begin first epoch\r\n        _startNewMiningEpoch();\r\n    }\r\n    \r\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n        bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\r\n        \r\n        // Prove digest\r\n        if (digest != challenge_digest) revert();\r\n        // Check if digest is invalid\r\n        if(uint256(digest) > miningTarget) revert();\r\n        \r\n        // Check uniqueness of answer\r\n        bytes32 solution = solutionForChallenge[challengeNumber];\r\n        if(solution != 0x0) revert();\r\n        // Store answer\r\n        solutionForChallenge[challengeNumber] = digest;\r\n        \r\n        // Reward\r\n        uint reward_amount = getMiningReward();\r\n        _mint(msg.sender, reward_amount);\r\n        \r\n        // Store reward details\r\n        lastRewardTo = msg.sender;\r\n        lastRewardAmount = reward_amount;\r\n        lastRewardEthBlockNumber = block.number;\r\n        \r\n        // Intialize next epoch\r\n        _startNewMiningEpoch();\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function _startNewMiningEpoch() internal {\r\n        // Update Era\r\n        if (rewardEra < bonusEraMonthlyRate.length) {\r\n            // Determine current era\r\n            if (totalSupply() >= maxSupplyForBonusEra[rewardEra]) {\r\n                rewardEra = rewardEra + 1;\r\n            }\r\n            \r\n            // Assign corresponding era rate\r\n            if (rewardEra < bonusEraMonthlyRate.length) {\r\n                currentMonthlyRate = bonusEraMonthlyRate[rewardEra];\r\n            } else {\r\n                currentMonthlyRate = standardEraMonthlyRate;\r\n            }\r\n        }\r\n        \r\n        // New epoch\r\n        epochCount = epochCount.add(1);\r\n        \r\n        // Check Difficulty\r\n        if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {\r\n            _reAdjustDifficulty();\r\n        }\r\n        \r\n        // Prevents pre-mine\r\n        challengeNumber = blockhash(block.number - 1);\r\n    }\r\n        \r\n    function _reAdjustDifficulty() internal {\r\n        // calculate target time (measured in ethereum blocks)\r\n        uint blocks_per_readjustment = _BLOCKS_PER_READJUSTMENT;\r\n        uint targetEthBlocksPerDiffPeriod = blocks_per_readjustment.mul(2); // * 2 => 1/2 speed as ethereum\r\n        \r\n        // calculate how long it took\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        // check mint rate\r\n        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) { // fewer blocks than expected ==> too easy\r\n            uint excess_block_pct = ((targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod)).sub(100);\r\n            uint excess_block_pct_extra = excess_block_pct.limitLessThan(1000); // \"xx% over\" evaluates to \"xx\"\r\n            \r\n            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra)); // max reduction is half the size (1 ==> 0.5)\r\n        } else { // more blocks than expected ==> too hard\r\n            uint shortage_block_pct = ethBlocksSinceLastDifficultyPeriod.mul(100).div(targetEthBlocksPerDiffPeriod);\r\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\r\n            \r\n            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra)); // max increase is half the size (1 ==> 1.5)\r\n        }\r\n        \r\n        latestDifficultyPeriodStarted = block.number;\r\n        \r\n        if(miningTarget < _MINIMUM_TARGET) {\r\n            miningTarget = _MINIMUM_TARGET;\r\n        }\r\n        \r\n        if(miningTarget < _MAXIMUM_TARGET) {\r\n            miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n    \r\n    function getChallengeNumber() public view returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n    \r\n    function getMiningDifficulty() public view returns (uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n    \r\n    function getMiningTarget() public view returns (uint) {\r\n        return miningTarget;\r\n    }\r\n    \r\n    function getMiningReward() public view returns (uint) {\r\n        if(totalSupply() == 0) {\r\n            return 4*10**8 * 10**uint(decimals());\r\n        } else {\r\n            uint award_per_block = currentMonthlyRate.div(2628*10**3).mul(20); // rate per 20 seconds. Assumes ethereum takes 10 seconds per block and that the difficuly is properly set.\r\n            return award_per_block;\r\n        }\r\n    }\r\n    \r\n    function getRewardEra() public view returns (uint){\r\n        return rewardEra;\r\n    }\r\n    \r\n    function getCurrentMonthlyRate() public view returns (uint) {\r\n        return currentMonthlyRate;\r\n    }\r\n    \r\n    function getEpochCount() public view returns (uint) {\r\n        return epochCount;\r\n    }\r\n    \r\n    function getLatestDifficultyPeriodStarted() public view returns (uint) {\r\n        return latestDifficultyPeriodStarted;\r\n    }\r\n    \r\n    // Helps with debugging mining software\r\n    function getMintDigest(uint256 challenge_number, bytes32 nonce) public view returns (bytes32 digesttest) {\r\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\r\n        return digest;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_BLOCKS_PER_READJUSTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusEraLengthInMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusEraMonthlyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMonthlyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMonthlyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestDifficultyPeriodStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challenge_number\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBonusEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardEthBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxSupplyForBonusEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardEraMonthlyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Units","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e47323df24f5f00b050eab60bbefcac3b15c3f0cd24b4bf0dd45beeffc0dce15"}]}