{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Strategy {\r\n    function want() external view returns (address);\r\n    function deposit() external;\r\n    function withdraw(address) external;\r\n    function skim(address) external;\r\n    function withdraw(uint) external;\r\n    function withdrawAll() external returns (uint);\r\n    function balanceOf() external view returns (uint);\r\n}\r\n\r\ninterface Vault {\r\n    function token() external view returns (address);\r\n}\r\n\r\ninterface Converter {\r\n    function convert(address) external returns (uint);\r\n}\r\n\r\ninterface OneSplitAudit {\r\n    function swap(\r\n        address fromToken,\r\n        address destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 flags\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 returnAmount);\r\n    \r\n    function getExpectedReturn(\r\n        address fromToken,\r\n        address destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n}\r\n\r\ncontract StrategyControllerV2 {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    address public governance;\r\n    address public onesplit;\r\n    address public rewards;\r\n    \r\n    // Vault to strategy mapping\r\n    mapping(address => address) public vaults;\r\n    // Strategy to vault mapping\r\n    mapping(address => address) public strategies;\r\n    \r\n    mapping(address => mapping(address => address)) public converters;\r\n    \r\n    uint public split = 500;\r\n    uint public constant max = 10000;\r\n    \r\n    constructor(address _rewards) public {\r\n        governance = msg.sender;\r\n        onesplit = address(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\r\n        rewards = _rewards;\r\n    }\r\n    \r\n    function setSplit(uint _split) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        split = _split;\r\n    }\r\n    \r\n    function setOneSplit(address _onesplit) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        onesplit = _onesplit;\r\n    }\r\n    \r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n    \r\n    function setConverter(address _input, address _output, address _converter) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        converters[_input][_output] = _converter;\r\n    }\r\n    \r\n    function setStrategy(address _vault, address _strategy) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        address _current = strategies[_vault];\r\n        if (_current != address(0)) {\r\n           Strategy(_current).withdrawAll();\r\n        }\r\n        strategies[_vault] = _strategy;\r\n        vaults[_strategy] = _vault;\r\n    }\r\n    \r\n    function want(address _vault) external view returns (address) {\r\n        return Strategy(strategies[_vault]).want();\r\n    }\r\n    \r\n    function earn(address _vault, uint _amount) public {\r\n        address _strategy = strategies[_vault];\r\n        address _want = Strategy(_strategy).want();\r\n        IERC20(_want).safeTransfer(_strategy, _amount);\r\n        Strategy(_strategy).deposit();\r\n    }\r\n    \r\n    function balanceOf(address _token) external view returns (uint) {\r\n        return Strategy(strategies[_token]).balanceOf();\r\n    }\r\n    \r\n    function withdrawAll(address _strategy) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        // WithdrawAll sends 'want' to 'vault'\r\n        Strategy(_strategy).withdrawAll();\r\n    }\r\n    \r\n    function inCaseTokensGetStuck(address _token, uint _amount) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        IERC20(_token).safeTransfer(governance, _amount);\r\n    }\r\n    \r\n    function inCaseStrategyGetStruck(address _strategy, address _token) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        Strategy(_strategy).withdraw(_token);\r\n        IERC20(_token).safeTransfer(governance, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n    \r\n    function getExpectedReturn(address _strategy, address _token, uint parts) external view returns (uint expected) {\r\n        uint _balance = IERC20(_token).balanceOf(_strategy);\r\n        address _want = Strategy(_strategy).want();\r\n        (expected,) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);\r\n    }\r\n    \r\n    // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield\r\n    function delegatedHarvest(address _strategy, address _token, uint parts) external {\r\n        // This contract should never have value in it, but just incase since this is a public call\r\n        uint _before = IERC20(_token).balanceOf(address(this));\r\n        Strategy(_strategy).skim(_token);\r\n        uint _after =  IERC20(_token).balanceOf(address(this));\r\n        if (_after > _before) {\r\n            uint _amount = _after.sub(_before);\r\n            address _want = Vault(vaults[_strategy]).token();\r\n            uint[] memory _distribution;\r\n            uint _expected;\r\n            _before = IERC20(_want).balanceOf(address(this));\r\n            IERC20(_token).safeApprove(onesplit, 0);\r\n            IERC20(_token).safeApprove(onesplit, _amount);\r\n            (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);\r\n            OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);\r\n            _after = IERC20(_want).balanceOf(address(this));\r\n            if (_after > _before) {\r\n                _amount = _after.sub(_before);\r\n                uint _reward = _amount.mul(split).div(max);\r\n                IERC20(_want).safeTransfer(vaults[_strategy], _amount.sub(_reward));\r\n                IERC20(_want).safeTransfer(rewards, _reward);\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield\r\n    function harvest(address _strategy, address _token, uint parts) external {\r\n        // This contract should never have value in it, but just incase since this is a public call\r\n        uint _before = IERC20(_token).balanceOf(address(this));\r\n        Strategy(_strategy).withdraw(_token);\r\n        uint _after =  IERC20(_token).balanceOf(address(this));\r\n        if (_after > _before) {\r\n            uint _amount = _after.sub(_before);\r\n            address _want = Strategy(_strategy).want();\r\n            uint[] memory _distribution;\r\n            uint _expected;\r\n            _before = IERC20(_want).balanceOf(address(this));\r\n            IERC20(_token).safeApprove(onesplit, 0);\r\n            IERC20(_token).safeApprove(onesplit, _amount);\r\n            (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);\r\n            OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);\r\n            _after = IERC20(_want).balanceOf(address(this));\r\n            if (_after > _before) {\r\n                _amount = _after.sub(_before);\r\n                uint _reward = _amount.mul(split).div(max);\r\n                earn(_want, _amount.sub(_reward));\r\n                IERC20(_want).safeTransfer(rewards, _reward);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function withdraw(address _token, uint _amount) external {\r\n        require(msg.sender == vaults[_token], \"!vault\");\r\n        Strategy(strategies[_token]).withdraw(_amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"converters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"name\":\"delegatedHarvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseStrategyGetStruck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onesplit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onesplit\",\"type\":\"address\"}],\"name\":\"setOneSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_split\",\"type\":\"uint256\"}],\"name\":\"setSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"split\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyControllerV2","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b99a40fce04cb740eb79fc04976ca15af69aaaae","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3f512cb0ee18d88323d36a50eb64e5607ec9600971aab6ca55cdd91e6d2d8ce4"}]}