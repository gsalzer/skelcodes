{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/sogur/interfaces/IMonetaryModelState.sol\n\n/**\n * @title Monetary Model State Interface.\n */\ninterface IMonetaryModelState {\n    /**\n     * @dev Set the total amount of SDR in the model.\n     * @param _amount The total amount of SDR in the model.\n     */\n    function setSdrTotal(uint256 _amount) external;\n\n    /**\n     * @dev Set the total amount of SGR in the model.\n     * @param _amount The total amount of SGR in the model.\n     */\n    function setSgrTotal(uint256 _amount) external;\n\n    /**\n     * @dev Get the total amount of SDR in the model.\n     * @return The total amount of SDR in the model.\n     */\n    function getSdrTotal() external view returns (uint256);\n\n    /**\n     * @dev Get the total amount of SGR in the model.\n     * @return The total amount of SGR in the model.\n     */\n    function getSgrTotal() external view returns (uint256);\n}\n\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n\n/**\n * @title Contract Address Locator Interface.\n */\ninterface IContractAddressLocator {\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) external view returns (address);\n\n    /**\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\n     * @param _contractAddress The contract address to look for.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\n     */\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n\n/**\n * @title Contract Address Locator Holder.\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n */\ncontract ContractAddressLocatorHolder {\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\n    bytes32 internal constant _ISogurExchanger_           = \"ISogurExchanger\"          ;\n    bytes32 internal constant _SgnToSgrExchangeInitiator_ = \"SgnToSgrExchangeInitiator\"          ;\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\n    bytes32 internal constant _ISGRAuthorizationManager_ = \"ISGRAuthorizationManager\";\n    bytes32 internal constant _ISGRToken_                = \"ISGRToken\"               ;\n    bytes32 internal constant _ISGRTokenManager_         = \"ISGRTokenManager\"        ;\n    bytes32 internal constant _ISGRTokenInfo_         = \"ISGRTokenInfo\"        ;\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\n    bytes32 internal constant _BuyWalletsTradingDataSource_       = \"BuyWalletsTradingDataSource\"      ;\n    bytes32 internal constant _SellWalletsTradingDataSource_       = \"SellWalletsTradingDataSource\"      ;\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\n    bytes32 internal constant _BuyWalletsTradingLimiter_SGRTokenManager_          = \"BuyWalletsTLSGRTokenManager\"         ;\n    bytes32 internal constant _SellWalletsTradingLimiter_SGRTokenManager_          = \"SellWalletsTLSGRTokenManager\"         ;\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\n    bytes32 internal constant _SGAToSGRInitializer_      = \"SGAToSGRInitializer\"     ;\n\n    IContractAddressLocator private contractAddressLocator;\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\n        contractAddressLocator = _contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address locator.\n     * @return The contract address locator.\n     */\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n        return contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n        return contractAddressLocator.getContractAddress(_identifier);\n    }\n\n\n\n    /**\n     * @dev Determine whether or not the sender relates to one of the identifiers.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the sender relates to one of the identifiers.\n     */\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n    }\n\n    /**\n     * @dev Verify that the caller is mapped to a given identifier.\n     * @param _identifier The identifier.\n     */\n    modifier only(bytes32 _identifier) {\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\n        _;\n    }\n\n}\n\n// File: contracts/sogur/MonetaryModelState.sol\n\n/**\n * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n */\n\n/**\n * @title Monetary Model State.\n */\ncontract MonetaryModelState is IMonetaryModelState, ContractAddressLocatorHolder {\n    string public constant VERSION = \"1.1.0\";\n\n    bool public initialized;\n\n    uint256 public sdrTotal;\n    uint256 public sgrTotal;\n\n    event MonetaryModelStateInitialized(address indexed _initializer, uint256 _sdrTotal, uint256 _sgrTotal);\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\n\n    /**\n    * @dev Reverts if called when the contract is already initialized.\n    */\n    modifier onlyIfNotInitialized() {\n        require(!initialized, \"contract already initialized\");\n        _;\n    }\n\n    /**\n    * @dev Initialize the contract.\n    * @param _sdrTotal The total amount of SDR in the model.\n    * @param _sgrTotal The total amount of SGR in the model.\n    */\n    function init(uint256 _sdrTotal, uint256 _sgrTotal) external onlyIfNotInitialized only(_SGAToSGRInitializer_) {\n        initialized = true;\n        sdrTotal = _sdrTotal;\n        sgrTotal = _sgrTotal;\n        emit MonetaryModelStateInitialized(msg.sender, _sdrTotal, _sgrTotal);\n    }\n\n    /**\n     * @dev Set the total amount of SDR in the model.\n     * @param _amount The total amount of SDR in the model.\n     */\n    function setSdrTotal(uint256 _amount) external only(_IMonetaryModel_) {\n        sdrTotal = _amount;\n    }\n\n    /**\n     * @dev Set the total amount of SGR in the model.\n     * @param _amount The total amount of SGR in the model.\n     */\n    function setSgrTotal(uint256 _amount) external only(_IMonetaryModel_) {\n        sgrTotal = _amount;\n    }\n\n    /**\n     * @dev Get the total amount of SDR in the model.\n     * @return The total amount of SDR in the model.\n     */\n    function getSdrTotal() external view returns (uint256) {\n        return sdrTotal;\n    }\n\n    /**\n     * @dev Get the total amount of SGR in the model.\n     * @return The total amount of SGR in the model.\n     */\n    function getSgrTotal() external view returns (uint256) {\n        return sgrTotal;\n    }\n}\n\n// File: contracts/sogur/interfaces/IPaymentHandler.sol\n\n/**\n * @title Payment Handler Interface.\n */\ninterface IPaymentHandler {\n    /**\n     * @dev Get the amount of available ETH.\n     * @return The amount of available ETH.\n     */\n    function getEthBalance() external view returns (uint256);\n\n    /**\n     * @dev Transfer ETH to an SGR holder.\n     * @param _to The address of the SGR holder.\n     * @param _value The amount of ETH to transfer.\n     */\n    function transferEthToSgrHolder(address _to, uint256 _value) external;\n}\n\n// File: contracts/sogur/interfaces/IMintListener.sol\n\n/**\n * @title Mint Listener Interface.\n */\ninterface IMintListener {\n    /**\n     * @dev Mint SGR for SGN holders.\n     * @param _value The amount of SGR to mint.\n     */\n    function mintSgrForSgnHolders(uint256 _value) external;\n}\n\n// File: contracts/sogur/interfaces/ISGRTokenManager.sol\n\n/**\n * @title SGR Token Manager Interface.\n */\ninterface ISGRTokenManager {\n    /**\n     * @dev Exchange ETH for SGR.\n     * @param _sender The address of the sender.\n     * @param _ethAmount The amount of ETH received.\n     * @return The amount of SGR that the sender is entitled to.\n     */\n    function exchangeEthForSgr(address _sender, uint256 _ethAmount) external returns (uint256);\n\n    /**\n     * @dev Handle after the ETH for SGR exchange operation.\n     * @param _sender The address of the sender.\n     * @param _ethAmount The amount of ETH received.\n     * @param _sgrAmount The amount of SGR given.\n     */\n    function afterExchangeEthForSgr(address _sender, uint256 _ethAmount, uint256 _sgrAmount) external;\n\n    /**\n     * @dev Exchange SGR for ETH.\n     * @param _sender The address of the sender.\n     * @param _sgrAmount The amount of SGR received.\n     * @return The amount of ETH that the sender is entitled to.\n     */\n    function exchangeSgrForEth(address _sender, uint256 _sgrAmount) external returns (uint256);\n\n    /**\n     * @dev Handle after the SGR for ETH exchange operation.\n     * @param _sender The address of the sender.\n     * @param _sgrAmount The amount of SGR received.\n     * @param _ethAmount The amount of ETH given.\n     * @return The is success result.\n     */\n    function afterExchangeSgrForEth(address _sender, uint256 _sgrAmount, uint256 _ethAmount) external returns (bool);\n\n    /**\n     * @dev Handle direct SGR transfer.\n     * @param _sender The address of the sender.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGR to be transferred.\n     */\n    function uponTransfer(address _sender, address _to, uint256 _value) external;\n\n\n    /**\n     * @dev Handle after direct SGR transfer operation.\n     * @param _sender The address of the sender.\n     * @param _to The address of the destination account.\n     * @param _value The SGR transferred amount.\n     * @param _transferResult The transfer result.\n     * @return is success result.\n     */\n    function afterTransfer(address _sender, address _to, uint256 _value, bool _transferResult) external returns (bool);\n\n    /**\n     * @dev Handle custodian SGR transfer.\n     * @param _sender The address of the sender.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGR to be transferred.\n     */\n    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external;\n\n    /**\n     * @dev Handle after custodian SGR transfer operation.\n     * @param _sender The address of the sender.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The SGR transferred amount.\n     * @param _transferFromResult The transferFrom result.\n     * @return is success result.\n     */\n    function afterTransferFrom(address _sender, address _from, address _to, uint256 _value, bool _transferFromResult) external returns (bool);\n\n    /**\n     * @dev Handle the operation of ETH deposit into the SGRToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGRToken contract.\n     * @param _amount The deposited ETH amount.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGRToken contract.\n     */\n    function uponDeposit(address _sender, uint256 _balance, uint256 _amount) external returns (address, uint256);\n\n    /**\n     * @dev Handle the operation of ETH withdrawal from the SGRToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGRToken contract prior the withdrawal.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGRToken contract.\n     */\n    function uponWithdraw(address _sender, uint256 _balance) external returns (address, uint256);\n\n    /**\n     * @dev Handle after ETH withdrawal from the SGRToken contract operation.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _wallet The address of the withdrawal wallet.\n     * @param _amount The ETH withdraw amount.\n     * @param _priorWithdrawEthBalance The amount of ETH in the SGRToken contract prior the withdrawal.\n     * @param _afterWithdrawEthBalance The amount of ETH in the SGRToken contract after the withdrawal.\n     */\n    function afterWithdraw(address _sender, address _wallet, uint256 _amount, uint256 _priorWithdrawEthBalance, uint256 _afterWithdrawEthBalance) external;\n\n    /** \n     * @dev Upon SGR mint for SGN holders.\n     * @param _value The amount of SGR to mint.\n     */\n    function uponMintSgrForSgnHolders(uint256 _value) external;\n\n    /**\n     * @dev Handle after SGR mint for SGN holders.\n     * @param _value The minted amount of SGR.\n     */\n    function afterMintSgrForSgnHolders(uint256 _value) external;\n\n    /**\n     * @dev Upon SGR transfer to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The amount of SGR to transfer.\n     */\n    function uponTransferSgrToSgnHolder(address _to, uint256 _value) external;\n\n    /**\n     * @dev Handle after SGR transfer to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The transferred amount of SGR.\n     */\n    function afterTransferSgrToSgnHolder(address _to, uint256 _value) external;\n\n    /**\n     * @dev Upon ETH transfer to an SGR holder.\n     * @param _to The address of the SGR holder.\n     * @param _value The amount of ETH to transfer.\n     * @param _status The operation's completion-status.\n     */\n    function postTransferEthToSgrHolder(address _to, uint256 _value, bool _status) external;\n\n    /**\n     * @dev Get the address of the reserve-wallet and the deficient amount of ETH in the SGRToken contract.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGRToken contract.\n     */\n    function getDepositParams() external view returns (address, uint256);\n\n    /**\n     * @dev Get the address of the reserve-wallet and the excessive amount of ETH in the SGRToken contract.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGRToken contract.\n     */\n    function getWithdrawParams() external view returns (address, uint256);\n}\n\n// File: contracts/saga-genesis/interfaces/ISogurExchanger.sol\n\n/**\n * @title Sogur Exchanger Interface.\n */\ninterface ISogurExchanger {\n    /**\n     * @dev Transfer SGR to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The amount of SGR to transfer.\n     */\n    function transferSgrToSgnHolder(address _to, uint256 _value) external;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from], \"sdjfndskjfndskjfb\");\n    require(to != address(0), \"asfdsf\");\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0, \"heerrrrrsss\");\n    require(value <= _balances[account], \"heerrrrr\");\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: contracts/sogur/interfaces/ISGRTokenInfo.sol\n\n/**\n * @title SGR Token Info Interface.\n */\ninterface ISGRTokenInfo {\n    /**\n     * @return the name of the sgr token.\n     */\n    function getName() external pure returns (string);\n\n    /**\n     * @return the symbol of the sgr token.\n     */\n    function getSymbol() external pure returns (string);\n\n    /**\n     * @return the number of decimals of the sgr token.\n     */\n    function getDecimals() external pure returns (uint8);\n}\n\n// File: contracts/sogur/SGRToken.sol\n\n/**\n * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n */\n\n/**\n * @title Sogur Token.\n * @dev ERC20 compatible.\n * @dev Exchange ETH for SGR.\n * @dev Exchange SGR for ETH.\n */\ncontract SGRToken is ERC20, ContractAddressLocatorHolder, IMintListener, ISogurExchanger, IPaymentHandler {\n    string public constant VERSION = \"2.0.0\";\n\n    bool public initialized;\n\n    event SgrTokenInitialized(address indexed _initializer, address _sgaToSGRTokenExchangeAddress, uint256 _sgaToSGRTokenExchangeSGRSupply);\n\n\n    /**\n     * @dev Public Address 0x6e9Cd21f2B9033ea0953943c81A041fe203D5E55.\n     * @notice SGR will be minted at this public address for SGN holders.\n     * @notice SGR will be transferred from this public address upon conversion by an SGN holder.\n     * @notice It is generated in a manner which ensures that the corresponding private key is unknown.\n     */\n    address public constant SGR_MINTED_FOR_SGN_HOLDERS = address(keccak256(\"SGR_MINTED_FOR_SGN_HOLDERS\"));\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\n\n    /**\n     * @dev Return the contract which implements the ISGRTokenManager interface.\n     */\n    function getSGRTokenManager() public view returns (ISGRTokenManager) {\n        return ISGRTokenManager(getContractAddress(_ISGRTokenManager_));\n    }\n\n    /**\n    * @dev Return the contract which implements ISGRTokenInfo interface.\n    */\n    function getSGRTokenInfo() public view returns (ISGRTokenInfo) {\n        return ISGRTokenInfo(getContractAddress(_ISGRTokenInfo_));\n    }\n\n    /**\n    * @dev Return the sgr token name.\n    */\n    function name() public view returns (string) {\n        return getSGRTokenInfo().getName();\n    }\n\n    /**\n     * @dev Return the sgr token symbol.\n     */\n    function symbol() public view returns (string){\n        return getSGRTokenInfo().getSymbol();\n    }\n\n    /**\n     * @dev Return the sgr token number of decimals.\n     */\n    function decimals() public view returns (uint8){\n        return getSGRTokenInfo().getDecimals();\n    }\n\n    /**\n    * @dev Reverts if called when the contract is already initialized.\n    */\n    modifier onlyIfNotInitialized() {\n        require(!initialized, \"contract already initialized\");\n        _;\n    }\n\n    /**\n     * @dev Exchange ETH for SGR.\n     * @notice Can be executed from externally-owned accounts but not from other contracts.\n     * @notice This is due to the insufficient gas-stipend provided to the fallback function.\n     */\n    function() external payable {\n        ISGRTokenManager sgrTokenManager = getSGRTokenManager();\n        uint256 amount = sgrTokenManager.exchangeEthForSgr(msg.sender, msg.value);\n        _mint(msg.sender, amount);\n        sgrTokenManager.afterExchangeEthForSgr(msg.sender, msg.value, amount);\n    }\n\n    /**\n     * @dev Exchange ETH for SGR.\n     * @notice Can be executed from externally-owned accounts as well as from other contracts.\n     */\n    function exchange() external payable {\n        ISGRTokenManager sgrTokenManager = getSGRTokenManager();\n        uint256 amount = sgrTokenManager.exchangeEthForSgr(msg.sender, msg.value);\n        _mint(msg.sender, amount);\n        sgrTokenManager.afterExchangeEthForSgr(msg.sender, msg.value, amount);\n    }\n\n    /**\n     * @dev Initialize the contract.\n     * @param _sgaToSGRTokenExchangeAddress the contract address.\n     * @param _sgaToSGRTokenExchangeSGRSupply SGR supply for the SGAToSGRTokenExchange contract.\n     */\n    function init(address _sgaToSGRTokenExchangeAddress, uint256 _sgaToSGRTokenExchangeSGRSupply) external onlyIfNotInitialized only(_SGAToSGRInitializer_) {\n        require(_sgaToSGRTokenExchangeAddress != address(0), \"SGA to SGR token exchange address is illegal\");\n        initialized = true;\n        _mint(_sgaToSGRTokenExchangeAddress, _sgaToSGRTokenExchangeSGRSupply);\n        emit SgrTokenInitialized(msg.sender, _sgaToSGRTokenExchangeAddress, _sgaToSGRTokenExchangeSGRSupply);\n    }\n\n\n    /**\n     * @dev Transfer SGR to another account.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGR to be transferred.\n     * @return Status (true if completed successfully, false otherwise).\n     * @notice If the destination account is this contract, then exchange SGR for ETH.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        ISGRTokenManager sgrTokenManager = getSGRTokenManager();\n        if (_to == address(this)) {\n            uint256 amount = sgrTokenManager.exchangeSgrForEth(msg.sender, _value);\n            _burn(msg.sender, _value);\n            msg.sender.transfer(amount);\n            return sgrTokenManager.afterExchangeSgrForEth(msg.sender, _value, amount);\n        }\n        sgrTokenManager.uponTransfer(msg.sender, _to, _value);\n        bool transferResult = super.transfer(_to, _value);\n        return sgrTokenManager.afterTransfer(msg.sender, _to, _value, transferResult);\n    }\n\n    /**\n     * @dev Transfer SGR from one account to another.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGR to be transferred.\n     * @return Status (true if completed successfully, false otherwise).\n     * @notice If the destination account is this contract, then the operation is illegal.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        ISGRTokenManager sgrTokenManager = getSGRTokenManager();\n        require(_to != address(this), \"custodian-transfer of SGR into this contract is illegal\");\n        sgrTokenManager.uponTransferFrom(msg.sender, _from, _to, _value);\n        bool transferFromResult = super.transferFrom(_from, _to, _value);\n        return sgrTokenManager.afterTransferFrom(msg.sender, _from, _to, _value, transferFromResult);\n    }\n\n    /**\n     * @dev Deposit ETH into this contract.\n     */\n    function deposit() external payable {\n        getSGRTokenManager().uponDeposit(msg.sender, address(this).balance, msg.value);\n    }\n\n    /**\n     * @dev Withdraw ETH from this contract.\n     */\n    function withdraw() external {\n        ISGRTokenManager sgrTokenManager = getSGRTokenManager();\n        uint256 priorWithdrawEthBalance = address(this).balance;\n        (address wallet, uint256 amount) = sgrTokenManager.uponWithdraw(msg.sender, priorWithdrawEthBalance);\n        wallet.transfer(amount);\n        sgrTokenManager.afterWithdraw(msg.sender, wallet, amount, priorWithdrawEthBalance, address(this).balance);\n    }\n\n    /**\n     * @dev Mint SGR for SGN holders.\n     * @param _value The amount of SGR to mint.\n     */\n    function mintSgrForSgnHolders(uint256 _value) external only(_IMintManager_) {\n        ISGRTokenManager sgrTokenManager = getSGRTokenManager();\n        sgrTokenManager.uponMintSgrForSgnHolders(_value);\n        _mint(SGR_MINTED_FOR_SGN_HOLDERS, _value);\n        sgrTokenManager.afterMintSgrForSgnHolders(_value);\n    }\n\n    /**\n     * @dev Transfer SGR to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The amount of SGR to transfer.\n     */\n    function transferSgrToSgnHolder(address _to, uint256 _value) external only(_SgnToSgrExchangeInitiator_) {\n        ISGRTokenManager sgrTokenManager = getSGRTokenManager();\n        sgrTokenManager.uponTransferSgrToSgnHolder(_to, _value);\n        _transfer(SGR_MINTED_FOR_SGN_HOLDERS, _to, _value);\n        sgrTokenManager.afterTransferSgrToSgnHolder(_to, _value);\n    }\n\n    /**\n     * @dev Transfer ETH to an SGR holder.\n     * @param _to The address of the SGR holder.\n     * @param _value The amount of ETH to transfer.\n     */\n    function transferEthToSgrHolder(address _to, uint256 _value) external only(_IPaymentManager_) {\n        bool status = _to.send(_value);\n        getSGRTokenManager().postTransferEthToSgrHolder(_to, _value, status);\n    }\n\n    /**\n     * @dev Get the amount of available ETH.\n     * @return The amount of available ETH.\n     */\n    function getEthBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /**\n     * @dev Get the address of the reserve-wallet and the deficient amount of ETH in this contract.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in this contract.\n     */\n    function getDepositParams() external view returns (address, uint256) {\n        return getSGRTokenManager().getDepositParams();\n    }\n\n    /**\n     * @dev Get the address of the reserve-wallet and the excessive amount of ETH in this contract.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in this contract.\n     */\n    function getWithdrawParams() external view returns (address, uint256) {\n        return getSGRTokenManager().getWithdrawParams();\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/Math.sol\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\nlibrary Math {\n  /**\n  * @dev Returns the largest of two numbers.\n  */\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  /**\n  * @dev Returns the smallest of two numbers.\n  */\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  /**\n  * @dev Calculates the average of two numbers. Since these are integers,\n  * averages of an even and odd number cannot be represented, and will be\n  * rounded down.\n  */\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b) / 2 can overflow, so we distribute\n    return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n  }\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: contracts/sogur/interfaces/IRedButton.sol\n\n/**\n * @title Red Button Interface.\n */\ninterface IRedButton {\n    /**\n     * @dev Get the state of the red-button.\n     * @return The state of the red-button.\n     */\n    function isEnabled() external view returns (bool);\n}\n\n// File: contracts/migrations/SGAToSGRInitializer.sol\n\n/**\n * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n */\n\n/**\n * @title SGAToSGRInitializer SGA Monetary Model State Interface.\n */\ninterface ISGAToSGRInitializerSGAMonetaryModelState {\n    /**\n     * @dev Get the total amount of SGA in the model.\n     * @return The total amount of SGA in the model.\n     */\n    function getSgaTotal() external view returns (uint256);\n\n    /**\n     * @dev Get the total amount of SDR in the model.\n     * @return The total amount of SDR in the model.\n     */\n    function getSdrTotal() external view returns (uint256);\n}\n\n\n/**\n * @title SGA to SGR Initializer.\n */\ncontract SGAToSGRInitializer is Claimable {\n    string public constant VERSION = \"1.0.0\";\n\n    IRedButton public redButton;\n    IERC20 public sgaToken;\n    SGRToken public sgrToken;\n    ISGAToSGRInitializerSGAMonetaryModelState public sgaMonetaryModelState;\n    MonetaryModelState public sgrMonetaryModelState;\n\n    address  public sgaToSGRTokenExchangeAddress;\n\n    /**\n     * @dev Create the contract.\n     * @param _redButtonAddress The red button contract address.\n     * @param _sgaTokenAddress The SGA token contract address.\n     * @param _sgrTokenAddress The SGR token contract address.\n     * @param _sgaMonetaryModelStateAddress The SGA MonetaryModelState contract address.\n     * @param _sgrMonetaryModelStateAddress The SGR MonetaryModelState contract address.\n     * @param _sgaToSGRTokenExchangeAddress The SGA to SGR token exchange contract address.\n     */\n    constructor(address _redButtonAddress, address _sgaTokenAddress, address _sgrTokenAddress, address _sgaMonetaryModelStateAddress, address _sgrMonetaryModelStateAddress, address _sgaToSGRTokenExchangeAddress) public {\n        require(_redButtonAddress != address(0), \"red button address is illegal\");\n        require(_sgaTokenAddress != address(0), \"SGA token address is illegal\");\n        require(_sgrTokenAddress != address(0), \"SGR token address is illegal\");\n        require(_sgaMonetaryModelStateAddress != address(0), \"SGA MonetaryModelState address is illegal\");\n        require(_sgrMonetaryModelStateAddress != address(0), \"SGR MonetaryModelState address is illegal\");\n        require(_sgaToSGRTokenExchangeAddress != address(0), \"SGA to SGR token exchange is illegal\");\n\n        redButton = IRedButton(_redButtonAddress);\n        sgaToken = IERC20(_sgaTokenAddress);\n        sgrToken = SGRToken(_sgrTokenAddress);\n        sgaMonetaryModelState = ISGAToSGRInitializerSGAMonetaryModelState(_sgaMonetaryModelStateAddress);\n        sgrMonetaryModelState = MonetaryModelState(_sgrMonetaryModelStateAddress);\n        sgaToSGRTokenExchangeAddress = _sgaToSGRTokenExchangeAddress;\n    }\n\n    /**\n     * @dev Reverts if called when the red button is not enabled.\n     */\n    modifier onlyIfRedButtonIsEnabled() {\n        require(redButton.isEnabled(), \"red button must be enabled\");\n        _;\n    }\n\n    /**\n     * @dev Execute initialization methods.\n       red button must be enabled for initialization.\n     */\n    function executeInitialization() external onlyIfRedButtonIsEnabled onlyOwner {\n        uint256 initializationSGRAmount = getInitializationAmount();\n        sgrToken.init(sgaToSGRTokenExchangeAddress, initializationSGRAmount);\n        sgrMonetaryModelState.init(initializationSGRAmount, initializationSGRAmount);\n    }\n\n    /**\n     * @dev Return final SGA total supply.\n       used as initial SGR total supply.\n     */\n    function getInitializationAmount() public view returns (uint256) {\n        uint256 sga1 = sgaToken.totalSupply();\n        uint256 sga2 = sgaMonetaryModelState.getSgaTotal();\n        require(sga1 == sga2, \"abnormal SGA token state\");\n        uint256 sdr = sgaMonetaryModelState.getSdrTotal();\n        require(sga2 == sdr, \"abnormal SGA monetary model state\");\n        return sga1;\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sgaToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sgaToSGRTokenExchangeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redButton\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sgrToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sgrMonetaryModelState\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sgaMonetaryModelState\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeInitialization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_redButtonAddress\",\"type\":\"address\"},{\"name\":\"_sgaTokenAddress\",\"type\":\"address\"},{\"name\":\"_sgrTokenAddress\",\"type\":\"address\"},{\"name\":\"_sgaMonetaryModelStateAddress\",\"type\":\"address\"},{\"name\":\"_sgrMonetaryModelStateAddress\",\"type\":\"address\"},{\"name\":\"_sgaToSGRTokenExchangeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SGAToSGRInitializer","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"0000000000000000000000008fc1b914a55dd5a2572ed644ecff11624f9fe278000000000000000000000000ed0849bf46cfb9845a2d900a0a4e593f2dd3673c000000000000000000000000aea8e1b6cb5c05d1dac618551c76bcd578ea3524000000000000000000000000a317c484d3ed7df73578a26a249446308fd55040000000000000000000000000a59f1f7aa4dda0e9a682ea325ae3f4f12e3d6a96000000000000000000000000c68c66c8bc7de6e4a528fe79305e1ddc9822dc9d","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}