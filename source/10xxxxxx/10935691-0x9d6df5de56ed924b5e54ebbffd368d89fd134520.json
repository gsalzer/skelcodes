{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: none\n\npragma solidity ^0.6.0;\n\n\n// \n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// \n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/// @dev AuthorizedAccess allows to define simple access control for multiple authorized\n/// Think of it as a simple two tiered access control contract. It has an owner which can\n/// execute functions with the `onlyOwner` modifier, and the owner can give access to other\n/// addresses which then can execute functions with the `onlyAuthorized` modifier.\ncontract AuthorizedAccess is Ownable {\n    event GrantedAccess(address user);\n    event RevokedAccess(address user);\n\n    mapping(address => bool) private authorized;\n\n    constructor () public Ownable() {}\n\n    /// @dev Restrict usage to authorized users\n    modifier onlyAuthorized(string memory err) {\n        require(authorized[msg.sender], err);\n        _;\n    }\n\n    /// @dev Add user to the authorized users list\n    function grantAccess(address user) public onlyOwner {\n        authorized[user] = true;\n        emit GrantedAccess(user);\n    }\n\n    /// @dev Remove user to the authorized users list\n    function revokeAccess(address user) public onlyOwner {\n        authorized[user] = false;\n        emit RevokedAccess(user);\n    }\n}\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n//Had to copy-paste this contract to make the balanceOf function virtual\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\n\ninterface IWage is IERC20 {\n    \n    /**\n    * @dev Event emitted when enabling transfers\n    */\n    event TransfersEnabled();\n    \n    /**\n    * @dev Event emitted on each rebase\n    * @param epoch The rebase timestamp\n    * @param totalSupply the new totalSupply after the rebase\n    */\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\n    /**\n    * @dev Event emitted when enabling transfers\n    * @param enabled Whether rebases have been enabled or disabled\n    */\n    event RebaseToggled(bool enabled);\n    /**\n     * @dev Event emitted when the rebase rate changes \n     * @param newRate the new rabase rate\n     * @param oldRate the old rebase rate\n     */\n    event RebaseRateChanged(uint256 newRate, uint256 oldRate);\n    /**\n     * @dev Event emitted when the rebase amount changes\n     * @param newAmount the new supply increase applied for each rebase\n     * @param oldAmount the old supply increase\n     */\n    event RebaseAmountChanged(uint256 newAmount, uint256 oldAmount);\n    \n    /**\n     * @dev Event emitted when changing syncer\n     * @param newSyncer the new syncer's address\n     * @param oldSyncer the old syncer's address\n     */\n    event WageSyncerChanged(address newSyncer, address oldSyncer);\n    \n    /**\n     * @dev Event emitted when locking tokens.\n     * @dev We are locking gons, not fragments - this causes the locked amount to change after each rebase.\n     * @param target the address whose tokens have been locked\n     * @param initialAmount the initial amount of tokens locked\n     */\n    event TokensLocked(address target, uint256 initialAmount);\n    /**\n     * @dev Event emitted when unlocking tokens.\n     * @param target the address whose tokens have been unlocked\n     * @param initialAmount the initial amount of tokens unlocked\n     */\n    event TokensUnlocked(address target, uint256 initialAmount);\n    \n    /**\n     * @dev Enables transfers when called. Once enabled, transfers cannot be disabled.\n     */ \n    function enableTransfers() external;\n\n    /**\n     * @dev Notifies Fragments contract about a new rebase cycle. Can only be called by the contract owner\n     * @param supplyDelta The number of new fragment tokens to add into circulation via expansion.\n     * @return The total number of fragments after the supply adjustment.\n     */\n    function rebase(uint256 supplyDelta) external returns (uint256);\n    /**\n     * @dev Toggles rebases. Can only be called by the owner\n     * @param enabled Whether to enable or disable rebases\n     */ \n    function toggleRebase(bool enabled) external;\n    /**\n     * @dev Changes the amount of time between each rebase. Can only be called by the owner\n     * @param newRate the new rebase rate (seconds)\n     */ \n    function changeRebaseRate(uint256 newRate) external;\n    /**\n     * @dev Changes the inflation amount after each rebase. Can only be called by the owner\n     * @param newAmount the new inflation amount\n     */ \n    function changeRebaseAmount(uint256 newAmount) external;\n\n    /**\n     * @dev Sets a new syncer smart contract. Can only be called by the owner.\n     * Syncers are used to sync trading pairs across dexes.\n     * @param newSyncer the address of the new syncer smart contract\n     */ \n    function changeWageSyncer(address newSyncer) external;\n    \n    /**\n     * @dev Returns the gons per fragment rate. Can only be called by the owner.\n     * @return the gons per fragment rate\n     */\n    function gonsPerFragment() external view returns (uint256);\n    \n    /**\n     * @dev Locks part of an address' gon balance. Needed for governance.\n     * The amount of locked fragments inflates after each rebase.\n     * @param target The target address\n     * @param gonAmount the amount of gons to lock\n     */\n    function lock(address target, uint256 gonAmount) external;\n    /**\n     * @dev Unlocks part of an adress' locked gon balane. Needed for governance.\n     * @param target The target address\n     * @param gonAmount the amount of gons to unlock\n     */\n    function unlock(address target, uint256 gonAmount) external;\n    \n    /**\n     * @dev Returns the current locked fragments for an address\n     * @param target the address\n     */ \n    function getLockedFragments(address target) external view returns (uint256);\n    \n    \n    \n}\n\ninterface IWageSyncer {\n    \n    /**\n     * @dev Event emitted after a successful sync.\n     */ \n    event WageSync();\n    /**\n     * @dev Event emitted when adding a new trading pair.\n     * @param pairAddress the pair's address\n     * @param callData data needed to perform the low level call\n     */ \n    event PairAdded(address pairAddress, bytes callData);\n    /**\n     * @dev Event emitted when removing a trading pair.\n     * @param pairAddress the pair's address\n     */ \n    event PairRemoved(address pairAddress);\n    \n     /**\n     * @dev The sync function. Called by Wage's contract after each rebase.\n     * This function has been designed to support future trading pairs on different dexes.\n     * We are sending a low level function call to apply the same syncing logic to every pair\n     */ \n    function sync() external;\n    /**\n     * @dev Adds a pair to the pairs array. Can only be called  by the owner\n     * @param pairAddress the pair's address.\n     * @param data the data to send when calling the low level function `functionCall`\n     */ \n    function addPair(address pairAddress, bytes calldata data) external;\n    /**\n     * @dev Removes a pair from tthe pairs array. Can  only be called by the owner.\n     * @param pair the pair's address\n     */ \n    function removePair(address pair) external;\n    \n}\n\ncontract Wage is IWage, ERC20, AuthorizedAccess {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 private constant MAX_UINT256 = 2 ** 256 - 1;\r\n    uint128 private constant MAX_SUPPLY = 2 ** 128 - 1;\r\n    \r\n    uint256 private _gonsPerFragment;\r\n    \r\n    mapping(address => uint256) private _lockedGons;\r\n    \r\n     // Union Governance / Rebase Settings\r\n    uint256 public nextReb; // when's it time for the next rebase?\r\n    uint256 public rebaseAmount = 1e18; // initial is 1\r\n    uint256 public rebaseRate = 10800; // initial is every 3 hours\r\n    bool public rebState; // Is rebase enabled?\r\n    uint256 public rebaseCount = 0;\r\n    \r\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\r\n    // Use the highest value that fits in a uint256 for max granularity.\r\n    uint256 private immutable TOTAL_GONS;\r\n    \r\n    //Blocks token transfers when set to false\r\n    bool public _transfersEnabled;\r\n    \r\n    //The address of the wage syncer.\r\n    //Used to sync trading pairs across different exchanges.\r\n    IWageSyncer public _syncer;\r\n    \r\n    \r\n    constructor(string memory name, string memory symbol, uint256 initialSupply, bool shouldEnableTransfers) ERC20(name, symbol) public {\r\n        //A temporary variaable is necessary here.\r\n        //Solidity doesn't allow reading from an immutable variable during contract initialization\r\n        uint256 totalGonsTemp = MAX_UINT256 - (MAX_UINT256 % initialSupply);\r\n        TOTAL_GONS = totalGonsTemp;\r\n        \r\n        _totalSupply = initialSupply;\r\n        \r\n        _gonsPerFragment = totalGonsTemp.div(initialSupply);\r\n        \r\n        _balances[msg.sender] = totalGonsTemp;\r\n\r\n        //Enables transfers if specified in the constructor\r\n        _transfersEnabled = shouldEnableTransfers;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev Modifier that prevents transfers from every address (except the owner of the contract) when the _transfersEnabled flag is set to false \r\n     */\r\n    modifier transfersEnabled() {\r\n        require(_transfersEnabled || msg.sender == owner(), \"Transfers are disabled\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Enables transfers when called. Once enabled, transfers cannot be disabled.\r\n     */ \r\n    function enableTransfers() public onlyOwner override {\r\n        _transfersEnabled = true;\r\n        emit TransfersEnabled();\r\n    }\r\n    \r\n    //REBASE LOGIC FORKED FROM uFragments.\r\n    \r\n    /**\r\n     * @dev Notifies Fragments contract about a new rebase cycle. Can only be called by the contract owner\r\n     * @param supplyDelta The number of new fragment tokens to add into circulation via expansion.\r\n     * @return The total number of fragments after the supply adjustment.\r\n     */\r\n    function rebase(uint256 supplyDelta) external onlyOwner override returns (uint256) {\r\n        return _rebase(supplyDelta);\r\n    }\r\n    \r\n    /**\r\n     * @dev Notifies Fragments contract about a new rebase cycle. Can only be called internally.\r\n     * @param supplyDelta The number of new fragment tokens to add into circulation via expansion.\r\n     * @return The total number of fragments after the supply adjustment.\r\n     */\r\n    function _rebase(uint256 supplyDelta) internal returns (uint256) {\r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(now, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n\r\n        _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        // From this point forward, _gonsPerFragment is taken as the source of truth.\r\n        // We recalculate a new _totalSupply to be in agreement with the _gonsPerFragment\r\n        // conversion rate.\r\n        // This means our applied supplyDelta can deviate from the requested supplyDelta,\r\n        // but this deviation is guaranteed to be < (_totalSupply^2)/(TOTAL_GONS - _totalSupply).\r\n        //\r\n        // In the case of _totalSupply <= MAX_UIN128 (our current supply cap), this\r\n        // deviation is guaranteed to be < 1, so we can omit this step. If the supply cap is\r\n        // ever increased, it must be re-included.\r\n        // _totalSupply = TOTAL_GONS.div(_gonsPerFragment)\r\n\r\n        //Syncing trading pairs\r\n        _syncer.sync();\r\n        \r\n        rebaseCount.add(1);\r\n\r\n        emit LogRebase(now, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /**\r\n     * @dev Toggles rebases. Can only be called by the owner\r\n     * @param state Whether to enable or disable rebases\r\n     */ \r\n    function toggleRebase(bool state) external override onlyOwner {\r\n        rebState = state;\r\n        //We are setting the next rebase's timestamp to now + rebaseRate.\r\n        //Done to prevent multiple consecutive rebases\r\n        nextReb =  now + rebaseRate;\r\n        \r\n        emit RebaseToggled(state);\r\n    }\r\n    \r\n    /**\r\n     * @dev Changes the amount of time between each rebase. Can only be called by the owner\r\n     * @param newRate the new rebase rate (seconds)\r\n     */ \r\n    function changeRebaseRate(uint256 newRate) external override onlyOwner {\r\n        uint256 oldRate = rebaseRate;\r\n        rebaseRate = newRate;\r\n        nextReb = now.add(newRate);\r\n        \r\n        emit RebaseRateChanged(newRate, oldRate);\r\n    }\r\n    \r\n    /**\r\n     * @dev Changes the inflation amount after each rebase. Can only be called by the owner\r\n     * @param newAmount the new inflation amount\r\n     */ \r\n    function changeRebaseAmount(uint256 newAmount) external override onlyOwner {\r\n        uint256 oldAmount = rebaseAmount;\r\n        rebaseAmount = newAmount;\r\n        \r\n        emit RebaseAmountChanged(newAmount, oldAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new syncer smart contract. Can only be called by the owner.\r\n     * Syncers are used to sync trading pairs across dexes.\r\n     * @param newSyncer the address of the new syncer smart contract\r\n     */ \r\n    function changeWageSyncer(address newSyncer) external override onlyOwner {\r\n        address oldSyncer = address(_syncer);\r\n        _syncer = IWageSyncer(newSyncer);\r\n        \r\n        emit WageSyncerChanged(newSyncer, oldSyncer);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the gons per fragment rate. Can only be called by the owner.\r\n     * @return the gons per fragment rate\r\n     */\r\n    function gonsPerFragment() external view override onlyAuthorized(\"Address not authorized\") returns (uint256) {\r\n        return _gonsPerFragment;\r\n    }\r\n    \r\n    /**\r\n     * @dev Locks part of an address' gon balance. Needed for governance.\r\n     * The amount of locked fragments inflates after each rebase.\r\n     * @param target The target address\r\n     * @param gonAmount the amount of gons to lock\r\n     */\r\n    function lock(address target, uint256 gonAmount) external override onlyAuthorized(\"Address not authorized\") {\r\n        require(_balances[target].sub(_lockedGons[target]) >= gonAmount, \"Insufficient unlocked balance\");\r\n        \r\n        _lockedGons[target] = _lockedGons[target].add(gonAmount);\r\n        \r\n        emit TokensLocked(target, gonAmount.div(_gonsPerFragment));\r\n    }\r\n    \r\n    /**\r\n     * @dev Unlocks part of an adress' locked gon balane. Needed for governance.\r\n     * @param target The target address\r\n     * @param gonAmount the amount of gons to unlock\r\n     */\r\n    function unlock(address target, uint256 gonAmount) external override onlyAuthorized(\"Address not authorized\") {\r\n        require(_lockedGons[target] >= gonAmount, \"Insufficient locked balance\");\r\n        \r\n        _lockedGons[target] = _lockedGons[target].sub(gonAmount);\r\n        \r\n        emit TokensUnlocked(target, gonAmount.div(_gonsPerFragment));\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Returns the current locked fragments for an address\r\n     * @param addr the address\r\n     */ \r\n    function getLockedFragments(address addr) external view override returns (uint256) {\r\n        return _lockedGons[addr].div(_gonsPerFragment);\r\n    }\r\n    \r\n    /**\r\n     * @dev Executes a token transfer and rebases if the conditions are met. Can only be called internally\r\n     * @param from the address who's sending the tokens\r\n     * @param to the recipient address\r\n     * @param value the amount to transfer\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal override transfersEnabled {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        \r\n        uint256 gonsAmount = value.mul(_gonsPerFragment);\r\n        require(_balances[from].sub(_lockedGons[from]) >= gonsAmount, \"Insufficient unlocked balance\");\r\n\r\n        //Rebases if the conditions are met. \r\n        if (rebState && now >= nextReb) {\r\n            _rebase(rebaseAmount);\r\n            nextReb = now.add(rebaseRate);\r\n        }\r\n        \r\n        uint256 gonValue = value.mul(_gonsPerFragment);\r\n        _balances[from] = _balances[from].sub(gonValue);\r\n        _balances[to] = _balances[to].add(gonValue);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    \r\n    /**\r\n     * @param who The address to query.\r\n     * @return The balance of the specified address.\r\n     */\r\n    function balanceOf(address who) public view override(ERC20, IERC20) returns (uint256) {\r\n        return _balances[who].div(_gonsPerFragment);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldEnableTransfers\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GrantedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"}],\"name\":\"RebaseAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"}],\"name\":\"RebaseRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"RebaseToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RevokedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransfersEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSyncer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSyncer\",\"type\":\"address\"}],\"name\":\"WageSyncerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_syncer\",\"outputs\":[{\"internalType\":\"contract IWageSyncer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transfersEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"changeRebaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"changeRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSyncer\",\"type\":\"address\"}],\"name\":\"changeWageSyncer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLockedFragments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonsPerFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gonAmount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextReb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyDelta\",\"type\":\"uint256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"toggleRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gonAmount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Wage","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000168d28e3f0028000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004576167650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045741474500000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}