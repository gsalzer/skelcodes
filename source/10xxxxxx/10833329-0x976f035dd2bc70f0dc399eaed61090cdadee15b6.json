{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.6.9;\r\n\r\ncontract Owned {\r\n    address payable public owner;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address payable newOwner) external onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {\r\n        require(b <= a, errorMessage);\r\n        c = a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a >= b ? a : b;\r\n    }\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a <= b ? a : b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n// ----------------------------------------------------------------------------------\r\n// DutchSwap Auction Contract\r\n//\r\n//\r\n// This contract is modified from the contract by (c) Adrian Guerrera. Deepyr Pty Ltd.  \r\n// (https://github.com/apguerrera/DutchSwap)\r\n//                        \r\n// Sep 02 2020                                  \r\n// -----------------------------------------------------------------------------------\r\n\r\ncontract DutchSwapAuction is Owned {\r\n\r\n    using SafeMath for uint256;\r\n    uint256 private constant TENPOW18 = 10 ** 18;\r\n\r\n    uint256 public amountRaised;\r\n    uint256 public startDate;\r\n    uint256 public endDate;\r\n    uint256 public startPrice;\r\n    uint256 public minimumPrice;\r\n    uint256 public tokenSupply;\r\n    uint256 public tokenSold;\r\n    bool public finalised;\r\n    uint256 public withdrawDelay;   // delay in seconds preventing withdraws\r\n    uint256 public tokenWithdrawn;  // the amount of auction tokens already withdrawn by bidders\r\n    IERC20 public auctionToken; \r\n    address payable public wallet;\r\n    mapping(address => uint256) public commitments;\r\n\r\n    uint256 private unlocked = 1;\r\n\r\n    event AddedCommitment(address addr, uint256 commitment, uint256 price);\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, 'Locked');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }       \r\n\r\n    /// @dev Init function \r\n    function initDutchAuction(\r\n        address _token, \r\n        uint256 _tokenSupply, \r\n        //uint256 _startDate, \r\n        uint256 _auctionDuration,\r\n        uint256 _startPrice, \r\n        uint256 _minimumPrice,\r\n        uint256 _withdrawDelay,\r\n        address payable _wallet\r\n    ) \r\n        external onlyOwner\r\n    {\r\n        require(_auctionDuration > 0, \"Auction duration should be longer than 0 seconds\");\r\n        require(_startPrice > _minimumPrice, \"Start price should be bigger than minimum price\");\r\n        require(_minimumPrice > 0, \"Minimum price should be bigger than 0\");\r\n\r\n        auctionToken = IERC20(_token);\r\n\r\n        require(IERC20(auctionToken).transferFrom(msg.sender, address(this), _tokenSupply), \"Fail to transfer tokens to this contract\");\r\n\r\n        // 100 tokens are subtracted from totalSupply to ensure that this contract holds more tokens than tokenSuppy.\r\n        // This is to prevent any reverting of withdrawTokens() in case of any insufficiency of tokens due to programming\r\n        // languages' inability to handle float precisely, which might lead to extremely small insufficiency in tokens\r\n        // to be distributed. This potentail insufficiency is extremely small (far less than 1 token), which is more than\r\n        // sufficiently compensated hence.       \r\n        tokenSupply =_tokenSupply.sub(100000000000000000000);\r\n        startDate = block.timestamp;\r\n        endDate = block.timestamp.add(_auctionDuration);\r\n        startPrice = _startPrice;\r\n        minimumPrice = _minimumPrice; \r\n        withdrawDelay = _withdrawDelay;\r\n        wallet = _wallet;\r\n        finalised = false;\r\n    }\r\n\r\n\r\n    // Dutch Auction Price Function\r\n    // ============================\r\n    //  \r\n    // Start Price ----- \r\n    //                   \\ \r\n    //                    \\\r\n    //                     \\\r\n    //                      \\ ------------ Clearing Price\r\n    //                     / \\            = AmountRaised/TokenSupply\r\n    //      Token Price  --   \\\r\n    //                  /      \\ \r\n    //                --        ----------- Minimum Price\r\n    // Amount raised /          End Time\r\n    //\r\n\r\n    /// @notice The average price of each token from all commitments. \r\n    function tokenPrice() public view returns (uint256) {\r\n        return amountRaised.mul(TENPOW18).div(tokenSold);\r\n    }\r\n\r\n    /// @notice Token price decreases at this rate during auction.\r\n    function priceGradient() public view returns (uint256) {\r\n        uint256 numerator = startPrice.sub(minimumPrice);\r\n        uint256 denominator = endDate.sub(startDate);\r\n        return numerator.div(denominator);\r\n    }\r\n\r\n      /// @notice Returns price during the auction \r\n    function priceFunction() public view returns (uint256) {\r\n        /// @dev Return Auction Price\r\n        if (block.timestamp <= startDate) {\r\n            return startPrice;\r\n        }\r\n        if (block.timestamp >= endDate) {\r\n            return minimumPrice;\r\n        }\r\n        uint256 priceDiff = block.timestamp.sub(startDate).mul(priceGradient());\r\n        uint256 price = startPrice.sub(priceDiff);\r\n        return price;\r\n    }\r\n\r\n    /// @notice How many tokens the user is able to claim\r\n    function tokensClaimable(address _user) public view returns (uint256) {\r\n        if(!auctionEnded()) {\r\n            return 0;\r\n        }\r\n        return commitments[_user].mul(TENPOW18).div(tokenPrice());\r\n    }\r\n\r\n    /// @notice Returns bool if successful or time has ended\r\n    function auctionEnded() public view returns (bool){\r\n        return block.timestamp > endDate;\r\n    }\r\n\r\n    /// @notice Returns true and 0 if delay time is 0, otherwise false and delay time (in seconds) \r\n    function checkWithdraw() public view returns (bool, uint256) {\r\n        if (block.timestamp < endDate) {\r\n            return (false, endDate.sub(block.timestamp).add(withdrawDelay));\r\n        }\r\n\r\n        uint256 _elapsed = block.timestamp.sub(endDate);\r\n        if (_elapsed >= withdrawDelay) {\r\n            return (true, 0);\r\n        } else {\r\n            return (false, withdrawDelay.sub(_elapsed));\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the amount of auction tokens already withdrawn by bidders\r\n    function getTokenWithdrawn() public view returns (uint256) {\r\n        return tokenWithdrawn;\r\n    }\r\n\r\n    /// @notice Returns the amount of auction tokens sold but not yet withdrawn by bidders\r\n    function getTokenNotYetWithdrawn() public view returns (uint256) {\r\n        if (block.timestamp < endDate) {\r\n            return tokenSold;\r\n        }\r\n        uint256 totalTokenSold = amountRaised.mul(TENPOW18).div(tokenPrice());\r\n        return totalTokenSold.sub(tokenWithdrawn);\r\n    }\r\n\r\n    //--------------------------------------------------------\r\n    // Commit to buying tokens \r\n    //--------------------------------------------------------\r\n\r\n    /// @notice Buy Tokens by committing ETH to this contract address \r\n    receive () external payable {\r\n        commitEth(msg.sender);\r\n    }\r\n\r\n    /// @notice Commit ETH to buy tokens on sale\r\n    function commitEth (address payable _from) public payable lock {\r\n        //require(address(paymentCurrency) == ETH_ADDRESS);\r\n        require(block.timestamp >= startDate && block.timestamp <= endDate);\r\n\r\n        uint256 tokensToPurchase = msg.value.mul(TENPOW18).div(priceFunction());\r\n        // Get ETH able to be committed\r\n        uint256 tokensPurchased = calculatePurchasable(tokensToPurchase);\r\n\r\n        tokenSold = tokenSold.add(tokensPurchased);\r\n\r\n        // Accept ETH Payments\r\n        uint256 ethToTransfer = tokensPurchased < tokensToPurchase ? msg.value.mul(tokensPurchased).div(tokensToPurchase) : msg.value;\r\n\r\n        uint256 ethToRefund = msg.value.sub(ethToTransfer);\r\n        if (ethToTransfer > 0) {\r\n            addCommitment(_from, ethToTransfer);\r\n        }\r\n        // Return any ETH to be refunded\r\n        if (ethToRefund > 0) {\r\n            _from.transfer(ethToRefund);\r\n        }\r\n    }\r\n\r\n    /// @notice Commits to an amount during an auction\r\n    function addCommitment(address _addr,  uint256 _commitment) internal {\r\n        commitments[_addr] = commitments[_addr].add(_commitment);\r\n        amountRaised = amountRaised.add(_commitment);\r\n        emit AddedCommitment(_addr, _commitment, tokenPrice());\r\n    }\r\n\r\n    /// @notice Returns the amount able to be committed during an auction\r\n    function calculatePurchasable(uint256 _tokensToPurchase) \r\n        public view returns (uint256)\r\n    {\r\n        uint256 maxPurchasable = tokenSupply.sub(tokenSold);\r\n        if (_tokensToPurchase > maxPurchasable) {\r\n            return maxPurchasable;\r\n        }\r\n        return _tokensToPurchase;\r\n    }\r\n\r\n    //--------------------------------------------------------\r\n    // Modify WithdrawDelay In Auction \r\n    //--------------------------------------------------------\r\n\r\n    /// @notice Removes withdraw delay\r\n    /// @dev This function can only be carreid out by the owner of this contract.\r\n    function removeWithdrawDelay() external onlyOwner {\r\n        withdrawDelay = 0;\r\n    }\r\n    \r\n    /// @notice Add withdraw delay\r\n    /// @dev This function can only be carreid out by the owner of this contract.\r\n    function addWithdrawDelay(uint256 _delay) external onlyOwner {\r\n        withdrawDelay = withdrawDelay.add(_delay);\r\n    }\r\n\r\n\r\n    //--------------------------------------------------------\r\n    // Finalise Auction\r\n    //--------------------------------------------------------\r\n\r\n    /// @notice Auction finishes successfully above the reserve\r\n    /// @dev Transfer contract funds to initialised wallet. \r\n    function finaliseAuction () public {\r\n        require(!finalised && auctionEnded());\r\n        finalised = true;\r\n\r\n        //_tokenPayment(paymentCurrency, wallet, amountRaised);\r\n        wallet.transfer(amountRaised);\r\n    }\r\n\r\n    /// @notice Withdraw your tokens once the Auction has ended.\r\n    function withdrawTokens() public lock {\r\n        require(auctionEnded(), \"DutchSwapAuction: Auction still live\");\r\n        (bool canWithdraw,) = checkWithdraw();\r\n        require(canWithdraw == true, \"DutchSwapAuction: Withdraw Delay\");\r\n        uint256 fundsCommitted = commitments[ msg.sender];\r\n        require(fundsCommitted > 0, \"You have no bidded tokens\");\r\n        uint256 tokensToClaim = tokensClaimable(msg.sender);\r\n        commitments[ msg.sender] = 0;\r\n        tokenWithdrawn = tokenWithdrawn.add(tokensToClaim);\r\n\r\n        /// @notice Successful auction! Transfer tokens bought.\r\n        if (tokensToClaim > 0 ) {\r\n            _tokenPayment(auctionToken, msg.sender, tokensToClaim);\r\n        }\r\n    }\r\n\r\n    /// @notice Transfer unbidded auction token to a new address after auction ends\r\n    /// @dev This function can only be carreid out by the owner of this contract.\r\n    function transferLeftOver(uint256 _amount, address payable _addr) external onlyOwner returns (bool) {\r\n        require(block.timestamp > endDate.add(withdrawDelay).add(7 * 24 * 60 * 60), \"Cannot transfer auction tokens within 7 days after withdraw day\");\r\n        require(_amount > 0, \"Cannot transfer 0 tokens\");\r\n        _tokenPayment(auctionToken, _addr, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Helper function to handle ERC20 payments\r\n    function _tokenPayment(IERC20 _token, address payable _to, uint256 _amount) internal {\r\n        require(_token.transfer(_to, _amount), \"Fail to transfer tokens\");\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AddedCommitment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"addWithdrawDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToPurchase\",\"type\":\"uint256\"}],\"name\":\"calculatePurchasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"commitEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finaliseAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenNotYetWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawDelay\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"initDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFunction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceGradient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWithdrawDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokensClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"transferLeftOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DutchSwapAuction","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a1021e30d77351b9ddfb4bfe389657e41a0af5f4f44740be9bbd6555339a31ea"}]}