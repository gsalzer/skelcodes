{"status":"1","message":"OK","result":[{"SourceCode":"pragma experimental ABIEncoderV2;\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-04-03\r\n*/\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    // function toPayable(address account) internal pure returns (address payable) {\r\n    //     return address(uint160(account));\r\n    // }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    // function sendValue(address payable recipient, uint256 amount) internal {\r\n    //     require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    //     // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    //     (bool success, ) = recipient.call.value(amount)(\"\");\r\n    //     require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    // }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    // function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    //     uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    //     callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    // }\r\n\r\n    // function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    //     uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n    //     callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    // }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    // function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    //     _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    //     return true;\r\n    // }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    // function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    //     _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n    //     return true;\r\n    // }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        // _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        // _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        // _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    // function _burnFrom(address account, uint256 amount) internal virtual {\r\n    //     _burn(account, amount);\r\n    //     _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    // }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\r\n     */\r\n    // function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: ../../../../tmp/openzeppelin-contracts/contracts/token/ERC20/ERC20Burnable.sol\r\n// pragma solidity ^0.6.0;\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    // function burnFrom(address account, uint256 amount) public virtual {\r\n    //     _burnFrom(account, amount);\r\n    // }\r\n}\r\n\r\n//https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\nenum BondStage {\r\n        //无意义状态\r\n        DefaultStage,\r\n        //评级\r\n        RiskRating,\r\n        RiskRatingFail,\r\n        //募资\r\n        CrowdFunding,\r\n        CrowdFundingSuccess,\r\n        CrowdFundingFail,\r\n        UnRepay,//待还款\r\n        RepaySuccess,\r\n        Overdue,\r\n        //由清算导致的债务结清\r\n        DebtClosed\r\n    }\r\n\r\n//状态标签\r\nenum IssuerStage {\r\n        DefaultStage,\r\n\t\tUnWithdrawCrowd,\r\n        WithdrawCrowdSuccess,\r\n\t\tUnWithdrawPawn,\r\n        WithdrawPawnSuccess       \r\n    }\r\n\r\ninterface ICore {\r\n    function initialDepositCb(uint256 id, uint256 amount) external;\r\n    function depositCb(address who, uint256 id, uint256 amount) external returns (bool);\r\n\r\n    function investCb(address who, uint256 id, uint256 amount) external returns (bool);\r\n\r\n    function interestBearingPeriod(uint256 id) external returns (bool);\r\n\r\n    function txOutCrowdCb(address who, uint256 id) external returns (uint);\r\n\r\n    function repayCb(address who, uint256 id) external returns (uint);\r\n\r\n    function withdrawPawnCb(address who, uint256 id) external returns (uint);\r\n\r\n    function withdrawPrincipalCb(address who, uint id) external returns (uint);\r\n    function withdrawPrincipalAndInterestCb(address who, uint id) external returns (uint);\r\n    function liquidateCb(address who, uint id, uint liquidateAmount) external returns (uint, uint, uint, uint);\r\n    function overdueCb(uint256 id) external;\r\n\r\n    function withdrawSysProfitCb(address who, uint256 id) external returns (uint256);\r\n    \r\n    \r\n    function MonitorEventCallback(address who, address bond, bytes32 funcName, bytes calldata) external;\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20Detailed {\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IVote {\r\n    function take(uint256 id, address who) external returns(uint256);\r\n    function cast(uint256 id, address who, address proposal, uint256 amount) external;\r\n    function profit(uint256 id, address who) external returns(uint256);\r\n}\r\n\r\ninterface IACL {\r\n    function accessible(address sender, address to, bytes4 sig)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function enableany(address from, address to) external;\r\n    function enableboth(address from, address to) external;\r\n}\r\n\r\ncontract BondData is ERC20Detailed, ERC20Burnable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public logic;\r\n\r\n    constructor(\r\n        address _ACL,\r\n        uint256 bondId,\r\n        string memory _bondName,\r\n        address _issuer,\r\n        address _collateralToken,\r\n        address _crowdToken,\r\n        uint256[8] memory info,\r\n        bool[2] memory _redeemPutback //是否支持赎回和回售\r\n    ) public ERC20Detailed(_bondName, _bondName, 0) {\r\n        ACL = _ACL;\r\n        id = bondId;\r\n        issuer = _issuer;\r\n        collateralToken = _collateralToken;\r\n        crowdToken = _crowdToken;\r\n        totalBondIssuance = info[0];\r\n        couponRate = info[1];\r\n        maturity = info[2];\r\n        issueFee = info[3];\r\n        minIssueRatio = info[4];\r\n        financePurposeHash = info[5];\r\n        paymentSourceHash = info[6];\r\n        issueTimestamp = info[7];\r\n        supportRedeem = _redeemPutback[0];\r\n        supportPutback = _redeemPutback[1];\r\n        par = 100;\r\n    }\r\n\r\n    /** ACL */\r\n    address public ACL;\r\n\r\n    modifier auth {\r\n        IACL _ACL = IACL(ACL);\r\n        require(\r\n            _ACL.accessible(msg.sender, address(this), msg.sig)\r\n        , \"access unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /** 债券基本信息 */\r\n\r\n    uint256 public id;\r\n    address public issuer; //发债方\r\n    address public collateralToken; //质押代币\r\n    address public crowdToken; //融资代币地址\r\n\r\n    uint256 public totalBondIssuance; //预计发行量，债券发行总量，以USDT计\r\n    uint256 public actualBondIssuance; //实际发行份数\r\n    uint256 public mintCnt;//增发的次数\r\n    uint256 public par; //票面价值（面值）,USDT or DAI\r\n    uint256 public couponRate; //票面利率；息票利率 15%\r\n\r\n    uint256 public maturity; //债券期限，到期日,债券期限(30天)\r\n    uint256 public issueFee; //发行费用,0.2%\r\n    uint256 public minIssueRatio; //最低融资比率\r\n\r\n    uint256 public financePurposeHash;\r\n    uint256 public paymentSourceHash;\r\n    uint256 public issueTimestamp;//申请发债时间\r\n    bool public supportRedeem;//是否支持赎回, 该变量之前没有使用，现作为是否支持评级的标志, 支持为true，否则为false\r\n    bool public supportPutback;//是否支持回售\r\n\r\n    //分批清算的参数设置，设置最后剩余清算额度为1000单位，当最后剩余清算额度<1000时，用户需一次性清算完毕。\r\n    uint256 public partialLiquidateAmount;\r\n\r\n    uint256 public discount; //清算折扣,系统设定，非发行方提交\r\n    uint256 public liquidateLine = 7e17;//质押资产价值下跌30%时进行清算 1-0.3 = 0.7\r\n    uint256 public gracePeriod = 1 days; //债务宽限期\r\n    uint256 public depositMultiple;\r\n\r\n    /** 债券状态时间线 */\r\n\r\n    uint256 public voteExpired; //债券投票截止时间\r\n    uint256 public investExpired; //用户购买债券截止时间\r\n    uint256 public bondExpired; //债券到期日\r\n\r\n    /** 债券创建者/投资者信息 */\r\n\r\n    struct Balance {\r\n        //发行者：\r\n        //amountGive: 质押的token数量，项目方代币\r\n        //amountGet: 募集的token数量，USDT，USDC\r\n\r\n        //投资者：\r\n        //amountGive: 投资的token数量，USDT，USDC\r\n        //amountGet: 债券凭证数量\r\n        uint256 amountGive;\r\n        uint256 amountGet;\r\n    }\r\n\r\n    //1个发行人\r\n    uint256 public issuerBalanceGive;\r\n    //多个投资人\r\n    mapping(address => Balance) public supplyMap; //usr->supply\r\n\r\n    /** 债券配置对象 */\r\n\r\n    uint256 public fee;\r\n    uint256 public sysProfit;//平台盈利，为手续费的分成\r\n\r\n    //债务加利息\r\n    uint256 public liability;\r\n    uint256 public originLiability;\r\n\r\n    //状态：\r\n    uint256 public bondStage;\r\n    uint256 public issuerStage;\r\n\r\n    function setLogics(address _logic, address _voteLogic) external auth {\r\n        logic = _logic;\r\n        voteLogic = _voteLogic;\r\n    }\r\n\r\n    function setBondParam(bytes32 k, uint256 v) external auth {\r\n        if (k == bytes32(\"discount\")) {\r\n            discount = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"liquidateLine\")) {\r\n            liquidateLine = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"depositMultiple\")) {\r\n            depositMultiple = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"gracePeriod\")) {\r\n            gracePeriod = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"voteExpired\")) {\r\n            voteExpired = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"investExpired\")) {\r\n            investExpired = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"bondExpired\")) {\r\n            bondExpired = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"partialLiquidateAmount\")) {\r\n            partialLiquidateAmount = v;\r\n            return;\r\n        }\r\n        \r\n        if (k == bytes32(\"fee\")) {\r\n            fee = v;\r\n            return;\r\n        }\r\n        \r\n        if (k == bytes32(\"sysProfit\")) {\r\n            sysProfit = v;\r\n            return;\r\n        }\r\n        \r\n        if (k == bytes32(\"originLiability\")) {\r\n            originLiability = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"liability\")) {\r\n            liability = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"totalWeights\")) {\r\n            totalWeights = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"totalProfits\")) {\r\n            totalProfits = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"borrowAmountGive\")) {\r\n            issuerBalanceGive = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"bondStage\")) {\r\n            bondStage = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"issuerStage\")) {\r\n            issuerStage = v;\r\n            return;\r\n        }\r\n        revert(\"setBondParam: invalid bytes32 key\");\r\n    }\r\n\r\n    function setBondParamAddress(bytes32 k, address v) external auth {\r\n        if (k == bytes32(\"gov\")) {\r\n            gov = v;\r\n            return;\r\n        }\r\n\r\n        if (k == bytes32(\"top\")) {\r\n            top = v;\r\n            return;\r\n        }\r\n        revert(\"setBondParamAddress: invalid bytes32 key\");\r\n    }\r\n\r\n\r\n    function getSupplyAmount(address who) external view returns (uint256) {\r\n        return supplyMap[who].amountGive;\r\n    }\r\n\r\n    function getBorrowAmountGive() external view returns (uint256) {\r\n        return issuerBalanceGive;\r\n    }\r\n\r\n\r\n\r\n    /** 清算记录流水号 */\r\n    uint256 public liquidateIndexes;\r\n\r\n    /** 分批清算设置标记 */\r\n    bool public liquidating;\r\n    function setLiquidating(bool _liquidating) external auth {\r\n        liquidating = _liquidating;\r\n    }\r\n\r\n    /** 评级 */\r\n\r\n    address public voteLogic;\r\n    \r\n    struct what {\r\n        address proposal;\r\n        uint256 weight;\r\n    }\r\n\r\n    struct prwhat {\r\n        address who;\r\n        address proposal;\r\n        uint256 reason;\r\n    }\r\n\r\n    mapping(address => uint256) public voteLedger; //who => amount\r\n    mapping(address => what) public votes; //who => what\r\n    mapping(address => uint256) public weights; //proposal => weight\r\n    mapping(address => uint256) public profits; //who => profit\r\n    uint256 public totalProfits;    //累计已经被取走的投票收益, 用于对照 @fee.\r\n    uint256 public totalWeights;\r\n    address public gov;\r\n    address public top;\r\n    prwhat public pr;\r\n\r\n\r\n    function setVotes(address who, address proposal, uint256 weight)\r\n        external\r\n        auth\r\n    {\r\n        votes[who].proposal = proposal;\r\n        votes[who].weight = weight;\r\n    }\r\n\r\n\r\n\r\n    function setACL(\r\n        address _ACL) external {\r\n        require(msg.sender == ACL, \"require ACL\");\r\n        ACL = _ACL;\r\n    }\r\n\r\n\r\n    function setPr(address who, address proposal, uint256 reason) external auth {\r\n        pr.who = who;\r\n        pr.proposal = proposal;\r\n        pr.reason = reason;\r\n    }\r\n\r\n    \r\n    function setBondParamMapping(bytes32 name, address k, uint256 v) external auth {\r\n        if (name == bytes32(\"weights\")) {\r\n            weights[k] = v;\r\n            return;\r\n        }\r\n\r\n        if (name == bytes32(\"profits\")) {\r\n            profits[k] = v;\r\n            return;\r\n        }\r\n        revert(\"setBondParamMapping: invalid bytes32 name\");\r\n    }\r\n\r\n\r\n    function vote(address proposal, uint256 amount) external nonReentrant {\r\n        IVote(voteLogic).cast(id, msg.sender, proposal, amount);\r\n        voteLedger[msg.sender] = voteLedger[msg.sender].add(amount);\r\n        IERC20(gov).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"vote\", abi.encodePacked(\r\n            proposal,\r\n            amount, \r\n            govTokenCash()\r\n        ));\r\n    }\r\n\r\n    function take() external nonReentrant {\r\n        uint256 amount = IVote(voteLogic).take(id, msg.sender);\r\n        voteLedger[msg.sender] = voteLedger[msg.sender].sub(amount);\r\n        IERC20(gov).safeTransfer(msg.sender, amount);\r\n\r\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"take\", abi.encodePacked(\r\n            amount, \r\n            govTokenCash()\r\n        ));\r\n    }\r\n\r\n    function profit() external nonReentrant {\r\n        uint256 _profit = IVote(voteLogic).profit(id, msg.sender);\r\n        IERC20(crowdToken).safeTransfer(msg.sender, _profit);\r\n\r\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"profit\", abi.encodePacked(\r\n            _profit, \r\n            crowdTokenCash()\r\n        ));\r\n    }\r\n\r\n    function withdrawSysProfit() external nonReentrant auth {\r\n        uint256 _sysProfit = ICore(logic).withdrawSysProfitCb(msg.sender, id);\r\n        require(_sysProfit <= totalFee() && (bondStage == uint(BondStage.RepaySuccess) || bondStage == uint(BondStage.DebtClosed)), \"> totalFee\");\r\n\r\n        IERC20(crowdToken).safeTransfer(msg.sender, _sysProfit);\r\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"withdrawSysProfit\", abi.encodePacked(\r\n            _sysProfit,\r\n            crowdTokenCash()\r\n        ));\r\n    }\r\n\r\n    function burnBond(address who, uint256 amount) external auth {\r\n        _burn(who, amount);\r\n        actualBondIssuance = actualBondIssuance.sub(amount);\r\n    }\r\n\r\n    function mintBond(address who, uint256 amount) external auth {\r\n        _mint(who, amount);\r\n        mintCnt = mintCnt.add(amount);\r\n        actualBondIssuance = actualBondIssuance.add(amount);\r\n    }\r\n\r\n    function txn(address sender, address recipient, uint256 bondAmount, bytes32 name) internal {\r\n        uint256 txAmount = bondAmount.mul(par).mul(10**uint256(crowdDecimals()));\r\n        supplyMap[sender].amountGive = supplyMap[sender].amountGive.sub(txAmount);\r\n        supplyMap[sender].amountGet = supplyMap[sender].amountGet.sub(bondAmount);\r\n        supplyMap[recipient].amountGive = supplyMap[recipient].amountGive.add(txAmount);\r\n        supplyMap[recipient].amountGet = supplyMap[recipient].amountGet.add(bondAmount);\r\n\r\n        ICore(logic).MonitorEventCallback(sender, address(this), name, abi.encodePacked(\r\n            recipient,\r\n            bondAmount\r\n        ));\r\n    }\r\n\r\n    function transfer(address recipient, uint256 bondAmount) \r\n        public override(IERC20, ERC20) nonReentrant\r\n        returns (bool)\r\n    {\r\n        txn(msg.sender, recipient, bondAmount, \"transfer\");\r\n        return ERC20.transfer(recipient, bondAmount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 bondAmount)\r\n        public override(IERC20, ERC20) nonReentrant\r\n        returns (bool)\r\n    {\r\n        txn(sender, recipient, bondAmount, \"transferFrom\");\r\n        return ERC20.transferFrom(sender, recipient, bondAmount);\r\n    }\r\n\r\n    mapping(address => uint256) public depositLedger;\r\n    function crowdDecimals() public view returns (uint8) {\r\n        return ERC20Detailed(crowdToken).decimals();\r\n    }\r\n\r\n    //可转出金额,募集到的总资金减去给所有投票人的手续费\r\n    function transferableAmount() public view returns (uint256) {\r\n        uint256 baseDec = 18;\r\n        uint256 _1 = 1 ether;\r\n        //principal * (1-0.05) * 1e18/(10** (18 - 6))\r\n        return\r\n            mintCnt.mul(par).mul((_1).sub(issueFee)).div(\r\n                10**baseDec.sub(uint256(crowdDecimals()))\r\n            );\r\n    }\r\n\r\n    function totalFee() public view returns (uint256) {\r\n        uint256 baseDec = 18;\r\n        uint256 delta = baseDec.sub(\r\n            uint256(crowdDecimals())\r\n        );\r\n        //principal * (0.05) * 1e18/(10** (18 - 6))\r\n        return mintCnt.mul(par).mul(issueFee).div(10**delta);\r\n    }\r\n\r\n    //追加抵押物\r\n    function deposit(uint256 amount) external nonReentrant payable {\r\n        require(ICore(logic).depositCb(msg.sender, id, amount), \"deposit err\");\r\n        depositLedger[msg.sender] = depositLedger[msg.sender].add(amount);\r\n        if (collateralToken != address(0)) {\r\n            IERC20(collateralToken).safeTransferFrom(msg.sender, address(this), amount);\r\n        } else {\r\n            require(amount == msg.value && msg.value > 0, \"deposit eth err\");\r\n        }\r\n\r\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"deposit\", abi.encodePacked(\r\n            amount, \r\n            collateralTokenCash()\r\n        ));\r\n    }\r\n\r\n    function collateralTokenCash() internal view returns (uint256) {\r\n        return collateralToken != address(0) ? IERC20(collateralToken).balanceOf(address(this)) : address(this).balance;\r\n    }\r\n\r\n    function crowdTokenCash() internal view returns (uint256) {\r\n        return IERC20(crowdToken).balanceOf(address(this));\r\n    }\r\n\r\n    function govTokenCash() internal view returns (uint256) {\r\n        return IERC20(gov).balanceOf(address(this));\r\n    }\r\n\r\n    //首次加入抵押物\r\n    function initialDeposit(address who, uint256 amount) external auth nonReentrant payable {\r\n        depositLedger[who] = depositLedger[who].add(amount);\r\n        if (collateralToken != address(0)) {\r\n            IERC20(collateralToken).safeTransferFrom(msg.sender, address(this), amount);\r\n        } else {\r\n\t        require(amount == msg.value && msg.value > 0, \"initDeposit eth err\");\r\n\t    }\r\n\r\n        ICore(logic).initialDepositCb(id, amount);\r\n\r\n        ICore(logic).MonitorEventCallback(who, address(this), \"initialDeposit\", abi.encodePacked(\r\n            amount, \r\n            collateralTokenCash()\r\n        ));\r\n    }\r\n\r\n    function invest(uint256 amount) external nonReentrant {\r\n        if (ICore(logic).investCb(msg.sender, id, amount)) {\r\n            supplyMap[msg.sender].amountGive = supplyMap[msg.sender].amountGive.add(amount);\r\n            supplyMap[msg.sender].amountGet = supplyMap[msg.sender].amountGet.add(amount.div(par.mul(10**uint256(crowdDecimals()))));\r\n\r\n            //充值amount token到合约中，充值之前需要approve\r\n            IERC20(crowdToken).safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n\r\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"invest\", abi.encodePacked(\r\n            amount, \r\n            crowdTokenCash()\r\n        ));\r\n    }\r\n\r\n    function txOutCrowd() external nonReentrant {\r\n        uint256 balance = ICore(logic).txOutCrowdCb(msg.sender, id);\r\n        require(balance <= transferableAmount(), \"exceed max tx amount\");\r\n\r\n\r\n        IERC20(crowdToken).safeTransfer(msg.sender, balance);\r\n\r\n\r\n\r\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"txOutCrowd\", abi.encodePacked(\r\n            balance, \r\n            crowdTokenCash()\r\n        ));\r\n    }\r\n\r\n    function overdue() external {\r\n        ICore(logic).overdueCb(id);\r\n    }\r\n\r\n    function repay() external nonReentrant {\r\n        uint repayAmount = ICore(logic).repayCb(msg.sender, id);\r\n\r\n        IERC20(crowdToken).safeTransferFrom(msg.sender, address(this), repayAmount);\r\n\r\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"repay\", abi.encodePacked(\r\n            repayAmount, \r\n            crowdTokenCash()\r\n        ));\r\n    }\r\n\r\n    function withdrawPawn() external nonReentrant {\r\n        uint amount = ICore(logic).withdrawPawnCb(msg.sender, id);\r\n        depositLedger[msg.sender] = depositLedger[msg.sender].sub(amount);\r\n        if (collateralToken != address(0)) {\r\n\r\n            IERC20(collateralToken).safeTransfer(msg.sender, amount);\r\n        } else {\r\n            msg.sender.transfer(amount);\r\n        }\r\n\r\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"withdrawPawn\", abi.encodePacked(\r\n            amount, \r\n            collateralTokenCash()\r\n        ));\r\n    }\r\n\r\n    function withdrawInvest(address who, uint amount, bytes32 name) internal {\r\n        IERC20(crowdToken).safeTransfer(who, amount);\r\n        ICore(logic).MonitorEventCallback(who, address(this), name, abi.encodePacked(\r\n            amount, \r\n            crowdTokenCash()\r\n        ));\r\n    }\r\n\r\n    function withdrawPrincipal() external nonReentrant {\r\n        uint256 supplyGive = ICore(logic).withdrawPrincipalCb(msg.sender, id);\r\n        supplyMap[msg.sender].amountGive = supplyMap[msg.sender].amountGet = 0;\r\n        withdrawInvest(msg.sender, supplyGive, \"withdrawPrincipal\");\r\n    }\r\n\r\n    function withdrawPrincipalAndInterest() external nonReentrant {\r\n        uint256 amount = ICore(logic).withdrawPrincipalAndInterestCb(msg.sender, id);\r\n        uint256 _1 = 1 ether;\r\n        require(amount <= supplyMap[msg.sender].amountGive.mul(_1.add(couponRate)).div(_1) && supplyMap[msg.sender].amountGive != 0, \"exceed max invest amount or not an invester\");\r\n        supplyMap[msg.sender].amountGive = supplyMap[msg.sender].amountGet = 0;\r\n\r\n        withdrawInvest(msg.sender, amount, \"withdrawPrincipalAndInterest\");\r\n    }\r\n\r\n    //分批清算,y为债务\r\n    function liquidate(uint liquidateAmount) external nonReentrant {\r\n        (uint y1, uint x1, uint y, uint x) = ICore(logic).liquidateCb(msg.sender, id, liquidateAmount);\r\n\r\n        if (collateralToken != address(0)) {\r\n\r\n            IERC20(collateralToken).safeTransfer(msg.sender, x1);\r\n        } else {\r\n            msg.sender.transfer(x1);\r\n        }\r\n\r\n\r\n\r\n        IERC20(crowdToken).safeTransferFrom(msg.sender, address(this), y1);\r\n\r\n        ICore(logic).MonitorEventCallback(msg.sender, address(this), \"liquidate\", abi.encodePacked(\r\n            liquidateIndexes, \r\n            x1, \r\n            y1,\r\n            x,\r\n            y,\r\n            now, \r\n            collateralTokenCash(),\r\n            crowdTokenCash()\r\n        ));\r\n        liquidateIndexes = liquidateIndexes.add(1);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ACL\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bondName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crowdToken\",\"type\":\"address\"},{\"internalType\":\"uint256[8]\",\"name\":\"info\",\"type\":\"uint256[8]\"},{\"internalType\":\"bool[2]\",\"name\":\"_redeemPutback\",\"type\":\"bool[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actualBondIssuance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couponRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositMultiple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"financePurposeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowAmountGive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getSupplyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initialDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuerBalanceGive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuerStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidateAmount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateLine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIssueRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originLiability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overdue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"par\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partialLiquidateAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentSourceHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ACL\",\"type\":\"address\"}],\"name\":\"setACL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"k\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"setBondParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"k\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"}],\"name\":\"setBondParamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"k\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"setBondParamMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_liquidating\",\"type\":\"bool\"}],\"name\":\"setLiquidating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voteLogic\",\"type\":\"address\"}],\"name\":\"setLogics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"setPr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"setVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountGet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportPutback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sysProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"top\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBondIssuance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txOutCrowd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPrincipalAndInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawSysProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BondData","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000063ad95a0fdc69269960a257c7e9bfa3629ac4dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000004d3c30b365dccecceaa3ba367494ff7f7b7a02220000000000000000000000001fcdce58959f536621d76f5b7ffb955baa5a672f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000007735940000000000000000000000000000000000000000000000000000175c3d37f2a1510000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000000000000000000000000000000c7d713b49da000000000000000000000000000000000000a06038939be66cacd092fa692eac3b5300000000000000000000000000000000a06038939be66cacd092fa692eac3b53000000000000000000000000000000000000000000000000000000005ed8ebc9000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008426f6e64464f5230000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://672533ee497388f25a648c9ce0ff8d79bdc0f126b16c641d8e5baf0803b3a4b8"}]}