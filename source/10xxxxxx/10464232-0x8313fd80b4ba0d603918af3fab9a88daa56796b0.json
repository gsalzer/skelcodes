{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-05-26\r\n*/\r\n\r\npragma solidity ^0.5.4;\r\n\r\ninterface IDToken {\r\n\tfunction mint(address _dst, uint _pie) external;\r\n    function burn(address _src, uint _wad) external;\r\n    function redeem(address _src, uint _pie) external;\r\n\r\n    function getTokenRealBalance(address _src) external view returns (uint);\r\n    function getLiquidity() external view returns (uint);\r\n    function token() external view returns (address);\r\n}\r\n\r\ninterface IPriceOracle {\r\n\tfunction assetPrices(address _asset) external view returns (uint);\r\n}\r\n\r\nlibrary DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        require(y > 0, \"ds-math-div-overflow\");\r\n        z = x / y;\r\n    }\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n    event OwnerUpdate     (address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n    address      public  newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    bool internal notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, notEntered will be true\r\n        require(notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        notEntered = true;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint _value) external;\r\n    function transferFrom(address _from, address _to, uint _value) external;\r\n    function approve(address _spender, uint _value) external;\r\n    function balanceOf(address account) external view returns (uint);\r\n\tfunction allowance(address _owner, address _spender) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ncontract ERC20SafeTransfer {\r\n    function doTransferOut(address _token, address _to, uint _amount) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool result;\r\n\r\n        token.transfer(_to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function doTransferFrom(address _token, address _from, address _to, uint _amount) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool result;\r\n\r\n        token.transferFrom(_from, _to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function doApprove(address _token, address _to, uint _amount) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool result;\r\n\r\n        token.approve(_to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\ncontract XSwap is DSAuth, ReentrancyGuard, ERC20SafeTransfer {\r\n    using DSMath for uint;\r\n\r\n    uint constant internal OFFSET = 10 ** 18;\r\n    bool private actived;\r\n    uint public maxSwing;\r\n\r\n    address public oracle;\r\n    mapping(address => mapping(address => uint)) public fee;  // Fee for exchange from tokenA to tokenB\r\n\r\n    bool public isOpen;  // The state of contract\r\n    mapping(address => bool) public tokensEnable;  // Support this token or not\r\n    // Trade pair supports or not\r\n    mapping(address => mapping(address => bool)) public tradesDisable;\r\n\r\n    mapping(address => address) public supportDToken;\r\n    mapping(address => address) public remainingDToken;\r\n\r\n    bool public paused;\r\n\r\n    event Swap(\r\n        address from,\r\n        address to,\r\n        address input,\r\n        uint inputAmount,\r\n        uint inputPrice,\r\n        address output,\r\n        uint outputAmount,\r\n        uint outputPrice\r\n    );\r\n\r\n    event SetOracle(address oracle);\r\n    event SetMaxSwing(uint maxSwing);\r\n    event SetFee(address input, address output, uint fee);\r\n    event Paused(address admin);\r\n    event Unpaused(address admin);\r\n    event EmergencyStop(bool isOpen);\r\n    event DisableToken(address token);\r\n    event EnableToken(address token);\r\n    event DisableTrade(address input, address output);\r\n    event EnableTrade(address input, address output);\r\n    event DisableDToken(address DToken, address token, uint DTokenBalance);\r\n    event EnableDToken(address DToken, address token, uint DTokenBalance);\r\n    event TransferIn(address token, uint amount, uint balance);\r\n    event TransferOut(address token, address receiver, uint amount, uint balance);\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    // --- Init ---\r\n    // This function is used with contract proxy, do not modify this function.\r\n    function active(address _oracle) external {\r\n        require(actived == false, \"active: Already actived!\");\r\n        owner = msg.sender;\r\n        isOpen = true;\r\n        oracle = _oracle;\r\n        maxSwing = 15 * 10 ** 17;\r\n        notEntered = true;\r\n        actived = true;\r\n    }\r\n\r\n    // ****************************\r\n    // *** Authorized functions ***\r\n    // ****************************\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Sets a new oracle contract address.\r\n     * @param _oracle New oracle contract.\r\n     */\r\n    function setOracle(address _oracle) external auth {\r\n        oracle = _oracle;\r\n        emit SetOracle(_oracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Set a new maxSwing value.\r\n     * @param _maxSwing New maxSwing value.\r\n     */\r\n    function setMaxSwing(uint _maxSwing) external auth {\r\n        require(_maxSwing >= OFFSET && _maxSwing <= OFFSET.mul(2), \"setMaxSwing: New maxSwing non-compliant\");\r\n        maxSwing = _maxSwing;\r\n        emit SetMaxSwing(_maxSwing);\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Sets trading fee for specified trade pair.\r\n     * @param _input One asset in the trade pair.\r\n     * @param _output The other asset in the trade pair.\r\n     * @param _fee Trading fee when swaps these two tokens.\r\n     */\r\n    function setFee(address _input, address _output, uint _fee) public auth {\r\n        fee[_input][_output] = _fee;\r\n        fee[_output][_input] = _fee;\r\n        emit SetFee(_input, _output, _fee);\r\n    }\r\n\r\n    function setFeeBatch(address[] calldata _input, address[] calldata _output, uint[] calldata _fee) external auth {\r\n        require(_input.length == _output.length && _input.length == _fee.length, \"setFeeBatch: \");\r\n        for (uint i = 0; i < _input.length; i++) {\r\n            require(_input[i] != _output[i], \"setFeeBatch: \");\r\n            setFee(_input[i], _output[i], _fee[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the authorized users to pause, triggers stopped state.\r\n     */\r\n    function pause() public auth {\r\n        require(!paused, \"pause: paused\");\r\n        paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the authorized users to unpause, returns to normal state.\r\n     */\r\n    function unpause() public auth {\r\n        require(paused, \"unpause: not paused\");\r\n        paused = false;\r\n        emit Unpaused(msg.sender);\r\n        \r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Changes the contract state.\r\n     * @param _changeStateTo True means unpause contract, and false means pause conntract.\r\n     */\r\n    function emergencyStop(bool _changeStateTo) external auth {\r\n        isOpen = _changeStateTo;\r\n        emit EmergencyStop(_changeStateTo);\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Suspends a given asset.\r\n     * @param _token Asset to suspend.\r\n     */\r\n    function disableToken(address _token) external auth {\r\n        tokensEnable[_token] = false;\r\n        emit DisableToken(_token);\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Supports a given asset.\r\n     * @param _token Asset to support.\r\n     */\r\n    function enableToken(address _token) external auth {\r\n        tokensEnable[_token] = true;\r\n        emit EnableToken(_token);\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Suspends a given trade pair.\r\n     * @param _input One asset in the trade pair.\r\n     * @param _output The other asset in the trade pair.\r\n     */\r\n    function disableTrade(address _input, address _output) external auth {\r\n        tradesDisable[_input][_output] = true;\r\n        tradesDisable[_output][_input] = true;\r\n        emit DisableTrade(_input, _output);\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Supports a given trade pair.\r\n     * @param _input One asset in the trade pair.\r\n     * @param _output The other asset in the trade pair.\r\n     */\r\n    function enableTrade(address _input, address _output) external auth {\r\n        tradesDisable[_input][_output] = false;\r\n        tradesDisable[_output][_input] = false;\r\n        emit EnableTrade(_input, _output);\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Suspends a given dToken.\r\n     * @param _dToken dToken to suspend.\r\n     */\r\n    function disableDToken(address _dToken) external auth {\r\n        address _token = IDToken(_dToken).token();\r\n        require(supportDToken[_token] == _dToken, \"disableDToken: Does not support!\");\r\n\r\n        (uint _tokenBalance, bool flag) = getRedeemAmount(_dToken);\r\n\r\n        if (_tokenBalance > 0)\r\n            IDToken(_dToken).redeem(address(this), _tokenBalance);\r\n\r\n        if (!flag)\r\n            remainingDToken[_token] = _dToken;\r\n\r\n        supportDToken[_token] = address(0);\r\n        emit DisableDToken(_dToken, _token, IERC20(_dToken).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Supports a given dToken.\r\n     * @param _dToken dToken to support.\r\n     */\r\n    function enableDToken(address _dToken) external auth {\r\n        address _token = IDToken(_dToken).token();\r\n        supportDToken[_token] = _dToken;\r\n        remainingDToken[_token] = address(0);\r\n\r\n        if (IERC20(_token).allowance(address(this), _dToken) != uint(-1))\r\n            require(doApprove(_token, _dToken, uint(-1)), \"enableDToken: Approve failed!\");\r\n\r\n        uint _balance = IERC20(_token).balanceOf(address(this));\r\n        if (_balance > 0)\r\n            IDToken(_dToken).mint(address(this), _balance);\r\n\r\n        emit EnableDToken(_dToken, _token, IERC20(_dToken).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Transfer `_amount` asset`_token` to the contract.\r\n     * @param _token Asset will be transfered into the contract.\r\n     * @param _amount Amount will be transfered into the contract.\r\n     */\r\n    function transferIn(address _token, uint _amount) external auth {\r\n        require(doTransferFrom(_token, msg.sender, address(this), _amount), \"transferIn: TransferFrom failed!\");\r\n        uint _balance = IERC20(_token).balanceOf(address(this));\r\n\r\n        address _dToken = supportDToken[_token];\r\n        if (_dToken != address(0) && _balance > 0)\r\n            IDToken(_dToken).mint(address(this), _balance);\r\n        emit TransferIn(_token, _amount, _balance);\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Transfer out `_amount` asset`_token` from the contract.\r\n     * @param _token Asset will be transfered out from the contract.\r\n     * @param _receiver Account who will receive asset.\r\n     * @param _amount Specificed amount will be transfered out from the contract.\r\n     */\r\n    function transferOut(address _token, address _receiver, uint _amount) external auth {\r\n        address _dToken = supportDToken[_token] == address(0) ? remainingDToken[_token] : supportDToken[_token];\r\n        if (_dToken != address(0)) {\r\n\r\n            (uint _tokenBalance, bool flag) = getRedeemAmount(_dToken);\r\n            IDToken(_dToken).redeem(address(this), remainingDToken[_token] == _dToken ? _tokenBalance : _amount);\r\n            if (flag)\r\n                remainingDToken[_token] = address(0);\r\n        }\r\n\r\n        uint _balance = IERC20(_token).balanceOf(address(this));\r\n        if (_balance >= _amount)\r\n            require(doTransferOut(_token, _receiver, _amount), \"transferOut: Transfer out failed!\");\r\n\r\n        emit TransferOut(_token, _receiver, _amount, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Only authorized users can call this function.\r\n     * @dev Transfer out all asset`_token` from the contract.\r\n     * @param _token Asset will be transfered out from the contract.\r\n     * @param _receiver Account who will receive asset.\r\n     */\r\n    function transferOutALL(address _token, address _receiver) external auth {\r\n        address _dToken = supportDToken[_token] == address(0) ? remainingDToken[_token] : supportDToken[_token];\r\n        if (_dToken != address(0)) {\r\n\r\n            (uint _tokenBalance, bool flag) = getRedeemAmount(_dToken);\r\n            require(flag, \"transferOutALL: Lack of liquidity!\");\r\n            if (_tokenBalance > 0)\r\n                IDToken(_dToken).redeem(address(this), _tokenBalance);\r\n            remainingDToken[_token] = address(0);\r\n        }\r\n        uint _balance = IERC20(_token).balanceOf(address(this));\r\n        if (_balance > 0)\r\n            require(doTransferOut(_token, _receiver, _balance), \"transferOutALL: Transfer out all failed!\");\r\n\r\n        emit TransferOut(_token, _receiver, _balance, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    // **************************\r\n    // *** Internal functions ***\r\n    // **************************\r\n\r\n    /**\r\n     * @dev Calculates valid amount can redeem from dToken.\r\n     * @param _dToken dToken which will be redeemed.\r\n     */\r\n    function getRedeemAmount(address _dToken) internal view returns (uint, bool) {\r\n        uint _tokenBalance = IDToken(_dToken).getTokenRealBalance(address(this));\r\n        uint _balance = IDToken(_dToken).getLiquidity();\r\n        if (_balance < _tokenBalance)\r\n            return (_balance, false);\r\n\r\n        return (_tokenBalance, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the exchange rate between two assets.\r\n     * @param _input One asset in the trade pair.\r\n     * @param _inputAmount Amount of input asset`input`.\r\n     * @param _output The other asset in the trade pair.\r\n     * @param _outputAmount Amount of output asset`_output`.\r\n     */\r\n    function getExchangeRate(address _input, uint _inputAmount, address _output, uint _outputAmount) internal view returns (uint) {\r\n        uint _decimals = IERC20(_input).decimals();\r\n        _inputAmount = _decimals < 18 ? _inputAmount.mul(10 ** (18 - _decimals)) : _inputAmount / (10 ** (_decimals - 18));\r\n        _decimals = IERC20(_output).decimals();\r\n        _outputAmount = _decimals < 18 ? _outputAmount.mul(10 ** (18 - _decimals)) : _outputAmount / (10 ** (_decimals - 18));\r\n        return _inputAmount.mul(OFFSET).div(_outputAmount);\r\n    }\r\n\r\n    // ************************\r\n    // *** Public functions ***\r\n    // ************************\r\n\r\n    /**\r\n     * @dev Swaps `_inputAmount`asset to get another asset`_output`.\r\n     * @param _input Asset that user wants to consume.\r\n     * @param _output Asset that user wants to get.\r\n     * @param _inputAmount Amount of asset consumed.\r\n     */\r\n    function swap(address _input, address _output, uint _inputAmount) external {\r\n        swap(_input, _output, _inputAmount, msg.sender);\r\n    }\r\n\r\n    function swap(address _input, address _output, uint _inputAmount, address _receiver) public nonReentrant {\r\n        require(isOpen && !paused, \"swap: Contract paused!\");\r\n\r\n        uint _amountToUser = getAmountByInput(_input, _output, _inputAmount);\r\n        require(_amountToUser > 0, \"swap: Invalid amount!\");\r\n\r\n        // uint _exchangeRate = getExchangeRate(_input, _inputAmount, _output, _amountToUser);\r\n        // require(_exchangeRate < maxSwing && _exchangeRate > 10 ** 36 / maxSwing, \"swap: Abnormal exchange rate!\");\r\n\r\n        require(doTransferFrom(_input, msg.sender, address(this), _inputAmount), \"swap: TransferFrom failed!\");\r\n        if (supportDToken[_input] != address(0))\r\n            IDToken(supportDToken[_input]).mint(address(this), _inputAmount);\r\n\r\n        if (supportDToken[_output] != address(0))\r\n            IDToken(supportDToken[_output]).redeem(address(this), _amountToUser);\r\n        else if (remainingDToken[_output] != address(0)) {\r\n\r\n            (uint _tokenBalance, bool flag) = getRedeemAmount(remainingDToken[_output]);\r\n            if (_tokenBalance > 0)\r\n                IDToken(remainingDToken[_output]).redeem(address(this), _tokenBalance);\r\n\r\n            if (flag)\r\n                remainingDToken[_output] = address(0);\r\n        }\r\n\r\n        require(doTransferOut(_output, _receiver, _amountToUser), \"swap: Transfer out failed!\");\r\n        emit Swap(\r\n            msg.sender,\r\n            _receiver,\r\n            _input,\r\n            _inputAmount,\r\n            IPriceOracle(oracle).assetPrices(_input),\r\n            _output,\r\n            _amountToUser,\r\n            IPriceOracle(oracle).assetPrices(_output)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Swaps  `_outputAmount`asset to get another asset`_input`.\r\n     * @param _input Asset that user wants to get.\r\n     * @param _output Asset that user wants to consume.\r\n     * @param _outputAmount Amount of asset consumed.\r\n     */\r\n    function swapTo(address _input, address _output, uint _outputAmount) external {\r\n        swapTo(_input, _output, _outputAmount, msg.sender);\r\n    }\r\n\r\n    function swapTo(address _input, address _output, uint _outputAmount, address _receiver) public nonReentrant {\r\n        require(isOpen && !paused, \"swapTo: Contract paused!\");\r\n\r\n        uint _inputAmount = getAmountByOutput(_input, _output, _outputAmount);\r\n        require(_inputAmount > 0, \"swapTo: Invalid amount!\");\r\n\r\n        // uint _exchangeRate = getExchangeRate(_input, _inputAmount, _output, _outputAmount);\r\n        // require(_exchangeRate < maxSwing && _exchangeRate > 10 ** 36 / maxSwing, \"swapTo: Abnormal exchange rate!\");\r\n\r\n        require(doTransferFrom(_input, msg.sender, address(this), _inputAmount), \"swapTo: TransferFrom failed!\");\r\n        if (supportDToken[_input] != address(0))\r\n            IDToken(supportDToken[_input]).mint(address(this), _inputAmount);\r\n\r\n        if (supportDToken[_output] != address(0))\r\n            IDToken(supportDToken[_output]).redeem(address(this), _outputAmount);\r\n        else if (remainingDToken[_output] != address(0)) {\r\n\r\n            (uint _tokenBalance, bool flag) = getRedeemAmount(remainingDToken[_output]);\r\n            if (_tokenBalance > 0)\r\n                IDToken(remainingDToken[_output]).redeem(address(this), _tokenBalance);\r\n\r\n            if (flag)\r\n                remainingDToken[_output] = address(0);\r\n        }\r\n\r\n        require(doTransferOut(_output, _receiver, _outputAmount), \"swapTo: Transfer out failed!\");\r\n        emit Swap(\r\n            msg.sender,\r\n            _receiver,\r\n            _input,\r\n            _inputAmount,\r\n            IPriceOracle(oracle).assetPrices(_input),\r\n            _output,\r\n            _outputAmount,\r\n            IPriceOracle(oracle).assetPrices(_output)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of `output` based on the amount`_inputAmount` of `input`.\r\n     * @param _input Asset that user wants to consume.\r\n     * @param _output Asset that user wants to get.\r\n     * @param _inputAmount Amount of asset consumed.\r\n     */\r\n    function getAmountByInput(address _input, address _output, uint _inputAmount) public view returns (uint) {\r\n\r\n        if (!tokensEnable[_input] || !tokensEnable[_output] || tradesDisable[_input][_output])\r\n            return 0;\r\n\r\n        IPriceOracle _oracle = IPriceOracle(oracle);\r\n        if (_oracle.assetPrices(_output) == 0)\r\n            return 0;\r\n\r\n        return _inputAmount\r\n            .mul(_oracle.assetPrices(_input))\r\n            .div(_oracle.assetPrices(_output))\r\n            .mul(OFFSET.sub(fee[_input][_output])) / OFFSET;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of `_input` based on the amount`_outputAmount` of `_output`.\r\n     * @param _input Asset that user wants to get.\r\n     * @param _output Asset that user wants to consume.\r\n     * @param _outputAmount Amount of asset consumed.\r\n     */\r\n    function getAmountByOutput(address _input, address _output, uint _outputAmount) public view returns (uint) {\r\n\r\n        if (!tokensEnable[_input] || !tokensEnable[_output] || tradesDisable[_input][_output] || _outputAmount == 0)\r\n            return 0;\r\n\r\n        IPriceOracle _oracle = IPriceOracle(oracle);\r\n        if (_oracle.assetPrices(_input) == 0 || _oracle.assetPrices(_output) == 0)\r\n            return 0;\r\n\r\n        return _outputAmount\r\n            .mul(_oracle.assetPrices(_output))\r\n            .div(_oracle.assetPrices(_input))\r\n            .mul(OFFSET)\r\n            .div(OFFSET.sub(fee[_input][_output]))\r\n            .add(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the valid amount of `_token` to redeem.\r\n     * @param _token Asset which will be redeemed.\r\n     */\r\n    function getLiquidity(address _token) public view returns (uint) {\r\n\r\n        address _dToken = supportDToken[_token] == address(0) ? remainingDToken[_token] : supportDToken[_token];\r\n        uint _tokenBalance;\r\n        if (_dToken != address(0))\r\n            (_tokenBalance, ) = getRedeemAmount(_dToken);\r\n\r\n        if (supportDToken[_token] != address(0))\r\n            return _tokenBalance;\r\n\r\n        return _tokenBalance.add(IERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the exchange rate between the two assets.\r\n     * @param _input Asset that will be consumed.\r\n     * @param _output Asset that will be got.\r\n     */\r\n    function exchangeRate(address _input, address _output) external view returns (uint) {\r\n        uint _amount = getAmountByInput(_input, _output, 10 ** IERC20(_input).decimals());\r\n        if (_amount == 0)\r\n            return 0;\r\n\r\n        uint _decimals = IERC20(_output).decimals();\r\n        if (_decimals < 18)\r\n            return _amount.mul(10 ** (18 - _decimals));\r\n\r\n        return _amount / (10 ** (_decimals - 18));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the best amount of `output` based on the amount`_inputAmount` of `input`.\r\n     * @param _input Asset that user wants to swap.\r\n     * @param _output Asset that user wants to get.\r\n     * @param _inputAmount Amount of asset to swap.\r\n     */\r\n\tfunction getBestOutputByInput(address _input, address _output, uint _inputAmount) external view returns (uint) {\r\n        if (!isOpen || paused)\r\n            return 0;\r\n\t\tuint _outputAmount = getAmountByInput(_input, _output, _inputAmount);\r\n\t\tuint _liquidity = getLiquidity(_output);\r\n\t\treturn _outputAmount > _liquidity ? 0 : _outputAmount;\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DTokenBalance\",\"type\":\"uint256\"}],\"name\":\"DisableDToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DisableToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"}],\"name\":\"DisableTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"EmergencyStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DTokenBalance\",\"type\":\"uint256\"}],\"name\":\"EnableDToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EnableToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"}],\"name\":\"EnableTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSwing\",\"type\":\"uint256\"}],\"name\":\"SetMaxSwing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputPrice\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TransferOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"active\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dToken\",\"type\":\"address\"}],\"name\":\"disableDToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"disableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"}],\"name\":\"disableTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_changeStateTo\",\"type\":\"bool\"}],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dToken\",\"type\":\"address\"}],\"name\":\"enableDToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"enableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"}],\"name\":\"enableTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"getAmountByInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"name\":\"getAmountByOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"getBestOutputByInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSwing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remainingDToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_input\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_output\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fee\",\"type\":\"uint256[]\"}],\"name\":\"setFeeBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSwing\",\"type\":\"uint256\"}],\"name\":\"setMaxSwing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportDToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swapTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"name\":\"swapTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradesDisable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"transferOutALL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XSwap","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bd6b39c38fc9e67cb430bd11a22cbe98f54bf63f01013bc1dcec3257c807a204"}]}