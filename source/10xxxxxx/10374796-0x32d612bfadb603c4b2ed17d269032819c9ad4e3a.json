{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n\r\n\r\n\r\n$$\\       $$$$$$$$\\ $$\\      $$\\  $$$$$$\\  $$\\   $$\\        $$$$$$\\   $$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n$$ |      $$  _____|$$$\\    $$$ |$$  __$$\\ $$ |  $$ |      $$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n$$ |      $$ |      $$$$\\  $$$$ |$$ /  $$ |\\$$\\ $$  |      $$ /  \\__|$$ /  $$ |$$ /  \\__|$$ |  $$ |\r\n$$ |      $$$$$\\    $$\\$$\\$$ $$ |$$ |  $$ | \\$$$$  /       $$ |      $$$$$$$$ |\\$$$$$$\\  $$$$$$$$ |\r\n$$ |      $$  __|   $$ \\$$$  $$ |$$ |  $$ | $$  $$<        $$ |      $$  __$$ | \\____$$\\ $$  __$$ |\r\n$$ |      $$ |      $$ |\\$  /$$ |$$ |  $$ |$$  /\\$$\\       $$ |  $$\\ $$ |  $$ |$$\\   $$ |$$ |  $$ |\r\n$$$$$$$$\\ $$$$$$$$\\ $$ | \\_/ $$ | $$$$$$  |$$ /  $$ |      \\$$$$$$  |$$ |  $$ |\\$$$$$$  |$$ |  $$ |\r\n\\________|\\________|\\__|     \\__| \\______/ \\__|  \\__|       \\______/ \\__|  \\__| \\______/ \\__|  \\__|\r\n                                                                                                   \r\n                                                                                                   \r\n  \r\n  Worlds Biggest Crowd Funding Smart Contract..(FOR THE PEOPLE : BY THE PEOPLE).The way to your Future\r\n  \r\n                                                                                                   \r\n*/\r\npragma solidity 0.5.16; \r\n\r\n\r\ncontract owned\r\n{\r\n    address payable internal owner;\r\n    address payable internal newOwner;\r\n    address payable internal signer;\r\n    address payable internal bufferOwner;\r\n    bool public allowWithdrawInEther;\r\n\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        signer = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlySigner {\r\n        require(msg.sender == signer, 'caller must be signer');\r\n        _;\r\n    }\r\n\r\n\r\n    function changeSigner(address payable _signer) public onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function transferOwnership(address payable  _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //the reason for this flow is to protect owners from sending ownership to unintended address due to human error\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ninterface mscInterface\r\n{\r\n    function doPay(uint256 _networkId,uint256 _poolIndex, uint256 _amount,address payable _userId) external returns(bool);\r\n    //  baseUserId, user, parentId, referrerId, childCount, lastBoughtLevel, referralCount, levelExpiry\r\n    function userInfos(uint256 _networkId,uint256 _planIndex,bool mainTree, uint256 _userId) external view returns(uint256,address payable,uint256,uint256,uint256,uint256,uint256,uint256);\r\n    function regUserViaContract(uint256 _networkId,uint256 _referrerId,uint256 _parentId, uint256 amount) external returns(bool);\r\n    function buyLevelViaContract(uint256 _networkId,uint256 _planIndex, uint256 _userId, uint256 amount) external returns(bool);\r\n    function addToPool(uint256 _networkId,uint256 _poolIndex, uint256 _amount) external returns(bool);\r\n    //function userIndex(uint256 _networkId, uint256 _planIndex,bool mainTree, address payable _user) external view returns(uint256[] memory);\r\n    function subUserId(uint256 _networkId, uint256 _planIndex, bool mainTree, uint256  _baseUserId ) external view returns(uint256);\r\n}\r\n\r\ninterface LMXInterface\r\n{\r\n    function addBalanceOf(address user,uint amount) external returns(bool);\r\n    function subBalanceOf(address user, uint amount) external returns(bool);\r\n    function approveSpecial(address from, address _spender, uint256 _value) external returns (bool);\r\n    function mintToken(address target, uint256 mintedAmount) external returns(bool); \r\n    function rewardExtraToken(address target, uint256 mintedAmount) external returns(bool); \r\n    function balanceOf(address user) external view returns(uint);\r\n    function rewardOf(address user) external view returns(uint);\r\n    function burnSpecial(address user, uint256 _value) external returns (bool);\r\n\r\n}\r\n\r\ncontract lemoxCash is owned\r\n{\r\n\r\n   // Lemox plan functions\r\n    uint256 public oneEthToDollar = 0.005 ether;  //  price of one token\r\n\r\n    address payable public mscContractAddress;\r\n    uint256 public networkId;\r\n    address payable public tokenContractAddress;\r\n    address payable public usdtContractAddress;\r\n\r\n    // all first mappings are userId\r\n    mapping(uint256 => uint256[6]) public boosterGain;\r\n    mapping(uint256 => uint256[8]) public teamActivationGain;\r\n    mapping(uint256 => uint256[8]) public teamBonusGain;\r\n    mapping(uint256 => uint256[10]) public megaPoolGain;\r\n    mapping(uint256 => bool[10]) public megaPoolReadyToWithdraw;\r\n\r\n    mapping(uint256 => uint256[6]) public paidBoosterGain;\r\n    mapping(uint256 => uint256[8]) public paidTeamActivationGain;\r\n    mapping(uint256 => uint256[8]) public paidTeamBonusGain;\r\n    mapping(uint256 => uint256[10]) public paidMegaPoolGain;\r\n\r\n\r\n    mapping(uint256 => uint256[3]) public teamTurnOver;\r\n    // 2nd is level \r\n    mapping(uint256 => mapping(uint256 => uint256[6])) public autoPoolGain;\r\n    mapping(uint256 => mapping(uint256 => uint256[6])) public paidAutoPoolGain;\r\n\r\n    uint256[10] public megaPoolPrice;\r\n    uint256[6] public levelBuyPrice;\r\n    uint256[8] public bonusPrice;\r\n\r\n    mapping(uint256 => uint256) public reInvestGain;\r\n    mapping(uint256 => uint256) public expiryTime;\r\n    uint256 reInvestPeriod;\r\n    //mapping(uint256 => uint256[11]) memory payOutArray;\r\n\r\n    struct autoPay\r\n    {\r\n        uint[11] payOutArray;\r\n    }    \r\n    \r\n    constructor(address payable _owner, address payable _bufferOwner) public{ \r\n        owner = _owner;\r\n        bufferOwner = _bufferOwner;\r\n\r\n        levelBuyPrice = [35000000000000000000,40000000000000000000,100000000000000000000,500000000000000000000,1000000000000000000000,5000000000000000000000];\r\n        megaPoolPrice = [5000000000000000000,10000000000000000000,10000000000000000000,80000000000000000000,220000000000000000000,600000000000000000000,1000000000000000000000,2000000000000000000000,8000000000000000000000,16000000000000000000000];\r\n        bonusPrice = [50000000000000000000,250000000000000000000,625000000000000000000,1875000000000000000000,2500000000000000000000,12500000000000000000000,25000000000000000000000,125000000000000000000000];\r\n        reInvestPeriod = 172800;\r\n    \r\n    }\r\n\r\n   \r\n    function() external payable\r\n    {\r\n\r\n    }\r\n\r\n    function setAllowWithdrawInEther(bool _value) public onlyOwner returns (bool)\r\n    {\r\n        allowWithdrawInEther = _value;\r\n        return true;\r\n    }\r\n\r\n\r\n    event processExternalMainEv(uint256 _networkId,uint256 _planIndex,uint256 _baseUserId,  uint256 _subTreeId, uint256 _referrerId, uint256 _paidAmount, bool mainTree);\r\n    function processExternalMain(uint256 _networkId,uint256 _planIndex,uint256 _baseUserId,  uint256 _subTreeId, uint256 _referrerId, uint256 _paidAmount, bool mainTree) external returns(bool)\r\n    {\r\n        if(_paidAmount > 0)\r\n        {        \r\n            require(_networkId == networkId, \"Invalid call by MSC\");\r\n            autoPay[5] memory payOutArr;\r\n            payOutArr[0].payOutArray = [uint256(10000000),uint256(6666666),uint256(5000000),uint256(5000000),uint256(5000000),uint256(5000000),uint256(5000000),uint256(23750000),uint256(26408),uint256(26408),uint256(125437)];\r\n            payOutArr[1].payOutArray = [uint256(10000000),uint256(6666666),uint256(6000000),uint256(6000000),uint256(5000000),uint256(5000000),uint256(5000000),uint256(20000000),uint256(30864),uint256(30864),uint256(123457)];\r\n            payOutArr[2].payOutArray = [uint256(10000000),uint256(6666666),uint256(5000000),uint256(6000000),uint256(7000000),uint256(8000000),uint256(9000000),uint256(13000000),uint256(64977),uint256(73099),uint256(105588)];\r\n            payOutArr[3].payOutArray = [uint256(10000000),uint256(6666666),uint256(5000000),uint256(6000000),uint256(7000000),uint256(8000000),uint256(9000000),uint256(10000000),uint256(79012),uint256(88889),uint256(98765)];\r\n            payOutArr[4].payOutArray = [uint256(10000000),uint256(6666666),uint256(2000000),uint256(2400000),uint256(2800000),uint256(3200000),uint256(3600000),uint256(9000000),uint256(41585),uint256(46784),uint256(116959)];\r\n            if(_planIndex == 0)\r\n            {\r\n                require(payIndex0(_baseUserId, _referrerId,_paidAmount),\"fund allot fail\");\r\n            }\r\n            else if(_planIndex >= 1)\r\n            {\r\n                require(payIndex1(_baseUserId,_planIndex, _referrerId,_paidAmount,payOutArr[_planIndex -1].payOutArray),\"fund allot fail\");\r\n            }\r\n        }\r\n        emit processExternalMainEv(_networkId,_planIndex,_baseUserId,_subTreeId, _referrerId, _paidAmount, mainTree);\r\n        return true;\r\n    }\r\n\r\n    // 0 = main referral\r\n    // 1 = 10 % referral\r\n    // 2 = 40% parent by level\r\n    // 3 = team activation\r\n    // 4 = team bonus\r\n    // 5 = auto pool\r\n    // 6 = mega pool\r\n    // 7 = reinvest Gain    \r\n    \r\n    event payOutDetailEv(uint payoutType, uint amount,uint paidTo, uint paidAgainst);\r\n\r\n    function payIndex0(uint256 _baseUserId, uint256 _referrerId,uint256 _paidAmount) internal returns(bool)\r\n    {\r\n        uint256[9] memory tmpDist;\r\n        uint tmp2;\r\n        uint256 _networkId = networkId;\r\n        // pay referral\r\n        uint Pamount = _paidAmount * 42857143 / 100000000;\r\n        boosterGain[_referrerId][0] +=  Pamount;\r\n        emit payOutDetailEv(0, Pamount, _referrerId, _baseUserId);\r\n\r\n        // pay team activation\r\n        uint256 pId = _baseUserId;\r\n        uint tmp = 3571428;\r\n        uint256 i;\r\n\r\n        for(i=0;i<8;i++)\r\n        {\r\n            // here pId is referrer id\r\n            ( ,,,pId,,,,) = mscInterface(mscContractAddress).userInfos(_networkId,0,true, pId);\r\n            Pamount =  _paidAmount * tmp / 100000000;\r\n            teamActivationGain[pId][i] += Pamount;\r\n            emit payOutDetailEv(3, Pamount, pId, _baseUserId); \r\n            if((i+1) % 2 == 0) tmp = tmp - 714285;\r\n        }\r\n\r\n        //Team bonous will be triggered by external call from server to add user part \r\n        tmpDist = [uint256(714285),uint256(1428571),uint256(2857142),uint256(2142857),uint256(2142857),uint256(4428571),uint256(54627),uint256(54627),uint256(112896)];\r\n        // pay auto pool - basic\r\n        pId = mscInterface(mscContractAddress).subUserId(_networkId, 0, false, _baseUserId );\r\n\r\n        for(i=0;i<6;i++)\r\n        {\r\n   \r\n            ( ,,pId,,,,,) = mscInterface(mscContractAddress).userInfos(_networkId,0,false, pId);\r\n            if(i<3)\r\n            {\r\n                Pamount =  _paidAmount * tmpDist[i]/ 100000000;\r\n                autoPoolGain[pId][0][i] += Pamount;\r\n                emit payOutDetailEv(5, Pamount, pId, _baseUserId); \r\n            }\r\n            else\r\n            {\r\n                ( ,,pId,,,,,) = mscInterface(mscContractAddress).userInfos(_networkId,0,false, pId);\r\n                tmp = _paidAmount * tmpDist[i] / 100000000;\r\n                tmp2 = 2 * _paidAmount * tmpDist[i+3] / 100000000;\r\n                autoPoolGain[pId][0][i] += tmp - tmp2;\r\n                emit payOutDetailEv(5, tmp - tmp2, pId, _baseUserId); \r\n                reInvestGain[pId] += tmp2;\r\n                emit payOutDetailEv(7, tmp2, pId, _baseUserId); \r\n            }\r\n        }\r\n        if(reInvestGain[pId] >= _paidAmount) expiryTime[_baseUserId] = now + reInvestPeriod;\r\n        require(payMegaPool(_baseUserId,0),\"mega pool pay fail\");\r\n        return true;\r\n    }\r\n\r\n\r\n    function payIndex1(uint256 _baseUserId,uint256 _planIndex, uint256 _referrerId,uint256 _paidAmount, uint[11] memory prcnt) internal returns(bool)\r\n    {\r\n        require(msg.sender == mscContractAddress, \"invalid caller\");\r\n        uint256 _networkId = networkId;\r\n        // pay referral 10%\r\n        uint Pamount = _paidAmount  * prcnt[0] / 100000000;\r\n        boosterGain[_referrerId][_planIndex] += Pamount;\r\n        emit payOutDetailEv((10* _planIndex) + 1, Pamount, _referrerId, _baseUserId); \r\n\r\n        // pay equal from 40% to  6 parent  \r\n        uint256 pId = _baseUserId;\r\n        uint256 tmp;\r\n        uint256 i;\r\n        for(i=0;i<6;i++)\r\n        {\r\n            ( ,,pId,,,,,) = mscInterface(mscContractAddress).userInfos(_networkId,0,true, pId);\r\n            Pamount = _paidAmount * prcnt[1] / 100000000;\r\n            boosterGain[pId][i] += Pamount;\r\n            emit payOutDetailEv((10* _planIndex) + 2, Pamount, pId, _baseUserId);  \r\n        }\r\n\r\n        // pay 5 auto-pool different amount \r\n        pId = mscInterface(mscContractAddress).subUserId(_networkId, _planIndex, false, _baseUserId );\r\n        tmp = 0;\r\n        uint tmp2;\r\n        for(i=0;i<5;i++)\r\n        {\r\n            ( ,,pId,,,,,) = mscInterface(mscContractAddress).userInfos(_networkId,_planIndex,false, pId);\r\n            tmp = _paidAmount * prcnt[i+2] / 100000000;\r\n            tmp2 = 0;\r\n            if(i > 2) tmp2 = (2**(_planIndex +1)) * levelBuyPrice[0] * prcnt[i+5] / 100000000;  // deduct in multiple of 35 \r\n            autoPoolGain[pId][_planIndex][i] += (tmp - tmp2);\r\n            emit payOutDetailEv((10* _planIndex + 5), tmp - tmp2, pId, _baseUserId); \r\n            reInvestGain[pId] += tmp2;\r\n            if(tmp2>0) emit payOutDetailEv((10* _planIndex) +  7, tmp2, pId, _baseUserId); \r\n        }\r\n        if(reInvestGain[pId] >= levelBuyPrice[0]) expiryTime[_baseUserId] = now + reInvestPeriod;\r\n        return true;\r\n    }\r\n\r\n\r\n    function payMegaPool(uint256 _baseUserId, uint256 _levelIndex) internal returns(bool)\r\n    {\r\n        uint256 _networkId = networkId;\r\n        uint pId;\r\n        uint Pamount;\r\n        if(_levelIndex == 0) \r\n        {\r\n            pId =  mscInterface(mscContractAddress).subUserId(_networkId, 6, false, _baseUserId );\r\n            ( ,,pId,,,,,) = mscInterface(mscContractAddress).userInfos(_networkId,6,false, pId);\r\n            Pamount = megaPoolPrice[_levelIndex];\r\n            megaPoolGain[pId][_levelIndex] += Pamount ;\r\n            emit payOutDetailEv((10* _levelIndex) + 6, Pamount, pId, _baseUserId); \r\n        }\r\n        uint256 x=_levelIndex + 1;\r\n\r\n        if(megaPoolGain[pId][_levelIndex] == megaPoolPrice[_levelIndex] * (uint(2) ** x )  && megaPoolReadyToWithdraw[pId][_levelIndex] == false && _levelIndex < 9) \r\n        {\r\n            Pamount = megaPoolPrice[_levelIndex+1];\r\n            megaPoolGain[pId][_levelIndex] =  megaPoolGain[pId][_levelIndex] - Pamount;\r\n            megaPoolReadyToWithdraw[pId][_levelIndex] = true;                   \r\n            for(uint256 k=0;k<=_levelIndex+1;k++)\r\n            {\r\n                ( ,,pId,,,,,) = mscInterface(mscContractAddress).userInfos(_networkId,6,false, pId);\r\n            }  \r\n            \r\n            megaPoolGain[pId][_levelIndex] += Pamount;\r\n            emit payOutDetailEv(( 10 * _levelIndex) + 6, Pamount, pId, _baseUserId); \r\n            if(_levelIndex < 9 ) payMegaPool(pId, _levelIndex + 1 );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function updateTeamCount(uint256 _userId, uint256 _turnOverCountLeg1, uint256 _turnOverCountLeg2, uint256 _turnOverCountLeg3) public onlySigner returns(bool)\r\n    {\r\n        uint256 totalCount;\r\n        teamTurnOver[_userId][0] = _turnOverCountLeg1;\r\n        teamTurnOver[_userId][1] = _turnOverCountLeg2;\r\n        teamTurnOver[_userId][2] = _turnOverCountLeg3;\r\n        if(_turnOverCountLeg1 > _turnOverCountLeg2 && _turnOverCountLeg1 > _turnOverCountLeg3)\r\n        {\r\n            totalCount = _turnOverCountLeg1 / 2;\r\n            totalCount += ( _turnOverCountLeg2 + _turnOverCountLeg3);\r\n        }\r\n        else if(_turnOverCountLeg2 > _turnOverCountLeg1 && _turnOverCountLeg2 > _turnOverCountLeg3)\r\n        {\r\n            totalCount = _turnOverCountLeg2 / 2;\r\n            totalCount += ( _turnOverCountLeg1 + _turnOverCountLeg3);\r\n        }\r\n        else\r\n        {\r\n            totalCount = _turnOverCountLeg3 / 2;\r\n            totalCount += ( _turnOverCountLeg1 + _turnOverCountLeg2);\r\n        }\r\n\r\n        if(totalCount >=3000 && totalCount < 15000 && teamBonusGain[_userId][0] == 0) \r\n        {\r\n            teamBonusGain[_userId][0] = bonusPrice[0];\r\n        }\r\n\r\n        if(totalCount >=15000 && totalCount < 30000 && teamBonusGain[_userId][1] == 0) \r\n        {\r\n            teamBonusGain[_userId][1] = bonusPrice[1];\r\n        }\r\n\r\n        if(totalCount >=30000 && totalCount < 150000 && teamBonusGain[_userId][2] == 0) \r\n        {\r\n            teamBonusGain[_userId][2] = bonusPrice[2];\r\n        }\r\n\r\n        if(totalCount >=150000 && totalCount < 300000 && teamBonusGain[_userId][3] == 0) \r\n        {\r\n            teamBonusGain[_userId][3] = bonusPrice[3];\r\n        }\r\n\r\n        if(totalCount >=300000 && totalCount < 1500000 && teamBonusGain[_userId][4] == 0) \r\n        {\r\n            teamBonusGain[_userId][4] = bonusPrice[4];\r\n        }\r\n        if(totalCount >=1500000 && totalCount < 3000000 && teamBonusGain[_userId][5] == 0) \r\n        {\r\n            teamBonusGain[_userId][5] = bonusPrice[5];\r\n        }\r\n        if(totalCount >=3000000 && totalCount < 15000000 && teamBonusGain[_userId][6] == 0) \r\n        {\r\n            teamBonusGain[_userId][6] = bonusPrice[6];\r\n        }\r\n        if(totalCount >=15000000 && teamBonusGain[_userId][7] == 0) \r\n        {\r\n            teamBonusGain[_userId][7] = bonusPrice[7];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdraw(uint256 _userId) public returns (bool)\r\n    {\r\n        for(uint256 j=0; j<6;j++)\r\n        {            \r\n            withdrawBoosterAndAutoPoolGain(_userId,j);\r\n        }\r\n        withdrawTeamActivationGain(_userId);\r\n        withdrawTeamBonusGain(_userId);\r\n        withdrawMegaPoolGain(_userId); \r\n        return true;         \r\n    }\r\n\r\n\r\n    function withdrawBoosterAndAutoPoolGain(uint256 _userId, uint256 level) public returns(bool)\r\n    {\r\n        //booster\r\n        uint256 refCount;\r\n        uint256 lastLevel;        \r\n        uint256 totalAmount;\r\n        level++;\r\n        // for level 0\r\n        ( ,,,,,lastLevel,refCount,) = mscInterface(mscContractAddress).userInfos(networkId,0,true, _userId);\r\n        if((lastLevel > level && refCount >= level * 3) || _userId == 0 ) \r\n        {\r\n            level--;\r\n            totalAmount = boosterGain[_userId][level] - paidBoosterGain[_userId][level];\r\n            paidBoosterGain[_userId][level] = boosterGain[_userId][level];\r\n            uint256 pId = mscInterface(mscContractAddress).subUserId(networkId, level, false, _userId );\r\n            for(uint256 i=0;i<6;i++)\r\n            {\r\n                totalAmount += (autoPoolGain[pId][level][i] - paidAutoPoolGain[pId][level][i]);\r\n                paidAutoPoolGain[pId][level][i] = autoPoolGain[pId][level][i];\r\n            }\r\n        }\r\n        else if(lastLevel <= level && refCount >= level * 3)\r\n        {\r\n            require(buyLevelbyTokenGain(level,_userId ), \"internal level buy fail\");\r\n            withdrawBoosterAndAutoPoolGain(_userId, level-1);\r\n        }\r\n        if(totalAmount>0 ) withdrawToken(totalAmount,_userId);\r\n        return true;\r\n    }\r\n\r\n    // use level 1 to 6 not 0 to 5\r\n    function withdrawTeamActivationGain(uint256 _userId) public returns(bool)\r\n    {\r\n        //booster\r\n        uint256 refCount;\r\n        uint256 lastLevel;        \r\n        uint256 totalAmount;\r\n        // for level 0\r\n        ( ,,,,,lastLevel,refCount,) = mscInterface(mscContractAddress).userInfos(networkId,0,true, _userId);\r\n        if(lastLevel >= 2 && refCount >= 3 ) \r\n        {\r\n            for(uint256 i=0;i<8;i++)\r\n            {\r\n                totalAmount += teamActivationGain[_userId][i] - paidTeamActivationGain[_userId][i];\r\n                paidTeamActivationGain[_userId][i] = teamActivationGain[_userId][i];\r\n            }\r\n        }\r\n        if(totalAmount>0 ) withdrawToken(totalAmount,_userId);\r\n        return true;\r\n    }\r\n\r\n    // use level 1 to 6 not 0 to 5\r\n    function withdrawTeamBonusGain(uint256 _userId) public returns(bool)\r\n    {\r\n        //booster\r\n        uint256 refCount;\r\n        uint256 lastLevel;        \r\n        uint256 totalAmount;\r\n        // for level 0\r\n        ( ,,,,,lastLevel,refCount,) = mscInterface(mscContractAddress).userInfos(networkId,0,true, _userId);\r\n        if(lastLevel >= 2 && refCount >= 3 ) \r\n        {\r\n            for(uint256 i=0;i<8;i++)\r\n            {\r\n                totalAmount += teamBonusGain[_userId][i] - paidTeamBonusGain[_userId][i];\r\n                paidTeamBonusGain[_userId][i] = teamBonusGain[_userId][i];\r\n            }\r\n        }\r\n        if(totalAmount>0 ) withdrawToken(totalAmount,_userId);\r\n        return true;\r\n    }\r\n\r\n\r\n    function withdrawMegaPoolGain(uint256 _userId) public returns(bool)\r\n    {\r\n        //booster\r\n        uint256 refCount;\r\n        uint256 lastLevel;        \r\n        uint256 totalAmount;\r\n        // for level 0\r\n        ( ,,,,,lastLevel,refCount,) = mscInterface(mscContractAddress).userInfos(networkId,0,false, _userId);\r\n        uint256 pId = mscInterface(mscContractAddress).subUserId(networkId, 6, false, _userId );\r\n        if(lastLevel >= 2 && refCount >= 3 ) \r\n        {\r\n            for(uint256 i=0;i<10;i++)\r\n            {\r\n                if(megaPoolReadyToWithdraw[pId][i]) \r\n                {\r\n                    totalAmount += megaPoolGain[pId][i] - paidMegaPoolGain[pId][i];\r\n                    paidMegaPoolGain[pId][i] = megaPoolGain[pId][i];\r\n                }\r\n            }        \r\n        }\r\n        if(totalAmount>0 ) withdrawToken(totalAmount,_userId);\r\n        return true;\r\n    }\r\n\r\n    event withdrawTokenEv(uint timeNow, address user,uint amount, uint adminPart, uint bufferpart);\r\n    function withdrawToken(uint amount, uint _userId) internal returns (bool)\r\n    {\r\n        uint256 _networkId = networkId;\r\n        uint adminPart = amount * 6000000 / 100000000;\r\n        uint bufferpart = amount * 4000000 / 100000000;\r\n        ( ,address payable user,,,,,,) = mscInterface(mscContractAddress).userInfos(_networkId,0,true, _userId);\r\n        require(LMXInterface(tokenContractAddress).subBalanceOf(mscContractAddress, amount - (adminPart + bufferpart)),\"balance update fail\");\r\n        require(LMXInterface(tokenContractAddress).addBalanceOf(user, amount),\"balance update fail\");\r\n        require(mscInterface(mscContractAddress).addToPool(_networkId,1,adminPart));\r\n        require(mscInterface(mscContractAddress).addToPool(_networkId,2,bufferpart));\r\n        emit withdrawTokenEv(now, user, amount,adminPart,bufferpart);\r\n        return true;\r\n    }\r\n\r\n    event getEtherFromTokenEv(uint timeNow,address user,uint tokenAmount,uint etherAmount );\r\n    function getEtherFromToken(uint amount) public returns (bool)\r\n    {\r\n        require(allowWithdrawInEther, \"now allowed\");\r\n        require(LMXInterface(tokenContractAddress).balanceOf(msg.sender) >= amount,\"not enough balance\");\r\n        uint etherAmount = (( amount * 1000000 ) / oneEthToDollar) / 1000000;\r\n        //require(LMXInterface(tokenContractAddress).subBalanceOf(msg.sender, amount),\"balance update fail\");\r\n        LMXInterface(tokenContractAddress).burnSpecial(msg.sender, amount);       \r\n        msg.sender.transfer(etherAmount);\r\n        emit getEtherFromTokenEv(now,msg.sender, amount, etherAmount );\r\n        return true;\r\n    }\r\n\r\n\r\n    function viewDashBoardData(uint256 _userId) public view returns(uint256 boostIncome,uint256 teamActivationIncome,uint256 teamBonus,uint256 megaIncome, uint256[6] memory autoPoolIncome)\r\n    {\r\n        uint256 i;\r\n\r\n        //booster\r\n        for(i=0;i<6;i++)\r\n        {\r\n            boostIncome += ( boosterGain[_userId][i] - paidBoosterGain[_userId][i]);\r\n        }\r\n        //team activation\r\n\r\n        for(i=0;i<8;i++)\r\n        {\r\n            teamActivationIncome += (teamActivationGain[_userId][i] - paidTeamActivationGain[_userId][i]);\r\n        }\r\n        //team bonous\r\n\r\n        for(i=0;i<8;i++)\r\n        {\r\n            teamBonus += (teamBonusGain[_userId][i] - paidTeamBonusGain[_userId][i]);\r\n        }\r\n\r\n        for(i=0;i<10;i++)\r\n        {\r\n            megaIncome += ( megaPoolGain[_userId][i] - paidMegaPoolGain[_userId][i]);\r\n        }     \r\n\r\n        // auto pool\r\n\r\n        uint256 j;\r\n        for(j=0;j<6;j++)\r\n        {       \r\n            for(i=0;i<6;i++)\r\n            {\r\n                autoPoolIncome[j] += autoPoolGain[_userId][j][i] - paidAutoPoolGain[_userId][j][i];\r\n            } \r\n        }\r\n    }\r\n\r\n    event payInEv(uint timeNow,address _user,uint256 amount);\r\n    function regUser(uint256 _referrerId,uint256 _parentId) public payable returns(bool)\r\n    {\r\n        uint amount = levelBuyPrice[0];\r\n        require(viewPlanPriceInEther(0) == msg.value, \"incorrect price sent\");\r\n        require(LMXInterface(tokenContractAddress).mintToken(msg.sender, amount),\"token mint fail\");\r\n        require(LMXInterface(tokenContractAddress).approveSpecial(msg.sender, mscContractAddress,amount),\"approve fail\"); \r\n        require(LMXInterface(tokenContractAddress).rewardExtraToken(msg.sender,amount),\"token reward fail\");\r\n        require(mscInterface(mscContractAddress).regUserViaContract(networkId,_referrerId,_parentId,amount),\"regUser fail\");\r\n        emit payInEv(now,msg.sender,msg.value);\r\n        return true;\r\n    }\r\n        \r\n    \r\n    function buyLevel(uint256 _planIndex, uint256 _userId) public payable returns(bool)\r\n    {\r\n        uint amount = levelBuyPrice[_planIndex];\r\n        require(viewPlanPriceInEther(_planIndex) == msg.value, \"incorrect price sent\");\r\n        require(LMXInterface(tokenContractAddress).mintToken(msg.sender, amount),\"token mint fail\");\r\n        require(LMXInterface(tokenContractAddress).approveSpecial(msg.sender, mscContractAddress,amount),\"approve fail\"); \r\n        require(LMXInterface(tokenContractAddress).rewardExtraToken(msg.sender,amount),\"token reward fail\");\r\n        require(mscInterface(mscContractAddress).buyLevelViaContract(networkId,_planIndex,_userId, amount),\"regUser fail\");\r\n        emit payInEv(now,msg.sender,msg.value);\r\n        return true;\r\n    }\r\n\r\n    event buyLevelbyTokenGainEv(uint256 timeNow, uint256 _networkId,uint256 _planIndex, uint256 _userId, uint amount );\r\n    function buyLevelbyTokenGain(uint256 _planIndex, uint256 _userId ) internal returns(bool)\r\n    {\r\n        uint amount = levelBuyPrice[_planIndex] ;\r\n        require( amount <= boosterGain[_userId][_planIndex-1] - paidBoosterGain[_userId][_planIndex-1],\"not enough amount\");\r\n        require(LMXInterface(tokenContractAddress).subBalanceOf(mscContractAddress, amount),\"balance update fail\");\r\n        require(LMXInterface(tokenContractAddress).addBalanceOf(msg.sender, amount),\"balance update fail\");\r\n        require(LMXInterface(tokenContractAddress).approveSpecial(msg.sender, mscContractAddress,amount),\"approve fail\");        \r\n        paidBoosterGain[_userId][_planIndex-1] += amount;\r\n        require(LMXInterface(tokenContractAddress).rewardExtraToken(msg.sender,amount),\"token reward fail\");\r\n        require(mscInterface(mscContractAddress).buyLevelViaContract(networkId,_planIndex,_userId, amount),\"regUser fail\");\r\n        emit buyLevelbyTokenGainEv(now,networkId,_planIndex,_userId,amount);\r\n        return true;\r\n    }\r\n\r\n    event reInvestEv(uint256 timeNow, uint256 _networkId,uint256 _referrerId, uint256 _parentId, uint amount );\r\n    function reInvest(uint256 _userId, uint256 _parentId) public returns(bool)\r\n    {\r\n        uint amount = levelBuyPrice[0];\r\n        uint _networkId = networkId;\r\n        require(reInvestGain[_userId] >= amount && now <= expiryTime[_userId], \"either less amount or time expired\" );\r\n        require(LMXInterface(tokenContractAddress).subBalanceOf(mscContractAddress, amount),\"balance update fail\");\r\n        require(LMXInterface(tokenContractAddress).addBalanceOf(msg.sender, amount),\"balance update fail\");\r\n        require(LMXInterface(tokenContractAddress).approveSpecial(msg.sender, mscContractAddress,amount),\"approve fail\");        \r\n        reInvestGain[_userId] -= amount; \r\n        ( ,,,uint pId,,,,) = mscInterface(mscContractAddress).userInfos(_networkId,0,true, _userId);    \r\n        require(mscInterface(mscContractAddress).regUserViaContract(_networkId,pId,_parentId, amount),\"regUser fail\");\r\n        emit reInvestEv(now,_networkId,pId,_parentId,amount);\r\n        return true;\r\n    }\r\n\r\n    event claimReInvestEv(uint256 timeNow, uint256 _networkId,uint256 _planIndex, uint256 _userId, uint amount );\r\n    function claimReInvest(uint256 _userId) public onlyOwner returns(bool)\r\n    {\r\n        uint amount = levelBuyPrice[0] ;\r\n        require(reInvestGain[_userId] >= amount && now > expiryTime[_userId], \"either less amount or time expired\" );\r\n        require(LMXInterface(tokenContractAddress).subBalanceOf(mscContractAddress, amount),\"balance update fail\");\r\n        require(LMXInterface(tokenContractAddress).addBalanceOf(owner, amount),\"balance update fail\");        \r\n        emit claimReInvestEv(now,networkId,0,_userId,amount);\r\n        return true;\r\n    }\r\n\r\n    function setBasicData(address payable _mscContractAddress,address payable _tokenContractAddress,address payable _usdtContractAddress, uint256 _networkId ) public onlyOwner returns(bool)\r\n    {\r\n        mscContractAddress = _mscContractAddress;\r\n        tokenContractAddress = _tokenContractAddress;\r\n        usdtContractAddress = _usdtContractAddress;\r\n        networkId = _networkId;\r\n        return true;\r\n    }\r\n\r\n    function setOneEthToDollar(uint _value) public onlySigner returns(bool)\r\n    {\r\n        oneEthToDollar = _value;\r\n        return true;\r\n    }\r\n\r\n    event withdrawForUSDTEv(uint256 timeNow, uint256 amount);\r\n    function withdrawForUSDT() public onlyOwner returns(bool)\r\n    {\r\n        require(usdtContractAddress != address(0), \"invalid usdt address\");\r\n        usdtContractAddress.transfer(address(this).balance);\r\n        emit withdrawForUSDTEv(now, address(this).balance);\r\n    }\r\n\r\n    // 1 = admin, 2 = buffer\r\n    function getFund(uint amount, uint _type) public returns(bool)\r\n    {\r\n        require(_type > 0 && _type < 3, \"invalid type\");\r\n        if(_type == 1) require(msg.sender == owner);\r\n        if(_type == 2) require(msg.sender == bufferOwner);\r\n        mscInterface(mscContractAddress).doPay(networkId,_type,amount,msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function changeOwnerNBufferAddress(address payable _owner, address payable _bufferOwner) public onlyOwner returns(bool)\r\n    {\r\n        owner = _owner;\r\n        bufferOwner = _bufferOwner;\r\n        return true;\r\n    }\r\n\r\n    function viewPlanPriceInEther(uint256 _levelIndex ) public view returns(uint256)\r\n    {\r\n        if (_levelIndex < 6) return (( levelBuyPrice[_levelIndex] * 1000000 ) / oneEthToDollar) / 1000000;\r\n        return 0;\r\n    }\r\n\r\n    function viewTokenValueInEther(uint256 _amount ) public view returns(uint256)\r\n    {\r\n        return ( _amount * 1000000 * oneEthToDollar) / 1000000;\r\n    }\r\n\r\n\r\n    //remove below when going to mainnet\r\n    function setReinvestAmount(uint amount, uint _userId, uint expiry) public returns(bool)\r\n    {\r\n        reInvestGain[_userId] = amount;\r\n        expiryTime[_userId] = expiry;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_bufferOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_networkId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_planIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyLevelbyTokenGainEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_networkId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_planIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimReInvestEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"getEtherFromTokenEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payInEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAgainst\",\"type\":\"uint256\"}],\"name\":\"payOutDetailEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_networkId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_planIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseUserId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_subTreeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mainTree\",\"type\":\"bool\"}],\"name\":\"processExternalMainEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_networkId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_parentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reInvestEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForUSDTEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminPart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bufferpart\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenEv\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowWithdrawInEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"autoPoolGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boosterGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_bufferOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerNBufferAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"claimReInvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEtherFromToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"megaPoolGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"megaPoolPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"megaPoolReadyToWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mscContractAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"networkId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneEthToDollar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidAutoPoolGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidBoosterGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidMegaPoolGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidTeamActivationGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidTeamBonusGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_networkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseUserId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subTreeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paidAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mainTree\",\"type\":\"bool\"}],\"name\":\"processExternalMain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_parentId\",\"type\":\"uint256\"}],\"name\":\"reInvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reInvestGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_parentId\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAllowWithdrawInEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_mscContractAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_usdtContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_networkId\",\"type\":\"uint256\"}],\"name\":\"setBasicData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setOneEthToDollar\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"setReinvestAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamActivationGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamBonusGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamTurnOver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_turnOverCountLeg1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_turnOverCountLeg2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_turnOverCountLeg3\",\"type\":\"uint256\"}],\"name\":\"updateTeamCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtContractAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"viewDashBoardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boostIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamActivationIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"megaIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256[6]\",\"name\":\"autoPoolIncome\",\"type\":\"uint256[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelIndex\",\"type\":\"uint256\"}],\"name\":\"viewPlanPriceInEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"viewTokenValueInEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"withdrawBoosterAndAutoPoolGain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawForUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"withdrawMegaPoolGain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"withdrawTeamActivationGain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"}],\"name\":\"withdrawTeamBonusGain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"lemoxCash","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b4db73b8e8cb17648762369992fa5c1d6c2a475c0000000000000000000000003ba7ea33ddbf16302887b78922e80ebf7748fb69","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f02572517c928df96dad0288ae2689c0768d950c5baa3f59bbfe6489aa5ac4d6"}]}