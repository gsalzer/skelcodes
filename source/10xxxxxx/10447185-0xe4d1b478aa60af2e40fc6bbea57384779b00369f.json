{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/shifter/ShifterRegistry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\r\n    /// @param _admin Address of multisig that becomes admin\r\n    function setAdminByOwner(address _admin) public {\r\n        require(msg.sender == owner);\r\n        require(admin == address(0));\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function setAdminByAdmin(address _admin) public {\r\n        require(msg.sender == admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function setOwnerByAdmin(address _owner) public {\r\n        require(msg.sender == admin);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(owner).transfer(_amount);\r\n        } else {\r\n            ERC20(_token).safeTransfer(owner, _amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract ShifterRegistry is AdminAuth {\r\n    mapping (string => address) public contractAddresses;\r\n    bool public finalized;\r\n\r\n    function changeContractAddr(string memory _contractName, address _protoAddr) public onlyOwner {\r\n        require(!finalized);\r\n        contractAddresses[_contractName] = _protoAddr;\r\n    }\r\n\r\n    function lock() public onlyOwner {\r\n        finalized = true;\r\n    }\r\n\r\n    function getAddr(string memory _contractName) public view returns (address contractAddr) {\r\n        contractAddr = contractAddresses[_contractName];\r\n\r\n        require(contractAddr != address(0), \"No contract address registred\");\r\n    }\r\n\r\n}\r\n\r\n// File: localhost/mcd/Discount.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n}\r\n\r\n// File: localhost/exchange/SaverExchangeHelper.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract SaverExchangeHelper {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant DGD_ADDRESS = 0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A;\r\n\r\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    address public constant KYBER_WRAPPER = 0x3d1D4D6Bb405b2366434cb7387803c7B662b8d71;\r\n    address public constant UNISWAP_WRAPPER = 0xFF92ADA50cDC8009686867b4a470C8769bEdB22d;\r\n    address public constant OASIS_WRAPPER = 0x9C499376B41A91349Ff93F99462a65962653e104;\r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n    address public constant ZRX_ALLOWLIST_ADDR = 0x019739e288973F92bDD3c1d87178E206E51fd911;\r\n\r\n\r\n    function getDecimals(address _token) internal view returns (uint256) {\r\n        if (_token == DGD_ADDRESS) return 9;\r\n        if (_token == KYBER_ETH_ADDRESS) return 18;\r\n\r\n        return ERC20(_token).decimals();\r\n    }\r\n\r\n    function getBalance(address _tokenAddr) internal view returns (uint balance) {\r\n        if (_tokenAddr == KYBER_ETH_ADDRESS) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = ERC20(_tokenAddr).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function approve0xProxy(address _tokenAddr, uint _amount) internal {\r\n        if (_tokenAddr != KYBER_ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).safeApprove(address(ERC20_PROXY_0X), _amount);\r\n        }\r\n    }\r\n\r\n    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\r\n        // send back any leftover ether or tokens\r\n        if (address(this).balance > 0) {\r\n            _to.transfer(address(this).balance);\r\n        }\r\n\r\n        if (getBalance(_srcAddr) > 0) {\r\n            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\r\n        }\r\n\r\n        if (getBalance(_destAddr) > 0) {\r\n            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\r\n        }\r\n    }\r\n\r\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\r\n        require(bs.length >= start + 32, \"slicing out of range\");\r\n\r\n        uint256 x;\r\n        assembly {\r\n            x := mload(add(bs, add(0x20, start)))\r\n        }\r\n\r\n        return x;\r\n    }\r\n}\r\n\r\n// File: localhost/utils/ZrxAllowlist.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract ZrxAllowlist is AdminAuth {\r\n\r\n    mapping (address => bool) public zrxAllowlist;\r\n\r\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\r\n        zrxAllowlist[_zrxAddr] = _state;\r\n    }\r\n\r\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\r\n        return zrxAllowlist[_zrxAddr];\r\n    }\r\n}\r\n\r\n// File: localhost/interfaces/ExchangeInterfaceV2.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ExchangeInterfaceV2 {\r\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount) external payable returns (uint);\r\n\r\n    function buy(address _srcAddr, address _destAddr, uint _destAmount) external payable returns(uint);\r\n\r\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount) external view returns (uint);\r\n\r\n    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount) external view returns (uint);\r\n}\r\n\r\n// File: localhost/interfaces/TokenInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract TokenInterface {\r\n    function allowance(address, address) public virtual returns (uint256);\r\n\r\n    function balanceOf(address) public virtual returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(address, address, uint256) public virtual returns (bool);\r\n\r\n    function deposit() public virtual payable;\r\n\r\n    function withdraw(uint256) public virtual;\r\n}\r\n\r\n// File: localhost/DS/DSMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/exchange/SaverExchangeCore.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SaverExchangeCore is SaverExchangeHelper, DSMath {\r\n\r\n    // first is empty to keep the legacy order in place\r\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\r\n\r\n    enum ActionType { SELL, BUY }\r\n\r\n    struct ExchangeData {\r\n        address srcAddr;\r\n        address destAddr;\r\n        uint srcAmount;\r\n        uint destAmount;\r\n        uint minPrice;\r\n        ExchangeType exchangeType;\r\n        address exchangeAddr;\r\n        bytes callData;\r\n        uint256 price0x;\r\n    }\r\n\r\n    /// @notice Internal method that preforms a sell on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and destAmount\r\n    function _sell(ExchangeData memory exData) internal returns (address, uint) {\r\n\r\n        address wrapper;\r\n        uint swapedTokens;\r\n        bool success;\r\n        uint tokensLeft = exData.srcAmount;\r\n\r\n        // if 0x is selected try first the 0x order\r\n        if (exData.exchangeType == ExchangeType.ZEROX) {\r\n            approve0xProxy(exData.srcAddr, exData.srcAmount);\r\n\r\n            (success, swapedTokens, tokensLeft) = takeOrder(exData, address(this).balance, ActionType.SELL);\r\n\r\n            require(success, \"0x order failed\");\r\n\r\n            wrapper = exData.exchangeAddr;\r\n        }\r\n\r\n        // check if we have already swapped with 0x, or tried swapping but failed\r\n        if (tokensLeft > 0) {\r\n            uint price;\r\n\r\n            (wrapper, price)\r\n                = getBestPrice(exData.srcAmount, exData.srcAddr, exData.destAddr, exData.exchangeType, ActionType.SELL);\r\n\r\n            require(price > exData.minPrice || exData.price0x > exData.minPrice, \"Slippage hit\");\r\n\r\n            // if 0x has better prices use 0x\r\n            if (exData.price0x >= price && exData.exchangeType != ExchangeType.ZEROX) {\r\n                approve0xProxy(exData.srcAddr, exData.srcAmount);\r\n\r\n                (success, swapedTokens, tokensLeft) = takeOrder(exData, address(this).balance, ActionType.SELL);\r\n            }\r\n\r\n            // 0x either had worse price or we tried and order fill failed, so call on chain swap\r\n            if (tokensLeft > 0) {\r\n                require(price > exData.minPrice, \"On chain slippage hit\");\r\n\r\n                swapedTokens = saverSwap(exData, wrapper, ActionType.SELL);\r\n            }\r\n        }\r\n\r\n        require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), \"Double check min price\");\r\n\r\n        return (wrapper, swapedTokens);\r\n    }\r\n\r\n    /// @notice Internal method that preforms a buy on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and srcAmount\r\n    function _buy(ExchangeData memory exData) internal returns (address, uint) {\r\n\r\n        address wrapper;\r\n        uint swapedTokens;\r\n        bool success;\r\n\r\n        require(exData.destAmount != 0, \"Dest amount must be specified\");\r\n\r\n        // if 0x is selected try first the 0x order\r\n        if (exData.exchangeType == ExchangeType.ZEROX) {\r\n            approve0xProxy(exData.srcAddr, exData.srcAmount);\r\n\r\n            (success, swapedTokens,) = takeOrder(exData, address(this).balance, ActionType.BUY);\r\n\r\n            require(success, \"0x order failed\");\r\n\r\n            wrapper = exData.exchangeAddr;\r\n        }\r\n\r\n        // check if we have already swapped with 0x, or tried swapping but failed\r\n        if (getBalance(exData.destAddr) < exData.destAmount) {\r\n            uint price;\r\n\r\n            (wrapper, price)\r\n                = getBestPrice(exData.destAmount, exData.srcAddr, exData.destAddr, exData.exchangeType, ActionType.BUY);\r\n\r\n            require(price < exData.minPrice || exData.price0x < exData.minPrice, \"Slippage hit\");\r\n\r\n            // if 0x has better prices use 0x\r\n            if (exData.price0x != 0 && exData.price0x <= price && exData.exchangeType != ExchangeType.ZEROX) {\r\n                approve0xProxy(exData.srcAddr, exData.srcAmount);\r\n\r\n                (success, swapedTokens,) = takeOrder(exData, address(this).balance, ActionType.BUY);\r\n            }\r\n\r\n            // 0x either had worse price or we tried and order fill failed, so call on chain swap\r\n            if (getBalance(exData.destAddr) < exData.destAmount) {\r\n                require(price < exData.minPrice, \"On chain slippage hit\");\r\n\r\n                swapedTokens = saverSwap(exData, wrapper, ActionType.BUY);\r\n            }\r\n        }\r\n\r\n        require(getBalance(exData.destAddr) >= exData.destAmount, \"Less then destAmount\");\r\n\r\n        return (wrapper, getBalance(exData.destAddr));\r\n    }\r\n\r\n    /// @notice Takes order from 0x and returns bool indicating if it is successful\r\n    /// @param _exData Exchange data\r\n    /// @param _ethAmount Ether fee needed for 0x order\r\n    function takeOrder(\r\n        ExchangeData memory _exData,\r\n        uint256 _ethAmount,\r\n        ActionType _type\r\n    ) private returns (bool success, uint256, uint256) {\r\n\r\n        // write in the exact amount we are selling/buing in an order\r\n        if (_type == ActionType.SELL) {\r\n            writeUint256(_exData.callData, 36, _exData.srcAmount);\r\n        } else {\r\n            writeUint256(_exData.callData, 36, _exData.destAmount);\r\n        }\r\n\r\n        if (ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.exchangeAddr)) {\r\n            (success, ) = _exData.exchangeAddr.call{value: _ethAmount}(_exData.callData);\r\n        } else {\r\n            success = false;\r\n        }\r\n\r\n        uint256 tokensSwaped = 0;\r\n        uint256 tokensLeft = _exData.srcAmount;\r\n\r\n        if (success) {\r\n            // check to see if any _src tokens are left over after exchange\r\n            tokensLeft = getBalance(_exData.srcAddr);\r\n\r\n            // convert weth -> eth if needed\r\n            if (_exData.destAddr == KYBER_ETH_ADDRESS) {\r\n                TokenInterface(WETH_ADDRESS).withdraw(\r\n                    TokenInterface(WETH_ADDRESS).balanceOf(address(this))\r\n                );\r\n            }\r\n\r\n            // get the current balance of the swaped tokens\r\n            tokensSwaped = getBalance(_exData.destAddr);\r\n        }\r\n\r\n        return (success, tokensSwaped, tokensLeft);\r\n    }\r\n\r\n    /// @notice Returns the best estimated price from 2 exchanges\r\n    /// @param _amount Amount of source tokens you want to exchange\r\n    /// @param _srcToken Address of the source token\r\n    /// @param _destToken Address of the destination token\r\n    /// @param _exchangeType Which exchange will be used\r\n    /// @param _type Type of action SELL|BUY\r\n    /// @return (address, uint) The address of the best exchange and the exchange price\r\n    function getBestPrice(\r\n        uint256 _amount,\r\n        address _srcToken,\r\n        address _destToken,\r\n        ExchangeType _exchangeType,\r\n        ActionType _type\r\n    ) public returns (address, uint256) {\r\n\r\n        if (_exchangeType == ExchangeType.OASIS) {\r\n            return (OASIS_WRAPPER, getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount, _type));\r\n        }\r\n\r\n        if (_exchangeType == ExchangeType.KYBER) {\r\n            return (KYBER_WRAPPER, getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount, _type));\r\n        }\r\n\r\n        if (_exchangeType == ExchangeType.UNISWAP) {\r\n            return (UNISWAP_WRAPPER, getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount, _type));\r\n        }\r\n\r\n        uint expectedRateKyber = getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount, _type);\r\n        uint expectedRateUniswap = getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount, _type);\r\n        uint expectedRateOasis = getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount, _type);\r\n\r\n        if (_type == ActionType.SELL) {\r\n            return getBiggestRate(expectedRateKyber, expectedRateUniswap, expectedRateOasis);\r\n        } else {\r\n            return getSmallestRate(expectedRateKyber, expectedRateUniswap, expectedRateOasis);\r\n        }\r\n    }\r\n\r\n    /// @notice Return the expected rate from the exchange wrapper\r\n    /// @dev In case of Oasis/Uniswap handles the different precision tokens\r\n    /// @param _wrapper Address of exchange wrapper\r\n    /// @param _srcToken From token\r\n    /// @param _destToken To token\r\n    /// @param _amount Amount to be exchanged\r\n    /// @param _type Type of action SELL|BUY\r\n    function getExpectedRate(\r\n        address _wrapper,\r\n        address _srcToken,\r\n        address _destToken,\r\n        uint256 _amount,\r\n        ActionType _type\r\n    ) public returns (uint256) {\r\n        bool success;\r\n        bytes memory result;\r\n\r\n        if (_type == ActionType.SELL) {\r\n            (success, result) = _wrapper.call(abi.encodeWithSignature(\r\n                \"getSellRate(address,address,uint256)\",\r\n                _srcToken,\r\n                _destToken,\r\n                _amount\r\n            ));\r\n\r\n        } else {\r\n            (success, result) = _wrapper.call(abi.encodeWithSignature(\r\n                \"getBuyRate(address,address,uint256)\",\r\n                _srcToken,\r\n                _destToken,\r\n                _amount\r\n            ));\r\n        }\r\n\r\n        if (success) {\r\n            uint rate = sliceUint(result, 0);\r\n\r\n            if (_wrapper != KYBER_WRAPPER) {\r\n                rate = rate * (10**(18 - getDecimals(_destToken)));\r\n            }\r\n\r\n            return rate;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /// @notice Calls wraper contract for exchage to preform an on-chain swap\r\n    /// @param exData Exchange data struct\r\n    /// @param _wrapper Address of exchange wrapper\r\n    /// @param _type Type of action SELL|BUY\r\n    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\r\n    function saverSwap(ExchangeData memory exData, address _wrapper, ActionType _type) internal returns (uint swapedTokens) {\r\n        uint ethValue = 0;\r\n\r\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\r\n            ethValue = exData.srcAmount;\r\n        } else {\r\n            ERC20(exData.srcAddr).safeTransfer(_wrapper, ERC20(exData.srcAddr).balanceOf(address(this)));\r\n        }\r\n\r\n        if (_type == ActionType.SELL) {\r\n            swapedTokens = ExchangeInterfaceV2(_wrapper).\r\n                    sell{value: ethValue}(exData.srcAddr, exData.destAddr, exData.srcAmount);\r\n        } else {\r\n            swapedTokens = ExchangeInterfaceV2(_wrapper).\r\n                    buy{value: ethValue}(exData.srcAddr, exData.destAddr, exData.destAmount);\r\n        }\r\n    }\r\n\r\n    /// @notice Finds the biggest rate between exchanges, needed for sell rate\r\n    /// @param _expectedRateKyber Kyber rate\r\n    /// @param _expectedRateUniswap Uniswap rate\r\n    /// @param _expectedRateOasis Oasis rate\r\n    function getBiggestRate(\r\n        uint _expectedRateKyber,\r\n        uint _expectedRateUniswap,\r\n        uint _expectedRateOasis\r\n    ) internal pure returns (address, uint) {\r\n        if (\r\n            (_expectedRateUniswap >= _expectedRateKyber) && (_expectedRateUniswap >= _expectedRateOasis)\r\n        ) {\r\n            return (UNISWAP_WRAPPER, _expectedRateUniswap);\r\n        }\r\n\r\n        if (\r\n            (_expectedRateKyber >= _expectedRateUniswap) && (_expectedRateKyber >= _expectedRateOasis)\r\n        ) {\r\n            return (KYBER_WRAPPER, _expectedRateKyber);\r\n        }\r\n\r\n        if (\r\n            (_expectedRateOasis >= _expectedRateKyber) && (_expectedRateOasis >= _expectedRateUniswap)\r\n        ) {\r\n            return (OASIS_WRAPPER, _expectedRateOasis);\r\n        }\r\n    }\r\n\r\n    /// @notice Finds the smallest rate between exchanges, needed for buy rate\r\n    /// @param _expectedRateKyber Kyber rate\r\n    /// @param _expectedRateUniswap Uniswap rate\r\n    /// @param _expectedRateOasis Oasis rate\r\n    function getSmallestRate(\r\n        uint _expectedRateKyber,\r\n        uint _expectedRateUniswap,\r\n        uint _expectedRateOasis\r\n    ) internal pure returns (address, uint) {\r\n        if (\r\n            (_expectedRateUniswap <= _expectedRateKyber) && (_expectedRateUniswap <= _expectedRateOasis)\r\n        ) {\r\n            return (UNISWAP_WRAPPER, _expectedRateUniswap);\r\n        }\r\n\r\n        if (\r\n            (_expectedRateKyber <= _expectedRateUniswap) && (_expectedRateKyber <= _expectedRateOasis)\r\n        ) {\r\n            return (KYBER_WRAPPER, _expectedRateKyber);\r\n        }\r\n\r\n        if (\r\n            (_expectedRateOasis <= _expectedRateKyber) && (_expectedRateOasis <= _expectedRateUniswap)\r\n        ) {\r\n            return (OASIS_WRAPPER, _expectedRateOasis);\r\n        }\r\n    }\r\n\r\n    function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\r\n        if (_b.length < _index + 32) {\r\n            revert(\"Incorrent lengt while writting bytes32\");\r\n        }\r\n\r\n        bytes32 input = bytes32(_input);\r\n\r\n        _index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            mstore(add(_b, _index), input)\r\n        }\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external virtual payable {}\r\n}\r\n\r\n// File: localhost/interfaces/DSProxyInterface.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract DSProxyInterface {\r\n\r\n    /// Truffle wont compile if this isn't commented\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public virtual\r\n    //     payable\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n\r\n    function owner() public virtual returns (address);\r\n}\r\n\r\n// File: localhost/utils/FlashLoanReceiverBase.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IFlashLoanReceiver {\r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\r\n}\r\n\r\nabstract contract ILendingPoolAddressesProvider {\r\n\r\n    function getLendingPool() public view virtual returns (address);\r\n    function setLendingPoolImpl(address _pool) public virtual;\r\n\r\n    function getLendingPoolCore() public virtual view returns (address payable);\r\n    function setLendingPoolCoreImpl(address _lendingPoolCore) public virtual;\r\n\r\n    function getLendingPoolConfigurator() public virtual view returns (address);\r\n    function setLendingPoolConfiguratorImpl(address _configurator) public virtual;\r\n\r\n    function getLendingPoolDataProvider() public virtual view returns (address);\r\n    function setLendingPoolDataProviderImpl(address _provider) public virtual;\r\n\r\n    function getLendingPoolParametersProvider() public virtual view returns (address);\r\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) public virtual;\r\n\r\n    function getTokenDistributor() public virtual view returns (address);\r\n    function setTokenDistributor(address _tokenDistributor) public virtual;\r\n\r\n\r\n    function getFeeProvider() public virtual view returns (address);\r\n    function setFeeProviderImpl(address _feeProvider) public virtual;\r\n\r\n    function getLendingPoolLiquidationManager() public virtual view returns (address);\r\n    function setLendingPoolLiquidationManager(address _manager) public virtual;\r\n\r\n    function getLendingPoolManager() public virtual view returns (address);\r\n    function setLendingPoolManager(address _lendingPoolManager) public virtual;\r\n\r\n    function getPriceOracle() public virtual view returns (address);\r\n    function setPriceOracle(address _priceOracle) public virtual;\r\n\r\n    function getLendingRateOracle() public view virtual returns (address);\r\n    function setLendingRateOracle(address _lendingRateOracle) public virtual;\r\n}\r\n\r\nlibrary EthAddressLib {\r\n\r\n    function ethAddress() internal pure returns(address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\r\n\r\n    using SafeERC20 for ERC20;\r\n    using SafeMath for uint256;\r\n\r\n    ILendingPoolAddressesProvider public addressesProvider;\r\n\r\n    constructor(ILendingPoolAddressesProvider _provider) public {\r\n        addressesProvider = _provider;\r\n    }\r\n\r\n    receive () external virtual payable {}\r\n\r\n    function transferFundsBackToPoolInternal(address _reserve, uint256 _amount) internal {\r\n\r\n        address payable core = addressesProvider.getLendingPoolCore();\r\n\r\n        transferInternal(core,_reserve, _amount);\r\n    }\r\n\r\n    function transferInternal(address payable _destination, address _reserve, uint256  _amount) internal {\r\n        if(_reserve == EthAddressLib.ethAddress()) {\r\n            //solium-disable-next-line\r\n            _destination.call{value: _amount}(\"\");\r\n            return;\r\n        }\r\n\r\n        ERC20(_reserve).safeTransfer(_destination, _amount);\r\n\r\n\r\n    }\r\n\r\n    function getBalanceInternal(address _target, address _reserve) internal view returns(uint256) {\r\n        if(_reserve == EthAddressLib.ethAddress()) {\r\n\r\n            return _target.balance;\r\n        }\r\n\r\n        return ERC20(_reserve).balanceOf(_target);\r\n\r\n    }\r\n}\r\n\r\n// File: localhost/utils/Address.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/interfaces/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// File: localhost/utils/SafeERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/auth/AdminAuth.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n// File: localhost/shifter/LoanShifterReceiver.sol\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title LoanShifterReceiver Recevies the Aave flash loan and calls actions through users DSProxy\r\ncontract LoanShifterReceiver is SaverExchangeCore, FlashLoanReceiverBase, AdminAuth {\r\n\r\n    ILendingPoolAddressesProvider public LENDING_POOL_ADDRESS_PROVIDER = ILendingPoolAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    ShifterRegistry public constant shifterRegistry = ShifterRegistry(0xD280c91397C1f8826a82a9432D65e4215EF22e55);\r\n\r\n    struct ParamData {\r\n        bytes proxyData1;\r\n        bytes proxyData2;\r\n        address proxy;\r\n        address debtAddr;\r\n        uint8 protocol1;\r\n        uint8 protocol2;\r\n        uint8 swapType;\r\n    }\r\n\r\n    constructor() FlashLoanReceiverBase(LENDING_POOL_ADDRESS_PROVIDER) public {}\r\n\r\n    function executeOperation(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        bytes calldata _params)\r\n    external override {\r\n        // Format the call data for DSProxy\r\n        (ParamData memory paramData, ExchangeData memory exchangeData)\r\n                                 = packFunctionCall(_amount, _params);\r\n\r\n        address protocolAddr1 = shifterRegistry.getAddr(getNameByProtocol(paramData.protocol1));\r\n        address protocolAddr2 = shifterRegistry.getAddr(getNameByProtocol(paramData.protocol2));\r\n\r\n        // Send Flash loan amount to DSProxy\r\n        sendToProxy(payable(paramData.proxy), _reserve, _amount);\r\n\r\n        // Execute the Close operation\r\n        DSProxyInterface(paramData.proxy).execute(protocolAddr1, paramData.proxyData1);\r\n\r\n        uint amount = 0;\r\n\r\n        if (paramData.swapType == 1) { // COLL_SWAP\r\n            exchangeData.srcAmount = getBalance(exchangeData.srcAddr);\r\n            (, amount) = _sell(exchangeData);\r\n        }\r\n\r\n        sendToProxy(payable(paramData.proxy), exchangeData.destAddr, amount);\r\n\r\n        // Execute the Open operation\r\n        DSProxyInterface(paramData.proxy).execute(protocolAddr2, paramData.proxyData2);\r\n\r\n        if (paramData.swapType == 2) { // DEBT_SWAP\r\n            exchangeData.destAmount = getBalance(exchangeData.destAddr);\r\n            (, amount) = _buy(exchangeData);\r\n        }\r\n\r\n        // Repay FL\r\n        transferFundsBackToPoolInternal(_reserve, _amount.add(_fee));\r\n\r\n        // if there is some eth left (0x fee), return it to user\r\n        if (address(this).balance > 0) {\r\n            tx.origin.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function packFunctionCall(uint _amount, bytes memory _params)\r\n        internal pure returns (ParamData memory paramData, ExchangeData memory exchangeData) {\r\n\r\n        (\r\n            uint[8] memory numData, // collAmount, debtAmount, id1, id2, srcAmount, destAmount, minPrice, price0x\r\n            address[6] memory addrData, // addrLoan1, addrLoan2, debtAddr, srcAddr, destAddr, exchangeAddr\r\n            uint8[4] memory enumData, // fromProtocol, toProtocol, exchangeType, swapType\r\n            bytes memory callData,\r\n            address proxy\r\n        )\r\n        = abi.decode(_params, (uint256[8],address[6],uint8[4],bytes,address));\r\n\r\n        bytes memory proxyData1;\r\n        bytes memory proxyData2;\r\n\r\n        if (enumData[0] == 0) { // MAKER\r\n            proxyData1 = abi.encodeWithSignature(\r\n            \"close(uint256,address,uint256,uint256)\",\r\n                                numData[2], addrData[0], _amount, numData[0]);\r\n\r\n            proxyData2 = abi.encodeWithSignature(\r\n            \"open(uint256,address,uint256,uint256)\",\r\n                                numData[3], addrData[1], _amount, numData[1]);\r\n        } else if(enumData[0] == 1) { // COMPOUND\r\n            proxyData1 = abi.encodeWithSignature(\r\n            \"close(address,address,uint256,uint256)\",\r\n                                addrData[0], addrData[2], numData[0], numData[1]);\r\n\r\n            // Figures out the debt token of the second loan\r\n            address debtAddr2 = addrData[4] == address(0) ? addrData[2] : addrData[4];\r\n\r\n            proxyData2 = abi.encodeWithSignature(\r\n            \"open(address,address,uint256,uint256)\",\r\n                                addrData[1], debtAddr2, numData[0], numData[1]);\r\n        }\r\n\r\n\r\n        paramData = ParamData({\r\n            proxyData1: proxyData1,\r\n            proxyData2: proxyData2,\r\n            debtAddr: addrData[2],\r\n            proxy: proxy,\r\n            swapType: enumData[3],\r\n            protocol1: enumData[0],\r\n            protocol2: enumData[1]\r\n        });\r\n\r\n        exchangeData = SaverExchangeCore.ExchangeData({\r\n            srcAddr: addrData[3],\r\n            destAddr: addrData[4],\r\n            srcAmount: numData[4],\r\n            destAmount: numData[5],\r\n            minPrice: numData[6],\r\n            exchangeType: ExchangeType(enumData[2]),\r\n            exchangeAddr: addrData[5],\r\n            callData: callData,\r\n            price0x: numData[7]\r\n        });\r\n\r\n    }\r\n\r\n    function sendToProxy(address payable _proxy, address _reserve, uint _amount) internal {\r\n        if (_reserve != ETH_ADDRESS) {\r\n            ERC20(_reserve).safeTransfer(_proxy, _amount);\r\n        }\r\n\r\n        _proxy.transfer(address(this).balance);\r\n    }\r\n\r\n    function getNameByProtocol(uint8 _proto) internal pure returns (string memory) {\r\n        if (_proto == 0) {\r\n            return \"MCD_SHIFTER\";\r\n        } else if (_proto == 1) {\r\n            return \"COMP_SHIFTER\";\r\n        }\r\n    }\r\n\r\n    receive() external override(FlashLoanReceiverBase, SaverExchangeCore) payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DGD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYBER_WRAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL_ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OASIS_WRAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_WRAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZRX_ALLOWLIST_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"enum SaverExchangeCore.ExchangeType\",\"name\":\"_exchangeType\",\"type\":\"uint8\"},{\"internalType\":\"enum SaverExchangeCore.ActionType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getBestPrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum SaverExchangeCore.ActionType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getExpectedRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shifterRegistry\",\"outputs\":[{\"internalType\":\"contract ShifterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LoanShifterReceiver","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1710906312893c46ec6c5675d7bebd3ef93eed01ef0adb1d3698110d06621280"}]}