{"status":"1","message":"OK","result":[{"SourceCode":"/**\nSPDX-License-Identifier: UNLICENSED\nSee https://github.com/OpenZeppelin/openzeppelin-contracts/blob/2a0f2a8ba807b41360e7e092c3d5bb1bfbeb8b50/LICENSE and https://github.com/NovakDistributed/macroverse/blob/eea161aff5dba9d21204681a3b0f5dbe1347e54b/LICENSE\n*/\n\npragma solidity ^0.6.10;\n\n\n/**\n * RealMath: fixed-point math library, based on fractional and integer parts.\n * Using int128 as real88x40, which isn't in Solidity yet.\n * 40 fractional bits gets us down to 1E-12 precision, while still letting us\n * go up to galaxy scale counting in meters.\n * Internally uses the wider int256 for some math.\n *\n * Note that for addition, subtraction, and mod (%), you should just use the\n * built-in Solidity operators. Functions for these operations are not provided.\n *\n * Note that the fancy functions like sqrt, atan2, etc. aren't as accurate as\n * they should be. They are (hopefully) Good Enough for doing orbital mechanics\n * on block timescales in a game context, but they may not be good enough for\n * other applications.\n */\nlibrary RealMath {\n    \n    /**@dev\n     * How many total bits are there?\n     */\n    int256 constant REAL_BITS = 128;\n    \n    /**@dev\n     * How many fractional bits are there?\n     */\n    int256 constant REAL_FBITS = 40;\n    \n    /**@dev\n     * How many integer bits are there?\n     */\n    int256 constant REAL_IBITS = REAL_BITS - REAL_FBITS;\n    \n    /**@dev\n     * What's the first non-fractional bit\n     */\n    int128 constant REAL_ONE = int128(1) << int128(REAL_FBITS);\n    \n    /**@dev\n     * What's the last fractional bit?\n     */\n    int128 constant REAL_HALF = REAL_ONE >> int128(1);\n    \n    /**@dev\n     * What's two? Two is pretty useful.\n     */\n    int128 constant REAL_TWO = REAL_ONE << int128(1);\n    \n    /**@dev\n     * And our logarithms are based on ln(2).\n     */\n    int128 constant REAL_LN_TWO = 762123384786;\n    \n    /**@dev\n     * It is also useful to have Pi around.\n     */\n    int128 constant REAL_PI = 3454217652358;\n    \n    /**@dev\n     * And half Pi, to save on divides.\n     * TODO: That might not be how the compiler handles constants.\n     */\n    int128 constant REAL_HALF_PI = 1727108826179;\n    \n    /**@dev\n     * And two pi, which happens to be odd in its most accurate representation.\n     */\n    int128 constant REAL_TWO_PI = 6908435304715;\n    \n    /**@dev\n     * What's the sign bit?\n     */\n    int128 constant SIGN_MASK = int128(1) << int128(127);\n    \n\n    /**\n     * Convert an integer to a real. Preserves sign.\n     */\n    function toReal(int88 ipart) public pure returns (int128) {\n        return int128(ipart) * REAL_ONE;\n    }\n    \n    /**\n     * Convert a real to an integer. Preserves sign.\n     */\n    function fromReal(int128 real_value) public pure returns (int88) {\n        return int88(real_value / REAL_ONE);\n    }\n    \n    /**\n     * Round a real to the nearest integral real value.\n     */\n    function round(int128 real_value) public pure returns (int128) {\n        // First, truncate.\n        int88 ipart = fromReal(real_value);\n        if ((fractionalBits(real_value) & (uint40(1) << uint40(REAL_FBITS - 1))) > 0) {\n            // High fractional bit is set. Round up.\n            if (real_value < int128(0)) {\n                // Rounding up for a negative number is rounding down.\n                ipart -= 1;\n            } else {\n                ipart += 1;\n            }\n        }\n        return toReal(ipart);\n    }\n    \n    /**\n     * Get the absolute value of a real. Just the same as abs on a normal int128.\n     */\n    function abs(int128 real_value) public pure returns (int128) {\n        if (real_value > 0) {\n            return real_value;\n        } else {\n            return -real_value;\n        }\n    }\n    \n    /**\n     * Returns the fractional bits of a real. Ignores the sign of the real.\n     */\n    function fractionalBits(int128 real_value) public pure returns (uint40) {\n        return uint40(abs(real_value) % REAL_ONE);\n    }\n    \n    /**\n     * Get the fractional part of a real, as a real. Ignores sign (so fpart(-0.5) is 0.5).\n     */\n    function fpart(int128 real_value) public pure returns (int128) {\n        // This gets the fractional part but strips the sign\n        return abs(real_value) % REAL_ONE;\n    }\n\n    /**\n     * Get the fractional part of a real, as a real. Respects sign (so fpartSigned(-0.5) is -0.5).\n     */\n    function fpartSigned(int128 real_value) public pure returns (int128) {\n        // This gets the fractional part but strips the sign\n        int128 fractional = fpart(real_value);\n        if (real_value < 0) {\n            // Add the negative sign back in.\n            return -fractional;\n        } else {\n            return fractional;\n        }\n    }\n    \n    /**\n     * Get the integer part of a fixed point value.\n     */\n    function ipart(int128 real_value) public pure returns (int128) {\n        // Subtract out the fractional part to get the real part.\n        return real_value - fpartSigned(real_value);\n    }\n    \n    /**\n     * Multiply one real by another. Truncates overflows.\n     */\n    function mul(int128 real_a, int128 real_b) public pure returns (int128) {\n        // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.\n        // So we just have to clip off the extra REAL_FBITS fractional bits.\n        return int128((int256(real_a) * int256(real_b)) >> REAL_FBITS);\n    }\n    \n    /**\n     * Divide one real by another real. Truncates overflows.\n     */\n    function div(int128 real_numerator, int128 real_denominator) public pure returns (int128) {\n        // We use the reverse of the multiplication trick: convert numerator from\n        // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.\n        return int128((int256(real_numerator) * REAL_ONE) / int256(real_denominator));\n    }\n    \n    /**\n     * Create a real from a rational fraction.\n     */\n    function fraction(int88 numerator, int88 denominator) public pure returns (int128) {\n        return div(toReal(numerator), toReal(denominator));\n    }\n    \n    // Now we have some fancy math things (like pow and trig stuff). This isn't\n    // in the RealMath that was deployed with the original Macroverse\n    // deployment, so it needs to be linked into your contract statically.\n    \n    /**\n     * Raise a number to a positive integer power in O(log power) time.\n     * See <https://stackoverflow.com/a/101613>\n     */\n    function ipow(int128 real_base, int88 exponent) public pure returns (int128) {\n        if (exponent < 0) {\n            // Negative powers are not allowed here.\n            revert();\n        }\n        \n        // Start with the 0th power\n        int128 real_result = REAL_ONE;\n        while (exponent != 0) {\n            // While there are still bits set\n            if ((exponent & 0x1) == 0x1) {\n                // If the low bit is set, multiply in the (many-times-squared) base\n                real_result = mul(real_result, real_base);\n            }\n            // Shift off the low bit\n            exponent = exponent >> 1;\n            // Do the squaring\n            real_base = mul(real_base, real_base);\n        }\n        \n        // Return the final result.\n        return real_result;\n    }\n    \n    /**\n     * Zero all but the highest set bit of a number.\n     * See <https://stackoverflow.com/a/53184>\n     */\n    function hibit(uint256 val) internal pure returns (uint256) {\n        // Set all the bits below the highest set bit\n        val |= (val >>  1);\n        val |= (val >>  2);\n        val |= (val >>  4);\n        val |= (val >>  8);\n        val |= (val >> 16);\n        val |= (val >> 32);\n        val |= (val >> 64);\n        val |= (val >> 128);\n        return val ^ (val >> 1);\n    }\n    \n    /**\n     * Given a number with one bit set, finds the index of that bit.\n     */\n    function findbit(uint256 val) internal pure returns (uint8 index) {\n        index = 0;\n        // We and the value with alternating bit patters of various pitches to find it.\n        \n        if (val & 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA != 0) {\n            // Picth 1\n            index |= 1;\n        }\n        if (val & 0xCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC != 0) {\n            // Pitch 2\n            index |= 2;\n        }\n        if (val & 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0 != 0) {\n            // Pitch 4\n            index |= 4;\n        }\n        if (val & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00 != 0) {\n            // Pitch 8\n            index |= 8;\n        }\n        if (val & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000 != 0) {\n            // Pitch 16\n            index |= 16;\n        }\n        if (val & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000 != 0) {\n            // Pitch 32\n            index |= 32;\n        }\n        if (val & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000 != 0) {\n            // Pitch 64\n            index |= 64;\n        }\n        if (val & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 != 0) {\n            // Pitch 128\n            index |= 128;\n        }\n    }\n    \n    /**\n     * Shift real_arg left or right until it is between 1 and 2. Return the\n     * rescaled value, and the number of bits of right shift applied. Shift may be negative.\n     *\n     * Expresses real_arg as real_scaled * 2^shift, setting shift to put real_arg between [1 and 2).\n     *\n     * Rejects 0 or negative arguments.\n     */\n    function rescale(int128 real_arg) internal pure returns (int128 real_scaled, int88 shift) {\n        if (real_arg <= 0) {\n            // Not in domain!\n            revert();\n        }\n        \n        // Find the high bit\n        int88 high_bit = findbit(hibit(uint256(real_arg)));\n        \n        // We'll shift so the high bit is the lowest non-fractional bit.\n        shift = high_bit - int88(REAL_FBITS);\n        \n        if (shift < 0) {\n            // Shift left\n            real_scaled = real_arg << int128(-shift);\n        } else if (shift >= 0) {\n            // Shift right\n            real_scaled = real_arg >> int128(shift);\n        }\n    }\n    \n    /**\n     * Calculate the natural log of a number. Rescales the input value and uses\n     * the algorithm outlined at <https://math.stackexchange.com/a/977836> and\n     * the ipow implementation.\n     *\n     * Lets you artificially limit the number of iterations.\n     *\n     * Note that it is potentially possible to get an un-converged value; lack\n     * of convergence does not throw.\n     */\n    function lnLimited(int128 real_arg, int max_iterations) public pure returns (int128) {\n        if (real_arg <= 0) {\n            // Outside of acceptable domain\n            revert();\n        }\n        \n        if (real_arg == REAL_ONE) {\n            // Handle this case specially because people will want exactly 0 and\n            // not ~2^-39 ish.\n            return 0;\n        }\n        \n        // We know it's positive, so rescale it to be between [1 and 2)\n        int128 real_rescaled;\n        int88 shift;\n        (real_rescaled, shift) = rescale(real_arg);\n        \n        // Compute the argument to iterate on\n        int128 real_series_arg = div(real_rescaled - REAL_ONE, real_rescaled + REAL_ONE);\n        \n        // We will accumulate the result here\n        int128 real_series_result = 0;\n        \n        for (int88 n = 0; n < max_iterations; n++) {\n            // Compute term n of the series\n            int128 real_term = div(ipow(real_series_arg, 2 * n + 1), toReal(2 * n + 1));\n            // And add it in\n            real_series_result += real_term;\n            if (real_term == 0) {\n                // We must have converged. Next term is too small to represent.\n                break;\n            }\n            // If we somehow never converge I guess we will run out of gas\n        }\n        \n        // Double it to account for the factor of 2 outside the sum\n        real_series_result = mul(real_series_result, REAL_TWO);\n        \n        // Now compute and return the overall result\n        return mul(toReal(shift), REAL_LN_TWO) + real_series_result;\n        \n    }\n    \n    /**\n     * Calculate a natural logarithm with a sensible maximum iteration count to\n     * wait until convergence. Note that it is potentially possible to get an\n     * un-converged value; lack of convergence does not throw.\n     */\n    function ln(int128 real_arg) public pure returns (int128) {\n        return lnLimited(real_arg, 100);\n    }\n    \n    /**\n     * Calculate e^x. Uses the series given at\n     * <http://pages.mtu.edu/~shene/COURSES/cs201/NOTES/chap04/exp.html>.\n     *\n     * Lets you artificially limit the number of iterations.\n     *\n     * Note that it is potentially possible to get an un-converged value; lack\n     * of convergence does not throw.\n     */\n    function expLimited(int128 real_arg, int max_iterations) public pure returns (int128) {\n        // We will accumulate the result here\n        int128 real_result = 0;\n        \n        // We use this to save work computing terms\n        int128 real_term = REAL_ONE;\n        \n        for (int88 n = 0; n < max_iterations; n++) {\n            // Add in the term\n            real_result += real_term;\n            \n            // Compute the next term\n            real_term = mul(real_term, div(real_arg, toReal(n + 1)));\n            \n            if (real_term == 0) {\n                // We must have converged. Next term is too small to represent.\n                break;\n            }\n            // If we somehow never converge I guess we will run out of gas\n        }\n        \n        // Return the result\n        return real_result;\n        \n    }\n    \n    /**\n     * Calculate e^x with a sensible maximum iteration count to wait until\n     * convergence. Note that it is potentially possible to get an un-converged\n     * value; lack of convergence does not throw.\n     */\n    function exp(int128 real_arg) public pure returns (int128) {\n        return expLimited(real_arg, 100);\n    }\n    \n    /**\n     * Raise any number to any power, except for negative bases to fractional powers.\n     */\n    function pow(int128 real_base, int128 real_exponent) public pure returns (int128) {\n        if (real_exponent == 0) {\n            // Anything to the 0 is 1\n            return REAL_ONE;\n        }\n        \n        if (real_base == 0) {\n            if (real_exponent < 0) {\n                // Outside of domain!\n                revert();\n            }\n            // Otherwise it's 0\n            return 0;\n        }\n        \n        if (fpart(real_exponent) == 0) {\n            // Anything (even a negative base) is super easy to do to an integer power.\n            \n            if (real_exponent > 0) {\n                // Positive integer power is easy\n                return ipow(real_base, fromReal(real_exponent));\n            } else {\n                // Negative integer power is harder\n                return div(REAL_ONE, ipow(real_base, fromReal(-real_exponent)));\n            }\n        }\n        \n        if (real_base < 0) {\n            // It's a negative base to a non-integer power.\n            // In general pow(-x^y) is undefined, unless y is an int or some\n            // weird rational-number-based relationship holds.\n            revert();\n        }\n        \n        // If it's not a special case, actually do it.\n        return exp(mul(real_exponent, ln(real_base)));\n    }\n    \n    /**\n     * Compute the square root of a number.\n     */\n    function sqrt(int128 real_arg) public pure returns (int128) {\n        return pow(real_arg, REAL_HALF);\n    }\n    \n    /**\n     * Compute the sin of a number to a certain number of Taylor series terms.\n     */\n    function sinLimited(int128 real_arg, int88 max_iterations) public pure returns (int128) {\n        // First bring the number into 0 to 2 pi\n        // TODO: This will introduce an error for very large numbers, because the error in our Pi will compound.\n        // But for actual reasonable angle values we should be fine.\n        real_arg = real_arg % REAL_TWO_PI;\n        \n        int128 accumulator = REAL_ONE;\n        \n        // We sum from large to small iteration so that we can have higher powers in later terms\n        for (int88 iteration = max_iterations - 1; iteration >= 0; iteration--) {\n            accumulator = REAL_ONE - mul(div(mul(real_arg, real_arg), toReal((2 * iteration + 2) * (2 * iteration + 3))), accumulator);\n            // We can't stop early; we need to make it to the first term.\n        }\n        \n        return mul(real_arg, accumulator);\n    }\n    \n    /**\n     * Calculate sin(x) with a sensible maximum iteration count to wait until\n     * convergence.\n     */\n    function sin(int128 real_arg) public pure returns (int128) {\n        return sinLimited(real_arg, 15);\n    }\n    \n    /**\n     * Calculate cos(x).\n     */\n    function cos(int128 real_arg) public pure returns (int128) {\n        return sin(real_arg + REAL_HALF_PI);\n    }\n    \n    /**\n     * Calculate tan(x). May overflow for large results. May throw if tan(x)\n     * would be infinite, or return an approximation, or overflow.\n     */\n    function tan(int128 real_arg) public pure returns (int128) {\n        return div(sin(real_arg), cos(real_arg));\n    }\n    \n    /**\n     * Calculate atan(x) for x in [-1, 1].\n     * Uses the Chebyshev polynomial approach presented at\n     * https://www.mathworks.com/help/fixedpoint/examples/calculate-fixed-point-arctangent.html\n     * Uses polynomials received by personal communication.\n     * 0.999974x-0.332568x^3+0.193235x^5-0.115729x^7+0.0519505x^9-0.0114658x^11\n     */\n    function atanSmall(int128 real_arg) public pure returns (int128) {\n        int128 real_arg_squared = mul(real_arg, real_arg);\n        return mul(mul(mul(mul(mul(mul(\n            - 12606780422,  real_arg_squared) // x^11\n            + 57120178819,  real_arg_squared) // x^9\n            - 127245381171, real_arg_squared) // x^7\n            + 212464129393, real_arg_squared) // x^5\n            - 365662383026, real_arg_squared) // x^3\n            + 1099483040474, real_arg);       // x^1\n    }\n    \n    /**\n     * Compute the nice two-component arctangent of y/x.\n     */\n    function atan2(int128 real_y, int128 real_x) public pure returns (int128) {\n        int128 atan_result;\n        \n        // Do the angle correction shown at\n        // https://www.mathworks.com/help/fixedpoint/examples/calculate-fixed-point-arctangent.html\n        \n        // We will re-use these absolute values\n        int128 real_abs_x = abs(real_x);\n        int128 real_abs_y = abs(real_y);\n        \n        if (real_abs_x > real_abs_y) {\n            // We are in the (0, pi/4] region\n            // abs(y)/abs(x) will be in 0 to 1.\n            atan_result = atanSmall(div(real_abs_y, real_abs_x));\n        } else {\n            // We are in the (pi/4, pi/2) region\n            // abs(x) / abs(y) will be in 0 to 1; we swap the arguments\n            atan_result = REAL_HALF_PI - atanSmall(div(real_abs_x, real_abs_y));\n        }\n        \n        // Now we correct the result for other regions\n        if (real_x < 0) {\n            if (real_y < 0) {\n                atan_result -= REAL_PI;\n            } else {\n                atan_result = REAL_PI - atan_result;\n            }\n        } else {\n            if (real_y < 0) {\n                atan_result = -atan_result;\n            }\n        }\n        \n        return atan_result;\n    }\n}\n\n// This code is part of Macroverse and is licensed: MIT\n\nlibrary RNG {\n    using RealMath for *;\n\n    /**\n     * We are going to define a RandNode struct to allow for hash chaining.\n     * You can extend a RandNode with a bunch of different stuff and get a new RandNode.\n     * You can then use a RandNode to get a single, repeatable random value.\n     * This eliminates the need for concatenating string selfs, which is a huge pain in Solidity.\n     */\n    struct RandNode {\n        // We hash this together with whatever we're mixing in to get the child hash.\n        bytes32 _hash;\n    }\n    \n    // All the functions that touch RandNodes need to be internal.\n    // If you want to pass them in and out of contracts just use the bytes32.\n    \n    // You can get all these functions as methods on RandNodes by \"using RNG for *\" in your library/contract.\n    \n    /**\n     * Mix string data into a RandNode. Returns a new RandNode.\n     */\n    function derive(RandNode memory self, string memory entropy) internal pure returns (RandNode memory) {\n        // Hash what's there now with the new stuff.\n        return RandNode(sha256(abi.encodePacked(self._hash, entropy)));\n    }\n    \n    /**\n     * Mix signed int data into a RandNode. Returns a new RandNode.\n     */\n    function derive(RandNode memory self, int256 entropy) internal pure returns (RandNode memory) {\n        return RandNode(sha256(abi.encodePacked(self._hash, entropy)));\n    }\n    \n     /**\n     * Mix unsigned int data into a RandNode. Returns a new RandNode.\n     */\n    function derive(RandNode memory self, uint256 entropy) internal pure returns (RandNode memory) {\n        return RandNode(sha256(abi.encodePacked(self._hash, entropy)));\n    }\n\n    /**\n     * Returns the base RNG hash for the given RandNode.\n     * Does another round of hashing in case you made a RandNode(\"Stuff\").\n     */\n    function getHash(RandNode memory self) internal pure returns (bytes32) {\n        return sha256(abi.encodePacked(self._hash));\n    }\n    \n    /**\n     * Return true or false with 50% probability.\n     */\n    function getBool(RandNode memory self) internal pure returns (bool) {\n        return uint256(getHash(self)) & 0x1 > 0;\n    }\n    \n    /**\n     * Get an int128 full of random bits.\n     */\n    function getInt128(RandNode memory self) internal pure returns (int128) {\n        // Just cast to int and truncate\n        return int128(int256(getHash(self)));\n    }\n    \n    /**\n     * Get a real88x40 between 0 (inclusive) and 1 (exclusive).\n     */\n    function getReal(RandNode memory self) internal pure returns (int128) {\n        return getInt128(self).fpart();\n    }\n    \n    /**\n     * Get an integer between low, inclusive, and high, exclusive. Represented as a normal int, not a real.\n     */\n    function getIntBetween(RandNode memory self, int88 low, int88 high) internal pure returns (int88) {\n        return RealMath.fromReal((getReal(self).mul(RealMath.toReal(high) - RealMath.toReal(low))) + RealMath.toReal(low));\n    }\n    \n    /**\n     * Get a real between realLow (inclusive) and realHigh (exclusive).\n     * Only actually has the bits of entropy from getReal, so some values will not occur.\n     */\n    function getRealBetween(RandNode memory self, int128 realLow, int128 realHigh) internal pure returns (int128) {\n        return getReal(self).mul(realHigh - realLow) + realLow;\n    }\n    \n    /**\n     * Roll a number of die of the given size, add/subtract a bonus, and return the result.\n     * Max size is 100.\n     */\n    function d(RandNode memory self, int8 count, int8 size, int8 bonus) internal pure returns (int16) {\n        if (count == 1) {\n            // Base case\n            return int16(getIntBetween(self, 1, size)) + bonus;\n        } else {\n            // Loop and sum\n            int16 sum = bonus;\n            for(int8 i = 0; i < count; i++) {\n                // Roll each die with no bonus\n                sum += d(derive(self, i), 1, size, 0);\n            }\n            return sum;\n        }\n    }\n}\n\n// This code is part of Macroverse and is licensed: MIT\n\n/**\n * Interface for an access control strategy for Macroverse contracts.\n * Can be asked if a certain query should be allowed, and will return true or false.\n * Allows for different access control strategies (unrestricted, minimum balance, subscription, etc.) to be swapped in.\n */\nabstract contract AccessControl {\n    /**\n     * Should a query be allowed for this msg.sender (calling contract) and this tx.origin (calling user)?\n     */\n    function allowQuery(address sender, address origin) virtual public view returns (bool);\n}\n\n// This code is part of Macroverse and is licensed: UNLICENSED\n\n// This code is part of OpenZeppelin and is licensed: MIT\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// This code is part of OpenZeppelin and is licensed: MIT\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * Represents a contract that is Ownable, and which has methods that are to be protected by an AccessControl strategy selected by the owner.\n */\ncontract ControlledAccess is Ownable {\n\n    // This AccessControl contract determines who can run onlyControlledAccess methods.\n    AccessControl accessControl;\n    \n    /**\n     * Make a new ControlledAccess contract, controlling access with the given AccessControl strategy.\n     */\n    constructor(address originalAccessControl) internal {\n        accessControl = AccessControl(originalAccessControl);\n    }\n    \n    /**\n     * Change the access control strategy of the prototype.\n     */\n    function changeAccessControl(address newAccessControl) public onlyOwner {\n        accessControl = AccessControl(newAccessControl);\n    }\n    \n    /**\n     * Only allow queries approved by the access control contract.\n     */\n    modifier onlyControlledAccess {\n        if (!accessControl.allowQuery(msg.sender, tx.origin)) revert();\n        _;\n    }\n    \n\n}\n\n// This code is part of Macroverse and is licensed: UNLICENSED\n\n/**\n * Represents a Macroverse Generator for a galaxy.\n *\n * Permission to call methods on this contract is regulated by a configurable\n * AccessControl contract. One such set of terms might be to require that the\n * account initiating a transaction have a certain minimum MRV token balance.\n *\n * The owner of this contract reserves the right to supersede it with a new\n * version, and to modify the terms for accessing this contract, at any time,\n * for any reason, and without notice. This includes the right to indefinitely\n * or permanently suspend or terminate access to this contract for any person,\n * account, or other contract, or for all persons, accounts, or other\n * contracts. The owner also reserves the right to not do any of the above.\n */\ncontract MacroverseStarGenerator is ControlledAccess {\n    // TODO: RNG doesn't get linked against because we can't pass the struct to the library...\n    using RNG for *;\n    using RealMath for *;\n    // No SafeMath or it might confuse RealMath\n\n    // How big is a sector on a side in LY?\n    int16 constant SECTOR_SIZE = 25;\n    // How far out does the sector system extend?\n    int16 constant MAX_SECTOR = 10000;\n    // How big is the galaxy?\n    int16 constant DISK_RADIUS_IN_SECTORS = 6800;\n    // How thick is its disk?\n    int16 constant DISK_HALFHEIGHT_IN_SECTORS = 40;\n    // How big is the central sphere?\n    int16 constant CORE_RADIUS_IN_SECTORS = 1000;\n    \n    // There are kinds of stars.\n    // We can add more later; these are from http://www.mit.edu/afs.new/sipb/user/sekullbe/furble/planet.txt\n    //                 0           1      2             3           4            5\n    enum ObjectClass { Supergiant, Giant, MainSequence, WhiteDwarf, NeutronStar, BlackHole }\n    // Actual stars have a spectral type\n    //                  0      1      2      3      4      5      6      7\n    enum SpectralType { TypeO, TypeB, TypeA, TypeF, TypeG, TypeK, TypeM, NotApplicable }\n    // Each type has subtypes 0-9, except O which only has 5-9\n    \n    // This root RandNode provides the seed for the universe.\n    RNG.RandNode root;\n    \n    /**\n     * Deploy a new copy of the Macroverse generator contract. Use the given seed to generate a galaxy, down to the star level.\n     * Use the contract at the given address to regulate access.\n     */\n    constructor(bytes32 baseSeed, address accessControlAddress) ControlledAccess(accessControlAddress) public {\n        root = RNG.RandNode(baseSeed);\n    }\n    \n    /**\n     * Get the density (between 0 and 1 as a fixed-point real88x40) of stars in the given sector. Sector 0,0,0 is centered on the galactic origin.\n     * +Y is upwards.\n     */\n    function getGalaxyDensity(int16 sectorX, int16 sectorY, int16 sectorZ) public view onlyControlledAccess returns (int128 realDensity) {\n        // We have a central sphere and a surrounding disk.\n        \n        // Enforce absolute bounds.\n        if (sectorX > MAX_SECTOR) return 0;\n        if (sectorY > MAX_SECTOR) return 0;\n        if (sectorZ > MAX_SECTOR) return 0;\n        if (sectorX < -MAX_SECTOR) return 0;\n        if (sectorY < -MAX_SECTOR) return 0;\n        if (sectorZ < -MAX_SECTOR) return 0;\n        \n        if (int(sectorX) * int(sectorX) + int(sectorY) * int(sectorY) + int(sectorZ) * int(sectorZ) < int(CORE_RADIUS_IN_SECTORS) * int(CORE_RADIUS_IN_SECTORS)) {\n            // Central sphere\n            return RealMath.fraction(9, 10);\n        } else if (int(sectorX) * int(sectorX) + int(sectorZ) * int(sectorZ) < int(DISK_RADIUS_IN_SECTORS) * int(DISK_RADIUS_IN_SECTORS) && sectorY < DISK_HALFHEIGHT_IN_SECTORS && sectorY > -DISK_HALFHEIGHT_IN_SECTORS) {\n            // Disk\n            return RealMath.fraction(1, 2);\n        } else {\n            // General background object rate\n            // Set so that some background sectors do indeed have an object in them.\n            return RealMath.fraction(1, 60);\n        }\n    }\n    \n    /**\n     * Get the number of objects in the sector at the given coordinates.\n     */\n    function getSectorObjectCount(int16 sectorX, int16 sectorY, int16 sectorZ) public view onlyControlledAccess returns (uint16) {\n        // Decide on a base item count\n        RNG.RandNode memory sectorNode = root.derive(sectorX).derive(sectorY).derive(sectorZ);\n        int16 maxObjects = sectorNode.derive(\"count\").d(3, 20, 0);\n        \n        // Multiply by the density function\n        int128 presentObjects = RealMath.toReal(maxObjects).mul(getGalaxyDensity(sectorX, sectorY, sectorZ));\n        \n        return uint16(RealMath.fromReal(RealMath.round(presentObjects)));\n    }\n    \n    /**\n     * Get the seed for an object in a sector.\n     */\n    function getSectorObjectSeed(int16 sectorX, int16 sectorY, int16 sectorZ, uint16 object) public view onlyControlledAccess returns (bytes32) {\n        return root.derive(sectorX).derive(sectorY).derive(sectorZ).derive(uint(object))._hash;\n    }\n    \n    /**\n     * Get the class of the star system with the given seed.\n     */\n    function getObjectClass(bytes32 seed) public view onlyControlledAccess returns (ObjectClass) {\n        // Make a node for rolling for the class.\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"class\");\n        // Roll an impractical d10,000\n        int88 roll = node.getIntBetween(1, 10000);\n        \n        if (roll == 1) {\n            // Should be a black hole\n            return ObjectClass.BlackHole;\n        } else if (roll <= 3) {\n            // Should be a neutron star\n            return ObjectClass.NeutronStar;\n        } else if (roll <= 700) {\n            // Should be a white dwarf\n            return ObjectClass.WhiteDwarf;\n        } else if (roll <= 9900) {\n            // Most things are main sequence\n            return ObjectClass.MainSequence;\n        } else if (roll <= 9990) {\n            return ObjectClass.Giant;\n        } else {\n            return ObjectClass.Supergiant;\n        }\n    }\n    \n    /**\n     * Get the spectral type for an object with the given seed of the given class.\n     */\n    function getObjectSpectralType(bytes32 seed, ObjectClass objectClass) public view onlyControlledAccess returns (SpectralType) {\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"type\");\n        int88 roll = node.getIntBetween(1, 10000000); // Even more implausible dice\n\n        if (objectClass == ObjectClass.MainSequence) {\n            if (roll <= 3) {\n                return SpectralType.TypeO;\n            } else if (roll <= 13003) {\n                return SpectralType.TypeB;\n            } else if (roll <= 73003) {\n                return SpectralType.TypeA;\n            } else if (roll <= 373003) {\n                return SpectralType.TypeF;\n            } else if (roll <= 1133003) {\n                return SpectralType.TypeG;\n            } else if (roll <= 2343003) {\n                return SpectralType.TypeK;\n            } else {\n                return SpectralType.TypeM;\n            }\n        } else if (objectClass == ObjectClass.Giant) {\n            if (roll <= 500000) {\n                return SpectralType.TypeF;\n            } else if (roll <= 1000000) {\n                return SpectralType.TypeG;\n            } else if (roll <= 5500000) {\n                return SpectralType.TypeK;\n            } else {\n                return SpectralType.TypeM;\n            }\n        } else if (objectClass == ObjectClass.Supergiant) {\n            if (roll <= 1000000) {\n                return SpectralType.TypeB;\n            } else if (roll <= 2000000) {\n                return SpectralType.TypeA;\n            } else if (roll <= 4000000) {\n                return SpectralType.TypeF;\n            } else if (roll <= 6000000) {\n                return SpectralType.TypeG;\n            } else if (roll <= 8000000) {\n                return SpectralType.TypeK;\n            } else {\n                return SpectralType.TypeM;\n            }\n        } else {\n            // TODO: No spectral class for anyone else.\n            return SpectralType.NotApplicable;\n        }\n        \n    }\n    \n    /**\n     * Get the position of a star within its sector, as reals from 0 to 25.\n     * Note that stars may end up implausibly close together. Such is life in the Macroverse.\n     */\n    function getObjectPosition(bytes32 seed) public view onlyControlledAccess returns (int128 realX, int128 realY, int128 realZ) {\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"position\");\n        \n        realX = node.derive(\"x\").getRealBetween(RealMath.toReal(0), RealMath.toReal(25));\n        realY = node.derive(\"y\").getRealBetween(RealMath.toReal(0), RealMath.toReal(25));\n        realZ = node.derive(\"z\").getRealBetween(RealMath.toReal(0), RealMath.toReal(25));\n    }\n    \n    /**\n     * Get the mass of a star, in solar masses as a real, given its seed and class and spectral type.\n     */\n    function getObjectMass(bytes32 seed, ObjectClass objectClass, SpectralType spectralType) public view onlyControlledAccess returns (int128) {\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"mass\");\n         \n        if (objectClass == ObjectClass.BlackHole) {\n            return node.getRealBetween(RealMath.toReal(5), RealMath.toReal(50));\n        } else if (objectClass == ObjectClass.NeutronStar) {\n            return node.getRealBetween(RealMath.fraction(11, 10), RealMath.toReal(2));\n        } else if (objectClass == ObjectClass.WhiteDwarf) {\n            return node.getRealBetween(RealMath.fraction(3, 10), RealMath.fraction(11, 10));\n        } else if (objectClass == ObjectClass.MainSequence) {\n            if (spectralType == SpectralType.TypeO) {\n                return node.getRealBetween(RealMath.toReal(16), RealMath.toReal(40));\n            } else if (spectralType == SpectralType.TypeB) {\n                return node.getRealBetween(RealMath.fraction(21, 10), RealMath.toReal(16));\n            } else if (spectralType == SpectralType.TypeA) {\n                return node.getRealBetween(RealMath.fraction(14, 10), RealMath.fraction(21, 10));\n            } else if (spectralType == SpectralType.TypeF) {\n                return node.getRealBetween(RealMath.fraction(104, 100), RealMath.fraction(14, 10));\n            } else if (spectralType == SpectralType.TypeG) {\n                return node.getRealBetween(RealMath.fraction(80, 100), RealMath.fraction(104, 100));\n            } else if (spectralType == SpectralType.TypeK) {\n                return node.getRealBetween(RealMath.fraction(45, 100), RealMath.fraction(80, 100));\n            } else if (spectralType == SpectralType.TypeM) {\n                return node.getRealBetween(RealMath.fraction(8, 100), RealMath.fraction(45, 100));\n            }\n        } else if (objectClass == ObjectClass.Giant) {\n            // Just make it really big\n            return node.getRealBetween(RealMath.toReal(40), RealMath.toReal(50));\n        } else if (objectClass == ObjectClass.Supergiant) {\n            // Just make it really, really big\n            return node.getRealBetween(RealMath.toReal(50), RealMath.toReal(70));\n        }\n    }\n    \n    /**\n     * Determine if the given star has any orbiting planets or not.\n     */\n    function getObjectHasPlanets(bytes32 seed, ObjectClass objectClass, SpectralType spectralType) public view onlyControlledAccess returns (bool) {\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"hasplanets\");\n        int88 roll = node.getIntBetween(1, 1000);\n\n        if (objectClass == ObjectClass.MainSequence) {\n            if (spectralType == SpectralType.TypeO || spectralType == SpectralType.TypeB) {\n                return (roll <= 1);\n            } else if (spectralType == SpectralType.TypeA) {\n                return (roll <= 500);\n            } else if (spectralType == SpectralType.TypeF || spectralType == SpectralType.TypeG || spectralType == SpectralType.TypeK) {\n                return (roll <= 990);\n            } else if (spectralType == SpectralType.TypeM) {\n                return (roll <= 634);\n            }\n        } else if (objectClass == ObjectClass.Giant) {\n            return (roll <= 90);\n        } else if (objectClass == ObjectClass.Supergiant) {\n            return (roll <= 50);\n        } else {\n           // Black hole, neutron star, or white dwarf\n           return (roll <= 70);\n        }\n    }\n    \n\n}\n\n// This code is part of Macroverse and is licensed: UNLICENSED\n\n/**\n * Library which exists to hold types shared across the Macroverse ecosystem.\n * Never actually needs to be linked into any dependents, since it has no functions.\n */\nlibrary Macroverse {\n\n    /**\n     * Define different types of planet or moon.\n     * \n     * There are two main progressions:\n     * Asteroidal, Lunar, Terrestrial, Jovian are rocky things.\n     * Cometary, Europan, Panthalassic, Neptunian are icy/watery things, depending on temperature.\n     * The last thing in each series is the gas/ice giant.\n     *\n     * Asteroidal and Cometary are only valid for moons; we don't track such tiny bodies at system scale.\n     *\n     * We also have rings and asteroid belts. Rings can only be around planets, and we fake the Roche limit math we really should do.\n     * \n     */\n    enum WorldClass {Asteroidal, Lunar, Terrestrial, Jovian, Cometary, Europan, Panthalassic, Neptunian, Ring, AsteroidBelt}\n\n}\n\n// This code is part of Macroverse and is licensed: UNLICENSED\n\n/**\n * Contains a portion of the MacroverseStstemGenerator implementation code.\n * The contract is split up due to contract size limitations.\n * We can't do access control here sadly.\n */\nlibrary MacroverseSystemGeneratorPart1 {\n    // TODO: RNG doesn't get linked against because we can't pass the struct to the library...\n    using RNG for *;\n    using RealMath for *;\n    // No SafeMath or it might confuse RealMath\n\n    /**@dev\n     * It is useful to have Pi around.\n     * We can't pull it in from the library.\n     */\n    int128 constant REAL_PI = 3454217652358;\n\n    /**@dev\n     * Also perpare pi/2\n     */\n    int128 constant REAL_HALF_PI = REAL_PI >> 1;\n\n    /**@dev\n     * How many fractional bits are there?\n     */\n    int256 constant REAL_FBITS = 40;\n    \n    /**@dev\n     * What's the first non-fractional bit\n     */\n    int128 constant REAL_ONE = int128(1) << int128(REAL_FBITS);\n    \n    /**@dev\n     * What's the last fractional bit?\n     */\n    int128 constant REAL_HALF = REAL_ONE >> 1;\n    \n    /**@dev\n     * What's two? Two is pretty useful.\n     */\n    int128 constant REAL_TWO = REAL_ONE << int128(1);\n\n    /**@dev\n     * And zero\n     */\n    int128 constant REAL_ZERO = 0;\n\n    /**\n     * Get the seed for a planet or moon from the seed for its parent (star or planet) and its child number.\n     */\n    function getWorldSeed(bytes32 parentSeed, uint16 childNumber) public pure returns (bytes32) {\n        return RNG.RandNode(parentSeed).derive(uint(childNumber))._hash;\n    }\n    \n    /**\n     * Decide what kind of planet a given planet is.\n     * It depends on its place in the order.\n     * Takes the *planet*'s seed, its number, and the total planets in the system.\n     */\n    function getPlanetClass(bytes32 seed, uint16 planetNumber, uint16 totalPlanets) public pure returns (Macroverse.WorldClass) {\n        // TODO: do something based on metallicity?\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"class\");\n        \n        int88 roll = node.getIntBetween(0, 100);\n        \n        // Inner planets should be more planet-y, ideally smaller\n        // Asteroid belts shouldn't be first that often\n        \n        if (planetNumber == 0 && totalPlanets != 1) {\n            // Innermost planet of a multi-planet system\n            // No asteroid belts allowed!\n            // Also avoid too much watery stuff here because we don't want to deal with the water having been supposed to boil off.\n            if (roll < 69) {\n                return Macroverse.WorldClass.Lunar;\n            } else if (roll < 70) {\n                return Macroverse.WorldClass.Europan;\n            } else if (roll < 79) {\n                return Macroverse.WorldClass.Terrestrial;\n            } else if (roll < 80) {\n                return Macroverse.WorldClass.Panthalassic;\n            } else if (roll < 90) {\n                return Macroverse.WorldClass.Neptunian;\n            } else {\n                return Macroverse.WorldClass.Jovian;\n            }\n        } else if (planetNumber < totalPlanets / 2) {\n            // Inner system\n            if (roll < 15) {\n                return Macroverse.WorldClass.Lunar;\n            } else if (roll < 20) {\n                return Macroverse.WorldClass.Europan;\n            } else if (roll < 35) {\n                return Macroverse.WorldClass.Terrestrial;\n            } else if (roll < 40) {\n                return Macroverse.WorldClass.Panthalassic;\n            } else if (roll < 70) {\n                return Macroverse.WorldClass.Neptunian;\n            } else if (roll < 80) {\n                return Macroverse.WorldClass.Jovian;\n            } else {\n                return Macroverse.WorldClass.AsteroidBelt;\n            }\n        } else {\n            // Outer system\n            if (roll < 5) {\n                return Macroverse.WorldClass.Lunar;\n            } else if (roll < 20) {\n                return Macroverse.WorldClass.Europan;\n            } else if (roll < 22) {\n                return Macroverse.WorldClass.Terrestrial;\n            } else if (roll < 30) {\n                return Macroverse.WorldClass.Panthalassic;\n            } else if (roll < 60) {\n                return Macroverse.WorldClass.Neptunian;\n            } else if (roll < 90) {\n                return Macroverse.WorldClass.Jovian;\n            } else {\n                return Macroverse.WorldClass.AsteroidBelt;\n            }\n        }\n    }\n    \n    /**\n     * Decide what the mass of the planet or moon is. We can't do even the mass of\n     * Jupiter in the ~88 bits we have in a real (should we have used int256 as\n     * the backing type?) so we work in Earth masses.\n     *\n     * Also produces the masses for moons.\n     */\n    function getWorldMass(bytes32 seed, Macroverse.WorldClass class) public pure returns (int128) {\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"mass\");\n        \n        if (class == Macroverse.WorldClass.Asteroidal) {\n            // For tiny bodies like this we work in nano-earths\n            return node.getRealBetween(RealMath.fraction(1, 1000000000), RealMath.fraction(10, 1000000000));\n        } else if (class == Macroverse.WorldClass.Cometary) {\n            return node.getRealBetween(RealMath.fraction(1, 1000000000), RealMath.fraction(10, 1000000000));\n        } else if (class == Macroverse.WorldClass.Lunar) {\n            return node.getRealBetween(RealMath.fraction(1, 100), RealMath.fraction(9, 100));\n        } else if (class == Macroverse.WorldClass.Europan) {\n            return node.getRealBetween(RealMath.fraction(8, 1000), RealMath.fraction(80, 1000));\n        } else if (class == Macroverse.WorldClass.Terrestrial) {\n            return node.getRealBetween(RealMath.fraction(10, 100), RealMath.toReal(9));\n        } else if (class == Macroverse.WorldClass.Panthalassic) {\n            return node.getRealBetween(RealMath.fraction(80, 1000), RealMath.toReal(9));\n        } else if (class == Macroverse.WorldClass.Neptunian) {\n            return node.getRealBetween(RealMath.toReal(7), RealMath.toReal(20));\n        } else if (class == Macroverse.WorldClass.Jovian) {\n            return node.getRealBetween(RealMath.toReal(50), RealMath.toReal(400));\n        } else if (class == Macroverse.WorldClass.AsteroidBelt) {\n            return node.getRealBetween(RealMath.fraction(1, 100), RealMath.fraction(20, 100));\n        } else if (class == Macroverse.WorldClass.Ring) {\n            // Saturn's rings are maybe about 5-15 micro-earths\n            return node.getRealBetween(RealMath.fraction(1, 1000000), RealMath.fraction(20, 1000000));\n        } else {\n            // Not real!\n            revert();\n        }\n    }\n    \n    // Define the orbit shape\n\n    /**\n     * Given the parent star's habitable zone bounds, the planet seed, the planet class\n     * to be generated, and the \"clearance\" radius around the previous planet\n     * in meters, produces orbit statistics (periapsis, apoapsis, and\n     * clearance) in meters.\n     *\n     * The first planet uses a previous clearance of 0.\n     *\n     * TODO: realOuterRadius from the habitable zone never gets used. We should remove it.\n     */\n    function getPlanetOrbitDimensions(int128 realInnerRadius, int128 realOuterRadius, bytes32 seed, Macroverse.WorldClass class, int128 realPrevClearance)\n        public pure returns (int128 realPeriapsis, int128 realApoapsis, int128 realClearance) {\n\n        // We scale all the random generation around the habitable zone distance.\n\n        // Make the planet RNG node to use for all the computations\n        RNG.RandNode memory node = RNG.RandNode(seed);\n        \n        // Compute the statistics with their own functions\n        realPeriapsis = getPlanetPeriapsis(realInnerRadius, realOuterRadius, node, class, realPrevClearance);\n        realApoapsis = getPlanetApoapsis(realInnerRadius, realOuterRadius, node, class, realPeriapsis);\n        realClearance = getPlanetClearance(realInnerRadius, realOuterRadius, node, class, realApoapsis);\n    }\n\n    /**\n     * Decide what the planet's orbit's periapsis is, in meters.\n     * This is the first statistic about the orbit to be generated.\n     *\n     * For the first planet, realPrevClearance is 0. For others, it is the\n     * clearance (i.e. distance from star that the planet has cleared out) of\n     * the previous planet.\n     */\n    function getPlanetPeriapsis(int128 realInnerRadius, int128 /* realOuterRadius */, RNG.RandNode memory planetNode, Macroverse.WorldClass class, int128 realPrevClearance)\n        internal pure returns (int128) {\n        \n        // We're going to sample 2 values and take the minimum, to get a nicer distribution than uniform.\n        // We really kind of want a log scale but that's expensive.\n        RNG.RandNode memory node1 = planetNode.derive(\"periapsis\");\n        RNG.RandNode memory node2 = planetNode.derive(\"periapsis2\");\n        \n        // Define minimum and maximum periapsis distance above previous planet's\n        // cleared band. Work in % of the habitable zone inner radius.\n        int88 minimum;\n        int88 maximum;\n        if (class == Macroverse.WorldClass.Lunar || class == Macroverse.WorldClass.Europan) {\n            minimum = 20;\n            maximum = 60;\n        } else if (class == Macroverse.WorldClass.Terrestrial || class == Macroverse.WorldClass.Panthalassic) {\n            minimum = 20;\n            maximum = 70;\n        } else if (class == Macroverse.WorldClass.Neptunian) {\n            minimum = 50;\n            maximum = 1000;\n        } else if (class == Macroverse.WorldClass.Jovian) {\n            minimum = 300;\n            maximum = 500;\n        } else if (class == Macroverse.WorldClass.AsteroidBelt) {\n            minimum = 20;\n            maximum = 500;\n        } else {\n            // Not real!\n            revert();\n        }\n        \n        int128 realSeparation1 = node1.getRealBetween(RealMath.toReal(minimum), RealMath.toReal(maximum));\n        int128 realSeparation2 = node2.getRealBetween(RealMath.toReal(minimum), RealMath.toReal(maximum));\n        int128 realSeparation = realSeparation1 < realSeparation2 ? realSeparation1 : realSeparation2;\n        return realPrevClearance + RealMath.mul(realSeparation, realInnerRadius).div(RealMath.toReal(100)); \n    }\n    \n    /**\n     * Decide what the planet's orbit's apoapsis is, in meters.\n     * This is the second statistic about the orbit to be generated.\n     */\n    function getPlanetApoapsis(int128 realInnerRadius, int128 /* realOuterRadius */, RNG.RandNode memory planetNode, Macroverse.WorldClass class, int128 realPeriapsis)\n        internal pure returns (int128) {\n        \n        RNG.RandNode memory node1 = planetNode.derive(\"apoapsis\");\n        RNG.RandNode memory node2 = planetNode.derive(\"apoapsis2\");\n        \n        // Define minimum and maximum apoapsis distance above planet's periapsis.\n        // Work in % of the habitable zone inner radius.\n        int88 minimum;\n        int88 maximum;\n        if (class == Macroverse.WorldClass.Lunar || class == Macroverse.WorldClass.Europan) {\n            minimum = 0;\n            maximum = 6;\n        } else if (class == Macroverse.WorldClass.Terrestrial || class == Macroverse.WorldClass.Panthalassic) {\n            minimum = 0;\n            maximum = 10;\n        } else if (class == Macroverse.WorldClass.Neptunian) {\n            minimum = 20;\n            maximum = 500;\n        } else if (class == Macroverse.WorldClass.Jovian) {\n            minimum = 10;\n            maximum = 200;\n        } else if (class == Macroverse.WorldClass.AsteroidBelt) {\n            minimum = 10;\n            maximum = 100;\n        } else {\n            // Not real!\n            revert();\n        }\n        \n        int128 realWidth1 = node1.getRealBetween(RealMath.toReal(minimum), RealMath.toReal(maximum));\n        int128 realWidth2 = node2.getRealBetween(RealMath.toReal(minimum), RealMath.toReal(maximum));\n        int128 realWidth = realWidth1 < realWidth2 ? realWidth1 : realWidth2; \n        return realPeriapsis + RealMath.mul(realWidth, realInnerRadius).div(RealMath.toReal(100)); \n    }\n    \n    /**\n     * Decide how far out the cleared band after the planet's orbit is.\n     */\n    function getPlanetClearance(int128 realInnerRadius, int128 /* realOuterRadius */, RNG.RandNode memory planetNode, Macroverse.WorldClass class, int128 realApoapsis)\n        internal pure returns (int128) {\n        \n        RNG.RandNode memory node1 = planetNode.derive(\"cleared\");\n        RNG.RandNode memory node2 = planetNode.derive(\"cleared2\");\n        \n        // Define minimum and maximum clearance.\n        // Work in % of the habitable zone inner radius.\n        int88 minimum;\n        int88 maximum;\n        if (class == Macroverse.WorldClass.Lunar || class == Macroverse.WorldClass.Europan) {\n            minimum = 20;\n            maximum = 60;\n        } else if (class == Macroverse.WorldClass.Terrestrial || class == Macroverse.WorldClass.Panthalassic) {\n            minimum = 40;\n            maximum = 70;\n        } else if (class == Macroverse.WorldClass.Neptunian) {\n            minimum = 300;\n            maximum = 700;\n        } else if (class == Macroverse.WorldClass.Jovian) {\n            minimum = 300;\n            maximum = 500;\n        } else if (class == Macroverse.WorldClass.AsteroidBelt) {\n            minimum = 20;\n            maximum = 500;\n        } else {\n            // Not real!\n            revert();\n        }\n        \n        int128 realSeparation1 = node1.getRealBetween(RealMath.toReal(minimum), RealMath.toReal(maximum));\n        int128 realSeparation2 = node2.getRealBetween(RealMath.toReal(minimum), RealMath.toReal(maximum));\n        int128 realSeparation = realSeparation1 < realSeparation2 ? realSeparation1 : realSeparation2;\n        return realApoapsis + RealMath.mul(realSeparation, realInnerRadius).div(RealMath.toReal(100)); \n    }\n}\n\n// This code is part of Macroverse and is licensed: UNLICENSED\n\n/**\n * Contains a portion of the MacroverseStstemGenerator implementation code.\n * The contract is split up due to contract size limitations.\n * We can't do access control here sadly.\n */\nlibrary MacroverseSystemGeneratorPart2 {\n    using RNG for *;\n    using RealMath for *;\n    // No SafeMath or it might confuse RealMath\n\n    /**@dev\n     * It is useful to have Pi around.\n     * We can't pull it in from the library.\n     */\n    int128 constant REAL_PI = 3454217652358;\n\n    /**@dev\n     * Also perpare pi/2\n     */\n    int128 constant REAL_HALF_PI = REAL_PI >> 1;\n\n    /**@dev\n     * How many fractional bits are there?\n     */\n    int256 constant REAL_FBITS = 40;\n    \n    /**@dev\n     * What's the first non-fractional bit\n     */\n    int128 constant REAL_ONE = int128(1) << int128(REAL_FBITS);\n    \n    /**@dev\n     * What's the last fractional bit?\n     */\n    int128 constant REAL_HALF = REAL_ONE >> 1;\n    \n    /**@dev\n     * What's two? Two is pretty useful.\n     */\n    int128 constant REAL_TWO = REAL_ONE << int128(1);\n\n    /**@dev\n     * And zero\n     */\n    int128 constant REAL_ZERO = 0;\n    \n    /**\n     * Convert from periapsis and apoapsis to semimajor axis and eccentricity.\n     */\n    function convertOrbitShape(int128 realPeriapsis, int128 realApoapsis) public pure returns (int128 realSemimajor, int128 realEccentricity) {\n        // Semimajor axis is average of apoapsis and periapsis\n        realSemimajor = RealMath.div(realApoapsis + realPeriapsis, RealMath.toReal(2));\n        \n        // Eccentricity is ratio of difference and sum\n        realEccentricity = RealMath.div(realApoapsis - realPeriapsis, realApoapsis + realPeriapsis);\n    }\n    \n    // Define the orbital plane\n    \n    /**\n     * Get the longitude of the ascending node for a planet or moon. For\n     * planets, this is the angle from system +X to ascending node. For\n     * moons, we use system +X transformed into the planet's equatorial plane\n     * by the equatorial plane/rotation axis angles.\n     */ \n    function getWorldLan(bytes32 seed) public pure returns (int128) {\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"LAN\");\n        // Angles should be uniform from 0 to 2 PI\n        return node.getRealBetween(RealMath.toReal(0), RealMath.mul(RealMath.toReal(2), REAL_PI));\n    }\n    \n    /**\n     * Get the inclination (angle from system XZ plane to orbital plane at the ascending node) for a planet.\n     * For a moon, this is done in the moon generator instead.\n     * Inclination is always positive. If it were negative, the ascending node would really be the descending node.\n     * Result is a real in radians.\n     */ \n    function getPlanetInclination(bytes32 seed, Macroverse.WorldClass class) public pure returns (int128) {\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"inclination\");\n    \n        // Define minimum and maximum inclinations in milliradians\n        // 175 milliradians = ~ 10 degrees\n        int88 minimum;\n        int88 maximum;\n        if (class == Macroverse.WorldClass.Lunar || class == Macroverse.WorldClass.Europan) {\n            minimum = 0;\n            maximum = 175;\n        } else if (class == Macroverse.WorldClass.Terrestrial || class == Macroverse.WorldClass.Panthalassic) {\n            minimum = 0;\n            maximum = 87;\n        } else if (class == Macroverse.WorldClass.Neptunian) {\n            minimum = 0;\n            maximum = 35;\n        } else if (class == Macroverse.WorldClass.Jovian) {\n            minimum = 0;\n            maximum = 52;\n        } else if (class == Macroverse.WorldClass.AsteroidBelt) {\n            minimum = 0;\n            maximum = 262;\n        } else {\n            // Not real!\n            revert();\n        }\n        \n        // Decide if we should be retrograde (PI-ish inclination)\n        int128 real_retrograde_offset = 0;\n        if (node.derive(\"retrograde\").d(1, 100, 0) < 3) {\n            // This planet ought to move retrograde\n            real_retrograde_offset = REAL_PI;\n        }\n\n        return real_retrograde_offset + RealMath.div(node.getRealBetween(RealMath.toReal(minimum), RealMath.toReal(maximum)), RealMath.toReal(1000));    \n    }\n    \n    // Define the orbit's embedding in the plane (and in time)\n    \n    /**\n     * Get the argument of periapsis (angle from ascending node to periapsis position, in the orbital plane) for a planet or moon.\n     */\n    function getWorldAop(bytes32 seed) public pure returns (int128) {\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"AOP\");\n        // Angles should be uniform from 0 to 2 PI.\n        // We already made sure planets/moons wouldn't get too close together when laying out the orbits.\n        return node.getRealBetween(RealMath.toReal(0), RealMath.mul(RealMath.toReal(2), REAL_PI));\n    }\n    \n    /**\n     * Get the mean anomaly (which sweeps from 0 at periapsis to 2 pi at the next periapsis) at epoch (time 0) for a planet or moon.\n     */\n    function getWorldMeanAnomalyAtEpoch(bytes32 seed) public pure returns (int128) {\n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"MAE\");\n        // Angles should be uniform from 0 to 2 PI.\n        return node.getRealBetween(RealMath.toReal(0), RealMath.mul(RealMath.toReal(2), REAL_PI));\n    }\n\n    /**\n     * Determine if the world is tidally locked, given its seed and its number\n     * out from the parent, starting with 0.\n     * Overrides getWorldZXAxisAngles and getWorldSpinRate. \n     * Not used for asteroid belts or rings.\n     */\n    function isTidallyLocked(bytes32 seed, uint16 worldNumber) public pure returns (bool) {\n        // Tidal lock should be common near the parent and less common further out.\n        return RNG.RandNode(seed).derive(\"tidal_lock\").getReal() < RealMath.fraction(1, int88(worldNumber + 1));\n    }\n\n    /**\n     * Get the Y and X axis angles for a world, in radians.\n     * The world's rotation axis starts straight up in its orbital plane.\n     * Then the planet is rotated in Y, around the axis by the Y angle.\n     * Then it is rotated forward (what would be toward the pureer) in the\n     * world's transformed X by the X axis angle.\n     * Both angles are in radians.\n     * The X angle is never negative, because the Y angle would just be the opposite direction.\n     * It is also never greater than Pi, because otherwise we would just measure around the other way.\n     * Not used for asteroid belts or rings.\n     * For a tidally locked world, ignore these values and use 0 for both angles.\n     */\n    function getWorldYXAxisAngles(bytes32 seed) public pure returns (int128 realYRadians, int128 realXRadians) {\n       \n        // The Y angle should be uniform over all angles.\n        realYRadians = RNG.RandNode(seed).derive(\"axisy\").getRealBetween(-REAL_PI, REAL_PI);\n\n        // The X angle will be mostly small positive or negative, with some sideways and some near Pi/2 (meaning retrograde rotation)\n        int16 tilt_die = RNG.RandNode(seed).derive(\"tilt\").d(1, 6, 0);\n        \n        // Start with low tilt, right side up\n        // Earth is like 0.38 radians overall\n        int128 real_tilt_limit = REAL_HALF;\n        if (tilt_die >= 5) {\n            // Be high tilt\n            real_tilt_limit = REAL_HALF_PI;\n        }\n    \n        RNG.RandNode memory x_node = RNG.RandNode(seed).derive(\"axisx\");\n        realXRadians = x_node.getRealBetween(0, real_tilt_limit);\n\n        if (tilt_die == 4 || tilt_die == 5) {\n            // Flip so the tilt we have is relative to upside-down\n            realXRadians = REAL_PI - realXRadians;\n        }\n\n        // So we should have 1/2 low tilt prograde, 1/6 low tilt retrograde, 1/6 high tilt retrograde, and 1/6 high tilt prograde\n    }\n\n    /**\n     * Get the spin rate of the world in radians per Julian year around its axis.\n     * For a tidally locked world, ignore this value and use the mean angular\n     * motion computed by the OrbitalMechanics contract, given the orbit\n     * details.\n     * Not used for asteroid belts or rings.\n     */\n    function getWorldSpinRate(bytes32 seed) public pure returns (int128) {\n        // Earth is something like 2k radians per Julian year.\n        return RNG.RandNode(seed).derive(\"spin\").getRealBetween(REAL_ZERO, RealMath.toReal(8000)); \n    }\n\n}\n\n// This code is part of Macroverse and is licensed: UNLICENSED\n\n/**\n * Represents a Macroverse generator for planetary systems around stars and\n * other stellar objects.\n *\n * Because of contract size limitations, some code in this contract is shared\n * between planets and moons, while some code is planet-specific. Moon-specific\n * code lives in the MacroverseMoonGenerator.\n *\n * Permission to call methods on this contract is regulated by a configurable\n * AccessControl contract. One such set of terms might be to require that the\n * account initiating a transaction have a certain minimum MRV token balance.\n *\n * The owner of this contract reserves the right to supersede it with a new\n * version, and to modify the terms for accessing this contract, at any time,\n * for any reason, and without notice. This includes the right to indefinitely\n * or permanently suspend or terminate access to this contract for any person,\n * account, or other contract, or for all persons, accounts, or other\n * contracts. The owner also reserves the right to not do any of the above.\n */\ncontract MacroverseSystemGenerator is ControlledAccess {\n    \n\n    /**\n     * Deploy a new copy of the MacroverseSystemGenerator.\n     */\n    constructor(address accessControlAddress) ControlledAccess(accessControlAddress) public {\n        // Nothing to do!\n    }\n    \n    /**\n     * Get the seed for a planet or moon from the seed for its parent (star or planet) and its child number.\n     */\n    function getWorldSeed(bytes32 parentSeed, uint16 childNumber) public view onlyControlledAccess returns (bytes32) {\n        return MacroverseSystemGeneratorPart1.getWorldSeed(parentSeed, childNumber);\n    }\n    \n    /**\n     * Decide what kind of planet a given planet is.\n     * It depends on its place in the order.\n     * Takes the *planet*'s seed, its number, and the total planets in the system.\n     */\n    function getPlanetClass(bytes32 seed, uint16 planetNumber, uint16 totalPlanets) public view onlyControlledAccess returns (Macroverse.WorldClass) {\n        return MacroverseSystemGeneratorPart1.getPlanetClass(seed, planetNumber, totalPlanets);\n    }\n    \n    /**\n     * Decide what the mass of the planet or moon is. We can't do even the mass of\n     * Jupiter in the ~88 bits we have in a real (should we have used int256 as\n     * the backing type?) so we work in Earth masses.\n     *\n     * Also produces the masses for moons.\n     */\n    function getWorldMass(bytes32 seed, Macroverse.WorldClass class) public view onlyControlledAccess returns (int128) {\n        return MacroverseSystemGeneratorPart1.getWorldMass(seed, class);\n    }\n    \n    // Define the orbit shape\n\n    /**\n     * Given the parent star's habitable zone bounds, the planet seed, the planet class\n     * to be generated, and the \"clearance\" radius around the previous planet\n     * in meters, produces orbit statistics (periapsis, apoapsis, and\n     * clearance) in meters.\n     *\n     * The first planet uses a previous clearance of 0.\n     *\n     * TODO: realOuterRadius from the habitable zone never gets used. We should remove it.\n     */\n    function getPlanetOrbitDimensions(int128 realInnerRadius, int128 realOuterRadius, bytes32 seed, Macroverse.WorldClass class, int128 realPrevClearance)\n        public view onlyControlledAccess returns (int128 realPeriapsis, int128 realApoapsis, int128 realClearance) {\n        \n        return MacroverseSystemGeneratorPart1.getPlanetOrbitDimensions(realInnerRadius, realOuterRadius, seed, class, realPrevClearance);\n    }\n\n    /**\n     * Convert from periapsis and apoapsis to semimajor axis and eccentricity.\n     */\n    function convertOrbitShape(int128 realPeriapsis, int128 realApoapsis) public view onlyControlledAccess returns (int128 realSemimajor, int128 realEccentricity) {\n        return MacroverseSystemGeneratorPart2.convertOrbitShape(realPeriapsis, realApoapsis);\n    }\n    \n    // Define the orbital plane\n    \n    /**\n     * Get the longitude of the ascending node for a planet or moon. For\n     * planets, this is the angle from system +X to ascending node. For\n     * moons, we use system +X transformed into the planet's equatorial plane\n     * by the equatorial plane/rotation axis angles.\n     */ \n    function getWorldLan(bytes32 seed) public view onlyControlledAccess returns (int128) {\n        return MacroverseSystemGeneratorPart2.getWorldLan(seed);\n    }\n    \n    /**\n     * Get the inclination (angle from system XZ plane to orbital plane at the ascending node) for a planet.\n     * For a moon, this is done in the moon generator instead.\n     * Inclination is always positive. If it were negative, the ascending node would really be the descending node.\n     * Result is a real in radians.\n     */ \n    function getPlanetInclination(bytes32 seed, Macroverse.WorldClass class) public view onlyControlledAccess returns (int128) {\n        return MacroverseSystemGeneratorPart2.getPlanetInclination(seed, class);\n    }\n    \n    // Define the orbit's embedding in the plane (and in time)\n    \n    /**\n     * Get the argument of periapsis (angle from ascending node to periapsis position, in the orbital plane) for a planet or moon.\n     */\n    function getWorldAop(bytes32 seed) public view onlyControlledAccess returns (int128) {\n        return MacroverseSystemGeneratorPart2.getWorldAop(seed);\n    }\n    \n    /**\n     * Get the mean anomaly (which sweeps from 0 at periapsis to 2 pi at the next periapsis) at epoch (time 0) for a planet or moon.\n     */\n    function getWorldMeanAnomalyAtEpoch(bytes32 seed) public view onlyControlledAccess returns (int128) {\n        return MacroverseSystemGeneratorPart2.getWorldMeanAnomalyAtEpoch(seed);\n    }\n\n    /**\n     * Determine if the world is tidally locked, given its seed and its number\n     * out from the parent, starting with 0.\n     * Overrides getWorldZXAxisAngles and getWorldSpinRate. \n     * Not used for asteroid belts or rings.\n     */\n    function isTidallyLocked(bytes32 seed, uint16 worldNumber) public view onlyControlledAccess returns (bool) {\n        return MacroverseSystemGeneratorPart2.isTidallyLocked(seed, worldNumber);\n    }\n\n    /**\n     * Get the Y and X axis angles for a world, in radians.\n     * The world's rotation axis starts straight up in its orbital plane.\n     * Then the planet is rotated in Y, around the axis by the Y angle.\n     * Then it is rotated forward (what would be toward the viewer) in the\n     * world's transformed X by the X axis angle.\n     * Both angles are in radians.\n     * The X angle is never negative, because the Y angle would just be the opposite direction.\n     * It is also never greater than Pi, because otherwise we would just measure around the other way.\n     * Not used for asteroid belts or rings.\n     * For a tidally locked world, ignore these values and use 0 for both angles.\n     */\n    function getWorldYXAxisAngles(bytes32 seed) public view onlyControlledAccess returns (int128 realYRadians, int128 realXRadians) {\n        return MacroverseSystemGeneratorPart2.getWorldYXAxisAngles(seed); \n    }\n\n    /**\n     * Get the spin rate of the world in radians per Julian year around its axis.\n     * For a tidally locked world, ignore this value and use the mean angular\n     * motion computed by the OrbitalMechanics contract, given the orbit\n     * details.\n     * Not used for asteroid belts or rings.\n     */\n    function getWorldSpinRate(bytes32 seed) public view onlyControlledAccess returns (int128) {\n        return MacroverseSystemGeneratorPart2.getWorldSpinRate(seed);\n    }\n\n}\n\n// This code is part of Macroverse and is licensed: UNLICENSED\n\n/**\n * Represents a Macroverse generator for moons around planets.\n *\n * Not part of the system generator to keep it from going over the contract\n * size limit.\n *\n * Permission to call methods on this contract is regulated by a configurable\n * AccessControl contract. One such set of terms might be to require that the\n * account initiating a transaction have a certain minimum MRV token balance.\n *\n * The owner of this contract reserves the right to supersede it with a new\n * version, and to modify the terms for accessing this contract, at any time,\n * for any reason, and without notice. This includes the right to indefinitely\n * or permanently suspend or terminate access to this contract for any person,\n * account, or other contract, or for all persons, accounts, or other\n * contracts. The owner also reserves the right to not do any of the above.\n */\ncontract MacroverseMoonGenerator is ControlledAccess {\n    // TODO: RNG doesn't get linked against because we can't pass the struct to the library...\n    using RNG for *;\n    using RealMath for *;\n    // No SafeMath or it might confuse RealMath\n\n    /**@dev\n     * It is useful to have Pi around.\n     * We can't pull it in from the library.\n     */\n    int128 constant REAL_PI = 3454217652358;\n\n    /**@dev\n     * How many fractional bits are there?\n     */\n    int256 constant REAL_FBITS = 40;\n\n    /**@dev\n     * What's the first non-fractional bit\n     */\n    int128 constant REAL_ONE = int128(1) << int128(REAL_FBITS);\n    \n    /**@dev\n     * What's the last fractional bit?\n     */\n    int128 constant REAL_HALF = REAL_ONE >> 1;\n    \n    /**@dev\n     * What's two? Two is pretty useful.\n     */\n    int128 constant REAL_TWO = REAL_ONE << int128(1);\n\n    /**@dev\n     * For having moons, we need to be able to run the orbit calculations (all\n     * specified in solar masses for the central mass) on\n     * Earth-mass-denominated planet masses.\n     * See the \"Equivalent Planetary masses\" table at https://en.wikipedia.org/wiki/Astronomical_system_of_units\n     */\n    int256 constant EARTH_MASSES_PER_SOLAR_MASS = 332950;\n\n    /**@dev\n     * We define the number of earth masses per solar mass as a real, so we don't have to convert it always.\n     */\n    int128 constant REAL_EARTH_MASSES_PER_SOLAR_MASS = int128(EARTH_MASSES_PER_SOLAR_MASS) * REAL_ONE; \n\n    /**@dev\n     * We also keep a \"stowage factor\" for planetary material in m^3 per earth mass, at water density, for\n     * faking planetary radii during moon orbit calculations.\n     */\n    int128 constant REAL_M3_PER_EARTH = 6566501804087548000000000000000000; // 6.566501804087548E33 as an int, 5.97219E21 m^3/earth\n\n    /**\n     * Deploy a new copy of the MacroverseMoonGenerator.\n     */\n    constructor(address accessControlAddress) ControlledAccess(accessControlAddress) public {\n        // Nothing to do!\n    }\n\n    /**\n     * Get the number of moons a planet has, using its class. Will sometimes return 0; there is no hasMoons boolean flag to check.\n     * The seed of each moon is obtained from the MacroverseSystemGenerator.\n     */\n    function getPlanetMoonCount(bytes32 planetSeed, Macroverse.WorldClass class) public view onlyControlledAccess returns (uint16) {\n        // We will roll n of this kind of die and subtract n to get our moon count\n        int8 die;\n        int8 n = 2;\n        // We can also divide by this\n        int8 divisor = 1;\n\n        if (class == Macroverse.WorldClass.Lunar || class == Macroverse.WorldClass.Europan) {\n            die = 2;\n            divisor = 2;\n            // (2d2 - 2) / 2 = 25% chance of 1, 75% chance of 0\n        } else if (class == Macroverse.WorldClass.Terrestrial || class == Macroverse.WorldClass.Panthalassic) {\n            die = 3;\n            // 2d3-2: https://www.wolframalpha.com/input/?i=roll+2d3\n        } else if (class == Macroverse.WorldClass.Neptunian) {\n            die = 8;\n            n = 2;\n            divisor = 2;\n        } else if (class == Macroverse.WorldClass.Jovian) {\n            die = 6;\n            n = 3;\n            divisor = 2;\n        } else if (class == Macroverse.WorldClass.AsteroidBelt) {\n            // Just no moons here\n            return 0;\n        } else {\n            // Not real!\n            revert();\n        }\n        \n        RNG.RandNode memory node = RNG.RandNode(planetSeed).derive(\"mooncount\");\n\n        uint16 roll = uint16(node.d(n, die, -n) / int88(divisor));\n        \n        return roll;\n    }\n\n    /**\n     * Get the class of a moon, given the moon's seed and the class of its parent planet.\n     * The seed of each moon is obtained from the MacroverseSystemGenerator.\n     * The actual moon body properties (i.e. mass) are generated with the MacroverseSystemGenerator as if it were a planet.\n     */\n    function getMoonClass(Macroverse.WorldClass parent, bytes32 moonSeed, uint16 moonNumber) public view onlyControlledAccess\n        returns (Macroverse.WorldClass) {\n        \n        // We can have moons of smaller classes than us only.\n        // Classes are Asteroidal, Lunar, Terrestrial, Jovian, Cometary, Europan, Panthalassic, Neptunian, Ring, AsteroidBelt\n        // AsteroidBelts never have moons and never are moons.\n        // Asteroidal and Cometary planets only ever are moons.\n        // Moons of the same type (rocky or icy) should be more common than cross-type.\n        // Jovians can have Neptunian moons\n\n        RNG.RandNode memory moonNode = RNG.RandNode(moonSeed);\n\n        if (moonNumber == 0 && moonNode.derive(\"ring\").d(1, 100, 0) < 20) {\n            // This should be a ring\n            return Macroverse.WorldClass.Ring;\n        }\n\n        // Should we be of the opposite ice/rock type to our parent?\n        bool crossType = moonNode.derive(\"crosstype\").d(1, 100, 0) < 30;\n\n        // What type is our parent? 0=rock, 1=ice\n        uint parentType = uint(parent) / 4;\n\n        // What number is the parent in its type? 0=Asteroidal/Cometary, 3=Jovian/Neptunian\n        // The types happen to be arranged so this works.\n        uint rankInType = uint(parent) % 4;\n\n        if (parent == Macroverse.WorldClass.Jovian && crossType) {\n            // Say we can have the gas giant type (Neptunian)\n            rankInType++;\n        }\n\n        // Roll a lower rank. Bias upward by subtracting 1 instead of 2, so we more or less round up.\n        uint lowerRank = uint(moonNode.derive(\"rank\").d(2, int8(rankInType), -1) / 2);\n\n        // Determine the type of the moon (0=rock, 1=ice)\n        uint moonType = crossType ? parentType : (parentType + 1) % 2;\n\n        return Macroverse.WorldClass(moonType * 4 + lowerRank);\n\n    }\n\n    /**\n     * Use the mass of a planet to compute its moon scale distance in AU. This is sort of like the Roche limit and must be bigger than the planet's radius.\n     */\n    function getPlanetMoonScale(bytes32 planetSeed, int128 planetRealMass) public view onlyControlledAccess returns (int128) {\n        // We assume a fictional inverse density of 1 cm^3/g = 5.9721986E21 cubic meters per earth mass\n        // Then we take cube root of volume / (4/3 pi) to get the radius of such a body\n        // Then we derive the scale factor from a few times that.\n\n        RNG.RandNode memory node = RNG.RandNode(planetSeed).derive(\"moonscale\");\n\n        // Get the volume. We can definitely hold Jupiter's volume in m^3\n        int128 realVolume = planetRealMass.mul(REAL_M3_PER_EARTH);\n        \n        // Get the radius in meters\n        int128 realRadius = realVolume.div(REAL_PI.mul(RealMath.fraction(4, 3))).pow(RealMath.fraction(1, 3));\n\n        // Return some useful, randomized multiple of it.\n        return realRadius.mul(node.getRealBetween(RealMath.fraction(5, 2), RealMath.fraction(7, 2)));\n    }\n\n    /**\n     * Given the parent planet's scale radius, a moon's seed, the moon's class, and the previous moon's outer clearance (or 0), return the orbit shape of the moon.\n     * Other orbit properties come from the system generator.\n     */\n    function getMoonOrbitDimensions(int128 planetMoonScale, bytes32 seed, Macroverse.WorldClass class, int128 realPrevClearance)\n        public view onlyControlledAccess returns (int128 realPeriapsis, int128 realApoapsis, int128 realClearance) {\n\n        RNG.RandNode memory moonNode = RNG.RandNode(seed);\n\n        if (class == Macroverse.WorldClass.Ring) {\n            // Rings are special\n            realPeriapsis = realPrevClearance + planetMoonScale.mul(REAL_HALF).mul(moonNode.derive(\"ringstart\").getRealBetween(REAL_ONE, REAL_TWO));\n            realApoapsis = realPeriapsis + realPeriapsis.mul(moonNode.derive(\"ringwidth\").getRealBetween(REAL_HALF, REAL_TWO));\n            realClearance = realApoapsis + planetMoonScale.mul(REAL_HALF).mul(moonNode.derive(\"ringclear\").getRealBetween(REAL_HALF, REAL_TWO));\n        } else {\n            // Otherwise just roll some stuff\n            realPeriapsis = realPrevClearance + planetMoonScale.mul(moonNode.derive(\"periapsis\").getRealBetween(REAL_HALF, REAL_ONE));\n            realApoapsis = realPeriapsis.mul(moonNode.derive(\"apoapsis\").getRealBetween(REAL_ONE, RealMath.fraction(120, 100)));\n\n            if (class == Macroverse.WorldClass.Asteroidal || class == Macroverse.WorldClass.Cometary) {\n                // Captured tiny things should be more eccentric\n                realApoapsis = realApoapsis + (realApoapsis - realPeriapsis).mul(REAL_TWO);\n            }\n\n            realClearance = realApoapsis.mul(moonNode.derive(\"clearance\").getRealBetween(RealMath.fraction(110, 100), RealMath.fraction(130, 100)));\n        }\n    }\n\n    /**\n     * Get the inclination (angle from parent body's equatorial plane to orbital plane at the ascending node) for a moon.\n     * Inclination is always positive. If it were negative, the ascending node would really be the descending node.\n     * Result is a real in radians.\n     */ \n    function getMoonInclination(bytes32 seed, Macroverse.WorldClass class) public view onlyControlledAccess returns (int128 real_inclination) {\n        \n        RNG.RandNode memory node = RNG.RandNode(seed).derive(\"inclination\");\n\n        // Define maximum inclination in milliradians\n        // 175 milliradians = ~ 10 degrees\n        int88 maximum;\n        if (class == Macroverse.WorldClass.Asteroidal || class == Macroverse.WorldClass.Cometary) {\n            // Tiny captured things can be pretty free\n            maximum = 850;\n        } else if (class == Macroverse.WorldClass.Lunar || class == Macroverse.WorldClass.Europan) {\n            maximum = 100;\n        } else if (class == Macroverse.WorldClass.Terrestrial || class == Macroverse.WorldClass.Panthalassic) {\n            maximum = 80;\n        } else if (class == Macroverse.WorldClass.Neptunian) {\n            maximum = 50;\n        } else if (class == Macroverse.WorldClass.Ring) {\n            maximum = 350;\n        } else {\n            // Not real!\n            revert();\n        }\n        \n        // Compute the inclination\n        real_inclination = node.getRealBetween(0, RealMath.toReal(maximum)).div(RealMath.toReal(1000));\n\n        if (node.derive(\"retrograde\").d(1, 100, 0) < 10) {\n            // This moon ought to move retrograde (subtract inclination from pi instead of adding it to 0)\n            real_inclination = REAL_PI - real_inclination;\n        }\n\n        return real_inclination;  \n    }\n}\n\n// This code is part of Macroverse and is licensed: UNLICENSED","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccessControl\",\"type\":\"address\"}],\"name\":\"changeAccessControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Macroverse.WorldClass\",\"name\":\"parent\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"moonSeed\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"moonNumber\",\"type\":\"uint16\"}],\"name\":\"getMoonClass\",\"outputs\":[{\"internalType\":\"enum Macroverse.WorldClass\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"enum Macroverse.WorldClass\",\"name\":\"class\",\"type\":\"uint8\"}],\"name\":\"getMoonInclination\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"real_inclination\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"planetMoonScale\",\"type\":\"int128\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"enum Macroverse.WorldClass\",\"name\":\"class\",\"type\":\"uint8\"},{\"internalType\":\"int128\",\"name\":\"realPrevClearance\",\"type\":\"int128\"}],\"name\":\"getMoonOrbitDimensions\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"realPeriapsis\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"realApoapsis\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"realClearance\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"planetSeed\",\"type\":\"bytes32\"},{\"internalType\":\"enum Macroverse.WorldClass\",\"name\":\"class\",\"type\":\"uint8\"}],\"name\":\"getPlanetMoonCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"planetSeed\",\"type\":\"bytes32\"},{\"internalType\":\"int128\",\"name\":\"planetRealMass\",\"type\":\"int128\"}],\"name\":\"getPlanetMoonScale\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MacroverseMoonGenerator","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000074e43a8b712fef9f3387bfc2f7c5017b51fd8813","EVMVersion":"Default","Library":"RealMath:547abddbc2ca50edd8832b8bb1fe1b6ee2d6cad7","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}