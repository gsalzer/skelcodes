{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/GenesisSC.sol\r\n\r\npragma solidity ^0.5.15;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GenesisSC is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n    using Address for address;\r\n\r\n    enum States{Initializing, Staking, Validating, Finalized, Retired}\r\n\r\n    // EVENTS\r\n    event StakeDeposited(address indexed account, uint256 amount);\r\n    event StakeWithdrawn(address indexed account, uint256 amount);\r\n    event StateChanged(States fromState, States toState);\r\n\r\n    // STRUCT DECLARATIONS\r\n    struct StakingNode {\r\n        bytes32 blsKeyHash;\r\n        bytes32 elrondAddressHash;\r\n        bool approved;\r\n        bool exists;\r\n    }\r\n\r\n    struct WhitelistedAccount {\r\n        uint256 numberOfNodes;\r\n        uint256 amountStaked;\r\n        StakingNode[] stakingNodes;\r\n        bool exists;\r\n        mapping(bytes32 => uint256) blsKeyHashToStakingNodeIndex;\r\n    }\r\n\r\n    struct DelegationDeposit {\r\n        uint256 amount;\r\n        bytes32 elrondAddressHash;\r\n        bool exists;\r\n    }\r\n\r\n    // CONTRACT STATE VARIABLES\r\n    uint256 public nodePrice;\r\n    uint256 public delegationNodesLimit;\r\n    uint256 public delegationAmountLimit;\r\n    uint256 public currentTotalDelegated;\r\n    address[] private _whitelistedAccountAddresses;\r\n\r\n    ERC20Burnable public token;\r\n    States public contractState = States.Initializing;\r\n\r\n    mapping(address => WhitelistedAccount) private _whitelistedAccounts;\r\n    mapping(address => DelegationDeposit) private _delegationDeposits;\r\n    mapping (bytes32 => bool) private _approvedBlsKeyHashes;\r\n\r\n    // MODIFIERS\r\n    modifier onlyContract(address account)\r\n    {\r\n        require(account.isContract(), \"[Validation] The address does not contain a contract\");\r\n        _;\r\n    }\r\n\r\n    modifier guardMaxDelegationLimit(uint256 amount)\r\n    {\r\n        require(amount <= (delegationAmountLimit - currentTotalDelegated), \"[DepositDelegateStake] Your deposit would exceed the delegation limit\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelistedAccounts(address who)\r\n    {\r\n        WhitelistedAccount memory account = _whitelistedAccounts[who];\r\n        require(account.exists, \"[Validation] The provided address is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAccountsWithNodes()\r\n    {\r\n        require(_whitelistedAccounts[msg.sender].stakingNodes.length > 0, \"[Validation] Your account has 0 nodes submitted\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotWhitelistedAccounts(address who)\r\n    {\r\n        WhitelistedAccount memory account = _whitelistedAccounts[who];\r\n        require(!account.exists, \"[Validation] Address is already whitelisted\");\r\n        _;\r\n    }\r\n\r\n    // STATE GUARD MODIFIERS\r\n    modifier whenStaking()\r\n    {\r\n        require(contractState == States.Staking, \"[Validation] This function can be called only when contract is in staking phase\");\r\n        _;\r\n    }\r\n\r\n    modifier whenInitializedAndNotValidating()\r\n    {\r\n        require(contractState != States.Initializing, \"[Validation] This function cannot be called in the initialization phase\");\r\n        require(contractState != States.Validating, \"[Validation] This function cannot be called while your submitted nodes are in the validation process\");\r\n        _;\r\n    }\r\n\r\n    modifier whenFinalized()\r\n    {\r\n        require(contractState == States.Finalized, \"[Validation] This function can be called only when the contract is finalized\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotFinalized()\r\n    {\r\n        require(contractState != States.Finalized, \"[Validation] This function cannot be called when the contract is finalized\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotRetired()\r\n    {\r\n        require(contractState != States.Retired, \"[Validation] This function cannot be called when the contract is retired\");\r\n        _;\r\n    }\r\n\r\n    modifier whenRetired()\r\n    {\r\n        require(contractState == States.Retired, \"[Validation] This function can be called only when the contract is retired\");\r\n        _;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    constructor(ERC20Burnable _token, uint256 _nodePrice, uint256 _delegationNodesLimit)\r\n    public\r\n    {\r\n        require(_nodePrice > 0, \"[Validation] Node price must be greater than 0\");\r\n\r\n        token = _token;\r\n        nodePrice = _nodePrice;\r\n        delegationNodesLimit = _delegationNodesLimit;\r\n        delegationAmountLimit = _delegationNodesLimit.mul(_nodePrice);\r\n    }\r\n\r\n    /**\r\n    * submitStake can be called in the staking phase by any account that has been previously whitelisted by the Elrond\r\n    *  team. An account can submit hashes of BLS keys to this contract (in a number that adds up to less or equal than\r\n    *  what has been set up for that account) and an associated reward address hash for them. The total amount of ERD\r\n    *  tokens that will be transferred from that account will be fixed to nrOfSubmittedNodes*nodePrice\r\n    *\r\n    * @param blsKeyHashes A list where each element represents the hash of an Elrond's native node public key\r\n    * @param elrondAddressHash Represents the hash of an Elrond's native wallet address\r\n    */\r\n    function submitStake(bytes32[] calldata blsKeyHashes, bytes32 elrondAddressHash)\r\n    external\r\n    whenStaking\r\n    onlyWhitelistedAccounts(msg.sender)\r\n    {\r\n        require(elrondAddressHash != 0, \"[Validation] Elrond address hash should not be 0\");\r\n\r\n        WhitelistedAccount storage whitelistedAccount = _whitelistedAccounts[msg.sender];\r\n        _validateStakeParameters(whitelistedAccount, blsKeyHashes);\r\n        _addStakingNodes(whitelistedAccount, blsKeyHashes, elrondAddressHash);\r\n\r\n        uint256 transferAmount = nodePrice.mul(blsKeyHashes.length);\r\n        require(token.transferFrom(msg.sender, address(this), transferAmount));\r\n\r\n        whitelistedAccount.amountStaked = whitelistedAccount.amountStaked.add(transferAmount);\r\n\r\n        emit StakeDeposited(msg.sender, transferAmount);\r\n    }\r\n\r\n    /**\r\n    * withdraw can be called by any account that has been whitelisted and has submitted BLS key hashes for their nodes\r\n    *  and implicitly ERD tokens as staking value for them. This function will withdraw all associated tokens for\r\n    *  nodes that have not been validated off-chain and approved by the Elrond team. If an account wants to give up\r\n    *  and withdraw tokens for an already approved node (if the phase the contract is in still permits it), he/she\r\n    *  can use withdrawPerNodes function\r\n    */\r\n    function withdraw()\r\n    external\r\n    whenInitializedAndNotValidating\r\n    onlyWhitelistedAccounts(msg.sender)\r\n    onlyAccountsWithNodes\r\n    {\r\n        uint256 totalSumToWithdraw;\r\n        WhitelistedAccount storage account = _whitelistedAccounts[msg.sender];\r\n\r\n        uint256 length = account.stakingNodes.length - 1;\r\n        for (uint256 i = length; i <= length; i--) {\r\n            StakingNode storage stakingNode = account.stakingNodes[i];\r\n            if ((!stakingNode.exists) || (stakingNode.approved)) {\r\n                continue;\r\n            }\r\n\r\n            totalSumToWithdraw = totalSumToWithdraw.add(nodePrice);\r\n\r\n            _removeStakingNode(account, stakingNode.blsKeyHash);\r\n        }\r\n\r\n        if (totalSumToWithdraw == 0) {\r\n            emit StakeWithdrawn(msg.sender, 0);\r\n            return;\r\n        }\r\n\r\n        account.amountStaked = account.amountStaked.sub(totalSumToWithdraw);\r\n\r\n        require(token.transfer(msg.sender, totalSumToWithdraw));\r\n\r\n        emit StakeWithdrawn(msg.sender, totalSumToWithdraw);\r\n    }\r\n\r\n    /**\r\n    * withdrawPerNodes gives the user the possibility to withdraw funds associated with the provided BLS key hashes.\r\n    *  This function allows withdrawal also for nodes that were approved by the Elrond team, with the mention that\r\n    *  it should happen before the contract gets in the finalized or retired state (meaning the genesis of the Elrond blockchain\r\n    *  is established and those tokens will be minted on the main chain)\r\n    *\r\n    * @param blsKeyHashes A list where each element represents the hash of an Elrond's native node public key\r\n    */\r\n    function withdrawPerNodes(bytes32[] calldata blsKeyHashes)\r\n    external\r\n    whenInitializedAndNotValidating\r\n    onlyWhitelistedAccounts(msg.sender)\r\n    onlyAccountsWithNodes\r\n    {\r\n        require(blsKeyHashes.length > 0, \"[Validation] You must provide at least one BLS key\");\r\n\r\n        WhitelistedAccount storage account = _whitelistedAccounts[msg.sender];\r\n        for (uint256 i; i < blsKeyHashes.length; i++) {\r\n            _validateBlsKeyHashForWithdrawal(account, blsKeyHashes[i]);\r\n            _removeStakingNode(account, blsKeyHashes[i]);\r\n        }\r\n\r\n        uint256 totalSumToWithdraw = nodePrice.mul(blsKeyHashes.length);\r\n        account.amountStaked = account.amountStaked.sub(totalSumToWithdraw);\r\n\r\n        require(token.transfer(msg.sender, totalSumToWithdraw));\r\n\r\n        emit StakeWithdrawn(msg.sender, totalSumToWithdraw);\r\n    }\r\n\r\n    /**\r\n    * depositDelegateStake provides users that were not whitelisted to run nodes at the start of the\r\n    *  Elrond blockchain with the possibility to take part anyway in the genesis of the network\r\n    *  by delegating stake to nodes that will be ran by Elrond. The rewards will be received\r\n    *  by the user according to the Elrond's delegation smart contract in the provided wallet address\r\n    *\r\n    * @param elrondAddressHash The Elrond native address hash where the user wants to receive the rewards\r\n    * @param amount The ERD amount to be staked\r\n    */\r\n    function depositDelegateStake(uint256 amount, bytes32 elrondAddressHash)\r\n    external\r\n    whenStaking\r\n    guardMaxDelegationLimit(amount)\r\n    {\r\n        require(amount > 0, \"[Validation] The stake amount has to be larger than 0\");\r\n        require(!_delegationDeposits[msg.sender].exists, \"[Validation] You already delegated a stake\");\r\n\r\n        _delegationDeposits[msg.sender] = DelegationDeposit(amount, elrondAddressHash, true);\r\n\r\n        currentTotalDelegated = currentTotalDelegated.add(amount);\r\n\r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n\r\n        emit StakeDeposited(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n    * increaseDelegatedAmount lets a user that has already delegated a number of tokens to increase that amount\r\n    *\r\n    * @param amount The ERD amount to be added to the existing stake\r\n    */\r\n    function increaseDelegatedAmount(uint256 amount)\r\n    external\r\n    whenStaking\r\n    guardMaxDelegationLimit(amount)\r\n    {\r\n        require(amount > 0, \"[Validation] The amount has to be larger than 0\");\r\n\r\n        DelegationDeposit storage deposit = _delegationDeposits[msg.sender];\r\n        require(deposit.exists, \"[Validation] You don't have a delegated stake\");\r\n\r\n        deposit.amount = deposit.amount.add(amount);\r\n        currentTotalDelegated = currentTotalDelegated.add(amount);\r\n\r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n\r\n        emit StakeDeposited(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n    * withdrawDelegatedStake lets a user that has already delegated a number of tokens to decrease that amount\r\n    *\r\n    * @param amount The ERD amount to be removed to the existing stake\r\n    */\r\n    function withdrawDelegatedStake(uint256 amount)\r\n    external\r\n    whenStaking\r\n    {\r\n        require(amount > 0, \"[Validation] The withdraw amount has to be larger than 0\");\r\n\r\n        DelegationDeposit storage deposit = _delegationDeposits[msg.sender];\r\n        require(deposit.exists, \"[Validation] You don't have a delegated stake\");\r\n        require(amount <= deposit.amount, \"[Validation] Not enough stake deposit to withdraw\");\r\n\r\n        deposit.amount = deposit.amount.sub(amount);\r\n        currentTotalDelegated = currentTotalDelegated.sub(amount);\r\n        require(token.transfer(msg.sender, amount));\r\n\r\n        emit StakeWithdrawn(msg.sender, amount);\r\n    }\r\n\r\n    // OWNER ONLY FUNCTIONS\r\n\r\n    /**\r\n    * changeStateToStaking allows the owner to change the state of the contract into the staking phase\r\n    */\r\n    function changeStateToStaking()\r\n    external\r\n    onlyOwner\r\n    whenNotRetired\r\n    {\r\n        emit StateChanged(contractState, States.Staking);\r\n        contractState = States.Staking;\r\n    }\r\n\r\n    /**\r\n    * changeStateToValidating allows the owner to change the state of the contract into the validating phase. With the\r\n    *  mention that we can go into validating phase only from the staking phase.\r\n    */\r\n    function changeStateToValidating()\r\n    external\r\n    onlyOwner\r\n    whenStaking\r\n    {\r\n        emit StateChanged(contractState, States.Validating);\r\n        contractState = States.Validating;\r\n    }\r\n\r\n    /**\r\n    * changeStateToFinalized allows the owner to change the state of the contract into the finalized phase\r\n    */\r\n    function changeStateToFinalized()\r\n    external\r\n    onlyOwner\r\n    whenNotRetired\r\n    {\r\n        emit StateChanged(contractState, States.Finalized);\r\n        contractState = States.Finalized;\r\n    }\r\n\r\n    /**\r\n   * changeStateToRetired allows the owner to change the state of the contract into the retired phase.\r\n   *  this can only happen if the contract is finalized - in order to prevent retiring it by mistake,\r\n   *  since there is no turning back from this state\r\n   */\r\n    function changeStateToRetired()\r\n    external\r\n    onlyOwner\r\n    whenFinalized\r\n    {\r\n        emit StateChanged(contractState, States.Retired);\r\n        contractState = States.Retired;\r\n    }\r\n\r\n    /**\r\n    * whitelistAccount allows the owner to whitelist an ethereum address to stake ERD and add nodes to run\r\n    *  on the Elrond blockchain\r\n    */\r\n    function whitelistAccount(address who, uint256 numberOfNodes)\r\n    external\r\n    onlyOwner\r\n    whenNotFinalized\r\n    whenNotRetired\r\n    onlyNotWhitelistedAccounts(who)\r\n    {\r\n        WhitelistedAccount storage whitelistedAccount = _whitelistedAccounts[who];\r\n        whitelistedAccount.numberOfNodes = numberOfNodes;\r\n        whitelistedAccount.exists = true;\r\n\r\n        _whitelistedAccountAddresses.push(who);\r\n    }\r\n\r\n    /**\r\n    * approveBlsKeyHashes gives the owner the possibility to mark some BLS key hashes submitted by an account\r\n    *  as approved after an off-chain validation\r\n    */\r\n    function approveBlsKeyHashes(address who, bytes32[] calldata blsHashes)\r\n    external\r\n    onlyOwner\r\n    whenNotFinalized\r\n    whenNotRetired\r\n    onlyWhitelistedAccounts(who)\r\n    {\r\n        WhitelistedAccount storage whitelistedAccount = _whitelistedAccounts[who];\r\n\r\n        for (uint256 i = 0; i < blsHashes.length; i++) {\r\n            require(_accountHasNode(whitelistedAccount, blsHashes[i]), \"[Validation] BLS key does not exist for this account\");\r\n            require(!_approvedBlsKeyHashes[blsHashes[i]], \"[Validation] Provided BLS key was already approved\");\r\n\r\n            uint256 accountIndex = whitelistedAccount.blsKeyHashToStakingNodeIndex[blsHashes[i]];\r\n            StakingNode storage stakingNode = whitelistedAccount.stakingNodes[accountIndex];\r\n            require(stakingNode.exists, '[Validation] Bls key does not exist for this account');\r\n            stakingNode.approved = true;\r\n            _approvedBlsKeyHashes[blsHashes[i]] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * unapproveBlsKeyHashes the same as approveBlsKeyHashes, but changing the approved flag to false for selected keys\r\n    */\r\n    function unapproveBlsKeyHashes(address who, bytes32[] calldata blsHashes)\r\n    external\r\n    onlyOwner\r\n    whenNotFinalized\r\n    whenNotRetired\r\n    onlyWhitelistedAccounts(who)\r\n    {\r\n        WhitelistedAccount storage whitelistedAccount = _whitelistedAccounts[who];\r\n\r\n        for (uint256 i = 0; i < blsHashes.length; i++) {\r\n            require(_accountHasNode(whitelistedAccount, blsHashes[i]), \"[Validation] BLS key does not exist for this account\");\r\n            require(_approvedBlsKeyHashes[blsHashes[i]], \"[Validation] Provided BLS key was not previously approved\");\r\n\r\n            uint256 accountIndex = whitelistedAccount.blsKeyHashToStakingNodeIndex[blsHashes[i]];\r\n            StakingNode storage stakingNode = whitelistedAccount.stakingNodes[accountIndex];\r\n            require(stakingNode.exists, '[Validation] Bls key does not exist for this account');\r\n            stakingNode.approved = false;\r\n            _approvedBlsKeyHashes[blsHashes[i]] = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * editWhitelistedAccountNumberOfNodes gives the owner the possibility to change the number of nodes a user can\r\n    *  stake for. The number cannot be set lower than the number of nodes the user already submitted\r\n    */\r\n    function editWhitelistedAccountNumberOfNodes(address who, uint256 numberOfNodes)\r\n    external\r\n    onlyOwner\r\n    whenNotFinalized\r\n    whenNotRetired\r\n    onlyWhitelistedAccounts(who)\r\n    {\r\n        WhitelistedAccount storage whitelistedAccount = _whitelistedAccounts[who];\r\n        require(numberOfNodes >= whitelistedAccount.stakingNodes.length, \"[Validation] Whitelisted account already submitted more nodes than you wish to allow\");\r\n\r\n        whitelistedAccount.numberOfNodes = numberOfNodes;\r\n    }\r\n\r\n    /**\r\n    * burnCommittedFunds can be called by the owner after this contract is retired. This function burns the amount\r\n    *  of tokens associated with approved nodes and delegated stake. The equivalent will be minted on the\r\n    *  Elrond blockchain\r\n    */\r\n    function burnCommittedFunds()\r\n    external\r\n    onlyOwner\r\n    whenRetired\r\n    {\r\n        uint256 totalToBurn = currentTotalDelegated;\r\n        for(uint256 i; i < _whitelistedAccountAddresses.length; i++) {\r\n            WhitelistedAccount memory account = _whitelistedAccounts[_whitelistedAccountAddresses[i]];\r\n            if (!account.exists) {\r\n                continue;\r\n            }\r\n\r\n            uint256 approvedNodes = _approvedNodesCount(account);\r\n            totalToBurn = totalToBurn.add(nodePrice.mul(approvedNodes));\r\n        }\r\n\r\n        token.burn(totalToBurn);\r\n    }\r\n\r\n    /**\r\n    * recoverLostFunds helps us recover funds for users that accidentally send tokens directly to this contract\r\n    */\r\n    function recoverLostFunds(address who, uint256 amount)\r\n    external\r\n    onlyOwner\r\n    {\r\n        uint256 currentBalance = token.balanceOf(address(this));\r\n        require(amount <= currentBalance, \"[Validation] Recover amount exceeds contract balance\");\r\n\r\n        uint256 correctDepositAmount = _correctDepositAmount();\r\n        uint256 lostFundsAmount = currentBalance.sub(correctDepositAmount);\r\n        require(amount <= lostFundsAmount, \"[Validation] Recover amount exceeds lost funds amount\");\r\n\r\n        token.transfer(who, amount);\r\n    }\r\n\r\n    // VIEW FUNCTIONS\r\n    function whitelistedAccountAddresses()\r\n    external\r\n    view\r\n    returns (address[] memory, uint256[] memory)\r\n    {\r\n        address[] memory whitelistedAddresses = new address[](_whitelistedAccountAddresses.length);\r\n        uint256[] memory whitelistedAddressesNodes = new uint256[](_whitelistedAccountAddresses.length);\r\n\r\n        for (uint256 i = 0; i < _whitelistedAccountAddresses.length; i++) {\r\n            whitelistedAddresses[i] = _whitelistedAccountAddresses[i];\r\n            WhitelistedAccount storage whitelistedAccount = _whitelistedAccounts[_whitelistedAccountAddresses[i]];\r\n            whitelistedAddressesNodes[i] = whitelistedAccount.numberOfNodes;\r\n\r\n        }\r\n\r\n        return (whitelistedAddresses, whitelistedAddressesNodes);\r\n    }\r\n\r\n    function whitelistedAccount(address who)\r\n    external\r\n    view\r\n    returns (uint256 maxNumberOfNodes, uint256 amountStaked)\r\n    {\r\n        require(_whitelistedAccounts[who].exists, \"[WhitelistedAddress] Address is not whitelisted\");\r\n\r\n        return (_whitelistedAccounts[who].numberOfNodes, _whitelistedAccounts[who].amountStaked);\r\n    }\r\n\r\n    function stakingNodesHashes(address who)\r\n    external\r\n    view\r\n    returns (bytes32[] memory, bool[] memory, bytes32[] memory)\r\n    {\r\n        require(_whitelistedAccounts[who].exists, \"[StakingNodesHashes] Address is not whitelisted\");\r\n\r\n        StakingNode[] memory stakingNodes = _whitelistedAccounts[who].stakingNodes;\r\n        bytes32[] memory blsKeyHashes = new bytes32[](stakingNodes.length);\r\n        bool[] memory blsKeyHashesStatus = new bool[](stakingNodes.length);\r\n        bytes32[] memory rewardAddresses = new bytes32[](stakingNodes.length);\r\n\r\n        for (uint256 i = 0; i < stakingNodes.length; i++) {\r\n            blsKeyHashes[i] = stakingNodes[i].blsKeyHash;\r\n            blsKeyHashesStatus[i] = stakingNodes[i].approved;\r\n            rewardAddresses[i] = stakingNodes[i].elrondAddressHash;\r\n        }\r\n\r\n        return (blsKeyHashes, blsKeyHashesStatus, rewardAddresses);\r\n    }\r\n\r\n    function stakingNodeInfo(address who, bytes32 blsKeyHash)\r\n    external\r\n    view\r\n    returns(bytes32, bool)\r\n    {\r\n        require(_whitelistedAccounts[who].exists, \"[StakingNodeInfo] Address is not whitelisted\");\r\n        require(_accountHasNode(_whitelistedAccounts[who], blsKeyHash), \"[StakingNodeInfo] Address does not have the provided node\");\r\n\r\n        WhitelistedAccount storage account = _whitelistedAccounts[who];\r\n        uint256 nodeIndex = account.blsKeyHashToStakingNodeIndex[blsKeyHash];\r\n        return (account.stakingNodes[nodeIndex].elrondAddressHash, account.stakingNodes[nodeIndex].approved);\r\n    }\r\n\r\n    function delegationDeposit(address who)\r\n    external\r\n    view\r\n    returns (uint256, bytes32)\r\n    {\r\n        return (_delegationDeposits[who].amount, _delegationDeposits[who].elrondAddressHash);\r\n    }\r\n\r\n    function lostFundsAmount()\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 currentBalance = token.balanceOf(address(this));\r\n        uint256 correctDepositAmount = _correctDepositAmount();\r\n\r\n        return currentBalance.sub(correctDepositAmount);\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n    function _addStakingNodes(WhitelistedAccount storage account, bytes32[] memory blsKeyHashes, bytes32 elrondAddressHash)\r\n    internal\r\n    {\r\n        for (uint256 i = 0; i < blsKeyHashes.length; i++) {\r\n            _insertStakingNode(account, blsKeyHashes[i], elrondAddressHash);\r\n        }\r\n    }\r\n\r\n    function _validateStakeParameters(WhitelistedAccount memory account, bytes32[] memory blsKeyHashes)\r\n    internal\r\n    pure\r\n    {\r\n        require(\r\n            account.numberOfNodes >= account.stakingNodes.length + blsKeyHashes.length,\r\n            \"[Validation] Adding this many nodes would exceed the maximum number of allowed nodes per this account\"\r\n        );\r\n    }\r\n\r\n    function _correctDepositAmount()\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 correctDepositAmount = currentTotalDelegated;\r\n        for(uint256 i; i < _whitelistedAccountAddresses.length; i++) {\r\n            WhitelistedAccount memory account = _whitelistedAccounts[_whitelistedAccountAddresses[i]];\r\n            if (!account.exists) {\r\n                continue;\r\n            }\r\n\r\n            correctDepositAmount = correctDepositAmount.add(nodePrice.mul(account.stakingNodes.length));\r\n        }\r\n\r\n        return correctDepositAmount;\r\n    }\r\n\r\n    // StakingNode list manipulation\r\n    function _accountHasNode(WhitelistedAccount storage account, bytes32 blsKeyHash)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        if (account.stakingNodes.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 nodeIndex = account.blsKeyHashToStakingNodeIndex[blsKeyHash];\r\n\r\n        return (account.stakingNodes[nodeIndex].blsKeyHash == blsKeyHash) && account.stakingNodes[nodeIndex].exists;\r\n    }\r\n\r\n    function _approvedNodesCount(WhitelistedAccount memory account)\r\n    internal\r\n    pure\r\n    returns(uint256)\r\n    {\r\n        uint256 nodesCount = 0;\r\n\r\n        for(uint256 i = 0; i < account.stakingNodes.length; i++) {\r\n            if (account.stakingNodes[i].exists && account.stakingNodes[i].approved) {\r\n                nodesCount++;\r\n            }\r\n        }\r\n\r\n        return nodesCount;\r\n    }\r\n\r\n    // Node operations\r\n    function _insertStakingNode(WhitelistedAccount storage account, bytes32 blsKeyHash, bytes32 elrondAddressHash)\r\n    internal\r\n    {\r\n        require(blsKeyHash != 0, \"[Validation] BLS key hash should not be 0\");\r\n        require(!_accountHasNode(account, blsKeyHash), \"[Validation] BLS key was already added for this account\");\r\n\r\n        account.blsKeyHashToStakingNodeIndex[blsKeyHash] = account.stakingNodes.length;\r\n        StakingNode memory newNode = StakingNode(blsKeyHash, elrondAddressHash, false, true);\r\n        account.stakingNodes.push(newNode);\r\n    }\r\n\r\n    function _removeStakingNode(WhitelistedAccount storage account, bytes32 blsKeyHash)\r\n    internal\r\n    {\r\n        uint256 nodeIndex = account.blsKeyHashToStakingNodeIndex[blsKeyHash];\r\n        uint256 lastNodeIndex = account.stakingNodes.length - 1;\r\n\r\n        bool stakingNodeIsApproved = account.stakingNodes[nodeIndex].approved;\r\n\r\n        // It's not the last StakingNode so we replace this one with the last one\r\n        if (nodeIndex != lastNodeIndex) {\r\n            bytes32 lastHash = account.stakingNodes[lastNodeIndex].blsKeyHash;\r\n            account.blsKeyHashToStakingNodeIndex[lastHash] = nodeIndex;\r\n            account.stakingNodes[nodeIndex] = account.stakingNodes[lastNodeIndex];\r\n        }\r\n\r\n        if (stakingNodeIsApproved) {\r\n            delete _approvedBlsKeyHashes[blsKeyHash];\r\n        }\r\n\r\n        account.stakingNodes.pop();\r\n        delete account.blsKeyHashToStakingNodeIndex[blsKeyHash];\r\n    }\r\n\r\n    function _validateBlsKeyHashForWithdrawal(WhitelistedAccount storage account, bytes32 blsKeyHash)\r\n    internal\r\n    view\r\n    {\r\n        require(_accountHasNode(account, blsKeyHash), \"[Validation] BLS key does not exist for this account\");\r\n        if (contractState == States.Finalized || contractState == States.Retired) {\r\n            require(\r\n                !account.stakingNodes[account.blsKeyHashToStakingNodeIndex[blsKeyHash]].approved,\r\n                \"[Validation] BLS key was already approved, you cannot withdraw the associated amount\"\r\n            );\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nodePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationNodesLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum GenesisSC.States\",\"name\":\"fromState\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum GenesisSC.States\",\"name\":\"toState\",\"type\":\"uint8\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"blsHashes\",\"type\":\"bytes32[]\"}],\"name\":\"approveBlsKeyHashes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnCommittedFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeStateToFinalized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeStateToRetired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeStateToStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeStateToValidating\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractState\",\"outputs\":[{\"internalType\":\"enum GenesisSC.States\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTotalDelegated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegationAmountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"delegationDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegationNodesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"elrondAddressHash\",\"type\":\"bytes32\"}],\"name\":\"depositDelegateStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfNodes\",\"type\":\"uint256\"}],\"name\":\"editWhitelistedAccountNumberOfNodes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseDelegatedAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lostFundsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverLostFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"blsKeyHash\",\"type\":\"bytes32\"}],\"name\":\"stakingNodeInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"stakingNodesHashes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"blsKeyHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"elrondAddressHash\",\"type\":\"bytes32\"}],\"name\":\"submitStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"blsHashes\",\"type\":\"bytes32[]\"}],\"name\":\"unapproveBlsKeyHashes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfNodes\",\"type\":\"uint256\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"whitelistedAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxNumberOfNodes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistedAccountAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDelegatedStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"blsKeyHashes\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawPerNodes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GenesisSC","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f9986d445ced31882377b5d6a5f58eaea72288c3000000000000000000000000000000000000000000021165458500521280000000000000000000000000000000000000000000000000000000000000000003ed","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2c8c274d741c32ff6e6352263954daf43f9b9de7b6ea2fb3162ff6dae6ae0a4f"}]}