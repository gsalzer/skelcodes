{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function owner() external view returns (address);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISushiSwapPoolNames {\r\n    function logos(uint256) external view returns(string memory);\r\n    function names(uint256) external view returns(string memory);\r\n    function setPoolInfo(uint256 pid, string memory logo, string memory name) external;\r\n}\r\n\r\ninterface ISushiToken is IERC20{\r\n    function delegates(address who) external view returns(address);\r\n    function getCurrentVotes(address who) external view returns(uint256);\r\n    function nonces(address who) external view returns(uint256);\r\n}\r\n\r\ninterface IMasterChef {\r\n    function BONUS_MULTIPLIER() external view returns (uint256);\r\n    function bonusEndBlock() external view returns (uint256);\r\n    function devaddr() external view returns (address);\r\n    function migrator() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function startBlock() external view returns (uint256);\r\n    function sushi() external view returns (address);\r\n    function sushiPerBlock() external view returns (uint256);\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function poolLength() external view returns (uint256);\r\n    function poolInfo(uint256 nr) external view returns (address, uint256, uint256, uint256);\r\n    function userInfo(uint256 nr, address who) external view returns (uint256, uint256);\r\n    function pendingSushi(uint256 nr, address who) external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function getPair(address token0, address token1) external view returns (address);\r\n}\r\n\r\ninterface IUniswapPair is IERC20 {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112, uint112, uint32);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Underflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Mul Overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"Div by 0\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nstruct BaseInfo {\r\n    uint256 BONUS_MULTIPLIER;\r\n    uint256 bonusEndBlock;\r\n    address devaddr;\r\n    address migrator;\r\n    address owner;\r\n    uint256 startBlock;\r\n    address sushi;\r\n    uint256 sushiPerBlock;\r\n    uint256 totalAllocPoint;\r\n    \r\n    uint256 sushiTotalSupply;\r\n    address sushiOwner;\r\n}\r\n\r\nstruct PoolInfo {\r\n    string logo;\r\n    string name;\r\n    IUniswapPair lpToken;           // Address of LP token contract.\r\n    uint256 allocPoint;       // How many allocation points assigned to this pool. SUSHIs to distribute per block.\r\n    uint256 lastRewardBlock;  // Last block number that SUSHIs distribution occurs.\r\n    uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\r\n    IERC20 token0;\r\n    IERC20 token1;\r\n    string token0name;\r\n    string token1name;\r\n    string token0symbol;\r\n    string token1symbol;\r\n    uint256 token0decimals;\r\n    uint256 token1decimals;\r\n}\r\n\r\nstruct UserInfo {\r\n    uint256 block;\r\n    uint256 timestamp;\r\n    uint256 eth_rate;\r\n    uint256 sushiBalance;\r\n    address delegates;\r\n    uint256 currentVotes;\r\n    uint256 nonces;\r\n}\r\n\r\nstruct UserPoolInfo {\r\n    uint256 lastRewardBlock;  // Last block number that SUSHIs distribution occurs.\r\n    uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\r\n    uint256 balance; // Balance of pool tokens\r\n    uint256 totalSupply; // Token staked lp tokens\r\n    uint256 uniBalance; // Balance of uniswap lp tokens not staked\r\n    uint256 uniTotalSupply; // TotalSupply of uniswap lp tokens\r\n    uint256 uniAllowance; // UniSwap LP tokens approved for masterchef\r\n    uint256 reserve0;\r\n    uint256 reserve1;\r\n    uint256 token0rate;\r\n    uint256 token1rate;\r\n    uint256 rewardDebt;\r\n    uint256 pending; // Pending SUSHI\r\n}\r\n\r\ncontract SushiSwapBaseInfo is Ownable {\r\n    // Mainnet\r\n    ISushiSwapPoolNames names = ISushiSwapPoolNames(0xb373a5def62A907696C0bBd22Dc512e2Fc8cfC7E);\r\n    IMasterChef masterChef = IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\r\n    \r\n    // Ropsten\r\n    //ISushiSwapPoolNames names = ISushiSwapPoolNames(0x7685f4c573cE27C94F6aF70B330C29b9c41B8290);\r\n    //IMasterChef masterChef = IMasterChef(0xFF281cEF43111A83f09C656734Fa03E6375d432A);\r\n    \r\n    function setContracts(address names_, address masterChef_) public onlyOwner {\r\n        names = ISushiSwapPoolNames(names_);\r\n        masterChef = IMasterChef(masterChef_);\r\n    }\r\n\r\n    function getInfo() public view returns(BaseInfo memory, PoolInfo[] memory) {\r\n        BaseInfo memory info;\r\n        info.BONUS_MULTIPLIER = masterChef.BONUS_MULTIPLIER();\r\n        info.bonusEndBlock = masterChef.bonusEndBlock();\r\n        info.devaddr = masterChef.devaddr();\r\n        info.migrator = masterChef.migrator();\r\n        info.owner = masterChef.owner();\r\n        info.startBlock = masterChef.startBlock();\r\n        info.sushi = masterChef.sushi();\r\n        info.sushiPerBlock = masterChef.sushiPerBlock();\r\n        info.totalAllocPoint = masterChef.totalAllocPoint();\r\n        \r\n        info.sushiTotalSupply = IERC20(info.sushi).totalSupply();\r\n        info.sushiOwner = IERC20(info.sushi).owner();\r\n\r\n        uint256 poolLength = masterChef.poolLength();\r\n        PoolInfo[] memory pools = new PoolInfo[](poolLength);\r\n        for (uint256 i = 0; i < poolLength; i++) {\r\n            (address lpToken, uint256 allocPoint, uint256 lastRewardBlock, uint256 accSushiPerShare) = masterChef.poolInfo(i);\r\n            IUniswapPair uniV2 = IUniswapPair(lpToken);\r\n            pools[i].lpToken = uniV2;\r\n            pools[i].allocPoint = allocPoint;\r\n            pools[i].lastRewardBlock = lastRewardBlock;\r\n            pools[i].accSushiPerShare = accSushiPerShare;\r\n            \r\n            IERC20 token0 = IERC20(uniV2.token0());\r\n            pools[i].token0 = token0;\r\n            IERC20 token1 = IERC20(uniV2.token1());\r\n            pools[i].token1 = token1;\r\n            \r\n            pools[i].token0name = token0.name();\r\n            pools[i].token0symbol = token0.symbol();\r\n            pools[i].token0decimals = token0.decimals();\r\n            \r\n            pools[i].token1name = token1.name();\r\n            pools[i].token1symbol = token1.symbol();\r\n            pools[i].token1decimals = token1.decimals();\r\n            \r\n            pools[i].logo = names.logos(i);\r\n            pools[i].name = names.names(i);\r\n        }\r\n        return (info, pools);\r\n    }\r\n}\r\n\r\ncontract SushiSwapUserInfo is Ownable\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    // Ropsten\r\n    IUniswapFactory uniFactory = IUniswapFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IMasterChef masterChef = IMasterChef(0xFF281cEF43111A83f09C656734Fa03E6375d432A);\r\n    ISushiToken sushi = ISushiToken(0x81DB9C598b3ebbdC92426422fc0A1d06E77195ec);\r\n    address WETH = 0x078A84ee7991699DD198B7b95055AEd0C782A6eE;\r\n\r\n    function setContracts(address uniFactory_, address masterChef_, address sushi_, address WETH_) public onlyOwner {\r\n        uniFactory = IUniswapFactory(uniFactory_);\r\n        masterChef = IMasterChef(masterChef_);\r\n        sushi = ISushiToken(sushi_);\r\n        WETH = WETH_;\r\n    }\r\n\r\n    function getETHRate(address token) public view returns(uint256) {\r\n        uint256 eth_rate = 1e18;\r\n        if (token != WETH)\r\n        {\r\n            IUniswapPair pair = IUniswapPair(uniFactory.getPair(token, WETH));\r\n            (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\r\n            if (pair.token0() == WETH) {\r\n                eth_rate = uint256(reserve1).mul(1e18).div(reserve0);\r\n            } else {\r\n                eth_rate = uint256(reserve0).mul(1e18).div(reserve1);\r\n            }\r\n        }\r\n        return eth_rate;\r\n    }\r\n    \r\n    function _getUserInfo(address who, address currency) private view returns(UserInfo memory) {\r\n        UserInfo memory user;\r\n        \r\n        user.block = block.number;\r\n        user.timestamp = block.timestamp;\r\n        user.sushiBalance = sushi.balanceOf(who);\r\n        user.delegates = sushi.delegates(who);\r\n        user.currentVotes = sushi.getCurrentVotes(who);\r\n        user.nonces = sushi.nonces(who);\r\n        user.eth_rate = getETHRate(currency);\r\n        \r\n        return user;\r\n    }\r\n    \r\n    function getUserInfo(address who, address currency) public view returns(UserInfo memory, UserPoolInfo[] memory) {\r\n        uint256 poolLength = masterChef.poolLength();\r\n        UserPoolInfo[] memory pools = new UserPoolInfo[](poolLength);\r\n\r\n        for (uint256 i = 0; i < poolLength; i++) {\r\n            (uint256 amount, uint256 rewardDebt) = masterChef.userInfo(i, who);\r\n            pools[i].balance = amount;\r\n            pools[i].rewardDebt = rewardDebt;\r\n            pools[i].pending = masterChef.pendingSushi(i, who);\r\n\r\n            (address lpToken, , uint256 lastRewardBlock, uint256 accSushiPerShare) = masterChef.poolInfo(i);\r\n            IUniswapPair uniV2 = IUniswapPair(lpToken);\r\n            pools[i].totalSupply = uniV2.balanceOf(address(masterChef));\r\n            pools[i].uniAllowance = uniV2.allowance(who, address(masterChef));\r\n            pools[i].lastRewardBlock = lastRewardBlock;\r\n            pools[i].accSushiPerShare = accSushiPerShare;\r\n            pools[i].uniBalance = uniV2.balanceOf(who);\r\n            pools[i].uniTotalSupply = uniV2.totalSupply();\r\n            pools[i].token0rate = getETHRate(uniV2.token0());\r\n            pools[i].token1rate = getETHRate(uniV2.token1());\r\n            \r\n            (uint112 reserve0, uint112 reserve1,) = uniV2.getReserves();\r\n            pools[i].reserve0 = reserve0;\r\n            pools[i].reserve1 = reserve1;\r\n        }\r\n        return (_getUserInfo(who, currency), pools);\r\n    }\r\n    \r\n    function getMyInfoInUSDT() public view returns(UserInfo memory, UserPoolInfo[] memory) {\r\n        return getUserInfo(msg.sender, 0x292c703A980fbFce4708864Ae6E8C40584DAF323);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"BONUS_MULTIPLIER\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sushi\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sushiOwner\",\"type\":\"address\"}],\"internalType\":\"struct BaseInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IUniswapPair\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token0symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"names_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterChef_\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SushiSwapBaseInfo","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://63f995ed36cec304b187758862e6258c4122afb87d0ba455969934b77c595c66"}]}