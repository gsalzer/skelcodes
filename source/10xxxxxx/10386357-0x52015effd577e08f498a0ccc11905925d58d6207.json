{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\r\n    /// @param _admin Address of multisig that becomes admin\r\n    function setAdminByOwner(address _admin) public {\r\n        require(msg.sender == owner);\r\n        require(admin == address(0));\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function setAdminByAdmin(address _admin) public {\r\n        require(msg.sender == admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function setOwnerByAdmin(address _owner) public {\r\n        require(msg.sender == admin);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(owner).transfer(_amount);\r\n        } else {\r\n            ERC20(_token).safeTransfer(owner, _amount);\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Stores subscription information for Compound automatization\r\ncontract CompoundSubscriptions is AdminAuth {\r\n\r\n    struct CompoundHolder {\r\n        address user;\r\n        uint128 minRatio;\r\n        uint128 maxRatio;\r\n        uint128 optimalRatioBoost;\r\n        uint128 optimalRatioRepay;\r\n        bool boostEnabled;\r\n    }\r\n\r\n    struct SubPosition {\r\n        uint arrPos;\r\n        bool subscribed;\r\n    }\r\n\r\n    CompoundHolder[] public subscribers;\r\n    mapping (address => SubPosition) public subscribersPos;\r\n\r\n    uint public changeIndex;\r\n\r\n    event Subscribed(address indexed user);\r\n    event Unsubscribed(address indexed user);\r\n    event Updated(address indexed user);\r\n    event ParamUpdates(address indexed user, uint128, uint128, uint128, uint128, bool);\r\n\r\n    /// @dev Called by the DSProxy contract which owns the Compound position\r\n    /// @notice Adds the users Compound poistion in the list of subscriptions so it can be monitored\r\n    /// @param _minRatio Minimum ratio below which repay is triggered\r\n    /// @param _maxRatio Maximum ratio after which boost is triggered\r\n    /// @param _optimalBoost Ratio amount which boost should target\r\n    /// @param _optimalRepay Ratio amount which repay should target\r\n    /// @param _boostEnabled Boolean determing if boost is enabled\r\n    function subscribe(uint128 _minRatio, uint128 _maxRatio, uint128 _optimalBoost, uint128 _optimalRepay, bool _boostEnabled) external {\r\n\r\n        // if boost is not enabled, set max ratio to max uint\r\n        uint128 localMaxRatio = _boostEnabled ? _maxRatio : uint128(-1);\r\n        require(checkParams(_minRatio, localMaxRatio), \"Must be correct params\");\r\n\r\n        SubPosition storage subInfo = subscribersPos[msg.sender];\r\n\r\n        CompoundHolder memory subscription = CompoundHolder({\r\n                minRatio: _minRatio,\r\n                maxRatio: localMaxRatio,\r\n                optimalRatioBoost: _optimalBoost,\r\n                optimalRatioRepay: _optimalRepay,\r\n                user: msg.sender,\r\n                boostEnabled: _boostEnabled\r\n            });\r\n\r\n        changeIndex++;\r\n\r\n        if (subInfo.subscribed) {\r\n            subscribers[subInfo.arrPos] = subscription;\r\n\r\n            emit Updated(msg.sender);\r\n            emit ParamUpdates(msg.sender, _minRatio, localMaxRatio, _optimalBoost, _optimalRepay, _boostEnabled);\r\n        } else {\r\n            subscribers.push(subscription);\r\n\r\n            subInfo.arrPos = subscribers.length - 1;\r\n            subInfo.subscribed = true;\r\n\r\n            emit Subscribed(msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @notice Called by the users DSProxy\r\n    /// @dev Owner who subscribed cancels his subscription\r\n    function unsubscribe() external {\r\n        _unsubscribe(msg.sender);\r\n    }\r\n\r\n    /// @dev Checks limit if minRatio is bigger than max\r\n    /// @param _minRatio Minimum ratio, bellow which repay can be triggered\r\n    /// @param _maxRatio Maximum ratio, over which boost can be triggered\r\n    /// @return Returns bool if the params are correct\r\n    function checkParams(uint128 _minRatio, uint128 _maxRatio) internal pure returns (bool) {\r\n\r\n        if (_minRatio > _maxRatio) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Internal method to remove a subscriber from the list\r\n    /// @param _user The actual address that owns the Compound position\r\n    function _unsubscribe(address _user) internal {\r\n        require(subscribers.length > 0, \"Must have subscribers in the list\");\r\n\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        require(subInfo.subscribed, \"Must first be subscribed\");\r\n\r\n        address lastOwner = subscribers[subscribers.length - 1].user;\r\n\r\n        SubPosition storage subInfo2 = subscribersPos[lastOwner];\r\n        subInfo2.arrPos = subInfo.arrPos;\r\n\r\n        subscribers[subInfo.arrPos] = subscribers[subscribers.length - 1];\r\n        subscribers.pop(); // remove last element and reduce arr length\r\n\r\n        changeIndex++;\r\n        subInfo.subscribed = false;\r\n        subInfo.arrPos = 0;\r\n\r\n        emit Unsubscribed(msg.sender);\r\n    }\r\n\r\n    /// @dev Checks if the user is subscribed\r\n    /// @param _user The actual address that owns the Compound position\r\n    /// @return If the user is subscribed\r\n    function isSubscribed(address _user) public view returns (bool) {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        return subInfo.subscribed;\r\n    }\r\n\r\n    /// @dev Returns subscribtion information about a user\r\n    /// @param _user The actual address that owns the Compound position\r\n    /// @return Subscription information about the user if exists\r\n    function getHolder(address _user) public view returns (CompoundHolder memory) {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        return subscribers[subInfo.arrPos];\r\n    }\r\n\r\n    /// @notice Helper method to return all the subscribed CDPs\r\n    /// @return List of all subscribers\r\n    function getSubscribers() public view returns (CompoundHolder[] memory) {\r\n        return subscribers;\r\n    }\r\n\r\n    /// @notice Helper method for the frontend, returns all the subscribed CDPs paginated\r\n    /// @param _page What page of subscribers you want\r\n    /// @param _perPage Number of entries per page\r\n    /// @return List of all subscribers for that page\r\n    function getSubscribersByPage(uint _page, uint _perPage) public view returns (CompoundHolder[] memory) {\r\n        CompoundHolder[] memory holders = new CompoundHolder[](_perPage);\r\n\r\n        uint start = _page * _perPage;\r\n        uint end = start + _perPage;\r\n\r\n        end = (end > holders.length) ? holders.length : end;\r\n\r\n        uint count = 0;\r\n        for (uint i = start; i < end; i++) {\r\n            holders[count] = subscribers[i];\r\n            count++;\r\n        }\r\n\r\n        return holders;\r\n    }\r\n\r\n    ////////////// ADMIN METHODS ///////////////////\r\n\r\n    /// @notice Admin function to unsubscribe a CDP\r\n    /// @param _user The actual address that owns the Compound position\r\n    function unsubscribeByAdmin(address _user) public onlyOwner {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        if (subInfo.subscribed) {\r\n            _unsubscribe(_user);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"ParamUpdates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Unsubscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHolder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct CompoundSubscriptions.CompoundHolder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscribers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct CompoundSubscriptions.CompoundHolder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perPage\",\"type\":\"uint256\"}],\"name\":\"getSubscribersByPage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct CompoundSubscriptions.CompoundHolder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isSubscribed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_optimalBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_optimalRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"_boostEnabled\",\"type\":\"bool\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subscribers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscribersPos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"arrPos\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"subscribed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unsubscribeByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundSubscriptions","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cc3a54bef48e7c0949180eded7674ff5bd977a5f62bcb41a4f71e8a203e1c0ad"}]}