{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/MakerAdapterV1.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\ninterface Vat {\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function ilks(bytes32) external view returns (uint256 Art, uint256 rate, uint256 spot);\r\n}\r\n\r\ninterface Spot {\r\n    function ilks(bytes32) external view returns (address, uint256 mat);\r\n    function par() external view returns (uint256);\r\n}\r\n\r\ninterface DssCdpManager {\r\n    function urns(uint256) external view returns (address);\r\n    function ilks(uint256) external view returns (bytes32);\r\n}\r\n\r\ncontract MakerAdapterV1 {\r\n    using SafeMath for uint256;\r\n\r\n    // Maker addresses\r\n    address internal constant VAT = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address internal constant MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address internal constant SPOT = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n\r\n    // Math definitions\r\n    uint256 internal constant ONE = 10 ** 27;\r\n    uint256 internal constant ETHER = 10 ** 18;\r\n\r\n    function getCurrentCRatio(uint256 vaultId)\r\n    public view\r\n    returns (uint256) {\r\n        // Precision 1e18\r\n        return getCollateralValue(vaultId).mul(ETHER).div(getDebt(vaultId));\r\n    }\r\n\r\n    function getDebt(uint256 vaultId)\r\n    public view\r\n    returns (uint256)\r\n    {\r\n        DssCdpManager manager = DssCdpManager(MANAGER);\r\n        Vat vat = Vat(VAT);\r\n\r\n        // Vault type\r\n        bytes32 ilk = manager.ilks(vaultId);\r\n\r\n        (, uint256 art) = vat.urns(ilk, manager.urns(vaultId));\r\n        (, uint256 rate, ) = vat.ilks(ilk);\r\n\r\n        return art.mul(rate).div(ONE);\r\n    }\r\n\r\n    function getCollateralValue(uint256 vaultId)\r\n    public view\r\n    returns (uint256)\r\n    {\r\n        DssCdpManager manager = DssCdpManager(MANAGER);\r\n        Vat vat = Vat(VAT);\r\n        Spot spot = Spot(SPOT);\r\n\r\n        // Vault type\r\n        bytes32 ilk = manager.ilks(vaultId);\r\n\r\n        // Formula collateral * par * spot * liq_ratio = ink*par*vat_spot*ilk_mat\r\n\r\n        // Retrieve vault type specific params\r\n        uint256 par = spot.par();\r\n        (, , uint256 vatIlkSpot) = vat.ilks(ilk);\r\n        (, uint256 mat) = spot.ilks(ilk);\r\n\r\n        // Vault collateral amount\r\n        (uint256 ink, ) = vat.urns(ilk, manager.urns(vaultId));\r\n\r\n        return ((((ink.mul(par).div(ONE)).mul(vatIlkSpot)).div(ONE)).mul(mat)).div(ONE);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getCurrentCRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getCollateralValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getDebt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MakerAdapterV1","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9bd6d9339767eec94b4b69eb460ff268cd29013faf85aa8842511ed279935711"}]}