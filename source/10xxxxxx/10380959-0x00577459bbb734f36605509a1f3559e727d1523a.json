{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Utility.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\nlibrary utilities {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // Utilities\r\n\r\n    // basic array sort\r\n    function sort_array(uint[] memory arr) internal pure returns (uint[] memory) {\r\n        uint l = arr.length;\r\n        for (uint i = 0; i < l; i++) {\r\n            for (uint j = i + 1; j < l; j++) {\r\n                if (arr[i] > arr[j]) {\r\n                    uint temp = arr[i];\r\n                    arr[i] = arr[j];\r\n                    arr[j] = temp;\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    // converts a string to a uint\r\n    function stringToUint(string memory s) internal pure returns (uint) {\r\n        bytes memory b = bytes(s);\r\n        uint i;\r\n        uint result = 0;\r\n        for (i = 0; i < b.length; i++) {\r\n            uint c = uint(uint8(b[i]));\r\n            if (c >= 48 && c <= 57) {\r\n                result = result * 10 + (c - 48);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Converts a uint to a string\r\n    function uintToString(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    // returns a substring but reverses the order of the characters\r\n    function substrReversed(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex - startIndex);\r\n        uint j = 0;\r\n        for (uint i = endIndex - 1; i >= startIndex; i--) {\r\n            result[j] = strBytes[i];\r\n            j += 1;\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Whackers.sol\r\n\r\npragma solidity ^0.5.16;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n//  ██╗    ██╗ ██╗  ██╗  █████╗   ██████╗ ██╗  ██╗ ███████╗ ██████╗  ███████╗\r\n//  ██║    ██║ ██║  ██║ ██╔══██╗ ██╔════╝ ██║ ██╔╝ ██╔════╝ ██╔══██╗ ██╔════╝\r\n//  ██║ █╗ ██║ ███████║ ███████║ ██║      █████╔╝  █████╗   ██████╔╝ ███████╗\r\n//  ██║███╗██║ ██╔══██║ ██╔══██║ ██║      ██╔═██╗  ██╔══╝   ██╔══██╗ ╚════██║\r\n// ╚███╔███╔╝ ██║  ██║ ██║  ██║ ╚██████╗ ██║  ██╗ ███████╗ ██║  ██║ ███████║\r\n// ╚══╝╚══╝  ╚═╝  ╚═╝ ╚═╝  ╚═╝  ╚═════╝ ╚═╝  ╚═╝ ╚══════╝ ╚═╝  ╚═╝ ╚══════╝\r\n\r\n// This contract is intended to give the WHACKD token a use case.\r\n// Normally, WHACKD token burns 10% of a given transaction when the\r\n// token is moved. The intent of this contract is to give users an\r\n// opportunity to increase the value of their holding by buying into\r\n// a lottery of WHACKD tokens. It also has the intrinsic use of burning\r\n// tokens and, in the spirit of WHACKD, some participants lose their\r\n// deposits. Here's how it works:\r\n\r\n// PLAYING A ROUND\r\n// There is a fixed deposit requirement, which matches the first of\r\n// ten deposits: User 1 deposits 100 WHACKD, next 9 users must deposit\r\n// 100 WHACKD. Once ten deposits are collected, distribution will be as follows:\r\n\r\n// WINNERS (AND LOSERS)\r\n// The kitty is the sum of all deposits\r\n//  ** 5 random users will be WHACKD and get nothing. Remaining participants and\r\n//    the house will split what remains on the WHACKERS contract.\r\n//  ** 4 random users will win second place. The payout will be 1/7th of the\r\n//    kitty\r\n//  ** The House will collect a quarter of second prize\r\n//  ** One random user will win first place. The payout will be what remains\r\n//    of the kitty\r\n\r\n// FINAL DISTRIBUTION FROM INITIAL DEPOSIT OF 111 WHACKD:\r\n//  Upon completion of the whackers game, the original WHACKERS smart contract will\r\n//  then distribute the winnings - but since WHACKD token burns ten percent of\r\n//  every transaction. WHACKD token takes 10% on deposits and payouts.\r\n\r\n// OLD GAMES: AN OLDER INCOMPLETE CHALLENGE\r\n// If a round gets to be a week old a user can call forceRound\r\n//  with the same ante as the others but we populate all the vacant\r\n//  slots with his address thereby increasing his chances of winning,\r\n//  although the payouts will be less, 2nd place winners may incur a net loss\r\n\r\n// NOTICE: ONE IN A THOUSAND WHACKD TRANSACTIONS ARE 100% BURNED. Be warned!\r\n\r\n/// @author snowkidind (https://github.com/snowkidind/whackers)\r\n/// @title Whackers\r\ncontract Whackers is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    IERC20 internal whackd;\r\n\r\n    uint public ante;          // the amount of deposit required for active round, zero if new round.\r\n    uint public start;         // annotate the date of the first ante\r\n    uint public index;         // Countdown to having ten entrants\r\n    uint public minimumAnte;   // setting for minimum deposit amount\r\n    bool public uniqueWallet;  // setting for whether a single address may register multiple times in a round\r\n    bool internal settling;    // used during settling process\r\n    bool public suspend;       // owner can suspend the contract from accepting deposits\r\n\r\n    constructor(IERC20 _whackd) public {\r\n        index = 10;\r\n        ante = 0;\r\n        minimumAnte = 0;\r\n        settling = false;\r\n        uniqueWallet = true;\r\n        whackd = _whackd;\r\n        suspend = false;\r\n    }\r\n\r\n    event ReceivedTokens(address from, uint value, address token, bytes extraData);\r\n\r\n    Player[10] players;\r\n    address[5] winners;\r\n\r\n    struct Player {\r\n        address payable addr;\r\n        string identifier;\r\n    }\r\n\r\n    modifier validDeposit(address from, uint amount) {\r\n        if (ante > 0) {\r\n            require(amount == ante, \"Ante is set: Must send exact amount\");\r\n        } else {\r\n            require(amount > 0, \"Must send a deposit, Ante is open.\");\r\n        }\r\n        if (uniqueWallet){\r\n            for (uint i = 0; i < players.length; i++) {\r\n                require(from != players[i].addr, \"Deposit must be from a unique wallet.\");\r\n            }\r\n        }\r\n        require(settling == false, \"Cannot accept a deposit during settling process, try again in a moment.\");\r\n        _;\r\n    }\r\n\r\n    function receiveApproval(address payable from, uint256 amount, address token, bytes memory extraData) public validDeposit(from, amount){\r\n\r\n        if (!suspend) {\r\n            require(IERC20(token) == whackd, \"This contract only accepts WHACKD.\");\r\n            require(amount > minimumAnte, \"Deposit must be above minimum ante.\");\r\n            require(IERC20(token).transferFrom(from, address(this), amount), \"Must Approve transaction first.\");\r\n\r\n            emit ReceivedTokens(from, amount, token, extraData);\r\n\r\n            string memory s = utilities.uintToString(block.timestamp.mul(index));\r\n            string memory id = utilities.substrReversed(s, 8, 10);\r\n\r\n            Player memory newPlayer = Player({addr : from, identifier : id});\r\n            index -= 1;\r\n            players[index] = newPlayer;\r\n\r\n            if (ante == 0) {\r\n                ante = amount;\r\n                start = now; // overwrite last round start time\r\n            }\r\n            if (index == 0) {\r\n                settle();\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /// @notice when the amount of entrants reaches ten, or round is forced, payouts are distributed\r\n    function settle() internal {\r\n\r\n        settling = true;\r\n        uint kitty = 0;\r\n        uint[] memory list = sortById();\r\n\r\n        kitty = whackd.balanceOf(address(this));\r\n        payouts(list, kitty);\r\n\r\n        cleanUp();\r\n    }\r\n\r\n    /// @notice Calculates second place winners\r\n    /// @param list a sorted list of ID's\r\n    /// @param kitty the latest balance of the smart contract\r\n    function payouts(uint[] memory list, uint kitty) public payable {\r\n\r\n        if (settling) {\r\n            Player memory player2;\r\n            Player memory player3;\r\n            Player memory player4;\r\n            Player memory player5;\r\n\r\n            for (uint i = 0; i < players.length; i++) {\r\n                if (utilities.stringToUint(players[i].identifier) == list[1]) {\r\n                    player2 = players[i];\r\n                    list[1] = 1000; // clear channel 1 from further winners\r\n                }\r\n                else if (utilities.stringToUint(players[i].identifier) == list[2]) {\r\n                    player3 = players[i];\r\n                    list[2] = 1000;\r\n                }\r\n                else if (utilities.stringToUint(players[i].identifier) == list[3]) {\r\n                    player4 = players[i];\r\n                    list[3] = 1000;\r\n                }\r\n                else if (utilities.stringToUint(players[i].identifier) == list[4]) {\r\n                    player5 = players[i];\r\n                    list[4] = 1000;\r\n                }\r\n            }\r\n\r\n            uint payout = kitty.div(7);\r\n            uint house = payout.div(4);\r\n\r\n            require(whackd.transfer(player2.addr, payout));\r\n            require(whackd.transfer(player3.addr, payout));\r\n            require(whackd.transfer(player4.addr, payout));\r\n            require(whackd.transfer(player5.addr, payout));\r\n            require(whackd.transfer(owner(), house));\r\n\r\n            kitty = kitty.sub(payout.mul(4));\r\n            kitty = kitty.sub(house);\r\n\r\n            winners[1] = player2.addr;\r\n            winners[2] = player3.addr;\r\n            winners[3] = player4.addr;\r\n            winners[4] = player5.addr;\r\n\r\n            // first place\r\n            uint kitty2 = whackd.balanceOf(address(this)); // refresh balance\r\n\r\n            Player memory player;\r\n            for (uint i = 0; i < players.length; i++) {\r\n                if (utilities.stringToUint(players[i].identifier) == list[0]) {\r\n                    for (uint j = 0; j < 4; j++) {\r\n                        if (winners[j] == players[i].addr){\r\n                            // don't assign prize to 2nd place winners\r\n                        } else {\r\n                            player = players[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            winners[0] = player.addr;\r\n            require(whackd.transfer(player.addr, kitty2));\r\n\r\n        } else {\r\n            revert('Cannot call function externally');\r\n        }\r\n    }\r\n\r\n\r\n    /// @notice Generates a list of identifiers from ids struct (global)\r\n    /// @return list of ids to be used in assigning prizes\r\n    function sortById() internal view returns (uint[] memory){\r\n        // generate a list of id's, sort them and compare with mapping, return keys\r\n        uint[] memory identifiers = new uint[](players.length);\r\n        for (uint i = 0; i < players.length; i++) {\r\n            identifiers[i] = utilities.stringToUint(players[i].identifier);\r\n        }\r\n        return utilities.sort_array(identifiers);\r\n    }\r\n\r\n    /// @notice Revert to new round\r\n    function cleanUp() internal {\r\n        for (uint i = 0; i < 10; i++) {\r\n            delete players[i];\r\n        }\r\n        index = 10;\r\n        ante = 0;\r\n        settling = false;\r\n    }\r\n\r\n    /// @notice Forces a round to complete after time interval is exceeded\r\n    /// @param token In this case, the address of whackd token is required.\r\n    /// @param amount The amount of tokens being sent in wei\r\n    function forceRound(IERC20 token, uint256 amount) external payable validDeposit(msg.sender, amount){\r\n        if (!suspend) {\r\n            require(token == whackd, \"This contract only accepts WHACKD.\");\r\n            require(amount > minimumAnte, \"Deposit must be above minimum ante.\");\r\n            require(token.transferFrom(msg.sender, address(this), amount));\r\n\r\n            if (now > start + 7 days) {\r\n\r\n                string memory s = utilities.uintToString(block.timestamp.mul(index));\r\n                string memory id = utilities.substrReversed(s, 8, 10);\r\n                Player memory newPlayer = Player({addr : msg.sender, identifier : id});\r\n                index -= 1;\r\n                players[index] = newPlayer;\r\n\r\n                /// @dev here the empty values in the players array is filled with sender\r\n                uint count = index;\r\n                for (uint i = count; i > 0; i--) {\r\n                    index -= 1;\r\n                    players[index] = newPlayer;\r\n                }\r\n\r\n                settle();\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /// An old round can be forced\r\n    function oldRound() external view returns (bool){\r\n        if (now > start + 7 days) {\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @notice players can be identified from this by index\r\n    /// @param id the id in the array to retrieve\r\n    function currentPlayers(uint id) external view returns (address){\r\n        return players[id].addr;\r\n    }\r\n\r\n    // @notice last round of winners can also be retrieved\r\n    /// @param id the id in the array to retrieve\r\n    function lastRound(uint id) external view returns (address){\r\n        return winners[id];\r\n    }\r\n\r\n    /// @notice Owner may cancel any given round, issuing refunds. (sans burn amount)\r\n    function refundAll() external payable onlyOwner {\r\n\r\n        settling = true;\r\n        uint divisor = 10 - index;\r\n        uint kitty = whackd.balanceOf(address(this));\r\n        uint payout = kitty.div(divisor);\r\n        uint count = 0;\r\n        for (uint i = 10; i > (10 - divisor); i--) {\r\n            require(whackd.transfer(players[i - 1].addr, payout));\r\n            count += 1;\r\n        }\r\n        cleanUp();\r\n    }\r\n\r\n    /// @notice Owner may set a minimum ante\r\n    /// @param minAnte the amount to set, in wei, defaults to zero\r\n    function setMinimumAnte(uint minAnte) external onlyOwner {\r\n        require(index == 10, \"Currently in a round.\");\r\n        minimumAnte = minAnte;\r\n    }\r\n\r\n    /// @notice Owner may set wallet requirement to be unique or allows multiple deposits.\r\n    function toggleUniqueWallet() external onlyOwner {\r\n       uniqueWallet = !uniqueWallet;\r\n    }\r\n\r\n    /// @notice Fallback function rejects any ether deposits\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    /// @notice owner may suspend use of this smart contract for new version\r\n    function toggleSuspend() external onlyOwner {\r\n        if (index == 10){\r\n            suspend = !suspend;\r\n        }\r\n    }\r\n\r\n    /// @notice Owner can remove erroneously sent erc20's\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return IERC20(tokenAddress).transfer(owner(), tokens);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_whackd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ante\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currentPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forceRound\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"lastRound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumAnte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"kitty\",\"type\":\"uint256\"}],\"name\":\"payouts\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAnte\",\"type\":\"uint256\"}],\"name\":\"setMinimumAnte\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"suspend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleSuspend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleUniqueWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniqueWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Whackers","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cf8335727b776d190f9d15a54e6b9b9348439eee","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ebdc8528033c8a895f78cdd0b25774b95e72a91fcea276e1779139b7e9c21675"}]}