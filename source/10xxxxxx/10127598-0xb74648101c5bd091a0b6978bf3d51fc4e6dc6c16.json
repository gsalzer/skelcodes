{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title PToken Interface\r\n */\r\ninterface IPToken {\r\n    /* solhint-disable func-order */\r\n    //Standart ERC20\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    //Mintable & Burnable\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external;\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    //Distributions\r\n    function distribute(uint256 amount) external;\r\n    function claimDistributions(address account) external returns(uint256);\r\n    function claimDistributions(address account, uint256 lastDistribution) external returns(uint256);\r\n    function claimDistributions(address[] calldata accounts) external;\r\n    function claimDistributions(address[] calldata accounts, uint256 toDistribution) external;\r\n    function fullBalanceOf(address account) external view returns(uint256);\r\n    function calculateDistributedAmount(uint256 startDistribution, uint256 nextDistribution, uint256 initialBalance) external view returns(uint256);\r\n    function nextDistribution() external view returns(uint256);\r\n    function distributionTotalSupply() external view returns(uint256);\r\n    function distributionBalanceOf(address account) external view returns(uint256);\r\n}\r\n\r\ninterface IAccessModule {\r\n    enum Operation {\r\n        // LiquidityModule\r\n        Deposit,\r\n        Withdraw,\r\n        // LoanModule\r\n        CreateDebtProposal,\r\n        AddPledge,\r\n        WithdrawPledge,\r\n        CancelDebtProposal,\r\n        ExecuteDebtProposal,\r\n        Repay,\r\n        ExecuteDebtDefault,\r\n        WithdrawUnlockedPledge\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if operation is allowed\r\n     * @param operation Requested operation\r\n     * @param sender Sender of transaction\r\n     */\r\n    function isOperationAllowed(Operation operation, address sender) external view returns(bool);\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for token transfers, provides info about current liquidity/debts and pool token price.\r\n */\r\ninterface IFundsModule {\r\n    event Status(uint256 lBalance, uint256 lDebts, uint256 lProposals, uint256 pEnterPrice, uint256 pExitPrice);\r\n\r\n    /**\r\n     * @notice Deposit liquid tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositLTokens(address from, uint256 amount) external;\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice deposit liquid tokens received as interest and distribute PTK\r\n     * @param amount Amount of liquid tokens to deposit\r\n     * @return Amount of PTK distributed\r\n     */\r\n    function distributeLInterest(uint256 amount) external returns(uint256);\r\n\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     * @param poolFee Pool fee will be sent to pool owner\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount, uint256 poolFee) external;\r\n\r\n    /**\r\n     * @notice Deposit pool tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositPTokens(address from, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw pool tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawPTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mint new PTokens\r\n     * @param to Address of the user, who sends tokens.\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function mintPTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mint new PTokens and distribute the to other PToken holders\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function distributePTokens(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Burn pool tokens\r\n     * @param from Address of the user, whos tokens we burning. Should have enough allowance.\r\n     * @param amount Amount of tokens to burn\r\n     */\r\n    function burnPTokens(address from, uint256 amount) external;\r\n\r\n    function lockPTokens(address[] calldata from, uint256[] calldata amount) external;\r\n\r\n    function mintAndLockPTokens(uint256 amount) external;\r\n\r\n    function unlockAndWithdrawPTokens(address to, uint256 amount) external;\r\n\r\n    function burnLockedPTokens(uint256 amount) external;\r\n\r\n    function emitStatusEvent() external;\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExit(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many liquid tokens should be removed from pool when decreasing liquidity\r\n     * @param pAmount Amount of pToken which should be taken from sender\r\n     * @return Amount of liquid tokens which will be removed from the pool: total, part for sender, part for pool\r\n     */\r\n    function calculatePoolExitInverse(uint256 pAmount) external view returns(uint256, uint256, uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Current pool liquidity\r\n     * @return available liquidity\r\n     */\r\n    function lBalance() external view returns(uint256);\r\n\r\n    /**\r\n     * @return Amount of pTokens locked in FundsModule by account\r\n     */\r\n    function pBalanceOf(address account) external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Liquidity Module Interface\r\n * @dev Liquidity module is responsible for deposits, withdrawals and works with Funds module.\r\n */\r\ninterface ILiquidityModule {\r\n\r\n    event Deposit(address indexed sender, uint256 lAmount, uint256 pAmount);\r\n    event Withdraw(address indexed sender, uint256 lAmountTotal, uint256 lAmountUser, uint256 pAmount);\r\n\r\n    /*\r\n     * @notice Deposit amount of lToken and mint pTokens\r\n     * @param lAmount Amount of liquid tokens to invest\r\n     * @param pAmountMin Minimal amout of pTokens suitable for sender\r\n     */ \r\n    function deposit(uint256 lAmount, uint256 pAmountMin) external;\r\n\r\n    /**\r\n     * @notice Withdraw amount of lToken and burn pTokens\r\n     * @param pAmount Amount of pTokens to send\r\n     * @param lAmountMin Minimal amount of liquid tokens to withdraw\r\n     */\r\n    function withdraw(uint256 pAmount, uint256 lAmountMin) external;\r\n\r\n    /**\r\n     * @notice Simulate withdrawal for loan repay with PTK\r\n     * @param pAmount Amount of pTokens to use\r\n     */\r\n    function withdrawForRepay(address borrower, uint256 pAmount) external;\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string internal constant MODULE_ACCESS            = \"access\";\r\n    string internal constant MODULE_PTOKEN            = \"ptoken\";\r\n    string internal constant MODULE_DEFI              = \"defi\";\r\n    string internal constant MODULE_CURVE             = \"curve\";\r\n    string internal constant MODULE_FUNDS             = \"funds\";\r\n    string internal constant MODULE_LIQUIDITY         = \"liquidity\";\r\n    string internal constant MODULE_LOAN              = \"loan\";\r\n    string internal constant MODULE_LOAN_LIMTS        = \"loan_limits\";\r\n    string internal constant MODULE_LOAN_PROPOSALS    = \"loan_proposals\";\r\n    string internal constant MODULE_FLASHLOANS        = \"flashloans\";\r\n    string internal constant MODULE_ARBITRAGE         = \"arbitrage\";\r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string internal constant MODULE_LTOKEN            = \"ltoken\";\r\n    string internal constant MODULE_CDAI              = \"cdai\";\r\n    string internal constant MODULE_RAY               = \"ray\";\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        if (moduleAddress == ZERO_ADDRESS) {\r\n            string memory error = string(abi.encodePacked(\"Module: requested module not found: \", module));\r\n            revert(error);\r\n        }\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\ncontract LiquidityModule is Module, ILiquidityModule {\r\n    struct LiquidityLimits {\r\n        uint256 lDepositMin;     // Minimal amount of liquid tokens for deposit\r\n        uint256 pWithdrawMin;    // Minimal amount of pTokens for withdraw\r\n    }\r\n\r\n    LiquidityLimits public limits;\r\n\r\n    modifier operationAllowed(IAccessModule.Operation operation) {\r\n        IAccessModule am = IAccessModule(getModuleAddress(MODULE_ACCESS));\r\n        require(am.isOperationAllowed(operation, _msgSender()), \"LiquidityModule: operation not allowed\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n        setLimits(10*10**18, 0);    //10 DAI minimal enter\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit amount of lToken and mint pTokens\r\n     * @param lAmount Amount of liquid tokens to invest\r\n     * @param pAmountMin Minimal amout of pTokens suitable for sender\r\n     */ \r\n    function deposit(uint256 lAmount, uint256 pAmountMin) public operationAllowed(IAccessModule.Operation.Deposit) {\r\n        require(lAmount > 0, \"LiquidityModule: lAmount should not be 0\");\r\n        require(lAmount >= limits.lDepositMin, \"LiquidityModule: amount should be >= lDepositMin\");\r\n        uint pAmount = fundsModule().calculatePoolEnter(lAmount);\r\n        require(pAmount >= pAmountMin, \"LiquidityModule: Minimal amount is too high\");\r\n        fundsModule().depositLTokens(_msgSender(), lAmount);\r\n        fundsModule().mintPTokens(_msgSender(), pAmount);\r\n        emit Deposit(_msgSender(), lAmount, pAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw amount of lToken and burn pTokens\r\n     * @dev This operation also repays all interest on all debts\r\n     * @param pAmount Amount of pTokens to send (this amount does not include pTokens used to pay interest)\r\n     * @param lAmountMin Minimal amount of liquid tokens to withdraw\r\n     */\r\n    function withdraw(uint256 pAmount, uint256 lAmountMin) public operationAllowed(IAccessModule.Operation.Withdraw) {\r\n        require(pAmount > 0, \"LiquidityModule: pAmount should not be 0\");\r\n        require(pAmount >= limits.pWithdrawMin, \"LiquidityModule: amount should be >= pWithdrawMin\");\r\n        (uint256 lAmountT, uint256 lAmountU, uint256 lAmountP) = fundsModule().calculatePoolExitInverse(pAmount);\r\n        require(lAmountU >= lAmountMin, \"LiquidityModule: Minimal amount is too high\");\r\n        uint256 availableLiquidity = fundsModule().lBalance();\r\n        require(lAmountT <= availableLiquidity, \"LiquidityModule: not enough liquidity\");\r\n        fundsModule().burnPTokens(_msgSender(), pAmount);\r\n        fundsModule().withdrawLTokens(_msgSender(), lAmountU, lAmountP);\r\n        emit Withdraw(_msgSender(), lAmountT, lAmountU, pAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw amount of lToken and burn pTokens\r\n     * @param borrower Address of the borrower\r\n     * @param pAmount Amount of pTokens to send\r\n     */\r\n    function withdrawForRepay(address borrower, uint256 pAmount) public {\r\n        require(_msgSender() == getModuleAddress(MODULE_LOAN), \"LiquidityModule: call only allowed from LoanModule\");\r\n        require(pAmount > 0, \"LiquidityModule: pAmount should not be 0\");\r\n        //require(pAmount >= limits.pWithdrawMin, \"LiquidityModule: amount should be >= pWithdrawMin\"); //Limit disabled, because this is actually repay\r\n        (uint256 lAmountT, uint256 lAmountU, uint256 lAmountP) = fundsModule().calculatePoolExitInverse(pAmount);\r\n        uint256 availableLiquidity = fundsModule().lBalance();\r\n        require(lAmountP <= availableLiquidity, \"LiquidityModule: not enough liquidity\");\r\n        fundsModule().burnPTokens(borrower, pAmount);           //We just burn pTokens, withous sending lTokens to _msgSender()\r\n        fundsModule().withdrawLTokens(borrower, 0, lAmountP);   //This call is required to send pool fee\r\n        emit Withdraw(borrower, lAmountT, lAmountU, pAmount);\r\n    }\r\n\r\n    function setLimits(uint256 lDepositMin, uint256 pWithdrawMin) public onlyOwner {\r\n        limits.lDepositMin = lDepositMin;\r\n        limits.pWithdrawMin = pWithdrawMin;\r\n    }\r\n\r\n    function fundsModule() internal view returns(IFundsModule) {\r\n        return IFundsModule(getModuleAddress(MODULE_FUNDS));\r\n    }\r\n}\r\n\r\n/**\r\n * @notice PensionFundLiquidityModule is a modification of standart\r\n * LiquidityModule which changes withdrawal rules according to pension plan.\r\n * Pension plan has a specific duration, and partial withdrawals allowed only \r\n * after end of its deposit period.\r\n * Before end of this period user only allowed to cancel his plan with a penalty, \r\n * proportional to the time till end of this period.\r\n * After the end of deposit period plan user is allowed to withraw during withdrawal\r\n * period, proportionally to the time till end of this period.\r\n */\r\ncontract PensionFundModule is LiquidityModule {\r\n    using SafeMath for uint256;\r\n\r\n    event PlanCreated(address indexed beneficiary, uint256 depostiPeriodEnd, uint256 withdrawPeriodEnd);\r\n    event PlanClosed(address indexed beneficiary, uint256 pRefund, uint256 pPenalty);\r\n    event PlanSettingsChanged(uint256 depositPeriodDuration, uint256 minPenalty, uint256 maxPenalty, uint256 withdrawPeriodDuration, uint256 initalWithdrawAllowance);\r\n\r\n    uint256 public constant MULTIPLIER = 1e18;\r\n    uint256 private constant ANNUAL_SECONDS = 365*24*60*60+(24*60*60/4);  // Seconds in a year + 1/4 day to compensate leap years\r\n\r\n    struct PensionPlanSettings {\r\n        uint256 depositPeriodDuration;      // Duration of deposit period\r\n        uint256 minPenalty;                 // Min penalty (if withdraw full amount just before deposit period ends or during withdraw period)\r\n        uint256 maxPenalty;                 // Max penalty (if withdraw rigt after deposit). Calculated as pBalance*maxPenalty/MULTIPLIER\r\n        uint256 withdrawPeriodDuration;     // Duration of withdraw period\r\n        uint256 initalWithdrawAllowance;    // How much user can withdraw right after deposit period ends. Calculated as pBalance*initalWithdrawAllowance/MULTIPLIER\r\n    }\r\n\r\n    struct PensionPlan {\r\n        uint256 created;    // Timestamp of first deposit, which created this plan\r\n        uint256 pWithdrawn; // pTokens already withdawn from this plan\r\n    }\r\n\r\n    PensionPlanSettings public planSettings;        // Settings of all pension plans\r\n\r\n    mapping(address => PensionPlan) public plans;   // Attributes of pension plan per user\r\n\r\n    function initialize(address _pool) public initializer {\r\n        LiquidityModule.initialize(_pool);\r\n        setPlanSettings(\r\n            30*ANNUAL_SECONDS,\r\n            10*MULTIPLIER/100,\r\n            90*MULTIPLIER/100,\r\n            20*ANNUAL_SECONDS,\r\n            0*MULTIPLIER/100\r\n        );\r\n    }\r\n\r\n    function setPlanSettings(\r\n        uint256 depositPeriodDuration, \r\n        uint256 minPenalty, \r\n        uint256 maxPenalty, \r\n        uint256 withdrawPeriodDuration,\r\n        uint256 initalWithdrawAllowance\r\n    ) public onlyOwner {\r\n        planSettings = PensionPlanSettings({\r\n            depositPeriodDuration: depositPeriodDuration, \r\n            minPenalty: minPenalty, \r\n            maxPenalty: maxPenalty, \r\n            withdrawPeriodDuration: withdrawPeriodDuration,\r\n            initalWithdrawAllowance: initalWithdrawAllowance\r\n        });\r\n        emit PlanSettingsChanged(depositPeriodDuration, minPenalty, maxPenalty, withdrawPeriodDuration, initalWithdrawAllowance);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit amount of lToken and mint pTokens\r\n     * @param lAmount Amount of liquid tokens to invest\r\n     * @param pAmountMin Minimal amout of pTokens suitable for sender\r\n     */ \r\n    function deposit(uint256 lAmount, uint256 pAmountMin) public /*operationAllowed(IAccessModule.Operation.Deposit)*/ {\r\n        address user = _msgSender();\r\n        PensionPlan storage plan  = plans[user];\r\n        bool creation;\r\n        if (plan.created == 0){\r\n            //create new plan\r\n            plan.created = now;\r\n            creation = true;\r\n        }\r\n        uint256 depositPeriodEnd = plan.created.add(planSettings.depositPeriodDuration);\r\n        uint256 planEnd = depositPeriodEnd.add(planSettings.withdrawPeriodDuration);\r\n        require(planEnd > now, \"PensionFundLiquidityModule: plan ended\");\r\n        super.deposit(lAmount, pAmountMin);\r\n        if (creation){\r\n            emit PlanCreated(user, depositPeriodEnd, planEnd);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw amount of lToken and burn pTokens\r\n     * @param pAmount Amount of pTokens to send (this amount does not include pTokens used to pay interest)\r\n     * @param lAmountMin Minimal amount of liquid tokens to withdraw\r\n     */\r\n    function withdraw(uint256 pAmount, uint256 lAmountMin) public /*operationAllowed(IAccessModule.Operation.Withdraw)*/ {\r\n        address user = _msgSender();\r\n        PensionPlan storage plan  = plans[user];\r\n        require(plan.created != 0, \"PensionFundLiquidityModule: plan not found\");\r\n        uint256 pBalance = pToken().distributionBalanceOf(user);\r\n        uint256 allownce = _withdrawLimit(plan, pBalance);\r\n        require(allownce >= pAmount, \"PensionFundLiquidityModule: not enough withdraw allowance\");\r\n        plan.pWithdrawn = plan.pWithdrawn.add(pAmount);\r\n        super.withdraw(pAmount, lAmountMin);\r\n        \r\n        //Additional balance request required because of possible distributions which could be claimed during withdraw\r\n        uint256 pLeft = pToken().distributionBalanceOf(user); \r\n        if (pLeft == 0) {\r\n            delete plans[user];   //Close plan, so that user can create a new one\r\n            emit PlanClosed(user, 0, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Close plan withdrawing all available lTokens\r\n     * @param lAmountMin Minimal amount of liquid tokens to withdraw\r\n     */\r\n    function closePlan(uint256 lAmountMin) public operationAllowed(IAccessModule.Operation.Withdraw) {\r\n        address user = _msgSender();\r\n        PensionPlan storage plan  = plans[user];\r\n        require(plan.created != 0, \"PensionFundLiquidityModule: plan not found\");\r\n        IPToken pToken = pToken();\r\n        pToken.claimDistributions(user);    // We need to claim distributions to know full user balance\r\n        uint256 pBalance = pToken.distributionBalanceOf(user);\r\n        uint256 pWithdrawableBalance = pToken.balanceOf(user);\r\n        require(pBalance == pWithdrawableBalance, \"PensionFundLiquidityModule: has locked PTK\");   //Some funds may be locked in proposals\r\n        uint256 pPenalty = _pPenalty(plan, pBalance);\r\n        uint256 pRefund = pBalance.sub(pPenalty);\r\n        \r\n        if (pRefund > 0) {\r\n            super.withdraw(pRefund, lAmountMin);\r\n        } else {\r\n            require(lAmountMin == 0, \"PensionFundLiquidityModule: lAmountMin prevents zero refund\");\r\n        }\r\n        if (pPenalty > 0) {\r\n            IFundsModule fundsModule = fundsModule();\r\n            fundsModule.burnPTokens(user, pPenalty);\r\n            fundsModule.distributePTokens(pPenalty);\r\n        }\r\n\r\n        // Check balance again to prevent possible actions during lToken transfer\r\n        pBalance = pToken.distributionBalanceOf(user);\r\n        require(pBalance == 0, \"PensionFundLiquidityModule: not zero balance after full withdraw\");\r\n        delete plans[user]; \r\n        emit PlanClosed(user, pRefund, pPenalty);\r\n    }\r\n\r\n    function withdrawForRepay(address, uint256) public {\r\n        revert(\"PensionFundLiquidityModule: operation not supported\");\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of pToken user can withdraw during withdraw period\r\n     * @dev This calculation does not count possible not-yet-claimed distributions\r\n     */\r\n    function withdrawLimit(address user) public view returns(uint256) {\r\n        PensionPlan storage plan  = plans[user];\r\n        if (plan.created == 0) return 0;\r\n        uint256 pBalance = pToken().distributionBalanceOf(user);\r\n        return _withdrawLimit(plan, pBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates amount of pToken user can withdraw during deposit period on plan close\r\n     * @dev This calculation does not count possible not-yet-claimed distributions\r\n     */\r\n    function pRefund(address user) public view returns(uint256) {\r\n        PensionPlan storage plan  = plans[user];\r\n        if (plan.created == 0) return 0;\r\n        uint256 pBalance = pToken().distributionBalanceOf(user);\r\n        uint256 pPenalty = _pPenalty(plan, pBalance);\r\n        return pBalance.sub(pPenalty);\r\n    }\r\n\r\n    function _withdrawLimit(PensionPlan storage plan, uint256 pBalance) internal view returns(uint256) {\r\n        uint256 withdrawStart = plan.created.add(planSettings.depositPeriodDuration);\r\n        if (withdrawStart >= now) return 0;\r\n        uint256 sinceWithdrawStart = now.sub(withdrawStart);\r\n        if (sinceWithdrawStart >= planSettings.withdrawPeriodDuration) {\r\n            return pBalance;\r\n        }\r\n        uint256 pInitialAllowance = pBalance.mul(planSettings.initalWithdrawAllowance).div(MULTIPLIER);\r\n        uint256 pTimeAllowance = pBalance.sub(pInitialAllowance).mul(sinceWithdrawStart).div(planSettings.withdrawPeriodDuration);\r\n        uint256 fullAllowance = pInitialAllowance.add(pTimeAllowance);\r\n        if (fullAllowance <= plan.pWithdrawn) return 0;\r\n        return fullAllowance - plan.pWithdrawn;\r\n    }\r\n\r\n    function _pPenalty(PensionPlan storage plan, uint256 pBalance) internal view returns(uint256) {\r\n        uint256 withdrawStart = plan.created.add(planSettings.depositPeriodDuration);\r\n        uint256 planEnd = withdrawStart.add(planSettings.withdrawPeriodDuration);\r\n        if (now >= planEnd) {\r\n            //After end ow withdraw period - can close plan without penalty            \r\n            return 0;\r\n        }\r\n        uint256 pPenalty;\r\n        if (now < withdrawStart){\r\n            //During deposit period\r\n            uint256 tillWithdrawStart = withdrawStart.sub(now);\r\n            uint256 pMinPenalty = pBalance.mul(planSettings.minPenalty).div(MULTIPLIER);\r\n            uint256 pMaxPenalty = pBalance.mul(planSettings.maxPenalty).div(MULTIPLIER);\r\n            pPenalty = pMinPenalty.add(pMaxPenalty.sub(pMinPenalty).mul(tillWithdrawStart).div(planSettings.depositPeriodDuration));\r\n        } else {\r\n            //During withdraw period\r\n            uint256 allowance = _withdrawLimit(plan, pBalance);\r\n            if (allowance < pBalance) {\r\n                pPenalty = pBalance.sub(allowance).mul(planSettings.minPenalty).div(MULTIPLIER);\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        return pPenalty;\r\n    }\r\n\r\n    function fundsModule() internal view returns(IFundsModule) {\r\n        return IFundsModule(getModuleAddress(MODULE_FUNDS));\r\n    }\r\n\r\n    function pToken() private view returns(IPToken){\r\n        return IPToken(getModuleAddress(MODULE_PTOKEN));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pPenalty\",\"type\":\"uint256\"}],\"name\":\"PlanClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depostiPeriodEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawPeriodEnd\",\"type\":\"uint256\"}],\"name\":\"PlanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositPeriodDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawPeriodDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initalWithdrawAllowance\",\"type\":\"uint256\"}],\"name\":\"PlanSettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmountTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmountUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmountMin\",\"type\":\"uint256\"}],\"name\":\"closePlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pAmountMin\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lDepositMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pWithdrawMin\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"planSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositPeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawPeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initalWithdrawAllowance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lDepositMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pWithdrawMin\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositPeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawPeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initalWithdrawAllowance\",\"type\":\"uint256\"}],\"name\":\"setPlanSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lAmountMin\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawForRepay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PensionFundModule","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7221468149ff7208809c13b2c47f2d4cc98c8a332ab86c3747659b99b8e48820"}]}