{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity =0.5.10;\r\n\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity ^0.5.10;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        require(z >= x, \"Add overflow\");\r\n        return z;\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(x >= y, \"Sub underflow\");\r\n        return x - y;\r\n    }\r\n\r\n    function mult(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 z = x * y;\r\n        require(z / x == y, \"Mult overflow\");\r\n        return z;\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y != 0, \"Div by zero\");\r\n        return x / y;\r\n    }\r\n\r\n    function divRound(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y != 0, \"Div by zero\");\r\n        uint256 r = x / y;\r\n        if (x % y != 0) {\r\n            r = r + 1;\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/commons/Ownable.sol\r\n\r\npragma solidity =0.5.10;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event TransferOwnership(address _from, address _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit TransferOwnership(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _owner) external onlyOwner {\r\n        emit TransferOwnership(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\n// File: contracts/NugsInitialLiquidityPool.sol\r\n\r\npragma solidity =0.5.10;\r\n\r\n\r\n\r\n\r\n\r\ninterface Pauseable {\r\n    function unpause() external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function addLiquidityETH(address token, uint amountTokenDesired, \r\n            uint amountTokenMin, uint amountETHMin, address to, uint deadline) \r\n        external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract NugsInitialLiquidityPool is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // new Date('2020-08-09T23:00:00.000+00:00').getTime() / 1000;\r\n    uint256 public constant START_TIME = 1597014000;\r\n\r\n    // End cao time\r\n    uint256 public constant END_CAP_TIME = START_TIME + 24 hours;\r\n\r\n    // End time\r\n    uint256 public constant END_TIME = END_CAP_TIME + 60 minutes;\r\n\r\n    // 1 ETH = 1190000 NUGS\r\n    uint256 public constant TOKENS_PER_ETH = 1190000;\r\n\r\n    // Caps\r\n    uint256 public constant HARDCAP = 150 ether;\r\n    mapping(address => uint256) public greenlistCap;\r\n\r\n    // Contributions\r\n    mapping(address => uint256) public contributionsGL;\r\n    uint256 public constant LIMIT_FCFS = 1 ether;\r\n    mapping(address => uint256) public contributionsFCFS;\r\n\r\n    uint256 public weiRaised;\r\n\r\n    bool public fundsLocked = false;\r\n\r\n    IUniswapV2Router02 internal uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    IERC20 public token;\r\n\r\n    event BuyNugs(address indexed buyer, uint256 weiAmount, uint256 tokenAmount);\r\n\r\n    constructor() Ownable() public {\r\n    }\r\n\r\n    // configure this sale for any given IERC20 pausable token\r\n    function init(IERC20 _token) external onlyOwner {\r\n        token = _token;\r\n    }\r\n\r\n\r\n    //\r\n    // Token sale\r\n    //\r\n\r\n    function _validatePurchase(address buyer) internal view {\r\n        require(buyer != address(0), \"0x0 cannot buy tokens\");\r\n        require(hasStarted(), \"sale did not start yet.\");\r\n        require(!hasEnded(), \"sale is over.\");\r\n        this;\r\n    }\r\n\r\n    function _buyTokens(address buyer, uint256 weiAmount) internal {\r\n        _validatePurchase(buyer);\r\n\r\n        if (isGreanlistSaleTime()) {\r\n            uint256 newAmount = contributionsGL[buyer].add(weiAmount);\r\n            require(newAmount <= greenlistCap[buyer], \"not whitelisted or WL cap exceeded\");\r\n            contributionsGL[buyer] = newAmount;\r\n        }\r\n        else {\r\n            uint256 newAmount = contributionsFCFS[buyer].add(weiAmount);\r\n            require (newAmount <= LIMIT_FCFS, \"limit for FCFS round exceeded\");\r\n            contributionsFCFS[buyer] = newAmount;\r\n        }\r\n\r\n        // Update internal state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        // Transfer tokens\r\n        uint256 tokenAmount = weiAmount.mult(TOKENS_PER_ETH);\r\n        token.transfer(buyer, tokenAmount);\r\n\r\n        emit BuyNugs(buyer, weiAmount, tokenAmount);\r\n    }\r\n\r\n    function _buyTokens(address payable buyer) internal {\r\n        uint256 remainingWei = HARDCAP.sub(weiRaised);\r\n        uint256 weiAmount = remainingWei < msg.value ? remainingWei : msg.value;\r\n        _buyTokens(buyer, weiAmount);\r\n\r\n        uint256 refundAmount = msg.value.sub(weiAmount);\r\n        if (refundAmount > 0)\r\n            address(buyer).transfer(refundAmount);\r\n    }\r\n\r\n    function () payable external {\r\n        _buyTokens(msg.sender);\r\n    }\r\n\r\n    // Uniswap\r\n\r\n    function addLiquidity() external onlyOwner {\r\n        require(tx.origin == msg.sender, \"!EOA.\");\r\n        require(hasEnded(), \"cannot add liquidity until sale ends\");\r\n\r\n        uint256 totalNugs = token.balanceOf(address(this));\r\n        uint256 totalEth = address(this).balance;\r\n\r\n        // end pausing of transfers\r\n        Pauseable(address(token)).unpause();\r\n        // send all the ETH raised and tokens in the contract to the liq pool\r\n        token.approve(address(uniswapRouter), totalNugs);\r\n\r\n        uniswapRouter.addLiquidityETH.value(totalEth)( address(token),\r\n            totalNugs, totalNugs, totalEth, address(0), /* burn address */ now );\r\n        fundsLocked = true;\r\n    }\r\n\r\n    // Sale options, params\r\n\r\n    function isGreanlistSaleTime() public view returns (bool) {\r\n        return now >= START_TIME && now <= (END_CAP_TIME);\r\n    }\r\n\r\n    function setGreenlistCapAll(address[] calldata accounts, uint256 amount) external onlyOwner {\r\n        assert(accounts.length < 100);\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            greenlistCap[accounts[i]] = amount;\r\n        }\r\n    }\r\n\r\n    function setGreenlistCap(address account, uint256 amount) external onlyOwner {\r\n        greenlistCap[account] = amount;\r\n    }\r\n\r\n    function hasStarted() public view returns (bool) {\r\n        return now >= START_TIME;\r\n    }\r\n\r\n    function hasEnded() public view returns (bool) {\r\n        return now >= END_TIME || weiRaised >= HARDCAP;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"greenlistCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_CAP_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARDCAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setGreenlistCapAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIMIT_FCFS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGreanlistSaleTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_PER_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionsGL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setGreenlistCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionsFCFS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"BuyNugs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"}]","ContractName":"NugsInitialLiquidityPool","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://911ab58abf5349c720a0cd97a4106f5630f67d036982b0d16ec9be71b015246e"}]}