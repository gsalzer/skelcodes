{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard { \r\n    bool private _notEntered; \r\n    \r\n    function _initReentrancyGuard() internal {\r\n        _notEntered = true;\r\n    } \r\n}\r\n\r\ncontract LexTokenLite is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    \r\n    address payable public owner;\r\n    address public resolver;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 public totalSupplyCap;\r\n    bytes32 public message;\r\n    bool private initialized;\r\n    bool public transferable; \r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    \r\n    mapping(address => mapping(address => uint256)) public allowances;\r\n    mapping(address => uint256) private balances;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"!owner\");\r\n        _;\r\n    }\r\n    \r\n    function init(\r\n        string calldata _name, \r\n        string calldata _symbol, \r\n        uint8 _decimals, \r\n        address payable _owner, \r\n        address _resolver, \r\n        uint256 ownerSupply, \r\n        uint256 _totalSupplyCap, \r\n        bytes32 _message, \r\n        bool _transferable\r\n    ) external {\r\n        require(!initialized, \"initialized\"); \r\n        require(ownerSupply <= _totalSupplyCap, \"capped\");\r\n        \r\n        name = _name; \r\n        symbol = _symbol; \r\n        decimals = _decimals; \r\n        owner = _owner; \r\n        resolver = _resolver;\r\n        totalSupplyCap = _totalSupplyCap; \r\n        message = _message; \r\n        initialized = true; \r\n        transferable = _transferable; \r\n        balances[owner] = balances[owner].add(ownerSupply);\r\n        totalSupply = ownerSupply;\r\n        \r\n        emit Transfer(address(0), owner, ownerSupply);\r\n        _initReentrancyGuard(); \r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        require(amount == 0 || allowances[msg.sender][spender] == 0, \"!reset\"); \r\n        \r\n        allowances[msg.sender][spender] = amount; \r\n        \r\n        emit Approval(msg.sender, spender, amount); \r\n        return true;\r\n    }\r\n    \r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n    \r\n    function balanceResolution(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        require(msg.sender == resolver, \"!resolver\"); \r\n        \r\n        _transfer(sender, recipient, amount); \r\n        \r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 amount) external {\r\n        balances[msg.sender] = balances[msg.sender].sub(amount); \r\n        totalSupply = totalSupply.sub(amount); \r\n        \r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        balances[sender] = balances[sender].sub(amount); \r\n        balances[recipient] = balances[recipient].add(amount); \r\n        \r\n        emit Transfer(sender, recipient, amount); \r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        require(transferable, \"!transferable\"); \r\n        \r\n        _transfer(msg.sender, recipient, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferBatch(address[] calldata recipient, uint256[] calldata amount) external returns (bool) {\r\n        require(transferable, \"!transferable\");\r\n        require(recipient.length == amount.length, \"!recipient/amount\");\r\n        \r\n        for (uint256 i = 0; i < recipient.length; i++) {\r\n            _transfer(msg.sender, recipient[i], amount[i]);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        require(transferable, \"!transferable\");\r\n        \r\n        _transfer(sender, recipient, amount);\r\n        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(amount); \r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**************\r\n    OWNER FUNCTIONS\r\n    **************/\r\n    function mint(address recipient, uint256 amount) external onlyOwner {\r\n        require(totalSupply.add(amount) <= totalSupplyCap, \"capped\"); \r\n        \r\n        balances[recipient] = balances[recipient].add(amount); \r\n        totalSupply = totalSupply.add(amount); \r\n        \r\n        emit Transfer(address(0), recipient, amount); \r\n    }\r\n    \r\n    function mintBatch(address[] calldata recipient, uint256[] calldata amount) external onlyOwner {\r\n        require(recipient.length == amount.length, \"!recipient/amount\");\r\n        \r\n        for (uint256 i = 0; i < recipient.length; i++) {\r\n            balances[recipient[i]] = balances[recipient[i]].add(amount[i]); \r\n            totalSupply = totalSupply.add(amount[i]);\r\n            emit Transfer(address(0), recipient[i], amount[i]); \r\n        }\r\n        \r\n        require(totalSupply <= totalSupplyCap, \"capped\");\r\n    }\r\n\r\n    function updateMessage(bytes32 _message) external onlyOwner {\r\n        message = _message;\r\n    }\r\n    \r\n    function updateOwner(address payable _owner) external onlyOwner {\r\n        owner = _owner;\r\n    }\r\n    \r\n    function updateResolver(address _resolver) external onlyOwner {\r\n        resolver = _resolver;\r\n    }\r\n    \r\n    function updateTransferability(bool _transferable) external onlyOwner {\r\n        transferable = _transferable;\r\n    }\r\n}\r\n\r\n/*\r\nThe MIT License (MIT)\r\nCopyright (c) 2018 Murray Software, LLC.\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\ncontract CloneFactory {\r\n    function createClone(address payable target) internal returns (address payable result) {\r\n        bytes20 targetBytes = bytes20(target);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            result := create(0, clone, 0x37)\r\n        }\r\n    }\r\n}\r\n\r\ncontract LexTokenLiteFactory is CloneFactory {\r\n    address payable public lexDAO;\r\n    address payable public template;\r\n    bytes32 public message;\r\n    \r\n    constructor (address payable _lexDAO, address payable _template, bytes32 _message) public {\r\n        lexDAO = _lexDAO;\r\n        template = _template;\r\n        message = _message;\r\n    }\r\n    \r\n    function LaunchLexTokenLite(\r\n        string memory _name, \r\n        string memory _symbol, \r\n        uint8 _decimals, \r\n        address payable _owner, \r\n        address _resolver,\r\n        uint256 ownerSupply,\r\n        uint256 _totalSupplyCap,\r\n        bytes32 _message,\r\n        bool _transferable\r\n    ) payable public returns (address) {\r\n        LexTokenLite lexLite = LexTokenLite(createClone(template));\r\n        \r\n        lexLite.init(\r\n            _name, \r\n            _symbol,\r\n            _decimals, \r\n            _owner, \r\n            _resolver,\r\n            ownerSupply, \r\n            _totalSupplyCap, \r\n            _message, \r\n            _transferable);\r\n        \r\n        (bool success, ) = lexDAO.call.value(msg.value)(\"\");\r\n        require(success, \"!transfer\");\r\n\r\n        return address(lexLite);\r\n    }\r\n    \r\n    function updateLexDAO(address payable _lexDAO) external {\r\n        require(msg.sender == lexDAO, \"!lexDAO\");\r\n        \r\n        lexDAO = _lexDAO;\r\n    }\r\n    \r\n    function updateMessage(bytes32 _message) external {\r\n        require(msg.sender == lexDAO, \"!lexDAO\");\r\n        \r\n        message = _message;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_lexDAO\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_template\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ownerSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupplyCap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"LaunchLexTokenLite\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lexDAO\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_lexDAO\",\"type\":\"address\"}],\"name\":\"updateLexDAO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"}],\"name\":\"updateMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LexTokenLiteFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000057e820d740d5aaaffa3c6de08c5c98d990db00d000000000000000000000000d51153899a050485b12ea2f9e4accf58e6107ea5746f732e6c6578746f6b656e2e65746800000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c53292d8f4ac63534490bc740bccc4f25df346de170eb4c11b175b49005b2fb2"}]}