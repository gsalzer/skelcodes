{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Left {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n  mapping (address => uint256) public balanceOf;\r\n\r\n  string public author;\r\n  uint256 internal PPT;\r\n\r\n  uint public voteSession;\r\n  uint256 public pennyRate;\r\n\r\n  mapping (uint => mapping (bool => uint256)) public upVote;\r\n  mapping (address => mapping (uint => mapping (bool => uint256))) public votes;\r\n\r\n  address constant PROJECT = 0x537ca62B4c232af1ef82294BE771B824cCc078Ff;\r\n  address constant UPVOTE = 0xaf6F22ccB2358857fa31F0B393482a81280B92A5;\r\n  address constant DOWNVOTE = 0x0F64C8026569413747a235fBdDb1F25464077BB3;\r\n\r\n  event Transfer (address indexed from, address indexed to, uint256 value);\r\n\r\n  constructor () public {\r\n    author = \"ASINERUM INTERNATIONAL\";\r\n    name = \"ETHEREUM VOTABLE TOKEN 2\";\r\n    symbol = \"LEFT\";\r\n    decimals = 18;\r\n    PPT = 10**18;\r\n    pennyRate = PPT;\r\n  }\r\n\r\n  function w2p (uint256 value)\r\n  internal view returns (uint256) {\r\n    return value*pennyRate/PPT;\r\n  }\r\n\r\n  function p2w (uint256 value)\r\n  internal view returns (uint256) {\r\n    return value*PPT/pennyRate;\r\n  }\r\n\r\n  function adjust ()\r\n  internal {\r\n    if (upVote[voteSession][true]>totalSupply/2) {\r\n      pennyRate = pennyRate*(100+2)/100;\r\n      voteSession += 1;\r\n    } else if (upVote[voteSession][false]>totalSupply/2) {\r\n      pennyRate = pennyRate*(100-2)/100;\r\n      voteSession += 1;\r\n    }\r\n  }\r\n\r\n  function adjust (address from, uint256 value, bool add)\r\n  internal {\r\n    if (add) balanceOf[from] += value;\r\n    else balanceOf[from] -= value;\r\n    if (votes[from][voteSession][true]>0) {\r\n      upVote[voteSession][true] =\r\n      upVote[voteSession][true] - votes[from][voteSession][true] + balanceOf[from];\r\n      votes[from][voteSession][true] = balanceOf[from];\r\n    } else if (votes[from][voteSession][false]>0) {\r\n      upVote[voteSession][false] =\r\n      upVote[voteSession][false] - votes[from][voteSession][false] + balanceOf[from];\r\n      votes[from][voteSession][false] = balanceOf[from];\r\n    }\r\n    adjust ();\r\n  }\r\n\r\n  function move (address from, address to, uint256 value)\r\n  internal {\r\n    require (value<=balanceOf[from]);\r\n    require (balanceOf[to]+value>balanceOf[to]);\r\n    uint256 sum = balanceOf[from]+balanceOf[to];\r\n    adjust (from, value, false);\r\n    adjust (to, value, true);\r\n    assert (balanceOf[from]+balanceOf[to]==sum);\r\n    emit Transfer (from, to, value);\r\n  }\r\n\r\n  function mint (address to, uint256 value)\r\n  internal {\r\n    require (balanceOf[to]+value>balanceOf[to]);\r\n    uint256 dif = totalSupply-balanceOf[to];\r\n    totalSupply += value;\r\n    adjust (to, value, true);\r\n    assert (totalSupply-balanceOf[to]==dif);\r\n  }\r\n\r\n  function burn (address from, uint256 value)\r\n  internal {\r\n    require (value<=balanceOf[from]);\r\n    uint256 dif = totalSupply-balanceOf[from];\r\n    totalSupply -= value;\r\n    adjust (from, value, false);\r\n    assert (totalSupply-balanceOf[from]==dif);\r\n  }\r\n\r\n  function () public payable {\r\n    download ();\r\n  }\r\n\r\n  function download () public payable returns (bool success) {\r\n    require (msg.value>0, \"#input\");\r\n    mint (msg.sender, w2p(msg.value));\r\n    mint (PROJECT, msg.value/1000);\r\n    return true;\r\n  }\r\n\r\n  function upload (uint256 value) public returns (bool success) {\r\n    require (value>0, \"#input\");\r\n    burn (msg.sender, value);\r\n    msg.sender.transfer (p2w(value));\r\n    return true;\r\n  }\r\n\r\n  function clear () public returns (bool success) {\r\n    require (balanceOf[msg.sender]>0, \"#balance\");\r\n    if (p2w(balanceOf[msg.sender])<=address(this).balance) upload (balanceOf[msg.sender]);\r\n    else upload (w2p(address(this).balance));\r\n    return true;\r\n  }\r\n\r\n  function burn (uint256 value) public returns (bool success) {\r\n    burn (msg.sender, value);\r\n    return true;\r\n  }\r\n\r\n  function transfer (address to, uint256 value) public returns (bool success) {\r\n    if (to==address(this)) upload (value);\r\n    else if (to==UPVOTE) vote (true);\r\n    else if (to==DOWNVOTE) vote (false);\r\n    else move (msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  function vote (bool upvote) public returns (bool success) {\r\n    require (balanceOf[msg.sender]>0);\r\n    upVote[voteSession][upvote] =\r\n    upVote[voteSession][upvote] - votes[msg.sender][voteSession][upvote] + balanceOf[msg.sender];\r\n    votes[msg.sender][voteSession][upvote] = balanceOf[msg.sender];\r\n    if (votes[msg.sender][voteSession][!upvote]>0) {\r\n      upVote[voteSession][!upvote] =\r\n      upVote[voteSession][!upvote] - votes[msg.sender][voteSession][!upvote];\r\n      votes[msg.sender][voteSession][!upvote] = 0;\r\n    }\r\n    adjust ();\r\n    return true;\r\n  }\r\n\r\n  function status (address ua) public view returns (\r\n  uint256 rate,\r\n  uint256 supply,\r\n  uint256 ethFund,\r\n  uint256[2] allVotes,\r\n  uint256[2] userVotes,\r\n  uint256[2] userFund) {\r\n    rate = pennyRate;\r\n    supply = totalSupply;\r\n    ethFund = address(this).balance;\r\n    allVotes[0] = upVote[voteSession][true];\r\n    allVotes[1] = upVote[voteSession][false];\r\n    userVotes[0] = votes[ua][voteSession][true];\r\n    userVotes[1] = votes[ua][voteSession][false];\r\n    userFund[0] = address(ua).balance;\r\n    userFund[1] = balanceOf[address(ua)];\r\n  }\r\n\r\n  // MARKETPLACE\r\n\r\n  mapping (uint => Market) public markets;\r\n  struct Market {\r\n    bool buytoken;\r\n    address maker;\r\n    uint256 value;\r\n    uint256 ppe;\r\n    uint time; }\r\n\r\n  event Sale (uint refno, bool indexed buy, address indexed maker, uint256 indexed ppe, uint time);\r\n  event Get (uint indexed refno, address indexed taker, uint256 value); //<Sale>\r\n\r\n  function ethered (uint256 value)\r\n  internal view returns (bool) {\r\n    require (msg.value*value==0&&msg.value+value>0, \"#values\");\r\n    require (value<=totalSupply, \"#value\");\r\n    return msg.value>0?true:false;\r\n  }\r\n\r\n  function post (uint refno, uint256 value, uint256 ppe, uint time) public payable returns (bool success) {\r\n    require (markets[refno].maker==0x0, \"#refno\");\r\n    require (ppe>0&&ppe<totalSupply, \"#rate\");\r\n    require (time==0||time>now, \"#time\");\r\n    Market memory mi;\r\n    mi.buytoken = ethered (value);\r\n    mi.value = msg.value+value;\r\n    mi.maker = msg.sender;\r\n    mi.time = time;\r\n    mi.ppe = ppe;\r\n    markets[refno] = mi;\r\n    if (!mi.buytoken) move (msg.sender, address(this), value);\r\n    emit Sale (refno, mi.buytoken, mi.maker, mi.ppe, mi.time);\r\n    return true;\r\n  }\r\n\r\n  function unpost (uint refno) public returns (bool success) {\r\n    Market storage mi = markets[refno];\r\n    require (mi.value>0, \"#data\");\r\n    require (mi.maker==msg.sender, \"#user\");\r\n    require (mi.time==0||mi.time<now, \"#time\");\r\n    if (mi.buytoken) mi.maker.transfer (mi.value);\r\n    else move (address(this), mi.maker, mi.value);\r\n    mi.value = 0;\r\n    return true;\r\n  }\r\n\r\n  function acquire (uint refno, uint256 value) public payable returns (bool success) {\r\n    bool buytoken = ethered (value);\r\n    Market storage mi = markets[refno];\r\n    require (mi.maker!=0x0, \"#refno\");\r\n    require (mi.value>0&&mi.ppe>0, \"#data\");\r\n    require (mi.time==0||mi.time>=now, \"#time\");\r\n    require (mi.buytoken==!buytoken, \"#request\");\r\n    uint256 pre = mi.value;\r\n    uint256 remit;\r\n    if (buytoken) {\r\n      remit = msg.value*mi.ppe/PPT;\r\n      require (remit>0&&remit<=mi.value, \"#volume\");\r\n      move (address(this), msg.sender, remit);\r\n      mi.maker.transfer (msg.value);\r\n    } else {\r\n      remit = value*PPT/mi.ppe;\r\n      require (remit>0&&remit<=mi.value, \"#volume\");\r\n      move (msg.sender, mi.maker, value);\r\n      msg.sender.transfer (remit);\r\n    }\r\n    mi.value -= remit;\r\n    assert (mi.value+remit==pre);\r\n    emit Get (refno, msg.sender, remit);\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pennyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upload\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"upVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"download\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"upvote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteSession\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clear\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"acquire\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"}],\"name\":\"unpost\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ua\",\"type\":\"address\"}],\"name\":\"status\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"supply\",\"type\":\"uint256\"},{\"name\":\"ethFund\",\"type\":\"uint256\"},{\"name\":\"allVotes\",\"type\":\"uint256[2]\"},{\"name\":\"userVotes\",\"type\":\"uint256[2]\"},{\"name\":\"userFund\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"name\":\"buytoken\",\"type\":\"bool\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"ppe\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"ppe\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"post\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buy\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ppe\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Get\",\"type\":\"event\"}]","ContractName":"Left","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fffeb877c9d9c266a145b26d7f41e04db1ff60c92156cc35f384cab5539ab000"}]}