{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\n\n\n/* Copyright (C) 2017 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\ncontract INXMMaster {\n\n    address public tokenAddress;\n\n    address public owner;\n\n\n    uint public pauseTime;\n\n    function delegateCallBack(bytes32 myid) external;\n\n    function masterInitialized() public view returns(bool);\n    \n    function isInternal(address _add) public view returns(bool);\n\n    function isPause() public view returns(bool check);\n\n    function isOwner(address _add) public view returns(bool);\n\n    function isMember(address _add) public view returns(bool);\n    \n    function checkIsAuthToGoverned(address _add) public view returns(bool);\n\n    function updatePauseTime(uint _time) public;\n\n    function dAppLocker() public view returns(address _add);\n\n    function dAppToken() public view returns(address _add);\n\n    function getLatestAddress(bytes2 _contractName) public view returns(address payable contractAddress);\n}\n\ncontract Iupgradable {\n\n    INXMMaster public ms;\n    address public nxMasterAddress;\n\n    modifier onlyInternal {\n        require(ms.isInternal(msg.sender));\n        _;\n    }\n\n    modifier isMemberAndcheckPause {\n        require(ms.isPause() == false && ms.isMember(msg.sender) == true);\n        _;\n    }\n\n    modifier onlyOwner {\n        require(ms.isOwner(msg.sender));\n        _;\n    }\n\n    modifier checkPause {\n        require(ms.isPause() == false);\n        _;\n    }\n\n    modifier isMember {\n        require(ms.isMember(msg.sender), \"Not member\");\n        _;\n    }\n\n    /**\n     * @dev Iupgradable Interface to update dependent contract address\n     */\n    function  changeDependentContractAddress() public;\n\n    /**\n     * @dev change master address\n     * @param _masterAddress is the new address\n     */\n    function changeMasterAddress(address _masterAddress) public {\n        if (address(ms) != address(0)) {\n            require(address(ms) == msg.sender, \"Not master\");\n        }\n        ms = INXMMaster(_masterAddress);\n        nxMasterAddress = _masterAddress;\n    }\n\n}\n\n/**\n * @title ERC1132 interface\n * @dev see https://github.com/ethereum/EIPs/issues/1132\n */\ncontract IERC1132 {\n    /**\n     * @dev Reasons why a user's tokens have been locked\n     */\n    mapping(address => bytes32[]) public lockReason;\n\n    /**\n     * @dev locked token structure\n     */\n    struct LockToken {\n        uint256 amount;\n        uint256 validity;\n        bool claimed;\n    }\n\n    /**\n     * @dev Holds number & validity of tokens locked for a given reason for\n     *      a specified address\n     */\n    mapping(address => mapping(bytes32 => LockToken)) public locked;\n\n    /**\n     * @dev Records data of all the tokens Locked\n     */\n    event Locked(\n        address indexed _of,\n        bytes32 indexed _reason,\n        uint256 _amount,\n        uint256 _validity\n    );\n\n    /**\n     * @dev Records data of all the tokens unlocked\n     */\n    event Unlocked(\n        address indexed _of,\n        bytes32 indexed _reason,\n        uint256 _amount\n    );\n    \n    /**\n     * @dev Locks a specified amount of tokens against an address,\n     *      for a specified reason and time\n     * @param _reason The reason to lock tokens\n     * @param _amount Number of tokens to be locked\n     * @param _time Lock time in seconds\n     */\n    function lock(bytes32 _reason, uint256 _amount, uint256 _time)\n        public returns (bool);\n  \n    /**\n     * @dev Returns tokens locked for a specified address for a\n     *      specified reason\n     *\n     * @param _of The address whose tokens are locked\n     * @param _reason The reason to query the lock tokens for\n     */\n    function tokensLocked(address _of, bytes32 _reason)\n        public view returns (uint256 amount);\n    \n    /**\n     * @dev Returns tokens locked for a specified address for a\n     *      specified reason at a specific time\n     *\n     * @param _of The address whose tokens are locked\n     * @param _reason The reason to query the lock tokens for\n     * @param _time The timestamp to query the lock tokens for\n     */\n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\n        public view returns (uint256 amount);\n    \n    /**\n     * @dev Returns total tokens held by an address (locked + transferable)\n     * @param _of The address to query the total balance of\n     */\n    function totalBalanceOf(address _of)\n        public view returns (uint256 amount);\n    \n    /**\n     * @dev Extends lock for a specified reason and time\n     * @param _reason The reason to lock tokens\n     * @param _time Lock extension time in seconds\n     */\n    function extendLock(bytes32 _reason, uint256 _time)\n        public returns (bool);\n    \n    /**\n     * @dev Increase number of tokens locked for a specified reason\n     * @param _reason The reason to lock tokens\n     * @param _amount Number of tokens to be increased\n     */\n    function increaseLockAmount(bytes32 _reason, uint256 _amount)\n        public returns (bool);\n\n    /**\n     * @dev Returns unlockable tokens for a specified address for a specified reason\n     * @param _of The address to query the the unlockable token count of\n     * @param _reason The reason to query the unlockable tokens for\n     */\n    function tokensUnlockable(address _of, bytes32 _reason)\n        public view returns (uint256 amount);\n \n    /**\n     * @dev Unlocks the unlockable tokens of a specified address\n     * @param _of Address of user, claiming back unlockable tokens\n     */\n    function unlock(address _of)\n        public returns (uint256 unlockableTokens);\n\n    /**\n     * @dev Gets the unlockable tokens of a specified address\n     * @param _of The address to query the the unlockable token count of\n     */\n    function getUnlockableTokens(address _of)\n        public view returns (uint256 unlockableTokens);\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value)\n        external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value)\n        external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external view returns (uint256);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/* Copyright (C) 2017 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\ncontract NXMToken is IERC20 {\n    using SafeMath for uint256;\n\n    event WhiteListed(address indexed member);\n\n    event BlackListed(address indexed member);\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    mapping (address => bool) public whiteListed;\n\n    mapping(address => uint) public isLockedForMV;\n\n    uint256 private _totalSupply;\n\n    string public name = \"NXM\";\n    string public symbol = \"NXM\";\n    uint8 public decimals = 18;\n    address public operator;\n\n    modifier canTransfer(address _to) {\n        require(whiteListed[_to]);\n        _;\n    }\n\n    modifier onlyOperator() {\n        if (operator != address(0))\n            require(msg.sender == operator);\n        _;\n    }\n\n    constructor(address _founderAddress, uint _initialSupply) public {\n        _mint(_founderAddress, _initialSupply);\n    }\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param owner address The address which owns the funds.\n    * @param spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(\n        address owner,\n        address spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to be spent.\n    */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param spender The address which will spend the funds.\n    * @param addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    )\n        public\n        returns (bool)\n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].add(addedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param spender The address which will spend the funds.\n    * @param subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].sub(subtractedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Adds a user to whitelist\n    * @param _member address to add to whitelist\n    */\n    function addToWhiteList(address _member) public onlyOperator returns (bool) {\n        whiteListed[_member] = true;\n        emit WhiteListed(_member);\n        return true;\n    }\n\n    /**\n    * @dev removes a user from whitelist\n    * @param _member address to remove from whitelist\n    */\n    function removeFromWhiteList(address _member) public onlyOperator returns (bool) {\n        whiteListed[_member] = false;\n        emit BlackListed(_member);\n        return true;\n    }\n\n    /**\n    * @dev change operator address \n    * @param _newOperator address of new operator\n    */\n    function changeOperator(address _newOperator) public onlyOperator returns (bool) {\n        operator = _newOperator;\n        return true;\n    }\n\n    /**\n    * @dev burns an amount of the tokens of the message sender\n    * account.\n    * @param amount The amount that will be burnt.\n    */\n    function burn(uint256 amount) public returns (bool) {\n        _burn(msg.sender, amount);\n        return true;\n    }\n\n    /**\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n    * @param from address The address which you want to send tokens from\n    * @param value uint256 The amount of token to be burned\n    */\n    function burnFrom(address from, uint256 value) public returns (bool) {\n        _burnFrom(from, value);\n        return true;\n    }\n\n    /**\n    * @dev function that mints an amount of the token and assigns it to\n    * an account.\n    * @param account The account that will receive the created tokens.\n    * @param amount The amount that will be created.\n    */\n    function mint(address account, uint256 amount) public onlyOperator {\n        _mint(account, amount);\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public canTransfer(to) returns (bool) {\n\n        require(isLockedForMV[msg.sender] < now); // if not voted under governance\n        require(value <= _balances[msg.sender]);\n        _transfer(to, value); \n        return true;\n    }\n\n    /**\n    * @dev Transfer tokens to the operator from the specified address\n    * @param from The address to transfer from.\n    * @param value The amount to be transferred.\n    */\n    function operatorTransfer(address from, uint256 value) public onlyOperator returns (bool) {\n        require(value <= _balances[from]);\n        _transferFrom(from, operator, value);\n        return true;\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param from address The address which you want to send tokens from\n    * @param to address The address which you want to transfer to\n    * @param value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        public\n        canTransfer(to)\n        returns (bool)\n    {\n        require(isLockedForMV[from] < now); // if not voted under governance\n        require(value <= _balances[from]);\n        require(value <= _allowed[from][msg.sender]);\n        _transferFrom(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Lock the user's tokens \n     * @param _of user's address.\n     */\n    function lockForMemberVote(address _of, uint _days) public onlyOperator {\n        if (_days.add(now) > isLockedForMV[_of])\n            isLockedForMV[_of] = _days.add(now);\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address to, uint256 value) internal {\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param from address The address which you want to send tokens from\n    * @param to address The address which you want to transfer to\n    * @param value uint256 the amount of tokens to be transferred\n    */\n    function _transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        internal\n    {\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n    * @dev Internal function that mints an amount of the token and assigns it to\n    * an account. This encapsulates the modification of balances such that the\n    * proper events are emitted.\n    * @param account The account that will receive the created tokens.\n    * @param amount The amount that will be created.\n    */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account.\n    * @param account The account whose tokens will be burnt.\n    * @param amount The amount that will be burnt.\n    */\n    function _burn(address account, uint256 amount) internal {\n        require(amount <= _balances[account]);\n\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[account] = _balances[account].sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account, deducting from the sender's allowance for said account. Uses the\n    * internal burn function.\n    * @param account The account whose tokens will be burnt.\n    * @param value The amount that will be burnt.\n    */\n    function _burnFrom(address account, uint256 value) internal {\n        require(value <= _allowed[account][msg.sender]);\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n        value);\n        _burn(account, value);\n    }\n}\n\ninterface IPooledStaking {\n\n    function pushReward(address contractAddress, uint amount) external;\n    function pushBurn(address contractAddress, uint amount) external;\n    function hasPendingActions() external view returns (bool);\n\n    function contractStake(address contractAddress) external view returns (uint);\n    function stakerReward(address staker) external view returns (uint);\n    function stakerDeposit(address staker) external view returns (uint);\n    function stakerContractStake(address staker, address contractAddress) external view returns (uint);\n\n    function withdraw(uint amount) external;\n    function stakerMaxWithdrawable(address stakerAddress) external view returns (uint);\n    function withdrawReward(address stakerAddress) external;\n}\n\n/* Copyright (C) 2020 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see http://www.gnu.org/licenses/ */\ncontract TokenController is IERC1132, Iupgradable {\n    using SafeMath for uint256;\n\n    event Burned(address indexed member, bytes32 lockedUnder, uint256 amount);\n\n    NXMToken public token;\n    IPooledStaking public pooledStaking;\n    uint public minCALockTime = uint(30).mul(1 days);\n    bytes32 private constant CLA = bytes32(\"CLA\");\n\n    /**\n    * @dev Just for interface\n    */\n    function changeDependentContractAddress() public {\n        token = NXMToken(ms.tokenAddress());\n        pooledStaking = IPooledStaking(ms.getLatestAddress('PS'));\n    }\n\n    /**\n     * @dev to change the operator address\n     * @param _newOperator is the new address of operator\n     */\n    function changeOperator(address _newOperator) public onlyInternal {\n        token.changeOperator(_newOperator);\n    }\n\n    /**\n    * @dev Locks a specified amount of tokens,\n    *    for CLA reason and for a specified time\n    * @param _reason The reason to lock tokens, currently restricted to CLA\n    * @param _amount Number of tokens to be locked\n    * @param _time Lock time in seconds\n    */\n    function lock(bytes32 _reason, uint256 _amount, uint256 _time) public checkPause returns (bool)\n    {\n        require(_reason == CLA,\"Restricted to reason CLA\");\n        require(minCALockTime <= _time,\"Should lock for minimum time\");\n        // If tokens are already locked, then functions extendLock or\n        // increaseLockAmount should be used to make any changes\n        _lock(msg.sender, _reason, _amount, _time);\n        return true;\n    }\n\n    /**\n    * @dev Locks a specified amount of tokens against an address,\n    *    for a specified reason and time\n    * @param _reason The reason to lock tokens\n    * @param _amount Number of tokens to be locked\n    * @param _time Lock time in seconds\n    * @param _of address whose tokens are to be locked\n    */\n    function lockOf(address _of, bytes32 _reason, uint256 _amount, uint256 _time)\n        public\n        onlyInternal\n        returns (bool)\n    {\n        // If tokens are already locked, then functions extendLock or\n        // increaseLockAmount should be used to make any changes\n        _lock(_of, _reason, _amount, _time);\n        return true;\n    }\n\n    /**\n    * @dev Extends lock for reason CLA for a specified time\n    * @param _reason The reason to lock tokens, currently restricted to CLA\n    * @param _time Lock extension time in seconds\n    */\n    function extendLock(bytes32 _reason, uint256 _time)\n        public\n        checkPause\n        returns (bool)\n    {\n        require(_reason == CLA,\"Restricted to reason CLA\");\n        _extendLock(msg.sender, _reason, _time);\n        return true;\n    }\n\n    /**\n    * @dev Extends lock for a specified reason and time\n    * @param _reason The reason to lock tokens\n    * @param _time Lock extension time in seconds\n    */\n    function extendLockOf(address _of, bytes32 _reason, uint256 _time)\n        public\n        onlyInternal\n        returns (bool)\n    {\n        _extendLock(_of, _reason, _time);\n        return true;\n    }\n\n    /**\n    * @dev Increase number of tokens locked for a CLA reason\n    * @param _reason The reason to lock tokens, currently restricted to CLA\n    * @param _amount Number of tokens to be increased\n    */\n    function increaseLockAmount(bytes32 _reason, uint256 _amount)\n        public\n        checkPause\n        returns (bool)\n    {    \n        require(_reason == CLA,\"Restricted to reason CLA\");\n        require(_tokensLocked(msg.sender, _reason) > 0);\n        token.operatorTransfer(msg.sender, _amount);\n\n        locked[msg.sender][_reason].amount = locked[msg.sender][_reason].amount.add(_amount);\n        emit Locked(msg.sender, _reason, _amount, locked[msg.sender][_reason].validity);\n        return true;\n    }\n\n    /**\n     * @dev burns tokens of an address\n     * @param _of is the address to burn tokens of\n     * @param amount is the amount to burn\n     * @return the boolean status of the burning process\n     */\n    function burnFrom (address _of, uint amount) public onlyInternal returns (bool) {\n        return token.burnFrom(_of, amount);\n    }\n\n    /**\n    * @dev Burns locked tokens of a user\n    * @param _of address whose tokens are to be burned\n    * @param _reason lock reason for which tokens are to be burned\n    * @param _amount amount of tokens to burn\n    */\n    function burnLockedTokens(address _of, bytes32 _reason, uint256 _amount) public onlyInternal {\n        _burnLockedTokens(_of, _reason, _amount);\n    }\n\n    /**\n    * @dev reduce lock duration for a specified reason and time\n    * @param _of The address whose tokens are locked\n    * @param _reason The reason to lock tokens\n    * @param _time Lock reduction time in seconds\n    */\n    function reduceLock(address _of, bytes32 _reason, uint256 _time) public onlyInternal {\n        _reduceLock(_of, _reason, _time);\n    }\n\n    /**\n    * @dev Released locked tokens of an address locked for a specific reason\n    * @param _of address whose tokens are to be released from lock\n    * @param _reason reason of the lock\n    * @param _amount amount of tokens to release\n    */\n    function releaseLockedTokens(address _of, bytes32 _reason, uint256 _amount)\n        public\n        onlyInternal\n    {\n        _releaseLockedTokens(_of, _reason, _amount);\n    }\n\n    /**\n    * @dev Adds an address to whitelist maintained in the contract\n    * @param _member address to add to whitelist\n    */\n    function addToWhitelist(address _member) public onlyInternal {\n        token.addToWhiteList(_member);\n    }\n\n    /**\n    * @dev Removes an address from the whitelist in the token\n    * @param _member address to remove\n    */\n    function removeFromWhitelist(address _member) public onlyInternal {\n        token.removeFromWhiteList(_member);\n    }\n\n    /**\n    * @dev Mints new token for an address\n    * @param _member address to reward the minted tokens\n    * @param _amount number of tokens to mint\n    */\n    function mint(address _member, uint _amount) public onlyInternal {\n        token.mint(_member, _amount);\n    }\n\n    /**\n     * @dev Lock the user's tokens\n     * @param _of user's address.\n     */\n    function lockForMemberVote(address _of, uint _days) public onlyInternal {\n        token.lockForMemberVote(_of, _days);\n    }\n\n    /**\n    * @dev Unlocks the unlockable tokens against CLA of a specified address\n    * @param _of Address of user, claiming back unlockable tokens against CLA\n    */\n    function unlock(address _of)\n        public\n        checkPause\n        returns (uint256 unlockableTokens)\n    {\n        unlockableTokens = _tokensUnlockable(_of, CLA);\n        if (unlockableTokens > 0) {\n            locked[_of][CLA].claimed = true;\n            emit Unlocked(_of, CLA, unlockableTokens);\n            require(token.transfer(_of, unlockableTokens));\n        }\n    }\n\n    /**\n     * @dev Updates Uint Parameters of a code\n     * @param code whose details we want to update\n     * @param val value to set\n     */\n    function updateUintParameters(bytes8 code, uint val) public {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        if (code == \"MNCLT\") {\n            minCALockTime = val.mul(1 days);\n        } else {\n            revert(\"Invalid param code\");\n        }\n    }\n\n    /**\n    * @dev Gets the validity of locked tokens of a specified address\n    * @param _of The address to query the validity\n    * @param reason reason for which tokens were locked\n    */\n    function getLockedTokensValidity(address _of, bytes32 reason)\n        public\n        view\n        returns (uint256 validity)\n    {\n        validity = locked[_of][reason].validity;\n    }\n\n    /**\n    * @dev Gets the unlockable tokens of a specified address\n    * @param _of The address to query the the unlockable token count of\n    */\n    function getUnlockableTokens(address _of)\n        public\n        view\n        returns (uint256 unlockableTokens)\n    {\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            unlockableTokens = unlockableTokens.add(_tokensUnlockable(_of, lockReason[_of][i]));\n        }\n    }\n\n    /**\n    * @dev Returns tokens locked for a specified address for a\n    *    specified reason\n    *\n    * @param _of The address whose tokens are locked\n    * @param _reason The reason to query the lock tokens for\n    */\n    function tokensLocked(address _of, bytes32 _reason)\n        public\n        view\n        returns (uint256 amount)\n    {\n        return _tokensLocked(_of, _reason);\n    }\n\n    /**\n    * @dev Returns unlockable tokens for a specified address for a specified reason\n    * @param _of The address to query the the unlockable token count of\n    * @param _reason The reason to query the unlockable tokens for\n    */\n    function tokensUnlockable(address _of, bytes32 _reason)\n        public\n        view\n        returns (uint256 amount)\n    {\n        return _tokensUnlockable(_of, _reason);\n    }\n\n    function totalSupply() public view returns (uint256)\n    {\n        return token.totalSupply();\n    }\n\n    /**\n    * @dev Returns tokens locked for a specified address for a\n    *    specified reason at a specific time\n    *\n    * @param _of The address whose tokens are locked\n    * @param _reason The reason to query the lock tokens for\n    * @param _time The timestamp to query the lock tokens for\n    */\n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\n        public\n        view\n        returns (uint256 amount)\n    {\n        return _tokensLockedAtTime(_of, _reason, _time);\n    }\n\n    /**\n    * @dev Returns the total amount of tokens held by an address:\n    *   transferable + locked + staked for pooled staking - pending burns.\n    *   Used by Claims and Governance in member voting to calculate the user's vote weight.\n    *\n    * @param _of The address to query the total balance of\n    * @param _of The address to query the total balance of\n    */\n    function totalBalanceOf(address _of) public view returns (uint256 amount) {\n\n        amount = token.balanceOf(_of);\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            amount = amount.add(_tokensLocked(_of, lockReason[_of][i]));\n        }\n\n        uint stakerReward = pooledStaking.stakerReward(_of);\n        uint stakerDeposit = pooledStaking.stakerDeposit(_of);\n\n        amount = amount.add(stakerDeposit).add(stakerReward);\n    }\n\n    /**\n    * @dev Returns the total locked tokens at time\n    *   Returns the total amount of locked and staked tokens at a given time. Used by MemberRoles to check eligibility\n    *   for withdraw / switch membership. Includes tokens locked for Claim Assessment and staked for Risk Assessment.\n    *   Does not take into account pending burns.\n    *\n    * @param _of member whose locked tokens are to be calculate\n    * @param _time timestamp when the tokens should be locked\n    */\n    function totalLockedBalance(address _of, uint256 _time) public view returns (uint256 amount) {\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            amount = amount.add(_tokensLockedAtTime(_of, lockReason[_of][i], _time));\n        }\n\n        amount = amount.add(pooledStaking.stakerDeposit(_of));\n    }\n\n    /**\n    * @dev Locks a specified amount of tokens against an address,\n    *    for a specified reason and time\n    * @param _of address whose tokens are to be locked\n    * @param _reason The reason to lock tokens\n    * @param _amount Number of tokens to be locked\n    * @param _time Lock time in seconds\n    */\n    function _lock(address _of, bytes32 _reason, uint256 _amount, uint256 _time) internal {\n        require(_tokensLocked(_of, _reason) == 0);\n        require(_amount != 0);\n\n        if (locked[_of][_reason].amount == 0) {\n            lockReason[_of].push(_reason);\n        }\n\n        require(token.operatorTransfer(_of, _amount));\n\n        uint256 validUntil = now.add(_time); //solhint-disable-line\n        locked[_of][_reason] = LockToken(_amount, validUntil, false);\n        emit Locked(_of, _reason, _amount, validUntil);\n    }\n\n    /**\n    * @dev Returns tokens locked for a specified address for a\n    *    specified reason\n    *\n    * @param _of The address whose tokens are locked\n    * @param _reason The reason to query the lock tokens for\n    */\n    function _tokensLocked(address _of, bytes32 _reason)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        if (!locked[_of][_reason].claimed) {\n            amount = locked[_of][_reason].amount;\n        }\n    }\n\n    /**\n    * @dev Returns tokens locked for a specified address for a\n    *    specified reason at a specific time\n    *\n    * @param _of The address whose tokens are locked\n    * @param _reason The reason to query the lock tokens for\n    * @param _time The timestamp to query the lock tokens for\n    */\n    function _tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        if (locked[_of][_reason].validity > _time) {\n            amount = locked[_of][_reason].amount;\n        }\n    }\n\n    /**\n    * @dev Extends lock for a specified reason and time\n    * @param _of The address whose tokens are locked\n    * @param _reason The reason to lock tokens\n    * @param _time Lock extension time in seconds\n    */\n    function _extendLock(address _of, bytes32 _reason, uint256 _time) internal {\n        require(_tokensLocked(_of, _reason) > 0);\n        emit Unlocked(_of, _reason, locked[_of][_reason].amount);\n        locked[_of][_reason].validity = locked[_of][_reason].validity.add(_time);\n        emit Locked(_of, _reason, locked[_of][_reason].amount, locked[_of][_reason].validity);\n    }\n\n    /**\n    * @dev reduce lock duration for a specified reason and time\n    * @param _of The address whose tokens are locked\n    * @param _reason The reason to lock tokens\n    * @param _time Lock reduction time in seconds\n    */\n    function _reduceLock(address _of, bytes32 _reason, uint256 _time) internal {\n        require(_tokensLocked(_of, _reason) > 0);\n        emit Unlocked(_of, _reason, locked[_of][_reason].amount);\n        locked[_of][_reason].validity = locked[_of][_reason].validity.sub(_time);\n        emit Locked(_of, _reason, locked[_of][_reason].amount, locked[_of][_reason].validity);\n    }\n\n    /**\n    * @dev Returns unlockable tokens for a specified address for a specified reason\n    * @param _of The address to query the the unlockable token count of\n    * @param _reason The reason to query the unlockable tokens for\n    */\n    function _tokensUnlockable(address _of, bytes32 _reason) internal view returns (uint256 amount)\n    {\n        if (locked[_of][_reason].validity <= now && !locked[_of][_reason].claimed) {\n            amount = locked[_of][_reason].amount;\n        }\n    }\n\n    /**\n    * @dev Burns locked tokens of a user\n    * @param _of address whose tokens are to be burned\n    * @param _reason lock reason for which tokens are to be burned\n    * @param _amount amount of tokens to burn\n    */\n    function _burnLockedTokens(address _of, bytes32 _reason, uint256 _amount) internal {\n        uint256 amount = _tokensLocked(_of, _reason);\n        require(amount >= _amount);\n\n        if (amount == _amount) {\n            locked[_of][_reason].claimed = true;\n        }\n\n        locked[_of][_reason].amount = locked[_of][_reason].amount.sub(_amount);\n        if (locked[_of][_reason].amount == 0) {\n            _removeReason(_of, _reason);\n        }\n        token.burn(_amount);\n        emit Burned(_of, _reason, _amount);\n    }\n\n    /**\n    * @dev Released locked tokens of an address locked for a specific reason\n    * @param _of address whose tokens are to be released from lock\n    * @param _reason reason of the lock\n    * @param _amount amount of tokens to release\n    */\n    function _releaseLockedTokens(address _of, bytes32 _reason, uint256 _amount) internal\n    {\n        uint256 amount = _tokensLocked(_of, _reason);\n        require(amount >= _amount);\n\n        if (amount == _amount) {\n            locked[_of][_reason].claimed = true;\n        }\n\n        locked[_of][_reason].amount = locked[_of][_reason].amount.sub(_amount);\n        if (locked[_of][_reason].amount == 0) {\n            _removeReason(_of, _reason);\n        }\n        require(token.transfer(_of, _amount));\n        emit Unlocked(_of, _reason, _amount);\n    }\n\n    function _removeReason(address _of, bytes32 _reason) internal {\n        uint len = lockReason[_of].length;\n        for (uint i = 0; i < len; i++) {\n            if (lockReason[_of][i] == _reason) {\n                lockReason[_of][i] = lockReason[_of][len.sub(1)];\n                lockReason[_of].pop();\n                break;\n            }\n        }   \n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"bytes32\"}],\"name\":\"getLockedTokensValidity\",\"outputs\":[{\"name\":\"validity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeDependentContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pooledStaking\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"tokensLockedAtTime\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"reduceLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"extendLockOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"totalLockedBalance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"lockForMemberVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensUnlockable\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensLocked\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockReason\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnLockedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"releaseLockedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"code\",\"type\":\"bytes8\"},{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"updateUintParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ms\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getUnlockableTokens\",\"outputs\":[{\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCALockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_masterAddress\",\"type\":\"address\"}],\"name\":\"changeMasterAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"validity\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nxMasterAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lockOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockedUnder\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_validity\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"}]","ContractName":"TokenController","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}