{"status":"1","message":"OK","result":[{"SourceCode":"/***\r\n *    ██████╗ ███████╗ ██████╗  ██████╗ \r\n *    ██╔══██╗██╔════╝██╔════╝ ██╔═══██╗\r\n *    ██║  ██║█████╗  ██║  ███╗██║   ██║\r\n *    ██║  ██║██╔══╝  ██║   ██║██║   ██║\r\n *    ██████╔╝███████╗╚██████╔╝╚██████╔╝\r\n *    ╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝ \r\n *    \r\n * https://dego.finance\r\n                                  \r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 dego\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IPowerStrategy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IPowerStrategy {\r\n    function lpIn(address sender, uint256 amount) external;\r\n    function lpOut(address sender, uint256 amount) external;\r\n    \r\n    function getPower(address sender) view  external returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IPool.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IPool {\r\n    function totalSupply( ) external view returns (uint256);\r\n    function balanceOf( address player ) external view returns (uint256);\r\n    function updateStrategyPower( address player ) external;\r\n}\r\n\r\n// File: contracts/library/Governance.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Governance {\r\n\r\n    address public _governance;\r\n\r\n    constructor() public {\r\n        _governance = tx.origin;\r\n    }\r\n\r\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyGovernance {\r\n        require(msg.sender == _governance, \"not governance\");\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address governance)  public  onlyGovernance\r\n    {\r\n        require(governance != address(0), \"new governance the zero address\");\r\n        emit GovernanceTransferred(_governance, governance);\r\n        _governance = governance;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/library/SegmentPowerStrategy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract SegmentPowerStrategy is IPowerStrategy, Governance {\r\n    using SafeMath for uint256;\r\n    ////\r\n    struct degoSegment {\r\n        uint256 min;\r\n        uint256 max;\r\n    }\r\n    struct countSegment {\r\n        uint32 length;\r\n        uint32 curCount;\r\n    }\r\n    struct playerInfo {\r\n        uint256 amount;\r\n        uint8 segIndex;\r\n        uint32 playerId;\r\n        uint32 offset;\r\n    }\r\n\r\n    mapping(address => uint32) public _addressXId;\r\n    mapping(uint32 =>  address ) public _idXAddress;\r\n    mapping(uint8 => degoSegment) public _degoSegment;\r\n    mapping(uint8 => countSegment) public _countSegment;\r\n    mapping(uint8 => mapping(uint32 => uint32)) public _playerIds;\r\n    mapping(uint32 => playerInfo) public _playerMap;\r\n\r\n    uint8[3] public _ruler = [8, 1, 1];\r\n    uint8[3] public _factor = [3, 5, 1];\r\n\r\n    uint8 public _high = 3;\r\n    uint8 public _mid = 2;\r\n    uint8 public _low = 1;\r\n\r\n    uint32 public _playerId = 0;\r\n    uint32 public _base = 100;\r\n    uint32 public _anchor = _base;\r\n    uint32 public _grouthCondition = 100;\r\n    uint32 public _grouthStep = 10;\r\n    uint32 constant public _highMax = 50;\r\n    uint32 constant public _midMax = 50;\r\n\r\n    uint256 constant public  _initMaxValue = 5000 * (10**18);  //500lp,10w usdt,100 eth\r\n\r\n    address public _contractCaller = address(0x0);\r\n\r\n    /**\r\n     * check pool\r\n     */\r\n    modifier isNormalPool(){\r\n        require( msg.sender==_contractCaller,\"invalid pool address!\");\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        _playerId = 0;\r\n\r\n        initSegment();\r\n        updateRuler(_initMaxValue);\r\n    }\r\n\r\n    function lpIn(address sender, uint256 amount) \r\n    isNormalPool()\r\n    external {\r\n\r\n        uint32 playerId = _addressXId[sender];\r\n        if ( playerId > 0 ) {\r\n            _playerMap[playerId].amount = _playerMap[playerId].amount.add(amount);\r\n        } else {\r\n            //new addr\r\n            _playerId = _playerId+1;\r\n            _addressXId[sender] = _playerId;\r\n            _idXAddress[_playerId] = sender;\r\n\r\n            playerId = _playerId;\r\n            _playerMap[playerId].playerId = playerId;\r\n            _playerMap[playerId].amount = amount;\r\n            _playerMap[playerId].segIndex = 0;\r\n            _playerMap[playerId].offset =  0;\r\n\r\n            //update segment\r\n            updateSegment();\r\n        }\r\n\r\n        settlePowerData(playerId);\r\n    }\r\n\r\n    function lpOut(address sender, uint256 amount) \r\n    isNormalPool()\r\n    external{\r\n        uint32 playerId = _addressXId[sender];\r\n        if ( playerId > 0 ) {\r\n            _playerMap[playerId].amount = _playerMap[playerId].amount.sub(amount);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        settlePowerData(playerId);\r\n    }\r\n    \r\n    function getPower(address sender) \r\n    view external\r\n    returns (uint256) {\r\n\r\n        uint32 playerId = _addressXId[sender];\r\n        if ( playerId > 0 ) {\r\n            uint8 segment = _playerMap[playerId].segIndex;\r\n            if(segment>0){\r\n                return uint256(_factor[segment-1]).mul(_playerMap[playerId].amount);\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n\r\n    function setCaller( address caller ) public  onlyGovernance{\r\n        _contractCaller = caller;\r\n    }\r\n\r\n    function updateRuler( uint256 maxCount ) internal{\r\n\r\n        uint256 lastBegin = 0;\r\n        uint256 lastEnd = 0;\r\n        uint256 splitPoint = 0;\r\n        for (uint8 i = 1; i <= _ruler.length; i++) {\r\n            splitPoint = maxCount * _ruler[i - 1]/10;\r\n            if (splitPoint <= 0) {\r\n                splitPoint = 1;\r\n            }\r\n            lastEnd = lastBegin + splitPoint;\r\n            if (i == _ruler.length) {\r\n                lastEnd = maxCount;\r\n            }\r\n            _degoSegment[i].min = lastBegin + 1;\r\n            _degoSegment[i].max = lastEnd;\r\n            lastBegin = lastEnd;\r\n        }\r\n    }\r\n\r\n    function initSegment() internal {    \r\n\r\n        _countSegment[_low].length = 80;\r\n        _countSegment[_mid].length = 10;\r\n        _countSegment[_high].length = 10;\r\n\r\n        _countSegment[_low].curCount = 0;\r\n        _countSegment[_mid].curCount = 0;\r\n        _countSegment[_high].curCount = 0;\r\n    }\r\n\r\n    function updateSegment( ) internal {\r\n\r\n        if (_playerId >= _grouthCondition+_anchor ) {\r\n            if (_countSegment[_high].length + _grouthStep > _highMax) {\r\n                _countSegment[_high].length = _highMax;\r\n            } else {\r\n                _countSegment[_high].length = _countSegment[_high].length+_grouthStep;\r\n            }\r\n\r\n            if (_countSegment[_mid].length + _grouthStep > _midMax) {\r\n                _countSegment[_mid].length = _midMax;\r\n            } else {\r\n                _countSegment[_mid].length = _countSegment[_mid].length+_grouthStep;\r\n            }\r\n            _anchor = _playerId;\r\n        }\r\n    }\r\n\r\n    function hasCountSegmentSlot(uint8 segIndex) internal view returns (bool){\r\n        uint32 value = _countSegment[segIndex].length-_countSegment[segIndex].curCount;\r\n        if (value > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function findSegmentMinPlayer(uint8 segIndex) internal view returns (uint32,uint256){\r\n        uint256 firstMinAmount = _degoSegment[segIndex].max;\r\n        uint256 secondMinAmount = _degoSegment[segIndex].max;\r\n        uint32 minPlayerOffset = 0;\r\n        for (uint8 i = 0; i < _countSegment[segIndex].curCount; i++) {\r\n            uint32 playerId = _playerIds[segIndex][i];\r\n            if( playerId==0 ){\r\n                continue;\r\n            }\r\n            uint256 amount = _playerMap[playerId].amount;\r\n\r\n            //find min amount;\r\n            if ( amount < firstMinAmount) {\r\n                if (firstMinAmount < secondMinAmount) {\r\n                    secondMinAmount = firstMinAmount;\r\n                }\r\n                firstMinAmount = amount;\r\n                minPlayerOffset = i;\r\n            }else{\r\n                //find second min amount\r\n                if(amount < secondMinAmount ){\r\n                    secondMinAmount = amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (minPlayerOffset,secondMinAmount);\r\n    }\r\n\r\n\r\n\r\n    //leave the old segment \r\n    function leaveSwap(uint32 playerId) internal {\r\n\r\n        uint8 originSeg = _playerMap[playerId].segIndex;\r\n        uint32 originOffset = _playerMap[playerId].offset;\r\n\r\n        if(originSeg ==0 ){\r\n            return;\r\n        }\r\n\r\n        uint32 tail = _countSegment[originSeg].curCount - 1;\r\n        uint32 tailPlayerId = _playerIds[originSeg][tail];\r\n\r\n        _playerMap[tailPlayerId].offset = originOffset;\r\n        _playerIds[originSeg][originOffset] = tailPlayerId;\r\n\r\n        _playerIds[originSeg][tail] = 0;\r\n        _countSegment[originSeg].curCount = _countSegment[originSeg].curCount - 1;\r\n\r\n    }\r\n\r\n    //join to a new segment\r\n    function joinSwap(uint32 playerId, uint8 segIndex) internal {\r\n\r\n        uint32 tail = _countSegment[segIndex].curCount;\r\n\r\n        _playerMap[playerId].segIndex = segIndex;\r\n        _playerMap[playerId].offset = tail;\r\n        _playerIds[segIndex][tail] = playerId;\r\n\r\n        _countSegment[segIndex].curCount = _countSegment[segIndex].curCount + 1;\r\n        \r\n        IPool(_contractCaller).updateStrategyPower(_idXAddress[playerId]);\r\n\r\n    }\r\n\r\n    //find the one that need to leave\r\n    function doLeave(uint32 playerId,  uint8 segIndex) internal returns (uint32){\r\n\r\n        uint32 minPlayerOffset;\r\n        uint256 secondMinAmount;\r\n        (minPlayerOffset,secondMinAmount) = findSegmentMinPlayer(segIndex);\r\n\r\n        //check player amount with the second min amount,get the min one;\r\n        uint256 playerAmount = _playerMap[playerId].amount;\r\n        _degoSegment[segIndex].min = secondMinAmount<playerAmount?secondMinAmount:playerAmount;\r\n\r\n        uint32 leftPlayerId = _playerIds[segIndex][minPlayerOffset];\r\n        return leftPlayerId;\r\n    }\r\n\r\n    function joinHigh(uint32 playerId) internal {\r\n        uint8 segIndex = _high;\r\n        leaveSwap(playerId);\r\n        if (hasCountSegmentSlot(segIndex)) {\r\n            joinSwap(playerId, segIndex);\r\n        } else {\r\n            uint32 leftPlayerId = doLeave(playerId,segIndex);\r\n            joinMid(leftPlayerId);\r\n            joinSwap(playerId, segIndex);\r\n\r\n        }\r\n    }\r\n\r\n    function joinMid(uint32 playerId) internal {\r\n        uint8 segIndex = _mid;\r\n        leaveSwap(playerId);\r\n        if (hasCountSegmentSlot(segIndex)) {\r\n            joinSwap(playerId, segIndex);\r\n        } else {\r\n            uint32 leftPlayerId = doLeave(playerId,segIndex);\r\n            joinLow(leftPlayerId);\r\n            joinSwap(playerId, segIndex);\r\n        }\r\n        _degoSegment[segIndex].max = _degoSegment[segIndex + 1].min;\r\n    }\r\n\r\n    function joinLow(uint32 playerId) internal {\r\n\r\n        uint8 segIndex = _low;\r\n        leaveSwap(playerId);\r\n        joinSwap(playerId, segIndex);\r\n        _degoSegment[segIndex].max = _degoSegment[segIndex + 1].min;\r\n        //_low segment length update\r\n        if( _countSegment[segIndex].curCount > _countSegment[segIndex].length){\r\n            _countSegment[segIndex].length = _countSegment[segIndex].curCount;\r\n        }\r\n    }\r\n\r\n    function settlePowerData(uint32 playerId) internal {\r\n\r\n        uint256 amount = _playerMap[playerId].amount;\r\n        uint8 segIndex = 0;\r\n        for (uint8 i = 1; i <= _high; i++) {\r\n            if (amount < _degoSegment[i].max) {\r\n                segIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        if (segIndex == 0) {\r\n            _degoSegment[_high].max = amount;\r\n            segIndex = _high;\r\n        }\r\n\r\n        if (_playerMap[playerId].segIndex == segIndex) {\r\n            return;\r\n        }\r\n\r\n        if (segIndex == _high) {\r\n            joinHigh(playerId);\r\n        } else if (segIndex == _mid) {\r\n            joinMid(playerId);\r\n        } else {\r\n            joinLow(playerId);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"_mid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addressXId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"_idXAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"_playerIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"_playerMap\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"segIndex\",\"type\":\"uint8\"},{\"name\":\"playerId\",\"type\":\"uint32\"},{\"name\":\"offset\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_high\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_low\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_highMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_degoSegment\",\"outputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_base\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ruler\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_initMaxValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_midMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_playerId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_countSegment\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint32\"},{\"name\":\"curCount\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contractCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_grouthStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_anchor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"setCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_factor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_grouthCondition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lpOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lpIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"}]","ContractName":"SegmentPowerStrategy","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ae84259c4cee7c986866e8a916f180cbf27b8cc8821128a534e068ae617c7bc6"}]}