{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/DkargoPrefix.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title DkargoPrefix\r\n/// @notice 디카르고 컨트랙트 여부 식별용 prefix 컨트랙트 정의\r\n/// @author jhhong\r\ncontract DkargoPrefix {\r\n    \r\n    string internal _dkargoPrefix; // 디카르고-프리픽스\r\n    \r\n    /// @author jhhong\r\n    /// @notice 디카르고 프리픽스를 반환한다.\r\n    /// @return 디카르고 프리픽스 (string)\r\n    function getDkargoPrefix() public view returns(string memory) {\r\n        return _dkargoPrefix;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 디카르고 프리픽스를 설정한다.\r\n    /// @param prefix 설정할 프리픽스\r\n    function _setDkargoPrefix(string memory prefix) internal {\r\n        _dkargoPrefix = prefix;\r\n    }\r\n}\r\n\r\n// File: contracts/authority/Ownership.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title Onwership\r\n/// @dev 오너 확인 및 소유권 이전 처리\r\n/// @author jhhong\r\ncontract Ownership {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed old, address indexed expected);\r\n\r\n    /// @author jhhong\r\n    /// @notice 소유자만 접근할 수 있음을 명시한다.\r\n    modifier onlyOwner() {\r\n        require(isOwner() == true, \"Ownership: only the owner can call\");\r\n        _;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 컨트랙트 생성자이다.\r\n    constructor() internal {\r\n        emit OwnershipTransferred(_owner, msg.sender);\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 소유권을 넘겨준다.\r\n    /// @param expected 새로운 오너 계정\r\n    function transferOwnership(address expected) public onlyOwner {\r\n        require(expected != address(0), \"Ownership: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, expected);\r\n        _owner = expected;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 오너 주소를 반환한다.\r\n    /// @return 오너 주소\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 소유자인지 확인한다.\r\n    /// @return 확인 결과 (boolean)\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/SafeMath64.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath64 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        uint64 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint64 a, uint64 b, string memory errorMessage) internal pure returns (uint64) {\r\n        require(b <= a, errorMessage);\r\n        uint64 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint64 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:uint64\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint64 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/chain/Uint64Chain.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/// @title Uint64Chain\r\n/// @notice Uint64 Type 체인 정의 및 관리\r\n/// @dev 시간대 별 이벤트와 같은 TIME-BASE 인덱스 리스트 관리에 쓰인다.\r\n/// @author jhhong\r\ncontract Uint64Chain {\r\n    using SafeMath64 for uint64;\r\n\r\n    // 구조체 : 노드 정보\r\n    struct NodeInfo {\r\n        uint64 prev; // 이전 노드\r\n        uint64 next; // 다음 노드\r\n    }\r\n    // 구조체 : 노드 체인\r\n    struct NodeList {\r\n        uint64 count; // 노드의 총 개수\r\n        uint64 head; // 체인의 머리\r\n        uint64 tail; // 체인의 꼬리\r\n        mapping(uint64 => NodeInfo) map; // 계정에 대한 노드 정보 매핑\r\n    }\r\n\r\n    // 변수 선언\r\n    NodeList private _slist; // 노드 체인 (싱글리스트)\r\n\r\n    // 이벤트 선언\r\n    event Uint64ChainLinked(uint64 indexed node); // 이벤트: 체인에 추가됨\r\n    event Uint64ChainUnlinked(uint64 indexed node); // 이벤트: 체인에서 빠짐\r\n\r\n    /// @author jhhong\r\n    /// @notice 체인에 연결된 원소의 개수를 반환한다.\r\n    /// @return 체인에 연결된 원소의 개수\r\n    function count() public view returns(uint64) {\r\n        return _slist.count;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 체인 헤드 정보를 반환한다.\r\n    /// @return 체인 헤드 정보\r\n    function head() public view returns(uint64) {\r\n        return _slist.head;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 체인 꼬리 정보를 반환한다.\r\n    /// @return 체인 꼬리 정보\r\n    function tail() public view returns(uint64) {\r\n        return _slist.tail;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node의 다음 노드 정보를 반환한다.\r\n    /// @param node 노드 정보 (체인에 연결되어 있을 수도 있고 아닐 수도 있음)\r\n    /// @return node의 다음 노드 정보\r\n    function nextOf(uint64 node) public view returns(uint64) {\r\n        return _slist.map[node].next;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node의 이전 노드 정보를 반환한다.\r\n    /// @param node 노드 정보 (체인에 연결되어 있을 수도 있고 아닐 수도 있음)\r\n    /// @return node의 이전 노드 정보\r\n    function prevOf(uint64 node) public view returns(uint64) {\r\n        return _slist.map[node].prev;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node가 체인에 연결된 상태인지를 확인한다.\r\n    /// @param node 체인 연결 여부를 확인할 노드 주소\r\n    /// @return 연결 여부 (boolean), true: 연결됨(linked), false: 연결되지 않음(unlinked)\r\n    function isLinked(uint64 node) public view returns (bool) {\r\n        if(_slist.count == 1 && _slist.head == node && _slist.tail == node) {\r\n            return true;\r\n        } else {\r\n            return (_slist.map[node].prev == uint64(0) && _slist.map[node].next == uint64(0))? (false) :(true);\r\n        }\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 새로운 노드 정보를 노드 체인에 연결한다.\r\n    /// @param node 노드 체인에 연결할 노드 주소\r\n    function _linkChain(uint64 node) internal {\r\n        require(!isLinked(node), \"Uint64Chain: the node is aleady linked\");\r\n        if(_slist.count == 0) {\r\n            _slist.head = _slist.tail = node;\r\n        } else {\r\n            _slist.map[node].prev = _slist.tail;\r\n            _slist.map[_slist.tail].next = node;\r\n            _slist.tail = node;\r\n        }\r\n        _slist.count = _slist.count.add(1);\r\n        emit Uint64ChainLinked(node);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node 노드를 체인에서 연결 해제한다.\r\n    /// @param node 노드 체인에서 연결 해제할 노드 주소\r\n    function _unlinkChain(uint64 node) internal {\r\n        require(isLinked(node), \"Uint64Chain: the node is aleady unlinked\");\r\n        uint64 tempPrev = _slist.map[node].prev;\r\n        uint64 tempNext = _slist.map[node].next;\r\n        if (_slist.head == node) {\r\n            _slist.head = tempNext;\r\n        }\r\n        if (_slist.tail == node) {\r\n            _slist.tail = tempPrev;\r\n        }\r\n        if (tempPrev != uint64(0)) {\r\n            _slist.map[tempPrev].next = tempNext;\r\n            _slist.map[node].prev = uint64(0);\r\n        }\r\n        if (tempNext != uint64(0)) {\r\n            _slist.map[tempNext].prev = tempPrev;\r\n            _slist.map[node].next = uint64(0);\r\n        }\r\n        _slist.count = _slist.count.sub(1);\r\n        emit Uint64ChainUnlinked(node);\r\n    }\r\n}\r\n\r\n// File: contracts/introspection/ERC165/IERC165.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title IERC165\r\n/// @dev EIP165 interface 선언\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n/// @author jhhong\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/introspection/ERC165/ERC165.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/// @title ERC165\r\n/// @dev EIP165 interface 구현\r\n/// @author jhhong\r\ncontract ERC165 is IERC165 {\r\n    \r\n    mapping(bytes4 => bool) private _infcs; // INTERFACE ID별 지원여부를 저장하기 위한 매핑 변수\r\n\r\n    /// @author jhhong\r\n    /// @notice 컨트랙트 생성자이다.\r\n    /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n    constructor() internal {\r\n        _registerInterface(0x01ffc9a7); // supportsInterface()의 INTERFACE ID 등록\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 컨트랙트가 INTERFACE ID를 지원하는지의 여부를 반환한다.\r\n    /// @param infcid 지원여부를 확인할 INTERFACE ID (Function Selector)\r\n    /// @return 지원여부 (boolean)\r\n    function supportsInterface(bytes4 infcid) external view returns (bool) {\r\n        return _infcs[infcid];\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice INTERFACE ID를 등록한다.\r\n    /// @param infcid 등록할 INTERFACE ID (Function Selector)\r\n    function _registerInterface(bytes4 infcid) internal {\r\n        require(infcid != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _infcs[infcid] = true;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/Address.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /// @dev jhhong add features\r\n    /// add useful functions and modifier definitions\r\n    /// date: 2020.02.24\r\n\r\n    /// @author jhhong\r\n    /// @notice call 방식의 간접 함수 호출을 수행한다.\r\n    /// @param addr 함수 호출할 컨트랙트 주소\r\n    /// @param rawdata Bytes타입의 로우데이터 (함수셀렉터 + 파라메터들)\r\n    /// @return 처리 결과 (bytes type) => abi.decode로 디코딩해줘야 함\r\n    function _call(address addr, bytes memory rawdata) internal returns(bytes memory) {\r\n        (bool success, bytes memory data) = address(addr).call(rawdata);\r\n        require(success == true, \"Address: function(call) call failed\");\r\n        return data;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice delegatecall 방식의 간접 함수 호출을 수행한다.\r\n    /// @param addr 함수 호출할 컨트랙트 주소\r\n    /// @param rawdata Bytes타입의 로우데이터 (함수셀렉터 + 파라메터들)\r\n    /// @return 처리 결과 (bytes type) => abi.decode로 디코딩해줘야 함\r\n    function _dcall(address addr, bytes memory rawdata) internal returns(bytes memory) {\r\n        (bool success, bytes memory data) = address(addr).delegatecall(rawdata);\r\n        require(success == true, \"Address: function(delegatecall) call failed\");\r\n        return data;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice staticcall 방식의 간접 함수 호출을 수행한다.\r\n    /// @dev bool 타입 값을 반환하는 view / pure 함수 CALL 시 사용된다.\r\n    /// @param addr 함수 호출할 컨트랙트 주소\r\n    /// @param rawdata Bytes타입의 로우데이터 (함수셀렉터 + 파라메터들)\r\n    /// @return 처리 결과 (bytes type) => abi.decode로 디코딩해줘야 함\r\n    function _vcall(address addr, bytes memory rawdata) internal view returns(bytes memory) {\r\n        (bool success, bytes memory data) = address(addr).staticcall(rawdata);\r\n        require(success == true, \"Address: function(staticcall) call failed\");\r\n        return data;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/refs/SafeMath.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/DkargoFund.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title DkargoFund\r\n/// @notice 디카르고 펀드 컨트랙트 정의\r\n/// @author jhhong\r\ncontract DkargoFund is Ownership, Uint64Chain, ERC165, DkargoPrefix {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    mapping(uint64 => uint256) private _plans; // 인출 플랜\r\n    address private _beneficier; // 수취인 주소\r\n    address private _token; // 토큰 컨트랙트 주소\r\n    uint256 private _totals; // 플랜에 기록된 총 인출량, 펀드의 보유 토큰량을 초과할 수 없다.\r\n    \r\n    event BeneficierUpdated(address indexed beneficier); // 이벤트: 수취인 변경\r\n    event PlanSet(uint64 time, uint256 amount); // 이벤트: 인출플랜 설정 (amount=0이면 제거)\r\n    event Withdraw(uint256 amount); // 이벤트: 인출\r\n\r\n    /// @author jhhong\r\n    /// @notice 컨트랙트 생성자이다.\r\n    /// @param token 토큰 컨트랙트 주소\r\n    /// @param beneficier 수취인 주소\r\n    constructor(address token, address beneficier) public {\r\n        require(token != address(0), \"DkargoFund: token is null\");\r\n        require(beneficier != address(0), \"DkargoFund: beneficier is null\");\r\n        _setDkargoPrefix(\"fund\"); // 프리픽스 설정 (fund)\r\n        _registerInterface(0x946edbed); // INTERFACE ID 등록 (getDkargoPrefix)\r\n        _token = token;\r\n        _beneficier = beneficier;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 인출금액 수취인을 설정한다.\r\n    /// @dev 수취인 주소로 EOA, CA 다 설정 가능하다.\r\n    /// @param beneficier 설정할 수취인 주소 (address)\r\n    function setBeneficier(address beneficier) onlyOwner public {\r\n        require(beneficier != address(0), \"DkargoFund: beneficier is null\");\r\n        require(beneficier != _beneficier, \"DkargoFund: should be not equal\");\r\n        _beneficier = beneficier;\r\n        emit BeneficierUpdated(beneficier);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 인출 플랜을 추가한다.\r\n    /// @dev amount!=0이면 새 플랜을 추가한다는 의미이다. linkChain 과정이 수행된다. 기존에 설정된 플랜이 있을 경우 덮어쓴다.\r\n    /// amount=0이면 플랜을 삭제한다는 의미이다. unlinkChain 과정이 수행된다. 기존에 설정된 플랜이 없을 경우 revert된다.\r\n    /// time은 현재 시각(block.timestamp)보다 큰 값이어야 한다.\r\n    /// 설정된 플랜들의 모든 amount의 합은 balanceOf(fundCA)를 초과할 수 없다.\r\n    /// @param time 인출 가능한 시각\r\n    /// @param amount 인출 가능한 금액\r\n    function setPlan(uint64 time, uint256 amount) onlyOwner public {\r\n        require(time > block.timestamp, \"DkargoFund: invalid time\");\r\n        _totals = _totals.add(amount); // 추가될 플랜 금액을 총 플랜금액에 합산\r\n        _totals = _totals.sub(_plans[time]); // 총 플랜금액에서 기존 설정된 금액을 차감\r\n        require(_totals <= fundAmount(), \"DkargoFund: over the limit\"); // 총 플랜금액 체크\r\n        _plans[time] = amount; // 플랜 금액 갱신\r\n        emit PlanSet(time, amount); // 이벤트 발생\r\n        if(amount == 0) { // 체인정보 갱신\r\n            _unlinkChain(time); // 기존에 설정되지 않았을 경우, revert(\"AddressChain: the node is aleady unlinked\")\r\n        } else if(isLinked(time) == false) { // 새 설정일 경우에만 체인추가, 기존 설정이 있을 경우, 값만 갱신하고 체인 정보는 갱신하지 않음\r\n            _linkChain(time);\r\n        }\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 토큰을 지정된 수취인에게로 인출한다.\r\n    /// @dev 만료되지 않은 index는 인출 불가능하다. revert!\r\n    /// 설정되지 않은 (혹은 해제된) 플랜 인덱스에 대해서는 revert!\r\n    /// @param index 플랜 인덱스, setPlan에서 넣어줬던 인출 가능 시각이다.\r\n    function withdraw(uint64 index) onlyOwner public {\r\n        require(index <= block.timestamp, \"DkargoFund: an unexpired plan\");\r\n        require(_plans[index] > 0, \"DkargoFund: plan is not set\");\r\n        bytes memory cmd = abi.encodeWithSignature(\"transfer(address,uint256)\", _beneficier, _plans[index]);\r\n        bytes memory data = address(_token)._call(cmd);\r\n        bool result = abi.decode(data, (bool));\r\n        require(result == true, \"DkargoFund: failed to proceed raw-data\");\r\n        _totals = _totals.sub(_plans[index]); // 총 플랜금액에서 기존 설정된 금액을 차감\r\n        emit Withdraw(_plans[index]);\r\n        _plans[index] = 0;\r\n        _unlinkChain(index);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice Fund 컨트랙트의 밸런스를 확인한다.\r\n    /// @return Fund 컨트랙트의 밸런스 (uint256)\r\n    function fundAmount() public view returns(uint256) {\r\n        bytes memory data = address(_token)._vcall(abi.encodeWithSignature(\"balanceOf(address)\", address(this)));\r\n        return abi.decode(data, (uint256));\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 플랜에 기록된 총 금액을 확인한다.\r\n    /// @return 플랜에 기록된 총 금액 (uint256)\r\n    function totalPlannedAmount() public view returns(uint256) {\r\n        return _totals;\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice 플랜 인덱스에 해당하는 인출 금액을 확인한다.\r\n    /// @param index 플랜 인덱스, setPlan에서 넣어줬던 인출 가능 시각이다.\r\n    /// @return 플랜 인덱스에 해당하는 인출 금액 (uint256)\r\n    function plannedAmountOf(uint64 index) public view returns(uint256) {\r\n        return _plans[index];\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 수취인 주소를 확인한다.\r\n    /// @return 수취인 주소 (address)\r\n    function beneficier() public view returns(address) {\r\n        return _beneficier;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 토큰(ERC-20) 주소를 확인한다.\r\n    /// @return 토큰 주소 (address)\r\n    function token() public view returns(address) {\r\n        return _token;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"infcid\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"uint64\"}],\"name\":\"nextOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"plannedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"uint64\"}],\"name\":\"isLinked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlannedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"uint64\"}],\"name\":\"prevOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"head\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDkargoPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficier\",\"type\":\"address\"}],\"name\":\"setBeneficier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"beneficier\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficier\",\"type\":\"address\"}],\"name\":\"BeneficierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlanSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"uint64\"}],\"name\":\"Uint64ChainLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"uint64\"}],\"name\":\"Uint64ChainUnlinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DkargoFund","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005dc60c4d5e75d22588fa17ffeb90a63e535efce00000000000000000000000006b41d51b2357f601b615bf750a9f8a99803a2148","EVMVersion":"constantinople","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e5c4500e0b609cc4477cc5e96979aaef78deff11aebd8842439998c455dc9a1e"}]}