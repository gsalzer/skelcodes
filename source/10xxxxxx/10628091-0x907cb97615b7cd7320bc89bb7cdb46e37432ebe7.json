{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  uint256 public totalDonation;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n */\r\ncontract StandardToken is ERC20Basic, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) internal returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Frens is MintableToken\r\n{\r\n    // Using libraries \r\n    using SafeMath for uint;\r\n\r\n    \r\n    //////////////////////\r\n    // ERC20 token state\r\n    //////////////////////\r\n    \r\n    /**\r\n    These state vars are handled in the OpenZeppelin libraries;\r\n    we display them here for the developer's information.\r\n    ***\r\n    // ERC20Basic - Store account balances\r\n    mapping (address => uint256) public balances;\r\n\r\n    // StandardToken - Owner of account approves transfer of an amount to another account\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    // \r\n    uint256 public totalSupply;\r\n    */\r\n    \r\n    //////////////////////\r\n    // Human token state\r\n    //////////////////////\r\n    string public constant name = \"Fren.community\";\r\n    string public constant symbol = \"Frens\";\r\n    uint8 public constant  decimals = 18;\r\n\r\n    ///////////////////////////////////////////////////////////\r\n    // State vars for custom staking and budget functionality\r\n    ///////////////////////////////////////////////////////////\r\n\r\n    /// Stake minting\r\n    // Minted tokens per second for all stakers\r\n    uint private globalMintRate;\r\n    // Total tokens currently staked\r\n    uint public totalFrensStaked; \r\n\r\n    // struct that will hold user stake\r\n    struct TokenStakeData {\r\n        uint initialStakeBalance;\r\n        uint initialStakeTime;\r\n        uint initialStakePercentage;\r\n        uint initialClaimTime;\r\n    }\r\n    \r\n    // Track all tokens staked\r\n    mapping (address => TokenStakeData) public stakeBalances;\r\n\r\n    // Fire a loggable event when tokens are staked\r\n    event Stake(address indexed staker,  uint256 value);\r\n\r\n    // Fire a loggable event when staked tokens are vested\r\n    event Vest(address indexed vester, uint256 stakedAmount, uint256 stakingGains);\r\n\r\n    //////////////////////////////////////////////////\r\n    /// Begin Frens token functionality\r\n    //////////////////////////////////////////////////\r\n\r\n    /// @dev Frens token constructor\r\n    constructor() public\r\n    {\r\n        // Define owner\r\n        owner = msg.sender;\r\n        //staking not enabled at first to transfer with no burns\r\n        // Define initial owner supply. (ether here is used only to get the decimals right)\r\n        uint _initOwnerSupply = 100000 ether;\r\n        // One-time bulk mint given to owner\r\n        bool _success = mint(msg.sender, _initOwnerSupply);\r\n        // Abort if initial minting failed for whatever reason\r\n        require(_success);\r\n\r\n    }\r\n    \r\n    function donateToFrens (uint256 _value1) public returns (bool) {\r\n        totalDonation = totalDonation.add(_value1);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value1);\r\n    }\r\n    \r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    \r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    uint burn_token = (_value*10)/100;\r\n    uint token_send = _value.sub(burn_token);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(token_send);\r\n    totalSupply = totalSupply.sub(burn_token.div(2));\r\n    totalDonation = totalDonation.add(burn_token.div(2));\r\n    emit Transfer(msg.sender, _to, token_send);\r\n    emit Transfer(msg.sender,address(0),burn_token.div(2));\r\n    return true;\r\n        \r\n}\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    \r\n\r\n    uint burn_token = (_value*10)/100;\r\n    uint token_send = _value.sub(burn_token);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(token_send);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(burn_token.div(2));\r\n    totalDonation = totalDonation.add(burn_token.div(2));\r\n    emit Transfer(_from, _to, token_send);\r\n    emit Transfer(_from,address(0),burn_token.div(2)); \r\n    return true;\r\n\r\n}\r\n    function _burn(address account, uint256 amount) onlyOwner public returns (bool) {\r\n\r\n    balances[account] = balances[account].sub(amount);\r\n    totalSupply = totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n\r\n    /// @dev staking function which allows users to stake an amount of tokens to gain interest for up to 10 days \r\n    function stakeFrens(uint _stakeAmount) external\r\n    {\r\n        // Require that tokens are staked successfully\r\n        require(stakeTokens(_stakeAmount));\r\n    }\r\n\r\n    /// @dev allows users to reclaim any staked tokens\r\n    /// @return bool on success\r\n    function claimFrens() external returns (bool success)\r\n    {\r\n        /// Sanity checks: \r\n        // require that there was some amount vested\r\n        require(stakeBalances[msg.sender].initialStakeBalance > 0);\r\n        // require that time has elapsed\r\n        require(now > stakeBalances[msg.sender].initialStakeTime);\r\n\r\n        // Calculate the time elapsed since the tokens were originally staked\r\n        uint _timePassedSinceStake = now.sub(stakeBalances[msg.sender].initialStakeTime);\r\n\r\n        // Calculate tokens to mint\r\n        uint _tokensToMint = calculateStakeGains(_timePassedSinceStake);\r\n\r\n        // Add the original stake back to the user's balance\r\n        balances[msg.sender] += stakeBalances[msg.sender].initialStakeBalance;\r\n        \r\n        // Subtract stake balance from totalFrensStaked\r\n        totalFrensStaked -= stakeBalances[msg.sender].initialStakeBalance;\r\n        \r\n        // Not spliting stake; mint all new tokens and give them to msg.sender \r\n        mint(msg.sender, _tokensToMint);\r\n        mint(owner, _tokensToMint.div(20)); //used for marketting, websites devs, giveaways and other stuffs\r\n        \r\n        \r\n        // Fire an event to tell the world of the newly vested tokens\r\n        emit Vest(msg.sender, stakeBalances[msg.sender].initialStakeBalance, _tokensToMint);\r\n\r\n        // Clear out stored data from mapping\r\n        stakeBalances[msg.sender].initialStakeBalance = 0;\r\n        stakeBalances[msg.sender].initialStakeTime = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows user to check their staked balance\r\n    function getStakedBalance() view external returns (uint stakedBalance) \r\n    {\r\n        return stakeBalances[msg.sender].initialStakeBalance;\r\n    }\r\n\r\n\r\n    /// @dev stake function reduces the user's total available balance. totalSupply is unaffected\r\n    /// @param _value determines how many tokens a user wants to stake\r\n    function stakeTokens(uint256 _value) private returns (bool success)\r\n    {\r\n        /// Sanity Checks:\r\n        // You can only stake as many tokens as you have\r\n        require(_value <= balances[msg.sender]);\r\n        // You can only stake tokens if  you have not already staked tokens\r\n        require(stakeBalances[msg.sender].initialStakeBalance == 0);\r\n\r\n        // Subtract stake amount from regular token balance\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        \r\n        // Add stake amount to staked balance\r\n        stakeBalances[msg.sender].initialStakeBalance = _value;\r\n\r\n        // Increment the global staked tokens value\r\n        totalFrensStaked += _value;\r\n        \r\n        // Save the time that the stake started\r\n        stakeBalances[msg.sender].initialStakeTime = now;\r\n        \r\n        stakeBalances[msg.sender].initialClaimTime = now;\r\n\r\n\r\n        // Fire an event to tell the world of the newly staked tokens\r\n        emit Stake(msg.sender, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function takeDonatedFrens() external returns (uint claimAmount)\r\n    {\r\n        require(stakeBalances[msg.sender].initialStakeBalance > 10000000000000000000);\r\n    \r\n        require(86400 < now.sub(stakeBalances[msg.sender].initialClaimTime));\r\n        \r\n        uint _amountClaim = totalDonation.div(100);\r\n        uint _amountHave = stakeBalances[msg.sender].initialStakeBalance;\r\n        \r\n        if (_amountHave < _amountClaim) {\r\n            \r\n            mint(msg.sender, _amountHave.div(100));\r\n            \r\n            totalDonation = totalDonation.sub(_amountHave.div(100));\r\n            \r\n        } else {\r\n         \r\n         mint(msg.sender, totalDonation.div(100));\r\n         \r\n         claimAmount = totalDonation.div(100);\r\n         \r\n         totalDonation = totalDonation.sub(totalDonation.div(100));\r\n         \r\n         stakeBalances[msg.sender].initialClaimTime = now;\r\n         \r\n    }     \r\n    \r\n}\r\n\r\n    /// @dev Helper function to claimStake that modularizes the minting via staking calculation \r\n    function calculateStakeGains(uint _timePassedSinceStake) view private returns (uint mintTotal)\r\n    {\r\n        // Store seconds in a day (need it in variable to use SafeMath)\r\n        uint _secondsPerDay = 86400;\r\n        uint _tokensToMint = 0;         // store number of new tokens to be minted\r\n        \r\n        // Determine the amount to be newly minted upon vesting, if any\r\n        if (_timePassedSinceStake >_secondsPerDay) {\r\n            \r\n        \r\n            \r\n           // Tokens were staked for enough time to mint new tokens; determine how many\r\n            if (_timePassedSinceStake > _secondsPerDay.mul(10)) {\r\n                // Tokens were staked for the maximum amount of time (10 days)\r\n                _tokensToMint = stakeBalances[msg.sender].initialStakeBalance.div(10);\r\n            } else if (_secondsPerDay.mul(9) < _timePassedSinceStake && _timePassedSinceStake < _secondsPerDay.mul(10)){\r\n                // Tokens were staked for a mintable amount of time between 9 and 10 days\r\n                _tokensToMint = stakeBalances[msg.sender].initialStakeBalance.div(20);\r\n            } else if (_secondsPerDay.mul(7) < _timePassedSinceStake && _timePassedSinceStake < _secondsPerDay.mul(9)){\r\n                // Tokens were staked for a mintable amount of time between 7 and 9 days\r\n                _tokensToMint = stakeBalances[msg.sender].initialStakeBalance.div(30);\r\n            } else if (_secondsPerDay.mul(6) < _timePassedSinceStake && _timePassedSinceStake < _secondsPerDay.mul(7)){\r\n                // Tokens were staked for a mintable amount of time between 6 and 7 days\r\n                _tokensToMint = stakeBalances[msg.sender].initialStakeBalance.div(40);\r\n            } else if (_secondsPerDay.mul(5) < _timePassedSinceStake && _timePassedSinceStake < _secondsPerDay.mul(6)){\r\n                // Tokens were staked for a mintable amount of time between 5 and 6 days\r\n                _tokensToMint = stakeBalances[msg.sender].initialStakeBalance.div(50);\r\n            } else {\r\n                \r\n                _tokensToMint = 0;\r\n            }\r\n        } \r\n        \r\n        // Return the amount of new tokens to be minted\r\n        return _tokensToMint;\r\n\r\n    }\r\n    \r\n    \r\n\r\n    /// @dev calculateFraction allows us to better handle the Solidity ugliness of not having decimals as a native type \r\n    /// @param _numerator is the top part of the fraction we are calculating\r\n    /// @param _denominator is the bottom part of the fraction we are calculating\r\n    /// @param _precision tells the function how many significant digits to calculate out to\r\n    /// @return quotient returns the result of our fraction calculation\r\n    function calculateFraction(uint _numerator, uint _denominator, uint _precision) pure private returns(uint quotient) \r\n    {\r\n        // Take passed value and expand it to the required precision\r\n        _numerator = _numerator.mul(10 ** (_precision + 1));\r\n        // handle last-digit rounding\r\n        uint _quotient = ((_numerator.div(_denominator)) + 5) / 10;\r\n        return (_quotient);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFrensStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value1\",\"type\":\"uint256\"}],\"name\":\"donateToFrens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeBalances\",\"outputs\":[{\"name\":\"initialStakeBalance\",\"type\":\"uint256\"},{\"name\":\"initialStakeTime\",\"type\":\"uint256\"},{\"name\":\"initialStakePercentage\",\"type\":\"uint256\"},{\"name\":\"initialClaimTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stakeFrens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeDonatedFrens\",\"outputs\":[{\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFrens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakedBalance\",\"outputs\":[{\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakingGains\",\"type\":\"uint256\"}],\"name\":\"Vest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Frens","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e41945c45479c76c809210fb4638fd22427fe16f723dbbe9c37c031a99b0f50e"}]}