{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n interface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external  view returns (uint);\r\n  function transfer(address to, uint value) external  returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) external returns (bool ok);\r\n  function approve(address spender, uint value)external returns (bool ok);\r\n}\r\n\r\n\r\ncontract Sale {\r\n    using SafeMath for uint256;\r\n\r\n  \r\n    uint256 public totalSold;\r\n    ERC20 public Token;\r\n    address payable public owner;\r\n  \r\n    uint256 public collectedETH;\r\n    uint256 public startDate;\r\n\r\n  \r\n  \r\n\r\n    constructor(address _wallet) public {\r\n        owner=msg.sender;\r\n        Token=ERC20(_wallet);\r\n\r\n    }\r\n\r\n   \r\n    // receive FUNCTION\r\n    // converts ETH to TOKEN and sends new TOKEN to the sender\r\n    receive () payable external {\r\n        require(startDate>0 && now.sub(startDate) <= 7 days);\r\n        require(Token.balanceOf(address(this))>0);\r\n        require(msg.value>= 1 ether && msg.value <= 50 ether);\r\n         \r\n          uint256 amount;\r\n          \r\n      if(now.sub(startDate)  <= 1 days)\r\n      {\r\n         amount = msg.value.mul(35);\r\n      }\r\n      else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days)\r\n      {\r\n           amount = msg.value.mul(34);\r\n      }\r\n      else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days)\r\n      {\r\n           amount = msg.value.mul(33);\r\n      }\r\n      else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days)\r\n      {\r\n           amount = msg.value.mul(32);\r\n      }\r\n      else if(now.sub(startDate) > 4 days)\r\n      {\r\n           amount = msg.value.mul(31);\r\n      }\r\n        require(amount<=Token.balanceOf(address(this)));\r\n        totalSold =totalSold.add(amount);\r\n        collectedETH=collectedETH.add(msg.value);\r\n        Token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    // CONTRIBUTE FUNCTION\r\n    // converts ETH to TOKEN and sends new TOKEN to the \r\n    \r\n    function contribute() external payable {\r\n       require(startDate>0 && now.sub(startDate) <= 7 days);\r\n        require(Token.balanceOf(address(this))>0);\r\n        require(msg.value>= 1 ether && msg.value <= 50 ether);\r\n        \r\n        uint256 amount;\r\n        \r\n       if(now.sub(startDate)  <= 1 days)\r\n       {\r\n         amount = msg.value.mul(35);\r\n        }\r\n        else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days)\r\n        {\r\n           amount = msg.value.mul(34);\r\n        }\r\n        else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days)\r\n        {\r\n            amount = msg.value.mul(33);\r\n        }\r\n        else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days)\r\n        {\r\n           amount = msg.value.mul(32);\r\n        }\r\n        else if(now.sub(startDate) > 4 days)\r\n        {\r\n           amount = msg.value.mul(31);\r\n        }\r\n   \r\n        require(amount<=Token.balanceOf(address(this)));\r\n        totalSold =totalSold.add(amount);\r\n        collectedETH=collectedETH.add(msg.value);\r\n        Token.transfer(msg.sender, amount);\r\n    }\r\n    \r\n    //function to get the current price of token per ETH\r\n    \r\n    function getPrice()public view returns(uint256){\r\n        if(startDate==0)\r\n        {\r\n            return 0;\r\n        }\r\n        else if(now.sub(startDate)  <= 1 days)\r\n        {\r\n         return 35;\r\n        }\r\n        else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days)\r\n        {\r\n           return 34;\r\n        }\r\n        else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days)\r\n        {\r\n           return 33;\r\n        }\r\n        else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days)\r\n        {\r\n           return 32;\r\n        }\r\n         else if(now.sub(startDate) > 4 days)\r\n        {\r\n           return 31;\r\n        }\r\n    }\r\n    \r\n    \r\n    //function to change the owner\r\n    //only owner can call this function\r\n    \r\n    function changeOwner(address payable _owner) public {\r\n        require(msg.sender==owner);\r\n        owner=_owner;\r\n    }\r\n    \r\n    //function to withdraw collected ETH\r\n     //only owner can call this function\r\n     \r\n    function withdrawETH()public {\r\n        require(msg.sender==owner && address(this).balance>0 && collectedETH>0);\r\n        uint256 amount=collectedETH;\r\n        collectedETH=0;\r\n        owner.transfer(amount);\r\n    }\r\n    \r\n    //function to withdraw available JUl in this contract\r\n     //only owner can call this function\r\n     \r\n    function withdrawJUL()public{\r\n         require(msg.sender==owner && Token.balanceOf(address(this))>0);\r\n         Token.transfer(owner,Token.balanceOf(address(this)));\r\n    }\r\n    \r\n    //function to start the Sale\r\n    //only owner can call this function\r\n     \r\n    function startSale()public{\r\n        require(msg.sender==owner && startDate==0);\r\n        startDate=now;\r\n    }\r\n    \r\n    //function to return the available JUL in the contract\r\n    function availableJUL()public view returns(uint256){\r\n        return Token.balanceOf(address(this));\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableJUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawJUL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Sale","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005580ab97f226c324c671746a1787524aef42e415","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://66f1193a65e59811d301883f2951aaa9e53dca763797685c2c3c18360f63e6cc"}]}