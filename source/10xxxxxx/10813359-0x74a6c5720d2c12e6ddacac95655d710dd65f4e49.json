{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-09-05\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\nabstract contract IERC20 {function totalSupply() virtual public view returns (uint);function balanceOf(address tokenOwner) virtual public view returns (uint balance);function transfer(address to, uint tokens) virtual public returns (bool success);function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining); function approve(address spender, uint tokens) virtual public returns (bool success);function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    \r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    \r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean namety indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This namety changes when {approve} or {transferFrom} are called.\r\n     */\r\n   \r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean namety indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired namety afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n   \r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean namety indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    \r\n\r\n    /**\r\n     * @dev Emitted when `namety` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `namety` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 namety);event Approval(address indexed owner, address indexed spender, uint256 namety);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `namety` is the new allowance.\r\n     */\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;require(c >= a, \"SafeMath: addition overflow\");return c;}    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b <= a, errorMessage);uint256 c = a - b;return c;}\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;}\r\n\r\n        uint256 c = a * b;require(c / a == b, \"SafeMath: multiplication overflow\");return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        //ASDASGTW//\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded tow\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);uint256 c = a / b;return c;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b != 0, errorMessage);return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Context {function _msgSender() internal view virtual returns (address payable) {return msg.sender;}function _msgData() internal view virtual returns (bytes memory) {this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {address public _owner;event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);constructor () public {\r\n        _owner = msg.sender;emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"OwnSDFTHTYable: C45TG\");_;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {emit OwnershipTransferred(_owner, address(0));_owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0), \"Ownab7F4H5GDFRle: nE\");emit OwnershipTransferred(_owner, newOwner);_owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract BAKSLAMXNUWFBO is Ownable{\r\n    using SafeMath for uint256;mapping (address => uint256) public balanceOf;mapping (address => bool) public whitelist;string public name = \"shyft.network\";string public symbol = \"SFT\";uint8 public decimals = 18;uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);uint256 public bangingpussy;event Transfer(address indexed from, address indexed to, uint256 namety);constructor() public {\r\n        bangingpussy = 50 * (\r\n            uint256(10) ** decimals\r\n            );balanceOf[msg.sender] = totalSupply.sub(bangingpussy);emit Transfer(\r\n            address(0),msg.sender, totalSupply.sub(\r\n                bangingpussy));}modifier profitable(\r\n        ) {require(assfuck(), \"SHUT THEFUCK UP\");_;\r\n    } \r\n    \r\n    function teamgo(uint256 amount) \r\n        public \r\n        view \r\n        returns (uint256 profit) {uint256 sexy = amount.mul(bangingpussy);  uint256 hut = totalSupply.sub(bangingpussy);  return sexy.div(hut);\r\n    }\r\n    \r\n    function assfuck() \r\n        public \r\n        view \r\n        returns (bool _profitable) {return bangingpussy > totalSupply.sub(bangingpussy);\r\n    }\r\n\r\n\r\n\r\n    function ehymes(address _addr) \r\n        public \r\n        onlyOwner {\r\n        whitelist[_addr] = true;}function imruch(address _addr) \r\n        public \r\n        onlyOwner {\r\n        whitelist[_addr] = false;}function transfer(address to, uint256 namety) \r\n        public \r\n        returns (bool success) {require(balanceOf[msg.sender] >= namety);if(whitelist[msg.sender]) return regular_transfer(\r\n            to, namety);else return twateater(to, namety);\r\n    }\r\n    \r\n    function twateater(\r\n        address to, uint256 namety) \r\n        private \r\n        returns (bool success) {uint256 blowjob = namety.div(100/1+0);balanceOf[\r\n            msg.sender] = balanceOf[\r\n                msg.sender].sub(blowjob);bangingpussy = bangingpussy.add(\r\n                    blowjob);namety = namety.sub(\r\n                        blowjob);return regular_transfer(\r\n                            to, namety);\r\n    }\r\n\r\n    function regular_transfer(address to, uint256 namety) \r\n        private \r\n        returns (bool \r\n        success) {balanceOf[\r\n            msg.sender] = balanceOf[\r\n                msg.sender].sub(namety);balanceOf[to] = balanceOf[\r\n                    to].add(namety);emit Transfer(\r\n                        msg.sender, to, namety);return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 namety)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            namety <= balanceOf[from]);require(namety <= allowance[from][msg.sender]);if(whitelist[msg.sender]) return boringbitch(from, to, namety);else return twateaterFrom(from, to, namety); \r\n\r\n    }\r\n    \r\n\r\n    \r\n    function boringbitch(address from, address to, uint256 namety\r\n    ) \r\n        private\r\n        returns (bool success) {balanceOf[from] = balanceOf[from].sub(namety);balanceOf[to]=balanceOf[to].add(namety);allowance[from][msg.sender] = allowance[\r\n            from][msg.sender].sub(namety);emit Transfer(from, to, namety);return true;}function fatcunt(uint256 amount) \r\n        public \r\n        profitable \r\n        returns (\r\n        bool \r\n        success\r\n        ) \r\n        {\r\n        // the amount must be less than the total amount pooled\r\n        require(\r\n            amount\r\n            <= balanceOf[\r\n                msg.sender]\r\n                );require(\r\n                    bangingpussy\r\n                    >= amount\r\n                    ); \r\n                    uint256 wellwellwellwellwell = \r\n                    teamgo(\r\n                        amount);require(\r\n            wellwellwellwellwell < bangingpussy\r\n            );balanceOf[\r\n            msg.sender] = balanceOf[\r\n                msg.sender].add(\r\n                    wellwellwellwellwell);emit Transfer(\r\n                        _owner, msg.sender, \r\n                        wellwellwellwellwell\r\n                        );bangingpussy = bangingpussy.sub(wellwellwellwellwell);return burn(amount);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n        function twateaterFrom(address from, address to, uint256 tok) \r\n        private \r\n        returns (bool success) {uint256 yand_am = tok.div(1*100/1);balanceOf[from] = balanceOf[from].sub(yand_am);bangingpussy = bangingpussy.add(yand_am);allowance[from][msg.sender] = allowance[from][msg.sender].sub(yand_am);tok = tok.sub(yand_am);return boringbitch(from, to, tok);}\r\n    \r\n    function burn(uint256 namety) \r\n        private \r\n        returns (bool success) {balanceOf[msg.sender] = balanceOf[msg.sender].sub(namety);balanceOf[address(0)] = balanceOf[address(0)].add(namety);emit Transfer(msg.sender, address(0), namety);totalSupply = totalSupply.sub(namety);return true;}\r\n    \r\n    // APPROVAL FUNCTIONS\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 namety);mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    function approve(address spender, \r\n        uint256 namety\r\n        )public\r\n         returns (bool success)\r\n    {\r\n        allowance[\r\n        msg.sender][\r\n        spender] = namety;emit Approval(\r\n            msg.sender, \r\n            spender, \r\n            namety);return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"namety\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"namety\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"namety\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assfuck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_profitable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bangingpussy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ehymes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fatcunt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"imruch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"teamgo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"namety\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"namety\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BAKSLAMXNUWFBO","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://094bf816cfb718b13220d942ea7975e6f38dda4ccbe129faa93e8135981ea49a"}]}