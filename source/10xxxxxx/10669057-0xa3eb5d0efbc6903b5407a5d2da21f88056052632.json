{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\n\n\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20Detailed is Initializable, IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract ERC20 is Initializable, Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n\n    uint256[50] private ______gap;\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole is Initializable, Context {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    function initialize(address sender) public initializer {\n        if (!isMinter(sender)) {\n            _addMinter(sender);\n        }\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(_msgSender());\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract ERC20Mintable is Initializable, ERC20, MinterRole {\n    function initialize(address sender) public initializer {\n        MinterRole.initialize(sender);\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the {MinterRole}.\n     */\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract ERC20Burnable is Initializable, Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev See {ERC20-_burnFrom}.\n     */\n    function burnFrom(address account, uint256 amount) public {\n        _burnFrom(account, amount);\n    }\n\n    uint256[50] private ______gap;\n}\n\ninterface ATMTokenInterface {\n    /* Events */\n\n    /**\n        @notice Emitted when a new supply cap has been set\n        @param newCap The new supply cap \n      */\n    event NewCap(uint256 newCap);\n\n    /**\n        @notice Emitted when an address has been granted a vesting schedule\n        @param beneficiary The account address being granted the tokens\n        @param amount The amount of tokens being granted\n        @param deadline The length of time before when the tokens can be claimed\n     */\n    event NewVesting(address beneficiary, uint256 amount, uint256 deadline);\n\n    /**\n        @notice Emitted when a vested amount has been claimed\n        @param beneficiary The address claiming the vested amount\n        @param amount The amount that was claimed\n     */\n    event VestingClaimed(address beneficiary, uint256 amount);\n\n    /**\n        @notice Emitted when an account has had its vesting revoked\n        @param beneficiary The account which had its vesting revoked\n        @param amount The amount being revoked\n        @param deadline The previously set vesting deadline \n     */\n    event RevokeVesting(address beneficiary, uint256 amount, uint256 deadline);\n\n    /**\n    @notice Emitted when a snapshot is created\n    @param id The id of the created snapshot\n    */\n    event Snapshot(uint256 id);\n\n    /* External Functions */\n\n    /**\n     * @notice Sets a new cap on the token's total supply.\n     * @param newcap The new capped amount of tokens\n     */\n    function setCap(uint256 newcap) external;\n\n    /**\n     * @notice Increase account supply of specified token amount\n     * @param account The account to mint tokens for\n     * @param amount The amount of tokens to mint\n     * @return true if successful\n     */\n    function mint(address account, uint256 amount) external returns (bool);\n\n    /** @notice Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Includes a vesting period before address is allowed to use tokens\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     *\n     * @param account The account which tokens will be assigned to\n     * @param amount The amount of tokens to be assigned\n     * @param cliff The length of time (in seconds) after which the tokens will start vesting\n     * @param vestingTime The length of the vesting period (in seconds)\n     */\n    function mintVesting(\n        address account,\n        uint256 amount,\n        uint256 cliff,\n        uint256 vestingTime\n    ) external;\n\n    /**\n     * @notice Revokes the amount vested to an account\n     * @param account The account for which vesting is to be revoked\n     * @param vestingId The Id of the vesting being revoked\n     *\n     */\n    function revokeVesting(address account, uint256 vestingId) external;\n\n    /**\n     *  @notice Withdrawl of tokens upon completion of vesting period\n     *\n     */\n    function withdrawVested() external;\n\n    /**\n        @notice Returns the balance of an account at the time a snapshot was created\n        @param account The account which is being queried\n        @param snapshotId The id of the snapshot being queried\n     */\n    function balanceOfAt(address account, uint256 snapshotId)\n        external\n        view\n        returns (uint256);\n\n    /**\n        @notice Returns the total supply at the time a snapshot was created\n        @param snapshotId The id of the snapshot being queried\n     */\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256);\n}\n\ncontract TInitializable {\n    /* State Variables */\n\n    bool private _isInitialized;\n\n    /** Modifiers */\n\n    /**\n        @notice Checks whether the contract is initialized or not.\n        @dev It throws a require error if the contract is initialized.\n     */\n    modifier isNotInitialized() {\n        require(!_isInitialized, \"CONTRACT_ALREADY_INITIALIZED\");\n        _;\n    }\n\n    /**\n        @notice Checks whether the contract is initialized or not.\n        @dev It throws a require error if the contract is not initialized.\n     */\n    modifier isInitialized() {\n        require(_isInitialized, \"CONTRACT_NOT_INITIALIZED\");\n        _;\n    }\n\n    /* Constructor */\n\n    /** External Functions */\n\n    /**\n        @notice Gets if the contract is initialized.\n        @return true if contract is initialized. Otherwise it returns false.\n     */\n    function initialized() external view returns (bool) {\n        return _isInitialized;\n    }\n\n    /** Internal functions */\n\n    /**\n        @notice It initializes this contract.\n     */\n    function _initialize() internal {\n        _isInitialized = true;\n    }\n\n    /** Private functions */\n}\n\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\nlibrary Arrays {\n   /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n\ninterface IATMSettings {\n    /** Events */\n\n    /**\n        @notice This event is emitted when an ATM is paused.\n        @param atm paused ATM address.\n        @param account address that paused the ATM.\n     */\n    event ATMPaused(address indexed atm, address indexed account);\n\n    /**\n        @notice This event is emitted when an ATM is unpaused.\n        @param atm unpaused ATM address.\n        @param account address that unpaused the ATM.\n     */\n    event ATMUnpaused(address indexed account, address indexed atm);\n\n    /**\n        @notice This event is emitted when the setting for a Market/ATM is set.\n        @param borrowedToken borrowed token address.\n        @param collateralToken collateral token address.\n        @param atm ATM address to set in the given market.\n        @param account address that set the setting.\n     */\n    event MarketToAtmSet(\n        address indexed borrowedToken,\n        address indexed collateralToken,\n        address indexed atm,\n        address account\n    );\n\n    /**\n        @notice This event is emitted when the setting for a Market/ATM is updated.\n        @param borrowedToken borrowed token address.\n        @param collateralToken collateral token address.\n        @param oldAtm the old ATM address in the given market.\n        @param newAtm the new ATM address in the given market.\n        @param account address that updated the setting.\n     */\n    event MarketToAtmUpdated(\n        address indexed borrowedToken,\n        address indexed collateralToken,\n        address indexed oldAtm,\n        address newAtm,\n        address account\n    );\n\n    /**\n        @notice This event is emitted when the setting for a Market/ATM is removed.\n        @param borrowedToken borrowed token address.\n        @param collateralToken collateral token address.\n        @param oldAtm last ATM address in the given market.\n        @param account address that removed the setting.\n     */\n    event MarketToAtmRemoved(\n        address indexed borrowedToken,\n        address indexed collateralToken,\n        address indexed oldAtm,\n        address account\n    );\n\n    /* State Variables */\n\n    /** Modifiers */\n\n    /* Constructor */\n\n    /** External Functions */\n\n    /**\n        @notice It pauses an given ATM.\n        @param atmAddress ATM address to pause.\n     */\n    function pauseATM(address atmAddress) external;\n\n    /**\n        @notice It unpauses an given ATM.\n        @param atmAddress ATM address to unpause.\n     */\n    function unpauseATM(address atmAddress) external;\n\n    /**\n        @notice Gets whether an ATM is paused or not.\n        @param atmAddress ATM address to test.\n        @return true if ATM is paused. Otherwise it returns false.\n     */\n    function isATMPaused(address atmAddress) external view returns (bool);\n\n    /**\n        @notice Sets an ATM for a given market (borrowed token and collateral token).\n        @param borrowedToken borrowed token address.\n        @param collateralToken collateral token address.\n        @param atmAddress ATM address to set.\n     */\n    function setATMToMarket(\n        address borrowedToken,\n        address collateralToken,\n        address atmAddress\n    ) external;\n\n    /**\n        @notice Updates a new ATM for a given market (borrowed token and collateral token).\n        @param borrowedToken borrowed token address.\n        @param collateralToken collateral token address.\n        @param newAtmAddress the new ATM address to update.\n     */\n    function updateATMToMarket(\n        address borrowedToken,\n        address collateralToken,\n        address newAtmAddress\n    ) external;\n\n    /**\n        @notice Removes the ATM address for a given market (borrowed token and collateral token).\n        @param borrowedToken borrowed token address.\n        @param collateralToken collateral token address.\n     */\n    function removeATMToMarket(address borrowedToken, address collateralToken) external;\n\n    /**\n        @notice Gets the ATM configured for a given market (borrowed token and collateral token).\n        @param borrowedToken borrowed token address.\n        @param collateralToken collateral token address.\n        @return the ATM address configured for a given market.\n     */\n    function getATMForMarket(address borrowedToken, address collateralToken)\n        external\n        view\n        returns (address);\n\n    /**\n        @notice Tests whether an ATM is configured for a given market (borrowed token and collateral token) or not.\n        @param borrowedToken borrowed token address.\n        @param collateralToken collateral token address.\n        @param atmAddress ATM address to test.\n        @return true if the ATM is configured for the market. Otherwise it returns false.\n     */\n    function isATMForMarket(\n        address borrowedToken,\n        address collateralToken,\n        address atmAddress\n    ) external view returns (bool);\n}\n\ncontract ATMToken is\n    ATMTokenInterface,\n    ERC20Detailed,\n    ERC20Mintable,\n    ERC20Burnable,\n    TInitializable\n{\n    /**\n     *  @notice ATMToken implements an ERC20 token with a supply cap and a vesting scheduling\n     */\n    using SafeMath for uint256;\n    using Arrays for uint256[];\n\n    /* Modifiers */\n    /**\n        @notice Checks if sender is owner\n        @dev Throws an error if the sender is not the owner\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"CALLER_IS_NOT_OWNER\");\n        _;\n    }\n\n    /**\n        @notice Checks if the platform is paused or not\n        @dev Throws an error is the Teller platform is paused\n     */\n    modifier whenNotPaused() {\n        require(!settings.isATMPaused(atmAddress), \"ATM_IS_PAUSED\");\n        _;\n    }\n\n    /* State Variables */\n    uint256 private _cap;\n    uint256 private _maxVestingsPerWallet;\n    address private _owner;\n    Snapshots private _totalSupplySnapshots;\n    uint256 private _currentSnapshotId;\n    IATMSettings public settings;\n    address public atmAddress;\n\n    /* Structs */\n    struct VestingTokens {\n        address account;\n        uint256 amount;\n        uint256 start;\n        uint256 cliff;\n        uint256 deadline;\n    }\n\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    /* Mappings */\n    mapping(address => mapping(uint256 => VestingTokens)) private _vestingBalances; // Mapping user address to vestings id, which in turn is mapped to the VestingTokens struct\n    mapping(address => uint256) public vestingsCount;\n    mapping(address => uint256) public assignedTokens;\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\n\n    /* Functions */\n\n    function initialize(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 cap,\n        uint256 maxVestingsPerWallet,\n        address atmSettingsAddress,\n        address atm\n    ) public initializer {\n        require(cap > 0, \"CAP_CANNOT_BE_ZERO\");\n        super.initialize(name, symbol, decimals);\n        _cap = cap;\n        _maxVestingsPerWallet = maxVestingsPerWallet;\n        _owner = msg.sender;\n        settings = IATMSettings(atmSettingsAddress);\n        atmAddress = atm;\n    }\n\n    /**\n     * @notice Returns the cap on the token's total supply\n     * @return The supply capped amount\n     */\n    function cap() external view returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @notice Sets a new cap on the token's total supply.\n     * @param newCap The new capped amount of tokens\n     */\n    function setCap(uint256 newCap) external onlyOwner() whenNotPaused() {\n        _cap = newCap;\n        emit NewCap(_cap);\n    }\n\n    /**\n     * @notice Increase account supply of specified token amount\n     * @param account The account to mint tokens for\n     * @param amount The amount of tokens to mint\n     * @return true if successful\n     */\n    function mint(address account, uint256 amount)\n        public\n        onlyOwner()\n        whenNotPaused()\n        returns (bool)\n    {\n        require(account != address(0x0), \"MINT_TO_ZERO_ADDRESS_NOT_ALLOWED\");\n        _beforeTokenTransfer(address(0x0), account, amount);\n        _mint(account, amount);\n        _snapshot();\n        _updateAccountSnapshot(account);\n        _updateTotalSupplySnapshot();\n        return true;\n    }\n\n    /** @notice Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Includes a vesting period before address is allowed to use tokens\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     *\n     * @param account The account which tokens will be assigned to\n     * @param amount The amount of tokens to be assigned\n     * @param cliff The length of time (in seconds) after which the tokens will start vesting\n     * @param vestingTime The length of the vesting period (in seconds)\n     */\n    function mintVesting(\n        address account,\n        uint256 amount,\n        uint256 cliff,\n        uint256 vestingTime\n    ) public onlyOwner() whenNotPaused() {\n        require(account != address(0x0), \"MINT_TO_ZERO_ADDRESS_NOT_ALLOWED\");\n        require(vestingsCount[account] < _maxVestingsPerWallet, \"MAX_VESTINGS_REACHED\");\n        _beforeTokenTransfer(address(0x0), account, amount);\n        uint256 vestingId = vestingsCount[account]++;\n        vestingsCount[account] += 1;\n        VestingTokens memory vestingTokens = VestingTokens(\n            account,\n            amount,\n            block.timestamp,\n            block.timestamp + cliff,\n            block.timestamp + vestingTime\n        );\n        _mint(address(this), amount);\n        _snapshot();\n        _updateAccountSnapshot(address(this));\n        _updateTotalSupplySnapshot();\n        assignedTokens[account] += amount;\n        _vestingBalances[account][vestingId] = vestingTokens;\n        emit NewVesting(account, amount, vestingTime);\n    }\n\n    /**\n     * @notice Revokes the amount vested to an account\n     * @param account The account for which vesting is to be revoked\n     * @param vestingId The Id of the vesting being revoked\n     *\n     */\n    function revokeVesting(address account, uint256 vestingId)\n        public\n        onlyOwner()\n        whenNotPaused()\n    {\n        require(assignedTokens[account] > 0, \"ACCOUNT_DOESNT_HAVE_VESTING\");\n        VestingTokens memory vestingTokens = _vestingBalances[account][vestingId];\n\n        uint256 unvestedTokens = _returnUnvestedTokens(\n            vestingTokens.amount,\n            block.timestamp,\n            vestingTokens.start,\n            vestingTokens.cliff,\n            vestingTokens.deadline\n        );\n        assignedTokens[account] -= unvestedTokens;\n        _burn(address(this), unvestedTokens);\n        _snapshot();\n        _updateAccountSnapshot(address(this));\n        _updateTotalSupplySnapshot();\n        emit RevokeVesting(account, unvestedTokens, vestingTokens.deadline);\n        delete _vestingBalances[account][vestingId];\n    }\n\n    /**\n     *  @notice Withdrawl of tokens upon completion of vesting period\n     *  @return true if successful\n     *\n     */\n    function withdrawVested() public whenNotPaused() {\n        require(assignedTokens[msg.sender] > 0, \"ACCOUNT_DOESNT_HAVE_VESTING\");\n\n        uint256 transferableTokens = _transferableTokens(msg.sender, block.timestamp);\n        approve(msg.sender, transferableTokens);\n        _snapshot();\n        _updateAccountSnapshot(msg.sender);\n        _updateAccountSnapshot(address(this));\n        assignedTokens[msg.sender] -= transferableTokens;\n        emit VestingClaimed(msg.sender, transferableTokens);\n    }\n\n    /**\n     * @notice See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - minted tokens must not cause the total supply to go over the cap.\n     */\n    function _beforeTokenTransfer(address from, address, uint256 amount) internal view {\n        require(\n            from == address(0) && totalSupply().add(amount) <= _cap,\n            \"ERC20_CAP_EXCEEDED\"\n        ); // When minting tokens\n    }\n\n    /**\n     * @notice Checks the balance of an assigned vesting that is eligible for withdrawal\n     * @param _account The account for which the vesting is being queried\n     * @param _time The\n     * @return The amount of tokens eligible for withdrawal\n     */\n    function _transferableTokens(address _account, uint256 _time)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 totalVestings = vestingsCount[_account];\n        uint256 totalAssigned = assignedTokens[_account];\n        uint256 nonTransferable = 0;\n        for (uint256 i = 0; i < totalVestings; i++) {\n            VestingTokens storage vestingTokens = _vestingBalances[_account][i];\n            nonTransferable = _returnUnvestedTokens(\n                vestingTokens.amount,\n                _time,\n                vestingTokens.start,\n                vestingTokens.cliff,\n                vestingTokens.deadline\n            );\n        }\n        uint256 transferable = totalAssigned - nonTransferable;\n        return transferable;\n    }\n\n    /**\n     * @notice Returns the amount of unvested tokens at a given time\n     * @param amount The total number of vested tokens\n     * @param time The time at which vested is being checked\n     * @param start The starting time of the vesting\n     * @param cliff The cliff period\n     * @param deadline The time when vesting is complete\n     * @return The amount of unvested tokens\n     */\n    function _returnUnvestedTokens(\n        uint256 amount,\n        uint256 time,\n        uint256 start,\n        uint256 cliff,\n        uint256 deadline\n    ) internal pure returns (uint256) {\n        if (time >= deadline) {\n            return 0;\n        } else if (time < cliff) {\n            return amount;\n        } else {\n            uint256 eligibleTokens = amount.mul(time.sub(start) / deadline.sub(start));\n            return amount.sub(eligibleTokens);\n        }\n    }\n\n    /**\n        @notice Creates a new snapshot and returns its snapshot id\n        @return The id of the snapshot created\n     */\n    function _snapshot() internal returns (uint256) {\n        _currentSnapshotId = _currentSnapshotId.add(1);\n        uint256 currentId = _currentSnapshotId;\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    /**\n        @notice Returns the balance of an account at the time a snapshot was created\n        @param account The account which is being queried\n        @param snapshotId The id of the snapshot being queried\n     */\n    function balanceOfAt(address account, uint256 snapshotId)\n        external\n        view\n        returns (uint256)\n    {\n        (bool snapshotted, uint256 value) = _valueAt(\n            snapshotId,\n            _accountBalanceSnapshots[account]\n        );\n\n        return snapshotted ? value : balanceOf(account);\n    }\n\n    /**\n        @notice Returns the total supply at the time a snapshot was created\n        @param snapshotId The id of the snapshot being queried\n     */\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n\n        return snapshotted ? value : totalSupply();\n    }\n\n    /**\n        @notice Returns the element from the id array with the index of the smallest value that is larger if not found, unless it doesn't exist\n        @param snapshotId The id of the snapshot being createc\n        @param snapshots The struct of the snapshots being queried\n     */\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots)\n        private\n        view\n        returns (bool, uint256)\n    {\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    /**\n        @notice Creates a snapshot of a given account\n        @param account The account for which the snapshot is being created\n     */\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n    }\n\n    /**\n        @notice Creates a snapshot of the total supply of tokens\n     */\n    function _updateTotalSupplySnapshot() private {\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\n    }\n\n    /**\n        @notice Updates the given snapshot struct with the latest snapshot\n        @param snapshots The snapshot struct being updated\n        @param currentValue The current value at the time of snapshot creation\n     */\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n        uint256 currentId = _currentSnapshotId;\n        snapshots.ids.push(currentId);\n        snapshots.values.push(currentValue);\n    }\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"NewCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"NewVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"RevokeVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingClaimed\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assignedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVestingsPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"atmSettingsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atm\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"}],\"name\":\"mintVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"revokeVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"contract IATMSettings\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawVested\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ATMToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}