{"status":"1","message":"OK","result":[{"SourceCode":"{\"Factory.sol\":{\"content\":\"pragma solidity ^0.6.8;\\n\\nimport \\u0027./Receiver.sol\\u0027;\\n\\ncontract ReceiversFactory {\\n\\n    address public owner;\\n    mapping ( uint256 =\\u003e Receiver ) receiversMap;\\n    uint256 receiverCount = 0;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n    \\n    /* Receivers managing */\\n    function createReceivers(uint8 count) public {\\n        require(msg.sender == owner);\\n        \\n        for (uint8 i = 0; i \\u003c count; i++) {\\n            receiversMap[++receiverCount] = new Receiver();\\n        }\\n    }\\n    \\n    function changeReceiversOwner(address newOwner) public {\\n        require(msg.sender == owner);\\n        \\n        for (uint i = 1; i \\u003c= receiverCount; i++) {\\n            receiversMap[i].changeOwner(newOwner);\\n        }\\n    }\\n    \\n    function getReceiverAddress(uint receiverId) public view returns (address) {\\n        return address(receiversMap[receiverId]);\\n    }\\n    \\n    function getReceiversCount() public view returns (uint) {\\n        return receiverCount;\\n    }\\n    \\n    \\n    /* ERC20 overrides */\\n    function receiverBalance(uint256 idx, address contractAddress) public view returns (uint256) {\\n        return receiversMap[idx].balanceOf(contractAddress);\\n    }\\n    \\n\\n    function sendFunds( uint256 receiverId, address contractAddress, uint256 amount, address receiver ) public returns (bool) {\\n        require(msg.sender == owner);\\n        return receiversMap[receiverId].transfer(contractAddress, amount, receiver);\\n    }\\n\\n}\"},\"Receiver.sol\":{\"content\":\"pragma solidity ^0.6.8;\\n\\n\\nabstract contract ERC20 {\\n    function balanceOf(address tokenOwner) public view virtual returns (uint balance);\\n    function transfer(address to, uint tokens) public virtual returns (bool success);\\n}\\n\\n\\ncontract Receiver {\\n\\n    address public owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /* Owning managing */\\n    function changeOwner(address newOwner) public {\\n        require(msg.sender == owner);\\n        owner = newOwner;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    /* ERC20 overrides */\\n    function transfer(address contractAddress, uint256 amount, address receiver) public returns ( bool ) {\\n        require(msg.sender == owner);\\n        return ERC20(contractAddress).transfer(receiver, amount);\\n    }\\n    \\n    function balanceOf(address contractAddress) public view returns (uint256) {\\n        return ERC20(contractAddress).balanceOf(address(this));\\n    }\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeReceiversOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"}],\"name\":\"createReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverId\",\"type\":\"uint256\"}],\"name\":\"getReceiverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceiversCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"receiverBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ReceiversFactory","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://69b67dc139a7390949a361f9568e10f3fa5b723fc1b53413a3f16f51cac7658a"}]}