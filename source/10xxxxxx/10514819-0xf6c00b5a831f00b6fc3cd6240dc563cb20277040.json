{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n\r\n * GearProtocol's Liquidity Vault\r\n \r\n * Smart contract to decentralize the uniswap liquidity for Gearprotocol, providing proof of liquidity indefinitely!\r\n\r\n * Official Website: \r\nhttps://GearProtocol.com\r\n \r\n */\r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract GearLiquidityVault {\r\n    \r\n    ERC20 constant liquidityToken = ERC20(0x5CE6f7BD479437f534Ec783e95e213CfBEE70F7C);\r\n    \r\n    address owner = msg.sender;\r\n    uint256 public lastTradingFeeDistribution;\r\n    \r\n    uint256 public migrationLock;\r\n    address public migrationRecipient;\r\n    \r\n    \r\n// Has a hardcap of 1% per trading fees distribution in one week.\r\n\r\n    function distributeTradingFees(address recipient, uint256 amount) external {\r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        require(amount < (liquidityBalance / 100)); // Max 1%\r\n        require(lastTradingFeeDistribution + 168 hours < now); // Max once a week \r\n        require(msg.sender == owner);\r\n               liquidityToken.transfer(recipient, amount);\r\n        lastTradingFeeDistribution = now;\r\n    } \r\n    \r\n\r\n// Function allows liquidity to be migrated, after 3 months lockup -preventing abuse.\r\n\r\n\r\n    function startLiquidityMigration(address recipient) external {\r\n        require(msg.sender == owner);\r\n        migrationLock = now + 2160 hours;\r\n        migrationRecipient = recipient;\r\n    }\r\n    \r\n    \r\n// Migrates liquidity to new location, assuming the 3 months lockup has passed -preventing abuse.\r\n\r\n\r\n    function processMigration() external {\r\n        require(msg.sender == owner);\r\n        require(migrationRecipient != address(0));\r\n        require(now > migrationLock);\r\n        \r\n        uint256 liquidityBalance = liquidityToken.balanceOf(address(this));\r\n        liquidityToken.transfer(migrationRecipient, liquidityBalance);\r\n    }  \r\n    \r\n}\r\n\r\n\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeTradingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTradingFeeDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"startLiquidityMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GearLiquidityVault","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4608f0b56aba41f7c3a2bd488ec5544ba0784507248f248394d26cd13a479cdd"}]}