{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface CTokenInterface {\r\n    function exchangeRateStored() external view returns (uint);\r\n    function borrowBalanceStored(address) external view returns (uint);\r\n\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface ListInterface {\r\n    function accounts() external view returns (uint);\r\n    function accountID(address) external view returns (uint64);\r\n    function accountAddr(uint64) external view returns (address);\r\n}\r\n\r\ncontract Helpers {\r\n\r\n    struct CompData {\r\n        uint balanceOfUser;\r\n        uint borrowBalanceStoredUser;\r\n    }\r\n    struct data {\r\n        address user;\r\n        CompData[] tokensData;\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is Helpers {\r\n    \r\n    function getDSAWallets(uint len) public view returns(address[] memory) {\r\n        address[] memory wallets = new address[](len);\r\n        for (uint i = 0; i < len; i++) {\r\n            ListInterface list = ListInterface(0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb);\r\n            wallets[i] = list.accountAddr(uint64(i+1));\r\n        }\r\n        return wallets;\r\n    }\r\n\r\n    function getCompoundData(address owner, address[] memory cAddress) public view returns (CompData[] memory) {\r\n        CompData[] memory tokensData = new CompData[](cAddress.length);\r\n        for (uint i = 0; i < cAddress.length; i++) {\r\n            CTokenInterface cToken = CTokenInterface(cAddress[i]);\r\n            tokensData[i] = CompData(\r\n                cToken.balanceOf(owner),\r\n                cToken.borrowBalanceStored(owner)\r\n            );\r\n        }\r\n\r\n        return tokensData;\r\n    }\r\n\r\n    function getPosition(\r\n        address[] memory owners,\r\n        address[] memory cAddress\r\n    )\r\n        public\r\n        view\r\n        returns (data[] memory)\r\n    {\r\n        data[] memory datas = new data[](owners.length);\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            datas[i] = data(\r\n                owners[i],\r\n                getCompoundData(owners[i], cAddress)\r\n            );\r\n        }\r\n        return datas;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"cAddress\",\"type\":\"address[]\"}],\"name\":\"getCompoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceStoredUser\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.CompData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"getDSAWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cAddress\",\"type\":\"address[]\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceStoredUser\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.CompData[]\",\"name\":\"tokensData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Helpers.data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Resolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://08266c7b9e42f33114f5b3875066d05aae8916e5f04c69e15f223a8ca15211c8"}]}