{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IYFVRewards {\r\n    function stakingPower(address account) external view returns (uint256);\r\n}\r\n\r\ncontract YFVVIPVoteV2 {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 public constant MAX_VOTERS_PER_ITEM = 200;\r\n    uint256 public constant POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM = 10000;\r\n    uint256 public constant VIP_3_VOTE_ITEM = 3;\r\n\r\n    mapping(address => mapping(uint256 => uint8)) public numVoters; // poolAddress -> votingItem (periodFinish) -> numVoters (the number of voters in this round)\r\n    mapping(address => mapping(uint256 => address[MAX_VOTERS_PER_ITEM])) public voters; // poolAddress -> votingItem (periodFinish) -> voters (array)\r\n    mapping(address => mapping(uint256 => mapping(address => bool))) public isInTopVoters; // poolAddress -> votingItem (periodFinish) -> isInTopVoters (map: voter -> in_top (true/false))\r\n    mapping(address => mapping(uint256 => mapping(address => uint64))) public voter2VotingValue; // poolAddress -> votingItem (periodFinish) -> voter2VotingValue (map: voter -> voting value)\r\n\r\n    mapping(address => mapping(uint256 => uint64)) public votingValueMinimums; // poolAddress -> votingItem (proposalId) -> votingValueMin\r\n    mapping(address => mapping(uint256 => uint64)) public votingValueMaximums; // poolAddress -> votingItem (proposalId) -> votingValueMax\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public votingStarttimes; // poolAddress -> votingItem (proposalId) -> voting's starttime\r\n    mapping(address => mapping(uint256 => uint256)) public votingEndtimes; // poolAddress -> votingItem (proposalId) -> voting's endtime\r\n\r\n    mapping(address => uint8) poolVotingValueLeftBitRanges; // poolAddress -> left bit range\r\n    mapping(address => uint8) poolVotingValueRightBitRanges; // poolAddress -> right bit range\r\n\r\n    address public stakeGovernancePool = 0xD120f23438AC0edbBA2c4c072739387aaa70277a; // Stake Pool v2\r\n\r\n    address public governance;\r\n    address public operator; // help to replace weak voter by higher power one\r\n\r\n    event Voted(address poolAddress, address indexed user, uint256 votingItem, uint64 votingValue);\r\n\r\n    constructor () public {\r\n        governance = msg.sender;\r\n        operator = msg.sender;\r\n        // BAL Pool\r\n        poolVotingValueLeftBitRanges[0x62a9fE913eb596C8faC0936fd2F51064022ba22e] = 5;\r\n        poolVotingValueRightBitRanges[0x62a9fE913eb596C8faC0936fd2F51064022ba22e] = 0;\r\n        // YFI Pool\r\n        poolVotingValueLeftBitRanges[0x70b83A7f5E83B3698d136887253E0bf426C9A117] = 10;\r\n        poolVotingValueRightBitRanges[0x70b83A7f5E83B3698d136887253E0bf426C9A117] = 5;\r\n        // BAT Pool\r\n        poolVotingValueLeftBitRanges[0x1c990fC37F399C935625b815975D0c9fAD5C31A1] = 15;\r\n        poolVotingValueRightBitRanges[0x1c990fC37F399C935625b815975D0c9fAD5C31A1] = 10;\r\n        // REN Pool\r\n        poolVotingValueLeftBitRanges[0x752037bfEf024Bd2669227BF9068cb22840174B0] = 20;\r\n        poolVotingValueRightBitRanges[0x752037bfEf024Bd2669227BF9068cb22840174B0] = 15;\r\n        // KNC Pool\r\n        poolVotingValueLeftBitRanges[0x9b74774f55C0351fD064CfdfFd35dB002C433092] = 25;\r\n        poolVotingValueRightBitRanges[0x9b74774f55C0351fD064CfdfFd35dB002C433092] = 20;\r\n        // BTC Pool\r\n        poolVotingValueLeftBitRanges[0xFBDE07329FFc9Ec1b70f639ad388B94532b5E063] = 30;\r\n        poolVotingValueRightBitRanges[0xFBDE07329FFc9Ec1b70f639ad388B94532b5E063] = 25;\r\n        // WETH Pool\r\n        poolVotingValueLeftBitRanges[0x67FfB615EAEb8aA88fF37cCa6A32e322286a42bb] = 35;\r\n        poolVotingValueRightBitRanges[0x67FfB615EAEb8aA88fF37cCa6A32e322286a42bb] = 30;\r\n        // LINK Pool\r\n        poolVotingValueLeftBitRanges[0x196CF719251579cBc850dED0e47e972b3d7810Cd] = 40;\r\n        poolVotingValueRightBitRanges[0x196CF719251579cBc850dED0e47e972b3d7810Cd] = 35;\r\n    }\r\n\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setOperator(address _operator) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        operator = _operator;\r\n    }\r\n\r\n    function setVotingConfig(address poolAddress, uint256 votingItem, uint64 minValue, uint64 maxValue, uint256 starttime, uint256 endtime) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(minValue < maxValue, \"Invalid voting range\");\r\n        require(starttime < endtime, \"Invalid time range\");\r\n        require(endtime > block.timestamp, \"Endtime has passed\");\r\n        votingValueMinimums[poolAddress][votingItem] = minValue;\r\n        votingValueMaximums[poolAddress][votingItem] = maxValue;\r\n        votingStarttimes[poolAddress][votingItem] = starttime;\r\n        votingEndtimes[poolAddress][votingItem] = endtime;\r\n    }\r\n\r\n    function setStakeGovernancePool(address _stakeGovernancePool) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        stakeGovernancePool = _stakeGovernancePool;\r\n    }\r\n\r\n    function setPoolVotingValueBitRanges(address poolAddress, uint8 leftBitRange, uint8 rightBitRange) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        poolVotingValueLeftBitRanges[poolAddress] = leftBitRange;\r\n        poolVotingValueRightBitRanges[poolAddress] = rightBitRange;\r\n    }\r\n\r\n    function isVotable(address poolAddress, address account, uint256 votingItem) public view returns (bool) {\r\n        if (block.timestamp < votingStarttimes[poolAddress][votingItem]) return false; // vote is not open yet\r\n        if (block.timestamp > votingEndtimes[poolAddress][votingItem]) return false; // vote is closed\r\n\r\n        IYFVRewards rewards = IYFVRewards(poolAddress);\r\n        // hasn't any staking power\r\n        if (rewards.stakingPower(account) == 0) return false;\r\n\r\n        // number of voters is under limit still\r\n        if (numVoters[poolAddress][votingItem] < MAX_VOTERS_PER_ITEM) return true;\r\n        return false;\r\n    }\r\n\r\n    // for VIP: multiply by 100 for more precise\r\n    function averageVotingValueX100(address poolAddress, uint256 votingItem) public view returns (uint64) {\r\n        if (numVoters[poolAddress][votingItem] == 0) return 0; // no votes\r\n        uint256 totalStakingPower = 0;\r\n        uint256 totalWeightedVotingValue = 0;\r\n        IYFVRewards rewards = IYFVRewards(poolAddress);\r\n        for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\r\n            address voter = voters[poolAddress][votingItem][i];\r\n            totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));\r\n            totalWeightedVotingValue = totalWeightedVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));\r\n        }\r\n        return (uint64) (totalWeightedVotingValue.mul(100).div(totalStakingPower));\r\n    }\r\n\r\n    // multiply by 100 for more precise\r\n    function averageVotingValueByBitsX100(address poolAddress, uint256 votingItem, uint8 leftBitRange, uint8 rightBitRange) public view returns (uint64) {\r\n        if (numVoters[poolAddress][votingItem] == 0) return 0; // no votes\r\n        uint256 totalStakingPower = 0;\r\n        uint256 totalWeightedVotingValue = 0;\r\n        IYFVRewards rewards = IYFVRewards(poolAddress);\r\n        uint64 bitmask = (uint64(1) << (leftBitRange - rightBitRange)) - 1;\r\n        for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {\r\n            address voter = voters[poolAddress][votingItem][i];\r\n            totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));\r\n            uint64 votingValueByBits = (voter2VotingValue[poolAddress][votingItem][voter] >> rightBitRange) & bitmask;\r\n            totalWeightedVotingValue = totalWeightedVotingValue.add(rewards.stakingPower(voter).mul(votingValueByBits));\r\n        }\r\n        return (uint64) (totalWeightedVotingValue.mul(100).div(totalStakingPower));\r\n    }\r\n\r\n    function verifyOfflineVote(address poolAddress, uint256 votingItem, uint64 votingValue, uint256 timestamp, address voter, uint8 v, bytes32 r, bytes32 s) public pure returns (bool) {\r\n        bytes32 signatureHash = keccak256(abi.encodePacked(voter, poolAddress, votingItem, votingValue, timestamp));\r\n        return voter == ecrecover(signatureHash, v, r, s);\r\n    }\r\n\r\n    // if more than 200 voters participate, we may need to replace a weak (low power) voter by a stronger (high power) one\r\n    function replaceVoter(address poolAddress, uint256 votingItem, uint8 voterIndex, address newVoter) public {\r\n        require(msg.sender == governance || msg.sender == operator, \"!governance && !operator\");\r\n        require(numVoters[poolAddress][votingItem] > voterIndex, \"index is out of range\");\r\n        require(!isInTopVoters[poolAddress][votingItem][newVoter], \"newVoter is in the list already\");\r\n        IYFVRewards rewards = IYFVRewards(poolAddress);\r\n        address currentVoter = voters[poolAddress][votingItem][voterIndex];\r\n        require(rewards.stakingPower(currentVoter) < rewards.stakingPower(newVoter), \"newVoter does not have high power than currentVoter\");\r\n        isInTopVoters[poolAddress][votingItem][currentVoter] = false;\r\n        isInTopVoters[poolAddress][votingItem][newVoter] = true;\r\n        voters[poolAddress][votingItem][voterIndex] = newVoter;\r\n    }\r\n\r\n    function vote(address poolAddress, uint256 votingItem, uint64 votingValue) public {\r\n        require(block.timestamp >= votingStarttimes[poolAddress][votingItem], \"voting is not open yet\");\r\n        require(block.timestamp <= votingEndtimes[poolAddress][votingItem], \"voting is closed\");\r\n        if (votingValueMinimums[poolAddress][votingItem] > 0 || votingValueMaximums[poolAddress][votingItem] > 0) {\r\n            require(votingValue >= votingValueMinimums[poolAddress][votingItem], \"votingValue is smaller than minimum accepted value\");\r\n            require(votingValue <= votingValueMaximums[poolAddress][votingItem], \"votingValue is greater than maximum accepted value\");\r\n        }\r\n\r\n        if (!isInTopVoters[poolAddress][votingItem][msg.sender]) {\r\n            require(isVotable(poolAddress, msg.sender, votingItem), \"This account is not votable\");\r\n            if (numVoters[poolAddress][votingItem] < MAX_VOTERS_PER_ITEM) {\r\n                isInTopVoters[poolAddress][votingItem][msg.sender] = true;\r\n                voters[poolAddress][votingItem][numVoters[poolAddress][votingItem]] = msg.sender;\r\n                ++numVoters[poolAddress][votingItem];\r\n            }\r\n        }\r\n        voter2VotingValue[poolAddress][votingItem][msg.sender] = votingValue;\r\n        emit Voted(poolAddress, msg.sender, votingItem, votingValue);\r\n    }\r\n\r\n    function averageVotingValue(address poolAddress, uint256) public view returns (uint16) {\r\n        uint8 numInflationVoters = numVoters[stakeGovernancePool][POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM];\r\n        if (numInflationVoters == 0) return 0; // no votes\r\n\r\n        uint8 leftBitRange = poolVotingValueLeftBitRanges[poolAddress];\r\n        uint8 rightBitRange = poolVotingValueRightBitRanges[poolAddress];\r\n        if (leftBitRange == 0 && rightBitRange == 0) return 0; // we dont know about this pool\r\n        // empowerment Factor (every 100 is 5%) (slider 0% - 5% - 10% - .... - 80%)\r\n        uint64 empowermentFactor = averageVotingValueByBitsX100(stakeGovernancePool, VIP_3_VOTE_ITEM, leftBitRange, rightBitRange) / 20;\r\n        if (empowermentFactor > 80) empowermentFactor = 80; // minimum 0% -> maximum 80%\r\n        uint64 farmingFactor = 100 - empowermentFactor; // minimum 20% -> maximum 100%\r\n\r\n        uint256 totalFarmingPower = 0;\r\n        uint256 totalStakingPower = 0;\r\n        uint256 totalWeightedFarmingVotingValue = 0;\r\n        uint256 totalWeightedStakingVotingValue = 0;\r\n        IYFVRewards farmingPool = IYFVRewards(poolAddress);\r\n        IYFVRewards stakingPool = IYFVRewards(stakeGovernancePool);\r\n        uint64 bitmask = (uint64(1) << (leftBitRange - rightBitRange)) - 1;\r\n        for (uint8 i = 0; i < numInflationVoters; i++) {\r\n            address voter = voters[stakeGovernancePool][POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM][i];\r\n            totalFarmingPower = totalFarmingPower.add(farmingPool.stakingPower(voter));\r\n            totalStakingPower = totalStakingPower.add(stakingPool.stakingPower(voter));\r\n            uint64 votingValueByBits = (voter2VotingValue[stakeGovernancePool][POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM][voter] >> rightBitRange) & bitmask;\r\n            totalWeightedFarmingVotingValue = totalWeightedFarmingVotingValue.add(farmingPool.stakingPower(voter).mul(votingValueByBits));\r\n            totalWeightedStakingVotingValue = totalWeightedStakingVotingValue.add(stakingPool.stakingPower(voter).mul(votingValueByBits));\r\n        }\r\n        uint64 farmingAvgValue = (uint64) (totalWeightedFarmingVotingValue.mul(farmingFactor).div(totalFarmingPower));\r\n        uint64 stakingAvgValue = (uint64) (totalWeightedStakingVotingValue.mul(empowermentFactor).div(totalStakingPower));\r\n        uint16 avgValue = (uint16) ((farmingAvgValue + stakingAvgValue) / 100);\r\n        // 0 -> x0.2, 1 -> x0.25, ..., 20 -> x1.20\r\n        if (avgValue > 20) return 120;\r\n        return 20 + avgValue * 5;\r\n    }\r\n\r\n    function votingValueGovernance(address poolAddress, uint256 votingItem, uint16) public view returns (uint16) {\r\n        return averageVotingValue(poolAddress, votingItem);\r\n    }\r\n\r\n    // governance can drain tokens that are sent here by mistake\r\n    function emergencyERC20Drain(ERC20 token, uint amount) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        token.transfer(governance, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"votingValue\",\"type\":\"uint64\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VOTERS_PER_ITEM\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIP_3_VOTE_ITEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"averageVotingValue\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"leftBitRange\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rightBitRange\",\"type\":\"uint8\"}],\"name\":\"averageVotingValueByBitsX100\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"}],\"name\":\"averageVotingValueX100\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInTopVoters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"}],\"name\":\"isVotable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numVoters\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"voterIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"newVoter\",\"type\":\"address\"}],\"name\":\"replaceVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"leftBitRange\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rightBitRange\",\"type\":\"uint8\"}],\"name\":\"setPoolVotingValueBitRanges\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeGovernancePool\",\"type\":\"address\"}],\"name\":\"setStakeGovernancePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"minValue\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxValue\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"setVotingConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeGovernancePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"votingValue\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"verifyOfflineVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"votingValue\",\"type\":\"uint64\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voter2VotingValue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingEndtimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingStarttimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingItem\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"votingValueGovernance\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingValueMaximums\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingValueMinimums\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YFVVIPVoteV2","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://35a263db13318bf6e4c73292bbbbc7b74dbf2ca5f418540a47939b149935476b"}]}