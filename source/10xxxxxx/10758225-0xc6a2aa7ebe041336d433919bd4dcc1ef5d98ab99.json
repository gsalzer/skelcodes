{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/* \r\n\r\n    _    __  __ ____  _     _____ ____       _     _       _       \r\n   / \\  |  \\/  |  _ \\| |   | ____/ ___| ___ | | __| |     (_) ___  \r\n  / _ \\ | |\\/| | |_) | |   |  _|| |  _ / _ \\| |/ _` |     | |/ _ \\ \r\n / ___ \\| |  | |  __/| |___| |__| |_| | (_) | | (_| |  _  | | (_) |\r\n/_/   \\_\\_|  |_|_|   |_____|_____\\____|\\___/|_|\\__,_| (_) |_|\\___/ \r\n                                                                                                \r\n\r\n    Ample Gold $AMPLG is a goldpegged defi protocol that is based on Ampleforths elastic tokensupply model. \r\n    AMPLG is designed to maintain its base price target of 0.01g of Gold with a progammed inflation adjustment (rebase).\r\n    \r\n    Forked from Ampleforth: https://github.com/ampleforth/uFragments (Credits to Ampleforth team for implementation of rebasing on the ethereum network)\r\n    \r\n    GPL 3.0 license\r\n    \r\n    AMPLG_OTC.sol - AMPLG OTC\r\n  \r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract Initializable {\r\n\r\n  bool private initialized;\r\n  bool private initializing;\r\n\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  function isConstructor() private view returns (bool) {\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ncontract Ownable is Initializable {\r\n\r\n  address private _owner;\r\n  uint256 private _ownershipLocked;\r\n\r\n  event OwnershipLocked(address lockedOwner);\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  function initialize(address sender) internal initializer {\r\n    _owner = sender;\r\n  _ownershipLocked = 0;\r\n  }\r\n\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(_ownershipLocked == 0);\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n  \r\n  // Set _ownershipLocked flag to lock contract owner forever\r\n  function lockOwnership() public onlyOwner {\r\n  require(_ownershipLocked == 0);\r\n  emit OwnershipLocked(_owner);\r\n    _ownershipLocked = 1;\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\n\r\ninterface IAMPLG {\r\n    function totalSupply() external view returns (uint256);\r\n    function rebaseMonetary(uint256 epoch, int256 supplyDelta) external returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract AMPLGOTC is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n\r\n  IAMPLG public token;\r\n  address public wallet;\r\n  uint256 public rate;\r\n  uint256 public weiRaised;\r\n  \r\n  bool public isFunding;\r\n\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  constructor(uint256 _rate, address _wallet, IAMPLG _amplg) public {\r\n    Ownable.initialize(msg.sender);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_amplg != address(0));\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _amplg;\r\n    isFunding = true;\r\n  }\r\n\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function buyTokens(address _beneficiary) public payable {\r\n      require(isFunding);\r\n      uint256 weiAmount = msg.value; \r\n      _preValidatePurchase(_beneficiary, weiAmount);\r\n      uint256 tokens = _getTokenAmount(weiAmount);\r\n      weiRaised = weiRaised.add(weiAmount);\r\n      _processPurchase(_beneficiary, tokens);\r\n      emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n        _updatePurchasingState(_beneficiary, weiAmount);\r\n        _forwardFunds();\r\n        _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal { \r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n    // optional override\r\n  }\r\n\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    token.transfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n    // optional override\r\n  }\r\n\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint256 tokenDecimals = 9;\r\n        uint256 etherDecimals = 18;\r\n\r\n        if (tokenDecimals < etherDecimals) {\r\n            return _weiAmount.mul(rate).div(10 ** (etherDecimals.sub(tokenDecimals)));\r\n        }\r\n\r\n        if (tokenDecimals > etherDecimals) {\r\n            return _weiAmount.mul(rate).mul(10 ** (tokenDecimals.sub(etherDecimals)));\r\n        }\r\n\r\n        return _weiAmount.mul(rate);\r\n  }\r\n  \r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n  \r\n  function getBalance() public view returns (uint256) {\r\n      address _address = this;\r\n      return token.balanceOf(_address);\r\n      \r\n  }\r\n  \r\n   function setStatusOTC(bool _status) \r\n   external \r\n   onlyOwner \r\n   {\r\n      require(msg.sender == Ownable.owner());\r\n      isFunding = _status;\r\n    }\r\n  \r\n  function setRate(uint256 _rate) \r\n   external \r\n   onlyOwner \r\n   {\r\n      require(msg.sender == Ownable.owner());\r\n      rate = _rate;\r\n    }\r\n  \r\n  function collectUnsoldAfterOTC() \r\n  external\r\n  onlyOwner\r\n  {\r\n        isFunding = false;\r\n        uint256 remaining = token.balanceOf(this);\r\n        token.transfer(msg.sender, remaining);\r\n  }\r\n    \r\n    \r\n  function burnTokens(address _tokenAddress, uint _amount) \r\n  external\r\n  onlyOwner\r\n  {\r\n        isFunding = false;\r\n        token.transfer(_tokenAddress, _amount);\r\n  }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"lockOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectUnsoldAfterOTC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStatusOTC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amplg\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AMPLGOTC","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000002a4000000000000000000000000f112f4452e8dc33c5574b13c939383a0ab8aa5830000000000000000000000008003c49f6ebacddc493ea47cab45e892d1b638a1","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8f190a68f762b4b0cf8585d37557132d25f4c12012b4974f0b560a46b34baa8d"}]}