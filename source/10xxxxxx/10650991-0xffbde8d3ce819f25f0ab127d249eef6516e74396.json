{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function mint(address reciever, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract Etherz {\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint currentLevel;\r\n        uint totalEarningEth;\r\n        mapping(uint => address[]) referral;\r\n        mapping(uint => uint) levelExpired;\r\n    }\r\n    \r\n    struct AutoPoolUserStruct {\r\n        bool isExist;\r\n        address UserAddress;\r\n        uint uniqueId;\r\n        uint referrerID;\r\n        mapping(uint => uint[]) firstLineRef;\r\n        mapping(uint => uint[]) secondLineRef;\r\n        uint currentLevel;\r\n        uint totalEarningEth;\r\n        mapping(uint => bool) levelStatus;\r\n        mapping(uint =>uint) reInvestCount;\r\n    }\r\n    \r\n    using SafeMath for uint256;\r\n    address public ownerAddress; \r\n    bool public lockStatus;\r\n    uint public adminFee = 16 ether;\r\n    uint public workPlancurrentId = 0;\r\n    uint public autoPooluniqueId = 0;\r\n    uint workPlanRefLimit = 2;\r\n    uint public PERIOD_LENGTH = 180 days;\r\n    uint public WorkplanToken = 100 ether;\r\n    uint public AutopoolToken = 100 ether;\r\n    ERC20 Token;\r\n    \r\n    mapping (uint => uint) public WorkPlanLevelPrice;\r\n    mapping (address => uint) public currentTree;\r\n    mapping (uint => uint) public AutoPoolLevelPrice;\r\n   \r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => AutoPoolUserStruct) public autoPoolUniqueUsers;\r\n    mapping (uint => mapping (uint => AutoPoolUserStruct)) public autoPoolUsers;\r\n    \r\n    mapping (uint => address) public userList;\r\n    mapping (uint => address) public autoPoolUniqueUserList;\r\n    mapping (address => uint) public apAddressToId;\r\n    mapping (uint => mapping (uint => address)) public autoPoolUserList;\r\n    \r\n    mapping (address => mapping (uint => mapping (uint => uint))) public EarnedEth;\r\n    mapping (address => uint) public loopCheck; \r\n    mapping (uint => uint) public autoPoolcurrentId;\r\n    \r\n    event regLevelEvent(uint indexed Matrix, address indexed UserAddress, address indexed ReferrerAddress, uint Time);\r\n    event buyLevelEvent(uint indexed Matrix, address indexed UserAddress, uint Levelno, uint Time);\r\n    event getMoneyForLevelEvent(uint indexed Matrix, address indexed UserAddress,uint UserId, address indexed ReferrerAddress, uint ReferrerId, uint Levelno, uint LevelPrice, uint Time);\r\n    event lostMoneyForLevelEvent(uint indexed Matrix, address indexed UserAddress,uint UserId, address indexed ReferrerAddress, uint ReferrerId, uint Levelno, uint LevelPrice, uint Time);\r\n    \r\n    constructor(address _tokenAddress) public {\r\n        ownerAddress = msg.sender;\r\n        Token = ERC20(_tokenAddress);\r\n        \r\n        // WorkPlanLevelPrice\r\n        WorkPlanLevelPrice[1] = 0.03 ether;\r\n        WorkPlanLevelPrice[2] = 0.05 ether;\r\n        WorkPlanLevelPrice[3] = 0.08 ether;\r\n        WorkPlanLevelPrice[4] = 0.23 ether;\r\n        WorkPlanLevelPrice[5] = 0.84 ether;\r\n        WorkPlanLevelPrice[6] = 1 ether;\r\n        WorkPlanLevelPrice[7] = 2 ether;\r\n        WorkPlanLevelPrice[8] = 4 ether;\r\n        WorkPlanLevelPrice[9] = 8 ether;\r\n        WorkPlanLevelPrice[10] = 16 ether;\r\n        WorkPlanLevelPrice[11] = 32 ether;\r\n        WorkPlanLevelPrice[12] = 64 ether;\r\n        WorkPlanLevelPrice[13] = 128 ether;\r\n        WorkPlanLevelPrice[14] = 256 ether;\r\n        WorkPlanLevelPrice[15] = 512 ether;\r\n        WorkPlanLevelPrice[16] = 1024 ether;\r\n        \r\n        // NonWorkPlanLevelPrice\r\n        AutoPoolLevelPrice[1] = 0.02 ether;\r\n        AutoPoolLevelPrice[2] = 0.06 ether;\r\n        AutoPoolLevelPrice[3] = 0.18 ether;\r\n        AutoPoolLevelPrice[4] = 0.54 ether;\r\n        AutoPoolLevelPrice[5] = 1.62 ether;\r\n        AutoPoolLevelPrice[6] = 4.86 ether;\r\n        AutoPoolLevelPrice[7] = 14.58 ether;\r\n        AutoPoolLevelPrice[8] = 43.74 ether;\r\n        AutoPoolLevelPrice[9] = 131.22 ether;\r\n        AutoPoolLevelPrice[10] = 393.66 ether;\r\n        AutoPoolLevelPrice[11] = 1180.98 ether;\r\n        AutoPoolLevelPrice[12] = 3542.94 ether;\r\n        AutoPoolLevelPrice[13] = 10628.82 ether;\r\n        AutoPoolLevelPrice[14] = 31886.46 ether;\r\n        AutoPoolLevelPrice[15] = 95659.38 ether;\r\n        AutoPoolLevelPrice[16] = 286978.14 ether;\r\n        \r\n        \r\n        UserStruct memory userStruct;\r\n        workPlancurrentId = workPlancurrentId.add(1);\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: workPlancurrentId,\r\n            referrerID: 0,\r\n            currentLevel:1,\r\n            totalEarningEth:0\r\n        });\r\n        users[ownerAddress] = userStruct;\r\n        userList[workPlancurrentId] = ownerAddress;\r\n        \r\n        AutoPoolUserStruct memory autoPoolStruct;\r\n        autoPooluniqueId = autoPooluniqueId.add(1);\r\n        \r\n        autoPoolStruct = AutoPoolUserStruct({\r\n            isExist: true,\r\n            UserAddress: ownerAddress,\r\n            uniqueId: autoPooluniqueId,\r\n            referrerID: 0,\r\n            currentLevel: 1,\r\n            totalEarningEth:0\r\n        });        \r\n        autoPoolUniqueUsers[autoPooluniqueId] = autoPoolStruct;\r\n        autoPoolUniqueUserList[autoPooluniqueId] = ownerAddress;\r\n        apAddressToId[ownerAddress] = autoPooluniqueId;\r\n        \r\n         for(uint i = 1; i <= 16; i++) {\r\n            users[ownerAddress].currentLevel = i;\r\n            users[ownerAddress].levelExpired[i] = 55555555555;\r\n            autoPoolcurrentId[i] = autoPoolcurrentId[i].add(1);\r\n            autoPoolUsers[i][autoPoolcurrentId[i]].levelStatus[i] = true;\r\n            autoPoolUserList[i][autoPoolcurrentId[i]] = ownerAddress;\r\n            autoPoolUsers[i][autoPoolcurrentId[i]] = autoPoolStruct;\r\n            autoPoolUniqueUsers[autoPooluniqueId].currentLevel = i;\r\n            autoPoolUniqueUsers[autoPooluniqueId].levelStatus[i] = true;\r\n            \r\n        }\r\n    }\r\n    \r\n    //fallback\r\n    function () external payable {\r\n        revert(\"Invalid Transaction\");\r\n    }\r\n    \r\n    function workPlanregisteration(uint _referrerID) external payable {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(users[msg.sender].isExist == false, \"User exist\");\r\n        require(_referrerID > 0 && _referrerID <= workPlancurrentId, \"Incorrect referrer Id\");\r\n        require(msg.value == WorkPlanLevelPrice[1], \"Incorrect Value\");\r\n        address referer = userList[_referrerID];\r\n        \r\n        if(users[referer].referral[currentTree[referer]].length >= workPlanRefLimit)\r\n            currentTree[referer] = currentTree[referer].add(1);\r\n        \r\n        UserStruct memory userStruct;\r\n        workPlancurrentId++;\r\n        \r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: workPlancurrentId,\r\n            referrerID: _referrerID,\r\n            currentLevel: 1,\r\n            totalEarningEth:0\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[workPlancurrentId] = msg.sender;\r\n        users[msg.sender].levelExpired[1] = now.add(PERIOD_LENGTH);\r\n        users[referer].referral[currentTree[referer]].push(msg.sender);\r\n        loopCheck[msg.sender] = 0;\r\n\r\n        workPlanPay(0,1, msg.sender,((WorkPlanLevelPrice[1].mul(adminFee)).div(10**20)), msg.value);\r\n\r\n        emit regLevelEvent(1,msg.sender, userList[_referrerID], now);\r\n    }\r\n    \r\n    function autoPoolregistration() external payable {\r\n        uint _userId = apAddressToId[msg.sender];  \r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(users[msg.sender].isExist == true, \"User not exist in working plan\");\r\n        require(autoPoolUniqueUsers[_userId].isExist ==  false, \"User Exist\");\r\n        require(msg.value == AutoPoolLevelPrice[1], \"Incorrect Value\");\r\n        \r\n        uint IReferrer;\r\n        uint _referrerID;\r\n        \r\n        for(uint i=1;i <= autoPoolcurrentId[1]; i++) {\r\n            if(autoPoolUsers[1][i].secondLineRef[1].length < 9) {\r\n                (_referrerID,IReferrer) = findAPReferrer(1,i); \r\n                break;\r\n            }\r\n            else if(autoPoolUsers[1][i].secondLineRef[1].length == 9) {\r\n                continue;\r\n            }\r\n        }\r\n        \r\n        AutoPoolUserStruct memory nonWorkUserStruct;\r\n        autoPoolcurrentId[1] = autoPoolcurrentId[1].add(1);\r\n        autoPooluniqueId++;\r\n        \r\n        nonWorkUserStruct = AutoPoolUserStruct({\r\n            isExist: true,\r\n            UserAddress: msg.sender,\r\n            uniqueId: autoPooluniqueId,\r\n            referrerID: IReferrer,\r\n            currentLevel: 1,\r\n            totalEarningEth:0\r\n        });\r\n\r\n        autoPoolUsers[1][autoPoolcurrentId[1]] = nonWorkUserStruct;\r\n        autoPoolUserList[1][autoPoolcurrentId[1]] = msg.sender;\r\n        autoPoolUsers[1][autoPoolcurrentId[1]].levelStatus[1] = true;\r\n        autoPoolUsers[1][autoPoolcurrentId[1]].reInvestCount[1] = 0;\r\n        \r\n        autoPoolUniqueUsers[autoPooluniqueId] = nonWorkUserStruct;\r\n        autoPoolUniqueUserList[autoPooluniqueId] = msg.sender;\r\n        apAddressToId[msg.sender] = autoPooluniqueId;\r\n        autoPoolUniqueUsers[autoPooluniqueId].levelStatus[1] = true;\r\n        autoPoolUniqueUsers[autoPooluniqueId].reInvestCount[1] = 0;\r\n        \r\n        autoPoolUsers[1][IReferrer].firstLineRef[1].push(autoPoolcurrentId[1]);\r\n        autoPoolUniqueUsers[apAddressToId[autoPoolUsers[1][IReferrer].UserAddress]].firstLineRef[1].push(autoPooluniqueId);\r\n        \r\n        if(_referrerID != 0) {\r\n            autoPoolUsers[1][_referrerID].secondLineRef[1].push(autoPoolcurrentId[1]);\r\n            autoPoolUniqueUsers[apAddressToId[autoPoolUsers[1][_referrerID].UserAddress]].secondLineRef[1].push(autoPooluniqueId);\r\n        }\r\n        if(_referrerID == 0)\r\n            _referrerID = 1;\r\n        \r\n        autoPoolUsers[1][autoPoolcurrentId[1]].firstLineRef[1] = new uint[](0);\r\n        autoPoolUsers[1][autoPoolcurrentId[1]].secondLineRef[1] = new uint[](0);\r\n        \r\n        autoPoolUniqueUsers[autoPooluniqueId].firstLineRef[1] = new uint[](0);\r\n        autoPoolUniqueUsers[autoPooluniqueId].secondLineRef[1] = new uint[](0);\r\n        \r\n        if(autoPoolUsers[1][_referrerID].secondLineRef[1].length == 9) {\r\n            autoPoolPay(0, 1, _referrerID , ((AutoPoolLevelPrice[1].mul(adminFee)).div(10**20)), msg.value);\r\n            reInvest(_referrerID,1);\r\n            autoPoolUniqueUsers[apAddressToId[autoPoolUsers[1][_referrerID].UserAddress]].secondLineRef[1] = new uint[](0);\r\n            autoPoolUniqueUsers[apAddressToId[autoPoolUsers[1][_referrerID].UserAddress]].firstLineRef[1] = new uint[](0);\r\n            autoPoolUsers[1][_referrerID].reInvestCount[1] =  autoPoolUsers[1][_referrerID].reInvestCount[1].add(1);\r\n            autoPoolUniqueUsers[_referrerID].reInvestCount[1] =  autoPoolUniqueUsers[_referrerID].reInvestCount[1].add(1);\r\n        }\r\n        else if(autoPoolUsers[1][_referrerID].secondLineRef[1].length < 9) {\r\n            autoPoolPay(0, 1, autoPoolcurrentId[1], ((AutoPoolLevelPrice[1].mul(adminFee)).div(10**20)), msg.value);\r\n        }\r\n        \r\n        emit regLevelEvent(2, msg.sender, autoPoolUserList[1][_referrerID], now);\r\n    }\r\n    \r\n    function workPlanbuyLevel(uint256 _level) external payable {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(users[msg.sender].isExist, \"User not exist\"); \r\n        require(_level > 0 && _level <= 16, \"Incorrect level\");\r\n        require(msg.value == WorkPlanLevelPrice[_level], \"Incorrect Value\");\r\n            \r\n        for(uint l =_level - 1; l > 0; l--) \r\n            require(users[msg.sender].levelExpired[l] > now, \"Buy the previous level\");\r\n       \r\n        if(users[msg.sender].levelExpired[_level] == 0) {\r\n            users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            users[msg.sender].currentLevel = _level;\r\n        }else \r\n            users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n       \r\n       loopCheck[msg.sender] = 0;\r\n       \r\n       workPlanPay(0,_level, msg.sender,((WorkPlanLevelPrice[_level].mul(adminFee)).div(10**20)),msg.value);\r\n\r\n       emit buyLevelEvent(1,msg.sender, _level, now);\r\n    }\r\n    \r\n    function autoPoolbuyLevel(uint256 _level) external payable {\r\n        uint _userId = apAddressToId[msg.sender];\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        require(_level > 0 && _level <= 16, \"Incorrect level\");\r\n        require(autoPoolUniqueUsers[_userId].isExist ==  true, \"User not exist\");\r\n        require(autoPoolUniqueUsers[_userId].levelStatus[_level] == false, \"Already Active in this level\");\r\n        require(msg.value == AutoPoolLevelPrice[_level], \"Incorrect Value\");\r\n            \r\n        for(uint l =_level - 1; l > 0; l--) \r\n            require(users[msg.sender].levelExpired[_level] > now && autoPoolUniqueUsers[_userId].levelStatus[l] == true, \"Buy the previous level\");\r\n        \r\n        uint firstLineId;\r\n        uint secondLineId;\r\n        \r\n        for(uint i=1;i <= autoPoolcurrentId[_level]; i++) {\r\n            \r\n            if(autoPoolUsers[_level][i].secondLineRef[_level].length < 9) {\r\n                (secondLineId,firstLineId) = findAPReferrer(_level,i); \r\n                break;\r\n            }\r\n            else if(autoPoolUsers[_level][i].secondLineRef[_level].length == 9) {\r\n                continue;\r\n            }\r\n        } \r\n        \r\n        AutoPoolUserStruct memory nonWorkUserStruct;\r\n        autoPoolcurrentId[_level] = autoPoolcurrentId[_level].add(1);\r\n        \r\n        nonWorkUserStruct = AutoPoolUserStruct({\r\n            isExist: true,\r\n            UserAddress: msg.sender,\r\n            uniqueId: autoPooluniqueId,\r\n            referrerID: firstLineId,\r\n            currentLevel: _level,\r\n            totalEarningEth:0\r\n            });\r\n            \r\n        autoPoolUsers[_level][autoPoolcurrentId[_level]] = nonWorkUserStruct;\r\n        autoPoolUserList[_level][autoPoolcurrentId[_level]] = msg.sender;\r\n        autoPoolUsers[_level][autoPoolcurrentId[_level]].levelStatus[_level] = true;\r\n        autoPoolUsers[_level][autoPoolcurrentId[_level]].reInvestCount[_level] = 0;\r\n        \r\n        autoPoolUniqueUsers[_userId].levelStatus[_level] = true;\r\n        autoPoolUniqueUsers[_userId].currentLevel = _level;\r\n        autoPoolUniqueUsers[_userId].firstLineRef[_level] = new uint[](0);\r\n        autoPoolUniqueUsers[_userId].secondLineRef[_level] = new uint[](0);\r\n        autoPoolUniqueUsers[_userId].reInvestCount[_level] = 0;\r\n        \r\n        autoPoolUsers[_level][firstLineId].firstLineRef[_level].push(autoPoolcurrentId[_level]);\r\n        autoPoolUniqueUsers[apAddressToId[autoPoolUsers[_level][firstLineId].UserAddress]].firstLineRef[_level].push(apAddressToId[autoPoolUsers[_level][autoPoolcurrentId[_level]].UserAddress]);\r\n        \r\n        if(secondLineId != 0) {\r\n            autoPoolUsers[_level][secondLineId].secondLineRef[_level].push(autoPoolcurrentId[_level]);\r\n            autoPoolUniqueUsers[apAddressToId[autoPoolUsers[_level][secondLineId].UserAddress]].secondLineRef[_level].push(apAddressToId[autoPoolUsers[_level][autoPoolcurrentId[_level]].UserAddress]);\r\n        }\r\n        if(secondLineId == 0)\r\n            secondLineId = 1;\r\n        \r\n        autoPoolUsers[_level][autoPoolcurrentId[_level]].firstLineRef[_level] = new uint[](0);\r\n        autoPoolUsers[_level][autoPoolcurrentId[_level]].secondLineRef[_level] = new uint[](0);\r\n        \r\n        autoPoolUniqueUsers[_userId].firstLineRef[_level] = new uint[](0);\r\n        autoPoolUniqueUsers[_userId].secondLineRef[_level] = new uint[](0);\r\n        \r\n        if(autoPoolUsers[_level][secondLineId].secondLineRef[_level].length == 9) {\r\n            autoPoolPay(0,_level,secondLineId ,((AutoPoolLevelPrice[_level].mul(adminFee)).div(10**20)), msg.value);\r\n            reInvest(secondLineId,_level);\r\n            autoPoolUniqueUsers[apAddressToId[autoPoolUsers[_level][secondLineId].UserAddress]].secondLineRef[_level] = new uint[](0);\r\n            autoPoolUniqueUsers[apAddressToId[autoPoolUsers[_level][secondLineId].UserAddress]].firstLineRef[_level] = new uint[](0);\r\n            autoPoolUsers[_level][secondLineId].reInvestCount[_level] =  autoPoolUsers[_level][secondLineId].reInvestCount[_level].add(1);\r\n            autoPoolUniqueUsers[secondLineId].reInvestCount[_level] =  autoPoolUniqueUsers[secondLineId].reInvestCount[_level].add(1);\r\n        }\r\n        else if(autoPoolUsers[_level][secondLineId].secondLineRef[_level].length < 9) {\r\n            autoPoolPay(0,_level,autoPoolcurrentId[_level],((AutoPoolLevelPrice[_level].mul(adminFee)).div(10**20)), msg.value);\r\n        }\r\n        emit buyLevelEvent(2,msg.sender, _level, now);\r\n    }\r\n    \r\n    function contractLock(bool _lockStatus) public returns(bool) {\r\n        require(msg.sender == ownerAddress, \"Invalid User\");\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n    \r\n    function updateAdminFeePercentage(uint256 _adminFee) public returns(bool) {\r\n        require(msg.sender == ownerAddress, \"Only Owner\");\r\n        adminFee = _adminFee;\r\n        return true;  \r\n    }\r\n    \r\n    function updateWorkPlanLevelPrice(uint _level, uint _price) public returns(bool) {\r\n          require(msg.sender == ownerAddress, \"Only Owner\");\r\n          WorkPlanLevelPrice[_level] = _price;\r\n          return true;\r\n    }\r\n    \r\n    function updateAutoPoolLevelPrice(uint _level, uint _price) public returns(bool) {\r\n        require(msg.sender == ownerAddress, \"Only Owner\");\r\n        AutoPoolLevelPrice[_level] = _price;\r\n        return true;\r\n    }\r\n\r\n    function updateWorkPlanToken(uint _token) public returns (bool) {\r\n        require(msg.sender == ownerAddress, \"only Owner\");\r\n        WorkplanToken = _token;\r\n        return true;\r\n    }\r\n    \r\n    function updateAutoPoolToken(uint _token) public returns (bool) {\r\n        require(msg.sender == ownerAddress, \"Only Owner\");\r\n        AutopoolToken = _token;\r\n        return true;\r\n    }\r\n    \r\n    function failSafe(address payable _toUser, uint _amount) public returns (bool) {\r\n        require(msg.sender == ownerAddress, \"Only Owner\");\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function findAPReferrer(uint _level,uint _refId) internal view returns(uint,uint) {\r\n        \r\n        if(autoPoolUsers[_level][_refId].firstLineRef[_level].length <3)\r\n            return(autoPoolUsers[_level][_refId].referrerID,_refId);\r\n            \r\n        else {\r\n            uint[] memory referrals = new uint[](3);\r\n            referrals[0] = autoPoolUsers[_level][_refId].firstLineRef[_level][0];\r\n            referrals[1] = autoPoolUsers[_level][_refId].firstLineRef[_level][1];\r\n            referrals[2] = autoPoolUsers[_level][_refId].firstLineRef[_level][2];\r\n            \r\n            if(autoPoolUsers[_level][_refId].secondLineRef[_level].length == 0 ||\r\n            autoPoolUsers[_level][_refId].secondLineRef[_level].length == 3 ||\r\n            autoPoolUsers[_level][_refId].secondLineRef[_level].length == 6) {\r\n                if(autoPoolUsers[_level][referrals[0]].firstLineRef[_level].length < 3) {\r\n                    return (_refId, referrals[0]);\r\n                }\r\n            }\r\n            \r\n            else if(autoPoolUsers[_level][_refId].secondLineRef[_level].length == 1 ||\r\n            autoPoolUsers[_level][_refId].secondLineRef[_level].length == 4 ||\r\n            autoPoolUsers[_level][_refId].secondLineRef[_level].length == 7) {\r\n                if(autoPoolUsers[_level][referrals[1]].firstLineRef[_level].length < 3) {\r\n                    return (_refId, referrals[1]);\r\n                }\r\n            }\r\n            \r\n            else if(autoPoolUsers[_level][_refId].secondLineRef[_level].length == 2 ||\r\n            autoPoolUsers[_level][_refId].secondLineRef[_level].length == 5 ||\r\n            autoPoolUsers[_level][_refId].secondLineRef[_level].length == 8) {\r\n                if(autoPoolUsers[_level][referrals[2]].firstLineRef[_level].length < 3) {\r\n                    return (_refId, referrals[2]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function viewWPUserReferral(address _userAddress,uint _tree) public view returns(address[] memory) {\r\n        return users[_userAddress].referral[_tree];\r\n    }\r\n    \r\n    function viewAPUserReferral(uint _userId, uint _level) public view returns(uint[] memory, uint[] memory) {\r\n        return (autoPoolUniqueUsers[_userId].firstLineRef[_level],autoPoolUniqueUsers[_userId].secondLineRef[_level]);\r\n    }\r\n    \r\n    function viewWPUserLevelExpired(address _userAddress,uint _level) public view returns(uint) {\r\n        return users[_userAddress].levelExpired[_level];\r\n    }\r\n    \r\n    function viewAPUserLevelExpired(uint _userId,uint _level) public view returns(bool) {\r\n        return autoPoolUniqueUsers[_userId].levelStatus[_level];\r\n    }\r\n    \r\n    function viewAPUserReInvestCount(uint _userId, uint _level) public view returns(uint) {\r\n        return autoPoolUniqueUsers[_userId].reInvestCount[_level];\r\n    }\r\n   \r\n    function getWorkPlanTotalEarnedEther() public view returns(uint) {\r\n        uint totalEth;\r\n        \r\n        for( uint i=1;i<=workPlancurrentId;i++) {\r\n            totalEth = totalEth.add(users[userList[i]].totalEarningEth);\r\n        }\r\n        \r\n        return totalEth;\r\n    }\r\n    \r\n    function getAutoPoolTotalEarnedEther() public view returns(uint) {\r\n        uint totalEth;\r\n        \r\n        for( uint i = 1; i <= autoPooluniqueId; i++) {\r\n            totalEth = totalEth.add(autoPoolUniqueUsers[i].totalEarningEth);\r\n        }\r\n        \r\n        return totalEth;\r\n    }\r\n    \r\n    function reInvest(uint _refId, uint _level) internal  returns(bool) {\r\n        \r\n        uint _IRef;\r\n        uint _SRef;\r\n        \r\n        for(uint i = 1; i <= autoPoolcurrentId[_level]; i++) {\r\n            \r\n            if(autoPoolUsers[_level][i].secondLineRef[_level].length < 9) {\r\n                (_SRef,_IRef) = findAPReferrer(_level,i); \r\n                break;\r\n            }\r\n            else if(autoPoolUsers[_level][i].secondLineRef[_level].length == 9) {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        AutoPoolUserStruct memory nonWorkUserStruct;\r\n        autoPoolcurrentId[_level]++;\r\n        \r\n        nonWorkUserStruct = AutoPoolUserStruct({\r\n            isExist: true,\r\n            UserAddress: autoPoolUserList[_level][_refId],\r\n            uniqueId: autoPoolUsers[_level][_refId].uniqueId,\r\n            referrerID: _IRef,\r\n            currentLevel: _level,\r\n            totalEarningEth:0\r\n        });\r\n            \r\n        autoPoolUsers[_level][autoPoolcurrentId[_level]] = nonWorkUserStruct;\r\n        autoPoolUserList[_level][autoPoolcurrentId[_level]] = msg.sender;\r\n        autoPoolUsers[_level][autoPoolcurrentId[_level]].levelStatus[_level] = true;\r\n        autoPoolUsers[_level][autoPoolcurrentId[_level]].reInvestCount[_level] = 0;\r\n        \r\n        autoPoolUsers[_level][_IRef].firstLineRef[_level].push(autoPoolcurrentId[_level]);\r\n        autoPoolUniqueUsers[apAddressToId[autoPoolUsers[_level][_IRef].UserAddress]].firstLineRef[_level].push(apAddressToId[autoPoolUsers[_level][autoPoolcurrentId[_level]].UserAddress]);\r\n        \r\n        if(_SRef != 0) {\r\n            autoPoolUsers[_level][_SRef].secondLineRef[_level].push(autoPoolcurrentId[_level]);\r\n            autoPoolUniqueUsers[apAddressToId[autoPoolUsers[_level][_SRef].UserAddress]].secondLineRef[_level].push(apAddressToId[autoPoolUsers[_level][autoPoolcurrentId[_level]].UserAddress]);\r\n        }\r\n        if(_SRef == 0)\r\n            _SRef = 1;\r\n        \r\n        autoPoolUsers[_level][autoPoolcurrentId[_level]].firstLineRef[_level] = new uint[](0);\r\n        autoPoolUsers[_level][autoPoolcurrentId[_level]].secondLineRef[_level] = new uint[](0);\r\n        \r\n        if(autoPoolUsers[_level][_SRef].secondLineRef[_level].length == 9) {\r\n            reInvest(_SRef,_level);\r\n            autoPoolUniqueUsers[apAddressToId[autoPoolUsers[_level][_SRef].UserAddress]].secondLineRef[_level] = new uint[](0);\r\n            autoPoolUniqueUsers[apAddressToId[autoPoolUsers[_level][_SRef].UserAddress]].firstLineRef[_level] = new uint[](0);\r\n            autoPoolUsers[_level][_SRef].reInvestCount[_level] =  autoPoolUsers[_level][_SRef].reInvestCount[_level].add(1);\r\n            autoPoolUniqueUsers[_SRef].reInvestCount[_level] =  autoPoolUniqueUsers[_SRef].reInvestCount[_level].add(1);\r\n            autoPoolUsers[_level][_SRef].reInvestCount[_level] =  autoPoolUsers[_level][_SRef].reInvestCount[_level].add(1);\r\n        }\r\n       \r\n        return true;\r\n    }\r\n    \r\n    function getReferrer(uint _level,address _user) internal returns (address) {\r\n      if (_level == 0 || _user == address(0)) {\r\n        return _user;\r\n      }\r\n      return getReferrer( _level - 1,userList[users[_user].referrerID]);\r\n    }\r\n\r\n    function workPlanPay(uint _flag,uint _level,address _userAddress,uint _adminPrice,uint256 _amt) internal {\r\n        \r\n        address referer;\r\n        \r\n        if(_flag == 0)\r\n            referer = getReferrer(_level,_userAddress);\r\n        \r\n        else if(_flag == 1) \r\n             referer = userList[users[_userAddress].referrerID];\r\n\r\n        if(!users[referer].isExist) \r\n            referer = userList[1];\r\n        \r\n        if(loopCheck[msg.sender] >= 12) \r\n            referer = userList[1];\r\n        \r\n        if(users[referer].levelExpired[_level] >= now) {\r\n            uint tobeminted = WorkplanToken * _level;\r\n            require((address(uint160(referer)).send(WorkPlanLevelPrice[_level].sub(_adminPrice))) && \r\n            (address(uint160(ownerAddress)).send(_adminPrice)) &&\r\n            (Token.mint(msg.sender, tobeminted)), \"Transaction Failure\");\r\n            users[referer].totalEarningEth = users[referer].totalEarningEth.add(WorkPlanLevelPrice[_level]);\r\n            EarnedEth[referer][1][_level] =  EarnedEth[referer][1][_level].add(WorkPlanLevelPrice[_level]);\r\n            emit getMoneyForLevelEvent(1,msg.sender,users[msg.sender].id,referer,users[referer].id, _level, WorkPlanLevelPrice[_level],now);\r\n        }\r\n        \r\n        else  {\r\n            if(loopCheck[msg.sender] < 12) {\r\n                loopCheck[msg.sender] = loopCheck[msg.sender].add(1);\r\n                emit lostMoneyForLevelEvent(1,msg.sender,users[msg.sender].id,referer,users[referer].id, _level, WorkPlanLevelPrice[_level],now);\r\n                workPlanPay(1,_level, referer,_adminPrice,_amt);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function autoPoolPay(uint _flag,uint _level,uint _userId,uint _adminPrice,uint256 _amt) internal {\r\n        \r\n        uint[2] memory referer;\r\n        \r\n        if(_flag == 0){\r\n           referer[1] = autoPoolUsers[_level][_userId].referrerID;\r\n           referer[0] = autoPoolUsers[_level][referer[1]].referrerID;\r\n        }\r\n        \r\n        else if(_flag == 1) \r\n             referer[0] = autoPoolUsers[_level][_userId].referrerID;\r\n\r\n        if(!autoPoolUsers[_level][referer[0]].isExist) \r\n            referer[0] = 1;\r\n        \r\n         if(autoPoolUsers[_level][referer[0]].levelStatus[_level] == true) {\r\n            uint tobeminted = AutopoolToken;\r\n            address refererAddress = autoPoolUserList[_level][referer[0]];\r\n            require((address(uint160(refererAddress)).send(_amt.sub(_adminPrice))) &&\r\n            address(uint160(ownerAddress)).send(_adminPrice) &&\r\n            (Token.mint(msg.sender, tobeminted)), \"Transaction Failure\");\r\n                \r\n            autoPoolUsers[_level][referer[0]].totalEarningEth = autoPoolUsers[_level][referer[0]].totalEarningEth.add(_amt.sub(_adminPrice));\r\n            autoPoolUniqueUsers[apAddressToId[refererAddress]].totalEarningEth = autoPoolUniqueUsers[apAddressToId[refererAddress]].totalEarningEth.add(_amt.sub(_adminPrice));\r\n            EarnedEth[refererAddress][2][_level] =  EarnedEth[refererAddress][2][_level].add(_amt.sub(_adminPrice));\r\n            autoPoolUsers[_level][1].totalEarningEth = autoPoolUsers[_level][1].totalEarningEth.add(_adminPrice);\r\n            autoPoolUniqueUsers[apAddressToId[ownerAddress]].totalEarningEth = autoPoolUniqueUsers[apAddressToId[ownerAddress]].totalEarningEth.add(_amt.sub(_adminPrice));\r\n            EarnedEth[ownerAddress][2][_level] =  EarnedEth[ownerAddress][2][_level].add(_adminPrice);\r\n            emit getMoneyForLevelEvent(2,msg.sender,_userId,refererAddress,referer[0], _level, AutoPoolLevelPrice[_level],now);\r\n        }\r\n        \r\n        else  {\r\n                address refererAddress = autoPoolUserList[_level][referer[0]];\r\n                emit lostMoneyForLevelEvent(2,msg.sender,_userId,refererAddress,referer[0], _level, AutoPoolLevelPrice[_level],now);\r\n                autoPoolPay(1,_level, referer[0],_adminPrice,_amt);\r\n            }\r\n        }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Matrix\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Matrix\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReferrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LevelPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Matrix\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ReferrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Levelno\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LevelPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"Matrix\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ReferrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AutoPoolLevelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AutopoolToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EarnedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERIOD_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WorkPlanLevelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WorkplanToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"apAddressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"autoPoolUniqueUserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"autoPoolUniqueUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarningEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"autoPoolUserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"autoPoolUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"UserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarningEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"autoPoolbuyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"autoPoolcurrentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"autoPoolregistration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoPooluniqueId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentTree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAutoPoolTotalEarnedEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWorkPlanTotalEarnedEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loopCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"}],\"name\":\"updateAdminFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateAutoPoolLevelPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"updateAutoPoolToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateWorkPlanLevelPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"updateWorkPlanToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarningEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewAPUserLevelExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewAPUserReInvestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewAPUserReferral\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewWPUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tree\",\"type\":\"uint256\"}],\"name\":\"viewWPUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"workPlanbuyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"workPlancurrentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"workPlanregisteration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Etherz","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c6306feca24c68947158620c50d77af124f1166a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4d5d0b417ee01edb18b5586017f6f9ba45fc2668e570bf966cebba9310ae204b"}]}