{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface ITokensTypeStorage {\r\n  function isRegistred(address _address) external view returns(bool);\r\n\r\n  function getType(address _address) external view returns(bytes32);\r\n\r\n  function isPermittedAddress(address _address) external view returns(bool);\r\n\r\n  function owner() external view returns(address);\r\n\r\n  function addNewTokenType(address _token, string calldata _type) external;\r\n\r\n  function setTokenTypeAsOwner(address _token, string calldata _type) external;\r\n}\r\ninterface IBalancerPool {\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\r\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\r\n    function getCurrentTokens() external view returns (address[] memory tokens);\r\n}\r\ninterface IUniswapV2Pair {\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n}\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface UniswapFactoryInterfaceV1 {\r\n    // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external;\r\n}\r\ninterface UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n\r\n    // ERC20 comaptibility for liquidity tokens\r\n    function name() external view returns(bytes32);\r\n    function symbol() external view returns(bytes32);\r\n    function decimals() external view returns(uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\ninterface IBancorFormula {\r\n    function calculatePurchaseReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _depositAmount) external view returns (uint256);\r\n    function calculateSaleReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _sellAmount) external view returns (uint256);\r\n    function calculateCrossReserveReturn(uint256 _fromReserveBalance, uint32 _fromReserveRatio, uint256 _toReserveBalance, uint32 _toReserveRatio, uint256 _amount) external view returns (uint256);\r\n    function calculateFundCost(uint256 _supply, uint256 _reserveBalance, uint32 _totalRatio, uint256 _amount) external view returns (uint256);\r\n    function calculateLiquidateReturn(uint256 _supply, uint256 _reserveBalance, uint32 _totalRatio, uint256 _amount) external view returns (uint256);\r\n}\r\ninterface SmartTokenInterface {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function disableTransfers(bool _disable) external;\r\n  function issue(address _to, uint256 _amount) external;\r\n  function destroy(address _from, uint256 _amount) external;\r\n  function owner() external view returns (address);\r\n}\r\n\r\n\r\ninterface IGetBancorData {\r\n  function getBancorContractAddresByName(string calldata _name) external view returns (address result);\r\n  function getBancorRatioForAssets(IERC20 _from, IERC20 _to, uint256 _amount) external view returns(uint256 result);\r\n  function getBancorPathForAssets(IERC20 _from, IERC20 _to) external view returns(address[] memory);\r\n}\r\n\r\n\r\ninterface BancorConverterInterfaceV2 {\r\n  function addLiquidity(address _reserveToken, uint256 _amount, uint256 _minReturn) external payable;\r\n  function removeLiquidity(address _poolToken, uint256 _amount, uint256 _minReturn) external;\r\n\r\n  function poolToken(address _reserveToken) external view returns(address);\r\n  function connectorTokenCount() external view returns (uint16);\r\n  function connectorTokens(uint index) external view returns(IERC20);\r\n}\r\n\r\n\r\ninterface BancorConverterInterfaceV1 {\r\n\r\n  function addLiquidity(\r\n    address[] calldata _reserveTokens,\r\n    uint256[] calldata _reserveAmounts,\r\n    uint256 _minReturn) external payable;\r\n\r\n  function removeLiquidity(\r\n    uint256 _amount,\r\n    address[] calldata _reserveTokens,\r\n    uint256[] calldata _reserveMinReturnAmounts) external;\r\n}\r\n\r\n\r\ninterface BancorConverterInterface {\r\n  function connectorTokens(uint index) external view returns(IERC20);\r\n  function fund(uint256 _amount) external payable;\r\n  function liquidate(uint256 _amount) external;\r\n  function getConnectorBalance(IERC20 _connectorToken) external view returns (uint256);\r\n  function connectorTokenCount() external view returns (uint16);\r\n}\r\n\r\n\r\n/*\r\n* This contract allow buy/sell pool for Bancor and Uniswap assets\r\n* and provide ratio and addition info for pool assets\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PoolPortal is Ownable{\r\n  using SafeMath for uint256;\r\n\r\n  uint public version = 4;\r\n\r\n  IGetBancorData public bancorData;\r\n  UniswapFactoryInterfaceV1 public uniswapFactoryV1;\r\n  IUniswapV2Router public uniswapV2Router;\r\n\r\n  // CoTrader platform recognize ETH by this address\r\n  IERC20 constant private ETH_TOKEN_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n  // Enum\r\n  // NOTE: You can add a new type at the end, but do not change this order\r\n  enum PortalType { Bancor, Uniswap, Balancer }\r\n\r\n  // events\r\n  event BuyPool(address poolToken, uint256 amount, address trader);\r\n  event SellPool(address poolToken, uint256 amount, address trader);\r\n\r\n  // Contract for handle tokens types\r\n  ITokensTypeStorage public tokensTypes;\r\n\r\n\r\n  /**\r\n  * @dev contructor\r\n  *\r\n  * @param _bancorData               address of helper contract GetBancorData\r\n  * @param _uniswapFactoryV1         address of Uniswap V1 factory contract\r\n  * @param _uniswapV2Router          address of Uniswap V2 router\r\n  * @param _tokensTypes              address of the ITokensTypeStorage\r\n  */\r\n  constructor(\r\n    address _bancorData,\r\n    address _uniswapFactoryV1,\r\n    address _uniswapV2Router,\r\n    address _tokensTypes\r\n\r\n  )\r\n  public\r\n  {\r\n    bancorData = IGetBancorData(_bancorData);\r\n    uniswapFactoryV1 = UniswapFactoryInterfaceV1(_uniswapFactoryV1);\r\n    uniswapV2Router = IUniswapV2Router(_uniswapV2Router);\r\n    tokensTypes = ITokensTypeStorage(_tokensTypes);\r\n  }\r\n\r\n  /**\r\n  * @dev this function provide necessary data for buy a old BNT and UNI v1 pools by input amount\r\n  *\r\n  * @param _amount     amount of pool token (NOTE: amount of ETH for Uniswap)\r\n  * @param _type       pool type\r\n  * @param _poolToken  pool token address\r\n  */\r\n  function getDataForBuyingPool(IERC20 _poolToken, uint _type, uint256 _amount)\r\n    public\r\n    view\r\n    returns(\r\n      address[] memory connectorsAddress,\r\n      uint256[] memory connectorsAmount\r\n    )\r\n  {\r\n    // Buy Bancor pool\r\n    if(_type == uint(PortalType.Bancor)){\r\n      // get Bancor converter\r\n      address converterAddress = getBacorConverterAddressByRelay(address(_poolToken), 0);\r\n      // get converter as contract\r\n      BancorConverterInterface converter = BancorConverterInterface(converterAddress);\r\n      uint256 connectorsCount = converter.connectorTokenCount();\r\n\r\n      // create arrays for data\r\n      connectorsAddress = new address[](connectorsCount);\r\n      connectorsAmount = new uint256[](connectorsCount);\r\n\r\n      // push data\r\n      for(uint8 i = 0; i < connectorsCount; i++){\r\n        // get current connector address\r\n        IERC20 currentConnector = converter.connectorTokens(i);\r\n        // push address of current connector\r\n        connectorsAddress[i] = address(currentConnector);\r\n        // push amount for current connector\r\n        connectorsAmount[i] = getBancorConnectorsAmountByRelayAmount(\r\n          _amount, _poolToken, address(currentConnector));\r\n      }\r\n    }\r\n    // Buy Uniswap pool\r\n    else if(_type == uint(PortalType.Uniswap)){\r\n      // get token address\r\n      address tokenAddress = uniswapFactoryV1.getToken(address(_poolToken));\r\n      // get tokens amd approve to exchange\r\n      uint256 erc20Amount = getUniswapTokenAmountByETH(tokenAddress, _amount);\r\n\r\n      // return data\r\n      connectorsAddress = new address[](2);\r\n      connectorsAmount = new uint256[](2);\r\n      connectorsAddress[0] = address(ETH_TOKEN_ADDRESS);\r\n      connectorsAddress[1] = tokenAddress;\r\n      connectorsAmount[0] = _amount;\r\n      connectorsAmount[1] = erc20Amount;\r\n\r\n    }\r\n    else {\r\n      revert(\"Unknown pool type\");\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev buy Bancor or Uniswap pool\r\n  *\r\n  * @param _amount             amount of pool token\r\n  * @param _type               pool type\r\n  * @param _poolToken          pool token address (NOTE: for Bancor type 2 don't forget extract pool address from container)\r\n  * @param _connectorsAddress  address of pool connectors (NOTE: for Uniswap ETH should be pass in [0], ERC20 in [1])\r\n  * @param _connectorsAmount   amount of pool connectors (NOTE: for Uniswap ETH amount should be pass in [0], ERC20 in [1])\r\n  * @param _additionalArgs     bytes32 array for case if need pass some extra params, can be empty\r\n  * @param _additionalData     for provide any additional data, if not used just set \"0x\",\r\n  * for Bancor _additionalData[0] should be converterVersion and _additionalData[1] should be converterType\r\n  *\r\n  */\r\n  function buyPool\r\n  (\r\n    uint256 _amount,\r\n    uint _type,\r\n    address _poolToken,\r\n    address[] calldata _connectorsAddress,\r\n    uint256[] calldata _connectorsAmount,\r\n    bytes32[] calldata _additionalArgs,\r\n    bytes calldata _additionalData\r\n  )\r\n  external\r\n  payable\r\n  returns(uint256 poolAmountReceive, uint256[] memory connectorsSpended)\r\n  {\r\n    // Buy Bancor pool\r\n    if(_type == uint(PortalType.Bancor)){\r\n      (poolAmountReceive) = buyBancorPool(\r\n        _amount,\r\n        _poolToken,\r\n        _connectorsAddress,\r\n        _connectorsAmount,\r\n        _additionalArgs,\r\n        _additionalData\r\n      );\r\n    }\r\n    // Buy Uniswap pool\r\n    else if (_type == uint(PortalType.Uniswap)){\r\n      (poolAmountReceive) = buyUniswapPool(\r\n        _amount,\r\n        _poolToken,\r\n        _connectorsAddress,\r\n        _connectorsAmount,\r\n        _additionalArgs,\r\n        _additionalData\r\n      );\r\n    }\r\n    // Buy Balancer pool\r\n    else if (_type == uint(PortalType.Balancer)){\r\n      (poolAmountReceive) = buyBalancerPool(\r\n        _amount,\r\n        _poolToken,\r\n        _connectorsAddress,\r\n        _connectorsAmount\r\n      );\r\n    }\r\n    else{\r\n      // unknown portal type\r\n      revert(\"Unknown portal type\");\r\n    }\r\n\r\n    // transfer pool token to fund\r\n    IERC20(_poolToken).transfer(msg.sender, poolAmountReceive);\r\n\r\n    // transfer connectors remains to fund\r\n    // and calculate how much connectors was spended (current - remains)\r\n    connectorsSpended = _transferPoolConnectorsRemains(\r\n      _connectorsAddress,\r\n      _connectorsAmount);\r\n\r\n    // trigger event\r\n    emit BuyPool(address(_poolToken), poolAmountReceive, msg.sender);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buying Bancor pool token by a certain converter version and converter type\r\n  * Bancor has 3 cases for different converter version and type\r\n  */\r\n  function buyBancorPool(\r\n    uint256 _amount,\r\n    address _poolToken,\r\n    address[] calldata _connectorsAddress,\r\n    uint256[] calldata _connectorsAmount,\r\n    bytes32[] calldata _additionalArgs,\r\n    bytes calldata _additionalData\r\n  )\r\n    private\r\n    returns(uint256 poolAmountReceive)\r\n  {\r\n    // get Bancor converter address by pool token and pool type\r\n    address converterAddress = getBacorConverterAddressByRelay(\r\n      _poolToken,\r\n      uint256(_additionalArgs[1])\r\n    );\r\n\r\n    // transfer from sender and approve to converter\r\n    // for detect if there are ETH in connectors or not we use etherAmount\r\n    uint256 etherAmount = _approvePoolConnectors(\r\n      _connectorsAddress,\r\n      _connectorsAmount,\r\n      converterAddress\r\n    );\r\n\r\n    // Buy Bancor pool according converter version and type\r\n    // encode and compare converter version\r\n    if(uint256(_additionalArgs[0]) >= 28) {\r\n      // encode and compare converter type\r\n      if(uint256(_additionalArgs[1]) == 2) {\r\n        // buy Bancor v2 case\r\n        _buyBancorPoolV2(\r\n          converterAddress,\r\n          etherAmount,\r\n          _connectorsAddress,\r\n          _connectorsAmount,\r\n          _additionalData\r\n        );\r\n      } else{\r\n        // buy Bancor v1 case\r\n        _buyBancorPoolV1(\r\n          converterAddress,\r\n          etherAmount,\r\n          _connectorsAddress,\r\n          _connectorsAmount,\r\n          _additionalData\r\n        );\r\n      }\r\n    }\r\n    else {\r\n      // buy Bancor old v0 case\r\n      _buyBancorPoolOldV(\r\n        converterAddress,\r\n        etherAmount,\r\n        _amount\r\n      );\r\n    }\r\n\r\n    // get recieved pool amount\r\n    poolAmountReceive = IERC20(_poolToken).balanceOf(address(this));\r\n    // make sure we recieved pool\r\n    require(poolAmountReceive > 0, \"ERR BNT pool received 0\");\r\n    // set token type for this asset\r\n    tokensTypes.addNewTokenType(_poolToken, \"BANCOR_ASSET\");\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buy pool in Bancor network for old converter version\r\n  */\r\n  function _buyBancorPoolOldV(\r\n    address converterAddress,\r\n    uint256 etherAmount,\r\n    uint256 _amount)\r\n   private\r\n  {\r\n    // get converter as contract\r\n    BancorConverterInterface converter = BancorConverterInterface(converterAddress);\r\n    // buy relay from converter\r\n    if(etherAmount > 0){\r\n      // payable\r\n      converter.fund.value(etherAmount)(_amount);\r\n    }else{\r\n      // non payable\r\n      converter.fund(_amount);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buy pool in Bancor network for new converter type 1\r\n  */\r\n  function _buyBancorPoolV1(\r\n    address converterAddress,\r\n    uint256 etherAmount,\r\n    address[] calldata _connectorsAddress,\r\n    uint256[] calldata _connectorsAmount,\r\n    bytes memory _additionalData\r\n  )\r\n    private\r\n  {\r\n    BancorConverterInterfaceV1 converter = BancorConverterInterfaceV1(converterAddress);\r\n    // get additional data\r\n    (uint256 minReturn) = abi.decode(_additionalData, (uint256));\r\n    // buy relay from converter\r\n    if(etherAmount > 0){\r\n      // payable\r\n      converter.addLiquidity.value(etherAmount)(_connectorsAddress, _connectorsAmount, minReturn);\r\n    }else{\r\n      // non payable\r\n      converter.addLiquidity(_connectorsAddress, _connectorsAmount, minReturn);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev helper for buy pool in Bancor network for new converter type 2\r\n  */\r\n  function _buyBancorPoolV2(\r\n    address converterAddress,\r\n    uint256 etherAmount,\r\n    address[] calldata _connectorsAddress,\r\n    uint256[] calldata _connectorsAmount,\r\n    bytes memory _additionalData\r\n  )\r\n    private\r\n  {\r\n    // get converter as contract\r\n    BancorConverterInterfaceV2 converter = BancorConverterInterfaceV2(converterAddress);\r\n    // get additional data\r\n    (uint256 minReturn) = abi.decode(_additionalData, (uint256));\r\n\r\n    // buy relay from converter\r\n    if(etherAmount > 0){\r\n      // payable\r\n      converter.addLiquidity.value(etherAmount)(_connectorsAddress[0], _connectorsAmount[0], minReturn);\r\n    }else{\r\n      // non payable\r\n      converter.addLiquidity(_connectorsAddress[0], _connectorsAmount[0], minReturn);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buying Uniswap v1 or v2 pool\r\n  */\r\n  function buyUniswapPool(\r\n    uint256 _amount,\r\n    address _poolToken,\r\n    address[] calldata _connectorsAddress,\r\n    uint256[] calldata _connectorsAmount,\r\n    bytes32[] calldata _additionalArgs,\r\n    bytes calldata _additionalData\r\n  )\r\n   private\r\n   returns(uint256 poolAmountReceive)\r\n  {\r\n    // define spender dependse of UNI pool version\r\n    address spender = uint256(_additionalArgs[0]) == 1\r\n    ? _poolToken\r\n    : address(uniswapV2Router);\r\n\r\n    // approve pool tokens to Uni pool exchange\r\n    _approvePoolConnectors(\r\n      _connectorsAddress,\r\n      _connectorsAmount,\r\n      spender);\r\n\r\n    // Buy Uni pool dependse of version\r\n    if(uint256(_additionalArgs[0]) == 1){\r\n      _buyUniswapPoolV1(\r\n        _poolToken,\r\n        _connectorsAddress[1], // connector ERC20 token address\r\n        _connectorsAmount[1],  // connector ERC20 token amount\r\n        _amount);\r\n    }else{\r\n      _buyUniswapPoolV2(\r\n        _poolToken,\r\n        _connectorsAddress,\r\n        _connectorsAmount,\r\n        _additionalData\r\n        );\r\n    }\r\n    // get pool amount\r\n    poolAmountReceive = IERC20(_poolToken).balanceOf(address(this));\r\n    // check if we recieved pool token\r\n    require(poolAmountReceive > 0, \"ERR UNI pool received 0\");\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buy pool in Uniswap network v1\r\n  *\r\n  * @param _poolToken        address of Uniswap exchange\r\n  * @param _tokenAddress     address of ERC20 conenctor\r\n  * @param _erc20Amount      amount of ERC20 connector\r\n  * @param _ethAmount        ETH amount (in wei)\r\n  */\r\n  function _buyUniswapPoolV1(\r\n    address _poolToken,\r\n    address _tokenAddress,\r\n    uint256 _erc20Amount,\r\n    uint256 _ethAmount\r\n  )\r\n   private\r\n  {\r\n    require(_ethAmount == msg.value, \"Not enough ETH\");\r\n    // get exchange contract\r\n    UniswapExchangeInterface exchange = UniswapExchangeInterface(_poolToken);\r\n    // set deadline\r\n    uint256 deadline = now + 15 minutes;\r\n    // buy pool\r\n    exchange.addLiquidity.value(_ethAmount)(\r\n      1,\r\n      _erc20Amount,\r\n      deadline\r\n    );\r\n    // Set token type\r\n    tokensTypes.addNewTokenType(_poolToken, \"UNISWAP_POOL\");\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buy pool in Uniswap network v2\r\n  */\r\n  function _buyUniswapPoolV2(\r\n    address _poolToken,\r\n    address[] calldata _connectorsAddress,\r\n    uint256[] calldata _connectorsAmount,\r\n    bytes calldata _additionalData\r\n  )\r\n   private\r\n  {\r\n    // set deadline\r\n    uint256 deadline = now + 15 minutes;\r\n    // get additional data\r\n    (uint256 amountAMinReturn,\r\n      uint256 amountBMinReturn) = abi.decode(_additionalData, (uint256, uint256));\r\n\r\n    // Buy UNI V2 pool\r\n    // ETH connector case\r\n    if(_connectorsAddress[0] == address(ETH_TOKEN_ADDRESS)){\r\n      uniswapV2Router.addLiquidityETH.value(_connectorsAmount[0])(\r\n       _connectorsAddress[1],\r\n       _connectorsAmount[1],\r\n       amountBMinReturn,\r\n       amountAMinReturn,\r\n       address(this),\r\n       deadline\r\n      );\r\n    }\r\n    // ERC20 connector case\r\n    else{\r\n      uniswapV2Router.addLiquidity(\r\n        _connectorsAddress[0],\r\n        _connectorsAddress[1],\r\n        _connectorsAmount[0],\r\n        _connectorsAmount[1],\r\n        amountAMinReturn,\r\n        amountBMinReturn,\r\n        address(this),\r\n        deadline\r\n      );\r\n    }\r\n    // Set token type\r\n    tokensTypes.addNewTokenType(_poolToken, \"UNISWAP_POOL_V2\");\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buying Balancer pool\r\n  */\r\n  function buyBalancerPool(\r\n    uint256 _amount,\r\n    address _poolToken,\r\n    address[] calldata _connectorsAddress,\r\n    uint256[] calldata _connectorsAmount\r\n  )\r\n    private\r\n    returns(uint256 poolAmountReceive)\r\n  {\r\n    // approve pool tokens to Balancer pool exchange\r\n    _approvePoolConnectors(\r\n      _connectorsAddress,\r\n      _connectorsAmount,\r\n      _poolToken);\r\n    // buy pool\r\n    IBalancerPool(_poolToken).joinPool(_amount, _connectorsAmount);\r\n    // get balance\r\n    poolAmountReceive = IERC20(_poolToken).balanceOf(address(this));\r\n    // check\r\n    require(poolAmountReceive > 0, \"ERR BALANCER pool received 0\");\r\n    // update type\r\n    tokensTypes.addNewTokenType(_poolToken, \"BALANCER_POOL\");\r\n  }\r\n\r\n  /**\r\n  * @dev helper for buying BNT or UNI pools, approve connectors from msg.sender to spender address\r\n  * return ETH amount if connectorsAddress contains ETH address\r\n  */\r\n  function _approvePoolConnectors(\r\n    address[] memory connectorsAddress,\r\n    uint256[] memory connectorsAmount,\r\n    address spender\r\n  )\r\n    private\r\n    returns(uint256 etherAmount)\r\n  {\r\n    // approve from portal to spender\r\n    for(uint8 i = 0; i < connectorsAddress.length; i++){\r\n      if(connectorsAddress[i] != address(ETH_TOKEN_ADDRESS)){\r\n        // transfer from msg.sender and approve to\r\n        _transferFromSenderAndApproveTo(\r\n          IERC20(connectorsAddress[i]),\r\n          connectorsAmount[i],\r\n          spender);\r\n      }else{\r\n        etherAmount = connectorsAmount[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev helper for buying BNT or UNI pools, transfer ERC20 tokens and ETH remains after bying pool,\r\n  * if the balance is positive on this contract, and calculate how many assets was spent.\r\n  */\r\n  function _transferPoolConnectorsRemains(\r\n    address[] memory connectorsAddress,\r\n    uint256[] memory currentConnectorsAmount\r\n  )\r\n    private\r\n    returns (uint256[] memory connectorsSpended)\r\n  {\r\n    // set length for connectorsSpended\r\n    connectorsSpended = new uint256[](currentConnectorsAmount.length);\r\n\r\n    // transfer connectors back to fund if some amount remains\r\n    uint256 remains = 0;\r\n    for(uint8 i = 0; i < connectorsAddress.length; i++){\r\n      // ERC20 case\r\n      if(connectorsAddress[i] != address(ETH_TOKEN_ADDRESS)){\r\n        // check balance\r\n        remains = IERC20(connectorsAddress[i]).balanceOf(address(this));\r\n        // transfer ERC20\r\n        if(remains > 0)\r\n           IERC20(connectorsAddress[i]).transfer(msg.sender, remains);\r\n      }\r\n      // ETH case\r\n      else {\r\n        remains = address(this).balance;\r\n        // transfer ETH\r\n        if(remains > 0)\r\n           (msg.sender).transfer(remains);\r\n      }\r\n\r\n      // calculate how many assets was spent\r\n      connectorsSpended[i] = currentConnectorsAmount[i].sub(remains);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev return token ration in ETH in Uniswap network\r\n  *\r\n  * @param _token     address of ERC20 token\r\n  * @param _amount    ETH amount\r\n  */\r\n  function getUniswapTokenAmountByETH(address _token, uint256 _amount)\r\n    public\r\n    view\r\n    returns(uint256)\r\n  {\r\n    UniswapExchangeInterface exchange = UniswapExchangeInterface(\r\n      uniswapFactoryV1.getExchange(_token));\r\n\r\n    return exchange.getTokenToEthOutputPrice(_amount);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev sell Bancor or Uniswap pool\r\n  *\r\n  * @param _amount            amount of pool token\r\n  * @param _type              pool type\r\n  * @param _poolToken         pool token address\r\n  * @param _additionalArgs    bytes32 array for case if need pass some extra params, can be empty\r\n  * @param _additionalData    for provide any additional data, if not used just set \"0x\"\r\n  */\r\n  function sellPool\r\n  (\r\n    uint256 _amount,\r\n    uint _type,\r\n    IERC20 _poolToken,\r\n    bytes32[] calldata _additionalArgs,\r\n    bytes calldata _additionalData\r\n  )\r\n  external\r\n  returns(\r\n    address[] memory connectorsAddress,\r\n    uint256[] memory connectorsAmount\r\n  )\r\n  {\r\n    // sell Bancor Pool\r\n    if(_type == uint(PortalType.Bancor)){\r\n      (connectorsAddress, connectorsAmount) = sellBancorPool(\r\n         _amount,\r\n         _poolToken,\r\n        _additionalArgs,\r\n        _additionalData);\r\n    }\r\n    // sell Uniswap pool\r\n    else if (_type == uint(PortalType.Uniswap)){\r\n      (connectorsAddress, connectorsAmount) = sellUniswapPool(\r\n        _poolToken,\r\n        _amount,\r\n        _additionalArgs,\r\n        _additionalData);\r\n    }\r\n    // sell Balancer pool\r\n    else if (_type == uint(PortalType.Balancer)){\r\n      (connectorsAddress, connectorsAmount) = sellBalancerPool(\r\n        _amount,\r\n        _poolToken,\r\n        _additionalData);\r\n    }\r\n    else{\r\n      revert(\"Unknown portal type\");\r\n    }\r\n\r\n    emit SellPool(address(_poolToken), _amount, msg.sender);\r\n  }\r\n\r\n\r\n\r\n  /**\r\n  * @dev helper for sell pool in Bancor network dependse of converter version and type\r\n  */\r\n  function sellBancorPool(\r\n    uint256 _amount,\r\n    IERC20 _poolToken,\r\n    bytes32[] calldata _additionalArgs,\r\n    bytes calldata _additionalData\r\n  )\r\n  private\r\n  returns(\r\n    address[] memory connectorsAddress,\r\n    uint256[] memory connectorsAmount\r\n  )\r\n  {\r\n    // transfer pool from fund\r\n    _poolToken.transferFrom(msg.sender, address(this), _amount);\r\n\r\n    // get Bancor converter version and type\r\n    uint256 bancorPoolVersion = uint256(_additionalArgs[0]);\r\n    uint256 bancorConverterType = uint256(_additionalArgs[1]);\r\n\r\n    // sell pool according converter version and type\r\n    if(bancorPoolVersion >= 28){\r\n      // sell new Bancor v2 pool\r\n      if(bancorConverterType == 2){\r\n        (connectorsAddress) = sellPoolViaBancorV2(\r\n          _poolToken,\r\n          _amount,\r\n          _additionalData\r\n        );\r\n      }\r\n      // sell new Bancor v1 pool\r\n      else{\r\n        (connectorsAddress) = sellPoolViaBancorV1(_poolToken, _amount, _additionalData);\r\n      }\r\n    }\r\n    // sell old Bancor pool\r\n    else{\r\n      (connectorsAddress) = sellPoolViaBancorOldV(_poolToken, _amount);\r\n    }\r\n\r\n    // transfer pool connectors back to fund\r\n    connectorsAmount = transferConnectorsToSender(connectorsAddress);\r\n  }\r\n\r\n  /**\r\n  * @dev helper for sell pool in Bancor network for old converter version\r\n  *\r\n  * @param _poolToken        address of bancor relay\r\n  * @param _amount           amount of bancor relay\r\n  */\r\n  function sellPoolViaBancorOldV(IERC20 _poolToken, uint256 _amount)\r\n   private\r\n   returns(address[] memory connectorsAddress)\r\n  {\r\n    // get Bancor Converter instance\r\n    address converterAddress = getBacorConverterAddressByRelay(address(_poolToken), 0);\r\n    BancorConverterInterface converter = BancorConverterInterface(converterAddress);\r\n\r\n    // liquidate relay\r\n    converter.liquidate(_amount);\r\n\r\n    // return connectors addresses\r\n    uint256 connectorsCount = converter.connectorTokenCount();\r\n    connectorsAddress = new address[](connectorsCount);\r\n\r\n    for(uint8 i = 0; i<connectorsCount; i++){\r\n      connectorsAddress[i] = address(converter.connectorTokens(i));\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for sell pool in Bancor network converter type v1\r\n  */\r\n  function sellPoolViaBancorV1(\r\n    IERC20 _poolToken,\r\n    uint256 _amount,\r\n    bytes memory _additionalData\r\n  )\r\n   private\r\n   returns(address[] memory connectorsAddress)\r\n  {\r\n    // get Bancor Converter address\r\n    address converterAddress = getBacorConverterAddressByRelay(address(_poolToken), 1);\r\n    // get min returns\r\n    uint256[] memory reserveMinReturnAmounts;\r\n    // get connetor tokens data for remove liquidity\r\n    (connectorsAddress, reserveMinReturnAmounts) = abi.decode(_additionalData, (address[], uint256[]));\r\n    // get coneverter v1 contract\r\n    BancorConverterInterfaceV1 converter = BancorConverterInterfaceV1(converterAddress);\r\n    // remove liquidity (v1)\r\n    converter.removeLiquidity(_amount, connectorsAddress, reserveMinReturnAmounts);\r\n  }\r\n\r\n  /**\r\n  * @dev helper for sell pool in Bancor network converter type v2\r\n  */\r\n  function sellPoolViaBancorV2(\r\n    IERC20 _poolToken,\r\n    uint256 _amount,\r\n    bytes calldata _additionalData\r\n  )\r\n   private\r\n   returns(address[] memory connectorsAddress)\r\n  {\r\n    // get Bancor Converter address\r\n    address converterAddress = getBacorConverterAddressByRelay(address(_poolToken), 2);\r\n    // get converter v2 contract\r\n    BancorConverterInterfaceV2 converter = BancorConverterInterfaceV2(converterAddress);\r\n    // get additional data\r\n    uint256 minReturn;\r\n    // get pool connectors\r\n    (connectorsAddress, minReturn) = abi.decode(_additionalData, (address[], uint256));\r\n    // remove liquidity (v2)\r\n    converter.removeLiquidity(address(_poolToken), _amount, minReturn);\r\n  }\r\n\r\n  /**\r\n  * @dev helper for sell pool in Uniswap network for v1 and v2\r\n  */\r\n  function sellUniswapPool(\r\n    IERC20 _poolToken,\r\n    uint256 _amount,\r\n    bytes32[] calldata _additionalArgs,\r\n    bytes calldata _additionalData\r\n  )\r\n   private\r\n   returns(\r\n     address[] memory connectorsAddress,\r\n     uint256[] memory connectorsAmount\r\n  )\r\n  {\r\n    // define spender dependse of UNI pool version\r\n    address spender = uint256(_additionalArgs[0]) == 1\r\n    ? address(_poolToken)\r\n    : address(uniswapV2Router);\r\n\r\n    // approve pool token\r\n    _transferFromSenderAndApproveTo(_poolToken, _amount, spender);\r\n\r\n    // sell Uni v1 or v2 pool\r\n    if(uint256(_additionalArgs[0]) == 1){\r\n      (connectorsAddress) = sellPoolViaUniswapV1(_poolToken, _amount);\r\n    }else{\r\n      (connectorsAddress) = sellPoolViaUniswapV2(_amount, _additionalData);\r\n    }\r\n\r\n    // transfer pool connectors back to fund\r\n    connectorsAmount = transferConnectorsToSender(connectorsAddress);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for sell pool in Uniswap network v1\r\n  */\r\n  function sellPoolViaUniswapV1(\r\n    IERC20 _poolToken,\r\n    uint256 _amount\r\n  )\r\n    private\r\n    returns(address[] memory connectorsAddress)\r\n  {\r\n    // get token by pool token\r\n    address tokenAddress = uniswapFactoryV1.getToken(address(_poolToken));\r\n    // check if such a pool exist\r\n    if(tokenAddress != address(0x0000000000000000000000000000000000000000)){\r\n      // get UNI exchane\r\n      UniswapExchangeInterface exchange = UniswapExchangeInterface(address(_poolToken));\r\n\r\n      // get min returns\r\n      (uint256 minEthAmount,\r\n       uint256 minErcAmount) = getUniswapConnectorsAmountByPoolAmount(_amount, address(_poolToken));\r\n\r\n      // set deadline\r\n      uint256 deadline = now + 15 minutes;\r\n\r\n      // liquidate\r\n      exchange.removeLiquidity(\r\n         _amount,\r\n         minEthAmount,\r\n         minErcAmount,\r\n         deadline);\r\n\r\n      // return data\r\n      connectorsAddress = new address[](2);\r\n      connectorsAddress[0] = address(ETH_TOKEN_ADDRESS);\r\n      connectorsAddress[1] = tokenAddress;\r\n    }\r\n    else{\r\n      revert(\"Not exist UNI v1 pool\");\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev helper for sell pool in Uniswap network v2\r\n  */\r\n  function sellPoolViaUniswapV2(\r\n    uint256 _amount,\r\n    bytes calldata _additionalData\r\n  )\r\n    private\r\n    returns(address[] memory connectorsAddress)\r\n  {\r\n    // get additional data\r\n    uint256 minReturnA;\r\n    uint256 minReturnB;\r\n\r\n    // get connectors and min return from bytes\r\n    (connectorsAddress,\r\n      minReturnA,\r\n      minReturnB) = abi.decode(_additionalData, (address[], uint256, uint256));\r\n\r\n    // get deadline\r\n    uint256 deadline = now + 15 minutes;\r\n\r\n    // sell pool with include eth connector\r\n    if(connectorsAddress[0] == address(ETH_TOKEN_ADDRESS)){\r\n      uniswapV2Router.removeLiquidityETH(\r\n          connectorsAddress[1],\r\n          _amount,\r\n          minReturnB,\r\n          minReturnA,\r\n          address(this),\r\n          deadline\r\n      );\r\n    }\r\n    // sell pool only with erc20 connectors\r\n    else{\r\n      uniswapV2Router.removeLiquidity(\r\n          connectorsAddress[0],\r\n          connectorsAddress[1],\r\n          _amount,\r\n          minReturnA,\r\n          minReturnB,\r\n          address(this),\r\n          deadline\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev helper for sell Balancer pool\r\n  */\r\n\r\n  function sellBalancerPool(\r\n    uint256 _amount,\r\n    IERC20 _poolToken,\r\n    bytes calldata _additionalData\r\n  )\r\n  private\r\n  returns(\r\n    address[] memory connectorsAddress,\r\n    uint256[] memory connectorsAmount\r\n  )\r\n  {\r\n    // get additional data\r\n    uint256[] memory minConnectorsAmount;\r\n    (connectorsAddress,\r\n      minConnectorsAmount) = abi.decode(_additionalData, (address[], uint256[]));\r\n    // approve pool\r\n    _transferFromSenderAndApproveTo(\r\n      _poolToken,\r\n      _amount,\r\n      address(_poolToken));\r\n    // sell pool\r\n    IBalancerPool(address(_poolToken)).exitPool(_amount, minConnectorsAmount);\r\n    // transfer connectors back to fund\r\n    connectorsAmount = transferConnectorsToSender(connectorsAddress);\r\n  }\r\n\r\n  /**\r\n  * @dev helper for sell Bancor and Uniswap pools\r\n  * transfer pool connectors from sold pool back to sender\r\n  * return array with amount of recieved connectors\r\n  */\r\n  function transferConnectorsToSender(address[] memory connectorsAddress)\r\n    private\r\n    returns(uint256[] memory connectorsAmount)\r\n  {\r\n    // define connectors amount length\r\n    connectorsAmount = new uint256[](connectorsAddress.length);\r\n\r\n    uint256 received = 0;\r\n    // transfer connectors back to fund\r\n    for(uint8 i = 0; i < connectorsAddress.length; i++){\r\n      // ETH case\r\n      if(connectorsAddress[i] == address(ETH_TOKEN_ADDRESS)){\r\n        // update ETH data\r\n        received = address(this).balance;\r\n        connectorsAmount[i] = received;\r\n        // tarnsfer ETH\r\n        if(received > 0)\r\n          payable(msg.sender).transfer(received);\r\n      }\r\n      // ERC20 case\r\n      else{\r\n        // update ERC20 data\r\n        received = IERC20(connectorsAddress[i]).balanceOf(address(this));\r\n        connectorsAmount[i] = received;\r\n        // transfer ERC20\r\n        if(received > 0)\r\n          IERC20(connectorsAddress[i]).transfer(msg.sender, received);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev helper for get bancor converter by bancor relay addrses\r\n  *\r\n  * @param _relay       address of bancor relay\r\n  * @param _poolType    bancor pool type\r\n  */\r\n  function getBacorConverterAddressByRelay(address _relay, uint256 _poolType)\r\n    public\r\n    view\r\n    returns(address converter)\r\n  {\r\n    if(_poolType == 2){\r\n      address smartTokenContainer = SmartTokenInterface(_relay).owner();\r\n      converter = SmartTokenInterface(smartTokenContainer).owner();\r\n    }else{\r\n      converter = SmartTokenInterface(_relay).owner();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev return ERC20 address from Uniswap exchange address\r\n  *\r\n  * @param _exchange       address of uniswap exchane\r\n  */\r\n  function getTokenByUniswapExchange(address _exchange)\r\n    external\r\n    view\r\n    returns(address)\r\n  {\r\n    return uniswapFactoryV1.getToken(_exchange);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get amounts for both Uniswap connectors for input amount of pool\r\n  *\r\n  * @param _amount         relay amount\r\n  * @param _exchange       address of uniswap exchane\r\n  */\r\n  function getUniswapConnectorsAmountByPoolAmount(\r\n    uint256 _amount,\r\n    address _exchange\r\n  )\r\n    public\r\n    view\r\n    returns(uint256 ethAmount, uint256 ercAmount)\r\n  {\r\n    IERC20 token = IERC20(uniswapFactoryV1.getToken(_exchange));\r\n    // total_liquidity exchange.totalSupply\r\n    uint256 totalLiquidity = UniswapExchangeInterface(_exchange).totalSupply();\r\n    // ethAmount = amount * exchane.eth.balance / total_liquidity\r\n    ethAmount = _amount.mul(_exchange.balance).div(totalLiquidity);\r\n    // ercAmount = amount * token.balanceOf(exchane) / total_liquidity\r\n    ercAmount = _amount.mul(token.balanceOf(_exchange)).div(totalLiquidity);\r\n  }\r\n\r\n  /**\r\n  * @dev helper for get amounts for both Uniswap connectors for input amount of pool\r\n  * for Uniswap version 2\r\n  *\r\n  * @param _amount         pool amount\r\n  * @param _exchange       address of uniswap exchane\r\n  */\r\n  function getUniswapV2ConnectorsAmountByPoolAmount(\r\n    uint256 _amount,\r\n    address _exchange\r\n  )\r\n    public\r\n    view\r\n    returns(\r\n      uint256 tokenAmountOne,\r\n      uint256 tokenAmountTwo,\r\n      address tokenAddressOne,\r\n      address tokenAddressTwo\r\n    )\r\n  {\r\n    tokenAddressOne = IUniswapV2Pair(_exchange).token0();\r\n    tokenAddressTwo = IUniswapV2Pair(_exchange).token1();\r\n    // total_liquidity exchange.totalSupply\r\n    uint256 totalLiquidity = IERC20(_exchange).totalSupply();\r\n    // ethAmount = amount * exchane.eth.balance / total_liquidity\r\n    tokenAmountOne = _amount.mul(IERC20(tokenAddressOne).balanceOf(_exchange)).div(totalLiquidity);\r\n    // ercAmount = amount * token.balanceOf(exchane) / total_liquidity\r\n    tokenAmountTwo = _amount.mul(IERC20(tokenAddressTwo).balanceOf(_exchange)).div(totalLiquidity);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get amounts all Balancer connectors for input amount of pool\r\n  * for Balancer\r\n  *\r\n  * step 1 get all tokens\r\n  * step 2 get user amount from each token by a user pool share\r\n  *\r\n  * @param _amount         pool amount\r\n  * @param _pool           address of balancer pool\r\n  */\r\n  function getBalancerConnectorsAmountByPoolAmount(\r\n    uint256 _amount,\r\n    address _pool\r\n  )\r\n    public\r\n    view\r\n    returns(\r\n      address[] memory tokens,\r\n      uint256[] memory tokensAmount\r\n    )\r\n  {\r\n    IBalancerPool balancerPool = IBalancerPool(_pool);\r\n    // get all pool tokens\r\n    tokens = balancerPool.getCurrentTokens();\r\n    // set tokens amount length\r\n    tokensAmount = new uint256[](tokens.length);\r\n    // get total pool shares\r\n    uint256 totalShares = IERC20(_pool).totalSupply();\r\n    // calculate all tokens from the pool\r\n    for(uint i = 0; i < tokens.length; i++){\r\n      // get a certain total token amount in pool\r\n      uint256 totalTokenAmount = IERC20(tokens[i]).balanceOf(_pool);\r\n      // get a certain pool share (_amount) from a certain token amount in pool\r\n      tokensAmount[i] = totalTokenAmount.mul(_amount).div(totalShares);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get value in pool for a certain connector address\r\n  *\r\n  * @param _amount      relay amount\r\n  * @param _relay       address of bancor relay\r\n  * @param _connector   address of relay connector\r\n  */\r\n  function getBancorConnectorsAmountByRelayAmount\r\n  (\r\n    uint256 _amount,\r\n    IERC20  _relay,\r\n    address _connector\r\n  )\r\n    public\r\n    view\r\n    returns(uint256 connectorAmount)\r\n  {\r\n    // get converter contract\r\n    BancorConverterInterface converter = BancorConverterInterface(\r\n      SmartTokenInterface(address(_relay)).owner());\r\n\r\n    // get connector balance\r\n    uint256 connectorBalance = converter.getConnectorBalance(IERC20(_connector));\r\n\r\n    // get bancor formula contract\r\n    IBancorFormula bancorFormula = IBancorFormula(\r\n      bancorData.getBancorContractAddresByName(\"BancorFormula\"));\r\n\r\n    // calculate input\r\n    connectorAmount = bancorFormula.calculateFundCost(\r\n      _relay.totalSupply(),\r\n      connectorBalance,\r\n      1000000,\r\n       _amount);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get Bancor ERC20 connectors addresses for old Bancor version\r\n  *\r\n  * @param _relay       address of bancor relay\r\n  */\r\n  function getBancorConnectorsByRelay(address _relay)\r\n    public\r\n    view\r\n    returns(\r\n    IERC20[] memory connectors\r\n    )\r\n  {\r\n    address converterAddress = getBacorConverterAddressByRelay(_relay, 0);\r\n    BancorConverterInterface converter = BancorConverterInterface(converterAddress);\r\n    uint256 connectorTokenCount = converter.connectorTokenCount();\r\n    connectors = new IERC20[](connectorTokenCount);\r\n\r\n    for(uint8 i; i < connectorTokenCount; i++){\r\n      connectors[i] = converter.connectorTokens(i);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get ratio between assets in bancor newtork\r\n  *\r\n  * @param _from      token or relay address\r\n  * @param _to        token or relay address\r\n  * @param _amount    amount from\r\n  */\r\n  function getBancorRatio(address _from, address _to, uint256 _amount)\r\n  external\r\n  view\r\n  returns(uint256)\r\n  {\r\n    // return Bancor ratio\r\n    return bancorData.getBancorRatioForAssets(IERC20(_from), IERC20(_to), _amount);\r\n  }\r\n\r\n  // owner of portal can change getBancorData helper, for case if Bancor do some major updates\r\n  function setNewGetBancorData(address _bancorData) public onlyOwner {\r\n    bancorData = IGetBancorData(_bancorData);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Transfers tokens to this contract and approves them to another address\r\n  *\r\n  * @param _source          Token to transfer and approve\r\n  * @param _sourceAmount    The amount to transfer and approve (in _source token)\r\n  * @param _to              Address to approve to\r\n  */\r\n  function _transferFromSenderAndApproveTo(IERC20 _source, uint256 _sourceAmount, address _to) private {\r\n    require(_source.transferFrom(msg.sender, address(this), _sourceAmount));\r\n    // reset previous approve (some ERC20 not allow do new approve if already approved)\r\n    _source.approve(_to, 0);\r\n    // approve\r\n    _source.approve(_to, _sourceAmount);\r\n  }\r\n\r\n  // fallback payable function to receive ether from other contract addresses\r\n  fallback() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bancorData\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactoryV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokensTypes\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"BuyPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"SellPool\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"bancorData\",\"outputs\":[{\"internalType\":\"contract IGetBancorData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_connectorsAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_connectorsAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_additionalArgs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_additionalData\",\"type\":\"bytes\"}],\"name\":\"buyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"connectorsSpended\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolType\",\"type\":\"uint256\"}],\"name\":\"getBacorConverterAddressByRelay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getBalancerConnectorsAmountByPoolAmount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_connector\",\"type\":\"address\"}],\"name\":\"getBancorConnectorsAmountByRelayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"connectorAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"getBancorConnectorsByRelay\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"connectors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBancorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getDataForBuyingPool\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"connectorsAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"connectorsAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"getTokenByUniswapExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"getUniswapConnectorsAmountByPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ercAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUniswapTokenAmountByETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"getUniswapV2ConnectorsAmountByPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountTwo\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddressOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddressTwo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_additionalArgs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_additionalData\",\"type\":\"bytes\"}],\"name\":\"sellPool\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"connectorsAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"connectorsAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bancorData\",\"type\":\"address\"}],\"name\":\"setNewGetBancorData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensTypes\",\"outputs\":[{\"internalType\":\"contract ITokensTypeStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactoryV1\",\"outputs\":[{\"internalType\":\"contract UniswapFactoryInterfaceV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PoolPortal","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003ae392a4c6a99fcb991e208f9d74618fff513834000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d950000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000037ff4bc9a425f37d3af95662c9d88a88d05f3417","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://581e31a846e67f240cd392d9a884f154158ff14711e934b56e248339ac0601c3"}]}