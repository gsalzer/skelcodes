{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nlibrary CoreLibrary {\r\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n}\r\n\r\ninterface ILendingPoolAddressesProvider {\r\n  function getLendingPool() external view returns (address);\r\n\r\n  function getLendingPoolCore() external view returns (address payable);\r\n\r\n  function getLendingPoolDataProvider() external view returns (address);\r\n\r\n  function getLendingPoolParametersProvider() external view returns (address);\r\n\r\n  function getPriceOracle() external view returns (address);\r\n}\r\n\r\n\r\ninterface ILendingPoolCore {\r\n  function getReserves() external view returns (address[] memory);\r\n\r\n  function getReserveTotalLiquidity(address _reserve) external view returns (uint256);\r\n\r\n  function getReserveAvailableLiquidity(address _reserve) external view returns (uint256);\r\n\r\n  function getReserveTotalBorrowsStable(address _reserve) external view returns (uint256);\r\n\r\n  function getReserveTotalBorrowsVariable(address _reserve) external view returns (uint256);\r\n\r\n  function getReserveCurrentLiquidityRate(address _reserve) external view returns (uint256);\r\n\r\n  function getReserveCurrentVariableBorrowRate(address _reserve) external view returns (uint256);\r\n\r\n  function getReserveCurrentStableBorrowRate(address _reserve) external view returns (uint256);\r\n\r\n  function getReserveCurrentAverageStableBorrowRate(address _reserve)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function getReserveUtilizationRate(address _reserve) external view returns (uint256);\r\n\r\n  function getReserveLiquidityCumulativeIndex(address _reserve) external view returns (uint256);\r\n\r\n  function getReserveVariableBorrowsCumulativeIndex(address _reserve)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function getReserveATokenAddress(address _reserve) external view returns (address);\r\n\r\n  function getReserveLastUpdate(address _reserve) external view returns (uint40);\r\n\r\n  // configuration\r\n  function getReserveConfiguration(address _reserve)\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      bool\r\n    );\r\n\r\n  function getReserveIsStableBorrowRateEnabled(address _reserve) external view returns (bool);\r\n\r\n  function isReserveBorrowingEnabled(address _reserve) external view returns (bool);\r\n\r\n  function getReserveIsActive(address _reserve) external view returns (bool);\r\n\r\n  function getReserveLiquidationBonus(address _reserve) external view returns (uint256);\r\n\r\n  // user related\r\n  function getUserOriginationFee(address _reserve, address _user) external view returns (uint256);\r\n\r\n  function getUserBorrowBalances(address _reserve, address _user)\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    );\r\n\r\n  function getUserCurrentBorrowRateMode(address _reserve, address _user)\r\n    external\r\n    view\r\n    returns (CoreLibrary.InterestRateMode);\r\n\r\n  function getUserCurrentStableBorrowRate(address _reserve, address _user)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function getUserVariableBorrowCumulativeIndex(address _reserve, address _user)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function getUserLastUpdate(address _reserve, address _user) external view returns (uint40);\r\n\r\n  function isUserUseReserveAsCollateralEnabled(address _reserve, address _user)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\ninterface IAToken {\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function underlyingAssetAddress() external view returns (address);\r\n\r\n  function principalBalanceOf(address _user) external view returns (uint256);\r\n\r\n  function getUserIndex(address _user) external view returns (uint256);\r\n\r\n  function getInterestRedirectionAddress(address _user) external view returns (address);\r\n\r\n  function getRedirectedBalance(address _user) external view returns (uint256);\r\n}\r\n\r\ninterface IChainlinkProxyPriceProvider {\r\n  function getAssetPrice(address _asset) external view returns (uint256);\r\n}\r\n\r\ninterface IPoolDataProvider {\r\n  struct ReserveData {\r\n    address underlyingAsset;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n    bool isActive;\r\n    bool usageAsCollateralEnabled;\r\n    bool borrowingEnabled;\r\n    bool stableBorrowRateEnabled;\r\n    uint256 baseLTVasCollateral;\r\n    uint256 averageStableBorrowRate;\r\n    uint256 liquidityIndex;\r\n    uint256 reserveLiquidationThreshold;\r\n    uint256 reserveLiquidationBonus;\r\n    uint256 variableBorrowIndex;\r\n    uint256 variableBorrowRate;\r\n    uint256 availableLiquidity;\r\n    uint256 stableBorrowRate;\r\n    uint256 liquidityRate;\r\n    uint256 totalBorrowsStable;\r\n    uint256 totalBorrowsVariable;\r\n    uint256 totalLiquidity;\r\n    uint256 utilizationRate;\r\n    uint40 lastUpdateTimestamp;\r\n    uint256 priceInEth;\r\n    address aTokenAddress;\r\n  }\r\n\r\n  struct UserReserveData {\r\n    address underlyingAsset;\r\n    uint256 principalATokenBalance;\r\n    uint256 userBalanceIndex;\r\n    uint256 redirectedBalance;\r\n    address interestRedirectionAddress;\r\n    bool usageAsCollateralEnabledOnUser;\r\n    uint256 borrowRate;\r\n    CoreLibrary.InterestRateMode borrowRateMode;\r\n    uint256 originationFee;\r\n    uint256 principalBorrows;\r\n    uint256 variableBorrowIndex;\r\n    uint256 lastUpdateTimestamp;\r\n  }\r\n\r\n  struct ATokenSupplyData {\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n    uint256 totalSupply;\r\n    address aTokenAddress;\r\n  }\r\n\r\n  function getReservesData(ILendingPoolAddressesProvider provider)\r\n    external\r\n    view\r\n    returns (ReserveData[] memory, uint256);\r\n\r\n  function getUserReservesData(ILendingPoolAddressesProvider provider, address user)\r\n    external\r\n    view\r\n    returns (UserReserveData[] memory);\r\n\r\n  function getAllATokenSupply(ILendingPoolAddressesProvider provider)\r\n    external\r\n    view\r\n    returns (ATokenSupplyData[] memory);\r\n\r\n  function getATokenSupply(address[] calldata aTokens)\r\n    external\r\n    view\r\n    returns (ATokenSupplyData[] memory);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PoolDataProvider is IPoolDataProvider {\r\n  constructor() public {}\r\n\r\n  address public constant MOCK_USD_ADDRESS = 0x10F7Fc1F91Ba351f9C629c5947AD69bD03C05b96;\r\n\r\n  function getReservesData(ILendingPoolAddressesProvider provider)\r\n    external\r\n    override\r\n    view\r\n    returns (ReserveData[] memory, uint256)\r\n  {\r\n    ILendingPoolCore core = ILendingPoolCore(provider.getLendingPoolCore());\r\n    IChainlinkProxyPriceProvider oracle = IChainlinkProxyPriceProvider(provider.getPriceOracle());\r\n\r\n    address[] memory reserves = core.getReserves();\r\n    ReserveData[] memory reservesData = new ReserveData[](reserves.length);\r\n\r\n    address reserve;\r\n    for (uint256 i = 0; i < reserves.length; i++) {\r\n      reserve = reserves[i];\r\n      ReserveData memory reserveData = reservesData[i];\r\n\r\n      // base asset info\r\n      reserveData.aTokenAddress = core.getReserveATokenAddress(reserve);\r\n      IAToken assetDetails = IAToken(reserveData.aTokenAddress);\r\n      reserveData.decimals = assetDetails.decimals();\r\n      // we're getting this info from the aToken, because some of assets can be not compliant with ETC20Detailed\r\n      reserveData.symbol = assetDetails.symbol();\r\n      reserveData.name = '';\r\n\r\n      // reserve configuration\r\n      reserveData.underlyingAsset = reserve;\r\n      reserveData.isActive = core.getReserveIsActive(reserve);\r\n      (\r\n        ,\r\n        reserveData.baseLTVasCollateral,\r\n        reserveData.reserveLiquidationThreshold,\r\n        reserveData.usageAsCollateralEnabled\r\n      ) = core.getReserveConfiguration(reserve);\r\n      reserveData.stableBorrowRateEnabled = core.getReserveIsStableBorrowRateEnabled(reserve);\r\n      reserveData.borrowingEnabled = core.isReserveBorrowingEnabled(reserve);\r\n      reserveData.reserveLiquidationBonus = core.getReserveLiquidationBonus(reserve);\r\n      reserveData.priceInEth = oracle.getAssetPrice(reserve);\r\n\r\n      // reserve current state\r\n      reserveData.totalLiquidity = core.getReserveTotalLiquidity(reserve);\r\n      reserveData.availableLiquidity = core.getReserveAvailableLiquidity(reserve);\r\n      reserveData.totalBorrowsStable = core.getReserveTotalBorrowsStable(reserve);\r\n      reserveData.totalBorrowsVariable = core.getReserveTotalBorrowsVariable(reserve);\r\n      reserveData.liquidityRate = core.getReserveCurrentLiquidityRate(reserve);\r\n      reserveData.variableBorrowRate = core.getReserveCurrentVariableBorrowRate(reserve);\r\n      reserveData.stableBorrowRate = core.getReserveCurrentStableBorrowRate(reserve);\r\n      reserveData.averageStableBorrowRate = core.getReserveCurrentAverageStableBorrowRate(reserve);\r\n      reserveData.utilizationRate = core.getReserveUtilizationRate(reserve);\r\n      reserveData.liquidityIndex = core.getReserveLiquidityCumulativeIndex(reserve);\r\n      reserveData.variableBorrowIndex = core.getReserveVariableBorrowsCumulativeIndex(reserve);\r\n      reserveData.lastUpdateTimestamp = core.getReserveLastUpdate(reserve);\r\n    }\r\n    return (reservesData, oracle.getAssetPrice(MOCK_USD_ADDRESS));\r\n  }\r\n\r\n  function getUserReservesData(ILendingPoolAddressesProvider provider, address user)\r\n    external\r\n    override\r\n    view\r\n    returns (UserReserveData[] memory)\r\n  {\r\n    ILendingPoolCore core = ILendingPoolCore(provider.getLendingPoolCore());\r\n\r\n    address[] memory reserves = core.getReserves();\r\n    UserReserveData[] memory userReservesData = new UserReserveData[](reserves.length);\r\n\r\n    address reserve;\r\n    for (uint256 i = 0; i < reserves.length; i++) {\r\n      reserve = reserves[i];\r\n      IAToken aToken = IAToken(core.getReserveATokenAddress(reserve));\r\n      UserReserveData memory userReserveData = userReservesData[i];\r\n\r\n      userReserveData.underlyingAsset = reserve;\r\n      userReserveData.principalATokenBalance = aToken.principalBalanceOf(user);\r\n      (userReserveData.principalBorrows, , ) = core.getUserBorrowBalances(reserve, user);\r\n      userReserveData.borrowRateMode = core.getUserCurrentBorrowRateMode(reserve, user);\r\n      if (userReserveData.borrowRateMode == CoreLibrary.InterestRateMode.STABLE) {\r\n        userReserveData.borrowRate = core.getUserCurrentStableBorrowRate(reserve, user);\r\n      }\r\n      userReserveData.originationFee = core.getUserOriginationFee(reserve, user);\r\n      userReserveData.variableBorrowIndex = core.getUserVariableBorrowCumulativeIndex(\r\n        reserve,\r\n        user\r\n      );\r\n      userReserveData.userBalanceIndex = aToken.getUserIndex(user);\r\n      userReserveData.redirectedBalance = aToken.getRedirectedBalance(user);\r\n      userReserveData.interestRedirectionAddress = aToken.getInterestRedirectionAddress(user);\r\n      userReserveData.lastUpdateTimestamp = core.getUserLastUpdate(reserve, user);\r\n      userReserveData.usageAsCollateralEnabledOnUser = core.isUserUseReserveAsCollateralEnabled(\r\n        reserve,\r\n        user\r\n      );\r\n    }\r\n    return userReservesData;\r\n  }\r\n\r\n  /**\r\n    Gets the total supply of all aTokens for a specific market\r\n    @param provider The LendingPoolAddressProvider contract, different for each market.\r\n   */\r\n  function getAllATokenSupply(ILendingPoolAddressesProvider provider)\r\n    external\r\n    override\r\n    view\r\n    returns (ATokenSupplyData[] memory)\r\n  {\r\n    ILendingPoolCore core = ILendingPoolCore(provider.getLendingPoolCore());\r\n    address[] memory allReserves = core.getReserves();\r\n    address[] memory allATokens = new address[](allReserves.length);\r\n\r\n    for (uint256 i = 0; i < allReserves.length; i++) {\r\n      allATokens[i] = core.getReserveATokenAddress(allReserves[i]);\r\n    }\r\n    return getATokenSupply(allATokens);\r\n  }\r\n\r\n  /**\r\n    Gets the total supply of associated reserve aTokens\r\n    @param aTokens An array of aTokens addresses\r\n   */\r\n  function getATokenSupply(address[] memory aTokens)\r\n    public\r\n    override\r\n    view\r\n    returns (ATokenSupplyData[] memory)\r\n  {\r\n    ATokenSupplyData[] memory totalSuppliesData = new ATokenSupplyData[](aTokens.length);\r\n\r\n    address aTokenAddress;\r\n    for (uint256 i = 0; i < aTokens.length; i++) {\r\n      aTokenAddress = aTokens[i];\r\n      IAToken aToken = IAToken(aTokenAddress);\r\n\r\n      totalSuppliesData[i] = ATokenSupplyData({\r\n        name: aToken.name(),\r\n        symbol: aToken.symbol(),\r\n        decimals: aToken.decimals(),\r\n        totalSupply: aToken.totalSupply(),\r\n        aTokenAddress: aTokenAddress\r\n      });\r\n    }\r\n    return totalSuppliesData;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MOCK_USD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"aTokens\",\"type\":\"address[]\"}],\"name\":\"getATokenSupply\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct IPoolDataProvider.ATokenSupplyData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getAllATokenSupply\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct IPoolDataProvider.ATokenSupplyData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getReservesData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseLTVasCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveLiquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowsStable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowsVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"priceInEth\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct IPoolDataProvider.ReserveData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReservesData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principalATokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalanceIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redirectedBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestRedirectionAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabledOnUser\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"enum CoreLibrary.InterestRateMode\",\"name\":\"borrowRateMode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"originationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IPoolDataProvider.UserReserveData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PoolDataProvider","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fab331ae83f6154f6bd40ac6b420d01c0a7c02ac18df4d8fdc73727cdd4f0e2a"}]}