{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract ERC20TokenBankInterface{\r\n  function balance() public view returns(uint);\r\n  function token() public view returns(address, string memory);\r\n  function issue(address _to, uint _amount) public returns (bool success);\r\n}\r\n\r\ncontract LimitedGrant{\r\n  address public owner;\r\n  ERC20TokenBankInterface public token_bank;\r\n  uint256 public limit_period;\r\n  uint256 public limit_amount;\r\n  uint256 public last_grant_block_num;\r\n  string public name;\r\n\r\n\r\n  constructor(string memory _name, address _erc20bank,\r\n              uint256 _limit_period, uint256 _limit_amount) public{\r\n                owner = msg.sender;\r\n                name = _name;\r\n                token_bank = ERC20TokenBankInterface(_erc20bank);\r\n                limit_period = _limit_period;\r\n                limit_amount = _limit_amount;\r\n                last_grant_block_num = 0;\r\n  }\r\n\r\n  function transferOwnership(address _new) public{\r\n    require(msg.sender == owner, \"only owner can call this\");\r\n    owner = _new;\r\n  }\r\n\r\n  event LGrantUser(address to, uint256 amount, string reason);\r\n  function grant(address _to, uint256 _amount, string memory _reason) public{\r\n    require(msg.sender == owner, \"only owner can call this\");\r\n    require(block.number > last_grant_block_num + limit_period, \"too close\");\r\n    require(_amount <= limit_amount, \"too much\");\r\n    require(token_bank.balance() >= _amount, \"not enough token\");\r\n\r\n    token_bank.issue(_to, _amount);\r\n    emit LGrantUser(_to, _amount, _reason);\r\n  }\r\n}\r\n\r\ncontract LimitedGrantFactory{\r\n  event NewLimitedGrant(address addr);\r\n\r\n  function createLimitedGrant(string memory name, address erc20bank, uint256 limit_period, uint256 limit_amount)\r\n  public returns(address){\r\n    LimitedGrant lg = new LimitedGrant(name, erc20bank, limit_period, limit_amount);\r\n    lg.transferOwnership(msg.sender);\r\n    emit NewLimitedGrant(address(lg));\r\n    return address(lg);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"erc20bank\",\"type\":\"address\"},{\"name\":\"limit_period\",\"type\":\"uint256\"},{\"name\":\"limit_amount\",\"type\":\"uint256\"}],\"name\":\"createLimitedGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NewLimitedGrant\",\"type\":\"event\"}]","ContractName":"LimitedGrantFactory","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9cd5ff9d8d3cba894fa57a48d0c62c2e7b3ffcb20692c437240e7489b437b481"}]}