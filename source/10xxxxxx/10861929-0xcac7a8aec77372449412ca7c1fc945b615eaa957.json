{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.21 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n//...................................................................................\r\n\r\nabstract contract ERC20Basic {\r\n  function totalSupply() public virtual view returns (uint256);\r\n  function balanceOf(address who) public virtual view returns (uint256);\r\n  function transfer(address to, uint256 value) public virtual returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n//..............................................................................................\r\n\r\nabstract contract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public virtual view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\r\n  function approve(address spender, uint256 value) public virtual returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//..................................................................................................\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public override view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n   \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public override returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public  override view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n//........................................................................................\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public override returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public override view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n//....................................................................................\r\n\r\ncontract YexToken is StandardToken {\r\n  address public administrator;\r\n  string public constant name = \"Yolex.io\";\r\n  string public constant symbol = \"YEX\";\r\n  uint public constant decimals = 18;\r\n  uint256 public constant INITIAL_SUPPLY = 100 * (10 ** decimals);\r\n\r\n\r\n   modifier onlyAdminstrator(){\r\n     require(administrator == msg.sender, \"requires admin priviledge\");\r\n     _;\r\n   }\r\n\r\n}\r\n\r\n\r\ncontract TokenStakingReward is YexToken {\r\n   address public yolexController;\r\n   mapping(string => RewardPackage) public rewardPackages;\r\n   MintedTokensRecord[] public tokenMintsRecord;\r\n   mapping(address => Staker) public stackers;\r\n   RewardPackage[] public listOfPackages;\r\n   uint public salePrice = 5 ether;\r\n   uint public presaleCount = 0;\r\n   string prePackage = \"PRESALE\";\r\n   \r\n   \r\n   constructor() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    administrator = msg.sender;\r\n    balances[administrator] = INITIAL_SUPPLY;\r\n  }\r\n   \r\n   \r\n\r\n   modifier onlyController(){\r\n     require(\r\n     administrator == msg.sender || \r\n     yolexController == msg.sender,\r\n     \"requires controller or admin priviledge\");\r\n     _;\r\n   }\r\n  \r\n\r\n   event AdminChange (\r\n       string indexed message,\r\n       address indexed newAdminAddress\r\n   );\r\n   \r\n   \r\n   struct MintedTokensRecord {\r\n      uint amount;\r\n      uint timeStamp;\r\n   }\r\n\r\n   struct RewardPackage {\r\n      uint id;\r\n      string symbol;\r\n      string packageName;\r\n      string rebasePercent;\r\n      string rewardPercent;\r\n      uint256 durationInDays;\r\n      uint256 rewardCapPercent;\r\n      bool isActive;\r\n   }\r\n\r\n\r\n   struct Staker {\r\n      uint id;\r\n      address stakerAddress;\r\n      uint256 amountStaked;\r\n      bool isActive;\r\n      bool isMatured;\r\n      uint256 startDate;\r\n      uint256 endDate;\r\n      string stakingPackage;\r\n      uint256 rewards;\r\n      uint256 rewardCap;\r\n      string rewardPercent;\r\n      uint256 rewardCapPercent;\r\n   }\r\n\r\n   struct Rewards {\r\n      address stakerAddress;\r\n      uint256 reward;\r\n      bool isMatured;\r\n   }\r\n   \r\n   address newAdminAddress;\r\n   address newControllerAddress;\r\n   \r\n   function changeRate(uint _newRate) external onlyAdminstrator returns(bool){\r\n       salePrice = _newRate;\r\n       return true;\r\n   }\r\n\r\n \r\n   function assignNewAdministrator(address _newAdminAddress) external onlyAdminstrator {\r\n     newAdminAddress = _newAdminAddress;\r\n     emit AdminChange(\"confirming new Adminstrator address\", newAdminAddress);\r\n   }\r\n\r\n\r\n   function acceptAdminRights() external {\r\n     require(msg.sender == newAdminAddress, \"new admistrator address mismatch\");\r\n     uint256 _value = balances[administrator];\r\n     balances[administrator] = balances[administrator].sub(_value);\r\n     balances[newAdminAddress] = balances[newAdminAddress].add(_value);\r\n     administrator = newAdminAddress;\r\n     emit AdminChange(\"New Adminstrator address\", administrator);\r\n   }\r\n\r\n\r\n   function assignNewController(address _newControllerAddress) external onlyAdminstrator {\r\n     newControllerAddress = _newControllerAddress;\r\n     emit AdminChange(\"confirming new controller address\", newControllerAddress);\r\n   }\r\n\r\n\r\n   function acceptControllerRights() external {\r\n     require(msg.sender == newControllerAddress, \"new controller address mismatch\");\r\n     yolexController = newControllerAddress;\r\n     emit AdminChange(\"New controller address\", yolexController);\r\n   }\r\n\r\n   function presale() external payable {\r\n       require(msg.value >= salePrice, \"sent eth too small\");\r\n       require(presaleCount < 45, \"presale closed.\");\r\n       uint _amount = msg.value.div(salePrice);\r\n       uint _amountToken = _amount.mul(10 ** decimals);\r\n       balances[administrator] = balances[administrator].sub(_amountToken);\r\n       balances[msg.sender] = balances[msg.sender].add(_amountToken);\r\n       presaleCount = presaleCount.add(_amount);\r\n       createStaking(_amountToken, prePackage);\r\n   }\r\n\r\n   uint stakingID;\r\n   uint packageID;\r\n   function createStaking(uint256 _amount,\r\n     string memory _packageSymbol\r\n   )\r\n   public returns(Staker memory) {\r\n       RewardPackage memory _package = rewardPackages[_packageSymbol];\r\n       require(_amount <= balances[msg.sender], \"insuffient funds\");\r\n       require(!stackers[msg.sender].isActive, \"You already have an active stake\");\r\n       require(_package.isActive, \"You can only stake on a active reward package\");\r\n       uint256 _rewardCap = _amount.mul(_package.rewardCapPercent).div(100);\r\n       uint256 _endDate = numberDaysToTimestamp(_package.durationInDays);\r\n       transfer(address(this), _amount);\r\n       Staker memory _staker = Staker(stakingID, msg.sender, _amount, true, false, now, _endDate, _packageSymbol, 0, _rewardCap, _package.rewardPercent, _package.rewardCapPercent);\r\n       stakingID++;\r\n       stackers[msg.sender] = _staker;\r\n       return _staker;\r\n   }\r\n   \r\n\r\n   function unstake() external returns(bool success){\r\n     Staker memory _staker = stackers[msg.sender];\r\n     require(_staker.endDate <= now, \"cannot unstake yet\");\r\n     require(_staker.isMatured, \"reward is not matured for withdrawal\");\r\n     require(_staker.isActive, \"staking should still be active\");\r\n     uint256 _amount = _staker.amountStaked;\r\n     balances[address(this)] = balances[address(this)].sub(_amount);\r\n     uint256 totalRewards = _amount.add(_staker.rewards);\r\n     balances[msg.sender] = balances[msg.sender].add(totalRewards);\r\n     stackers[msg.sender].isActive = false;\r\n     mintTokens(_staker.rewards);\r\n     emit Transfer(address(this), msg.sender, totalRewards);\r\n     return true;\r\n   }\r\n \r\n \r\n\r\n   function distributeStakingRewards(Rewards[] calldata _rewards) external onlyController returns(bool){\r\n      for (uint index = 0; index < _rewards.length; index++) {\r\n          uint totalRewards = stackers[_rewards[index].stakerAddress].rewards.add(_rewards[index].reward);\r\n          if (stackers[_rewards[index].stakerAddress].isActive == true &&\r\n               totalRewards <= stackers[_rewards[index].stakerAddress].rewardCap) {\r\n               stackers[_rewards[index].stakerAddress].rewards = totalRewards;\r\n               if(_rewards[index].isMatured){\r\n                   indicateMaturity(_rewards[index].stakerAddress, _rewards[index].isMatured);\r\n               }\r\n          }\r\n      }\r\n      return true;\r\n   }\r\n    \r\n \r\n    function indicateMaturity(address _accountAddress, bool status) internal  returns(bool success) {\r\n       require(_accountAddress != address(0), \"the stacker address is needed\");\r\n       stackers[_accountAddress].isMatured = status;\r\n       return true;\r\n    }\r\n    \r\n\r\n\r\n   function createPackage(\r\n     string memory _packageName,\r\n     string memory _symbol,\r\n     string memory _rebasePercent,\r\n     string memory _rewardPercent,\r\n     uint256 _rewardCapPercent,\r\n     uint256 _durationInDays\r\n     )\r\n   public onlyController returns(RewardPackage memory) {\r\n       numberDaysToTimestamp(_durationInDays);\r\n       RewardPackage memory _package = RewardPackage(\r\n         packageID,\r\n         _symbol,\r\n         _packageName,\r\n         _rebasePercent,\r\n         _rewardPercent,\r\n         _durationInDays,\r\n         _rewardCapPercent,\r\n         true\r\n         );\r\n         if (rewardPackages[_symbol].isActive) {\r\n             revert(\"package symbol should be unique\");\r\n            } else {\r\n              packageID++;\r\n              rewardPackages[_symbol] = _package;\r\n              listOfPackages.push(_package);\r\n              return _package;\r\n          }\r\n   }\r\n   \r\n\r\n   function numberDaysToTimestamp (uint _numberOfDays) private view returns(uint256 time){\r\n        if (_numberOfDays == 3) {\r\n             return now + 4 days;\r\n        } else if(_numberOfDays == 7){\r\n            return now.add(8 days);\r\n        }else if(_numberOfDays == 30){\r\n            return now.add(31 days);\r\n        }else if(_numberOfDays == 60){\r\n            return now.add(61 days);\r\n        }else if(_numberOfDays == 90){\r\n            return now.add(91 days);\r\n        }else if(_numberOfDays == 180){\r\n            return now.add(181 days);\r\n        }\r\n        else {\r\n          revert(\"The number of days should be either 3, 7, 30, 60 90, or 180 days\");\r\n        }\r\n    }\r\n   \r\n\r\n    function increaseStakingAmount(uint _amount) external returns(bool success){\r\n       require(stackers[msg.sender].isActive, \"should have an active stake\");\r\n       transfer(address(this), _amount);\r\n       stackers[msg.sender].amountStaked = stackers[msg.sender].amountStaked.add(_amount);\r\n       uint256 _amountStaked = stackers[msg.sender].amountStaked;\r\n       uint256 _rewardCap = _amountStaked.mul(stackers[msg.sender].rewardCapPercent).div(100);\r\n       stackers[msg.sender].rewardCap = _rewardCap;\r\n       return true;\r\n    }\r\n\r\n\r\n    function deactivatePackage(string calldata _symbol) external onlyController returns(RewardPackage memory){\r\n       bytes memory strToByte = bytes(_symbol);\r\n       require(strToByte.length > 1, \"The package symbol should be specified\");\r\n       rewardPackages[_symbol].isActive = false;\r\n       listOfPackages[rewardPackages[_symbol].id].isActive = false;\r\n       return rewardPackages[_symbol];\r\n    }\r\n    \r\n    function mintTokens(uint256 _amount) private returns(bool, uint) { \r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        tokenMintsRecord.push(MintedTokensRecord(_amount, now));\r\n        return(true, totalSupply_);\r\n    }\r\n    \r\n    function updatePrePackage(string calldata _packageSymbol) external onlyAdminstrator {\r\n        prePackage = _packageSymbol;\r\n    }\r\n    \r\n    function transferToWallet(uint _amount, address payable _receipient) external onlyAdminstrator returns(bool){\r\n        _receipient.transfer(_amount);\r\n        return true;\r\n     }\r\n    \r\n    receive() payable external {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdminAddress\",\"type\":\"address\"}],\"name\":\"AdminChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdminRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptControllerRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdminAddress\",\"type\":\"address\"}],\"name\":\"assignNewAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newControllerAddress\",\"type\":\"address\"}],\"name\":\"assignNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_packageName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_rebasePercent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_rewardPercent\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_rewardCapPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationInDays\",\"type\":\"uint256\"}],\"name\":\"createPackage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"packageName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rebasePercent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rewardPercent\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCapPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct TokenStakingReward.RewardPackage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_packageSymbol\",\"type\":\"string\"}],\"name\":\"createStaking\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMatured\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"stakingPackage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCap\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rewardPercent\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewardCapPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenStakingReward.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"deactivatePackage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"packageName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rebasePercent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rewardPercent\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCapPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct TokenStakingReward.RewardPackage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMatured\",\"type\":\"bool\"}],\"internalType\":\"struct TokenStakingReward.Rewards[]\",\"name\":\"_rewards\",\"type\":\"tuple[]\"}],\"name\":\"distributeStakingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseStakingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listOfPackages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"packageName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rebasePercent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rewardPercent\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCapPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"rewardPackages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"packageName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rebasePercent\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rewardPercent\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCapPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stackers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMatured\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"stakingPackage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCap\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rewardPercent\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewardCapPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMintsRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receipient\",\"type\":\"address\"}],\"name\":\"transferToWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_packageSymbol\",\"type\":\"string\"}],\"name\":\"updatePrePackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yolexController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TokenStakingReward","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://754c9d3c2c19d072e0614f98d6b1217045d5e252c458a25dd3cb27bac0aa7600"}]}