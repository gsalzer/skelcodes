{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function mint(address reciever, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract UtahSilver {\r\n    \r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        mapping(uint8 => bool) activeG3Levels;\r\n        mapping(uint8 => bool) activeG4Levels;\r\n        mapping(uint8 => G3Manual) G3Matrix;\r\n        mapping(uint8 => G4Auto) G4Matrix;\r\n    }\r\n    \r\n    struct G3Manual {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct G4Auto {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n        address closedPart;\r\n    }\r\n\r\n    ERC20 Token;\r\n    using SafeMath for uint256;\r\n    bool public lockStatus;\r\n    uint8 public constant LAST_LEVEL = 9;\r\n    uint public lastUserId = 2;\r\n    address public ownerAddress;\r\n    \r\n    mapping(uint8 => uint) public levelPrice;\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public userIds;\r\n    \r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress,\"only Owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier isLock() {\r\n        require(lockStatus == false,\"Contract Locked\");\r\n        _;\r\n    }\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId, uint amount, uint time);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8  matrix, uint8 level, uint amount, uint time);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 indexed matrix, uint8 level,uint amount, uint time);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 indexed matrix, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed _from, uint8 indexed matrix, uint8 level,uint amount, uint time);\r\n    event RecievedEth(address indexed receiver, address indexed _from, uint8 indexed matrix, uint8 level,uint amount, uint time);\r\n    event SentExtraEthDividends(address indexed _from, address indexed receiver, uint8 indexed matrix, uint8 level,uint amount, uint time);\r\n    \r\n    constructor(address _owner,address _tokenAddress) public {\r\n        require(_tokenAddress != address(0),\"Invalid Token Address\");\r\n        \r\n        levelPrice[1] = 0.02 ether;\r\n        levelPrice[2] = 0.04 ether;\r\n        levelPrice[3] = 0.08 ether;\r\n        levelPrice[4] = 0.16 ether;\r\n        levelPrice[5] = 0.32 ether;\r\n        levelPrice[6] = 0.64 ether;\r\n        levelPrice[7] = 1.28 ether;\r\n        levelPrice[8] = 2.56 ether;\r\n        levelPrice[9] = 6 ether;\r\n        \r\n        \r\n        ownerAddress = _owner;\r\n        Token = ERC20(_tokenAddress);\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        userIds[1] = ownerAddress;\r\n       \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeG3Levels[i] = true;\r\n            users[ownerAddress].activeG4Levels[i] = true;\r\n        }\r\n        \r\n    }\r\n    \r\n    // external functions\r\n    function() external payable {\r\n        revert(\"Invalid Contract Transaction\");\r\n    }\r\n    \r\n    function registrationExt(address referrerAddress) isLock external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function buyNewLevel(uint8 matrix, uint8 level) isLock external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeG3Levels[level], \"level already activated\");\r\n            if (users[msg.sender].G3Matrix[level-1].blocked) {\r\n                users[msg.sender].G3Matrix[level-1].blocked = false;\r\n            }\r\n            address freeG3Referrer = findFreeG3Referrer(msg.sender, level);\r\n            users[msg.sender].G3Matrix[level].currentReferrer = freeG3Referrer;\r\n            users[msg.sender].activeG3Levels[level] = true;\r\n            updateG3Referrer(msg.sender, freeG3Referrer, level);\r\n            emit Upgrade(msg.sender, freeG3Referrer, 1, level, msg.value, now);\r\n        } else {\r\n            require(!users[msg.sender].activeG4Levels[level], \"level already activated\"); \r\n            if (users[msg.sender].G4Matrix[level-1].blocked) {\r\n                users[msg.sender].G4Matrix[level-1].blocked = false;\r\n            }\r\n            address freeG4Referrer = findFreeG4Referrer(msg.sender, level);\r\n            users[msg.sender].activeG4Levels[level] = true;\r\n            updateG4Referrer(msg.sender, freeG4Referrer, level);\r\n            emit Upgrade(msg.sender, freeG4Referrer, 2, level, msg.value, now);\r\n        }\r\n    }   \r\n    \r\n    // public functions\r\n    function failSafe(address payable _toUser, uint _amount) onlyOwner public returns (bool) {\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    function contractLock(bool _lockStatus) onlyOwner public returns(bool) {\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n    \r\n    function findFreeG3Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeG3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeG4Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeG4Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n        \r\n    function usersActiveG3Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeG3Levels[level];\r\n    }\r\n\r\n    function usersActiveG4Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeG4Levels[level];\r\n    }\r\n\r\n    function usersG3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory,uint, bool) {\r\n        return (users[userAddress].G3Matrix[level].currentReferrer,\r\n                users[userAddress].G3Matrix[level].referrals,\r\n                users[userAddress].G3Matrix[level].reinvestCount,\r\n                users[userAddress].G3Matrix[level].blocked);\r\n    }\r\n\r\n    function usersG4Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address,uint) {\r\n        return (users[userAddress].G4Matrix[level].currentReferrer,\r\n                users[userAddress].G4Matrix[level].firstLevelReferrals,\r\n                users[userAddress].G4Matrix[level].secondLevelReferrals,\r\n                users[userAddress].G4Matrix[level].blocked,\r\n                users[userAddress].G4Matrix[level].closedPart,\r\n                users[userAddress].G4Matrix[level].reinvestCount);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    \r\n    //private functions\r\n    function registration(address userAddress, address referrerAddress) isLock private {\r\n        require(msg.value == levelPrice[1].mul(2), \"registration cost 0.05\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        users[userAddress].referrer = referrerAddress;\r\n        users[userAddress].activeG3Levels[1] = true; \r\n        users[userAddress].activeG4Levels[1] = true;\r\n        \r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId = lastUserId.add(1);\r\n        users[referrerAddress].partnersCount = users[referrerAddress].partnersCount.add(1);\r\n\r\n        address freeG3Referrer = findFreeG3Referrer(userAddress, 1);\r\n        users[userAddress].G3Matrix[1].currentReferrer = freeG3Referrer;\r\n        updateG3Referrer(userAddress, freeG3Referrer, 1);\r\n\r\n        updateG4Referrer(userAddress, findFreeG4Referrer(userAddress, 1), 1);\r\n        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id, msg.value, now);\r\n    }\r\n    \r\n    function updateG3Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].G3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].G3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].G3Matrix[level].referrals.length));\r\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        //close matrix\r\n        users[referrerAddress].G3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeG3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].G3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != ownerAddress) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeG3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].G3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].G3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            users[referrerAddress].G3Matrix[level].reinvestCount = users[referrerAddress].G3Matrix[level].reinvestCount.add(1);\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level, levelPrice[level], now);\r\n            updateG3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(ownerAddress, userAddress, 1, level);\r\n            users[ownerAddress].G3Matrix[level].reinvestCount = users[ownerAddress].G3Matrix[level].reinvestCount.add(1);\r\n            emit Reinvest(ownerAddress, address(0), userAddress, 1, level, levelPrice[level], now);\r\n        }\r\n    }\r\n\r\n    function updateG4Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeG4Levels[level], \"500. Referrer level is inactive\");\r\n        \r\n        if (users[referrerAddress].G4Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].G4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].G4Matrix[level].firstLevelReferrals.length));\r\n            \r\n            //set current level\r\n            users[userAddress].G4Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == ownerAddress) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].G4Matrix[level].currentReferrer;            \r\n            users[ref].G4Matrix[level].secondLevelReferrals.push(userAddress); \r\n            uint len = users[ref].G4Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].G4Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].G4Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].G4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].G4Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].G4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].G4Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].G4Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n            return updateG4ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].G4Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].G4Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].G4Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].G4Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].G4Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].G4Matrix[level].closedPart)) {\r\n                updateG4(userAddress, referrerAddress, level, true);\r\n                return updateG4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].G4Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].G4Matrix[level].closedPart) {\r\n                updateG4(userAddress, referrerAddress, level, true);\r\n                return updateG4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateG4(userAddress, referrerAddress, level, false);\r\n                return updateG4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].G4Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateG4(userAddress, referrerAddress, level, false);\r\n            return updateG4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].G4Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateG4(userAddress, referrerAddress, level, true);\r\n            return updateG4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].G4Matrix[level].firstLevelReferrals[0]].G4Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].G4Matrix[level].firstLevelReferrals[1]].G4Matrix[level].firstLevelReferrals.length) {\r\n            updateG4(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateG4(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateG4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateG4(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].G4Matrix[level].firstLevelReferrals[0]].G4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].G4Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].G4Matrix[level].firstLevelReferrals[0]].G4Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].G4Matrix[level].firstLevelReferrals[0]].G4Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].G4Matrix[level].currentReferrer = users[referrerAddress].G4Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].G4Matrix[level].firstLevelReferrals[1]].G4Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].G4Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].G4Matrix[level].firstLevelReferrals[1]].G4Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].G4Matrix[level].firstLevelReferrals[1]].G4Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].G4Matrix[level].currentReferrer = users[referrerAddress].G4Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function updateG4ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].G4Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory G4 = users[users[referrerAddress].G4Matrix[level].currentReferrer].G4Matrix[level].firstLevelReferrals;\r\n        \r\n        if (G4.length == 2) {\r\n            if (G4[0] == referrerAddress ||\r\n                G4[1] == referrerAddress) {\r\n                users[users[referrerAddress].G4Matrix[level].currentReferrer].G4Matrix[level].closedPart = referrerAddress;\r\n            } else if (G4.length == 1) {\r\n                if (G4[0] == referrerAddress) {\r\n                    users[users[referrerAddress].G4Matrix[level].currentReferrer].G4Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        users[referrerAddress].G4Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].G4Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].G4Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeG4Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].G4Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].G4Matrix[level].reinvestCount = users[referrerAddress].G4Matrix[level].reinvestCount.add(1);\r\n        \r\n        if (referrerAddress != ownerAddress) {\r\n            address freeReferrerAddress = findFreeG4Referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level, levelPrice[level], now);\r\n            updateG4Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(ownerAddress, address(0), userAddress, 2, level, levelPrice[level], now);\r\n            sendETHDividends(ownerAddress, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].G3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level, levelPrice[level], now);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].G3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].G4Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level, levelPrice[level], now);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].G4Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n        uint256 tobeminted;\r\n        \r\n        tobeminted = 25 ether;\r\n        \r\n        require( (address(uint160(receiver)).send(levelPrice[level])) && \r\n            Token.mint(msg.sender, tobeminted),\"Invalid Transaction\");\r\n        \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level, levelPrice[level], now);\r\n        }\r\n        else {\r\n             emit RecievedEth(receiver, _from, matrix, level, levelPrice[level], now);\r\n        }\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RecievedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeG3Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeG4Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveG3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveG4Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersG3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersG4Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UtahSilver","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009cc3a1d2d32c015745a4e3a8226fe200f6aa8860000000000000000000000000556237e86df9325017c330e295c13a6c7d0e71a7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bcfce64e61b78694491bb892bbcccb70377b95a5044ec1f515daabe20e5c1f90"}]}