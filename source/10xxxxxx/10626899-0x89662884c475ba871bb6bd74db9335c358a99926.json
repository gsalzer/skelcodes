{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\ncontract GALAXYDAPPS {\r\n    address payable public ownerWallet;\r\n   \r\n    \r\n    struct Variables {\r\n        uint currUserID;\r\n        uint totalWithdrawn;\r\n        uint totalDirectRefEarnings;\r\n        uint totalMatchingEarnings;\r\n        uint ROI_time;\r\n        uint Top4Pool;\r\n        uint dailypoolcount;\r\n    }\r\n    \r\n    Variables public vars;\r\n    \r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint referredUsers;\r\n        bool ROIreach;\r\n        uint total_investment;\r\n        \r\n        uint withdrawn;        //only for latest investment\r\n        uint investment;         \r\n        uint direct_ref_earnings;\r\n        uint top4_earnings;\r\n        uint matching_earnings;\r\n        uint joinTime;\r\n    }\r\n\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    \r\n    uint min_join_price            =   0.10    ether;\r\n    \r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n    \r\n    struct DailyPoolStructure {\r\n        uint timeStamp;\r\n        address top1;\r\n        address top2;\r\n        address top3;\r\n        address top4;\r\n        mapping(address => uint) refCount;\r\n    }\r\n    \r\n    mapping (uint => DailyPoolStructure) public dailypools;\r\n    \r\n    event Joined(address _address,uint _refID,uint _joinAmount,uint _joinTime);\r\n    event ReJoined(address _address,uint _joinAmount,uint _joinTime);\r\n    event Withdraw(address _address, uint _amount,uint _time);\r\n    \r\n    constructor() public {\r\n        \r\n        ownerWallet = msg.sender;\r\n        \r\n        vars.currUserID = 0;\r\n        vars.totalWithdrawn = 0;\r\n        vars.ROI_time = 24*60*60;\r\n\r\n        vars.currUserID++;\r\n        \r\n        users[msg.sender].isExist = true;\r\n        users[msg.sender].id = vars.currUserID;\r\n        users[msg.sender].ROIreach = false;\r\n        users[msg.sender].joinTime = now;\r\n        \r\n        userList[vars.currUserID] = ownerWallet;\r\n        LEVEL_PRICE[1]              = 30; // 1st generation 30%\r\n        LEVEL_PRICE[2]              = 8; // 2nd generation 10%\r\n        LEVEL_PRICE[3]              = 8; // 3rd generation 10%\r\n        LEVEL_PRICE[4]              = 8; // 4th generation 10%\r\n        LEVEL_PRICE[5]              = 8; // 5th generation 10%\r\n        LEVEL_PRICE[6]              = 5; // 6th generation 8%\r\n        LEVEL_PRICE[7]              = 5; // 7th generation 8%\r\n        LEVEL_PRICE[8]              = 5; // 8th generation 8%\r\n        LEVEL_PRICE[9]              = 5; // 9th generation 8%\r\n        LEVEL_PRICE[10]             = 5; // 10th generation 8%\r\n        LEVEL_PRICE[11]             = 3; // 11th generation 5%\r\n        LEVEL_PRICE[12]             = 3; // 12th generation 5%\r\n        LEVEL_PRICE[13]             = 3; // 13th generation 5%\r\n        LEVEL_PRICE[14]             = 3; // 14th generation 5%\r\n        LEVEL_PRICE[15]             = 3; // 15th generation 5%\r\n        LEVEL_PRICE[16]             = 2; // 15th generation 5%\r\n        LEVEL_PRICE[17]             = 2; // 15th generation 5%\r\n        LEVEL_PRICE[18]             = 2; // 15th generation 5%\r\n        LEVEL_PRICE[19]             = 2; // 15th generation 5%\r\n        LEVEL_PRICE[20]             = 2; // 15th generation 5%\r\n        \r\n        vars.dailypoolcount = 1;\r\n        DailyPoolStructure memory dailypool;\r\n        dailypool = DailyPoolStructure({\r\n            timeStamp:now,\r\n            top1:address(0),\r\n            top2:address(0),\r\n            top3:address(0),\r\n            top4:address(0)\r\n        });\r\n        dailypools[vars.dailypoolcount] = dailypool;\r\n    \r\n    }\r\n    address payable public partner = address(0x1D6010beD63c149875A3dfcFB8aaE80F8979ad3b);\r\n    function join(uint _referrerID) public payable {\r\n        require(msg.sender != ownerWallet,'owner cant join');\r\n        require(!users[msg.sender].isExist, \"User Exists\");\r\n        require(_referrerID > 0 && _referrerID <= vars.currUserID, 'Incorrect referral ID');\r\n        require(msg.value >=min_join_price, 'Incorrect Value');\r\n        \r\n        \r\n        CreateNewDailyPool();\r\n        \r\n        vars.currUserID++;\r\n\r\n        users[msg.sender].isExist = true;\r\n        users[msg.sender].id = vars.currUserID;\r\n        users[msg.sender].referrerID = _referrerID;\r\n        users[msg.sender].ROIreach = false;\r\n        \r\n        \r\n        users[msg.sender].total_investment = msg.value;\r\n        users[msg.sender].investment = msg.value;\r\n        users[msg.sender].joinTime = now;\r\n\r\n        userList[vars.currUserID]=msg.sender;\r\n       \r\n        users[userList[_referrerID]].referredUsers += 1;\r\n        emit Joined(msg.sender,_referrerID,msg.value,now);\r\n        \r\n        //3% Platform fee \r\n        \r\n        uint platformEarn = msg.value * 3 / 100;\r\n        uint partnerEarn = platformEarn * 20 / 100;\r\n        partner.transfer(partnerEarn);\r\n        ownerWallet.transfer(platformEarn - partnerEarn);\r\n        \r\n        //7% direct referrer \r\n        \r\n        vars.totalDirectRefEarnings+=(msg.value * 7) / 100;\r\n        users[userList[users[msg.sender].referrerID]].direct_ref_earnings += (msg.value * 7) / 100;\r\n        \r\n        //2nd\r\n        uint s2 = users[userList[_referrerID]].referrerID;\r\n        \r\n        if(s2>0) {\r\n        users[userList[s2]].direct_ref_earnings += (msg.value * 3) / 100;\r\n        \r\n        }\r\n        \r\n        //3rd\r\n        uint s3 = users[userList[s2]].referrerID;\r\n        \r\n        if(s3>0){\r\n        users[userList[s3]].direct_ref_earnings += (msg.value * 1) / 100;\r\n        }\r\n        \r\n        //4th\r\n        uint s4 = users[userList[s3]].referrerID;\r\n        \r\n        if(s4>0){\r\n        \r\n        users[userList[s4]].direct_ref_earnings += (msg.value * 1) / 100;\r\n        \r\n        }\r\n        \r\n        //5th\r\n        uint s5 = users[userList[s4]].referrerID;\r\n        \r\n        if(s5>0){\r\n        \r\n        users[userList[s5]].direct_ref_earnings += (msg.value * 1) / 200;\r\n        \r\n        }\r\n        \r\n        //6th\r\n        uint s6 = users[userList[s5]].referrerID;\r\n        \r\n        if(s6>0){\r\n        \r\n        users[userList[s6]].direct_ref_earnings += (msg.value * 3) / 1000;\r\n        \r\n        }\r\n        \r\n        //7th\r\n        uint s7 = users[userList[s6]].referrerID;\r\n        \r\n        if(s7>0){\r\n        \r\n        users[userList[s7]].direct_ref_earnings += (msg.value * 1) / 500;\r\n        \r\n        }\r\n        \r\n        //5% to daily pool\r\n        vars.Top4Pool += (msg.value * 5) / 100;\r\n        \r\n        //add ref to top4 if \r\n        dailypools[vars.dailypoolcount].refCount[userList[users[msg.sender].referrerID]]++;\r\n        addRefToTop4(userList[users[msg.sender].referrerID]);\r\n    }\r\n    function rejoin() public payable{\r\n        require(msg.sender != ownerWallet,'owner cant join');\r\n        require(users[msg.sender].isExist, \"User must Exists\");\r\n        require(users[msg.sender].ROIreach, \"earned all 350%\");\r\n        require(msg.value >=min_join_price, 'Incorrect Value');\r\n        require (msg.value>=users[msg.sender].investment,'must greater or equal last investment');\r\n        \r\n        //reset investment\r\n        users[msg.sender].isExist = true;\r\n        users[msg.sender].ROIreach = false;\r\n        \r\n        users[msg.sender].total_investment += msg.value;\r\n        users[msg.sender].investment = msg.value;\r\n        users[msg.sender].joinTime = now;\r\n        \r\n        users[msg.sender].withdrawn = 0;        //only for latest investment\r\n              \r\n        users[msg.sender].direct_ref_earnings = 0;\r\n        users[msg.sender].top4_earnings = 0;\r\n        users[msg.sender].matching_earnings = 0;\r\n        \r\n        emit ReJoined(msg.sender,msg.value,now);\r\n        \r\n        //3% Platform fee \r\n        uint platformEarn = msg.value * 3 / 100;\r\n        uint partnerEarn = platformEarn * 20 / 100;\r\n        partner.transfer(partnerEarn);\r\n        ownerWallet.transfer(platformEarn - partnerEarn);\r\n        \r\n        uint _referrerID = users[msg.sender].referrerID;\r\n        //7% direct referrer \r\n        \r\n        vars.totalDirectRefEarnings+=(msg.value * 7) / 100;\r\n        users[userList[users[msg.sender].referrerID]].direct_ref_earnings += (msg.value * 7) / 100;\r\n        \r\n         //2nd\r\n        uint s2 = users[userList[_referrerID]].referrerID;\r\n        \r\n        if(s2>0) {\r\n        users[userList[s2]].direct_ref_earnings += (msg.value * 3) / 100;\r\n        \r\n        }\r\n        \r\n        //3rd\r\n        uint s3 = users[userList[s2]].referrerID;\r\n        \r\n        if(s3>0){\r\n        users[userList[s3]].direct_ref_earnings += (msg.value * 1) / 100;\r\n        }\r\n        \r\n        //4th\r\n        uint s4 = users[userList[s3]].referrerID;\r\n        \r\n        if(s4>0){\r\n        \r\n        users[userList[s4]].direct_ref_earnings += (msg.value * 1) / 100;\r\n        \r\n        }\r\n        \r\n        //5th\r\n        uint s5 = users[userList[s4]].referrerID;\r\n        \r\n        if(s5>0){\r\n        \r\n        users[userList[s5]].direct_ref_earnings += (msg.value * 1) / 200;\r\n        \r\n        }\r\n        \r\n        //6th\r\n        uint s6 = users[userList[s5]].referrerID;\r\n        \r\n        if(s6>0){\r\n        \r\n        users[userList[s6]].direct_ref_earnings += (msg.value * 3) / 1000;\r\n        \r\n        }\r\n        \r\n        //7th\r\n        uint s7 = users[userList[s6]].referrerID;\r\n        \r\n        if(s7>0){\r\n        \r\n        users[userList[s7]].direct_ref_earnings += (msg.value * 1) / 500;\r\n        \r\n        }\r\n        \r\n        //5% to daily pool\r\n        vars.Top4Pool += (msg.value * 5) / 100;\r\n        \r\n    }\r\n    function withdrawROI() public {\r\n       require(users[msg.sender].isExist, \"User NOT Exists\");\r\n       require(!users[msg.sender].ROIreach,'cant withdraw anymore');\r\n       uint available = getlatestROI_ether_available(msg.sender);\r\n       \r\n       require(available>0,'no available to withdraw');\r\n       \r\n       CreateNewDailyPool();\r\n       \r\n       vars.totalWithdrawn += available;\r\n       users[msg.sender].withdrawn += available;\r\n       \r\n       if (users[msg.sender].withdrawn >= (users[msg.sender].investment * 300)/100)  \r\n            users[msg.sender].ROIreach = true;\r\n       \r\n        if (msg.sender.send(available))\r\n        {\r\n            emit Withdraw(msg.sender,available,now);\r\n            payReferral(1,msg.sender ,available);\r\n        }\r\n        else\r\n            revert();\r\n       \r\n    }\r\n\r\n    function CreateNewDailyPool() internal {\r\n        //create new dailypool \r\n        uint daycount = (now - dailypools[vars.dailypoolcount].timeStamp) / vars.ROI_time;\r\n        if (daycount > 0){\r\n                //send rewards previous day\r\n                if (dailypools[vars.dailypoolcount].top1 != address(0))\r\n                    users[dailypools[vars.dailypoolcount].top1].top4_earnings += (vars.Top4Pool * 10 * 40) / 10000;\r\n                if (dailypools[vars.dailypoolcount].top2 != address(0))\r\n                    users[dailypools[vars.dailypoolcount].top2].top4_earnings += (vars.Top4Pool * 10 * 30) / 10000;\r\n                if (dailypools[vars.dailypoolcount].top3 != address(0))\r\n                    users[dailypools[vars.dailypoolcount].top3].top4_earnings += (vars.Top4Pool * 10 * 20) / 10000;\r\n                if (dailypools[vars.dailypoolcount].top4 != address(0))\r\n                    users[dailypools[vars.dailypoolcount].top4].top4_earnings += (vars.Top4Pool * 10 * 10) / 10000;\r\n                    \r\n                DailyPoolStructure memory dailypool;\r\n                dailypool = DailyPoolStructure({\r\n                    timeStamp:dailypools[vars.dailypoolcount].timeStamp + daycount*vars.ROI_time,\r\n                    top1:address(0),\r\n                    top2:address(0),\r\n                    top3:address(0),\r\n                    top4:address(0)\r\n                });\r\n                vars.dailypoolcount++;\r\n                dailypools[vars.dailypoolcount] = dailypool;\r\n            \r\n        }\r\n    }\r\n    \r\n    function addRefToTop4(address ref) internal {\r\n        if (ref == address(0x0)){\r\n            return;\r\n        }\r\n\r\n        uint256 refcount = dailypools[vars.dailypoolcount].refCount[ref];\r\n        uint256 top4_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top4];\r\n        // if the amount is less than the last on the leaderboard, reject\r\n        if (top4_refcount >= refcount){\r\n            return ;\r\n        }\r\n        uint256 top3_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top3];\r\n        uint256 top2_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top2];\r\n        uint256 top1_refcount = dailypools[vars.dailypoolcount].refCount[dailypools[vars.dailypoolcount].top1];\r\n        \r\n        //on top\r\n        if (refcount > top1_refcount){\r\n            if (ref == dailypools[vars.dailypoolcount].top1)\r\n            {\r\n                return;\r\n            } else if (ref == dailypools[vars.dailypoolcount].top2)\r\n            {\r\n                dailypools[vars.dailypoolcount].top2 = dailypools[vars.dailypoolcount].top1;\r\n                dailypools[vars.dailypoolcount].top1 = ref;  \r\n                return;\r\n            } \r\n            else if (ref == dailypools[vars.dailypoolcount].top3)\r\n            {\r\n                dailypools[vars.dailypoolcount].top3 = dailypools[vars.dailypoolcount].top2;\r\n                dailypools[vars.dailypoolcount].top2 = dailypools[vars.dailypoolcount].top1;\r\n                dailypools[vars.dailypoolcount].top1 = ref;    \r\n                return;\r\n            } \r\n            else\r\n            {\r\n                dailypools[vars.dailypoolcount].top4 = dailypools[vars.dailypoolcount].top3;\r\n                dailypools[vars.dailypoolcount].top3 = dailypools[vars.dailypoolcount].top2;\r\n                dailypools[vars.dailypoolcount].top2 = dailypools[vars.dailypoolcount].top1;\r\n                dailypools[vars.dailypoolcount].top1 = ref;\r\n                return;\r\n            }\r\n        }\r\n        else if (refcount > top2_refcount){\r\n            if (ref == dailypools[vars.dailypoolcount].top1)\r\n            {\r\n                return;\r\n            }\r\n            else if (ref == dailypools[vars.dailypoolcount].top2)\r\n            {\r\n                return;\r\n            } else if (ref == dailypools[vars.dailypoolcount].top3)\r\n            {\r\n                dailypools[vars.dailypoolcount].top3 = dailypools[vars.dailypoolcount].top2;\r\n                dailypools[vars.dailypoolcount].top2 = ref; \r\n                return;\r\n            } \r\n            else\r\n            {\r\n                dailypools[vars.dailypoolcount].top4 = dailypools[vars.dailypoolcount].top3;\r\n                dailypools[vars.dailypoolcount].top3 = dailypools[vars.dailypoolcount].top2;\r\n                dailypools[vars.dailypoolcount].top2 = ref;\r\n                return;\r\n            }\r\n        }\r\n        else if (refcount > top3_refcount){\r\n            if (ref == dailypools[vars.dailypoolcount].top1)\r\n            {\r\n                return;\r\n            }\r\n            else if (ref == dailypools[vars.dailypoolcount].top2)\r\n            {\r\n                return;\r\n            }\r\n            else if (ref == dailypools[vars.dailypoolcount].top3)\r\n            {\r\n                return;\r\n            }\r\n            else{\r\n                dailypools[vars.dailypoolcount].top4 = dailypools[vars.dailypoolcount].top3;\r\n                dailypools[vars.dailypoolcount].top3 = ref;\r\n                return;\r\n            }\r\n        }\r\n        else if (refcount > top4_refcount){\r\n            if (ref == dailypools[vars.dailypoolcount].top1)\r\n            {\r\n                return;\r\n            }\r\n            else if (ref == dailypools[vars.dailypoolcount].top2)\r\n            {\r\n                return;\r\n            }\r\n            else if (ref == dailypools[vars.dailypoolcount].top3)\r\n            {\r\n                return;\r\n            }\r\n            else if (ref == dailypools[vars.dailypoolcount].top4)\r\n            {\r\n                return;\r\n            }\r\n            dailypools[vars.dailypoolcount].top4 = ref;\r\n        }\r\n    }\r\n    \r\n    function payReferral(uint _level, address _user, uint _amount) internal {\r\n        address referer;\r\n       \r\n        referer = userList[users[_user].referrerID];\r\n        bool sent = false;\r\n       \r\n        uint level_price_local = LEVEL_PRICE[_level] * _amount / 100;\r\n        \r\n        vars.totalMatchingEarnings+=level_price_local;\r\n        users[referer].matching_earnings += level_price_local;\r\n        \r\n        if (referer != ownerWallet)\r\n            sent = address(uint160(referer)).send(level_price_local);\r\n        else\r\n        {\r\n            uint partnerEarn = level_price_local * 20 / 100;\r\n            partner.transfer(partnerEarn);\r\n            sent = address(uint160(ownerWallet)).send(level_price_local - partnerEarn);\r\n        }\r\n        \r\n        if (sent) {\r\n            if(_level <= 20 && users[referer].referrerID >= 1){\r\n                payReferral(_level+1,referer,_amount);\r\n            }\r\n        }\r\n        else\r\n            revert();\r\n    }\r\n    \r\n    function getNextROI_time(address _address) public view returns(uint){\r\n        require(users[_address].isExist == true,'user not exists');\r\n        if (users[msg.sender].ROIreach){\r\n            return 0;\r\n        }\r\n        if (getIncomeRemain(_address) == 0) return 0;\r\n        uint latestJoinTime = users[_address].joinTime;\r\n        uint diff = now - latestJoinTime;\r\n        //ROI everyday every (24*60*60) seconds\r\n        //uint days_number = diff / (24*60*60)\r\n        uint nextROI_time = 0;\r\n        if (diff!=0)\r\n            nextROI_time =  vars.ROI_time - diff % vars.ROI_time;\r\n        return nextROI_time;\r\n    }\r\n        //get ROI in ether exclude withdrawn\r\n    function getLatestROI_ether(address _address) public view returns(uint){\r\n        require(users[_address].isExist == true,'user not exists');\r\n        if (users[_address].ROIreach){\r\n            return 0;\r\n        }\r\n        uint latestJoinTime = users[_address].joinTime;\r\n        uint diff = now - latestJoinTime;\r\n        //ROI everyday every (24*60*60) seconds\r\n        uint days_number = diff / vars.ROI_time;\r\n        //1.5% perday\r\n        \r\n        uint totalreff = users[_address].referredUsers;\r\n        \r\n        uint per;\r\n        \r\n        if (totalreff >= 2){\r\n             per = 15;\r\n        }else{\r\n             per = 10;\r\n        }\r\n            \r\n        uint ROI = (users[_address].investment * days_number * per) / 1000;\r\n        \r\n        uint MaxWithdraw = (users[_address].investment * 300)/100;\r\n        if (ROI >= MaxWithdraw)\r\n            return MaxWithdraw;\r\n        else \r\n            return ROI;    //1.5% ROI\r\n            \r\n    }\r\n    //admin charge withdrawal\r\n    \r\n    function transferFund(uint256 amount) onlyOwner public {\r\n        require(amount<=address(this).balance,'exceed contract balance');\r\n        ownerWallet.transfer(amount);\r\n    }\r\n    //get ROI in ether after withdrawn\r\n    function getlatestROI_ether_available(address _address) public view returns(uint){\r\n        require(users[_address].isExist == true,'user not exists');\r\n        if (users[_address].ROIreach){\r\n            return 0;\r\n        }\r\n        uint ROI = getLatestROI_ether(_address);\r\n        uint total_earnings = ROI + users[_address].direct_ref_earnings + users[_address].top4_earnings + users[_address].matching_earnings;\r\n        uint MaxWithdraw = (users[_address].investment * 300)/100;\r\n        \r\n        if (total_earnings>MaxWithdraw)\r\n            total_earnings = MaxWithdraw;\r\n        \r\n        if (users[_address].withdrawn>=total_earnings) return 0;\r\n        else\r\n        return total_earnings - users[_address].withdrawn;\r\n        \r\n    }\r\n    function setROI_time(uint ROI_time) onlyOwner public{\r\n        vars.ROI_time = ROI_time;\r\n    }\r\n    //getters\r\n    function getIncomeRemain(address _address) public view returns(uint){\r\n        require(users[_address].isExist == true,'user not exists');\r\n        \r\n        uint MaxWithdraw = (users[_address].investment * 300)/100;\r\n        \r\n        if (users[_address].withdrawn >= MaxWithdraw)\r\n            return 0;\r\n        else\r\n            return MaxWithdraw - users[_address].withdrawn;\r\n    }\r\n    function getDailyRefCount(uint256 i,address _address) public view returns (uint){\r\n        return dailypools[i].refCount[_address];\r\n    }\r\n    modifier onlyOwner(){\r\n        require(msg.sender==ownerWallet,'Not Owner');\r\n        _;\r\n    } \r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDailyRefCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currUserID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDirectRefEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMatchingEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ROI_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Top4Pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailypoolcount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailypools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"top1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"top2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"top3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"top4\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rejoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ROI_time\",\"type\":\"uint256\"}],\"name\":\"setROI_time\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getIncomeRemain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNextROI_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLatestROI_ether\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawROI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ROIreach\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"total_investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct_ref_earnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"top4_earnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matching_earnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getlatestROI_ether_available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_joinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_joinTime\",\"type\":\"uint256\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_joinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_joinTime\",\"type\":\"uint256\"}],\"name\":\"ReJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"GALAXYDAPPS","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f42c7fbe93c1836fe24ebd97938f5cde0ec20c5f0444a2de91441f12f4bdd4fb"}]}