{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\t\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address public admin;\r\n    address public dev;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function setAdmin(address _admin) public onlyOwner {\r\n        admin = _admin;\r\n    }\r\n\r\n    function setDev(address _dev) public onlyOwner {\r\n        dev = _dev;\r\n    }\r\n    \r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin || msg.sender == _owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDev {\r\n        require(msg.sender == dev || msg.sender == admin || msg.sender == _owner);\r\n        _;\r\n    }    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n   function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ContractConn{\r\n\r\n    function transfer(address _to, uint256 _value) virtual public;\r\n    function balanceOf(address who) virtual public view returns (uint256);\r\n}\r\n\r\ncontract Minter is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    uint256 public userMinted = 0;   \r\n    uint256 public minHandlingFee = 5;\r\n    uint256 public minHandlingFeeNew;\r\n    uint256 public handlingFeeRate = 4;\r\n    uint256 public handlingFeeRateNew;\r\n    uint256 public changeFeeWaitTime = 12000;\r\n    uint256 public changeFeeTime;\r\n\tbool    public needChangeFee = false;\r\n    uint256 public handlingFeeCollect;\r\n    uint256 public minedAmount;\r\n    address public collector = address(0);\r\n    \r\n    ContractConn public zild;    \r\n\r\n    mapping(address => uint256) public user_minter_amount;\r\n    mapping(address => uint256) public user_minter_netincome;\r\n    mapping(address => uint256) public user_minter_fee;\r\n    \r\n    event MinterRevenue(uint256 total,address indexed who,uint256 amount, uint256 handlingfee,uint256 netincome,uint256 userTotal);\r\n    event SetCollector(address indexed collector,uint256 time);\r\n    event CollectHandlingFee(uint256 amount,uint256 handlingFeeCollect,uint256 now);\r\n    event SetHandlingFee(uint256 fee,uint256 rate,address indexed who,uint256 time);\r\n    event EffectHandlingFee(uint256 fee,uint256 rate,address indexed who,uint256 time);\r\n    \r\n    constructor(address _token) public {\r\n        zild = ContractConn(_token);\r\n    }\r\n\r\n    function generate(uint256 amount) public onlyOwner returns(bool){\r\n        require(amount > 0, \"minter：generate amount error\");\r\n        require(amount <= zild.balanceOf(address(this)), \"minter：insufficient balance generates more mines\");\r\n        minedAmount = minedAmount.add(amount);\r\n        return true;\r\n    } \r\n    \r\n    function minter(address _to, uint256 amount) public onlyDev returns(bool){\r\n        require(amount > minHandlingFee.mul(10 ** 18).div(100), \"minter：withdrawal amount must be greater than the minimum handling fee\");\r\n        require(amount <= minedAmount,\"minter：Not so many mined token\");\r\n        uint256 handlingfee = amount.mul(handlingFeeRate).div(1000);\r\n        if (handlingfee < minHandlingFee.mul(10 ** 18).div(100)) handlingfee = minHandlingFee.mul(10 ** 18).div(100);\r\n        zild.transfer(_to,amount.sub(handlingfee));\r\n        minedAmount = minedAmount.sub(amount);\r\n        userMinted = userMinted.add(amount);\r\n        user_minter_amount[_to] = user_minter_amount[_to].add(amount);\r\n        user_minter_netincome[_to] = user_minter_netincome[_to].add(amount.sub(handlingfee));\r\n        user_minter_fee[_to] = user_minter_fee[_to].add(handlingfee);\r\n        handlingFeeCollect = handlingFeeCollect.add(handlingfee);\r\n        emit MinterRevenue(userMinted,_to,amount,handlingfee,amount.sub(handlingfee),user_minter_amount[_to]);\r\n        return true;\r\n    } \r\n\r\n    function setCollector(address _collector) public onlyAdmin {\r\n        require(_collector != address(0), \"Minter: collector is the zero address\");\r\n        collector = _collector;\r\n        emit SetCollector(_collector,now);\r\n    }\r\n    \r\n    function collectHandlingFee(uint256 amount) public onlyAdmin returns(bool){\r\n        require(amount > 0, \"minter：collect amount error\");\r\n        require(amount <= handlingFeeCollect, \"minter：withdrawal amount exceeds collector balance\");\r\n        zild.transfer(collector,amount);\r\n        handlingFeeCollect = handlingFeeCollect.sub(amount);\r\n        emit CollectHandlingFee(amount,handlingFeeCollect,now);\r\n        return true;\r\n    }     \r\n\r\n    function setHandlingFee(uint256 _fee,uint256 _rate) public onlyAdmin {\r\n        require(_fee > 0 || _rate > 0,\"Minter: New handling fee rate must be greater than 0\"); \r\n\t\tminHandlingFeeNew = _fee;\r\n        handlingFeeRateNew = _rate;\r\n        changeFeeTime = block.number;\r\n        needChangeFee = true;\r\n        emit SetHandlingFee(_fee,_rate,msg.sender,now);\r\n    }\r\n    \r\n    function effectblockchange() public onlyAdmin {\r\n        require(needChangeFee,\"Minter: No new handling fee rate are set\");\r\n        uint256 currentTime = block.number;\r\n        uint256 effectTime = changeFeeTime.add(changeFeeWaitTime);\r\n        if (currentTime < effectTime) return;\r\n        minHandlingFee = minHandlingFeeNew;\r\n        handlingFeeRate = handlingFeeRateNew;\r\n        needChangeFee = false;\r\n        emit EffectHandlingFee(minHandlingFee,handlingFeeRate,msg.sender,now);\r\n    } \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"handlingFeeCollect\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"CollectHandlingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"EffectHandlingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"handlingfee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netincome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userTotal\",\"type\":\"uint256\"}],\"name\":\"MinterRevenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetHandlingFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeFeeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeFeeWaitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectHandlingFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectblockchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"generate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handlingFeeCollect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handlingFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handlingFeeRateNew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHandlingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHandlingFeeNew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needChangeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setHandlingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_minter_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_minter_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_minter_netincome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zild\",\"outputs\":[{\"internalType\":\"contract ContractConn\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Minter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000006699d34aa3013605d468d2755a2fe59a16b12b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6e6d8099be50936028382c6bbf5570d7d5cbf1a0c2efe3398b27b3ba603da8a2"}]}