{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n    event OwnerUpdate(address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(\r\n            msg.sender == newOwner,\r\n            \"AcceptOwnership: only new owner do this.\"\r\n        );\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_) public onlyOwner {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DTokenController is DSAuth {\r\n    bool private initialized; // Flags for initializing data\r\n\r\n    mapping(address => address) internal dTokens;\r\n\r\n    event NewMappingdToken(\r\n        address indexed token,\r\n        address indexed mappingdToken\r\n    );\r\n\r\n    constructor() public {\r\n        initialize();\r\n    }\r\n\r\n    // --- Init ---\r\n    // This function is used with contract proxy, do not modify this function.\r\n    function initialize() public {\r\n        require(!initialized, \"initialize: Already initialized!\");\r\n        owner = msg.sender;\r\n        initialized = true;\r\n    }\r\n\r\n    /**\r\n     *  @dev Adds new mapping: token => dToken.\r\n     */\r\n    function setdTokensRelation(\r\n        address[] memory _tokens,\r\n        address[] memory _mappingdTokens\r\n    ) public auth {\r\n        require(\r\n            _tokens.length == _mappingdTokens.length,\r\n            \"setdTokensRelation: Array length do not match!\"\r\n        );\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            _setdTokenRelation(_tokens[i], _mappingdTokens[i]);\r\n        }\r\n    }\r\n\r\n    function _setdTokenRelation(address _token, address _mappingdToken)\r\n        internal\r\n    {\r\n        require(\r\n            dTokens[_token] == address(0x0),\r\n            \"_setdTokenRelation: Has set!\"\r\n        );\r\n        dTokens[_token] = _mappingdToken;\r\n        emit NewMappingdToken(_token, _mappingdToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates existing mapping: token => dToken.\r\n     */\r\n    function updatedTokenRelation(address _token, address _mappingdToken)\r\n        external\r\n        auth\r\n    {\r\n        require(\r\n            dTokens[_token] != address(0x0),\r\n            \"updatedTokenRelation: token does not exist!\"\r\n        );\r\n        dTokens[_token] = _mappingdToken;\r\n        emit NewMappingdToken(_token, _mappingdToken);\r\n    }\r\n\r\n    function getDToken(address _token) external view returns (address) {\r\n        return dTokens[_token];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mappingdToken\",\"type\":\"address\"}],\"name\":\"NewMappingdToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_mappingdTokens\",\"type\":\"address[]\"}],\"name\":\"setdTokensRelation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mappingdToken\",\"type\":\"address\"}],\"name\":\"updatedTokenRelation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DTokenController","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://20b79c61e227bc3a2ff1b9770703d5d6425ebe6205daa0ca44ce923102989a03"}]}