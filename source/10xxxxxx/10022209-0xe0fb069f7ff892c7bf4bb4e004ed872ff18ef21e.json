{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface OneInchInterace {\r\n    function swap(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 minReturnAmount,\r\n        uint256 guaranteedAmount,\r\n        address payable referrer,\r\n        address[] calldata callAddresses,\r\n        bytes calldata callDataConcat,\r\n        uint256[] calldata starts,\r\n        uint256[] calldata gasLimitsAndValues\r\n    )\r\n    external\r\n    payable\r\n    returns (uint256 returnAmount);\r\n}\r\n\r\ninterface OneSplitInterface {\r\n    function swap(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution, // [Uniswap, Kyber, Bancor, Oasis]\r\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken, 1024 - bDAI\r\n    ) external payable;\r\n\r\n    function getExpectedReturn(\r\n        TokenInterface fromToken,\r\n        TokenInterface toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n    external\r\n    view\r\n    returns(\r\n        uint256 returnAmount,\r\n        uint256[] memory distribution\r\n    );\r\n}\r\n\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint _id) external returns (uint _num);\r\n    function setUint(uint _id, uint _val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getAddressETH() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return Memory Variable Address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() internal pure returns (address) {\r\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n    */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n    */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details\r\n    */\r\n    function connectorID() public pure returns(uint _type, uint _id) {\r\n        (_type, _id) = (1, 0);\r\n    }\r\n}\r\n\r\n\r\ncontract OneHelpers is Helpers {\r\n    /**\r\n     * @dev Return 1 Inch Address\r\n     */\r\n    function getOneInchAddress() internal pure returns (address) {\r\n        return 0x11111254369792b2Ca5d084aB5eEA397cA8fa48B;\r\n    }\r\n\r\n    /**\r\n     * @dev Return 1 Split Address\r\n     */\r\n    function getOneSplitAddress() internal pure returns (address) {\r\n        return 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\r\n        _amt = address(token) == getAddressETH() ? address(this).balance : token.balanceOf(address(this));\r\n    }\r\n\r\n    function convertDiv(uint xDec, uint yDec, uint x, uint y) internal pure returns(uint z) {\r\n        z = wdiv(convertTo18(xDec, x), convertTo18(yDec, y));\r\n    }\r\n\r\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\r\n        buyDec = address(buyAddr) == getAddressETH() ?  18 : buyAddr.decimals();\r\n        sellDec = address(sellAddr) == getAddressETH() ?  18 : sellAddr.decimals();\r\n    }\r\n\r\n    function decodeData(\r\n        bytes memory data\r\n    )\r\n    internal pure returns (\r\n        TokenInterface buyAddr,\r\n        TokenInterface sellAddr,\r\n        uint256 fromTokenAmount\r\n        // uint256 minReturnAmount,\r\n        // uint256 guaranteedAmount\r\n    )\r\n    {\r\n        bytes memory _data = data;\r\n        address _buyAddr;\r\n        address _sellAddr;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            _sellAddr := mload(add(_data, 36))\r\n            _buyAddr := mload(add(_data, 68))\r\n            fromTokenAmount := mload(add(_data, 100))\r\n            // minReturnAmount := mload(add(_data, 132))\r\n            // guaranteedAmount := mload(add(_data, 164))\r\n        }\r\n        buyAddr = TokenInterface(_buyAddr);\r\n        sellAddr = TokenInterface(_sellAddr);\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is OneHelpers {\r\n    function oneSplitSwap(\r\n        TokenInterface _sellAddr,\r\n        TokenInterface _buyAddr,\r\n        uint _sellAmt,\r\n        uint unitAmt\r\n    ) internal returns (uint buyAmt, uint[] memory distribution){\r\n        (uint _buyDec, uint _sellDec) = getTokensDec(_buyAddr, _sellAddr);\r\n        uint _sellAmt18 = convertTo18(_sellDec, _sellAmt);\r\n        uint _slippageAmt = convert18ToDec(_buyDec, wmul(unitAmt, _sellAmt18));\r\n\r\n        OneSplitInterface oneSplitContract = OneSplitInterface(getOneSplitAddress());\r\n\r\n        (buyAmt, distribution) = oneSplitContract.getExpectedReturn(\r\n                _sellAddr,\r\n                _buyAddr,\r\n                _sellAmt,\r\n                3, // TODO - shall we hardcode?\r\n                0 // TODO - do we need to disable anything?\r\n            );\r\n\r\n        require(_slippageAmt <= buyAmt, \"Too much slippage\");\r\n\r\n        uint ethAmt;\r\n        if (address(_sellAddr) == getAddressETH()) {\r\n            ethAmt = _sellAmt;\r\n        } else {\r\n            _sellAddr.approve(address(oneSplitContract), _sellAmt);\r\n        }\r\n\r\n        oneSplitContract.swap.value(ethAmt)(\r\n            _sellAddr,\r\n            _buyAddr,\r\n            _sellAmt,\r\n            buyAmt,\r\n            distribution,\r\n            0\r\n        );\r\n    }\r\n\r\n    function oneInchSwap(\r\n        bytes memory _callData,\r\n        uint ethAmt\r\n    )\r\n    internal returns (uint buyAmt) {\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory data) = address(getOneInchAddress()).call.value(ethAmt)(_callData);\r\n        if (!success) revert(\"1Inch-swap-failed\");\r\n\r\n        buyAmt = abi.decode(data, (uint));\r\n    }\r\n}\r\n\r\ncontract BasicResolver is Resolver {\r\n    event LogSellOneInch(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 setId\r\n    );\r\n\r\n    event LogSellOneSplit(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    function sell(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint unitAmt,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        uint _sellAmt = sellAmt;\r\n        TokenInterface _buyAddr = TokenInterface(buyAddr);\r\n        TokenInterface _sellAddr = TokenInterface(sellAddr);\r\n\r\n        uint initalBal = getTokenBal(_buyAddr);\r\n        _sellAmt = _sellAmt == uint(-1) ? getTokenBal(_sellAddr) : _sellAmt;\r\n\r\n        oneSplitSwap(\r\n            _sellAddr,\r\n            _buyAddr,\r\n            _sellAmt,\r\n            unitAmt\r\n        );\r\n\r\n        uint finialBal = getTokenBal(_buyAddr);\r\n        uint _buyAmt = sub(finialBal, initalBal);\r\n\r\n        // setUint(setId, _buyAmt);\r\n        emit LogSellOneSplit(address(_buyAddr), address(_sellAddr), _buyAmt, _sellAmt, getId, setId);\r\n\r\n    }\r\n\r\n    function sell(\r\n        bytes calldata callData,\r\n        uint setId\r\n    ) external payable {\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr, uint sellAmt) = decodeData(callData);\r\n\r\n        uint ethAmt;\r\n        if (address(_sellAddr) == getAddressETH()) {\r\n            ethAmt = sellAmt;\r\n        } else {\r\n            _sellAddr.approve(getOneInchAddress(), sellAmt);\r\n        }\r\n\r\n        uint _buyAmt = oneInchSwap(callData, ethAmt);\r\n\r\n        // setUint(setId, _buyAmt);\r\n        emit LogSellOneInch(address(_buyAddr), address(_sellAddr), _buyAmt, sellAmt, setId);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellOneInch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellOneSplit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"BasicResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://17b1e40f2f8548821d9c023f9319372d7cedd3337876cd57bc8da09f49347aae"}]}