{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\n\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  string public note;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, string _note, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    note = _note;\n    decimals = _decimals;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n  address public admin;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier onlyOwnerOrAdmin() {\n    require(msg.sender != address(0) && (msg.sender == owner || msg.sender == admin));\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    require(newOwner != owner);\n    require(newOwner != admin);\n\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n  function setAdmin(address newAdmin) onlyOwner public {\n    require(admin != newAdmin);\n    require(owner != newAdmin);\n\n    admin = newAdmin;\n  }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a); // overflow check\n    return c;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 _totalSupply;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0);\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\ncontract ERC20Token is BasicToken, ERC20 {\n  using SafeMath for uint256;\n  mapping (address => mapping (address => uint256)) allowed;\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require(_value == 0 || allowed[msg.sender][_spender] == 0);\n\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is BasicToken, Ownable {\n  string internal constant INVALID_TOKEN_VALUES = 'Invalid token values';\n  string internal constant NOT_ENOUGH_TOKENS = 'Not enough tokens';\n  \n  // events\n  event Burn(address indexed burner, uint256 amount);\n  event Mint(address indexed minter, uint256 amount);\n  event AddressBurn(address burner, uint256 amount);\n\n  // reduce sender balance and Token total supply\n  function burn(uint256 _value) onlyOwner public {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    _totalSupply = _totalSupply.sub(_value);\n    emit Burn(msg.sender, _value);\n    emit Transfer(msg.sender, address(0), _value);\n  }\n   // reduce address balance and Token total supply\n  function addressburn(address _of, uint256 _value) onlyOwner public {\n    require(_value > 0, INVALID_TOKEN_VALUES);\n  require(_value <= balances[_of], NOT_ENOUGH_TOKENS);\n  balances[_of] = balances[_of].sub(_value);\n  _totalSupply = _totalSupply.sub(_value);\n  emit AddressBurn(_of, _value);\n    emit Transfer(_of, address(0), _value);\n  }\n  \n  // increase sender balance and Token total supply\n  function mint(uint256 _value) onlyOwner public {\n    balances[msg.sender] = balances[msg.sender].add(_value);\n    _totalSupply = _totalSupply.add(_value);\n    emit Mint(msg.sender, _value);\n    emit Transfer(address(0), msg.sender, _value);\n  }\n}\n\ncontract TokenLock is Ownable {\n  using SafeMath for uint256;\n\n  bool public transferEnabled = false; // indicates that token is transferable or not\n  bool public noTokenLocked = false; // indicates all token is released or not\n\n  struct TokenLockInfo { // token of `amount` cannot be moved before `time`\n    uint256 amount; // locked amount\n    uint256 time; // unix timestamp\n  }\n\n  struct TokenLockState {\n    uint256 latestReleaseTime;\n    TokenLockInfo[] tokenLocks; // multiple token locks can exist\n  }\n\n  mapping(address => TokenLockState) lockingStates;  \n  mapping(address => bool) addresslock;\n  mapping(address => uint256) lockbalances;\n  \n  event AddTokenLockDate(address indexed to, uint256 time, uint256 amount);\n  event AddTokenLock(address indexed to, uint256 amount);\n  event AddressLockTransfer(address indexed to, bool _enable);\n\n  function unlockAllTokens() public onlyOwner {\n    noTokenLocked = true;\n  }\n\n  function enableTransfer(bool _enable) public onlyOwner {\n    transferEnabled = _enable;\n  }\n\n  // calculate the amount of tokens an address can use\n  function getMinLockedAmount(address _addr) view public returns (uint256 locked) {\n    uint256 i;\n    uint256 a;\n    uint256 t;\n    uint256 lockSum = 0;\n\n    // if the address has no limitations just return 0\n    TokenLockState storage lockState = lockingStates[_addr];\n    if (lockState.latestReleaseTime < now) {\n      return 0;\n    }\n\n    for (i=0; i<lockState.tokenLocks.length; i++) {\n      a = lockState.tokenLocks[i].amount;\n      t = lockState.tokenLocks[i].time;\n\n      if (t > now) {\n        lockSum = lockSum.add(a);\n      }\n    }\n\n    return lockSum;\n  }\n  \n  function lockVolumeAddress(address _sender) view public returns (uint256 locked) {\n    return lockbalances[_sender];\n  }\n\n  function addTokenLockDate(address _addr, uint256 _value, uint256 _release_time) onlyOwnerOrAdmin public {\n    require(_addr != address(0));\n    require(_value > 0);\n    require(_release_time > now);\n\n    TokenLockState storage lockState = lockingStates[_addr]; // assigns a pointer. change the member value will update struct itself.\n    if (_release_time > lockState.latestReleaseTime) {\n      lockState.latestReleaseTime = _release_time;\n    }\n    lockState.tokenLocks.push(TokenLockInfo(_value, _release_time));\n\n    emit AddTokenLockDate(_addr, _release_time, _value);\n  }\n  \n  function addTokenLock(address _addr, uint256 _value) onlyOwnerOrAdmin public {\n    require(_addr != address(0));\n    require(_value >= 0);\n\n    lockbalances[_addr] = _value;\n\n    emit AddTokenLock(_addr, _value);\n  }\n  \n  function addressLockTransfer(address _addr, bool _enable) public onlyOwner {\n    require(_addr != address(0));\n    addresslock[_addr] = _enable;\n  \n  emit AddressLockTransfer(_addr, _enable);\n  }\n}\n\ncontract POVEToken is BurnableToken, DetailedERC20, ERC20Token, TokenLock {\n  using SafeMath for uint256;\n\n  // events\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  string public constant symbol = \"POVE\";\n  string public constant name = \"Proof Of Value Engine\";\n  string public constant note = \"POVE calculates the valuation through a decentralized financial ecosystem by translating the criteria for measuring patent value.\";\n  uint8  public constant decimals = 18;\n  \n  uint256 constant TOTAL_SUPPLY = 500000000 *(10**uint256(decimals));\n\n  \n  /*  \n  *  Addresses  \n  */\n\n  constructor() DetailedERC20(name, symbol, note, decimals) public {\n    _totalSupply = TOTAL_SUPPLY;\n\n    // initial supply belongs to owner\n    balances[msg.sender] = _totalSupply;\n    emit Transfer(address(0x0), msg.sender, _totalSupply);\n  }\n\n  // modifiers\n  // checks if the address can transfer tokens\n  modifier canTransfer(address _sender, uint256 _value) {\n    require(_sender != address(0));\n    require(\n      (_sender == owner || _sender == admin) || (\n        transferEnabled && (\n          noTokenLocked ||\n          (!addresslock[_sender] && canTransferIfLocked(_sender, _value) && canTransferIfLocked(_sender, _value))\n        )\n      )\n    );\n\n    _;\n  }\n\n  function setAdmin(address newAdmin) onlyOwner public {\n  address oldAdmin = admin;\n    super.setAdmin(newAdmin);\n    approve(oldAdmin, 0);\n    approve(newAdmin, TOTAL_SUPPLY);\n  }\n\n  modifier onlyValidDestination(address to) {\n    require(to != address(0x0));\n    require(to != address(this));\n    require(to != owner);\n    _;\n  }\n\n  function canTransferIfLocked(address _sender, uint256 _value) public view returns(bool) {\n    uint256 after_math = balances[_sender].sub(_value);\n  \n    return after_math >= (getMinLockedAmount(_sender) + lockVolumeAddress(_sender));\n  }\n  \n  function LockTransferAddress(address _sender) public view returns(bool) {\n    return addresslock[_sender];\n  }\n\n  // override function using canTransfer on the sender address\n  function transfer(address _to, uint256 _value) onlyValidDestination(_to) canTransfer(msg.sender, _value) public returns (bool success) {\n    return super.transfer(_to, _value);\n  }\n\n  // transfer tokens from one address to another\n  function transferFrom(address _from, address _to, uint256 _value) onlyValidDestination(_to) canTransfer(_from, _value) public returns (bool success) {\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // this will throw if we don't have enough allowance\n\n    // this event comes from BasicToken.sol\n    emit Transfer(_from, _to, _value);\n\n    return true;\n  }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_release_time\",\"type\":\"uint256\"}],\"name\":\"addTokenLockDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"lockVolumeAddress\",\"outputs\":[{\"name\":\"locked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"note\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addressburn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noTokenLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMinLockedAmount\",\"outputs\":[{\"name\":\"locked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canTransferIfLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"addressLockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"LockTransferAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addTokenLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddTokenLockDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddTokenLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"AddressLockTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddressBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"POVEToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}