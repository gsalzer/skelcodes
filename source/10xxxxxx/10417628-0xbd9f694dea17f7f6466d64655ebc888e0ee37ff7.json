{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ncontract VasaPowerSwitch {\r\n\r\n    uint256 private _totalMintable;\r\n    uint256[] private _timeWindows;\r\n    uint256[][] private _multipliers;\r\n\r\n    address private _proxy;\r\n\r\n    address private _oldTokenAddress;\r\n\r\n    uint256 private _startBlock;\r\n\r\n    constructor(address proxyAddress, address oldTokenAddress, uint256 startBlock, uint256 totalMintable, uint256[] memory timeWindows, uint256[] memory multipliers, uint256[] memory dividers) public {\r\n        _startBlock = startBlock;\r\n        _proxy = proxyAddress;\r\n        _oldTokenAddress = oldTokenAddress;\r\n        _totalMintable = totalMintable;\r\n        _timeWindows = timeWindows;\r\n        assert(timeWindows.length == multipliers.length && multipliers.length == dividers.length);\r\n        for(uint256 i = 0; i < multipliers.length; i++) {\r\n            _multipliers.push([multipliers[i], dividers[i]]);\r\n        }\r\n    }\r\n\r\n    function totalMintable() public view returns(uint256) {\r\n        return block.number > _timeWindows[_timeWindows.length - 1] ? 0 :_totalMintable;\r\n    }\r\n\r\n    function startBlock() public view returns(uint256) {\r\n        return _startBlock;\r\n    }\r\n\r\n    function proxy() public view returns(address) {\r\n        return _proxy;\r\n    }\r\n\r\n    function setProxy(address newProxy) public {\r\n        require(IMVDFunctionalitiesManager(IMVDProxy(_proxy).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), \"Unauthorized Action!\");\r\n        _proxy = newProxy;\r\n    }\r\n\r\n    function calculateMintable(uint256 amount) public view returns(uint256) {\r\n        if(amount == 0 || block.number > _timeWindows[_timeWindows.length - 1]) {\r\n            return 0;\r\n        }\r\n        uint256 i = 0;\r\n        for(i; i < _timeWindows.length; i++) {\r\n            if(block.number <= _timeWindows[i]) {\r\n                break;\r\n            }\r\n        }\r\n        uint256 mintable = i >= _timeWindows.length ? 0 : ((amount * _multipliers[i][0]) / _multipliers[i][1]);\r\n        return mintable > _totalMintable ? _totalMintable : mintable;\r\n    }\r\n\r\n    function length() public view returns(uint256) {\r\n        return _timeWindows.length;\r\n    }\r\n\r\n    function timeWindow(uint256 i) public view returns(uint256, uint256, uint256) {\r\n        return (_timeWindows[i], _multipliers[i][0], _multipliers[i][1]);\r\n    }\r\n\r\n    function getContextInfo(uint256 amount) public view returns (uint256 timeWindow, uint256 multiplier, uint256 divider, uint256 mintable) {\r\n        if(amount == 0 || block.number > _timeWindows[_timeWindows.length - 1]) {\r\n            return (0, 0, 0, 0);\r\n        }\r\n        uint256 i = 0;\r\n        for(i; i < _timeWindows.length; i++) {\r\n            if(block.number <= _timeWindows[i]) {\r\n                break;\r\n            }\r\n        }\r\n        if(i < _timeWindows.length) {\r\n            timeWindow = _timeWindows[i];\r\n            multiplier = _multipliers[i][0];\r\n            divider = _multipliers[i][1];\r\n        }\r\n        mintable = i >= _timeWindows.length ? 0 : ((amount * multiplier) / divider);\r\n        mintable = mintable > _totalMintable ? _totalMintable : mintable;\r\n    }\r\n\r\n    function vasaPowerSwitch(uint256 senderBalanceOf) public {\r\n        require(block.number >= _startBlock, \"Switch still not started!\");\r\n\r\n        IERC20 oldToken = IERC20(_oldTokenAddress);\r\n\r\n        uint256 mintableAmount = calculateMintable(senderBalanceOf);\r\n        require(mintableAmount > 0, \"Zero tokens to mint!\");\r\n\r\n        oldToken.transferFrom(msg.sender, address(this), senderBalanceOf);\r\n        oldToken.burn(senderBalanceOf);\r\n        _totalMintable -= senderBalanceOf;\r\n        IMVDProxy(_proxy).submit(\"mintAndTransfer\", abi.encode(address(0), 0, mintableAmount, msg.sender));\r\n    }\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external;\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMintable\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"timeWindows\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"multipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dividers\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateMintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getContextInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divider\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"timeWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderBalanceOf\",\"type\":\"uint256\"}],\"name\":\"vasaPowerSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VasaPowerSwitch","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b9f1ed9a6dcbf12b0a288e6a7e7d77a3a7272ddc000000000000000000000000d6f0bb2a45110f819e908a915237d652ac7c5aa800000000000000000000000000000000000000000000000000000000009f2e000000000000000000000000000000000000000000000273c6afb10cd5580a000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000009f469c00000000000000000000000000000000000000000000000000000000009f77d400000000000000000000000000000000000000000000000000000000009ff2e00000000000000000000000000000000000000000000000000000000000a4464c0000000000000000000000000000000000000000000000000000000000a4529a0000000000000000000000000000000000000000000000000000000000a45ee80000000000000000000000000000000000000000000000000000000000a46b360000000000000000000000000000000000000000000000000000000000a477840000000000000000000000000000000000000000000000000000000000a483d20000000000000000000000000000000000000000000000000000000000a490200000000000000000000000000000000000000000000000000000000000a49c6e0000000000000000000000000000000000000000000000000000000000a4a8bc0000000000000000000000000000000000000000000000000000000000a4b50a0000000000000000000000000000000000000000000000000000000000a4c1580000000000000000000000000000000000000000000000000000000000a4cda60000000000000000000000000000000000000000000000000000000000a4d9f40000000000000000000000000000000000000000000000000000000000a4e6420000000000000000000000000000000000000000000000000000000000a4f2900000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000f4240","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f018a3790f8b3ac8c861c951f4579227683e19b8cf030af95e3770c5777bbc0e"}]}