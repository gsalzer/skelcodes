{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\ninterface IBasicToken {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract IERC20WithCheckpointing {\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256);\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns (uint256);\r\n}\r\n\r\ncontract IIncentivisedVotingLockup is IERC20WithCheckpointing {\r\n\r\n    function getLastUserPoint(address _addr) external view returns(int128 bias, int128 slope, uint256 ts);\r\n    function createLock(uint256 _value, uint256 _unlockTime) external;\r\n    function withdraw() external;\r\n    function increaseLockAmount(uint256 _value) external;\r\n    function increaseLockLength(uint256 _unlockTime) external;\r\n    function eject(address _user) external;\r\n    function expireContract() external;\r\n\r\n    function claimReward() public;\r\n    function earned(address _account) public view returns (uint256);\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ncontract ModuleKeys {\r\n\r\n    // Governance\r\n    // ===========\r\n                                                // Phases\r\n    // keccak256(\"Governance\");                 // 2.x\r\n    bytes32 internal constant KEY_GOVERNANCE = 0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\r\n    //keccak256(\"Staking\");                     // 1.2\r\n    bytes32 internal constant KEY_STAKING = 0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\r\n    //keccak256(\"ProxyAdmin\");                  // 1.0\r\n    bytes32 internal constant KEY_PROXY_ADMIN = 0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\r\n\r\n    // mStable\r\n    // =======\r\n    // keccak256(\"OracleHub\");                  // 1.2\r\n    bytes32 internal constant KEY_ORACLE_HUB = 0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\r\n    // keccak256(\"Manager\");                    // 1.2\r\n    bytes32 internal constant KEY_MANAGER = 0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\r\n    //keccak256(\"Recollateraliser\");            // 2.x\r\n    bytes32 internal constant KEY_RECOLLATERALISER = 0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\r\n    //keccak256(\"MetaToken\");                   // 1.1\r\n    bytes32 internal constant KEY_META_TOKEN = 0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\r\n    // keccak256(\"SavingsManager\");             // 1.0\r\n    bytes32 internal constant KEY_SAVINGS_MANAGER = 0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n    function cancelProposedModule(bytes32 _key) external;\r\n    function acceptProposedModule(bytes32 _key) external;\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n    function cancelLockModule(bytes32 _key) external;\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\ncontract Module is ModuleKeys {\r\n\r\n    INexus public nexus;\r\n\r\n    /**\r\n     * @dev Initialises the Module by setting publisher addresses,\r\n     *      and reading all available system module information\r\n     */\r\n    constructor(address _nexus) internal {\r\n        require(_nexus != address(0), \"Nexus is zero address\");\r\n        nexus = INexus(_nexus);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\r\n     */\r\n    modifier onlyProxyAdmin() {\r\n        require(\r\n            msg.sender == _proxyAdmin(), \"Only ProxyAdmin can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Manager.\r\n     */\r\n    modifier onlyManager() {\r\n        require(msg.sender == _manager(), \"Only manager can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Staking Module address from the Nexus\r\n     * @return Address of the Staking Module contract\r\n     */\r\n    function _staking() internal view returns (address) {\r\n        return nexus.getModule(KEY_STAKING);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return MetaToken Module address from the Nexus\r\n     * @return Address of the MetaToken Module contract\r\n     */\r\n    function _metaToken() internal view returns (address) {\r\n        return nexus.getModule(KEY_META_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return OracleHub Module address from the Nexus\r\n     * @return Address of the OracleHub Module contract\r\n     */\r\n    function _oracleHub() internal view returns (address) {\r\n        return nexus.getModule(KEY_ORACLE_HUB);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Manager Module address from the Nexus\r\n     * @return Address of the Manager Module contract\r\n     */\r\n    function _manager() internal view returns (address) {\r\n        return nexus.getModule(KEY_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IRewardsDistributionRecipient {\r\n    function notifyRewardAmount(uint256 reward) external;\r\n    function getRewardToken() external view returns (IERC20);\r\n}\r\n\r\ncontract RewardsDistributionRecipient is IRewardsDistributionRecipient, Module {\r\n\r\n    // @abstract\r\n    function notifyRewardAmount(uint256 reward) external;\r\n    function getRewardToken() external view returns (IERC20);\r\n\r\n    // This address has the ability to distribute the rewards\r\n    address public rewardsDistributor;\r\n\r\n    /** @dev Recipient is a module, governed by mStable governance */\r\n    constructor(address _nexus, address _rewardsDistributor)\r\n        internal\r\n        Module(_nexus)\r\n    {\r\n        rewardsDistributor = _rewardsDistributor;\r\n    }\r\n\r\n    /**\r\n     * @dev Only the rewards distributor can notify about rewards\r\n     */\r\n    modifier onlyRewardsDistributor() {\r\n        require(msg.sender == rewardsDistributor, \"Caller is not reward distributor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the rewardsDistributor - only called by mStable governor\r\n     * @param _rewardsDistributor   Address of the new distributor\r\n     */\r\n    function setRewardsDistribution(address _rewardsDistributor)\r\n        external\r\n        onlyGovernor\r\n    {\r\n        rewardsDistributor = _rewardsDistributor;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SignedSafeMath128 {\r\n    int128 constant private _INT128_MIN = -2**127;\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int128 a, int128 b) internal pure returns (int128) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT128_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int128 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int128 a, int128 b) internal pure returns (int128) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT128_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int128 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int128 a, int128 b) internal pure returns (int128) {\r\n        int128 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int128 a, int128 b) internal pure returns (int128) {\r\n        int128 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary StableMath {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Scaling unit for use in specific calculations,\r\n     * where 1 * 10**18, or 1e18 represents a unit '1'\r\n     */\r\n    uint256 private constant FULL_SCALE = 1e18;\r\n\r\n    /**\r\n     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\r\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\r\n     * @dev bAsset ratio unit for use in exact calculations,\r\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\r\n     */\r\n    uint256 private constant RATIO_SCALE = 1e8;\r\n\r\n    /**\r\n     * @dev Provides an interface to the scaling unit\r\n     * @return Scaling unit (1e18 or 1 * 10**18)\r\n     */\r\n    function getFullScale() internal pure returns (uint256) {\r\n        return FULL_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Provides an interface to the ratio unit\r\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\r\n     */\r\n    function getRatioScale() internal pure returns (uint256) {\r\n        return RATIO_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @dev Scales a given integer to the power of the full scale.\r\n     * @param x   Simple uint256 to scale\r\n     * @return    Scaled value a to an exact number\r\n     */\r\n    function scaleInteger(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x.mul(FULL_SCALE);\r\n    }\r\n\r\n    /***************************************\r\n              PRECISE ARITHMETIC\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncate(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return mulTruncateScale(x, y, FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\r\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @param scale Scale unit\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit\r\n     */\r\n    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. assume scale = fullScale\r\n        // z = 10e18 * 9e17 = 9e36\r\n        uint256 z = x.mul(y);\r\n        // return 9e38 / 1e18 = 9e18\r\n        return z.div(scale);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\r\n     * @param x     Left hand input to multiplication\r\n     * @param y     Right hand input to multiplication\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              scale unit, rounded up to the closest base unit.\r\n     */\r\n    function mulTruncateCeil(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e17 * 17268172638 = 138145381104e17\r\n        uint256 scaled = x.mul(y);\r\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\r\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\r\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\r\n        return ceil.div(FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\r\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\r\n     * @param x     Left hand input to division\r\n     * @param y     Right hand input to division\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divPrecisely(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e18 * 1e18 = 8e36\r\n        uint256 z = x.mul(FULL_SCALE);\r\n        // e.g. 8e36 / 10e18 = 8e17\r\n        return z.div(y);\r\n    }\r\n\r\n\r\n    /***************************************\r\n                  RATIO FUNCS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\r\n     */\r\n    function mulRatioTruncate(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies and truncates a token ratio, rounding up the result\r\n     *      i.e. How much mAsset is this bAsset worth?\r\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the two inputs and then dividing by the shared\r\n     *              ratio scale, rounded up to the closest base unit.\r\n     */\r\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. How much mAsset should I burn for this bAsset (x)?\r\n        // 1e18 * 1e8 = 1e26\r\n        uint256 scaled = x.mul(ratio);\r\n        // 1e26 + 9.99e7 = 100..00.999e8\r\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\r\n        // return 100..00.999e8 / 1e8 = 1e18\r\n        return ceil.div(RATIO_SCALE);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\r\n     *      i.e. How much bAsset is this mAsset worth?\r\n     * @param x     Left hand operand in division\r\n     * @param ratio bAsset ratio\r\n     * @return      Result after multiplying the left operand by the scale, and\r\n     *              executing the division on the right hand input.\r\n     */\r\n    function divRatioPrecisely(uint256 x, uint256 ratio)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        // e.g. 1e14 * 1e8 = 1e22\r\n        uint256 y = x.mul(RATIO_SCALE);\r\n        // return 1e22 / 1e12 = 1e10\r\n        return y.div(ratio);\r\n    }\r\n\r\n    /***************************************\r\n                    HELPERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Calculates minimum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Minimum of the two inputs\r\n     */\r\n    function min(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? y : x;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculated maximum of two numbers\r\n     * @param x     Left hand input\r\n     * @param y     Right hand input\r\n     * @return      Maximum of the two inputs\r\n     */\r\n    function max(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > y ? x : y;\r\n    }\r\n\r\n    /**\r\n     * @dev Clamps a value to an upper bound\r\n     * @param x           Left hand input\r\n     * @param upperBound  Maximum possible value to return\r\n     * @return            Input x clamped to a maximum value, upperBound\r\n     */\r\n    function clamp(uint256 x, uint256 upperBound)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return x > upperBound ? upperBound : x;\r\n    }\r\n}\r\n\r\nlibrary Root {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Returns the square root of a given number\r\n     * @param x Input\r\n     * @return y Square root of Input\r\n     */\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x.add(1)).div(2);\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x.div(z).add(z)).div(2);\r\n        }\r\n    }\r\n}\r\n\r\n/* solium-disable security/no-block-members */\r\n/**\r\n * @title  IncentivisedVotingLockup\r\n * @author Voting Weight tracking & Decay\r\n *             -> Curve Finance (MIT) - forked & ported to Solidity\r\n *             -> https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy\r\n *         osolmaz - Research & Reward distributions\r\n *         alsco77 - Solidity implementation\r\n * @notice Lockup MTA, receive vMTA (voting weight that decays over time), and earn\r\n *         rewards based on staticWeight\r\n * @dev    Supports:\r\n *            1) Tracking MTA Locked up (LockedBalance)\r\n *            2) Pull Based Reward allocations based on Lockup (Static Balance)\r\n *            3) Decaying voting weight lookup through CheckpointedERC20 (balanceOf)\r\n *            4) Ejecting fully decayed participants from reward allocation (eject)\r\n *            5) Migration of points to v2 (used as multiplier in future) ***** (rewardsPaid)\r\n *            6) Closure of contract (expire)\r\n */\r\ncontract IncentivisedVotingLockup is\r\n    IIncentivisedVotingLockup,\r\n    ReentrancyGuard,\r\n    RewardsDistributionRecipient\r\n{\r\n    using StableMath for uint256;\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath128 for int128;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /** Shared Events */\r\n    event Deposit(address indexed provider, uint256 value, uint256 locktime, LockAction indexed action, uint256 ts);\r\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\r\n    event Ejected(address indexed ejected, address ejector, uint256 ts);\r\n    event Expired();\r\n    event RewardAdded(uint256 reward);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    /** Shared Globals */\r\n    IERC20 public stakingToken;\r\n    uint256 private constant WEEK = 7 days;\r\n    uint256 public constant MAXTIME = 365 days;\r\n    uint256 public END;\r\n    bool public expired = false;\r\n\r\n    /** Lockup */\r\n    uint256 public globalEpoch;\r\n    Point[] public pointHistory;\r\n    mapping(address => Point[]) public userPointHistory;\r\n    mapping(address => uint256) public userPointEpoch;\r\n    mapping(uint256 => int128) public slopeChanges;\r\n    mapping(address => LockedBalance) public locked;\r\n\r\n    // Voting token - Checkpointed view only ERC20\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals = 18;\r\n\r\n    /** Rewards */\r\n    // Updated upon admin deposit\r\n    uint256 public periodFinish = 0;\r\n    uint256 public rewardRate = 0;\r\n\r\n    // Globals updated per stake/deposit/withdrawal\r\n    uint256 public totalStaticWeight = 0;\r\n    uint256 public lastUpdateTime = 0;\r\n    uint256 public rewardPerTokenStored = 0;\r\n\r\n    // Per user storage updated per stake/deposit/withdrawal\r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => uint256) public rewardsPaid;\r\n\r\n    /** Structs */\r\n    struct Point {\r\n        int128 bias;\r\n        int128 slope;\r\n        uint256 ts;\r\n        uint256 blk;\r\n    }\r\n\r\n    struct LockedBalance {\r\n        int128 amount;\r\n        uint256 end;\r\n    }\r\n\r\n    enum LockAction {\r\n        CREATE_LOCK,\r\n        INCREASE_LOCK_AMOUNT,\r\n        INCREASE_LOCK_TIME\r\n    }\r\n\r\n    constructor(\r\n        address _stakingToken,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _nexus,\r\n        address _rewardsDistributor\r\n    )\r\n        public\r\n        RewardsDistributionRecipient(_nexus, _rewardsDistributor)\r\n    {\r\n        stakingToken = IERC20(_stakingToken);\r\n        Point memory init = Point({ bias: int128(0), slope: int128(0), ts: block.timestamp, blk: block.number});\r\n        pointHistory.push(init);\r\n\r\n        decimals = IBasicToken(_stakingToken).decimals();\r\n        require(decimals <= 18, \"Cannot have more than 18 decimals\");\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        END = block.timestamp.add(MAXTIME);\r\n    }\r\n\r\n    /** @dev Modifier to ensure contract has not yet expired */\r\n    modifier contractNotExpired(){\r\n        require(!expired, \"Contract is expired\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Validates that the user has an expired lock && they still have capacity to earn\r\n    * @param _addr User address to check\r\n    */\r\n    modifier lockupIsOver(address _addr) {\r\n        LockedBalance memory userLock = locked[_addr];\r\n        require(userLock.amount > 0 && block.timestamp >= userLock.end, \"Users lock didn't expire\");\r\n        require(staticBalanceOf(_addr) > 0, \"User must have existing bias\");\r\n        _;\r\n    }\r\n\r\n    /***************************************\r\n                LOCKUP - GETTERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Gets the last available user point\r\n     * @param _addr User address\r\n     * @return bias i.e. y\r\n     * @return slope i.e. linear gradient\r\n     * @return ts i.e. time point was logged\r\n     */\r\n    function getLastUserPoint(address _addr)\r\n        external\r\n        view\r\n        returns(\r\n            int128 bias,\r\n            int128 slope,\r\n            uint256 ts\r\n        )\r\n    {\r\n        uint256 uepoch = userPointEpoch[_addr];\r\n        if(uepoch == 0){\r\n            return (0, 0, 0);\r\n        }\r\n        Point memory point = userPointHistory[_addr][uepoch];\r\n        return (point.bias, point.slope, point.ts);\r\n    }\r\n\r\n    /***************************************\r\n                    LOCKUP\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Records a checkpoint of both individual and global slope\r\n     * @param _addr User address, or address(0) for only global\r\n     * @param _oldLocked Old amount that user had locked, or null for global\r\n     * @param _newLocked new amount that user has locked, or null for global\r\n     */\r\n    function _checkpoint(\r\n        address _addr,\r\n        LockedBalance memory _oldLocked,\r\n        LockedBalance memory _newLocked\r\n    )\r\n        internal\r\n    {\r\n        Point memory userOldPoint;\r\n        Point memory userNewPoint;\r\n        int128 oldSlopeDelta = 0;\r\n        int128 newSlopeDelta = 0;\r\n        uint256 epoch = globalEpoch;\r\n\r\n        if(_addr != address(0)){\r\n            // Calculate slopes and biases\r\n            // Kept at zero when they have to\r\n            if(_oldLocked.end > block.timestamp && _oldLocked.amount > 0){\r\n                userOldPoint.slope = _oldLocked.amount.div(int128(MAXTIME));\r\n                userOldPoint.bias = userOldPoint.slope.mul(int128(_oldLocked.end.sub(block.timestamp)));\r\n            }\r\n            if(_newLocked.end > block.timestamp && _newLocked.amount > 0){\r\n                userNewPoint.slope = _newLocked.amount.div(int128(MAXTIME));\r\n                userNewPoint.bias = userNewPoint.slope.mul(int128(_newLocked.end.sub(block.timestamp)));\r\n            }\r\n\r\n            // Moved from bottom final if statement to resolve stack too deep err\r\n            // start {\r\n            // Now handle user history\r\n            uint256 uEpoch = userPointEpoch[_addr];\r\n            if(uEpoch == 0){\r\n                userPointHistory[_addr].push(userOldPoint);\r\n            }\r\n            // track the total static weight\r\n            uint256 newStatic = _staticBalance(userNewPoint.slope, block.timestamp, _newLocked.end);\r\n            uint256 additiveStaticWeight = totalStaticWeight.add(newStatic);\r\n            if(uEpoch > 0){\r\n                uint256 oldStatic = _staticBalance(userPointHistory[_addr][uEpoch].slope, userPointHistory[_addr][uEpoch].ts, _oldLocked.end);\r\n                additiveStaticWeight = additiveStaticWeight.sub(oldStatic);\r\n            }\r\n            totalStaticWeight = additiveStaticWeight;\r\n\r\n            userPointEpoch[_addr] = uEpoch.add(1);\r\n            userNewPoint.ts = block.timestamp;\r\n            userNewPoint.blk = block.number;\r\n            // userPointHistory[_addr][uEpoch.add(1)] = userNewPoint;\r\n            userPointHistory[_addr].push(userNewPoint);\r\n\r\n            // } end\r\n\r\n            // Read values of scheduled changes in the slope\r\n            // oldLocked.end can be in the past and in the future\r\n            // newLocked.end can ONLY by in the FUTURE unless everything expired: than zeros\r\n            oldSlopeDelta = slopeChanges[_oldLocked.end];\r\n            if(_newLocked.end != 0){\r\n                if (_newLocked.end == _oldLocked.end) {\r\n                    newSlopeDelta = oldSlopeDelta;\r\n                } else {\r\n                    newSlopeDelta = slopeChanges[_newLocked.end];\r\n                }\r\n            }\r\n        }\r\n\r\n        Point memory lastPoint = Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number});\r\n        if(epoch > 0){\r\n            lastPoint = pointHistory[epoch];\r\n        }\r\n        uint256 lastCheckpoint = lastPoint.ts;\r\n\r\n        // initialLastPoint is used for extrapolation to calculate block number\r\n        // (approximately, for *At methods) and save them\r\n        // as we cannot figure that out exactly from inside the contract\r\n        Point memory initialLastPoint = Point({bias: 0, slope: 0, ts: lastPoint.ts, blk: lastPoint.blk});\r\n        uint256 blockSlope = 0; // dblock/dt\r\n        if(block.timestamp > lastPoint.ts){\r\n            blockSlope = StableMath.scaleInteger(block.number.sub(lastPoint.blk)).div(block.timestamp.sub(lastPoint.ts));\r\n        }\r\n        // If last point is already recorded in this block, slope=0\r\n        // But that's ok b/c we know the block in such case\r\n\r\n        // Go over weeks to fill history and calculate what the current point is\r\n        uint256 iterativeTime = _floorToWeek(lastCheckpoint);\r\n        for (uint256 i = 0; i < 255; i++){\r\n            // Hopefully it won't happen that this won't get used in 5 years!\r\n            // If it does, users will be able to withdraw but vote weight will be broken\r\n            iterativeTime = iterativeTime.add(WEEK);\r\n            int128 dSlope = 0;\r\n            if(iterativeTime > block.timestamp){\r\n                iterativeTime = block.timestamp;\r\n            } else {\r\n                dSlope = slopeChanges[iterativeTime];\r\n            }\r\n            int128 biasDelta = lastPoint.slope.mul(int128(iterativeTime.sub(lastCheckpoint)));\r\n            lastPoint.bias = lastPoint.bias.sub(biasDelta);\r\n            lastPoint.slope = lastPoint.slope.add(dSlope);\r\n            // This can happen\r\n            if(lastPoint.bias < 0){\r\n                lastPoint.bias = 0;\r\n            }\r\n            // This cannot happen - just in case\r\n            if(lastPoint.slope < 0){\r\n                lastPoint.slope = 0;\r\n            }\r\n            lastCheckpoint = iterativeTime;\r\n            lastPoint.ts = iterativeTime;\r\n            lastPoint.blk = initialLastPoint.blk.add(blockSlope.mulTruncate(iterativeTime.sub(initialLastPoint.ts)));\r\n\r\n            // when epoch is incremented, we either push here or after slopes updated below\r\n            epoch = epoch.add(1);\r\n            if(iterativeTime == block.timestamp) {\r\n                lastPoint.blk = block.number;\r\n                break;\r\n            } else {\r\n                // pointHistory[epoch] = lastPoint;\r\n                pointHistory.push(lastPoint);\r\n            }\r\n        }\r\n\r\n        globalEpoch = epoch;\r\n        // Now pointHistory is filled until t=now\r\n\r\n        if(_addr != address(0)){\r\n            // If last point was in this block, the slope change has been applied already\r\n            // But in such case we have 0 slope(s)\r\n            lastPoint.slope = lastPoint.slope.add(userNewPoint.slope.sub(userOldPoint.slope));\r\n            lastPoint.bias = lastPoint.bias.add(userNewPoint.bias.sub(userOldPoint.bias));\r\n            if(lastPoint.slope < 0) {\r\n                lastPoint.slope = 0;\r\n            }\r\n            if(lastPoint.bias < 0){\r\n                lastPoint.bias = 0;\r\n            }\r\n        }\r\n\r\n        // Record the changed point into history\r\n        // pointHistory[epoch] = lastPoint;\r\n        pointHistory.push(lastPoint);\r\n\r\n        if(_addr != address(0)){\r\n            // Schedule the slope changes (slope is going down)\r\n            // We subtract new_user_slope from [new_locked.end]\r\n            // and add old_user_slope to [old_locked.end]\r\n            if(_oldLocked.end > block.timestamp){\r\n                // oldSlopeDelta was <something> - userOldPoint.slope, so we cancel that\r\n                oldSlopeDelta = oldSlopeDelta.add(userOldPoint.slope);\r\n                if(_newLocked.end == _oldLocked.end) {\r\n                    oldSlopeDelta = oldSlopeDelta.sub(userNewPoint.slope);  // It was a new deposit, not extension\r\n                }\r\n                slopeChanges[_oldLocked.end] = oldSlopeDelta;\r\n            }\r\n            if(_newLocked.end > block.timestamp) {\r\n                if(_newLocked.end > _oldLocked.end){\r\n                    newSlopeDelta = newSlopeDelta.sub(userNewPoint.slope);  // old slope disappeared at this point\r\n                    slopeChanges[_newLocked.end] = newSlopeDelta;\r\n                }\r\n                // else: we recorded it already in oldSlopeDelta\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Deposits or creates a stake for a given address\r\n     * @param _addr User address to assign the stake\r\n     * @param _value Total units of StakingToken to lockup\r\n     * @param _unlockTime Time at which the stake should unlock\r\n     * @param _oldLocked Previous amount staked by this user\r\n     * @param _action See LockAction enum\r\n     */\r\n    function _depositFor(\r\n        address _addr,\r\n        uint256 _value,\r\n        uint256 _unlockTime,\r\n        LockedBalance memory _oldLocked,\r\n        LockAction _action\r\n    )\r\n        internal\r\n    {\r\n        LockedBalance memory newLocked = LockedBalance({amount: _oldLocked.amount, end: _oldLocked.end});\r\n\r\n        // Adding to existing lock, or if a lock is expired - creating a new one\r\n        newLocked.amount = newLocked.amount.add(int128(_value));\r\n        if(_unlockTime != 0){\r\n            newLocked.end = _unlockTime;\r\n        }\r\n        locked[_addr] = newLocked;\r\n\r\n        // Possibilities:\r\n        // Both _oldLocked.end could be current or expired (>/< block.timestamp)\r\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\r\n        // newLocked.end > block.timestamp (always)\r\n        _checkpoint(_addr, _oldLocked, newLocked);\r\n\r\n        if(_value != 0) {\r\n            stakingToken.safeTransferFrom(_addr, address(this), _value);\r\n        }\r\n\r\n        emit Deposit(_addr, _value, newLocked.end, _action, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Public function to trigger global checkpoint\r\n     */\r\n    function checkpoint() external {\r\n        LockedBalance memory empty;\r\n        _checkpoint(address(0), empty, empty);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new lock\r\n     * @param _value Total units of StakingToken to lockup\r\n     * @param _unlockTime Time at which the stake should unlock\r\n     */\r\n    function createLock(uint256 _value, uint256 _unlockTime)\r\n        external\r\n        nonReentrant\r\n        contractNotExpired\r\n        updateReward(msg.sender)\r\n    {\r\n        uint256 unlock_time = _floorToWeek(_unlockTime);  // Locktime is rounded down to weeks\r\n        LockedBalance memory locked_ = LockedBalance({amount: locked[msg.sender].amount, end: locked[msg.sender].end});\r\n\r\n        require(_value > 0, \"Must stake non zero amount\");\r\n        require(locked_.amount == 0, \"Withdraw old tokens first\");\r\n\r\n        require(unlock_time > block.timestamp, \"Can only lock until time in the future\");\r\n        require(unlock_time <= END, \"Voting lock can be 1 year max (until recol)\");\r\n\r\n        _depositFor(msg.sender, _value, unlock_time, locked_, LockAction.CREATE_LOCK);\r\n    }\r\n\r\n    /**\r\n     * @dev Increases amount of stake thats locked up & resets decay\r\n     * @param _value Additional units of StakingToken to add to exiting stake\r\n     */\r\n    function increaseLockAmount(uint256 _value)\r\n        external\r\n        nonReentrant\r\n        contractNotExpired\r\n        updateReward(msg.sender)\r\n    {\r\n        LockedBalance memory locked_ = LockedBalance({amount: locked[msg.sender].amount, end: locked[msg.sender].end});\r\n\r\n        require(_value > 0, \"Must stake non zero amount\");\r\n        require(locked_.amount > 0, \"No existing lock found\");\r\n        require(locked_.end > block.timestamp, \"Cannot add to expired lock. Withdraw\");\r\n\r\n        _depositFor(msg.sender, _value, 0, locked_, LockAction.INCREASE_LOCK_AMOUNT);\r\n    }\r\n\r\n    /**\r\n     * @dev Increases length of lockup & resets decay\r\n     * @param _unlockTime New unlocktime for lockup\r\n     */\r\n    function increaseLockLength(uint256 _unlockTime)\r\n        external\r\n        nonReentrant\r\n        contractNotExpired\r\n        updateReward(msg.sender)\r\n    {\r\n        LockedBalance memory locked_ = LockedBalance({amount: locked[msg.sender].amount, end: locked[msg.sender].end});\r\n        uint256 unlock_time = _floorToWeek(_unlockTime);  // Locktime is rounded down to weeks\r\n\r\n        require(locked_.amount > 0, \"Nothing is locked\");\r\n        require(locked_.end > block.timestamp, \"Lock expired\");\r\n        require(unlock_time > locked_.end, \"Can only increase lock WEEK\");\r\n        require(unlock_time <= END, \"Voting lock can be 1 year max (until recol)\");\r\n\r\n        _depositFor(msg.sender, 0, unlock_time, locked_, LockAction.INCREASE_LOCK_TIME);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws all the senders stake, providing lockup is over\r\n     */\r\n    function withdraw()\r\n        external\r\n    {\r\n        _withdraw(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws a given users stake, providing the lockup has finished\r\n     * @param _addr User for which to withdraw\r\n     */\r\n    function _withdraw(address _addr)\r\n        internal\r\n        nonReentrant\r\n        updateReward(_addr)\r\n    {\r\n        LockedBalance memory oldLock = LockedBalance({ end: locked[_addr].end, amount: locked[_addr].amount });\r\n        require(block.timestamp >= oldLock.end || expired, \"The lock didn't expire\");\r\n        require(oldLock.amount > 0, \"Must have something to withdraw\");\r\n\r\n        uint256 value = uint256(oldLock.amount);\r\n\r\n        LockedBalance memory currentLock = LockedBalance({end: 0, amount: 0});\r\n        locked[_addr] = currentLock;\r\n\r\n        // oldLocked can have either expired <= timestamp or zero end\r\n        // currentLock has only 0 end\r\n        // Both can have >= 0 amount\r\n        if(!expired){\r\n            _checkpoint(_addr, oldLock, currentLock);\r\n        }\r\n\r\n        stakingToken.safeTransfer(_addr, value);\r\n\r\n        emit Withdraw(_addr, value, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws and consequently claims rewards for the sender\r\n     */\r\n    function exit()\r\n        external\r\n    {\r\n        _withdraw(msg.sender);\r\n        claimReward();\r\n    }\r\n\r\n    /**\r\n     * @dev Ejects a user from the reward allocation, given their lock has freshly expired.\r\n     * Leave it to the user to withdraw and claim their rewards.\r\n     * @param _addr Address of the user\r\n     */\r\n    function eject(address _addr)\r\n        external\r\n        contractNotExpired\r\n        lockupIsOver(_addr)\r\n    {\r\n        _withdraw(_addr);\r\n\r\n        // solium-disable-next-line security/no-tx-origin\r\n        emit Ejected(_addr, tx.origin, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Ends the contract, unlocking all stakes.\r\n     * No more staking can happen. Only withdraw and Claim.\r\n     */\r\n    function expireContract()\r\n        external\r\n        onlyGovernor\r\n        contractNotExpired\r\n        updateReward(address(0))\r\n    {\r\n        require(block.timestamp > periodFinish, \"Period must be over\");\r\n\r\n        expired = true;\r\n\r\n        emit Expired();\r\n    }\r\n\r\n\r\n\r\n    /***************************************\r\n                    GETTERS\r\n    ****************************************/\r\n\r\n\r\n    /** @dev Floors a timestamp to the nearest weekly increment */\r\n    function _floorToWeek(uint256 _t)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return _t.div(WEEK).mul(WEEK);\r\n    }\r\n\r\n    /**\r\n     * @dev Uses binarysearch to find the most recent point history preceeding block\r\n     * @param _block Find the most recent point history before this block\r\n     * @param _maxEpoch Do not search pointHistories past this index\r\n     */\r\n    function _findBlockEpoch(uint256 _block, uint256 _maxEpoch)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // Binary search\r\n        uint256 min = 0;\r\n        uint256 max = _maxEpoch;\r\n        // Will be always enough for 128-bit numbers\r\n        for(uint256 i = 0; i < 128; i++){\r\n            if (min >= max)\r\n                break;\r\n            uint256 mid = (min.add(max).add(1)).div(2);\r\n            if (pointHistory[mid].blk <= _block){\r\n                min = mid;\r\n            } else {\r\n                max = mid.sub(1);\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * @dev Uses binarysearch to find the most recent user point history preceeding block\r\n     * @param _addr User for which to search\r\n     * @param _block Find the most recent point history before this block\r\n     */\r\n    function _findUserBlockEpoch(address _addr, uint256 _block)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 min = 0;\r\n        uint256 max = userPointEpoch[_addr];\r\n        for(uint256 i = 0; i < 128; i++) {\r\n            if(min >= max){\r\n                break;\r\n            }\r\n            uint256 mid = (min.add(max).add(1)).div(2);\r\n            if(userPointHistory[_addr][mid].blk <= _block){\r\n                min = mid;\r\n            } else {\r\n                max = mid.sub(1);\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets curent user voting weight (aka effectiveStake)\r\n     * @param _owner User for which to return the balance\r\n     * @return uint256 Balance of user\r\n     */\r\n    function balanceOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 epoch = userPointEpoch[_owner];\r\n        if(epoch == 0){\r\n            return 0;\r\n        }\r\n        Point memory lastPoint = userPointHistory[_owner][epoch];\r\n        lastPoint.bias = lastPoint.bias.sub(lastPoint.slope.mul(int128(block.timestamp.sub(lastPoint.ts))));\r\n        if(lastPoint.bias < 0) {\r\n            lastPoint.bias = 0;\r\n        }\r\n        return uint256(lastPoint.bias);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets a users votingWeight at a given blockNumber\r\n     * @param _owner User for which to return the balance\r\n     * @param _blockNumber Block at which to calculate balance\r\n     * @return uint256 Balance of user\r\n     */\r\n    function balanceOfAt(address _owner, uint256 _blockNumber)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_blockNumber <= block.number, \"Must pass block number in the past\");\r\n\r\n        // Get most recent user Point to block\r\n        uint256 userEpoch = _findUserBlockEpoch(_owner, _blockNumber);\r\n        if(userEpoch == 0){\r\n            return 0;\r\n        }\r\n        Point memory upoint = userPointHistory[_owner][userEpoch];\r\n\r\n        // Get most recent global Point to block\r\n        uint256 maxEpoch = globalEpoch;\r\n        uint256 epoch = _findBlockEpoch(_blockNumber, maxEpoch);\r\n        Point memory point0 = pointHistory[epoch];\r\n\r\n        // Calculate delta (block & time) between user Point and target block\r\n        // Allowing us to calculate the average seconds per block between\r\n        // the two points\r\n        uint256 dBlock = 0;\r\n        uint256 dTime = 0;\r\n        if(epoch < maxEpoch){\r\n            Point memory point1 = pointHistory[epoch.add(1)];\r\n            dBlock = point1.blk.sub(point0.blk);\r\n            dTime = point1.ts.sub(point0.ts);\r\n        } else {\r\n            dBlock = block.number.sub(point0.blk);\r\n            dTime = block.timestamp.sub(point0.ts);\r\n        }\r\n        // (Deterministically) Estimate the time at which block _blockNumber was mined\r\n        uint256 blockTime = point0.ts;\r\n        if(dBlock != 0) {\r\n            // blockTime += dTime * (_blockNumber - point0.blk) / dBlock;\r\n            blockTime = blockTime.add(dTime.mul(_blockNumber.sub(point0.blk)).div(dBlock));\r\n        }\r\n        // Current Bias = most recent bias - (slope * time since update)\r\n        upoint.bias = upoint.bias.sub(upoint.slope.mul(int128(blockTime.sub(upoint.ts))));\r\n        if(upoint.bias >= 0){\r\n            return uint256(upoint.bias);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates total supply of votingWeight at a given time _t\r\n     * @param _point Most recent point before time _t\r\n     * @param _t Time at which to calculate supply\r\n     * @return totalSupply at given point in time\r\n     */\r\n    function _supplyAt(Point memory _point, uint256 _t)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Point memory lastPoint = _point;\r\n        // Floor the timestamp to weekly interval\r\n        uint256 iterativeTime = _floorToWeek(lastPoint.ts);\r\n        // Iterate through all weeks between _point & _t to account for slope changes\r\n        for(uint256 i = 0; i < 255; i++){\r\n            iterativeTime = iterativeTime.add(WEEK);\r\n            int128 dSlope = 0;\r\n            // If week end is after timestamp, then truncate & leave dSlope to 0\r\n            if(iterativeTime > _t){\r\n                iterativeTime = _t;\r\n            }\r\n            // else get most recent slope change\r\n            else {\r\n                dSlope = slopeChanges[iterativeTime];\r\n            }\r\n\r\n            // lastPoint.bias -= lastPoint.slope * convert(iterativeTime - lastPoint.ts, int128)\r\n            lastPoint.bias = lastPoint.bias.sub(lastPoint.slope.mul(int128(iterativeTime.sub(lastPoint.ts))));\r\n            if(iterativeTime == _t){\r\n                break;\r\n            }\r\n            lastPoint.slope = lastPoint.slope.add(dSlope);\r\n            lastPoint.ts = iterativeTime;\r\n        }\r\n\r\n        if (lastPoint.bias < 0){\r\n            lastPoint.bias = 0;\r\n        }\r\n        return uint256(lastPoint.bias);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates current total supply of votingWeight\r\n     * @return totalSupply of voting token weight\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 epoch_ = globalEpoch;\r\n        Point memory lastPoint = pointHistory[epoch_];\r\n        return _supplyAt(lastPoint, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates total supply of votingWeight at a given blockNumber\r\n     * @param _blockNumber Block number at which to calculate total supply\r\n     * @return totalSupply of voting token weight at the given blockNumber\r\n     */\r\n    function totalSupplyAt(uint256 _blockNumber)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_blockNumber <= block.number, \"Must pass block number in the past\");\r\n\r\n        uint256 epoch = globalEpoch;\r\n        uint256 targetEpoch = _findBlockEpoch(_blockNumber, epoch);\r\n\r\n        Point memory point = pointHistory[targetEpoch];\r\n\r\n        // If point.blk > _blockNumber that means we got the initial epoch & contract did not yet exist\r\n        if(point.blk > _blockNumber){\r\n            return 0;\r\n        }\r\n\r\n        uint256 dTime = 0;\r\n        if(targetEpoch < epoch){\r\n            Point memory pointNext = pointHistory[targetEpoch.add(1)];\r\n            if(point.blk != pointNext.blk) {\r\n                dTime = (_blockNumber.sub(point.blk)).mul(pointNext.ts.sub(point.ts)).div(pointNext.blk.sub(point.blk));\r\n            }\r\n        } else if (point.blk != block.number){\r\n            dTime = (_blockNumber.sub(point.blk)).mul(block.timestamp.sub(point.ts)).div(block.number.sub(point.blk));\r\n        }\r\n        // Now dTime contains info on how far are we beyond point\r\n\r\n        return _supplyAt(point, point.ts.add(dTime));\r\n    }\r\n\r\n\r\n    /***************************************\r\n                    REWARDS\r\n    ****************************************/\r\n\r\n    /** @dev Updates the reward for a given address, before executing function */\r\n    modifier updateReward(address _account) {\r\n        // Setting of global vars\r\n        uint256 newRewardPerToken = rewardPerToken();\r\n        // If statement protects against loss in initialisation case\r\n        if(newRewardPerToken > 0) {\r\n            rewardPerTokenStored = newRewardPerToken;\r\n            lastUpdateTime = lastTimeRewardApplicable();\r\n            // Setting of personal vars based on new globals\r\n            if (_account != address(0)) {\r\n                rewards[_account] = earned(_account);\r\n                userRewardPerTokenPaid[_account] = newRewardPerToken;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Claims outstanding rewards for the sender.\r\n     * First updates outstanding reward allocation and then transfers.\r\n     */\r\n    function claimReward()\r\n        public\r\n        updateReward(msg.sender)\r\n    {\r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            stakingToken.safeTransfer(msg.sender, reward);\r\n            rewardsPaid[msg.sender] = rewardsPaid[msg.sender].add(reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n\r\n    /***************************************\r\n                REWARDS - GETTERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Gets the most recent Static Balance (bias) for a user\r\n     * @param _addr User for which to retrieve static balance\r\n     * @return uint256 balance\r\n     */\r\n    function staticBalanceOf(address _addr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 uepoch = userPointEpoch[_addr];\r\n        if(uepoch == 0 || userPointHistory[_addr][uepoch].bias == 0){\r\n            return 0;\r\n        }\r\n        return _staticBalance(userPointHistory[_addr][uepoch].slope, userPointHistory[_addr][uepoch].ts, locked[_addr].end);\r\n    }\r\n\r\n    function _staticBalance(int128 _slope, uint256 _startTime, uint256 _endTime)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if(_startTime > _endTime) return 0;\r\n        // get lockup length (end - point.ts)\r\n        uint256 lockupLength = _endTime.sub(_startTime);\r\n        // s = amount * sqrt(length)\r\n        uint256 s = uint256(_slope.mul(10000)).mul(Root.sqrt(lockupLength));\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the RewardsToken\r\n     */\r\n    function getRewardToken()\r\n        external\r\n        view\r\n        returns (IERC20)\r\n    {\r\n        return stakingToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the duration of the rewards period\r\n     */\r\n    function getDuration()\r\n        external\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return WEEK;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the last applicable timestamp for this reward period\r\n     */\r\n    function lastTimeRewardApplicable()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return StableMath.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of unclaimed rewards per token since last update,\r\n     * and sums with stored to give the new cumulative reward per token\r\n     * @return 'Reward' per staked token\r\n     */\r\n    function rewardPerToken()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // If there is no StakingToken liquidity, avoid div(0)\r\n        uint256 totalStatic = totalStaticWeight;\r\n        if (totalStatic == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        // new reward units to distribute = rewardRate * timeSinceLastUpdate\r\n        uint256 rewardUnitsToDistribute = rewardRate.mul(lastTimeRewardApplicable().sub(lastUpdateTime));\r\n        // new reward units per token = (rewardUnitsToDistribute * 1e18) / totalTokens\r\n        uint256 unitsToDistributePerToken = rewardUnitsToDistribute.divPrecisely(totalStatic);\r\n        // return summed rate\r\n        return rewardPerTokenStored.add(unitsToDistributePerToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of unclaimed rewards a user has earned\r\n     * @param _addr User address\r\n     * @return Total reward amount earned\r\n     */\r\n    function earned(address _addr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // current rate per token - rate user previously received\r\n        uint256 userRewardDelta = rewardPerToken().sub(userRewardPerTokenPaid[_addr]);\r\n        // new reward = staked tokens * difference in rate\r\n        uint256 userNewReward = staticBalanceOf(_addr).mulTruncate(userRewardDelta);\r\n        // add to previous rewards\r\n        return rewards[_addr].add(userNewReward);\r\n    }\r\n\r\n\r\n    /***************************************\r\n                REWARDS - ADMIN\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Notifies the contract that new rewards have been added.\r\n     * Calculates an updated rewardRate based on the rewards in period.\r\n     * @param _reward Units of RewardToken that have been added to the pool\r\n     */\r\n    function notifyRewardAmount(uint256 _reward)\r\n        external\r\n        onlyRewardsDistributor\r\n        contractNotExpired\r\n        updateReward(address(0))\r\n    {\r\n        uint256 currentTime = block.timestamp;\r\n        // If previous period over, reset rewardRate\r\n        if (currentTime >= periodFinish) {\r\n            rewardRate = _reward.div(WEEK);\r\n        }\r\n        // If additional reward to existing period, calc sum\r\n        else {\r\n            uint256 remaining = periodFinish.sub(currentTime);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = _reward.add(leftover).div(WEEK);\r\n        }\r\n\r\n        lastUpdateTime = currentTime;\r\n        periodFinish = currentTime.add(WEEK);\r\n\r\n        emit RewardAdded(_reward);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IncentivisedVotingLockup.LockAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ejected\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ejector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Ejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Expired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"eject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"expireContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLastUserPoint\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseLockAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseLockLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"staticBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaticWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IncentivisedVotingLockup","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000afce80b19a8ce13dec0739a1aab7a028d6845eb300000000000000000000000004dfdfa471b79cc9e6e8c355e6c71f8ec4916c50000000000000000000000000000000000000000000000000000000000000000a566f74696e67204d5441000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004764d544100000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://85e3f238d32bc335c149534b55f8b5ad9f7f0a75e0f25845c4d0885cf356b13a"}]}