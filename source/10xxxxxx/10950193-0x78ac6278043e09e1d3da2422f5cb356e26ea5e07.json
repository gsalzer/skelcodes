{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the a\r\n     * specified account.\r\n     * @param initalOwner The address of the inital owner.\r\n     */\r\n    constructor(address initalOwner) internal {\r\n        _owner = initalOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Only owner can call\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Owner should not be 0 address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/TokenPool.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n/**\r\n * @title A simple holder of tokens.\r\n * This is a simple contract to hold tokens. It's useful in the case where a separate contract\r\n * needs to hold multiple distinct pools of the same token.\r\n */\r\ncontract TokenPool is Ownable {\r\n    IERC20 public token;\r\n\r\n    constructor(IERC20 _token) Ownable(msg.sender) public {\r\n        token = _token;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external onlyOwner returns (bool) {\r\n        return token.transfer(to, value);\r\n    }\r\n}\r\n\r\n// File: contracts/AbstractStaking.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Abstract Staking\r\n * @dev Skeleton of the staking pool for user to stake Balancer BPT token and get bella as reward.\r\n */\r\nabstract contract AbstractStaking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Unstaked(address indexed user, uint256 amount);\r\n    event Claimed(address indexed user, uint256 amount);\r\n\r\n    TokenPool public stakingPool;\r\n    TokenPool public lockedPool;\r\n    TokenPool public unlockedPool;\r\n\r\n    uint256 public startTime;\r\n\r\n    //\r\n    // Global state\r\n    //\r\n    uint256 public totalStakingAmount;\r\n    uint256 public totalStakingAmountTime; // total time * amount staked\r\n    uint256 public lastUpdatedTimestamp;\r\n\r\n    //\r\n    // Addional bella locking related\r\n    //\r\n    uint256 public currentUnlockCycle; // linear count down to release bella token\r\n    uint256 public lastUnlockTime;\r\n\r\n    /**\r\n     * @param stakingBPT The BPT token users deposit as stake.\r\n     * @param bellaToken The bonus token is bella.\r\n     * @param admin The admin address\r\n     * @param _startTime Timestamp that user can stake\r\n     */\r\n    constructor(\r\n        IERC20 stakingBPT,\r\n        IERC20 bellaToken,\r\n        address admin,\r\n        uint256 _startTime\r\n        ) Ownable(admin) \r\n        internal {\r\n        stakingPool = new TokenPool(stakingBPT);\r\n        lockedPool = new TokenPool(bellaToken);\r\n        unlockedPool = new TokenPool(bellaToken);\r\n        startTime = _startTime;\r\n    }\r\n\r\n    /**\r\n     * @return The user's total staking BPT amount\r\n     */\r\n    function totalStakedFor(address user) public view virtual returns (uint256);\r\n\r\n    function totalStaked() public view returns (uint256) {\r\n        return totalStakingAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Stake for the user self\r\n     * @param amount The amount of BPT tokens that the user wishes to stake\r\n     */\r\n    function stake(uint256 amount) external {\r\n        require(!Address.isContract(msg.sender), \"No harvest thanks\");\r\n        require(now >= startTime, \"not started yet\");\r\n        _stake(msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @return User's total rewards when clamining\r\n     */\r\n    function totalRewards() external view returns (uint256) {\r\n        return _totalRewardsFor(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return A specific user's total rewards when clamining\r\n     */\r\n    function totalRewardsFor(address user) external view returns (uint256) {\r\n        return _totalRewardsFor(user);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim=withdraw all the bella rewards\r\n     */\r\n    function claim() external {\r\n        require(!Address.isContract(msg.sender), \"No harvest thanks\");\r\n        // cumulate user and global time*amount\r\n        _updateTotalStaking(0);\r\n        _updateUserStaking(0, msg.sender);\r\n\r\n        _poolUnlock();\r\n\r\n        uint256 reward = _calculateRewardAndBurnAll(msg.sender);\r\n\r\n        unlockedPool.transfer(msg.sender, reward);\r\n\r\n        emit Claimed(msg.sender, reward);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim=withdraw all the bella rewards and the staking BPT token,\r\n     * which stops the user's staking\r\n     */\r\n    function claimAndUnstake() external {\r\n        require(!Address.isContract(msg.sender), \"No harvest thanks\");\r\n        // cumulate user and global time*amount\r\n        _updateTotalStaking(0);\r\n        _updateUserStaking(0, msg.sender);\r\n\r\n        _poolUnlock();\r\n\r\n        (uint256 staking, uint256 reward) = _calculateRewardAndCleanUser(msg.sender);\r\n\r\n        unlockedPool.transfer(msg.sender, reward);\r\n        stakingPool.transfer(msg.sender, staking);\r\n\r\n        emit Claimed(msg.sender, reward);\r\n        emit Unstaked(msg.sender, staking);\r\n    }\r\n\r\n    /**\r\n     * @dev we will lock more bella tokens on the begining of the next releasing cycle\r\n     * @param amount the amount of bella token to lock\r\n     * @param nextUnlockCycle next reward releasing cycle, unit=day\r\n     */\r\n    function lock(uint256 amount, uint256 nextUnlockCycle) external onlyOwner {\r\n        currentUnlockCycle = nextUnlockCycle * 1 days;\r\n        if (now >= startTime) {\r\n            lastUnlockTime = now;\r\n        } else {\r\n            lastUnlockTime = startTime;\r\n        }\r\n            \r\n        require(\r\n            lockedPool.token().transferFrom(msg.sender, address(lockedPool), amount),\r\n            \"Additional bella transfer failed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Actual logic to handle user staking\r\n     * @param from The user who pays the staking BPT\r\n     * @param beneficiary The user who actually controls the staking BPT\r\n     * @param amount The amount of BPT tokens to stake\r\n     */\r\n    function _stake(address from, address beneficiary, uint256 amount) private {\r\n        require(amount > 0, \"can not stake 0 token\");\r\n        require(\r\n            stakingPool.token().transferFrom(from, address(stakingPool), amount),\r\n            \"Staking BPT transfer failed\"\r\n        );\r\n\r\n        _updateUserStaking(amount, beneficiary);\r\n\r\n        _updateTotalStaking(amount);\r\n\r\n        emit Staked(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the global state due to more time cumulated and/or new BPT staking token\r\n     * @param amount New BPT staking deposited (can be 0)\r\n     */\r\n    function _updateTotalStaking(uint256 amount) private {\r\n        uint256 additionalAmountTime = totalStakingAmount.mul(now.sub(lastUpdatedTimestamp));\r\n        totalStakingAmount = totalStakingAmount.add(amount);\r\n        totalStakingAmountTime = totalStakingAmountTime.add(additionalAmountTime);\r\n        lastUpdatedTimestamp = now;\r\n    }\r\n\r\n    /**\r\n     * @dev Update a specific user's state due to more time cumulated and/or new BPT staking token\r\n     * @param amount New BPT staking deposited (can be 0)\r\n     * @param user The account to be updated\r\n     */\r\n    function _updateUserStaking(uint256 amount, address user) internal virtual;\r\n\r\n    /**\r\n     * @dev linear count down from 30 days to release bella token,\r\n     * from the locked pool to the unlocked pool\r\n     */\r\n    function _poolUnlock() private {\r\n        if (currentUnlockCycle == 0)\r\n            return; // release ended\r\n        uint256 timeDelta = now.sub(lastUnlockTime);\r\n        if (currentUnlockCycle < timeDelta)\r\n            currentUnlockCycle = timeDelta; // release all\r\n\r\n        uint256 amount = lockedPool.balance().mul(timeDelta).div(currentUnlockCycle);\r\n\r\n        currentUnlockCycle = currentUnlockCycle.sub(timeDelta);\r\n        lastUnlockTime = now;\r\n\r\n        lockedPool.transfer(address(unlockedPool), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate user's total cumulated reward and burn his/her all staking amount*time\r\n     * @return User cumulated reward bella during the staking process\r\n     */\r\n    function _calculateRewardAndBurnAll(address user) internal virtual returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculate user's total cumulated reward and staking,\r\n     * and remove him/her from the staking process\r\n     * @return [1] User cumulated staking BPT\r\n     * @return [2] User cumulated reward bella during the staking process\r\n     */\r\n    function _calculateRewardAndCleanUser(address user) internal virtual returns (uint256, uint256);\r\n\r\n    /**\r\n     * @dev Internal function to calculate user's total rewards\r\n     * @return A specific user's total rewards when clamining\r\n     */\r\n    function _totalRewardsFor(address user) internal view virtual returns (uint256);\r\n    \r\n}\r\n\r\n// File: contracts/LinearStaking.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n/**\r\n * @title Linear Staking\r\n * @dev A staking pool for user to stake Balancer BPT token and get bella as reward.\r\n * The reward is always proportional to the amount*time of the staking.\r\n * The reward is added by the admin at the 0th, 30th and 60th day, respectively.\r\n */\r\ncontract LinearStaking is AbstractStaking {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address=>Staking) public stakingInfo;\r\n\r\n    struct Staking {\r\n        uint256 amount;\r\n        uint256 totalAmountTime; // staking amount*time\r\n        uint256 lastUpdatedTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @param stakingBPT The BPT token users deposit as stake.\r\n     * @param bellaToken The bonus token is bella.\r\n     * @param admin The admin address\r\n     * @param _startTime Timestamp that user can stake\r\n     */\r\n    constructor(\r\n        IERC20 stakingBPT,\r\n        IERC20 bellaToken,\r\n        address admin,\r\n        uint256 _startTime\r\n        ) AbstractStaking(\r\n            stakingBPT,\r\n            bellaToken,\r\n            admin,\r\n            _startTime\r\n        ) public {}\r\n\r\n    /**\r\n     * @return The user's total staking BPT amount\r\n     */\r\n    function totalStakedFor(address user) public view override returns (uint256) {\r\n        return stakingInfo[user].amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Update a specific user's state due to more time cumulated and/or new BPT staking token\r\n     * @param amount New BPT staking deposited (can be 0)\r\n     * @param user The account to be updated\r\n     */\r\n    function _updateUserStaking(uint256 amount, address user) internal override {\r\n        Staking memory userInfo = stakingInfo[user];\r\n        uint256 additionalAmountTime = userInfo.amount.mul(now.sub(userInfo.lastUpdatedTimestamp));\r\n        userInfo.totalAmountTime = userInfo.totalAmountTime.add(additionalAmountTime);\r\n        userInfo.amount = userInfo.amount.add(amount);\r\n        userInfo.lastUpdatedTimestamp = now;\r\n        stakingInfo[user] = userInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate user's total cumulated reward and burn his/her all staking amount*time\r\n     * @return User cumulated reward bella during the staking process\r\n     */\r\n    function _calculateRewardAndBurnAll(address user) internal override returns (uint256) {\r\n        Staking memory userInfo = stakingInfo[user];\r\n        uint256 reward = unlockedPool.balance().mul(userInfo.totalAmountTime).div(totalStakingAmountTime);\r\n\r\n        totalStakingAmountTime = totalStakingAmountTime.sub(userInfo.totalAmountTime);\r\n\r\n        stakingInfo[user].totalAmountTime = 0;\r\n\r\n        return reward;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate user's total cumulated reward and staking,\r\n     * and remove him/her from the staking process\r\n     * @return [1] User cumulated staking BPT\r\n     * @return [2] User cumulated reward bella during the staking process\r\n     */\r\n    function _calculateRewardAndCleanUser(address user) internal override returns (uint256, uint256) {\r\n        Staking memory userInfo = stakingInfo[user];\r\n        uint256 reward = unlockedPool.balance().mul(userInfo.totalAmountTime).div(totalStakingAmountTime);\r\n        uint256 staking = userInfo.amount;\r\n\r\n        totalStakingAmountTime = totalStakingAmountTime.sub(userInfo.totalAmountTime);\r\n        totalStakingAmount = totalStakingAmount.sub(userInfo.amount);\r\n\r\n        delete stakingInfo[user];\r\n\r\n        return (staking, reward);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to calculate user's total rewards\r\n     * @return A specific user's total rewards when clamining\r\n     */\r\n    function _totalRewardsFor(address user) internal view override returns (uint256) {\r\n\r\n        // calculate new total staking amount*time\r\n        uint256 additionalAmountTime = totalStakingAmount.mul(now.sub(lastUpdatedTimestamp));\r\n        uint256 newTotalStakingAmountTime = totalStakingAmountTime.add(additionalAmountTime);\r\n\r\n        // calculate new user staking\r\n        Staking memory userInfo = stakingInfo[user];\r\n        uint256 additionalUserAmountTime = userInfo.amount.mul(now.sub(userInfo.lastUpdatedTimestamp));\r\n        uint256 newUserTotalAmountTime = userInfo.totalAmountTime.add(additionalUserAmountTime);\r\n\r\n        // calculate total unlocked pool\r\n        uint256 unlockedAmount = unlockedPool.balance();\r\n        if (currentUnlockCycle != 0) {\r\n            uint256 timeDelta = now.sub(lastUnlockTime);\r\n            if (currentUnlockCycle < timeDelta) {\r\n                unlockedAmount = unlockedAmount.add(lockedPool.balance());\r\n            } else {\r\n                uint256 additionalAmount = lockedPool.balance().mul(timeDelta).div(currentUnlockCycle);\r\n                unlockedAmount = unlockedAmount.add(additionalAmount);\r\n            }\r\n        }\r\n\r\n        uint256 reward = unlockedAmount.mul(newUserTotalAmountTime).div(newTotalStakingAmountTime); \r\n        return reward;       \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingBPT\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"bellaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentUnlockCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextUnlockCycle\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPool\",\"outputs\":[{\"internalType\":\"contract TokenPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"contract TokenPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalRewardsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingAmountTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedPool\",\"outputs\":[{\"internalType\":\"contract TokenPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LinearStaking","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009f624b25991b99d7b14d6740a9d581dd77980808000000000000000000000000a91ac63d040deb1b7a5e4d4134ad23eb0ba07e14000000000000000000000000b489a4b302928795e4a1fab67f5d6ceeb8a25818000000000000000000000000000000000000000000000000000000005f71cde8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://04050d0326c6706f7c04fbc0932fb572ce2e661fbc79cb5fb8bfff10f123b767"}]}