{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.9;\r\n\r\n/**\r\n * https://heart.finance\r\n **/\r\n\r\ncontract Heart {\r\n\r\n\tuint256 constant private SUPPLY = 1000000 * (10 ** 18) ; // 1,000,000\r\n\r\n\tstring constant public name = \"Heart\";\r\n\tstring constant public symbol = \"HEART\";\r\n\tuint8 constant public decimals = 18;\r\n\r\n\tstruct User {\r\n\t\tbool whitelisted;\r\n\t\tuint256 balance;\r\n\t\tuint256 staked;\r\n\t\tmapping(address => uint256) allowance;\r\n\t\tint256 scaledPayout;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 totalStaked;\r\n\t\tmapping(address => User) users;\r\n\t\tuint256 scaledPayoutPerToken;\r\n\t\taddress admin;\r\n\t}\r\n\r\n\tInfo private info;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\tevent Whitelist(address indexed user, bool status);\r\n\tevent Stake(address indexed owner, uint256 tokens);\r\n\tevent Unstake(address indexed owner, uint256 tokens);\r\n\tevent Collect(address indexed owner, uint256 tokens);\r\n\tevent Fee(uint256 tokens);\r\n\r\n\tconstructor() public {\r\n\t\tinfo.admin = msg.sender;\r\n\t\tinfo.totalSupply = SUPPLY;\r\n\t\tinfo.users[msg.sender].balance = SUPPLY;\r\n\t\temit Transfer(address(0x0), msg.sender, SUPPLY);\r\n\t\twhitelist(msg.sender, true);\r\n\t}\r\n\r\n\tfunction stake(uint256 _tokens) external {\r\n\t\t_stake(_tokens);\r\n\t}\r\n\r\n\tfunction unstake(uint256 _tokens) external {\r\n\t\t_unstake(_tokens);\r\n\t}\r\n\r\n\tfunction collect() external returns (uint256) {\r\n\t\tuint256 _dividends = dividendsOf(msg.sender);\r\n\t\trequire(_dividends >= 0);\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_dividends * TXFEE);\r\n\t\tinfo.users[msg.sender].balance += _dividends;\r\n\t\temit Transfer(address(this), msg.sender, _dividends);\r\n\t\temit Collect(msg.sender, _dividends);\r\n\t\treturn _dividends;\r\n\t}\r\n\r\n    function stakeDrop(uint256 _tokens) external {\r\n\t\trequire(balanceOf(msg.sender) >= _tokens);\r\n\t\tuint256 _droppedAmount = _tokens;\r\n        info.users[msg.sender].balance -= _tokens;\r\n\t\tif (info.totalStaked > 0) {\r\n\t\t\tinfo.scaledPayoutPerToken += _droppedAmount * TXFEE / info.totalStaked;\r\n\t\t\temit Transfer(msg.sender, address(this), _droppedAmount);\r\n            emit Fee(_droppedAmount);\r\n\t\t}else{\r\n            revert();\r\n        }\r\n\t}\r\n\r\n\tfunction distribute(uint256 _tokens) external {\r\n\t\trequire(info.totalStaked > 0);\r\n\t\trequire(balanceOf(msg.sender) >= _tokens);\r\n\t\tinfo.users[msg.sender].balance -= _tokens;\r\n\t\tinfo.scaledPayoutPerToken += _tokens * TXFEE / info.totalStaked;\r\n\t\temit Transfer(msg.sender, address(this), _tokens);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t_transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\r\n\t\tuint256 _transferred = _transfer(msg.sender, _to, _tokens);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Callable(_to).tokenCallback(msg.sender, _transferred, _data));\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction bulkTransfer(address[] calldata _receivers, uint256[] calldata _amounts) external {\r\n\t\trequire(_receivers.length == _amounts.length);\r\n\t\tfor (uint256 i = 0; i < _receivers.length; i++) {\r\n\t\t\t_transfer(msg.sender, _receivers[i], _amounts[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction whitelist(address _user, bool _status) public {\r\n\t\trequire(msg.sender == info.admin);\r\n\t\tinfo.users[_user].whitelisted = _status;\r\n\t\temit Whitelist(_user, _status);\r\n\t}\r\n\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction totalStaked() public view returns (uint256) {\r\n\t\treturn info.totalStaked;\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance - stakedOf(_user);\r\n\t}\r\n\r\n\tfunction stakedOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].staked;\r\n\t}\r\n\r\n\tfunction dividendsOf(address _user) public view returns (uint256) {\r\n\t\treturn uint256(int256(info.scaledPayoutPerToken * info.users[_user].staked) - info.users[_user].scaledPayout) / TXFEE;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction isWhitelisted(address _user) public view returns (bool) {\r\n\t\treturn info.users[_user].whitelisted;\r\n\t}\r\n\r\n\tfunction allInfoFor(address _user) public view returns (uint256 totalTokenSupply, uint256 totalTokensStaked, uint256 userBalance, uint256 userStaked, uint256 userDividends) {\r\n\t\treturn (totalSupply(), totalStaked(), balanceOf(_user), stakedOf(_user), dividendsOf(_user));\r\n\t}\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\tinfo.users[_from].balance -= _tokens;\r\n        uint256 _feeAmount = _tokens * 3 / 100;\r\n        uint256 _transferred = _tokens - _feeAmount;\r\n        if (info.totalStaked > 0) {\r\n            info.users[_to].balance += _transferred;\r\n            emit Transfer(_from, _to, _transferred);\r\n            info.scaledPayoutPerToken += _feeAmount * TXFEE / info.totalStaked;\r\n            emit Transfer(_from, address(this), _feeAmount);\r\n            emit Fee(_feeAmount);\r\n            return _transferred;\r\n        }else {\r\n            info.users[_to].balance += _tokens;\r\n            emit Transfer(_from, _to, _tokens);\r\n            return _tokens;\r\n        }\r\n    }\r\n\r\n\tfunction _stake(uint256 _amount) internal {\r\n\t\trequire(balanceOf(msg.sender) >= _amount);\r\n\t\trequire(stakedOf(msg.sender) + _amount >= uint256(1e19));\r\n\t\tinfo.totalStaked += _amount;\r\n\t\tinfo.users[msg.sender].staked += _amount;\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken);\r\n\t\temit Transfer(msg.sender, address(this), _amount);\r\n\t\temit Stake(msg.sender, _amount);\r\n\t}\r\n\r\n    function _unstake(uint256 _amount) internal {\r\n\t\trequire(stakedOf(msg.sender) >= _amount);\r\n\t\tuint256 _feeAmount = _amount * 10 / 100;\r\n\t\tinfo.scaledPayoutPerToken += _feeAmount * TXFEE / info.totalStaked;\r\n\t\tinfo.totalStaked -= _amount;\r\n\t\tinfo.users[msg.sender].balance -= _feeAmount;\r\n\t\tinfo.users[msg.sender].staked -= _amount;\r\n\t\tinfo.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);\r\n\t\temit Transfer(address(this), msg.sender, _amount - _feeAmount);\r\n\t\temit Unstake(msg.sender, _amount);\r\n\t}\r\n\r\n    uint256 constant private TXFEE = 1**64;\r\n\tuint256 constant private STAKING_FEE = 3;\r\n    \r\n}\r\n\r\ninterface Callable {\r\n\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allInfoFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"stakeDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Heart","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c8c12f9cb0df0c6827e5916520fbd9bf13b419a2c4c17b8288eb093fda15dcc4"}]}