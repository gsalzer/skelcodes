{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/interfaces/SyscoinERC20I.sol\n\npragma solidity ^0.5.13;\n\n\ncontract SyscoinERC20I is IERC20 {\n    function decimals() external view returns (uint8);\n}\n\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.6.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: contracts/token/SyscoinERC20Manager.sol\n\npragma solidity ^0.5.13;\n\n\n\n\ncontract SyscoinERC20Manager is Initializable {\n    using SafeMath for uint;\n    using SafeMath for uint8;\n\n    // Lock constants\n    uint private constant MIN_LOCK_VALUE = 10; // 0.1 token\n    uint private constant SUPERBLOCK_SUBMITTER_LOCK_FEE = 10000; // 10000 = 0.01%\n    uint private constant MIN_CANCEL_DEPOSIT = 3000000000000000000; // 3 eth\n    uint private constant CANCEL_TRANSFER_TIMEOUT = 3600; // 1 hour in seconds\n    uint private constant CANCEL_MINT_TIMEOUT = 907200; // 1.5 weeks in seconds\n    // Variables set by constructor\n\n    // Contract to trust for tx included in a syscoin block verification.\n    // Only syscoin txs relayed from trustedRelayerContract will be accepted.\n    address public trustedRelayerContract;\n\n\n    mapping(uint32 => uint256) public assetBalances;\n    // Syscoin transactions that were already processed by processTransaction()\n    mapping(uint => bool) private syscoinTxHashesAlreadyProcessed;\n\n    uint32 bridgeTransferIdCount;\n    \n    enum BridgeTransferStatus { Uninitialized, Ok, CancelRequested, CancelChallenged, CancelOk }\n    \n    struct BridgeTransfer {\n        uint timestamp;\n        uint value;\n        address erc20ContractAddress;\n        address tokenFreezerAddress;\n        uint32 assetGUID;\n        BridgeTransferStatus status;           \n    }\n\n    mapping(uint32 => BridgeTransfer) private bridgeTransfers;\n    mapping(uint32 => uint) private deposits;\n\n    // network that the stored blocks belong to\n    enum Network { MAINNET, TESTNET, REGTEST }\n    Network private net;\n\n    event TokenUnfreeze(address receipient, uint value);\n    event TokenUnfreezeFee(address receipient, uint value);\n    event TokenFreeze(address freezer, uint value, uint32 bridgetransferid);\n    event CancelTransferRequest(address canceller, uint32 bridgetransferid);\n    event CancelTransferSucceeded(address canceller, uint32 bridgetransferid);\n    event CancelTransferFailed(address canceller, uint32 bridgetransferid);\n\n    struct AssetRegistryItem {\n        address erc20ContractAddress;\n        uint32 height;     \n    }\n    mapping(uint32 => AssetRegistryItem) public assetRegistry;\n    event TokenRegistry(uint32 assetGuid, address erc20ContractAddress);\n    using SafeERC20 for SyscoinERC20I;\n    function contains(uint value) private view returns (bool) {\n        return syscoinTxHashesAlreadyProcessed[value];\n    }\n\n    function insert(uint value) private returns (bool) {\n        if (contains(value))\n            return false; // already there\n        syscoinTxHashesAlreadyProcessed[value] = true;\n        return true;\n    }\n    \n    function init(Network _network, address _trustedRelayerContract) public initializer {\n        net = _network;\n        trustedRelayerContract = _trustedRelayerContract;\n        bridgeTransferIdCount = 0;\n    }\n\n    modifier onlyTrustedRelayer() {\n        require(msg.sender == trustedRelayerContract, \"Call must be from trusted relayer\");\n        _;\n    }\n\n    modifier minimumValue(address erc20ContractAddress, uint value) {\n        uint256 decimals = SyscoinERC20I(erc20ContractAddress).decimals();\n        require(\n            value >= (uint256(10) ** decimals).div(MIN_LOCK_VALUE),\n            \"Value must be bigger or equal MIN_LOCK_VALUE\"\n        );\n        _;\n    }\n\n    function requireMinimumValue(uint8 decimalsIn, uint value) private pure {\n        uint256 decimals = uint256(decimalsIn);\n        require(value > 0, \"Value must be positive\");\n        require(\n            value >= (uint256(10) ** decimals).div(MIN_LOCK_VALUE),\n            \"Value must be bigger or equal MIN_LOCK_VALUE\"\n        );\n        \n    }\n\n    function wasSyscoinTxProcessed(uint txHash) public view returns (bool) {\n        return contains(txHash);\n    }\n\n    function processTransaction(\n        uint txHash,\n        uint value,\n        address destinationAddress,\n        address superblockSubmitterAddress,\n        address erc20ContractAddress,\n        uint32 assetGUID,\n        uint8 precision\n    ) public onlyTrustedRelayer {\n        SyscoinERC20I erc20 = SyscoinERC20I(erc20ContractAddress);\n        uint8 nLocalPrecision = erc20.decimals();\n        // see issue #372 on syscoin\n        if(nLocalPrecision > precision){\n            value *= uint(10)**(uint(nLocalPrecision - precision));\n        }else if(nLocalPrecision < precision){\n            value /= uint(10)**(uint(precision - nLocalPrecision));\n        }\n        requireMinimumValue(nLocalPrecision, value);\n        // Add tx to the syscoinTxHashesAlreadyProcessed and Check tx was not already processed\n        require(insert(txHash), \"TX already processed\");\n\n\n        assetBalances[assetGUID] = assetBalances[assetGUID].sub(value);\n\n        uint superblockSubmitterFee = value.div(SUPERBLOCK_SUBMITTER_LOCK_FEE);\n        uint userValue = value.sub(superblockSubmitterFee);\n\n        // pay the fee\n        erc20.safeTransfer(superblockSubmitterAddress, superblockSubmitterFee);\n        emit TokenUnfreezeFee(superblockSubmitterAddress, superblockSubmitterFee);\n\n        // get your token\n        erc20.safeTransfer(destinationAddress, userValue);\n        emit TokenUnfreeze(destinationAddress, userValue);\n    }\n\n    function processAsset(\n        uint _txHash,\n        uint32 _assetGUID,\n        uint32 _height,\n        address _erc20ContractAddress\n    ) public onlyTrustedRelayer {\n        // ensure height increases over asset updates\n        require(assetRegistry[_assetGUID].height < _height, \"Height must increase when updating asset registry\");\n        // Add tx to the syscoinTxHashesAlreadyProcessed and Check tx was not already processed\n        require(insert(_txHash), \"TX already processed\");\n        assetRegistry[_assetGUID] = AssetRegistryItem({erc20ContractAddress:_erc20ContractAddress, height:_height});\n        emit TokenRegistry(_assetGUID, _erc20ContractAddress);\n    }\n    \n    function cancelTransferRequest(uint32 bridgeTransferId) public payable {\n        // lookup state by bridgeTransferId\n        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];\n        // ensure state is Ok\n        require(bridgeTransfer.status == BridgeTransferStatus.Ok,\n            \"#SyscoinERC20Manager cancelTransferRequest(): Status of bridge transfer must be Ok\");\n        // ensure msg.sender is same as tokenFreezerAddress\n        // we don't have to do this but we do it anyway so someone can't accidentily cancel a transfer they did not make\n        require(msg.sender == bridgeTransfer.tokenFreezerAddress, \"#SyscoinERC20Manager cancelTransferRequest(): Only msg.sender is allowed to cancel\");\n        // if freezeBurnERC20 was called less than 1.5 weeks ago then return error\n        // 0.5 week buffer since only 1 week of blocks are allowed to pass before cannot mint on sys\n        require((block.timestamp - bridgeTransfer.timestamp) > (net == Network.MAINNET? CANCEL_MINT_TIMEOUT: 36000), \"#SyscoinERC20Manager cancelTransferRequest(): Transfer must be at least 1.5 week old\");\n        // ensure min deposit paid\n        require(msg.value >= MIN_CANCEL_DEPOSIT,\n            \"#SyscoinERC20Manager cancelTransferRequest(): Cancel deposit incorrect\");\n        deposits[bridgeTransferId] = msg.value;\n        // set height for cancel time begin to enforce a delay to wait for challengers\n        bridgeTransfer.timestamp = block.timestamp;\n        // set state of bridge transfer to CancelRequested\n        bridgeTransfer.status = BridgeTransferStatus.CancelRequested;\n        emit CancelTransferRequest(msg.sender, bridgeTransferId);\n    }\n\n    function cancelTransferSuccess(uint32 bridgeTransferId) public {\n        // lookup state by bridgeTransferId\n        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];\n        // ensure state is CancelRequested to avoid people trying to claim multiple times \n        // and that it has to be on an active cancel request\n        require(bridgeTransfer.status == BridgeTransferStatus.CancelRequested,\n            \"#SyscoinERC20Manager cancelTransferSuccess(): Status must be CancelRequested\");\n        // check if timeout period passed (atleast 1 hour of blocks have to have passed)\n        require((block.timestamp - bridgeTransfer.timestamp) > CANCEL_TRANSFER_TIMEOUT, \"#SyscoinERC20Manager cancelTransferSuccess(): 1 hour timeout is required\");\n        // set state of bridge transfer to CancelOk\n        bridgeTransfer.status = BridgeTransferStatus.CancelOk;\n        // refund erc20 to the tokenFreezerAddress\n        SyscoinERC20I erc20 = SyscoinERC20I(bridgeTransfer.erc20ContractAddress);\n        assetBalances[bridgeTransfer.assetGUID] = assetBalances[bridgeTransfer.assetGUID].sub(bridgeTransfer.value);\n        erc20.safeTransfer(bridgeTransfer.tokenFreezerAddress, bridgeTransfer.value);\n        // pay back deposit\n        address payable tokenFreezeAddressPayable = address(uint160(bridgeTransfer.tokenFreezerAddress));\n        uint d = deposits[bridgeTransferId];\n        delete deposits[bridgeTransferId];\n        // stop using .transfer() because of gas issue after ethereum upgrade\n        tokenFreezeAddressPayable.call.value(d)(\"\");\n        emit CancelTransferSucceeded(bridgeTransfer.tokenFreezerAddress, bridgeTransferId);\n    }\n\n    function processCancelTransferFail(uint32 bridgeTransferId, address payable challengerAddress)\n        public\n        onlyTrustedRelayer\n    {\n        // lookup state by bridgeTransferId\n        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];\n        // ensure state is CancelRequested\n        require(bridgeTransfer.status == BridgeTransferStatus.CancelRequested,\n            \"#SyscoinERC20Manager cancelTransferSuccess(): Status must be CancelRequested to Fail the transfer\");\n        // set state of bridge transfer to CancelChallenged\n        bridgeTransfer.status = BridgeTransferStatus.CancelChallenged;\n        // pay deposit to challenger\n        uint d = deposits[bridgeTransferId];\n        delete deposits[bridgeTransferId];\n        // stop using .transfer() because of gas issue after ethereum upgrade\n        challengerAddress.call.value(d)(\"\");\n        emit CancelTransferFailed(bridgeTransfer.tokenFreezerAddress, bridgeTransferId);\n    }\n\n    // keyhash or scripthash for syscoinWitnessProgram\n    function freezeBurnERC20(\n        uint value,\n        uint32 assetGUID,\n        address erc20ContractAddress,\n        uint8 precision,\n        bytes memory syscoinAddress\n    )\n        public\n        minimumValue(erc20ContractAddress, value)\n        returns (bool)\n    {\n        require(syscoinAddress.length > 0, \"syscoinAddress cannot be zero\");\n        require(assetGUID > 0, \"Asset GUID must not be 0\");\n        if (net != Network.REGTEST) {\n            require(assetRegistry[assetGUID].erc20ContractAddress == erc20ContractAddress, \"Asset registry contract does not match what was provided to this call\");\n        }\n\n        SyscoinERC20I erc20 = SyscoinERC20I(erc20ContractAddress);\n        require(precision == erc20.decimals(), \"Decimals were not provided with the correct value\");\n        erc20.safeTransferFrom(msg.sender, address(this), value);\n        assetBalances[assetGUID] = assetBalances[assetGUID].add(value);\n\n        // store some state needed for potential bridge transfer cancellation\n        // create bridgeTransferId mapping structure with status + height + value + erc20ContractAddress + assetGUID + tokenFreezerAddress\n        bridgeTransferIdCount++;\n        bridgeTransfers[bridgeTransferIdCount] = BridgeTransfer({\n            status: BridgeTransferStatus.Ok,\n            value: value,\n            erc20ContractAddress: erc20ContractAddress,\n            assetGUID: assetGUID,\n            timestamp: block.timestamp,\n            tokenFreezerAddress: msg.sender\n        });\n        emit TokenFreeze(msg.sender, value, bridgeTransferIdCount);\n        return true;\n    }\n\n    // @dev - Returns the bridge transfer data for the supplied bridge transfer ID\n    //\n    function getBridgeTransfer(uint32 bridgeTransferId) external view returns (\n        uint _timestamp,\n        uint _value,\n        address _erc20ContractAddress,\n        address _tokenFreezerAddress,\n        uint32 _assetGUID,\n        BridgeTransferStatus _status\n    ) {\n        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];\n        return (\n            bridgeTransfer.timestamp,\n            bridgeTransfer.value,\n            bridgeTransfer.erc20ContractAddress,\n            bridgeTransfer.tokenFreezerAddress,\n            bridgeTransfer.assetGUID,\n            bridgeTransfer.status\n        );\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"canceller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"bridgetransferid\",\"type\":\"uint32\"}],\"name\":\"CancelTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"canceller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"bridgetransferid\",\"type\":\"uint32\"}],\"name\":\"CancelTransferRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"canceller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"bridgetransferid\",\"type\":\"uint32\"}],\"name\":\"CancelTransferSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"bridgetransferid\",\"type\":\"uint32\"}],\"name\":\"TokenFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"assetGuid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20ContractAddress\",\"type\":\"address\"}],\"name\":\"TokenRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenUnfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenUnfreezeFee\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"assetBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"assetRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bridgeTransferId\",\"type\":\"uint32\"}],\"name\":\"cancelTransferRequest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bridgeTransferId\",\"type\":\"uint32\"}],\"name\":\"cancelTransferSuccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"assetGUID\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"precision\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"syscoinAddress\",\"type\":\"bytes\"}],\"name\":\"freezeBurnERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bridgeTransferId\",\"type\":\"uint32\"}],\"name\":\"getBridgeTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenFreezerAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_assetGUID\",\"type\":\"uint32\"},{\"internalType\":\"enum SyscoinERC20Manager.BridgeTransferStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum SyscoinERC20Manager.Network\",\"name\":\"_network\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_trustedRelayerContract\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txHash\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_assetGUID\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_height\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_erc20ContractAddress\",\"type\":\"address\"}],\"name\":\"processAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"bridgeTransferId\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"challengerAddress\",\"type\":\"address\"}],\"name\":\"processCancelTransferFail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superblockSubmitterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"assetGUID\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"precision\",\"type\":\"uint8\"}],\"name\":\"processTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedRelayerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txHash\",\"type\":\"uint256\"}],\"name\":\"wasSyscoinTxProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SyscoinERC20Manager","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}