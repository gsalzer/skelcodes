{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5;\r\n\r\ncontract owned {\r\n    address payable public owner;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n   function transfer(address _to, uint256 _value) external;\r\n   function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract ERC20Holder is owned {\r\n   \r\n    \r\n    function tokenFallback(address _from, uint _value, bytes memory _data) pure public returns (bytes32 hash) {\r\n        bytes32 tokenHash = keccak256(abi.encodePacked(_from,_value,_data));\r\n        return tokenHash;\r\n    }\r\n    \r\n    function() external  payable {}\r\n    \r\n    function withdraw() onlyOwner public {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function transferToken (address token,address to,uint256 val) public onlyOwner {\r\n        IERC20 erc20 = IERC20(token);\r\n        erc20.transfer(to,val);\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract priceGap is ERC20Holder {\r\n    \r\n    address satt  = address(0xDf49C9f599A0A9049D97CFF34D0C30E468987389);\r\n    address signer = address(0xb0959d3CAEF1a0526cA6Ca9069994A80B8baffC8);\r\n    \r\n    mapping (address => bool) paid;\r\n    \r\n    \r\n    constructor () public {\r\n    }\r\n    \r\n    function setSigner (address a) public onlyOwner {\r\n        signer = a;\r\n    }\r\n    \r\n    function setSatt (address a) public onlyOwner {\r\n        satt = a;\r\n    }\r\n    \r\n   function getGap (address a,uint256 b, uint8 v, bytes32 r, bytes32 s) public {\r\n    \r\n        require(!paid[a]);\r\n        bytes32 h = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", keccak256(abi.encode(a,b))));\r\n        require( ecrecover(h, v, r, s) == signer);\r\n        IERC20 erc20 = IERC20(satt);\r\n        \r\n        paid[a] = true;\r\n        \r\n        uint256 amt = b*1000000000000000000;\r\n\r\n        erc20.transfer(a,amt);\r\n        \r\n    }\r\n    \r\n     function testhash (address a,uint256 b, uint8 v, bytes32 r, bytes32 s) public view returns (bytes32) {\r\n        bytes32 i = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", keccak256(abi.encode(a,b))));\r\n         \r\n        return i;\r\n     }\r\n     \r\n      function test (address a,uint256 b, uint8 v, bytes32 r, bytes32 s) public view returns (address) {\r\n         bytes32 k = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", keccak256(abi.encode(a,b))));\r\n         address j = ecrecover(k, v, r, s);\r\n         \r\n        return j;\r\n     }\r\n     \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"getGap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSatt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"test\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"testhash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"priceGap","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1e7425cfb3f4c99e32d146e8ecbdaae871d9a1f419ff70b547895a62beea9e60"}]}