{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ICurve {\r\n    function get_virtual_price() external view returns (uint256 out);\r\n    function get_dy(int128 sellTokenId, int128 buyTokenId, uint256 sellTokenAmt) external view returns (uint256 buyTokenAmt);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\ncontract CurveHelpers is DSMath {\r\n    /**\r\n    * @dev Return Curve 3pool Swap Address\r\n    */\r\n    function getCurveSwapAddr() internal pure returns (address) {\r\n        return 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\r\n    }\r\n\r\n    /**\r\n    * @dev Return Curve 3pool Token Address\r\n    */\r\n    function getCurveTokenAddr() internal pure returns (address) {\r\n        return 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\r\n    }\r\n\r\n    function getTokenI(address token) internal pure returns (int128 i) {\r\n        if (token == address(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {\r\n        // DAI Token\r\n        i = 0;\r\n        } else if (token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\r\n        // USDC Token\r\n        i = 1;\r\n        } else if (token == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)) {\r\n        // USDT Token\r\n        i = 2;\r\n        } else {\r\n        revert(\"token-not-found.\");\r\n        }\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getBuyUnitAmt(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint buyAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _sellAmt = convertTo18(TokenInterface(sellAddr).decimals(), sellAmt);\r\n        uint _buyAmt = convertTo18(TokenInterface(buyAddr).decimals(), buyAmt);\r\n        unitAmt = wdiv(_buyAmt, _sellAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is CurveHelpers {\r\n\r\n    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage)\r\n        public\r\n        view\r\n        returns (uint buyAmt, uint unitAmt, uint virtualPrice)\r\n    {\r\n        ICurve curve = ICurve(getCurveSwapAddr());\r\n        buyAmt = curve.get_dy(getTokenI(sellAddr), getTokenI(buyAddr), sellAmt);\r\n        virtualPrice = curve.get_virtual_price();\r\n        unitAmt = getBuyUnitAmt(buyAddr, sellAddr, sellAmt, buyAmt, slippage);\r\n    }\r\n}\r\n\r\n\r\ncontract InstaCurveThreeResolver is Resolver {\r\n    string public constant name = \"Curve-3pool-Resolver-v1.0\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaCurveThreeResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bba9fada4dd7b2d6548cceb19d5a29b015ce9f9af9c43dcefc6b424292b28c07"}]}