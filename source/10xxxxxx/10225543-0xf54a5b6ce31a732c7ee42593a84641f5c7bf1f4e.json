{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.9;\r\ninterface tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\r\n}\r\ncontract ERC20 {\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != address(0x0));\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract decentstore {\r\n   address creator;\r\n   address erush = 0x3cC5EB07E0e1227613F1DF58f38b549823d11cB9;\r\n   mapping (string => uint256 ) public balances;\r\n   uint256 public listprice = 0;\r\n   event NewProduct(address indexed from, uint256 value);\r\n   constructor() public { creator = msg.sender; }\r\n\r\n    struct pds {\r\n       address _lister;\r\n       string _pkey;\r\n       string _pimage;\r\n       uint256 _pprice;\r\n       string _pexplain;\r\n       bool _isdelisted;\r\n   }\r\n   \r\n   \r\n   mapping(uint256 => pds) plist;\r\n   uint256[] private indexList;\r\n\r\n\r\n    function listproduct(uint256 tokens, string memory _pkey, string memory _pimage, uint256 _pprice, string memory _pexplain )  public {\r\n      require(ERC20(erush).balanceOf(msg.sender) >= listprice);\r\n      require(tokens >= listprice);\r\n      \r\n      ERC20(erush).transferFrom(msg.sender, address(this), tokens);\r\n      plist[indexList.length]._lister = msg.sender;\r\n      plist[indexList.length]._pkey = _pkey;\r\n      plist[indexList.length]._pimage = _pimage;\r\n      plist[indexList.length]._pprice = _pprice;\r\n      plist[indexList.length]._pexplain = _pexplain;\r\n      plist[indexList.length]._isdelisted = false;\r\n      \r\n      indexList.push(indexList.length+1);\r\n      emit NewProduct(msg.sender, indexList.length+1);\r\n     \r\n   }\r\n   \r\n    function plister(uint256 _index) view public returns(address, string memory, string memory, uint256, string memory, bool) {\r\n       address _lister = plist[_index]._lister;\r\n       string memory _phead = plist[_index]._pkey;\r\n       string memory _pimage = plist[_index]._pimage;\r\n       uint256 _pprice = plist[_index]._pprice;\r\n       string memory _pexplain = plist[_index]._pexplain;\r\n       bool isdelisted = plist[_index]._isdelisted;\r\n        return ( _lister,_phead, _pimage, _pprice, _pexplain, isdelisted);\r\n       \r\n   }\r\n   \r\n   function pcount() view public returns (uint256) {\r\n       return indexList.length;\r\n   }\r\n   \r\n   function changeListingprice(uint256 newprice) public{\r\n        require(msg.sender == creator);   // Check if the sender is manager\r\n        listprice = newprice;\r\n    }\r\n    \r\n     function transferOwnership(address newOwner) public{\r\n        require(msg.sender == creator);   // Check if the sender is manager\r\n        if (newOwner != address(0)) {\r\n            creator = newOwner;\r\n        }\r\n    }\r\n    \r\n     function awithdrawal(uint tokens)  public {\r\n          require(msg.sender == creator); \r\n          ERC20(erush).transfer(creator, tokens);\r\n    }\r\n    \r\n    \r\n    function delist(uint256 productid) public{\r\n        require(plist[productid]._lister == msg.sender);\r\n        plist[productid]._isdelisted = true;\r\n    }\r\n    \r\n    function changepprice(uint256 productid, uint256 newprice) public{\r\n        require(plist[productid]._lister == msg.sender);\r\n        plist[productid]._pprice = newprice;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewProduct\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"awithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newprice\",\"type\":\"uint256\"}],\"name\":\"changeListingprice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newprice\",\"type\":\"uint256\"}],\"name\":\"changepprice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productid\",\"type\":\"uint256\"}],\"name\":\"delist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_pkey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pimage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_pprice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_pexplain\",\"type\":\"string\"}],\"name\":\"listproduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"plister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"decentstore","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://75b23f822f88b2823e8a086f8ec1797fda4b221e4bb6511b6305b2fc072412a8"}]}