{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.8;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ncontract AntiTery {\r\n    address payable owner;\r\n    struct Person {\r\n        address payable voter;\r\n        uint amount;\r\n        uint decision;\r\n    }\r\n    uint people_count;\r\n    uint block_closed;\r\n    uint max_votes;\r\n    bool voting_in_progress;\r\n    mapping(uint => Person) people;\r\n    \r\n    event RevealResult(uint);\r\n    event VotingClosed();\r\n    event EveryoneLosses();\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        voting_in_progress = true;\r\n        max_votes = 32;\r\n    }\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    function add_funds() public payable isOwner {}\r\n    \r\n    function withdraw_funds() public isOwner {\r\n        require(address(this).balance>0, 'Balance is zero');\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function change_maximum_of_maximum_voters(uint _max_votes) public isOwner {\r\n        max_votes = _max_votes;\r\n    }\r\n    \r\n    function make_vote(uint _decision) public payable {\r\n        require(msg.value > 0, \"You should pay something\");\r\n        require(voting_in_progress, \"Voting is closed\");\r\n        people[people_count] = Person(msg.sender,msg.value,_decision);\r\n        people_count ++;\r\n        if (get_number_votes() >= max_votes) {\r\n            voting_in_progress = false;\r\n            block_closed = block.number;\r\n            emit VotingClosed();\r\n        }\r\n    }\r\n    \r\n    function cancel_vote() public {\r\n        require(voting_in_progress, \"Voting is closed\");\r\n        for (uint i;i<people_count;i++) {\r\n            if (people[i].voter == msg.sender) {\r\n                msg.sender.transfer(people[i].amount);\r\n                delete people[i];\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    function reveal_number_and_pay() public {\r\n        require(!voting_in_progress, \"Voting in progress\");\r\n        require(block.number > block_closed, \"Wait for the next block\");\r\n        uint _result = uint256(blockhash(block_closed + 1)) ;\r\n        if (_result == 0) { \r\n            emit EveryoneLosses();\r\n            for (uint i;i<people_count;i++) \r\n                if (people[i].amount > 0) \r\n                    delete people[i];\r\n            delete people_count;\r\n            delete block_closed;\r\n            voting_in_progress = true;\r\n            return;\r\n        }\r\n\r\n        _result &= 0xf;\r\n        emit RevealResult(_result);\r\n\r\n        uint _money_to_give;\r\n        uint _winners_count = 1;\r\n        for (uint i;i<people_count;i++) {\r\n            if (people[i].decision == _result) {\r\n                _money_to_give += people[i].amount;\r\n                delete people[i];\r\n            } else if (people[i].amount > 0) {\r\n                _winners_count ++;\r\n            }\r\n        }\r\n        _money_to_give -= _money_to_give%_winners_count;\r\n        uint _qty = _money_to_give/_winners_count;\r\n        for (uint i;i<people_count;i++) {\r\n            if (people[i].amount > 0) {\r\n                people[i].voter.transfer(_qty+people[i].amount);\r\n                delete people[i];\r\n            }\r\n        }\r\n        delete people_count;\r\n        delete block_closed;\r\n        voting_in_progress = true;\r\n    }\r\n    \r\n    \r\n    function get_voting_balance() public view returns(uint _val){\r\n        _val = 0;\r\n        for (uint i;i<people_count;i++) {\r\n            _val += people[i].amount;\r\n        }\r\n    }\r\n\r\n    function get_number_votes() public view returns(uint _val){\r\n        _val = 0;\r\n        for (uint i;i<people_count;i++) {\r\n            if (people[i].amount>0) {\r\n                _val ++;\r\n            }\r\n        }\r\n    }\r\n \r\n    function destroy_contract() public isOwner{\r\n        selfdestruct(owner);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EveryoneLosses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RevealResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VotingClosed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"add_funds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancel_vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max_votes\",\"type\":\"uint256\"}],\"name\":\"change_maximum_of_maximum_voters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy_contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_number_votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_voting_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decision\",\"type\":\"uint256\"}],\"name\":\"make_vote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal_number_and_pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_funds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AntiTery","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://49e979d591fb363b11e0689857ee08aa7d73b9af5016a7bdfa36be8e0d3aaed4"}]}