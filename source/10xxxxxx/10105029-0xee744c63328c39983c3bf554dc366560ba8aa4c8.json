{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n* ==========================================================\r\n*\r\n* XoXo Network\r\n* FIRST EVER FULLY DECENTRALIZED GLOBAL POWERLINE AUTOPOOL\r\n*\r\n* Website  : https://xoxo.run\r\n* Telegram : https://t.me/xoxonetwork_official\r\n*\r\n* ==========================================================\r\n**/\r\n\r\npragma solidity >=0.5.12 <0.7.0;\r\n\r\ncontract XoXo {\r\n\r\n    struct User {\r\n        uint id;\r\n        uint referrerCount;\r\n        uint referrerID;\r\n        address[] referrals;\r\n    }\r\n    \r\n    struct UsersPool2 {\r\n        uint id;\r\n        uint referrerID;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct Pool_2_Slots {\r\n        address userAddress;\r\n        uint referrerID;\r\n        uint eventsCount;\r\n    }\r\n    \r\n    struct UsersPool3 {\r\n        uint id;\r\n        uint referrerID;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct Pool_3_Slots {\r\n        address userAddress;\r\n        uint referrerID;\r\n        uint eventsCount;\r\n    }\r\n    \r\n    struct UsersPool4 {\r\n        uint id;\r\n        uint referrerID;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct Pool_4_Slots {\r\n        address userAddress;\r\n        uint referrerID;\r\n        uint eventsCount;\r\n    }\r\n    \r\n    struct UsersPool5 {\r\n        uint id;\r\n        uint referrerID;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct Pool_5_Slots {\r\n        address userAddress;\r\n        uint referrerID;\r\n        uint eventsCount;\r\n    }\r\n    \r\n    struct UsersPool6 {\r\n        uint id;\r\n        uint referrerID;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct Pool_6_Slots {\r\n        address userAddress;\r\n        uint referrerID;\r\n        uint eventsCount;\r\n    }\r\n    \r\n    struct UsersPool7 {\r\n        uint id;\r\n        uint referrerID;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct Pool_7_Slots {\r\n        address userAddress;\r\n        uint referrerID;\r\n        uint eventsCount;\r\n    }\r\n    \r\n    modifier validReferrerID(uint _referrerID) {\r\n        require(_referrerID > 0 && _referrerID < newUserId, 'Invalid referrer ID');\r\n        _;\r\n    }\r\n    \r\n    event RegisterUserEvent(uint userId, address indexed user, address indexed referrer, uint time, uint8 indexed autopool, uint amount);\r\n    event DistributeUplineEvent(uint amount, address indexed sponsor, uint level, uint time);\r\n\r\n    mapping(address => User) public users;\r\n    \r\n    mapping(address => UsersPool2) public users_2;\r\n    mapping(uint => Pool_2_Slots) public pool_slots_2;\r\n    \r\n    mapping(address => UsersPool3) public users_3;\r\n    mapping(uint => Pool_3_Slots) public pool_slots_3;\r\n    \r\n    mapping(address => UsersPool4) public users_4;\r\n    mapping(uint => Pool_4_Slots) public pool_slots_4;\r\n    \r\n    mapping(address => UsersPool5) public users_5;\r\n    mapping(uint => Pool_5_Slots) public pool_slots_5;\r\n    \r\n    mapping(address => UsersPool6) public users_6;\r\n    mapping(uint => Pool_6_Slots) public pool_slots_6;\r\n    \r\n    mapping(address => UsersPool7) public users_7;\r\n    mapping(uint => Pool_7_Slots) public pool_slots_7;\r\n    \r\n    mapping(uint => address) public idToAddress;\r\n    mapping(address => uint) public balances;\r\n    \r\n    mapping (uint => uint) public uplineAmount;\r\n    \r\n    uint public newUserId = 1;\r\n    uint public newUserId_ap2 = 1;\r\n    uint public activeSlot_ap2 = 1;\r\n    uint public newUserId_ap3 = 1;\r\n    uint public activeSlot_ap3 = 1;\r\n    uint public newUserId_ap4 = 1;\r\n    uint public activeSlot_ap4 = 1;\r\n    uint public newUserId_ap5 = 1;\r\n    uint public activeSlot_ap5 = 1;\r\n    uint public newUserId_ap6 = 1;\r\n    uint public activeSlot_ap6 = 1;\r\n    uint public newUserId_ap7 = 1;\r\n    uint public activeSlot_ap7 = 1;\r\n    \r\n    address public owner;\r\n    \r\n    constructor(address _ownerAddress) public {\r\n        \r\n        uplineAmount[1] = 50;\r\n        uplineAmount[2] = 25;\r\n        uplineAmount[3] = 15;\r\n        uplineAmount[4] = 10;\r\n        \r\n        owner = _ownerAddress;\r\n        \r\n        User memory user = User({\r\n            id: newUserId,\r\n            referrerCount: uint(0),\r\n            referrerID: uint(0),\r\n            referrals: new address[](0)\r\n        });\r\n        \r\n        users[_ownerAddress] = user;\r\n        idToAddress[newUserId] = _ownerAddress;\r\n        newUserId++;\r\n        \r\n        //////\r\n        \r\n        UsersPool2 memory user2 = UsersPool2({\r\n            id: newUserId_ap2,\r\n            referrerID: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n        \r\n        users_2[_ownerAddress] = user2;\r\n        \r\n        Pool_2_Slots memory _newslot2 = Pool_2_Slots({\r\n            userAddress: _ownerAddress,\r\n            referrerID: uint(0),\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_2[newUserId_ap2] = _newslot2;\r\n        \r\n        newUserId_ap2++;\r\n        \r\n        //////\r\n        \r\n        UsersPool3 memory user3 = UsersPool3({\r\n            id: newUserId_ap3,\r\n            referrerID: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n        \r\n        users_3[_ownerAddress] = user3;\r\n        \r\n        Pool_3_Slots memory _newslot3 = Pool_3_Slots({\r\n            userAddress: _ownerAddress,\r\n            referrerID: uint(0),\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_3[newUserId_ap3] = _newslot3;\r\n        \r\n        newUserId_ap3++;\r\n        \r\n        //////\r\n        \r\n        UsersPool4 memory user4 = UsersPool4({\r\n            id: newUserId_ap4,\r\n            referrerID: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n        \r\n        users_4[_ownerAddress] = user4;\r\n        \r\n        Pool_4_Slots memory _newslot4 = Pool_4_Slots({\r\n            userAddress: _ownerAddress,\r\n            referrerID: uint(0),\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_4[newUserId_ap4] = _newslot4;\r\n        \r\n        newUserId_ap4++;\r\n        \r\n        //////\r\n        \r\n        UsersPool5 memory user5 = UsersPool5({\r\n            id: newUserId_ap5,\r\n            referrerID: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n        \r\n        users_5[_ownerAddress] = user5;\r\n        \r\n        Pool_5_Slots memory _newslot5 = Pool_5_Slots({\r\n            userAddress: _ownerAddress,\r\n            referrerID: uint(0),\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_5[newUserId_ap5] = _newslot5;\r\n        \r\n        newUserId_ap5++;\r\n        \r\n        //////\r\n        \r\n        UsersPool6 memory user6 = UsersPool6({\r\n            id: newUserId_ap6,\r\n            referrerID: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n        \r\n        users_6[_ownerAddress] = user6;\r\n        \r\n        Pool_6_Slots memory _newslot6 = Pool_6_Slots({\r\n            userAddress: _ownerAddress,\r\n            referrerID: uint(0),\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_6[newUserId_ap6] = _newslot6;\r\n        \r\n        newUserId_ap6++;\r\n        \r\n        //////\r\n                \r\n        UsersPool7 memory user7 = UsersPool7({\r\n            id: newUserId_ap7,\r\n            referrerID: uint(0),\r\n            reinvestCount: uint(0)\r\n        });\r\n        \r\n        users_7[_ownerAddress] = user7;\r\n        \r\n        Pool_7_Slots memory _newslot7 = Pool_7_Slots({\r\n            userAddress: _ownerAddress,\r\n            referrerID: uint(0),\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_7[newUserId_ap7] = _newslot7;\r\n        \r\n        newUserId_ap7++;\r\n        \r\n    }\r\n    \r\n    function participatePool1(uint _referrerId) \r\n      public \r\n      payable \r\n      validReferrerID(_referrerId) \r\n    {\r\n        \r\n        require(msg.value == 0.1 ether, \"Participation fee is 0.1 ETH\");\r\n        require(!isUserExists(msg.sender), \"User already registered\");\r\n\r\n        address _userAddress = msg.sender;\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        users[_userAddress] = User({\r\n            id: newUserId,\r\n            referrerCount: uint(0),\r\n            referrerID: _referrerId,\r\n            referrals: new address[](0)\r\n        });\r\n        idToAddress[newUserId] = _userAddress;\r\n        emit RegisterUserEvent(newUserId, msg.sender, idToAddress[_referrerId], now, 2, msg.value);\r\n        \r\n        newUserId++;\r\n        \r\n        users[idToAddress[_referrerId]].referrals.push(_userAddress);\r\n        users[idToAddress[_referrerId]].referrerCount++;\r\n        \r\n        uint amountToDistribute = msg.value;\r\n        address sponsorAddress = idToAddress[_referrerId];        \r\n        \r\n        for (uint32 i = 1; i <= 4; i++) {\r\n            \r\n            if ( isUserExists(sponsorAddress) ) {\r\n                amountToDistribute -= payUpline(sponsorAddress, i);\r\n                address _nextSponsorAddress = idToAddress[users[sponsorAddress].referrerID];\r\n                sponsorAddress = _nextSponsorAddress;\r\n            }\r\n            \r\n        }\r\n        \r\n        if (amountToDistribute > 0) {\r\n            payFirstLine(idToAddress[1], amountToDistribute);\r\n        }\r\n        \r\n    }\r\n    \r\n    function participatePool2() \r\n      public \r\n      payable \r\n    {\r\n        require(msg.value == 0.2 ether, \"Participation fee in Autopool is 0.2 ETH\");\r\n        require(isUserExists(msg.sender), \"User not present in AP1\");\r\n        require(isUserQualified(msg.sender), \"User not qualified in AP1\");\r\n        require(!isUserExists2(msg.sender), \"User already registered in AP2\");\r\n        \r\n        uint _referrerId = users[msg.sender].referrerID;\r\n        \r\n        UsersPool2 memory user2 = UsersPool2({\r\n            id: newUserId_ap2,\r\n            referrerID: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_2[msg.sender] = user2;\r\n        \r\n        Pool_2_Slots memory _newslot = Pool_2_Slots({\r\n            userAddress: msg.sender,\r\n            referrerID: _referrerId,\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_2[newUserId_ap2] = _newslot;\r\n        emit RegisterUserEvent(newUserId_ap2, msg.sender, idToAddress[_referrerId], now, 2, msg.value);\r\n        \r\n        newUserId_ap2++;\r\n        \r\n        uint eventCount = pool_slots_2[activeSlot_ap2].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n\r\n            Pool_2_Slots memory _reinvestslot = Pool_2_Slots({\r\n                userAddress: pool_slots_2[activeSlot_ap2].userAddress,\r\n                referrerID: pool_slots_2[activeSlot_ap2].referrerID,\r\n                eventsCount: uint(0)\r\n            });\r\n            \r\n            pool_slots_2[newUserId_ap2] = _reinvestslot;\r\n            emit RegisterUserEvent(newUserId_ap2, pool_slots_2[activeSlot_ap2].userAddress, idToAddress[pool_slots_2[activeSlot_ap2].referrerID], now, 2, msg.value);\r\n        \r\n            newUserId_ap2++;\r\n            activeSlot_ap2++;\r\n            \r\n            payUpline(idToAddress[_referrerId], 1);\r\n            \r\n            if (pool_slots_2[activeSlot_ap2].referrerID > 0)\r\n                payUpline(idToAddress[pool_slots_2[activeSlot_ap2].referrerID], 1);\r\n            else \r\n                payUpline(idToAddress[1], 1);\r\n            \r\n        }\r\n        \r\n        if (eventCount < 3) {\r\n            \r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_2[activeSlot_ap2].userAddress, 1);\r\n                payUpline(idToAddress[_referrerId], 1);\r\n            }\r\n            if(eventCount == 1) {\r\n                payUpline(idToAddress[_referrerId], 1);\r\n                \r\n                if (pool_slots_2[activeSlot_ap2].referrerID > 0)\r\n                    payUpline(idToAddress[pool_slots_2[activeSlot_ap2].referrerID], 1);\r\n                else \r\n                    payUpline(idToAddress[1], 1);\r\n            }\r\n\r\n            pool_slots_2[activeSlot_ap2].eventsCount++;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    function participatePool3() \r\n      public \r\n      payable \r\n    {\r\n        require(msg.value == 0.3 ether, \"Participation fee in Autopool is 0.3 ETH\");\r\n        require(isUserExists(msg.sender), \"User not present in AP1\");\r\n        require(isUserQualified(msg.sender), \"User not qualified in AP1\");\r\n        require(!isUserExists3(msg.sender), \"User already registered in AP3\");\r\n        \r\n        uint _referrerId = users[msg.sender].referrerID;\r\n        \r\n        UsersPool3 memory user3 = UsersPool3({\r\n            id: newUserId_ap3,\r\n            referrerID: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_3[msg.sender] = user3;\r\n        \r\n        Pool_3_Slots memory _newslot = Pool_3_Slots({\r\n            userAddress: msg.sender,\r\n            referrerID: _referrerId,\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_3[newUserId_ap3] = _newslot;\r\n        emit RegisterUserEvent(newUserId_ap3, msg.sender, idToAddress[_referrerId], now, 3, msg.value);\r\n        \r\n        newUserId_ap3++;\r\n        \r\n        uint eventCount = pool_slots_3[activeSlot_ap3].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n\r\n            Pool_3_Slots memory _reinvestslot = Pool_3_Slots({\r\n                userAddress: pool_slots_3[activeSlot_ap3].userAddress,\r\n                referrerID: pool_slots_3[activeSlot_ap3].referrerID,\r\n                eventsCount: uint(0)\r\n            });\r\n            \r\n            pool_slots_3[newUserId_ap3] = _reinvestslot;\r\n            emit RegisterUserEvent(newUserId_ap3, pool_slots_3[activeSlot_ap3].userAddress, idToAddress[pool_slots_3[activeSlot_ap3].referrerID], now, 3, msg.value);\r\n        \r\n            newUserId_ap3++;\r\n            activeSlot_ap3++;\r\n            \r\n            payUpline(idToAddress[_referrerId], 1);\r\n            \r\n            if (pool_slots_3[activeSlot_ap3].referrerID > 0)\r\n                payUpline(idToAddress[pool_slots_3[activeSlot_ap3].referrerID], 1);\r\n            else \r\n                payUpline(idToAddress[1], 1);\r\n            \r\n        }\r\n        \r\n        if (eventCount < 3) {\r\n            \r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_3[activeSlot_ap3].userAddress, 1);\r\n                payUpline(idToAddress[_referrerId], 1);\r\n            }\r\n            if(eventCount == 1) {\r\n                payUpline(idToAddress[_referrerId], 1);\r\n                \r\n                if (pool_slots_3[activeSlot_ap3].referrerID > 0)\r\n                    payUpline(idToAddress[pool_slots_3[activeSlot_ap3].referrerID], 1);\r\n                else \r\n                    payUpline(idToAddress[1], 1);\r\n            }\r\n\r\n            pool_slots_3[activeSlot_ap3].eventsCount++;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    function participatePool4() \r\n      public \r\n      payable \r\n    {\r\n        require(msg.value == 0.4 ether, \"Participation fee in Autopool is 0.4 ETH\");\r\n        require(isUserExists(msg.sender), \"User not present in AP1\");\r\n        require(isUserQualified(msg.sender), \"User not qualified in AP1\");\r\n        require(!isUserExists4(msg.sender), \"User already registered in AP4\");\r\n        \r\n        uint _referrerId = users[msg.sender].referrerID;\r\n        \r\n        UsersPool4 memory user4 = UsersPool4({\r\n            id: newUserId_ap4,\r\n            referrerID: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_4[msg.sender] = user4;\r\n        \r\n        Pool_4_Slots memory _newslot = Pool_4_Slots({\r\n            userAddress: msg.sender,\r\n            referrerID: _referrerId,\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_4[newUserId_ap4] = _newslot;\r\n        emit RegisterUserEvent(newUserId_ap4, msg.sender, idToAddress[_referrerId], now, 4, msg.value);\r\n        \r\n        newUserId_ap4++;\r\n        \r\n        uint eventCount = pool_slots_4[activeSlot_ap4].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n\r\n            Pool_4_Slots memory _reinvestslot = Pool_4_Slots({\r\n                userAddress: pool_slots_4[activeSlot_ap4].userAddress,\r\n                referrerID: pool_slots_4[activeSlot_ap4].referrerID,\r\n                eventsCount: uint(0)\r\n            });\r\n            \r\n            pool_slots_4[newUserId_ap4] = _reinvestslot;\r\n            emit RegisterUserEvent(newUserId_ap4, pool_slots_4[activeSlot_ap4].userAddress, idToAddress[pool_slots_4[activeSlot_ap4].referrerID], now, 4, msg.value);\r\n        \r\n            newUserId_ap4++;\r\n            activeSlot_ap4++;\r\n            \r\n            payUpline(idToAddress[_referrerId], 1);\r\n            \r\n            if (pool_slots_4[activeSlot_ap4].referrerID > 0)\r\n                payUpline(idToAddress[pool_slots_4[activeSlot_ap4].referrerID], 1);\r\n            else \r\n                payUpline(idToAddress[1], 1);\r\n            \r\n        }\r\n        \r\n        if (eventCount < 3) {\r\n            \r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_4[activeSlot_ap4].userAddress, 1);\r\n                payUpline(idToAddress[_referrerId], 1);\r\n            }\r\n            if(eventCount == 1) {\r\n                payUpline(idToAddress[_referrerId], 1);\r\n                \r\n                if (pool_slots_4[activeSlot_ap4].referrerID > 0)\r\n                    payUpline(idToAddress[pool_slots_4[activeSlot_ap4].referrerID], 1);\r\n                else \r\n                    payUpline(idToAddress[1], 1);\r\n            }\r\n\r\n            pool_slots_4[activeSlot_ap4].eventsCount++;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    function participatePool5() \r\n      public \r\n      payable \r\n    {\r\n        require(msg.value == 0.5 ether, \"Participation fee in Autopool is 0.5 ETH\");\r\n        require(isUserExists(msg.sender), \"User not present in AP1\");\r\n        require(isUserQualified(msg.sender), \"User not qualified in AP1\");\r\n        require(!isUserExists5(msg.sender), \"User already registered in AP5\");\r\n        \r\n        uint _referrerId = users[msg.sender].referrerID;\r\n        \r\n        UsersPool5 memory user5 = UsersPool5({\r\n            id: newUserId_ap5,\r\n            referrerID: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_5[msg.sender] = user5;\r\n        \r\n        Pool_5_Slots memory _newslot = Pool_5_Slots({\r\n            userAddress: msg.sender,\r\n            referrerID: _referrerId,\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_5[newUserId_ap5] = _newslot;\r\n        emit RegisterUserEvent(newUserId_ap5, msg.sender, idToAddress[_referrerId], now, 5, msg.value);\r\n        \r\n        newUserId_ap5++;\r\n        \r\n        uint eventCount = pool_slots_5[activeSlot_ap5].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n\r\n            Pool_5_Slots memory _reinvestslot = Pool_5_Slots({\r\n                userAddress: pool_slots_5[activeSlot_ap5].userAddress,\r\n                referrerID: pool_slots_5[activeSlot_ap5].referrerID,\r\n                eventsCount: uint(0)\r\n            });\r\n            \r\n            pool_slots_5[newUserId_ap5] = _reinvestslot;\r\n            emit RegisterUserEvent(newUserId_ap5, pool_slots_5[activeSlot_ap5].userAddress, idToAddress[pool_slots_5[activeSlot_ap5].referrerID], now, 5, msg.value);\r\n        \r\n            newUserId_ap5++;\r\n            activeSlot_ap5++;\r\n            \r\n            payUpline(idToAddress[_referrerId], 1);\r\n            \r\n            if (pool_slots_5[activeSlot_ap5].referrerID > 0)\r\n                payUpline(idToAddress[pool_slots_5[activeSlot_ap5].referrerID], 1);\r\n            else \r\n                payUpline(idToAddress[1], 1);\r\n            \r\n        }\r\n        \r\n        if (eventCount < 3) {\r\n            \r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_5[activeSlot_ap5].userAddress, 1);\r\n                payUpline(idToAddress[_referrerId], 1);\r\n            }\r\n            if(eventCount == 1) {\r\n                payUpline(idToAddress[_referrerId], 1);\r\n                \r\n                if (pool_slots_5[activeSlot_ap5].referrerID > 0)\r\n                    payUpline(idToAddress[pool_slots_5[activeSlot_ap5].referrerID], 1);\r\n                else \r\n                    payUpline(idToAddress[1], 1);\r\n            }\r\n\r\n            pool_slots_5[activeSlot_ap5].eventsCount++;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    function participatePool6() \r\n      public \r\n      payable \r\n    {\r\n        require(msg.value == 0.7 ether, \"Participation fee in Autopool is 0.7 ETH\");\r\n        require(isUserExists(msg.sender), \"User not present in AP1\");\r\n        require(isUserQualified(msg.sender), \"User not qualified in AP1\");\r\n        require(!isUserExists6(msg.sender), \"User already registered in AP6\");\r\n        \r\n        uint _referrerId = users[msg.sender].referrerID;\r\n        \r\n        UsersPool6 memory user6 = UsersPool6({\r\n            id: newUserId_ap6,\r\n            referrerID: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_6[msg.sender] = user6;\r\n        \r\n        Pool_6_Slots memory _newslot = Pool_6_Slots({\r\n            userAddress: msg.sender,\r\n            referrerID: _referrerId,\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_6[newUserId_ap6] = _newslot;\r\n        emit RegisterUserEvent(newUserId_ap6, msg.sender, idToAddress[_referrerId], now, 6, msg.value);\r\n        \r\n        newUserId_ap6++;\r\n        \r\n        uint eventCount = pool_slots_6[activeSlot_ap6].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n\r\n            Pool_6_Slots memory _reinvestslot = Pool_6_Slots({\r\n                userAddress: pool_slots_6[activeSlot_ap6].userAddress,\r\n                referrerID: pool_slots_6[activeSlot_ap6].referrerID,\r\n                eventsCount: uint(0)\r\n            });\r\n            \r\n            pool_slots_6[newUserId_ap6] = _reinvestslot;\r\n            emit RegisterUserEvent(newUserId_ap6, pool_slots_6[activeSlot_ap6].userAddress, idToAddress[pool_slots_6[activeSlot_ap6].referrerID], now, 6, msg.value);\r\n        \r\n            newUserId_ap6++;\r\n            activeSlot_ap6++;\r\n            \r\n            payUpline(idToAddress[_referrerId], 1);\r\n            \r\n            if (pool_slots_6[activeSlot_ap6].referrerID > 0)\r\n                payUpline(idToAddress[pool_slots_6[activeSlot_ap6].referrerID], 1);\r\n            else \r\n                payUpline(idToAddress[1], 1);\r\n            \r\n        }\r\n        \r\n        if (eventCount < 3) {\r\n            \r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_6[activeSlot_ap6].userAddress, 1);\r\n                payUpline(idToAddress[_referrerId], 1);\r\n            }\r\n            if(eventCount == 1) {\r\n                payUpline(idToAddress[_referrerId], 1);\r\n                \r\n                if (pool_slots_6[activeSlot_ap6].referrerID > 0)\r\n                    payUpline(idToAddress[pool_slots_6[activeSlot_ap6].referrerID], 1);\r\n                else \r\n                    payUpline(idToAddress[1], 1);\r\n            }\r\n\r\n            pool_slots_6[activeSlot_ap6].eventsCount++;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    function participatePool7() \r\n      public \r\n      payable \r\n    {\r\n        require(msg.value == 1 ether, \"Participation fee in Autopool is 1 ETH\");\r\n        require(isUserExists(msg.sender), \"User not present in AP1\");\r\n        require(isUserQualified(msg.sender), \"User not qualified in AP1\");\r\n        require(!isUserExists7(msg.sender), \"User already registered in AP7\");\r\n        \r\n        uint _referrerId = users[msg.sender].referrerID;\r\n        \r\n        UsersPool7 memory user7 = UsersPool7({\r\n            id: newUserId_ap7,\r\n            referrerID: _referrerId,\r\n            reinvestCount: uint(0)\r\n        });\r\n        users_7[msg.sender] = user7;\r\n        \r\n        Pool_7_Slots memory _newslot = Pool_7_Slots({\r\n            userAddress: msg.sender,\r\n            referrerID: _referrerId,\r\n            eventsCount: uint(0)\r\n        });\r\n        \r\n        pool_slots_7[newUserId_ap7] = _newslot;\r\n        emit RegisterUserEvent(newUserId_ap7, msg.sender, idToAddress[_referrerId], now, 7, msg.value);\r\n        \r\n        newUserId_ap7++;\r\n        \r\n        uint eventCount = pool_slots_7[activeSlot_ap7].eventsCount;\r\n        uint newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n\r\n            Pool_7_Slots memory _reinvestslot = Pool_7_Slots({\r\n                userAddress: pool_slots_7[activeSlot_ap7].userAddress,\r\n                referrerID: pool_slots_7[activeSlot_ap7].referrerID,\r\n                eventsCount: uint(0)\r\n            });\r\n            \r\n            pool_slots_7[newUserId_ap7] = _reinvestslot;\r\n            emit RegisterUserEvent(newUserId_ap7, pool_slots_7[activeSlot_ap7].userAddress, idToAddress[pool_slots_7[activeSlot_ap7].referrerID], now, 7, msg.value);\r\n        \r\n            newUserId_ap7++;\r\n            activeSlot_ap7++;\r\n            \r\n            payUpline(idToAddress[_referrerId], 1);\r\n            \r\n            if (pool_slots_7[activeSlot_ap7].referrerID > 0)\r\n                payUpline(idToAddress[pool_slots_7[activeSlot_ap7].referrerID], 1);\r\n            else \r\n                payUpline(idToAddress[1], 1);\r\n            \r\n        }\r\n        \r\n        if (eventCount < 3) {\r\n            \r\n            if(eventCount == 0) {\r\n                payUpline(pool_slots_7[activeSlot_ap7].userAddress, 1);\r\n                payUpline(idToAddress[_referrerId], 1);\r\n            }\r\n            if(eventCount == 1) {\r\n                payUpline(idToAddress[_referrerId], 1);\r\n                \r\n                if (pool_slots_7[activeSlot_ap7].referrerID > 0)\r\n                    payUpline(idToAddress[pool_slots_7[activeSlot_ap7].referrerID], 1);\r\n                else \r\n                    payUpline(idToAddress[1], 1);\r\n            }\r\n\r\n            pool_slots_7[activeSlot_ap7].eventsCount++;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function payUpline(address _sponsorAddress, uint _refLevel) private returns (uint distributeAmount) {\r\n        \r\n        require( _refLevel <= 4);\r\n        distributeAmount = msg.value / 100 * uplineAmount[_refLevel];\r\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            balances[_sponsorAddress] += distributeAmount;\r\n            emit DistributeUplineEvent(distributeAmount, _sponsorAddress, _refLevel, now);\r\n        }\r\n        \r\n        return distributeAmount;\r\n\r\n    }\r\n    \r\n    function payFirstLine(address _sponsorAddress, uint payAmount) private returns (uint distributeAmount) {\r\n        \r\n        distributeAmount = payAmount;\r\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            balances[_sponsorAddress] += distributeAmount;\r\n            emit DistributeUplineEvent(distributeAmount, _sponsorAddress, 1, now);\r\n        }\r\n        \r\n        return distributeAmount;\r\n        \r\n    }\r\n    \r\n    function isUserQualified(address _userAddress) public view returns (bool) {\r\n        return (users[_userAddress].referrerCount > 0);\r\n    }\r\n    \r\n    function isUserExists(address _userAddress) public view returns (bool) {\r\n        return (users[_userAddress].id != 0);\r\n    }\r\n    \r\n    function isUserExists2(address _userAddress) public view returns (bool) {\r\n        return (users_2[_userAddress].id != 0);\r\n    }\r\n    \r\n    function isUserExists3(address _userAddress) public view returns (bool) {\r\n        return (users_3[_userAddress].id != 0);\r\n    }\r\n    \r\n    function isUserExists4(address _userAddress) public view returns (bool) {\r\n        return (users_4[_userAddress].id != 0);\r\n    }\r\n    \r\n    function isUserExists5(address _userAddress) public view returns (bool) {\r\n        return (users_5[_userAddress].id != 0);\r\n    }\r\n    \r\n    function isUserExists6(address _userAddress) public view returns (bool) {\r\n        return (users_6[_userAddress].id != 0);\r\n    }\r\n    \r\n    function isUserExists7(address _userAddress) public view returns (bool) {\r\n        return (users_7[_userAddress].id != 0);\r\n    }\r\n    \r\n    function getUserReferrals(address _userAddress)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n      {\r\n        return users[_userAddress].referrals;\r\n      }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DistributeUplineEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"autopool\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RegisterUserEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeSlot_ap2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot_ap7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isUserExists2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isUserExists3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isUserExists4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isUserExists5\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isUserExists6\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isUserExists7\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isUserQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newUserId_ap7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"}],\"name\":\"participatePool1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participatePool2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participatePool3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participatePool4\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participatePool5\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participatePool6\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participatePool7\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_6\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_slots_7\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uplineAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"XoXo","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c59d087ffccb40a1361712f6878f12ce12b3caa4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e9cdfd9b7c742bf2dc3253ae831129b54e985d44cecd57130d59b18be27eb15d"}]}