{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.8;\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two unsigned integers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint value) external returns (bool success);\r\n  function transferFrom(address from, address to, uint value) external returns (bool success);\r\n}\r\n\r\ninterface CuraAnnonaes {\r\n  function getDailyReward() external view returns (uint256);\r\n  function getNumberOfVaults() external view returns (uint256);\r\n  function getUserBalanceInVault(string calldata vault, address user) external view returns (uint256);\r\n  function stake(string calldata, address receiver, uint256 amount, address _vault) external returns (bool);\r\n  function unstake(string calldata vault, address receiver, address _vault) external;\r\n  function updateVaultData(string calldata vault, address who, address user, uint value) external;\r\n}\r\n\r\n// https://en.wikipedia.org/wiki/Cura_Annonae\r\ncontract YFMSVault {\r\n  using SafeMath for uint256;\r\n\r\n  // variables.\r\n  address public owner;\r\n  address[] public stakers; // tracks all addresses in vault.\r\n  uint256 public burnTotal = 0;\r\n  CuraAnnonaes public CuraAnnonae;\r\n  ERC20 public YFMSToken;\r\n  \r\n  constructor(address _cura, address _token) public {\r\n    owner = msg.sender;\r\n    CuraAnnonae = CuraAnnonaes(_cura);\r\n    YFMSToken = ERC20(_token);\r\n  }\r\n\r\n  // balance of a user in the vault.\r\n  function getUserBalance(address _from) public view returns (uint256) {\r\n    return CuraAnnonae.getUserBalanceInVault(\"YFMS\", _from);\r\n  }\r\n\r\n  // returns all users currently staking in this vault.\r\n  function getStakers() public view returns (address[] memory) {\r\n    return stakers; \r\n  }\r\n\r\n  function getUnstakingFee(address _user) public view returns (uint256) {\r\n    uint256 _balance = getUserBalance(_user);\r\n    return _balance / 10000 * 250;\r\n  }\r\n\r\n  function cleanStakersArray(address user) internal {\r\n    uint256 index;\r\n    // search the array for the user.\r\n    for (uint i=0; i < stakers.length; i++) {\r\n      if (stakers[i] == user)\r\n        index = i;\r\n      break;\r\n    }\r\n    // swap the last user in the array for the current unstaked user.\r\n    stakers[index] = stakers[stakers.length - 1];\r\n    // remove the last element (empty)\r\n    stakers.pop();\r\n  }\r\n\r\n  function stakeYFMS(uint256 _amount, address _from) public {\r\n    // add user to stakers array if not currently present.\r\n    require(msg.sender == _from);\r\n    require(_amount >= 500000000000000000);\r\n    require(_amount <= YFMSToken.balanceOf(_from));\r\n    if (getUserBalance(_from) == 0)\r\n      stakers.push(_from);\r\n    YFMSToken.transferFrom(_from, address(this), _amount);\r\n    require(CuraAnnonae.stake(\"YFMS\", _from, _amount, address(this)));\r\n  }\r\n\r\n  function unstakeYFMS(address _to) public {\r\n    uint256 _unstakingFee = getUnstakingFee(_to);\r\n    uint256 _amount = getUserBalance(_to).sub(_unstakingFee);\r\n    // ensure data integrity.\r\n    require(_amount > 0);\r\n    require(msg.sender == _to);\r\n    // first transfer funds back to the user then burn the unstaking fee.\r\n    YFMSToken.transfer(_to, _amount);\r\n    YFMSToken.transfer(address(0), _unstakingFee);\r\n    // add to burn total.\r\n    burnTotal = burnTotal.add(_unstakingFee); \r\n    // unstake.\r\n    CuraAnnonae.unstake(\"YFMS\", _to, address(this));\r\n    // remove user from array.\r\n    cleanStakersArray(_to);\r\n  }\r\n\r\n  function ratioMath(uint256 _numerator, uint256 _denominator) internal pure returns (uint256) {\r\n    uint256 numerator = _numerator * 10 ** 18; // precision to 18 decimals.\r\n    uint256 quotient = (numerator / _denominator).add(5).div(10);\r\n    return quotient;\r\n  }\r\n\r\n  // daily call to distribute vault rewards to users who have staked.\r\n  function distributeVaultRewards () public {\r\n    require(msg.sender == owner);\r\n    uint256 _reward = CuraAnnonae.getDailyReward();\r\n    uint256 _vaults = CuraAnnonae.getNumberOfVaults();\r\n    uint256 _vaultReward = _reward.div(_vaults);\r\n    // remove daily reward from address(this) total.\r\n    uint256 _pool = YFMSToken.balanceOf(address(this)).sub(_vaultReward);\r\n    uint256 _userBalance;\r\n    uint256 _earned;\r\n    // iterate through stakers array and distribute rewards based on % staked.\r\n    for (uint i = 0; i < stakers.length; i++) {\r\n      _userBalance = getUserBalance(stakers[i]);\r\n      if (_userBalance > 0) {\r\n        _earned = ratioMath(_userBalance, _pool).mul(_vaultReward / 100000000000000000);\r\n        // update the vault data.\r\n        CuraAnnonae.updateVaultData(\"YFMS\", address(this), stakers[i], _earned);\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cura\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CuraAnnonae\",\"outputs\":[{\"internalType\":\"contract CuraAnnonaes\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YFMSToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeVaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnstakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"stakeYFMS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unstakeYFMS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YFMSVault","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a738ab04a24575b378749af890064853eee46016000000000000000000000000fef3bef71a5eb97e097039038776fd967ae5b106","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0903e6b525c988417ae197cc0414c07d1470b5b393eb5f48f3496012a5f2a34f"}]}