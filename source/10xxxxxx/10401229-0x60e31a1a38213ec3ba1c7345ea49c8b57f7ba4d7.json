{"status":"1","message":"OK","result":[{"SourceCode":"{\"AuctionHouseEmptyV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./AuctionHouseV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2018\\r\\n/// @title Auction House Empty Logic Code\\r\\n/// @notice Contain all the storage of the auction house declared in a way that generate getters for Logic Code use, but no code that changes memory\\r\\ncontract AuctionHouseEmptyV1 is VCProxyData, AuctionHouseHeaderV1, AuctionHouseStoragePublicV1 {\\r\\n\\r\\n    //No functions, including no withdraw/catchall, in case of an exploit to the pending withdrawals array.\\r\\n    //Any non \\\"view\\\" call will fail.\\r\\n\\r\\n}\"},\"AuctionHouseLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./AuctionHouseV1.sol\\\";\\r\\n\\r\\nimport \\\"./CryptographIndexLogicV1.sol\\\";\\r\\nimport \\\"./TheCryptographLogicV1.sol\\\";\\r\\nimport \\\"./SingleAuctionLogicV1.sol\\\";\\r\\nimport \\\"./CryptographFactoryLogicV1.sol\\\";\\r\\nimport \\\"./MintingAuctionLogicV1.sol\\\";\\r\\nimport \\\"./ERC2665LogicV1.sol\\\";\\r\\nimport \\\"./CryptographKYCLogicV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Auction House Logic Code\\r\\n/// @notice The main contract used by collectors to Bid on and Trade cyptographs. Abstract this smart contract on the proxy address for interaction.\\r\\ncontract AuctionHouseLogicV1 is VCProxyData, AuctionHouseHeaderV1, AuctionHouseStoragePublicV1 {\\r\\n\\r\\n    /// @notice Generic constructor, empty\\r\\n    /// @dev This contract is meant to be used in a delegatecall hence its memory state is irrelevant\\r\\n    constructor() public\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //Modifier for functions that require to be called only by the Cryptograph Factory\\r\\n    modifier restrictedToFactory(){\\r\\n        require((msg.sender == factory), \\\"Only the Cryptograph Factory smart contract can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Generic catch-all function that accept payments to prevent accidental Eth burn.\\r\\n    /// @dev A receive function is NOT necessary. Your compiler doesn\\u0027t know better. \\r\\n    fallback() external payable {\\r\\n        pendingWithdrawals[msg.sender] += msg.value;\\r\\n        emit Deposit(msg.value,msg.sender, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice You now have to pay real money to supress compiler warnings\\r\\n    /// @dev Completely unecessary trashcode that will always get intercepted by the proxy first\\r\\n    receive() external payable{\\r\\n        pendingWithdrawals[msg.sender] += msg.value;\\r\\n        emit Deposit(msg.value,msg.sender, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Init function of the auction house\\r\\n    /// @dev Callable only once after deployment\\r\\n    /// @param _factory The address of the CryptographFactory Instance\\r\\n    /// @param _index The address of the CryptographIndex Instance\\r\\n    /// @param _ERC2665Lieutenant The address of the ERC2665 Instance\\r\\n    /// @param _kycContract The address of the KYC contract Instance\\r\\n    function init(address _factory, address _index, address _ERC2665Lieutenant, address _kycContract) external {\\r\\n        require((initialized == false), \\\"The Auction House has already been initialized\\\");\\r\\n        require(_factory != address(0), \\\"_factory should be != 0x0\\\");\\r\\n        require(_index != address(0), \\\"_index should be != 0x0\\\");\\r\\n        require(_ERC2665Lieutenant != address(0), \\\"_ERC2665Lieutenant should be != 0x0\\\");\\r\\n        require(_kycContract != address(0), \\\"_kycContract should be != 0x0\\\");\\r\\n        \\r\\n        initialized = true;\\r\\n        factory = _factory;\\r\\n        index = _index;\\r\\n        ERC2665Lieutenant = _ERC2665Lieutenant;\\r\\n        kycContract = _kycContract;\\r\\n    }\\r\\n\\r\\n    /// @notice Send eth and add it to a withdrawal account.\\r\\n    /// @dev This is how single auctions smart contracts deposit money\\r\\n    /// @param _account The address of the account to credit with the payable amount\\r\\n    /// @param _contributor The address of the user wallet from which the money is from\\r\\n    function addFundsFor(address _account, address _contributor) external payable{\\r\\n        pendingWithdrawals[_account] += msg.value;\\r\\n        emit Deposit(msg.value, _account, _contributor, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw all the eth from msg.sender account\\r\\n    /// @dev Only way an external account can take away money from the cryptograph ecosystem\\r\\n    function withdraw() external {\\r\\n\\r\\n        //Calculating the withdrawn amount\\r\\n        uint256 amount = pendingWithdrawals[msg.sender];\\r\\n\\r\\n        //Emptying the account\\r\\n        pendingWithdrawals[msg.sender] = 0;\\r\\n\\r\\n        //Firing the event\\r\\n        emit UserWithdrawal(amount, msg.sender);\\r\\n\\r\\n        //Finally transferring the money\\r\\n        msg.sender.transfer(amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Place a bid to own a cryptograph\\r\\n    /// @dev Calling this function is the only way to eventually gain ownership of a cryptograph\\r\\n    /// @param _cryptographIssue The serial of the Cryptograph you want to bid on\\r\\n    /// @param _isOfficial True if bidding on an official cryptograph, false if bidding on a community cryptograph\\r\\n    /// @param _editionSerial If you are bidding on an edition, specify it\\u0027s specific edition issue # here\\r\\n    /// @param _newBidAmount The amount of money you want to bid\\r\\n    /// @param _previousStandingBidAmount Protection against ordonancement attacks. Please indicate what value is currently visible for yourCryptographAuction.highestBidder().\\r\\n    function bid(\\r\\n        uint256 _cryptographIssue,\\r\\n        bool _isOfficial,\\r\\n        uint256 _editionSerial,\\r\\n        uint256 _newBidAmount,\\r\\n        uint256 _previousStandingBidAmount\\r\\n    ) external payable{\\r\\n\\r\\n        //KYC\\r\\n        require(CryptographKYCLogicV1(kycContract).checkKyc(msg.sender, _newBidAmount),\\r\\n            \\\"Bid above a specific amount requires the bidder to be KYCed\\\");\\r\\n\\r\\n        //Grabbing the auction\\r\\n        SingleAuctionLogicV1 _auc = SingleAuctionLogicV1(\\r\\n            TheCryptographLogicV1(\\r\\n                CryptographIndexLogicV1(index).getCryptograph(_cryptographIssue, _isOfficial, _editionSerial)\\r\\n            ).myAuction()\\r\\n        );\\r\\n\\r\\n        //The first check being made is that the current highest standing bid match the announced bid the user is bidding on top of\\r\\n        require(_auc.currentBids(_auc.highestBidder()) == _previousStandingBidAmount,\\r\\n            \\\"bid not accepted: current highest standing bid is different than the one specified\\\");\\r\\n\\r\\n        //Credit the full amount paid to the msg.sender account\\r\\n        pendingWithdrawals[msg.sender] += msg.value;\\r\\n\\r\\n        //Check that the sender has enough money in his account to bid\\r\\n        require(pendingWithdrawals[msg.sender] + _auc.currentBids(msg.sender) \\u003e= _newBidAmount, \\\"bid not accepted: Not enough ether was sent\\\");\\r\\n\\r\\n        uint256 toSend = _newBidAmount - _auc.currentBids(msg.sender);\\r\\n\\r\\n        //Tapping the money from the account\\r\\n        pendingWithdrawals[msg.sender] -= toSend;\\r\\n\\r\\n        //Emiting the bidding event first (before the deposit events from payouts start triggering)\\r\\n        emit UserBid(address(_auc), _newBidAmount, msg.sender);\\r\\n\\r\\n        //Bidding\\r\\n        _auc.bid{value: toSend }(_newBidAmount, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Return the highest bid placed on a cryptograph\\r\\n    /// @dev Easy way to optain the highest current bid for a cryptograph you want to bid on. Can be nested within bid() for unsafe bids that will always go through.\\r\\n    /// @param _cryptographIssue The serial of the Cryptograph you want to peek highest bid on\\r\\n    /// @param _isOfficial True if peeking on an official cryptograph, false if peeking on a community cryptograph\\r\\n    /// @param _editionSerial If you are peeking on an edition, specify it\\u0027s specific edition issue # here\\r\\n    function getHighestBid(uint256 _cryptographIssue, bool _isOfficial, uint256 _editionSerial) external view returns(uint256){\\r\\n        SingleAuctionLogicV1 _auc = SingleAuctionLogicV1(\\r\\n            TheCryptographLogicV1(\\r\\n                CryptographIndexLogicV1(index).getCryptograph(_cryptographIssue, _isOfficial, _editionSerial)\\r\\n            ).myAuction()\\r\\n        );\\r\\n        return _auc.currentBids(_auc.highestBidder());\\r\\n    }\\r\\n\\r\\n    /// @notice Cancel your bid on a Cryptograph. WARNING : if highest bidder, you might only get a fraction of your money back\\r\\n    /// @dev During the initial auction or once a sale has been accepted, a highest bidder can\\u0027t cancel his bid.\\r\\n    /// @param _cryptographIssue The serial of the Cryptograph you want to cancel bid on\\r\\n    /// @param _isOfficial True if cancelling bid on an official cryptograph, false if cancelling bid on a community cryptograph\\r\\n    /// @param _editionSerial If cancelling bid on an edition, specify it\\u0027s specific edition issue # here\\r\\n    function cancelBid(uint256 _cryptographIssue, bool _isOfficial, uint256 _editionSerial) external{\\r\\n\\r\\n        //Grabbing the auction\\r\\n        SingleAuctionLogicV1 _auc = SingleAuctionLogicV1(\\r\\n            TheCryptographLogicV1(\\r\\n                CryptographIndexLogicV1(index).getCryptograph(_cryptographIssue, _isOfficial, _editionSerial)\\r\\n            ).myAuction()\\r\\n        );\\r\\n\\r\\n        //Emitting the cancelBid event before deposit event is triggered\\r\\n        emit UserCancelledBid(address(_auc), msg.sender);\\r\\n\\r\\n        //Actually cancel the bid\\r\\n        _auc.cancelBid(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Win a cryptograph for the highest bidder\\r\\n    /// @dev Callable by anyone, but should be called by PA for automatisation.\\r\\n    /// @param _cryptographIssue The issue # of the Cryptograph you want to claim\\r\\n    /// @param _isOfficial True if claiming an official cryptograph, false if claiming a community cryptograph\\r\\n    /// @param _editionSerial If claiming an edition, specify it\\u0027s specific edition issue # here\\r\\n    function win(uint256 _cryptographIssue, bool _isOfficial, uint256 _editionSerial) external{\\r\\n\\r\\n        //Grabbing the auction\\r\\n        TheCryptographLogicV1 _cry = TheCryptographLogicV1(\\r\\n                CryptographIndexLogicV1(index).getCryptograph(_cryptographIssue, _isOfficial, _editionSerial)\\r\\n            );\\r\\n\\r\\n        SingleAuctionLogicV1 _auc = SingleAuctionLogicV1(_cry.myAuction());\\r\\n\\r\\n        //Emitting the Win event before other events are triggered\\r\\n        emit UserWin(address(_auc), _auc.currentBids(_auc.highestBidder()), _auc.highestBidder());\\r\\n\\r\\n        //Update the ERC2665\\r\\n        ERC2665LogicV1(ERC2665Lieutenant).transferACryptograph(_cry.owner(), _auc.highestBidder(), address(_cry), _auc.currentBids(_auc.highestBidder()));\\r\\n\\r\\n        //Actually Win the auction and claim the cryptograph\\r\\n        if(!(_auc.win(_auc.highestBidder()) == 0)){\\r\\n            CryptographFactoryLogicV1(factory).mintGGBMA(_cryptographIssue, _isOfficial, _auc.highestBidder()); //Minting in the case of GGBMA\\r\\n            MintingAuctionLogicV1(address(_auc)).distributeBid(_auc.highestBidder()); //Distributing the money\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Set a selling price for a cryptograph if you are the owner. Set to 0 if not for sale, a sale is triggered if the selling price is leq than current highest bid.\\r\\n    /// @dev Only callable by the Cryptograph owner\\r\\n    /// @param _cryptographIssue The issue of the Cryptograph you want to sell\\r\\n    /// @param _isOfficial True if selling an official cryptograph, false if selling a community cryptograph\\r\\n    /// @param _editionSerial If selling an edition, specify its specific edition issue # here\\r\\n    /// @param _newSellingPrice the new selling price you want to set\\r\\n    function setSellingPrice(uint256 _cryptographIssue, bool _isOfficial, uint256 _editionSerial, uint256 _newSellingPrice) external{\\r\\n\\r\\n        //Grabbing the auction\\r\\n        SingleAuctionLogicV1 _auc = SingleAuctionLogicV1(\\r\\n            TheCryptographLogicV1(\\r\\n                CryptographIndexLogicV1(index).getCryptograph(_cryptographIssue, _isOfficial, _editionSerial)\\r\\n            ).myAuction()\\r\\n        );\\r\\n\\r\\n        //Emitting the UserSell event before other events are triggered\\r\\n        emit UserSellingPriceAdjust(address(_auc), _newSellingPrice);\\r\\n\\r\\n        //Actually adjust the selling price\\r\\n        _auc.setSellingPrice(msg.sender, _newSellingPrice);\\r\\n    }\\r\\n\\r\\n    /// @notice Call an ERC2665 transfer on a cryptograph\\r\\n    /// @dev Only callable by the ERC2665 contract\\r\\n    /// @param _cryptograph The address of the cryptograph getting transferred\\r\\n    /// @param _contributor The address of the transfer fee payer\\r\\n    /// @param _to The address of the new cryptograph owner\\r\\n    function transferERC2665(address _cryptograph, address _contributor, address _to) external payable{\\r\\n        require(msg.sender == ERC2665Lieutenant, \\\"Only the ERC2665Lieutenant can call this function\\\");\\r\\n        SingleAuctionLogicV1(TheCryptographLogicV1(_cryptograph).myAuction()).transferERC2665{value:msg.value}(_contributor, _to);\\r\\n    }\\r\\n\\r\\n    /// @notice Call an ERC2665 Approve on a cryptograph\\r\\n    /// @dev Only callable by the ERC2665 contract\\r\\n    /// @param _cryptograph The address of the cryptograph getting transferred\\r\\n    /// @param _contributor The address of the transfer fee payer\\r\\n    /// @param _approvedAddress The address of the potential owner\\r\\n    function approveERC2665(address _cryptograph, address _contributor, address _approvedAddress) external payable{\\r\\n        require(msg.sender == ERC2665Lieutenant, \\\"Only the ERC2665Lieutenant can call this function\\\");\\r\\n        SingleAuctionLogicV1(TheCryptographLogicV1(_cryptograph).myAuction()).approveERC2665{value:msg.value}(_contributor, _approvedAddress);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"AuctionHouseProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./AuctionHouseV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title  Auction House Proxy Smart Contract\\r\\n/// @notice The proxied AuctionHouse : this is the contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract AuctionHouseProxiedV1 is VCProxy, AuctionHouseHeaderV1, AuctionHouseStorageInternalV1  {\\r\\n\\r\\n    constructor(uint256 _version, address _vc)  public\\r\\n    VCProxy(_version, _vc) //Call the VC proxy constructor so that this contract know where it\\u0027s logic code is\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n    //No other logic code it is all proxied\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"},\"AuctionHouseV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Auction House Header\\r\\n/// @notice Contain all the events emitted by the Auction House\\r\\ncontract AuctionHouseHeaderV1 {\\r\\n\\r\\n    // Deposit: Event emitted whenever money is made available for withdrawal in the Auction House\\r\\n    // amount: Amount of money being deposited\\r\\n    // beneficiary: Account that will be able to withdraw the money\\r\\n    // contributor: Which user wallet initially contributed the received money\\r\\n    // origin: Which smart contract sent the money\\r\\n    event Deposit(uint256 indexed amount, address indexed beneficiary, address indexed contributor, address origin);\\r\\n\\r\\n    // Withdrawal: event emitted whenever a user withdraw his Eth on the auction house smart contract\\r\\n    // amount: total amount of money withdrawn\\r\\n    // account: address of user withdrawing his money\\r\\n    event UserWithdrawal(uint256 indexed amount, address indexed account);\\r\\n\\r\\n    // Bid: event emitted whenever a user submit a new bid to an auction\\r\\n    // auction: the address of the auction\\r\\n    // bidValue: the eth value of the new standing bid\\r\\n    // bidder: the address of the user who just bid\\r\\n    event UserBid(address indexed auction, uint256 indexed bidValue, address indexed bidder);\\r\\n\\r\\n    // CancelBid: event emitted whenever a user manually cancel a bid\\r\\n    // auction: the address of the auction\\r\\n    // bidder: the address of the user who just cancelled his bid\\r\\n    event UserCancelledBid(address indexed auction, address indexed bidder);\\r\\n\\r\\n    // Win: event emitted whenever a user win an auction\\r\\n    // auction: the address of the auction\\r\\n    // bidValue: the eth value of the winning bid\\r\\n    // bidder: the address of the user who just won the auction his bid\\r\\n    event UserWin(address indexed auction, uint256 indexed bidValue, address indexed bidder);\\r\\n\\r\\n    // UserSell: event emitted whenever a user trigger a sale at an auction\\r\\n    // auction: the address of the auction\\r\\n    event UserSell(address indexed auction);\\r\\n\\r\\n    // UserSellingPriceAdjust: event emitted whenever a user adjust the selling price of an auction\\r\\n    // auction: the address of the auction\\r\\n    // value : the new adjusted price. 0 for disabled\\r\\n    event UserSellingPriceAdjust(address indexed auction, uint256 indexed value);\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Auction House Storage Internal\\r\\n/// @notice Contain all the storage of the auction house declared in a way that does not generate getters for Proxy use\\r\\ncontract AuctionHouseStorageInternalV1 {\\r\\n    bool internal initialized; //Bool to check if the index have been initialized\\r\\n    address internal factory; //The factory smart contract (proxy) that will publish the cryptographs\\r\\n    address internal index; //The index smart contract that maps cryptographs and their auctions\\r\\n    mapping (address =\\u003e uint) internal pendingWithdrawals;  //How much money each user owns on the smart contract\\r\\n\\r\\n    address internal ERC2665Lieutenant;\\r\\n    address internal kycContract;\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud\\r\\n/// @title Auction House Storage Public\\r\\n/// @notice Contain all the storage of the auction house declared in a way that generates getters for Logic Code use\\r\\ncontract AuctionHouseStoragePublicV1 {\\r\\n    bool public initialized; //Bool to check if the index have been initialized\\r\\n    address public factory; //The factory smart contract (proxy) that will publish the cryptographs\\r\\n    address public index; //The index smart contract that maps cryptographs and their auctions\\r\\n    mapping (address =\\u003e uint) public pendingWithdrawals;  //How much money each user owns on the smart contract\\r\\n\\r\\n    address public ERC2665Lieutenant;\\r\\n    address public kycContract;\\r\\n\\r\\n}\"},\"BidLink.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title BidLink Ordered Data Structure\\r\\n/// @notice Classical double linked array data structure that allow us to not have to sort() stuff at the cost of instancing more + proper maintenance\\r\\ncontract BidLink{\\r\\n\\r\\n    address public mintingAuction; //The Minting auction the BidLink is associated with\\r\\n    address public bidder; //Our bidder\\r\\n    uint256 public bidAmount; //How big is our bid\\r\\n    address public above;  //BidLink with a bigger bid\\r\\n    address public below;  //BidLink with a smaller bid\\r\\n\\r\\n    modifier restrictedToAuction(){\\r\\n        require((msg.sender == mintingAuction), \\\"Only the auction contract can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _bidder, uint256 _bidAmount) public\\r\\n    {\\r\\n        mintingAuction = msg.sender;\\r\\n        bidder = _bidder;\\r\\n        bidAmount = _bidAmount;\\r\\n    }\\r\\n\\r\\n    //Function used to reset and reuse a link rather than having to reinstance its bytecode\\r\\n    function reset(address _bidder, uint256 _bidAmount) external restrictedToAuction(){\\r\\n        delete above;\\r\\n        delete below;\\r\\n        bidder = _bidder;\\r\\n        bidAmount = _bidAmount;\\r\\n    }\\r\\n\\r\\n    function setBidAmount(uint256 _bidAmount) external restrictedToAuction(){\\r\\n        bidAmount = _bidAmount;\\r\\n    }\\r\\n\\r\\n    function setAbove(address _above) external restrictedToAuction(){\\r\\n        above = _above;\\r\\n    }\\r\\n\\r\\n    function setBelow(address _below) external restrictedToAuction(){\\r\\n        below = _below;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"BidLinkSimple.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title BidLink Ordered Data Structure (no bidAmount)\\r\\n/// @notice Classical double linked array data structure that allow us to not have to sort() stuff at the cost of instancing more + proper maintenance\\r\\ncontract BidLinkSimple{\\r\\n\\r\\n    address public auction; //The Minting auction the BidLink is associated with\\r\\n    address public bidder; //Our bidder\\r\\n    address public above;  //BidLink with a bigger bid\\r\\n    address public below;  //BidLink with a smaller bid\\r\\n\\r\\n    modifier restrictedToAuction(){\\r\\n        require((msg.sender == auction), \\\"Only the auction contract can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _bidder) public\\r\\n    {\\r\\n        auction = msg.sender;\\r\\n        bidder = _bidder;\\r\\n    }\\r\\n\\r\\n    //Function used to reset and reuse a link rather than having to reinstance its bytecode\\r\\n    function reset(address _bidder) external restrictedToAuction(){\\r\\n        delete above;\\r\\n        delete below;\\r\\n        bidder = _bidder;\\r\\n    }\\r\\n\\r\\n    function setAbove(address _above) external restrictedToAuction(){\\r\\n        above = _above;\\r\\n    }\\r\\n\\r\\n    function setBelow(address _below) external restrictedToAuction(){\\r\\n        below = _below;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"CryptographFactoryLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./CryptographFactoryV1.sol\\\";\\r\\nimport \\\"./TheCryptographProxiedV1.sol\\\";\\r\\nimport \\\"./TheCryptographLogicV1.sol\\\";\\r\\nimport \\\"./SingleAuctionProxiedV1.sol\\\";\\r\\nimport \\\"./SingleAuctionLogicV1.sol\\\";\\r\\nimport \\\"./CryptographIndexLogicV1.sol\\\";\\r\\nimport \\\"./AuctionHouseLogicV1.sol\\\";\\r\\nimport \\\"./MintingAuctionLogicV1.sol\\\";\\r\\nimport \\\"./MintingAuctionProxiedV1.sol\\\";\\r\\nimport \\\"./CryptographInitiator.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Cryptograph Factory Logic Code\\r\\n/// @notice The main contract used by publisher to release and edit cryptographs. Cast this smart contract on the proxy address for interaction.\\r\\ncontract CryptographFactoryLogicV1 is VCProxyData, CryptographFactoryHeaderV1, CryptographFactoryStoragePublicV1 {\\r\\n\\r\\n    constructor() public\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    /// @notice Init function of the Cryptograph Factory\\r\\n    /// @dev Callable only once after deployment\\r\\n    /// @param _officialPublisher The address that perpetual altruism will be using consistently through all deployments\\r\\n    /// @param _targetVC The address of the proxied Version Control\\r\\n    /// @param _targetAuctionHouse The address of the proxied Auction House\\r\\n    /// @param _targetIndex The address of the proxied Index\\r\\n    /// @param _targetCryLogicVersion The code index of TheCryptographLogicV1 in the version control\\r\\n    /// @param _targetAuctionLogicVersion  The code index of SingleAuctionLogicV1 in the version control\\r\\n    /// @param _targetAuctionBidLogicVersion  The code index of SingleAuctionBidLogicV1 in the version control\\r\\n    /// @param _targetMintingAuctionLogicVersion  The code index of MintingAuctionLogicV1 in the version control\\r\\n    function init(\\r\\n        address _officialPublisher,\\r\\n        address _targetVC,\\r\\n        address _targetAuctionHouse,\\r\\n        address _targetIndex,\\r\\n        uint256 _targetCryLogicVersion,\\r\\n        uint256 _targetAuctionLogicVersion,\\r\\n        uint256 _targetAuctionBidLogicVersion,\\r\\n        uint256 _targetMintingAuctionLogicVersion\\r\\n    ) external {\\r\\n\\r\\n        require(!initialized, \\\"The Cryptograph Factory has already been initialized\\\");\\r\\n        initialized = true;\\r\\n        officialPublisher = _officialPublisher;\\r\\n        targetVC = _targetVC;\\r\\n        targetAuctionHouse = _targetAuctionHouse;\\r\\n        targetIndex = _targetIndex;\\r\\n        targetCryLogicVersion = _targetCryLogicVersion;\\r\\n        targetAuctionLogicVersion = _targetAuctionLogicVersion;\\r\\n        targetAuctionBidLogicVersion = _targetAuctionBidLogicVersion;\\r\\n        targetMintingAuctionLogicVersion = _targetMintingAuctionLogicVersion;\\r\\n        communityMintable = false;\\r\\n    }\\r\\n\\r\\n    /// @notice Create a Cryptograph\\r\\n    /// @dev emit CryptographCreated event. Official cryptographs need their auction locked-in afterwards.\\r\\n    /// @param _cryInitiator The cryptograph Initiator object\\r\\n    /// @return The issue number of the newly created Cryptograph\\r\\n    function createCryptograph (address _cryInitiator) external returns (uint256){\\r\\n\\r\\n        bool offi = msg.sender == officialPublisher;\\r\\n\\r\\n        require(communityMintable || offi, \\\"Community Cryptographs can\\u0027t be created at the moment\\\");\\r\\n\\r\\n        //Instance the Cryptograph\\r\\n        address newCryptographProxied;\\r\\n        address newSingleAuctionProxiedV1;\\r\\n        (newCryptographProxied, newSingleAuctionProxiedV1) = instanceCryptograph(_cryInitiator, offi);\\r\\n\\r\\n        //Book the Cryptograph into the index and get the issue #, then init\\r\\n        uint256 _issue;\\r\\n        if(offi){\\r\\n            //Inserting an official Cryptograph\\r\\n            _issue = CryptographIndexLogicV1(targetIndex).insertACryptograph(newCryptographProxied);\\r\\n        } else {\\r\\n             //Inserting a community Cryptograph\\r\\n            _issue = CryptographIndexLogicV1(targetIndex).insertACommunityCryptograph(newCryptographProxied);\\r\\n        }\\r\\n\\r\\n        TheCryptographLogicV1(newCryptographProxied).initCry(\\r\\n                _issue, 0, offi, newSingleAuctionProxiedV1, _cryInitiator, address(0)\\r\\n            );\\r\\n\\r\\n        //Setting hash and url\\r\\n        TheCryptographLogicV1(newCryptographProxied).setMediaHash(\\r\\n            CryptographInitiator(_cryInitiator).mediaHash()\\r\\n        );\\r\\n        TheCryptographLogicV1(newCryptographProxied).setMediaUrl(\\r\\n            CryptographInitiator(_cryInitiator).mediaUrl()\\r\\n        );\\r\\n\\r\\n        emit CryptographCreated(_issue, newCryptographProxied, offi);\\r\\n        return _issue;\\r\\n    }\\r\\n\\r\\n    /// @notice Create an edition\\r\\n    /// @dev emit CryptographEditionAdded event\\r\\n    /// @param _editionSize How many cryptographs can be minted in this edition\\r\\n    /// @return The Cryptograph issue # of the newly created Cryptograph Edition\\r\\n    function createEdition(uint256 _editionSize) external returns (uint256){\\r\\n\\r\\n        uint256 _issue;\\r\\n\\r\\n        bool offi = msg.sender == officialPublisher;\\r\\n\\r\\n        require(communityMintable || offi, \\\"community Cryptographs can\\u0027t be created at the moment\\\");\\r\\n\\r\\n        //Book the edition into the index and get the issue #\\r\\n        if(offi){\\r\\n            //Inserting an official Cryptograph\\r\\n            _issue = CryptographIndexLogicV1(targetIndex).createAnEdition(msg.sender, _editionSize);\\r\\n        } else {\\r\\n            //Inserting a community Cryptograph\\r\\n            _issue = CryptographIndexLogicV1(targetIndex).createACommunityEdition(msg.sender, _editionSize);\\r\\n        }\\r\\n        emit CryptographEditionAdded(_issue, _editionSize, offi);\\r\\n        return _issue;\\r\\n    }\\r\\n\\r\\n    /// @notice Mint a Cryptograph that is part of an edition.\\r\\n    /// @dev emit CryptographEditionMinted event. Only callable by the original edition creator. Official cryptographs need their auction locked-in afterwards.\\r\\n    /// @param _cryInitiator The cryptograph Initiator for the edition\\r\\n    /// @return The serial number of the newly created Cryptograph edition member\\r\\n    function mintEdition (address _cryInitiator) external returns (uint256){\\r\\n\\r\\n        bool offi = msg.sender == officialPublisher;\\r\\n\\r\\n        uint256 _issue = CryptographInitiator(_cryInitiator).cryptographIssue();\\r\\n\\r\\n        //Check that we are properly minting an Edition and not a GGBMA/Unique cryptograph\\r\\n        require(\\r\\n            CryptographIndexLogicV1(targetIndex).getCryptograph(_issue, offi, 0) == address(0x0),\\r\\n            \\\"Can\\u0027t manually mint a GGBMA\\\");\\r\\n\\r\\n        //Instance the Cryptograph\\r\\n        address newCryptographProxied;\\r\\n        address newSingleAuctionProxiedV1;\\r\\n        (newCryptographProxied, newSingleAuctionProxiedV1) = instanceCryptograph(_cryInitiator, offi);\\r\\n\\r\\n        //Book the Cryptograph into the index and get the serial #\\r\\n        uint256 _editionSerial;\\r\\n        _editionSerial = CryptographIndexLogicV1(targetIndex).mintAnEdition(\\r\\n            msg.sender,\\r\\n            _issue,\\r\\n            offi,\\r\\n            address(newCryptographProxied)\\r\\n        );\\r\\n\\r\\n        //Init the Cryptograph\\r\\n        TheCryptographLogicV1(address(newCryptographProxied)).initCry(\\r\\n            _issue, _editionSerial, offi, address(newSingleAuctionProxiedV1), _cryInitiator, address(0)\\r\\n        );\\r\\n        emit CryptographEditionMinted(\\r\\n            _issue,\\r\\n            _editionSerial,\\r\\n            newCryptographProxied,\\r\\n            offi\\r\\n        );\\r\\n\\r\\n        //Setting hash and url\\r\\n        TheCryptographLogicV1(newCryptographProxied).setMediaHash(\\r\\n            CryptographInitiator(_cryInitiator).mediaHash()\\r\\n        );\\r\\n        TheCryptographLogicV1(newCryptographProxied).setMediaUrl(\\r\\n            CryptographInitiator(_cryInitiator).mediaUrl()\\r\\n        );\\r\\n\\r\\n        return _editionSerial;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice ReInitialize an already created Cryptograph\\r\\n    /// @dev This permit to release nameless cryptograph at a specific serial #, only to name them properly later (up until the auction start)\\r\\n    /// If auction started but is not locked, use reinitAuction.\\r\\n    /// @param _CryptographToEdit The address of the cryptograph you want to re-init\\r\\n    /// @param _cryInitiator The Cryptograph initator with the name to be changed\\r\\n    function reInitCryptograph(address _CryptographToEdit, address _cryInitiator)  external {\\r\\n        require(msg.sender == officialPublisher, \\\"Only official Cryptographs can be edited after serial # reservation\\\");\\r\\n        TheCryptographLogicV1(_CryptographToEdit).initCry(\\r\\n            TheCryptographLogicV1(_CryptographToEdit).issue(),\\r\\n            TheCryptographLogicV1(_CryptographToEdit).serial(),\\r\\n            true,\\r\\n            TheCryptographLogicV1(_CryptographToEdit).myAuction(),\\r\\n            _cryInitiator,\\r\\n            address(0)\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice ReInitialize an already created Auction. Not possible after locking.\\r\\n    /// @dev Auction re-initializable until locked. No bid accepted if unlocked.\\r\\n    /// @param _auctionToEdit The address of the auction you want to edit\\r\\n    /// @param _cryInitiator The desired unix (seconds) timestamp at which the initial auction should start\\r\\n    /// @param _lock Shall further re-initilization be allowed ?\\r\\n    function reInitAuction(\\r\\n        address _auctionToEdit,\\r\\n        address _cryInitiator,\\r\\n        bool _lock\\r\\n    ) external {\\r\\n        require(msg.sender == officialPublisher, \\\"Only PA can reinit auctions\\\");\\r\\n\\r\\n        //Call init\\r\\n        SingleAuctionLogicV1(_auctionToEdit).initAuction(\\r\\n            SingleAuctionLogicV1(_auctionToEdit).myCryptograph(),\\r\\n            _cryInitiator,\\r\\n            _lock\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Lock an auction to prevent anyone from re-editing it and allow bidding\\r\\n    /// @dev When releasing ready-to launch cryptographs, you should lock ASAP\\r\\n    /// @param _cryptographIssue The issue # of the Cryptograph auction you want to lock\\r\\n    /// @param _editionSerial If locking auction on an edition, specify it\\u0027s specific edition serial # here\\r\\n    function lockAuction(uint256 _cryptographIssue, uint256 _editionSerial) external {\\r\\n        require(msg.sender == officialPublisher, \\\"Only Perpetual Altruism can lock an auction\\\");\\r\\n        SingleAuctionLogicV1(\\r\\n            TheCryptographLogicV1(\\r\\n                CryptographIndexLogicV1(targetIndex).getCryptograph(\\r\\n                    _cryptographIssue, true, _editionSerial)\\r\\n            ).myAuction()\\r\\n        ).lock();\\r\\n    }\\r\\n\\r\\n    /// @notice Set the media hash for a cryptograph\\r\\n    /// @dev emit the MediaHash event in the cryptograph instance for  web3 retrieval. It\\u0027s best practice to call this function soon after cryptograph creation\\r\\n    /// @param _cryptographIssue The issue # of the Cryptograph you want to set the media hash for\\r\\n    /// @param _editionSerial If setting hash on an edition, specify its specific edition serial # here\\r\\n    function setMediaHash(uint256 _cryptographIssue, uint256 _editionSerial, string calldata _mediaHash) external{\\r\\n        TheCryptographLogicV1 _cry = TheCryptographLogicV1(CryptographIndexLogicV1(targetIndex).getCryptograph(\\r\\n                    _cryptographIssue, true, _editionSerial)\\r\\n            );\\r\\n        require(msg.sender == SingleAuctionLogicV1(_cry.myAuction()).publisher(),\\r\\n            \\\"Only the publisher of a Cryptograph can edit its media hash\\\"\\r\\n        );\\r\\n\\r\\n        _cry.setMediaHash(_mediaHash);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the media url for a cryptograph\\r\\n    /// @dev emit the MediaUrl event in the cryptograph instance for  web3 retrieval. It\\u0027s best practice to call this function soon after cryptograph creation\\r\\n    /// @param _cryptographIssue The issue # of the Cryptograph you want to set the media url for\\r\\n    /// @param _editionSerial If setting url on an edition, specify its specific edition serial # here\\r\\n    function setMediaUrl(uint256 _cryptographIssue, uint256 _editionSerial, string calldata _mediaUrl) external{\\r\\n        TheCryptographLogicV1 _cry = TheCryptographLogicV1(CryptographIndexLogicV1(targetIndex).getCryptograph(\\r\\n                    _cryptographIssue, true, _editionSerial)\\r\\n            );\\r\\n        require(msg.sender == SingleAuctionLogicV1(_cry.myAuction()).publisher(), \\\"Only the publisher of a Cryptograph can edit its media URL\\\");\\r\\n\\r\\n        _cry.setMediaUrl(_mediaUrl);\\r\\n    }\\r\\n\\r\\n    /// @notice Instance a Cryptograph\\r\\n    /// @dev The SingleAuction is init() but TheCryptograph is not\\r\\n    /// @param _cryInitiator The Cryptograph Iniator address\\r\\n    /// @return (new CryptographAddress, new SingleAuctionAddress)\\r\\n    function instanceCryptograph( address _cryInitiator, bool _official) internal returns (address, address){\\r\\n\\r\\n        //Instance a new Cryptograph\\r\\n        TheCryptographProxiedV1 newCryptographProxied = new TheCryptographProxiedV1(targetCryLogicVersion, targetVC);\\r\\n\\r\\n        //Instance a new auction\\r\\n        SingleAuctionProxiedV1 newSingleAuctionProxiedV1 = new SingleAuctionProxiedV1(targetAuctionLogicVersion, targetVC, targetAuctionBidLogicVersion);\\r\\n\\r\\n        //-----------------------\\r\\n        //Init the auction\\r\\n        SingleAuctionLogicV1(address(newSingleAuctionProxiedV1)).initAuction(\\r\\n            address(newCryptographProxied),\\r\\n            _cryInitiator,\\r\\n            !_official //Will lock the auction setup if not an official Cryptograph\\r\\n        );\\r\\n\\r\\n        //-----------------------\\r\\n\\r\\n        //Checking any bamboozling with the fees\\r\\n        if(!_official){\\r\\n                assert(SingleAuctionLogicV1(address(newSingleAuctionProxiedV1)).perpetualAltruismCut() \\u003e= 25000);\\r\\n            }\\r\\n\\r\\n        assert(\\r\\n            SingleAuctionLogicV1(address(newSingleAuctionProxiedV1)).perpetualAltruismCut() +\\r\\n            SingleAuctionLogicV1(address(newSingleAuctionProxiedV1)).publisherCut() +\\r\\n            SingleAuctionLogicV1(address(newSingleAuctionProxiedV1)).charityCut() +\\r\\n            SingleAuctionLogicV1(address(newSingleAuctionProxiedV1)).thirdPartyCut() == 100000\\r\\n            );\\r\\n\\r\\n        assert(SingleAuctionLogicV1(address(newSingleAuctionProxiedV1)).startTime() \\u003c=\\r\\n        SingleAuctionLogicV1(address(newSingleAuctionProxiedV1)).endTime());\\r\\n\\r\\n        return (address(newCryptographProxied), address(newSingleAuctionProxiedV1));\\r\\n\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ====================================================\\r\\n                    GENERALIZED GBM STUFF\\r\\n    ====================================================\\r\\n    */\\r\\n\\r\\n    /*\\r\\n        The processus for holding a Generalized GBM Auction (GGBMA) is as follow :\\r\\n        -Call \\\"createGGBMA\\\" to create a generalized GBM auction\\r\\n            -\\u003e It will have a cryptograph template that will be copied at minting time\\r\\n            -\\u003e Edition serial is 0 (prototype) for get purposes.\\r\\n            -\\u003e Reminder that once instanced, changes to the prototype don\\u0027t carry over to copies.\\r\\n        -\\\"reInitCryptograph\\\", \\\"setMediaHash\\\", \\\"setMediaURL\\\" works on the GGBMA prototype and copies just like a normal cryptograph\\r\\n        -\\\"reInitAuction\\\", \\\"lockAuction\\\" allows to interact with a GGBMA just like a normal auction.\\r\\n        -Once the auction is over, bidders calling win() on the auction serial #0 will instead mint a new cryptograph/Single auction pair\\r\\n            -\\u003e This pair is initiated to be past their initial auction already and to have the bidder as the new owner.\\r\\n    */\\r\\n\\r\\n    /// @notice Create a Cryptograph\\r\\n    /// @dev emit CryptographCreated event. Official cryptographs need their auction locked-in afterwards.\\r\\n    /// @param _cryInitiator The cryptograph initiator for the desired GGBMA\\r\\n    /// @return The serial number of the newly created Cryptograph\\r\\n    function createGGBMA (address _cryInitiator) external returns (uint256){\\r\\n\\r\\n        require(false, \\\"GGBMA creation is disabled for launch, they will need an update approved by the senate\\\");\\r\\n\\r\\n        uint256 _issue; //The issue # we will get\\r\\n\\r\\n        bool offi = msg.sender == officialPublisher;\\r\\n\\r\\n        require(communityMintable || offi, \\\"community Cryptographs can\\u0027t be created at the moment\\\");\\r\\n\\r\\n        //Book the edition into the index and get the issue #\\r\\n        if(offi){\\r\\n            //Inserting an official Cryptograph\\r\\n            _issue = CryptographIndexLogicV1(targetIndex).createAGGBMA(msg.sender, CryptographInitiator(_cryInitiator).maxSupply());\\r\\n        } else {\\r\\n            //Inserting a community Cryptograph\\r\\n            _issue = CryptographIndexLogicV1(targetIndex).createACommunityGGBMA(msg.sender, CryptographInitiator(_cryInitiator).maxSupply());\\r\\n        }\\r\\n        emit CryptographEditionAdded(_issue, CryptographInitiator(_cryInitiator).maxSupply(), offi);\\r\\n\\r\\n        //Instance the Cryptograph and the auction\\r\\n        address newCryptographProxied;\\r\\n        address newMintingAuctionProxiedV1;\\r\\n        (newCryptographProxied, newMintingAuctionProxiedV1) = instanceCryptographGGBMA(_cryInitiator, _issue);\\r\\n\\r\\n        //Book the prototype at index0 of the edition\\r\\n\\r\\n        CryptographIndexLogicV1(targetIndex).mintAnEditionAt(\\r\\n            _issue,\\r\\n            0,\\r\\n            offi,\\r\\n            address(newCryptographProxied)\\r\\n        );\\r\\n\\r\\n        emit CryptographCreated(_issue, newCryptographProxied, offi);\\r\\n        mintingAuctionSupply[newMintingAuctionProxiedV1] = CryptographInitiator(_cryInitiator).maxSupply();\\r\\n\\r\\n        return _issue;\\r\\n    }\\r\\n\\r\\n    /// @notice Instance a Cryptograph/Minting Auction pair\\r\\n    /// @dev The MintingAuction is init() but TheCryptograph is not\\r\\n    /// @param _cryInitiator The cryptograph Initator the GGBMA will be created after\\r\\n    /// @return (new CryptographAddress, new MintingAuctionAddress)\\r\\n    function instanceCryptographGGBMA(address _cryInitiator, uint256 _issue) internal returns (address, address){\\r\\n\\r\\n\\r\\n        //Is the GGBMA published by PA or a third paty ?\\r\\n        bool _official; //Set to false by default\\r\\n        if(msg.sender == officialPublisher){\\r\\n            _official = true;\\r\\n        }\\r\\n\\r\\n        require(communityMintable || _official, \\\"community Cryptographs can\\u0027t be created at the moment\\\");\\r\\n\\r\\n        //Instance a new Cryptograph\\r\\n        address newCryptographProxied = address(new TheCryptographProxiedV1(targetCryLogicVersion, targetVC));\\r\\n\\r\\n        //Instance a new auction\\r\\n        address newMintingAuctionProxiedV1 = address(new MintingAuctionProxiedV1(targetMintingAuctionLogicVersion, targetVC));\\r\\n\\r\\n        //-----------------------\\r\\n\\r\\n        TheCryptographLogicV1(address(newCryptographProxied)).initCry(\\r\\n                _issue, 0, _official, newMintingAuctionProxiedV1, _cryInitiator, address(0)\\r\\n            );\\r\\n\\r\\n        //Init the auction\\r\\n        MintingAuctionLogicV1(address(newMintingAuctionProxiedV1)).initAuction(\\r\\n            newCryptographProxied,\\r\\n            _cryInitiator,\\r\\n            !_official //Will lock the auction setup if not an official Cryptograph\\r\\n        );\\r\\n        //-----------------------\\r\\n\\r\\n        //Setting hash and url\\r\\n        TheCryptographLogicV1(newCryptographProxied).setMediaHash(\\r\\n            CryptographInitiator(_cryInitiator).mediaHash()\\r\\n        );\\r\\n        TheCryptographLogicV1(newCryptographProxied).setMediaUrl(\\r\\n            CryptographInitiator(_cryInitiator).mediaUrl()\\r\\n        );\\r\\n\\r\\n        //Checking any bamboozling with the fees\\r\\n        if(!_official){\\r\\n                assert(MintingAuctionLogicV1(address(newMintingAuctionProxiedV1)).perpetualAltruismCut() \\u003e= 25000);\\r\\n            }\\r\\n\\r\\n        assert(\\r\\n            MintingAuctionLogicV1(address(newMintingAuctionProxiedV1)).perpetualAltruismCut() +\\r\\n            MintingAuctionLogicV1(address(newMintingAuctionProxiedV1)).publisherCut() +\\r\\n            MintingAuctionLogicV1(address(newMintingAuctionProxiedV1)).charityCut() +\\r\\n            MintingAuctionLogicV1(address(newMintingAuctionProxiedV1)).thirdPartyCut() == 100000\\r\\n            );\\r\\n\\r\\n        assert(MintingAuctionLogicV1(address(newMintingAuctionProxiedV1)).startTime() \\u003c=\\r\\n            MintingAuctionLogicV1(address(newMintingAuctionProxiedV1)).endTime());\\r\\n\\r\\n\\r\\n        return (address(newCryptographProxied), address(newMintingAuctionProxiedV1));\\r\\n    }\\r\\n\\r\\n    /// @notice Mint a Cryptograph/SA pair initialized to a GGBMA winner\\r\\n    /// @dev To be called BEFORE the bid funds are distributed to the publisher\\r\\n    /// @param _issue The issue number of the GGBMA\\r\\n    /// @param _isOfficial Is it an official or community GGBMA ?\\r\\n    /// @param _winner The address of someone eligible to win the auction\\r\\n    function mintGGBMA(uint256 _issue, bool _isOfficial, address _winner) external returns(bool){\\r\\n        require(msg.sender == targetAuctionHouse, \\\"Only the auction house can ask the factory to mint new copies for a GGBMA\\\");\\r\\n\\r\\n        //Grabbing the GGBMA\\r\\n        address _ggbma = TheCryptographLogicV1(\\r\\n                CryptographIndexLogicV1(targetIndex).getCryptograph(_issue, _isOfficial, 0)\\r\\n            ).myAuction();\\r\\n\\r\\n        //Calculating the claimant ranking\\r\\n        uint256 positionInAuction; //0\\r\\n\\r\\n        //Browse the BidLink chain until the link above us has a bid greater or equal to us\\r\\n        address currentLink = MintingAuctionLogicV1(_ggbma).bidLinks(MintingAuctionLogicV1(_ggbma).highestBidder());\\r\\n        bool stop = currentLink == address(0x0); //Do not even enter the loop if there is no highest bidder\\r\\n        while(!stop){\\r\\n            if(BidLink(currentLink).bidder() == _winner){\\r\\n                positionInAuction++; //Increasing the count (serial # start at 1 while counter start at 0)\\r\\n                stop = true;\\r\\n            } else if(BidLink(currentLink).below() == address(0x0)){ //Checking if we have reached the bottom\\r\\n                positionInAuction = 0; //We were not a bidder...\\r\\n                stop = true;\\r\\n            } else {\\r\\n                //Going down\\r\\n                positionInAuction++;\\r\\n                currentLink = BidLink(currentLink).below();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(positionInAuction != 0, \\\"Could not find your bid in this auction\\\");\\r\\n\\r\\n        //Checking if we can mint. No refunds as those are handled by the auction itself.\\r\\n        //The way we check for minting available is by checking if there is a standing bid.\\r\\n        require(MintingAuctionLogicV1(_ggbma).currentBids(_winner) != 0, \\\"You already minted your cryptograph\\\");\\r\\n\\r\\n        /*\\r\\n        Double entry attack possible here on third parties minted cryptographs, as initiators are user instanced.\\r\\n\\r\\n        Limitation of exploit :\\r\\n        -only \\\"views\\\" are called (so no state-changing gas stealing)\\r\\n        -only on community GGBMA\\r\\n\\r\\n        Consequence at worst inside cryptograph ecosystem : The attacker (who is the original creator of the GGBMA)\\r\\n        can make changes to each newly minted cryptograph (so that they are not all unique).\\r\\n\\r\\n        =\\u003e Not a bug. It\\u0027s a feature.\\r\\n\\r\\n        */\\r\\n\\r\\n        //Instance the Cryptograph\\r\\n        address newCryptographProxied;\\r\\n        address newSingleAuctionProxiedV1;\\r\\n        address initiator = MintingAuctionLogicV1(_ggbma).initiator();\\r\\n\\r\\n        (newCryptographProxied, newSingleAuctionProxiedV1) = instanceCryptograph(initiator, _isOfficial);\\r\\n\\r\\n        //Book the Cryptograph into the index\\r\\n        CryptographIndexLogicV1(targetIndex).mintAnEditionAt(\\r\\n            _issue, // Issue #\\r\\n            positionInAuction, // Serial #\\r\\n            _isOfficial,\\r\\n            address(newCryptographProxied)\\r\\n        );\\r\\n\\r\\n        //Init the cryptograph\\r\\n        TheCryptographLogicV1(newCryptographProxied).initCry(\\r\\n                _issue, positionInAuction, _isOfficial, newSingleAuctionProxiedV1, initiator, _winner\\r\\n            );\\r\\n\\r\\n        //Setting hash and url\\r\\n        TheCryptographLogicV1(newCryptographProxied).setMediaHash(\\r\\n            CryptographInitiator(initiator).mediaHash()\\r\\n        );\\r\\n        TheCryptographLogicV1(newCryptographProxied).setMediaUrl(\\r\\n            CryptographInitiator(initiator).mediaUrl()\\r\\n        );\\r\\n\\r\\n        //Locking the auction\\r\\n        SingleAuctionLogicV1(newSingleAuctionProxiedV1).lock();\\r\\n    }\\r\\n\\r\\n    /// @notice Set the ability for third parties to create their own cryptographs.\\r\\n    /// @dev False at creation\\r\\n    /// @param _communityMintable Are community Cryptographs mintable ?\\r\\n    function setCommunityMintable(bool _communityMintable) external {\\r\\n\\r\\n        require(msg.sender == officialPublisher, \\\"Only Perpetual Altruism can set communityMintable\\\");\\r\\n\\r\\n        communityMintable = _communityMintable;\\r\\n    }\\r\\n}\\r\\n\"},\"CryptographFactoryProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./CryptographFactoryV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title  Cryptograph Factory Proxy Smart Contract\\r\\n/// @notice The proxied Factory : this is this contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract CryptographFactoryProxiedV1 is VCProxy, CryptographFactoryHeaderV1, CryptographFactoryStorageInternalV1  {\\r\\n\\r\\n    constructor(uint256 _version, address _vc)  public\\r\\n    VCProxy(_version, _vc) //Call the VC proxy constructor so that we know where our logic code is\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //No other logic code as it is all proxied\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"},\"CryptographFactoryV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Factory Header\\r\\n/// @notice Contain all the events emitted by the factory\\r\\ncontract CryptographFactoryHeaderV1 {\\r\\n    event CryptographCreated(uint256 indexed cryptographIssue, address indexed cryptographAddress, bool indexed official);\\r\\n    event CryptographEditionAdded(uint256 indexed cryptographIssue, uint256 indexed editionSize, bool indexed official);\\r\\n    event CryptographEditionMinted(uint256 indexed cryptographIssue, uint256 indexed editionIssue, address cryptographAddress, bool indexed official);\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Factory Storage Internal\\r\\n/// @notice Contain all the storage of the Factory declared in a way that does not generate getters for Proxy use\\r\\ncontract CryptographFactoryStorageInternalV1 {\\r\\n\\r\\n    bool internal initialized; //A bool controlling if we have been initialized or not\\r\\n\\r\\n    address internal officialPublisher; //The address that is allowed to publish the official (i.e. non-community) cryptographs\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                    Linking section\\r\\n    ==================================================\\r\\n    Those are the addresses of other smart contracts in the ecosystem and relevant value to them\\r\\n    */\\r\\n    address internal targetVC; //Address of the version control that the Cryptograph should use (potentially different than ours)\\r\\n    address internal targetAuctionHouse; //Address of the Auction house used by Cryptograph\\r\\n    address internal targetIndex; //Address of the Cryptograph library storing both fan made and public cryptographs\\r\\n\\r\\n    // DO NOT PUT THE CRYPTOGRAPH PROXY CODE ADDRESS IN HERE, it needs to be in the logic code of the factory\\r\\n    // IDEM FOR SINGLE AUCTION PROXY CODE\\r\\n    uint256 internal targetCryLogicVersion; //Which version of the logic code in the Version Control array the cryptographs should use\\r\\n    //Which version of the logic code in the Version Control array the Single Auction should use\\r\\n    uint256 internal targetAuctionLogicVersion;\\r\\n    //Which version of the logic code in the Version Control array the Single Auction Bid should use\\r\\n    uint256 internal targetAuctionBidLogicVersion;\\r\\n    //Which version of the logic code in the Version Control array the Minting Auction should use\\r\\n    uint256 internal targetMintingAuctionLogicVersion;\\r\\n\\r\\n    //Actual data storage section\\r\\n    mapping (address =\\u003e uint256) internal mintingAuctionSupply; //How much token can be created by each MintingAuction\\r\\n\\r\\n    //Are Community cryptographs allowed to be minted ?\\r\\n    bool internal communityMintable;\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Factory Storage Public\\r\\n/// @notice Contain all the storage of the Factory declared in a way that generates getters for Logic use\\r\\ncontract CryptographFactoryStoragePublicV1 {\\r\\n\\r\\n    bool public initialized; //A bool controlling if we have been initialized or not\\r\\n\\r\\n    address public officialPublisher; //The address that is allowed to publish the non-community cryptographs\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                    Linking section\\r\\n    ==================================================\\r\\n    Those are the addresses of other smart contracts in the ecosystem and the relevant Version Control index value to them\\r\\n    */\\r\\n    address public targetVC; //Address of the version control the cryptographs should use\\r\\n    address public targetAuctionHouse; //Address of the Auction house used by cryptograph\\r\\n    address public targetIndex; //Address of the Cryptograph library storing both fan made and public cryptographs\\r\\n\\r\\n    uint256 public targetCryLogicVersion; //Which version of the logic code in the Version Control array the cryptographs should use\\r\\n    uint256 public targetAuctionLogicVersion; //Which version of the logic code in the Version Control array the Single Auction should use\\r\\n    //Which version of the logic code in the Version Control array the Single Auction Bid should use\\r\\n    uint256 public targetAuctionBidLogicVersion;\\r\\n    //Which version of the logic code in the Version Control array the Minting Auction should use\\r\\n    uint256 public targetMintingAuctionLogicVersion;\\r\\n\\r\\n    //Actual data storage section\\r\\n    mapping (address =\\u003e uint256) public mintingAuctionSupply; //How much token can be created by each MintingAuction\\r\\n\\r\\n    //Are Community cryptographs allowed to be minted ?\\r\\n    bool public communityMintable;\\r\\n}\"},\"CryptographIndexLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./CryptographIndexV1.sol\\\";\\r\\nimport \\\"./EditionIndexerProxiedV1.sol\\\";\\r\\nimport \\\"./EditionIndexerLogicV1.sol\\\";\\r\\nimport \\\"./ERC2665LogicV1.sol\\\";\\r\\n\\r\\n///@title Cryptograph Index Logic Contract\\r\\n///@author Guillaume Gonnaud\\r\\n///@notice Provide the logic code related to remembering the address of all the published cryptographs. Cast this contract on the proxy.\\r\\n///@dev This contract and its functions should be called by the relevant proxy smart contract only\\r\\ncontract CryptographIndexLogicV1 is VCProxyData, CryptographIndexHeaderV1, CryptographIndexStoragePublicV1  {\\r\\n\\r\\n    /// @notice Generic constructor, empty\\r\\n    /// @dev This contract is meant to be used in a delegatecall and hence it\\u0027s memory state is irrelevant\\r\\n    constructor() public\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //Modifier for functions that requires to be called only by the cryptograph factory\\r\\n    modifier restrictedToFactory(){\\r\\n        require((msg.sender == factory), \\\"Only the cryptograph factory smart contract can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Init function of the Index\\r\\n    /// @dev Callable only once after deployment\\r\\n    /// @param _factory The address of the CryptographFactory Instance\\r\\n    /// @param _indexerLogicCodeIndex The index in the VC of editionIndexers logic code\\r\\n    /// @param _ERC2665Lieutenant The address of the ERC721 Instance\\r\\n    function init(address _factory, uint256 _indexerLogicCodeIndex, address _ERC2665Lieutenant) external returns(bool){\\r\\n        require(!initialized, \\\"The cryptograph index has already been initialized\\\");\\r\\n        factory = _factory;\\r\\n        indexerLogicCodeIndex = _indexerLogicCodeIndex;\\r\\n        initialized = true;\\r\\n        cryptographs.push(address(0x0));\\r\\n        communityCryptographs.push(address(0x0));\\r\\n        ERC2665Lieutenant = _ERC2665Lieutenant;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Insert a cryptograph in the array and return the new index position\\r\\n    /// @dev Only callable by Factory\\r\\n    /// @param _cryptograph The address of the cryptograph to insert in the index\\r\\n    /// @return (uint) The new index position in the cryptograph array\\r\\n    function insertACryptograph(address _cryptograph) external restrictedToFactory() returns(uint){\\r\\n\\r\\n        //Update the ERC2665\\r\\n        ERC2665LogicV1(ERC2665Lieutenant).MintACryptograph(_cryptograph);\\r\\n        cryptographs.push(_cryptograph);\\r\\n        return (cryptographs.length - 1); //Inserting the cryptograph and returning the position in the array\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Insert a community cryptograph in the array and return the new index position\\r\\n    /// @dev Only callable by Factory\\r\\n    /// @param _communityCryptograph The address of the community cryptograph to insert in the index\\r\\n    /// @return (uint) The new index position in the community cryptograph array\\r\\n    function insertACommunityCryptograph(address _communityCryptograph) external restrictedToFactory() returns(uint){\\r\\n\\r\\n        //Update the ERC2665\\r\\n        ERC2665LogicV1(ERC2665Lieutenant).MintACryptograph(_communityCryptograph);\\r\\n\\r\\n        communityCryptographs.push(_communityCryptograph);\\r\\n        return (communityCryptographs.length - 1); //Inserting the community cryptograph and returning new position in array\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Create a new cryptograph edition and return the new index position\\r\\n    /// @dev Only callable by Factory\\r\\n    /// @param _minter The address of the user wallet that will have the responsability to mint all the editions\\r\\n    /// @param _editionSize The maximum number of cryptograph that can be minted in the edition\\r\\n    /// @return (uint) The new index position in the cryptograph array\\r\\n    function createAnEdition(address _minter, uint256 _editionSize) external restrictedToFactory() returns(uint){\\r\\n        require(_minter != address(0) \\u0026\\u0026 _editionSize != 0,\\r\\n            \\\"Minter address and edition size must be greater than 0\\\"\\r\\n        );\\r\\n\\r\\n        //Create a new indexer for the edition\\r\\n        EditionIndexerProxiedV1 _proxied = new EditionIndexerProxiedV1(indexerLogicCodeIndex, vc);\\r\\n\\r\\n        //Initializing the indexer\\r\\n        EditionIndexerLogicV1(address(_proxied)).init(address(this), _minter, _editionSize);\\r\\n\\r\\n        //Adding the indexer to the mapping\\r\\n        editionSizes[address(_proxied)] = _editionSize;\\r\\n\\r\\n        //Indicate our type as edition\\r\\n        cryptographType[address(_proxied)] = 1;\\r\\n\\r\\n        //Inserting the edition and returning the position in the array\\r\\n        cryptographs.push(address(_proxied));\\r\\n        return (cryptographs.length - 1);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Create a new cryptograph edition starting at 0 and return the new index position\\r\\n    /// @dev Only callable by Factory\\r\\n    /// @param _minter The address of the user wallet that will have the responsability to mint all the editions\\r\\n    /// @param _editionSize The maximum number of cryptograph that can be minted in the edition\\r\\n    /// @return (uint) The new index position in the cryptograph array\\r\\n    function createAGGBMA(address _minter, uint256 _editionSize) external restrictedToFactory() returns(uint){\\r\\n        require(_minter != address(0) \\u0026\\u0026 _editionSize != 0,\\r\\n            \\\"Minter address and edition size must be greater than 0\\\"\\r\\n        );\\r\\n\\r\\n        //Create a new indexer for the edition\\r\\n        EditionIndexerProxiedV1 _proxied = new EditionIndexerProxiedV1(indexerLogicCodeIndex, vc);\\r\\n\\r\\n        //Initializing the indexer\\r\\n        EditionIndexerLogicV1(address(_proxied)).init0(address(this), _minter, _editionSize+1);\\r\\n\\r\\n        //Adding the indexer to the mapping\\r\\n        editionSizes[address(_proxied)] = _editionSize;\\r\\n\\r\\n        //Indicate our type as edition\\r\\n        cryptographType[address(_proxied)] = 1;\\r\\n\\r\\n        //Inserting the edition and returning the position in the array\\r\\n        cryptographs.push(address(_proxied));\\r\\n        return (cryptographs.length - 1);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Create a new community edition and return the new index position\\r\\n    /// @dev Only callable by Factory\\r\\n    /// @param _minter The address of the user wallet that will have the responsability to mint all the editions\\r\\n    /// @param _editionSize The maximum number of community cryptograph that can be minted in the edition\\r\\n    /// @return (uint) The new index position in the cryptograph community array\\r\\n    function createACommunityEdition(address _minter, uint256 _editionSize) external restrictedToFactory() returns(uint){\\r\\n        //Create a new indexer for the edition\\r\\n        EditionIndexerProxiedV1 _proxied = new EditionIndexerProxiedV1(indexerLogicCodeIndex, vc);\\r\\n\\r\\n        //Initializing the indexer\\r\\n        EditionIndexerLogicV1(address(_proxied)).init(address(this), _minter, _editionSize);\\r\\n\\r\\n        //Adding the indexer to the mapping\\r\\n        editionSizes[address(_proxied)] = _editionSize;\\r\\n\\r\\n        //Indicate our type as edition\\r\\n        cryptographType[address(_proxied)] = 1;\\r\\n\\r\\n        //Inserting the edition and returning the position in the array\\r\\n        communityCryptographs.push(address(_proxied));\\r\\n        return (communityCryptographs.length - 1);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Create a new cryptograph community edition starting at 0 and return the new index position\\r\\n    /// @dev Only callable by Factory\\r\\n    /// @param _minter The address of the user wallet that will have the responsability to mint all the editions\\r\\n    /// @param _editionSize The maximum number of cryptograph that can be minted in the edition\\r\\n    /// @return (uint) The new index position in the community cryptograph array\\r\\n    function createACommunityGGBMA(address _minter, uint256 _editionSize) external restrictedToFactory() returns(uint){\\r\\n        //Create a new indexer for the edition\\r\\n        EditionIndexerProxiedV1 _proxied = new EditionIndexerProxiedV1(indexerLogicCodeIndex, vc);\\r\\n\\r\\n        //Initializing the indexer\\r\\n        EditionIndexerLogicV1(address(_proxied)).init0(address(this), _minter, _editionSize+1); //One more for the prototype\\r\\n\\r\\n        //Adding the indexer to the mapping\\r\\n        editionSizes[address(_proxied)] = _editionSize;\\r\\n\\r\\n        //Indicate our type as edition\\r\\n        cryptographType[address(_proxied)] = 1;\\r\\n\\r\\n        //Inserting the edition and returning the position in the array\\r\\n        communityCryptographs.push(address(_proxied));\\r\\n        return (communityCryptographs.length - 1);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Mint an Edition Cryptograph\\r\\n    /// @dev Only callable by Factory\\r\\n    /// @param _minter The address of the user wallet that is minting the cryptograph\\r\\n    /// @param _cryptographIssue The issue # of the edition we are minting a new member of\\r\\n    /// @param _isOfficial Is it a community edition or not ?\\r\\n    /// @param _cryptograph The address of the cryptograph we are inserting in the edition indexer\\r\\n    /// @return (uint) The serial of the newly inserted cryptograph\\r\\n    function mintAnEdition(\\r\\n        address _minter,\\r\\n        uint256 _cryptographIssue,\\r\\n        bool _isOfficial,\\r\\n        address _cryptograph\\r\\n    ) external restrictedToFactory() returns(uint){\\r\\n\\r\\n\\r\\n        //Update the ERC2665\\r\\n        ERC2665LogicV1(ERC2665Lieutenant).MintACryptograph(_cryptograph);\\r\\n\\r\\n        //Indicate our type as edition\\r\\n        cryptographType[_cryptograph] = 1;\\r\\n\\r\\n        if(_isOfficial){\\r\\n            uint256 edIdx = EditionIndexerLogicV1(cryptographs[_cryptographIssue]).insertACryptograph(_cryptograph, _minter);\\r\\n            return edIdx;\\r\\n        } else {\\r\\n            uint256 edIdx = EditionIndexerLogicV1(communityCryptographs[_cryptographIssue]).insertACryptograph(_cryptograph, _minter);\\r\\n            return edIdx;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Mint an Edition Cryptograph with a specific serial\\r\\n    /// @dev Only callable by Factory\\r\\n    /// @param _cryptographIssue The issue # of the edition we are minting a new member of\\r\\n    /// @param _cryptographSerial The serial # we want to insert in the edition\\r\\n    /// @param _isOfficial Is it a community edition or not ?\\r\\n    /// @param _cryptograph The address of the cryptograph we are inserting in the edition indexer\\r\\n    function mintAnEditionAt(\\r\\n        uint256 _cryptographIssue,\\r\\n        uint256 _cryptographSerial,\\r\\n        bool _isOfficial,\\r\\n        address _cryptograph\\r\\n    ) external restrictedToFactory(){\\r\\n\\r\\n\\r\\n        //Update the ERC2665\\r\\n        ERC2665LogicV1(ERC2665Lieutenant).MintACryptograph(_cryptograph);\\r\\n\\r\\n        //Indicate our type as edition\\r\\n        cryptographType[_cryptograph] = 1;\\r\\n\\r\\n        if(_isOfficial){\\r\\n            EditionIndexerLogicV1(cryptographs[_cryptographIssue]).insertACryptographAt(_cryptograph, _cryptographSerial);\\r\\n        } else {\\r\\n            EditionIndexerLogicV1(communityCryptographs[_cryptographIssue]).insertACryptographAt(_cryptograph, _cryptographSerial);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Return the address of a Cryptograph using it\\u0027s parameters\\r\\n    /// @dev You can then cast this address as a Cryptograph to recover the single auction associated\\r\\n    /// @param _cryptographIssue The issue # of the Cryptograph\\r\\n    /// @param _isOfficial True if official Cryptograph, false if community Cryptograph\\r\\n    /// @param _editionSerial The edition serial # of the Cryptograph. Ignored if the Cryptograph is not an edition\\r\\n    /// @return The address of the grabbed cryptograph\\r\\n    function getCryptograph(uint256 _cryptographIssue, bool _isOfficial, uint256 _editionSerial) external view returns(address){\\r\\n        if(_isOfficial){\\r\\n            if(cryptographType[address(cryptographs[_cryptographIssue])] == 0){\\r\\n                //We are unique\\r\\n                return(address(cryptographs[_cryptographIssue]));\\r\\n            } else {\\r\\n                //We are an edition/GGBMA\\r\\n                return(address(EditionIndexerLogicV1(cryptographs[_cryptographIssue]).cryptographs(_editionSerial)));\\r\\n            }\\r\\n        } else {\\r\\n            if(cryptographType[address(communityCryptographs[_cryptographIssue])] == 0){\\r\\n               //We are unique\\r\\n                return(address(communityCryptographs[_cryptographIssue]));\\r\\n            } else {\\r\\n                //We are an edition/GGBMA\\r\\n                return(address(EditionIndexerLogicV1(communityCryptographs[_cryptographIssue]).cryptographs(_editionSerial)));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"CryptographIndexProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./CryptographIndexV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title  Cryptograph Index Proxy Smart Contract\\r\\n/// @notice The proxied Index : this is this contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract CryptographIndexProxiedV1 is VCProxy, CryptographIndexHeaderV1, CryptographIndexStorageInternalV1  {\\r\\n\\r\\n    constructor(uint256 _version, address _vc)  public\\r\\n    VCProxy(_version, _vc) //Call the VC proxy constructor so that we know where our logic code is\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //No other logic code as it is all proxied\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"},\"CryptographIndexV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Cryptoraph Indexer Header\\r\\n/// @notice Contain all the events emitted by the Cryptoraph Indexer\\r\\ncontract CryptographIndexHeaderV1 {\\r\\n}\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Cryptograph Indexer Storage Internal\\r\\n/// @notice Contain all the storage of the Cryptograph Indexer declared in a way that don\\u0027t generate getters for Proxy use\\r\\ncontract CryptographIndexStorageInternalV1 {\\r\\n    bool internal initialized; //Bool to check if the index has been initialized\\r\\n    address internal factory; //The factory smart contract (proxy) that will publish the cryptographs\\r\\n    address[] internal cryptographs;\\r\\n    address[] internal communityCryptographs;\\r\\n    mapping (address =\\u003e uint) internal editionSizes; //Set to 0 if unique (not edition)\\r\\n    mapping (address =\\u003e uint) internal cryptographType; //0 = Unique, 1 = Edition, 2 = Minting\\r\\n    uint256 internal indexerLogicCodeIndex; //The index in the Version Control of the logic code\\r\\n\\r\\n    address internal ERC2665Lieutenant;\\r\\n}\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Cryptograph Indexer Storage Public\\r\\n/// @notice Contain all the storage of the Cryptograph Indexer declared in a way that generates getters for logic use\\r\\ncontract CryptographIndexStoragePublicV1 {\\r\\n    bool public initialized; //Bool to check if the index has been initialized\\r\\n    address public factory; //The factory smart contract (proxy) that will publish the cryptographs\\r\\n    address[] public cryptographs;\\r\\n    address[] public communityCryptographs;\\r\\n    mapping (address =\\u003e uint) public editionSizes; //Set to 0 if unique (not edition)\\r\\n    mapping (address =\\u003e uint) public cryptographType; //0 = Unique, 1 = Edition, 2 = Minting\\r\\n    uint256 public indexerLogicCodeIndex; //The index in the VC of the logic code\\r\\n\\r\\n    address public ERC2665Lieutenant;\\r\\n}\\r\\n\\r\\n\"},\"CryptographInitiator.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/// @author Guillaume Gonnaud\\r\\n/// @title Cryptograph Initiator\\r\\n/// @notice Basically a solidity bean so that we can pass it as argument without hitting stack too deep errors when creating a cryptograph\\r\\ncontract CryptographInitiator{\\r\\n    address public owner; // The desired owner of the Cryptograph\\r\\n    string public name; // The desired name of the Cryptograph\\r\\n    string public creator; // The desired creatpr of the Cryptograph\\r\\n    uint256 public auctionStartTime; //The desired unix (seconds) timestamp at which the initial auction should start\\r\\n    uint256 public auctionSecondsDuration; // The duration in seconds of the initial auction\\r\\n    address public publisher; // The address of the publisher. Can edit media url and hash for a cryptograph.\\r\\n    uint256 public publisherCut; // How much out of 100k parts of profits should the publisher get. e.g. publisherCut = 25000 means 1/4\\r\\n    address public charity; // The address of the charity\\r\\n    uint256 public charityCut; // The charity cut out of 100k\\r\\n    address public thirdParty; // The address of a third party\\r\\n    uint256 public thirdPartyCut; // The third party cut out of 100k\\r\\n    uint256 public perpetualAltruismCut; // Will always be set to 25k except very special occasions.\\r\\n    uint256 public maxSupply; // How many of these cryptographs should be minted maximum\\r\\n    uint256 public startingPrice; // The Starting price of the auction\\r\\n    uint256 public cryptographIssue; // The desired issue of the cryptograph (only for editions)\\r\\n    string public mediaHash; // The desired media hash of the cryptograph\\r\\n    string public mediaUrl; // The desired media url of the cryptograph\\r\\n\\r\\n    /// @param _name The desired name of the Cryptograph\\r\\n    /// @param _auctionStartTime The desired unix (seconds) timestamp at which the initial auction should start\\r\\n    /// @param _auctionSecondsDuration The duration in seconds of the initial auction\\r\\n    /// @param _publisher The address of the publisher. Can edit media url and hash for a cryptograph.\\r\\n    /// @param _publisherCut How much out of 100k parts of profits should the publisher get. e.g. _publisherCut = 25000 mean 1/4 of all profits\\r\\n    /// @param _charity The address of the charity\\r\\n    /// @param _charityCut The charity cut out of 100k\\r\\n    /// @param _thirdParty The address of a third party\\r\\n    /// @param _thirdPartyCut The third party cut out of 100k\\r\\n    /// @param _perpetualAltruismCut Will always be set to 25k except very special occasions.\\r\\n    /// @param _maxSupply How many of these cryptographs should be minted maximum\\r\\n    /// @param _startingPrice The Starting price of the auction\\r\\n    /// @param _cryptographIssue The desired issue of the cryptograph (only for editions)\\r\\n    constructor (\\r\\n                string memory _name,\\r\\n                uint256 _auctionStartTime,\\r\\n                uint256 _auctionSecondsDuration,\\r\\n                address _publisher,\\r\\n                uint256 _publisherCut,\\r\\n                address _charity,\\r\\n                uint256 _charityCut,\\r\\n                address _thirdParty,\\r\\n                uint256 _thirdPartyCut,\\r\\n                uint256 _perpetualAltruismCut,\\r\\n                uint256 _maxSupply,\\r\\n                uint256 _startingPrice,\\r\\n                uint256 _cryptographIssue\\r\\n    ) public{\\r\\n        owner = msg.sender;\\r\\n        name = _name;\\r\\n        auctionStartTime = _auctionStartTime;\\r\\n        auctionSecondsDuration = _auctionSecondsDuration;\\r\\n        publisher = _publisher;\\r\\n        publisherCut = _publisherCut;\\r\\n        charity = _charity;\\r\\n        charityCut = _charityCut;\\r\\n        thirdParty = _thirdParty;\\r\\n        thirdPartyCut = _thirdPartyCut;\\r\\n        perpetualAltruismCut = _perpetualAltruismCut;\\r\\n        maxSupply = _maxSupply;\\r\\n        startingPrice = _startingPrice;\\r\\n        cryptographIssue = _cryptographIssue;\\r\\n\\r\\n    }\\r\\n\\r\\n    modifier restrictedToOwner(){\\r\\n        require((msg.sender == owner), \\\"Only the creator of this Contract can modify its memory\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setName(string calldata _name) external restrictedToOwner(){\\r\\n        name = _name;\\r\\n    }\\r\\n\\r\\n    function setAuctionStartTime(uint256 _auctionStartTime) external restrictedToOwner(){\\r\\n        auctionStartTime = _auctionStartTime;\\r\\n    }\\r\\n\\r\\n    function setAuctionSecondsDuration(uint256 _auctionSecondsDuration) external restrictedToOwner(){\\r\\n        auctionSecondsDuration = _auctionSecondsDuration;\\r\\n    }\\r\\n\\r\\n    function setPublisher(address _publisher) external restrictedToOwner(){\\r\\n        publisher = _publisher;\\r\\n    }\\r\\n\\r\\n    function setPublisherCut(uint256 _publisherCut) external restrictedToOwner(){\\r\\n        publisherCut = _publisherCut;\\r\\n    }\\r\\n\\r\\n    function setCharity(address _charity) external restrictedToOwner(){\\r\\n        charity = _charity;\\r\\n    }\\r\\n\\r\\n    function setCharityCut(uint256 _charityCut) external restrictedToOwner(){\\r\\n        charityCut = _charityCut;\\r\\n    }\\r\\n\\r\\n    function setThirdParty(address _thirdParty) external restrictedToOwner(){\\r\\n        thirdParty = _thirdParty;\\r\\n    }\\r\\n\\r\\n    function setThirdPartyCut(uint256 _thirdPartyCut) external restrictedToOwner(){\\r\\n        thirdPartyCut = _thirdPartyCut;\\r\\n    }\\r\\n\\r\\n    function setPerpetualAltruismCut(uint256 _perpetualAltruismCut) external restrictedToOwner(){\\r\\n        perpetualAltruismCut = _perpetualAltruismCut;\\r\\n    }\\r\\n\\r\\n    function setMaxSupply(uint256 _maxSupply) external restrictedToOwner(){\\r\\n        maxSupply = _maxSupply;\\r\\n    }\\r\\n\\r\\n    function setStartingPrice(uint256 _startingPrice) external restrictedToOwner(){\\r\\n        startingPrice = _startingPrice;\\r\\n    }\\r\\n\\r\\n    function setCryptographIssue(uint256 _cryptographIssue) external restrictedToOwner(){\\r\\n        cryptographIssue = _cryptographIssue;\\r\\n    }\\r\\n\\r\\n    function setMediaHash(string calldata _mediahash) external restrictedToOwner(){\\r\\n        mediaHash = _mediahash;\\r\\n    }\\r\\n\\r\\n    function setMediaUrl(string calldata _mediaUrl) external restrictedToOwner(){\\r\\n        mediaUrl = _mediaUrl;\\r\\n    }\\r\\n\\r\\n    function setCreator(string calldata _creator) external restrictedToOwner(){\\r\\n        creator = _creator;\\r\\n    }\\r\\n\\r\\n}\"},\"CryptographKYCLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./CryptographKYCV1.sol\\\";\\r\\n\\r\\n/// @title Cryptograph KYC Logic Contract\\r\\n/// @author Guillaume Gonnaud 2020\\r\\n/// @notice Provides the logic code for the KYC of bidders\\r\\n/// @dev Price feed is in ETH and NOT an oracle because it\\u0027s a KYC price feed (We have to verify transaction above a certain GBP amount)\\r\\ncontract CryptographKYCLogicV1 is VCProxyData, CryptographKYCHeaderV1, CryptographKYCStoragePublicV1  {\\r\\n\\r\\n    /// @notice Generic constructor, empty\\r\\n    /// @dev This contract is meant to be used in a delegatecall and hence its memory state is irrelevant\\r\\n    constructor() public\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    modifier restrictedToOperators(){\\r\\n        require((msg.sender == perpetualAltruism || authorizedOperators[msg.sender]), \\\"Only operators can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Init function of the KYC contract\\r\\n    /// @dev Callable only once after deployment\\r\\n    function init() external {\\r\\n        require(perpetualAltruism == address(0), \\\"Already initalized\\\");\\r\\n        perpetualAltruism = msg.sender;\\r\\n        priceLimit = uint256(0) - uint256(1);\\r\\n        emit PriceLimit(priceLimit);\\r\\n    }\\r\\n\\r\\n    /// @notice Used to allow other wallets to manage the KYC\\r\\n    /// @dev Only callable by Perpetual Altruism/Other operators\\r\\n    /// @param _operator The address of the operator\\r\\n    /// @param _operating If the operator is allowed to operate\\r\\n    function setOperator(address _operator, bool _operating) external restrictedToOperators(){\\r\\n        authorizedOperators[_operator] = _operating;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Used to set a price limit above which wallets need to be KYCed\\r\\n    /// @dev Only callable by Perpetual Altruism/Other operators\\r\\n    /// @param _newPrice The new price limit\\r\\n    function setPriceLimit(uint256 _newPrice) external restrictedToOperators(){\\r\\n        priceLimit = _newPrice;\\r\\n        emit PriceLimit(_newPrice);\\r\\n    }\\r\\n\\r\\n    /// @notice Used to allow other wallets to manage the KYC\\r\\n    /// @dev Only callable by Perpetual Altruism/Other operators\\r\\n    /// @param _user The address of the user\\r\\n    /// @param _kyc Is the user allowed to bid for any amount ?\\r\\n    function setKyc(address _user, bool _kyc) external restrictedToOperators(){\\r\\n        kycUsers[_user] = _kyc;\\r\\n        emit KYCed(_user, _kyc);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Check if a user is allowed to transact this amount\\r\\n    /// @dev Anyone can check\\r\\n    /// @param _user The address of the user\\r\\n    /// @param _amount The amount of the bid\\r\\n    function checkKyc(address _user, uint256 _amount) external view returns(bool){\\r\\n        return (_amount \\u003c= priceLimit || kycUsers[_user]);\\r\\n    }\\r\\n\\r\\n}\"},\"CryptographKYCProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./CryptographKYCV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2020\\r\\n/// @title  Cryptograph KYC Proxy Smart Contract\\r\\n/// @notice The proxied KYC : this is the contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract CryptographKYCProxiedV1 is VCProxy, CryptographKYCHeaderV1, CryptographKYCStorageInternalV1  {\\r\\n\\r\\n    constructor(uint256 _version, address _vc)  public\\r\\n    VCProxy(_version, _vc) //Calls the VC proxy constructor so that we know where our logic code is\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n\\r\\n    //No other logic code as it is all proxied\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"},\"CryptographKYCV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2020\\r\\n/// @title Cryptograph KYC header\\r\\n/// @notice Contain all the events emitted by the Cryptograph KYC\\r\\ncontract CryptographKYCHeaderV1 {\\r\\n\\r\\n    /// @dev Event fired whenever a wallet address is added or removed from the list of KYCED wallet\\r\\n    event KYCed(address indexed _user, bool indexed _isValid);\\r\\n\\r\\n    /// @dev Event fired whenever a new price (in wei) is set for the KYC limit\\r\\n    event PriceLimit(uint256 indexed _newPrice);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2020\\r\\n/// @title Cryptograph KYC  Storage Internal\\r\\n/// @notice Contain all the storage of the Cryptograph KYC  declared in a way that don\\u0027t generate getters for Proxy use\\r\\ncontract CryptographKYCStorageInternalV1 {\\r\\n\\r\\n    //Perpetual Altruism, the creator of this smart contract\\r\\n    address internal perpetualAltruism;\\r\\n\\r\\n    //The list of wallets that can publish a new price limit  \\u0026 add/remove wallets from the kyc\\r\\n    mapping(address =\\u003e bool) internal authorizedOperators;\\r\\n\\r\\n    //The price in wei above which a transaction need a KYC. set to 0 to refuse all transactions, to UINT256MAX to allow all.\\r\\n    uint256 internal priceLimit;\\r\\n\\r\\n    //The mapping of KYCED users\\r\\n    mapping(address =\\u003e bool) internal kycUsers;\\r\\n\\r\\n}\\r\\n\\r\\n/// @author Guillaume Gonnaud 2020\\r\\n/// @title Cryptograph KYC  Storage Internal\\r\\n/// @notice Contain all the storage of the Cryptograph KYC  declared in a way that don\\u0027t generate getters for Proxy use\\r\\ncontract CryptographKYCStoragePublicV1 {\\r\\n\\r\\n    //Perpetual Altruism, the creator of this smart contract\\r\\n    address public perpetualAltruism;\\r\\n\\r\\n    //The list of wallets that can publish a new price limit  \\u0026 add/remove wallets from the kyc\\r\\n    mapping(address =\\u003e bool) public authorizedOperators;\\r\\n\\r\\n    //The price in wei above which a transaction need a KYC. set to 0 to refuse all transactions, to UINT256MAX to allow all.\\r\\n    uint256 public priceLimit;\\r\\n\\r\\n    //The mapping of KYCED users\\r\\n    mapping(address =\\u003e bool) public kycUsers;\\r\\n}\"},\"EditionIndexerLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./EditionIndexerV1.sol\\\";\\r\\n\\r\\n/// @title Edition Indexer Logic Contract\\r\\n/// @author Guillaume Gonnaud\\r\\n/// @notice Provides the logic code for publishing and interacting with editions, nested into the Cryptograph Indexer\\r\\n/// @dev This contract and its functions should be called by the relevant proxy smart contract only\\r\\ncontract EditionIndexerLogicV1 is VCProxyData, EditionIndexerHeaderV1, EditionIndexerStoragePublicV1  {\\r\\n\\r\\n    /// @notice Generic constructor, empty\\r\\n    /// @dev This contract is meant to be used in a delegatecall and hence its memory state is irrelevant\\r\\n    constructor() public\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //Modifier for functions that require to be called only by the index\\r\\n    modifier restrictedToIndex(){\\r\\n        require((msg.sender == index), \\\"Only the cryptograph index smart contract can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Init function of the Indexer, starting at index 1\\r\\n    /// @dev Callable only once after instanciation\\r\\n    /// @param _index The address of the parent, main indexer\\r\\n    /// @param _minter The address of the minter for this edition\\r\\n    /// @param _editionSize The maximum number of cryptographs in this edition\\r\\n    /// @return true\\r\\n    function init(address _index, address _minter, uint256 _editionSize) external returns(bool){\\r\\n        require(!initialized, \\\"This Edition Indexer has already been initialized\\\");\\r\\n        index = _index;\\r\\n        minter = _minter;\\r\\n        editionSize = _editionSize;\\r\\n        initialized = true;\\r\\n        cryptographs.push(address(0x0)); //There is no cryptograph edition with serial 0\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Init function of the Indexer, starting at index 0\\r\\n    /// @dev Callable only once after instanciation\\r\\n    /// @param _index The address of the parent, main indexer\\r\\n    /// @param _minter The address of the minter for this edition\\r\\n    /// @param _editionSize The maximum number of cryptographs in this edition\\r\\n    /// @return true\\r\\n    function init0(address _index, address _minter, uint256 _editionSize) external returns(bool){\\r\\n        require(!initialized, \\\"This Edition Indexer has already been initialized\\\");\\r\\n        index = _index;\\r\\n        minter = _minter;\\r\\n        editionSize = _editionSize;\\r\\n        initialized = true;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Insert a cryptograph in the array and return the new index position\\r\\n    /// @dev Callable only by the index\\r\\n    /// @param _cryptograph The address of the inserted cryptograph\\r\\n    /// @param _minter The address of the minter for this cryptograph\\r\\n    /// @return The new position in the array\\r\\n    function insertACryptograph(address _cryptograph, address _minter) external restrictedToIndex() returns(uint){\\r\\n        require(cryptographs.length \\u003c= editionSize, \\\"The full amount of Cryptographs for this edition has been published\\\");\\r\\n        require(_minter == minter, \\\"Only the publisher can mint new Cryptographs for this edition\\\");\\r\\n        cryptographs.push(_cryptograph);\\r\\n        return (cryptographs.length - 1); //Inserting the cryptograph and returning the position in the array\\r\\n    }\\r\\n\\r\\n    /// @notice Insert a cryptograph in the array at a specific position\\r\\n    /// @dev Callable only by the index. Must be smaller than edition size. HAS A LOOP.\\r\\n    /// @param _cryptograph The address of the inserted cryptograph\\r\\n    /// @param _index The desired position\\r\\n    function insertACryptographAt(address _cryptograph, uint256 _index) external restrictedToIndex(){\\r\\n\\r\\n        if(cryptographs.length \\u003c= _index){\\r\\n            while(cryptographs.length \\u003c= _index){\\r\\n                cryptographs.push();\\r\\n            }\\r\\n        }\\r\\n        cryptographs[_index] = _cryptograph; //Inserting the cryptograph\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"EditionIndexerProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./EditionIndexerV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title  Cryptograph Edition Indexer Proxy Smart Contract\\r\\n/// @notice The proxied Edition Indexer : this is the contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract EditionIndexerProxiedV1 is VCProxy, EditionIndexerHeaderV1, EditionIndexerStorageInternalV1  {\\r\\n\\r\\n    constructor(uint256 _version, address _vc)  public\\r\\n    VCProxy(_version, _vc) //Calls the VC proxy constructor so that we know where our logic code is\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //No other logic code as it is all proxied\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"},\"EditionIndexerV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Edition Indexer Header\\r\\n/// @notice Contain all the events emitted by the Edition Indexer\\r\\ncontract EditionIndexerHeaderV1 {\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Edition Indexer Storage Internal\\r\\n/// @notice Contain all the storage of the Edition Indexer declared in a way that don\\u0027t generate getters for Proxy use\\r\\ncontract EditionIndexerStorageInternalV1 {\\r\\n    bool internal initialized; //Bool to check if the indexer have been initialized\\r\\n    address internal minter; //The address of the minter, the only person allowed to add new cryptographs\\r\\n    address internal index; //The address of the index, the only address allowed to interact with the publishing functions\\r\\n    uint256 internal editionSize; //The total amount of cryptographs to be minted in this edition\\r\\n    address[] internal cryptographs;\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Edition Indexer Storage Public\\r\\n/// @notice Contain all the storage of the Edition Indexer declared in a way that generate getters for Logic use\\r\\ncontract EditionIndexerStoragePublicV1 {\\r\\n    bool public initialized; //Bool to check if the index has been initialized\\r\\n    address public minter; //The address of the minter, only person allowed to add new cryptographs\\r\\n    address public index; //The address of the index, only address allowed to interact with the publishing functions\\r\\n    uint256 public editionSize; //The total amount of cryptographs to be minted in this edition\\r\\n    address[] public cryptographs;\\r\\n}\\r\\n\\r\\n\"},\"ERC2665LogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./ERC2665V1.sol\\\";\\r\\nimport \\\"./TheCryptographLogicV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2020\\r\\n/// @title  Cryptograph ERC2665 Mimic Smart Contract\\r\\n/// @notice Provide the logic code for third parties to read cryptographs as if they were ERC2665 tokens (they are not, hence no \\\"write\\\" interactions are enabled)\\r\\ncontract ERC2665LogicV1 is VCProxyData, ERC2665HeaderV1, ERC2665StoragePublicV1 {\\r\\n\\r\\n    /// @notice Generic constructor, empty\\r\\n    /// @dev This contract is meant to be used in a delegatecall and hence its memory state is irrelevant\\r\\n    constructor() public {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    function init(address _auctionHouse, address _indexCry) external{\\r\\n        require(auctionHouse == address(0), \\\"Already initialized\\\");\\r\\n        auctionHouse = payable(_auctionHouse);\\r\\n        indexCry = _indexCry;\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer a cryptograph in the ERC2665 proxy\\r\\n    /// @dev Call the internal transfer function\\r\\n    /// @param _from The address of the previous owner\\r\\n    /// @param _to The address of the new owner\\r\\n    /// @param _cryptograph The address of the cryptrograph\\r\\n    /// @param _lastSoldFor The amount of the last cryptograph platform transaction for this cryptograph\\r\\n    function transferACryptograph(address _from, address _to, address _cryptograph, uint256 _lastSoldFor ) external {\\r\\n        require((msg.sender == auctionHouse), \\\"Only the cryptograph auction house smart contract can call this function\\\");\\r\\n        transferACryptographInternal(_from, _to, _cryptograph, _lastSoldFor);\\r\\n    }\\r\\n\\r\\n\\r\\n    //Called by the Index when a minting is happening\\r\\n    function MintACryptograph(address _newCryptograph) external {\\r\\n        require((msg.sender == indexCry), \\\"Only the cryptograph index smart contract can call this function\\\");\\r\\n        index2665ToAddress[totalSupplyVar] = _newCryptograph;\\r\\n        totalSupplyVar++;\\r\\n        balanceOfVar[address(0)] = balanceOfVar[address(0)] + 1;\\r\\n        isACryptograph[_newCryptograph] = true;\\r\\n\\r\\n        //Weakness in ERC-721 spec : Created and assigned to address 0.\\r\\n        //Meaning : let\\u0027s not emit event\\r\\n        // emit Transfer(address(0), address(0), uint256(_newCryptograph));\\r\\n    }\\r\\n\\r\\n    /// @notice Query if a contract implements an interface\\r\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\r\\n    /// @dev Interface identification is specified in ERC-165. This function\\r\\n    ///  uses less than 30,000 gas.\\r\\n    /// @return `true` if the contract implements `interfaceID` and\\r\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\r\\n    function supportsInterface(bytes4 interfaceID) external pure returns(bool) {\\r\\n\\r\\n        return (\\r\\n            interfaceID == 0x80ac58cd || //ERC721\\r\\n            interfaceID == 0x5b5e139f || //metadata extension\\r\\n            interfaceID == 0x780e9d63 || //enumeration extension\\r\\n            interfaceID == 0x509ffea4 //ERC2665\\r\\n        );\\r\\n        \\r\\n    }\\r\\n\\r\\n    /// @notice Count all NFTs assigned to an owner\\r\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\r\\n    ///  function throws for queries about the zero address.\\r\\n    /// @param _owner An address for whom to query the balance\\r\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\r\\n    function balanceOf(address _owner) external view returns (uint256){\\r\\n        require(_owner != address(0), \\\"ERC721 NFTs assigned to the zero address are considered invalid\\\");\\r\\n        return balanceOfVar[_owner];\\r\\n    }\\r\\n\\r\\n    /// @notice Find the owner of an NFT\\r\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\r\\n    ///  about them do throw.\\r\\n    /// @param _tokenId The identifier for an NFT\\r\\n    /// @return The address of the owner of the NFT\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address){\\r\\n        require(isACryptograph[address(_tokenId)], \\\"_tokenId is not a Valid Cryptograph\\\");\\r\\n        address retour = TheCryptographLogicV1(address(_tokenId)).owner();\\r\\n        require(retour != address(0),\\r\\n            \\\"ERC721 NFTs assigned to the zero address are considered invalid\\\");\\r\\n        return retour;\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `msg.value` \\u003c `getTransferFee(_tokenId)`.\\r\\n    ///  If the fee is not to be paid in ETH, then token publishers SHOULD provide a way to pay the\\r\\n    ///  fee when calling this function or it\\u0027s overloads, and throwing if said fee is not paid.\\r\\n    ///  Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.\\r\\n    ///  When transfer is complete, this function checks if `_to` is a smart\\r\\n    ///  contract (code size \\u003e 0). If so, it calls `onERC2665Received` on `_to`\\r\\n    ///  and throws if the return value is not\\r\\n    ///  `bytes4(keccak256(\\\"onERC2665Received(address,address,uint256,bytes)\\\"))`.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable{\\r\\n        transferFromInternal(_from, _to, _tokenId, msg.sender, msg.value);\\r\\n\\r\\n        require(_to != address(0));\\r\\n        if(isContract(_to)){\\r\\n            //bytes4(keccak256(\\\"onERC2665Received(address,address,uint256,bytes)\\\")) == bytes4(0xac3cf292)\\r\\n            require(ERC2665TokenReceiver(_to).onERC2665Received(msg.sender, _from, _tokenId, data) == bytes4(0xac3cf292));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev This works identically to the other function with an extra data parameter,\\r\\n    ///  except this function just sets data to \\\"\\\".\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable{\\r\\n        transferFromInternal(_from, _to, _tokenId, msg.sender, msg.value);\\r\\n\\r\\n        require(_to != address(0));\\r\\n        if(isContract(_to)){\\r\\n            //bytes4(keccak256(\\\"onERC2665Received(address,address,uint256,bytes)\\\")) == bytes4(0xac3cf292)\\r\\n            require(ERC2665TokenReceiver(_to).onERC2665Received(msg.sender, _from, _tokenId, \\\"\\\") ==  bytes4(0xac3cf292));\\r\\n        }\\r\\n    }\\r\\n\\r\\n   /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\r\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\r\\n    ///  THEY MAY BE PERMANENTLY LOST\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT. Throws if `msg.value` \\u003c `getTransferFee(_tokenId)`.\\r\\n    ///  If the fee is not to be paid in ETH, then token publishers SHOULD provide a way to pay the\\r\\n    ///  fee when calling this function and throw if said fee is not paid.\\r\\n    ///  Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable{\\r\\n        transferFromInternal(_from, _to, _tokenId, msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /// @notice Change or reaffirm the approved address for an NFT\\r\\n    /// @dev The zero address indicates there is no approved address.\\r\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\r\\n    ///  operator of the current owner. After a successful call and if\\r\\n    ///  `msg.value == getTransferFee(_tokenId)`, then a subsequent atomic call to\\r\\n    ///  `getTransferFee(_tokenId)` would eval to 0. If the fee is not to be paid in ETH,\\r\\n    ///  then token publishers MUST provide a way to pay the fee when calling this function,\\r\\n    ///  and throw if the fee is not paid.\\r\\n    ///  Any ETH sent to this function will be used to pay the transfer fee, and if the\\r\\n    ///  ETH sent is twice (or more) the non-0 current transfer fee, the next transfer fee \\r\\n    ///  will be prepaid as well.  \\r\\n    /// @param _approved The new approved NFT controller\\r\\n    /// @param _tokenId The NFT to approve\\r\\n    function approve(address _approved, uint256 _tokenId) external payable{\\r\\n\\r\\n        address owner = TheCryptographLogicV1(address(_tokenId)).owner();\\r\\n        require(msg.sender == owner || approvedOperator[owner][msg.sender], \\\"Only the owner or an operator can approve a token transfer\\\");\\r\\n        require(isACryptograph[address(_tokenId)], \\\"_tokenId is not a Valid Cryptograph\\\");\\r\\n\\r\\n        //Reset the renatus timer\\r\\n        TheCryptographLogicV1(address(_tokenId)).renatus();\\r\\n\\r\\n        uint256 leftover = msg.value;\\r\\n\\r\\n        //If the transfer fee is being paid\\r\\n        if(leftover \\u003e= transferFees[_tokenId]){\\r\\n\\r\\n            leftover =  leftover - transferFees[_tokenId];\\r\\n            transferFees[_tokenId] = 0;\\r\\n            \\r\\n            //Prepay the next subsequent transfer\\r\\n            if(leftover \\u003e= (lastSoldFor[_tokenId] * 15 /100)){\\r\\n                leftover = leftover -  (lastSoldFor[_tokenId] * 15 /100);\\r\\n                transferFeePrepaid[_tokenId] = true;\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        //Marking the auction has now being handled by ERC2665\\r\\n        AuctionHouseLogicV1(auctionHouse).approveERC2665{value: msg.value - leftover }(address(_tokenId), msg.sender, _approved);\\r\\n\\r\\n        if(leftover != 0){\\r\\n            //Send back the extra money to the payer\\r\\n            (bool trashBool, ) = msg.sender.call{value:leftover}(\\\"\\\");\\r\\n            require(trashBool, \\\"Could not send the leftover money back\\\");\\r\\n        }\\r\\n\\r\\n        approvedTransferAddress[_tokenId] = _approved; \\r\\n\\r\\n        emit Approval(msg.sender, _approved, _tokenId);\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n    ///  all of `msg.sender`\\u0027s assets\\r\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\r\\n    ///  multiple operators per owner.\\r\\n    /// @param _operator Address to add to the set of authorized operators\\r\\n    /// @param _approved True if the operator is approved, false to revoke approval\\r\\n    function setApprovalForAll(address _operator, bool _approved) external {\\r\\n        approvedOperator[msg.sender][_operator] = _approved;\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the approved address for a single NFT\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\r\\n    /// @param _tokenId The NFT to find the approved address for\\r\\n    /// @return The approved address for this NFT, or the zero address if there is none\\r\\n    function getApproved(uint256 _tokenId) external view returns (address){\\r\\n        require(isACryptograph[address(_tokenId)], \\\"_tokenId is not a Valid Cryptograph\\\");\\r\\n\\r\\n        return approvedTransferAddress[_tokenId];\\r\\n    }\\r\\n  \\r\\n    /// @notice Query if an address is an authorized operator for another address\\r\\n    /// @param _owner The address that owns the NFTs\\r\\n    /// @param _operator The address that acts on behalf of the owner\\r\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool){\\r\\n        return approvedOperator[_owner][_operator];\\r\\n    }\\r\\n\\r\\n    /// @notice Query what is the transfer fee for a specific token\\r\\n    /// @dev If a call would returns 0, then any subsequent calls witht the same argument\\r\\n    /// must also return 0 until the Transfer event has been emitted.\\r\\n    /// @param _tokenId The NFT to find the Transfer Fee amount for\\r\\n    /// @return The amount of Wei that need to be sent along a call to a transfer function\\r\\n    function getTransferFee(uint256 _tokenId) external view returns (uint256){\\r\\n        return transferFees[_tokenId];\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Query what is the transfer fee for a specific token if the fee is to be paid\\r\\n    /// @dev If a call would returns 0, then any subsequent calls with the same arguments\\r\\n    /// must also return 0 until the Transfer event has been emitted. If _currencySymbol == \\u0027ETH\\u0027,\\r\\n    /// then this function must return the same result as if `getTransferFee(uint256 _tokenId)` was called.\\r\\n    /// @param _tokenId The NFT to find the Transfer Fee amount for\\r\\n    /// @param _currencySymbol The currency in which the fee is to be paid\\r\\n    /// @return The amount of Wei that need to be sent along a call to a transfer function\\r\\n    function getTransferFee(uint256 _tokenId, string calldata _currencySymbol) external view returns (uint256){\\r\\n        //keccak256(bytes(\\\"ETH\\\")) == bytes32(0xaaaebeba3810b1e6b70781f14b2d72c1cb89c0b2b320c43bb67ff79f562f5ff4)\\r\\n        if(bytes32(0xaaaebeba3810b1e6b70781f14b2d72c1cb89c0b2b320c43bb67ff79f562f5ff4) == keccak256(bytes(_currencySymbol))){\\r\\n            return transferFees[_tokenId];\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function name() external pure returns(string memory _name){\\r\\n        return \\\"Cryptograph\\\";\\r\\n    }\\r\\n\\r\\n    function symbol() external pure returns(string memory _symbol){\\r\\n        return \\\"Cryptograph\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\r\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\r\\n    ///  Metadata JSON Schema\\\".\\r\\n    function tokenURI(uint256 _tokenId) external view returns(string memory){\\r\\n        require(isACryptograph[address(_tokenId)], \\\"_tokenId is not a Valid Cryptograph\\\");\\r\\n   \\r\\n        return string(abi.encodePacked(\\\"https://cryptograph.co/tokenuri/\\\", addressToString(address(_tokenId))));\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Count NFTs tracked by this contract\\r\\n    /// @return A count of valid NFTs tracked by this contract, where each one of\\r\\n    ///  them has an assigned and queryable owner not equal to the zero address\\r\\n    function totalSupply() external view returns (uint256){\\r\\n        return totalSupplyVar;\\r\\n    }\\r\\n\\r\\n    /// @notice Enumerate valid NFTs\\r\\n    /// @dev Throws if `_index` \\u003e= `totalSupply()`.\\r\\n    /// @param _index A counter less than `totalSupply()`\\r\\n    /// @return The token identifier for the `_index`th NFT,\\r\\n    ///  (sort order not specified)\\r\\n    function tokenByIndex(uint256 _index) external view returns (uint256){\\r\\n        require(_index \\u003c totalSupplyVar, \\\"index \\u003e= totalSupply()\\\");\\r\\n        return uint256(index2665ToAddress[_index]);\\r\\n    }\\r\\n\\r\\n    /// @notice Enumerate NFTs assigned to an owner\\r\\n    /// @dev Throws if `_index` \\u003e= `balanceOf(_owner)` or if\\r\\n    ///  `_owner` is the zero address, representing invalid NFTs.\\r\\n    /// @param _owner An address where we are interested in NFTs owned by them\\r\\n    /// @param _index A counter less than `balanceOf(_owner)`\\r\\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\r\\n    ///   (sort order not specified)\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256){\\r\\n        require(_owner != address(0), \\\"_owner == 0\\\");\\r\\n        require(_index \\u003c balanceOfVar[_owner], \\\"_index \\u003e= balanceOf(_owner)\\\");\\r\\n\\r\\n        return indexedOwnership[_owner][_index];\\r\\n    }\\r\\n\\r\\n    /// @notice Get the address of a Cryptograph from their tokenID\\r\\n    /// @dev literally just a typecast\\r\\n    /// @param _tokenId The identifier for an NFT\\r\\n    /// @return The address of the Cryptograph that would be associated with this ID\\r\\n    function addressFromTokenId(uint256 _tokenId) external pure returns (address){\\r\\n            return address(_tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the tokenID of a Cryptograph from their address\\r\\n    /// @dev literally just a typecast\\r\\n    /// @param _tokenAddress The address for a Cryptograph\\r\\n    /// @return The tokenId of the Cryptograph that would be associated with this address\\r\\n    function tokenIdFromAddress(address _tokenAddress) external pure returns (uint256){\\r\\n            return uint256(_tokenAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Extend the renatus timer for a cryptograph\\r\\n    /// @dev only callable by approved operators or the owner\\r\\n    /// @param _tokenId The identifier for an NFT\\r\\n    function renatus(uint256 _tokenId) public {\\r\\n        require(isACryptograph[address(_tokenId)], \\\"renatus need to be called for a Valid Cryptograph\\\");\\r\\n\\r\\n        address owner = TheCryptographLogicV1(address(_tokenId)).owner();\\r\\n        require(approvedOperator[owner][msg.sender] || owner == msg.sender);\\r\\n\\r\\n        //Extending the renatus timer\\r\\n        TheCryptographLogicV1(address(_tokenId)).renatus();\\r\\n    }\\r\\n\\r\\n    /// @notice Emit a Renatus transfer event destroying the token for it to be reborn later\\r\\n    /// @dev only callable by the token itself\\r\\n    function triggerRenatus() public{\\r\\n        require(isACryptograph[msg.sender], \\\"Only the token itself can notify us of a renatus hapenning\\\");\\r\\n        emit Transfer(TheCryptographLogicV1(address(msg.sender)).owner(), address(0), uint256(msg.sender));\\r\\n    }\\r\\n    \\r\\n    /// @notice Transfer a cryptograph in the ERC2665 proxy\\r\\n    /// @dev Will fire the Transfer event and update the enumerable arrays, as well as setting the new transfer fee\\r\\n    /// @param _from The address of the previous owner\\r\\n    /// @param _to The address of the new owner\\r\\n    /// @param _cryptograph The address of the cryptrograph\\r\\n    /// @param _lastSoldFor The amount of the last cryptograph platform transaction for this cryptograph\\r\\n    function transferACryptographInternal(address _from, address _to, address _cryptograph, uint256 _lastSoldFor) internal{\\r\\n\\r\\n        //Check that the Cryptograph exist\\r\\n         require(isACryptograph[_cryptograph], \\r\\n            \\\"Only minted cryptogrtaphs can be transferred\\\");\\r\\n\\r\\n        //Adjusting the last sold and transfer fees\\r\\n        if(_lastSoldFor != lastSoldFor[uint256(_cryptograph)]){\\r\\n            lastSoldFor[uint256(_cryptograph)] = _lastSoldFor;\\r\\n        }\\r\\n\\r\\n        //Checking if the fee was prepaid\\r\\n        if(!transferFeePrepaid[uint256(_cryptograph)]){\\r\\n            transferFees[uint256(_cryptograph)] = (_lastSoldFor * 15) / 100; //15% transfer fee\\r\\n        } else {\\r\\n            transferFees[uint256(_cryptograph)] = 0;\\r\\n        }\\r\\n        transferFeePrepaid[uint256(_cryptograph)] = false;\\r\\n  \\r\\n\\r\\n        //Reseting the approved address\\r\\n        approvedTransferAddress[uint256(_cryptograph)] = address(0);\\r\\n\\r\\n\\r\\n        //Emitting the event\\r\\n        emit Transfer(_from, _to, uint256(_cryptograph));\\r\\n\\r\\n        uint256 posInArray;\\r\\n\\r\\n        //Adjusting the ownership array of the actors\\r\\n        if(_from != address(0x0)){\\r\\n\\r\\n            if(balanceOfVar[_from] != 1){\\r\\n\\r\\n                //Case where we still have more cryptographs in the index.\\r\\n\\r\\n                //Grabbing the position of the transferred cryptograph in the previous owner ownership array\\r\\n                posInArray = cryptographPositionInOwnershipArray[uint256(_cryptograph)];\\r\\n\\r\\n                //Replacing this position content with the content of the last element in the owner array;\\r\\n                indexedOwnership[_from][posInArray] = indexedOwnership[_from][balanceOfVar[_from]-1];\\r\\n\\r\\n                //Updating the last element new index position\\r\\n                cryptographPositionInOwnershipArray[indexedOwnership[_from][posInArray]] = posInArray;\\r\\n\\r\\n                //refund some gas\\r\\n                delete indexedOwnership[_from][balanceOfVar[_from]-1];\\r\\n\\r\\n            }  else {\\r\\n                //refund some gas\\r\\n                delete indexedOwnership[_from][0];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //Some caching\\r\\n        posInArray = balanceOfVar[_to];\\r\\n\\r\\n        //Adjusting the arrays of the receiver\\r\\n        if(_to != address(0x0)){\\r\\n\\r\\n            if(indexedOwnership[_to].length \\u003c posInArray + 1){\\r\\n                indexedOwnership[_to].push(uint256(_cryptograph));\\r\\n            } else {\\r\\n                indexedOwnership[_to][posInArray] = uint256(_cryptograph);\\r\\n            }\\r\\n\\r\\n            cryptographPositionInOwnershipArray[uint256(_cryptograph)] = posInArray;\\r\\n        }\\r\\n\\r\\n        //Adjusting the balance of the actors\\r\\n        balanceOfVar[_from] = balanceOfVar[_from] - 1;\\r\\n        balanceOfVar[_to] = balanceOfVar[_to] + 1;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice transferACryptograph following a TransferFrom call to an ERC2665 endpoint\\r\\n    /// @dev Will call the transferInternal as part of the process as well as notify the ecosystem of necessary changes.\\r\\n    /// @param _from The address of the previous owner\\r\\n    /// @param _to The address of the new owner\\r\\n    /// @param _tokenId The tokenID of the cryptrograph\\r\\n    /// @param _sender The adress of the msg.sender of the endpoint\\r\\n    /// @param _value The amount of ETH paid with the endpoint call\\r\\n    function transferFromInternal(address _from, address _to, uint256 _tokenId, address _sender, uint256 _value) internal{\\r\\n\\r\\n        //Check that the fee is being paid\\r\\n        require(_value \\u003e= transferFees[_tokenId], \\r\\n            \\\"The transfer fee must be paid\\\");\\r\\n\\r\\n        //Check that the _from token owner is correct\\r\\n        address owner = TheCryptographLogicV1(address(_tokenId)).owner();\\r\\n        require(owner == _from,\\r\\n            \\\"The owner of the token and _from did not match\\\");\\r\\n\\r\\n        //Check that the msg.sender is legitimate to manipulate the token\\r\\n        require(_sender == owner || approvedOperator[owner][_sender] || approvedTransferAddress[_tokenId] == _sender, \\\"The caller is not allowed to transfer the token\\\");\\r\\n\\r\\n        //Calculate how much extra fee was sent\\r\\n        uint256 leftover = _value - transferFees[_tokenId];\\r\\n\\r\\n        //ERC2665 Transfer\\r\\n        transferACryptographInternal(_from, _to, address(_tokenId), lastSoldFor[_tokenId]);\\r\\n\\r\\n        //Actual Transfer will also check that there is no auction going on\\r\\n        AuctionHouseLogicV1(auctionHouse).transferERC2665{value:  _value - leftover}(address(_tokenId), _sender, _to);\\r\\n\\r\\n        //Check if the next fee is also paid\\r\\n        if(leftover \\u003e= transferFees[_tokenId]){\\r\\n            //pay the next transfer fee\\r\\n            leftover =  leftover - transferFees[_tokenId];\\r\\n            transferFees[_tokenId] = 0;\\r\\n        }\\r\\n\\r\\n        if(leftover != 0){\\r\\n            //Send back the extra money to the payer\\r\\n            (bool trashBool, ) = _sender.call{value:leftover}(\\\"\\\");\\r\\n            require(trashBool, \\\"Could not send the leftover money back\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Convert an Ethereum address to a human readable string\\r\\n    /// @param _addr The adress you want to convert\\r\\n    /// @return The address in 0x... format\\r\\n    function addressToString(address _addr) internal pure returns(string memory)\\r\\n    {\\r\\n        bytes32 addr32 = bytes32(uint256(_addr)); //Put the address 20 byte address in a bytes32 word\\r\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";  //What are our allowed characters ?\\r\\n\\r\\n        //Initializing the array that is gonna get returned\\r\\n        bytes memory str = new bytes(42);\\r\\n\\r\\n        //Prefixing\\r\\n        str[0] = \\u00270\\u0027;\\r\\n        str[1] = \\u0027x\\u0027;\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c 20; i++) { //iterating over the actual address\\r\\n\\r\\n            /*\\r\\n                proper offset : output starting at 2 because of \\u00270X\\u0027 prefix, 1 hexa char == 2 bytes.\\r\\n                input starting at 12 because of 12 bytes of padding, byteshifted because 2byte == 1char\\r\\n            */\\r\\n            str[2+i*2] = alphabet[uint8(addr32[i + 12] \\u003e\\u003e 4)];\\r\\n            str[3+i*2] = alphabet[uint8(addr32[i + 12] \\u0026 0x0f)];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n    /// @notice Check if an address is a contract\\r\\n    /// @param _address The adress you want to test\\r\\n    /// @return true if the address has bytecode, false if not\\r\\n    function isContract(address _address) internal view returns(bool){\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        assembly { codehash := extcodehash(_address) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n}\\r\\n\"},\"ERC2665ProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./ERC2665V1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2020\\r\\n/// @title  Cryptograph ERC2665 Mimic Smart Contract\\r\\n/// @notice The proxied  ERC2665 Mimic : this is the contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract ERC2665ProxiedV1 is VCProxy, ERC2665HeaderV1, ERC2665StorageInternalV1 {\\r\\n\\r\\n    constructor(uint256 _version, address _vc)public\\r\\n    VCProxy(_version, _vc) //Calls the VC proxy constructor so that we know where our logic code is\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //No other logic code as it is all proxied\\r\\n\\r\\n}\\r\\n\"},\"ERC2665V1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity ^0.6.6;\\r\\n\\r\\n/// @title ERC-2665 NFT Transfer Fee Extension\\r\\n/// @dev See https://github.com/ethereum/EIPs/issues/2665\\r\\n///  Note: the ERC-165 identifier for this interface is 0x509ffea4.\\r\\n///  Note: you must also implement the ERC-165 identifier of ERC-721, which is 0x80ac58cd.\\r\\ninterface ERC2665 /* is ERC165, is ERC721 but overide it\\u0027s Design by contract specifications */ {\\r\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n    ///  may be created and assigned without emitting Transfer. At the time of\\r\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when the approved address for an NFT is changed or\\r\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\r\\n    ///  When a Transfer event emits, this also indicates that the approved\\r\\n    ///  address for that NFT (if any) is reset to none.\\r\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n    ///  The operator can manage all NFTs of the owner.\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    /// @notice Count all NFTs assigned to an owner\\r\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\r\\n    ///  function throws for queries about the zero address.\\r\\n    /// @param _owner An address for whom to query the balance\\r\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    /// @notice Find the owner of an NFT\\r\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\r\\n    ///  about them do throw.\\r\\n    /// @param _tokenId The identifier for an NFT\\r\\n    /// @return The address of the owner of the NFT\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `msg.value` \\u003c `getTransferFee(_tokenId)`.\\r\\n    ///  If the fee is not to be paid in ETH, then token publishers SHOULD provide a way to pay the\\r\\n    ///  fee when calling this function or it\\u0027s overloads, and throwing if said fee is not paid.\\r\\n    ///  Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.\\r\\n    ///  When transfer is complete, this function checks if `_to` is a smart\\r\\n    ///  contract (code size \\u003e 0). If so, it calls `onERC2665Received` on `_to`\\r\\n    ///  and throws if the return value is not\\r\\n    ///  `bytes4(keccak256(\\\"onERC2665Received(address,address,uint256,bytes)\\\"))`.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev This works identically to the other function with an extra data parameter,\\r\\n    ///  except this function just sets data to \\\"\\\".\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\r\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\r\\n    ///  THEY MAY BE PERMANENTLY LOST\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT. Throws if `msg.value` \\u003c `getTransferFee(_tokenId)`.\\r\\n    ///  If the fee is not to be paid in ETH, then token publishers SHOULD provide a way to pay the\\r\\n    ///  fee when calling this function and throw if said fee is not paid.\\r\\n    ///  Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Change or reaffirm the approved address for an NFT\\r\\n    /// @dev The zero address indicates there is no approved address.\\r\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\r\\n    ///  operator of the current owner. After a successful call and if\\r\\n    ///  `msg.value == getTransferFee(_tokenId)`, then a subsequent atomic call to\\r\\n    ///  `getTransferFee(_tokenId)` would eval to 0. If the fee is not to be paid in ETH,\\r\\n    ///  then token publishers MUST provide a way to pay the fee when calling this function,\\r\\n    ///  and throw if the fee is not paid.\\r\\n    /// @param _approved The new approved NFT controller\\r\\n    /// @param _tokenId The NFT to approve\\r\\n    function approve(address _approved, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n    ///  all of `msg.sender`\\u0027s assets\\r\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\r\\n    ///  multiple operators per owner.\\r\\n    /// @param _operator Address to add to the set of authorized operators\\r\\n    /// @param _approved True if the operator is approved, false to revoke approval\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    /// @notice Get the approved address for a single NFT\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\r\\n    /// @param _tokenId The NFT to find the approved address for\\r\\n    /// @return The approved address for this NFT, or the zero address if there is none\\r\\n    function getApproved(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Query if an address is an authorized operator for another address\\r\\n    /// @param _owner The address that owns the NFTs\\r\\n    /// @param _operator The address that acts on behalf of the owner\\r\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n\\r\\n    /// @notice Query what is the transfer fee for a specific token\\r\\n    /// @dev If a call would returns 0, then any subsequent calls witht the same argument\\r\\n    /// must also return 0 until the Transfer event has been emitted.\\r\\n    /// @param _tokenId The NFT to find the Transfer Fee amount for\\r\\n    /// @return The amount of Wei that need to be sent along a call to a transfer function\\r\\n    function getTransferFee(uint256 _tokenId) external view returns (uint256);\\r\\n\\r\\n    /// @notice Query what is the transfer fee for a specific token if the fee is to be paid\\r\\n    /// @dev If a call would returns 0, then any subsequent calls with the same arguments\\r\\n    /// must also return 0 until the Transfer event has been emitted. If _currencySymbol == \\u0027ETH\\u0027,\\r\\n    /// then this function must return the same result as if `getTransferFee(uint256 _tokenId)` was called.\\r\\n    /// @param _tokenId The NFT to find the Transfer Fee amount for\\r\\n    /// @param _currencySymbol The currency in which the fee is to be paid\\r\\n    /// @return The amount of Wei that need to be sent along a call to a transfer function\\r\\n    function getTransferFee(uint256 _tokenId, string calldata _currencySymbol) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\ninterface ERC165 {\\r\\n    /// @notice Query if a contract implements an interface\\r\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\r\\n    /// @dev Interface identification is specified in ERC-165. This function\\r\\n    ///  uses less than 30,000 gas.\\r\\n    /// @return `true` if the contract implements `interfaceID` and\\r\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\\r\\n/// @dev Note: the ERC-165 identifier for this interface is 0xac3cf292.\\r\\ninterface ERC2665TokenReceiver {\\r\\n    /// @notice Handle the receipt of an NFT\\r\\n    /// @dev The ERC2665 smart contract calls this function on the recipient\\r\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\r\\n    ///  transfer. Return of other than the magic value MUST result in the\\r\\n    ///  transaction being reverted.\\r\\n    ///  Note: the contract address is always the message sender.\\r\\n    /// @param _operator The address which called `safeTransferFrom` function\\r\\n    /// @param _from The address which previously owned the token\\r\\n    /// @param _tokenId The NFT identifier which is being transferred\\r\\n    /// @param _data Additional data with no specified format\\r\\n    /// @return `bytes4(keccak256(\\\"onERC2665Received(address,address,uint256,bytes)\\\"))`\\r\\n    ///  unless throwing\\r\\n    function onERC2665Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\r\\ninterface ERC721Metadata /* is ERC721 */ {\\r\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\r\\n    function name() external view returns(string memory _name);\\r\\n\\r\\n    /// @notice An abbreviated name for NFTs in this contract\\r\\n    function symbol() external view returns(string memory _symbol);\\r\\n\\r\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\r\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\r\\n    ///  Metadata JSON Schema\\\".\\r\\n    function tokenURI(uint256 _tokenId) external view returns(string memory);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\\r\\ninterface ERC721Enumerable /* is ERC721 */ {\\r\\n    /// @notice Count NFTs tracked by this contract\\r\\n    /// @return A count of valid NFTs tracked by this contract, where each one of\\r\\n    ///  them has an assigned and queryable owner not equal to the zero address\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate valid NFTs\\r\\n    /// @dev Throws if `_index` \\u003e= `totalSupply()`.\\r\\n    /// @param _index A counter less than `totalSupply()`\\r\\n    /// @return The token identifier for the `_index`th NFT,\\r\\n    ///  (sort order not specified)\\r\\n    function tokenByIndex(uint256 _index) external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate NFTs assigned to an owner\\r\\n    /// @dev Throws if `_index` \\u003e= `balanceOf(_owner)` or if\\r\\n    ///  `_owner` is the zero address, representing invalid NFTs.\\r\\n    /// @param _owner An address where we are interested in NFTs owned by them\\r\\n    /// @param _index A counter less than `balanceOf(_owner)`\\r\\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\r\\n    ///   (sort order not specified)\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract ERC2665HeaderV1 {\\r\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n    ///  may be created and assigned without emitting Transfer. At the time of\\r\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n    event Transfer(\\r\\n        address indexed _from,\\r\\n        address indexed _to,\\r\\n        uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when the approved address for an NFT is changed or\\r\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\r\\n    ///  When a Transfer event emits, this also indicates that the approved\\r\\n    ///  address for that NFT (if any) is reset to none.\\r\\n    event Approval(\\r\\n        address indexed _owner,\\r\\n        address indexed _approved,\\r\\n        uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n    ///  The operator can manage all NFTs of the owner.\\r\\n    event ApprovalForAll(\\r\\n        address indexed _owner,\\r\\n        address indexed _operator,\\r\\n        bool _approved);\\r\\n}\\r\\n\\r\\ncontract ERC2665StorageInternalV1 {\\r\\n    address payable internal auctionHouse;\\r\\n    address internal indexCry;\\r\\n\\r\\n    mapping(address =\\u003e bool) internal isACryptograph;\\r\\n\\r\\n    mapping(address =\\u003e uint256) internal balanceOfVar;\\r\\n\\r\\n    uint256 internal totalSupplyVar;\\r\\n    mapping(uint256 =\\u003e address) internal index2665ToAddress;\\r\\n\\r\\n    mapping(address =\\u003e uint256[]) internal indexedOwnership; //[Owner][index] = cryptographID\\r\\n    mapping(uint256 =\\u003e uint256) internal cryptographPositionInOwnershipArray; // [cryptographID] = index\\r\\n    mapping(uint256 =\\u003e uint256) internal lastSoldFor; //Value last sold on the cryptograph platform\\r\\n    mapping(uint256 =\\u003e uint256) internal transferFees; //Pending transfer fee\\r\\n    mapping(uint256 =\\u003e bool) internal transferFeePrepaid; //Have the next transfer fee be prepaid ?\\r\\n    mapping(uint256 =\\u003e address) public approvedTransferAddress; //Address allowed to Transfer a token\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) internal approvedOperator; //Approved operators mapping\\r\\n\\r\\n}\\r\\n\\r\\ncontract ERC2665StoragePublicV1 {\\r\\n    address payable public auctionHouse;\\r\\n    address public indexCry;\\r\\n\\r\\n    mapping(address =\\u003e bool) public isACryptograph;\\r\\n\\r\\n    mapping(address =\\u003e uint256) public balanceOfVar;\\r\\n\\r\\n    uint256 public totalSupplyVar;\\r\\n    mapping(uint256 =\\u003e address) public index2665ToAddress;\\r\\n\\r\\n    mapping(address =\\u003e uint256[]) public indexedOwnership; //[Owner][index] = cryptographID\\r\\n    mapping(uint256 =\\u003e uint256) public cryptographPositionInOwnershipArray; // [cryptographID] = index\\r\\n    mapping(uint256 =\\u003e uint256) public lastSoldFor; // Value last sold on the cryptograph platform\\r\\n    mapping(uint256 =\\u003e uint256) public transferFees; // Pending transfer fee\\r\\n    mapping(uint256 =\\u003e bool) public transferFeePrepaid; //Have the next transfer fee be prepaid ?\\r\\n    mapping(uint256 =\\u003e address) public approvedTransferAddress; //Address allowed to Transfer a token\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) public approvedOperator; //Approved operators mapping\\r\\n}\\r\\n\"},\"Migrations.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity \\u003e=0.4.25 \\u003c0.7.0;\\r\\n\\r\\n//Only used by truffle due to their design choices. Safe to ignore in any other context\\r\\n\\r\\ncontract Migrations {\\r\\n    address public owner;\\r\\n    uint256 public last_completed_migration;\\r\\n\\r\\n    modifier restricted() {\\r\\n        if (msg.sender == owner) _;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function setCompleted(uint256 completed) public restricted {\\r\\n        last_completed_migration = completed;\\r\\n    }\\r\\n\\r\\n    function upgrade(address new_address) public restricted {\\r\\n        Migrations upgraded = Migrations(new_address);\\r\\n        upgraded.setCompleted(last_completed_migration);\\r\\n    }\\r\\n}\"},\"MintingAuctionLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./MintingAuctionV1.sol\\\";\\r\\nimport \\\"./CryptographFactoryV1.sol\\\";\\r\\nimport \\\"./AuctionHouseLogicV1.sol\\\";\\r\\nimport \\\"./TheCryptographLogicV1.sol\\\";\\r\\nimport \\\"./CryptographInitiator.sol\\\";\\r\\nimport \\\"./BidLink.sol\\\";\\r\\n\\r\\n/*\\r\\n    This contract idea is rather complex.\\r\\n    =\\u003e Implement a Generalized GBM Auction (GGBMA) for initial supply of a series of limited editions within the same auction (instead of each token being sold independantly)\\r\\n\\r\\n    \\u003eDuring the initial sale, everyone can place a bid at any amount of money (one exception, see below)\\r\\n    \\u003eYou can\\u0027t retract your bid\\r\\n    \\u003eYou can only have one active bid, and can only re-bid higher than YOUR previous bid\\r\\n    \\u003eIf you want to place a bid higher than the current highest bid, it need to be at least 5% higher\\r\\n    \\u003eWhen the top bid is being displaced by a new bid, the previous top bid owner receive GBM incentives. All others bidders don\\u0027t\\r\\n    \\u003eNo new bid can be placed after the initial period\\r\\n    \\u003eAt the end of the auction, you can mint a cryptograph where the serial # match your position in the auction\\r\\n        -\\u003e Highest bidder get #1, second highest get #2, etc...\\r\\n    \\u003eIf there was a limited supply, any bidder that was ranked below the supply amount can cancel their bid and recover the eth\\r\\n\\r\\n*/\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Minting Auction Logic Code\\r\\n/// @notice Based on the Single Auction smart contracts but with overrides\\r\\ncontract MintingAuctionLogicV1 is VCProxyData, MintingAuctionHeaderV1, MintingAuctionStoragePublicV1 {\\r\\n\\r\\n    /// @notice Generic constructor, empty\\r\\n    /// @dev This contract is meant to be used in a delegatecall hence its memory state is irrelevant\\r\\n    constructor() public\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //Modifier for functions that requires to be called only by the Auction house\\r\\n    modifier restrictedToAuctionHouse(){\\r\\n        require((msg.sender == auctionHouse), \\\"Only the auction house smart contract can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Init function of the MintingAuction\\r\\n    /// @param _myCryptograph The address of the cryptograph this auction is paired with\\r\\n    /// @param _cryInitiator The address of the initator containing the details of our auction\\r\\n    /// @param _initialize true =\\u003e can\\u0027t change any spec afterward. false =\\u003e can initialize again.\\r\\n    function initAuction(\\r\\n            address _myCryptograph,\\r\\n            address _cryInitiator,\\r\\n            bool _initialize\\r\\n        ) public {\\r\\n\\r\\n        require(!initialized, \\\"This auction is already initialized\\\");\\r\\n        initialized = _initialize; //Are we locking ?\\r\\n\\r\\n        //we must be either perpetual altruism OR never inited before\\r\\n        require(auctionHouse == address(0) || msg.sender == cryFactory,\\\"Only Perpetual altruism can change a yet to be locked auction\\\");\\r\\n        cryFactory = msg.sender;\\r\\n\\r\\n        /*\\r\\n        ==================================================\\r\\n                            Bidding section\\r\\n        ==================================================\\r\\n        */\\r\\n\\r\\n        startingPrice = CryptographInitiator(_cryInitiator).startingPrice(); //The first bid that needs to be outbid is 1 Wei\\r\\n        sellingPrice = 0; //A newly minted Cryptograph does not have an owner willing to sell\\r\\n\\r\\n        /*\\r\\n        ==================================================\\r\\n                        Calculations section\\r\\n        ==================================================\\r\\n        */\\r\\n        bid_Decimals = 100000;  //100k, or 100%\\r\\n        bid_incMax = 10000; //10k, or 10%\\r\\n        bid_incMin = 1000; //1k, or 1%\\r\\n        bid_stepMin = 10500; //10.5k, or 10.5%\\r\\n        bid_cutOthers = 500; // 500, or 0.5%\\r\\n        bid_multiplier = 9000; //9000 = Doubling bid yield max gain (1%+9% = 10%)\\r\\n\\r\\n        /*\\r\\n        ==================================================\\r\\n                            Money section\\r\\n        ==================================================\\r\\n        */\\r\\n        //Setting up money flow\\r\\n        perpertualAltruism = CryptographFactoryStoragePublicV1(cryFactory).officialPublisher();\\r\\n        perpetualAltruismCut = CryptographInitiator(_cryInitiator).perpetualAltruismCut();\\r\\n        publisher = CryptographInitiator(_cryInitiator).publisher();\\r\\n        publisherCut = CryptographInitiator(_cryInitiator).publisherCut();\\r\\n        charity = CryptographInitiator(_cryInitiator).charity();\\r\\n        charityCut = CryptographInitiator(_cryInitiator).charityCut();\\r\\n        thirdParty = CryptographInitiator(_cryInitiator).thirdParty();\\r\\n        thirdPartyCut = CryptographInitiator(_cryInitiator).thirdPartyCut();\\r\\n        maxSupply = CryptographInitiator(_cryInitiator).maxSupply();\\r\\n\\r\\n        //Setting up timings\\r\\n\\r\\n        startTime = CryptographInitiator(_cryInitiator).auctionStartTime();\\r\\n        endTime = CryptographInitiator(_cryInitiator).auctionStartTime() + CryptographInitiator(_cryInitiator).auctionSecondsDuration();\\r\\n\\r\\n        auctionHouse = CryptographFactoryStoragePublicV1(cryFactory).targetAuctionHouse();\\r\\n        myCryptograph = _myCryptograph;\\r\\n        initiator = _cryInitiator;\\r\\n    }\\r\\n\\r\\n    /// @notice Make an official auction unmodifiable once we are certain the parameters are correct\\r\\n    /// @dev Only callable by perpetual altruism\\r\\n    function lock() external{\\r\\n        require(msg.sender == cryFactory, \\\"Only Perpetual altruism can lock the initialization\\\");\\r\\n        initialized = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Place a bid to own a cryptograph and distribute the incentives\\r\\n    /// @dev Only callable by the Auction House\\r\\n    /// @param _newBidAmount The amount of the new bid\\r\\n    /// @param _newBidder The address of the bidder\\r\\n    function bid(uint256 _newBidAmount, address _newBidder) external payable restrictedToAuctionHouse(){\\r\\n\\r\\n        /*\\r\\n        ========================== money check ==========================\\r\\n        */\\r\\n\\r\\n        //Unitiliazed cryptographs can\\u0027t be bid upon\\r\\n        require(initialized, \\\"This auction has not been properly set up yet\\\");\\r\\n        //Did we send the proper amount of money, are we allowed to bid ?\\r\\n        require(_newBidAmount == msg.value + currentBids[_newBidder], \\\"Amount of money sent incorrect\\\"); //Also protects from self-underbiding\\r\\n        //check to be made : is the new bid big enough ?\\r\\n        require(numberOfBids != maxSupply || currentBids[tailBidder] \\u003c _newBidAmount, \\\"Your bid is lower than the lowest bid\\\");\\r\\n\\r\\n        require( //Either fresh bid OR meeting the standing bid * the step OR below highest bidder\\r\\n                    ( (highestBidder == address(0)) \\u0026\\u0026 startingPrice \\u003c= _newBidAmount ) ||\\r\\n                    ( (highestBidder != address(0)) \\u0026\\u0026 (currentBids[highestBidder] * (bid_Decimals + bid_stepMin) \\u003c= (_newBidAmount * bid_Decimals) )) ||\\r\\n                    (  (highestBidder != address(0)) \\u0026\\u0026 (currentBids[highestBidder] \\u003e= _newBidAmount) ),\\r\\n                \\\"New bid amount does not meet an authorized amount\\\");\\r\\n\\r\\n        /*\\r\\n        ========================== Timing check ==========================\\r\\n        */\\r\\n\\r\\n        //We must be past the initial auction start\\r\\n        require(now \\u003e= startTime, \\\"You can only bid once the initial auction has started\\\");\\r\\n        require(now \\u003c endTime, \\\"GGMBA do not allow bidding past the ending time\\\");\\r\\n\\r\\n        //Emit the bid acceptance event before triggering the payouts\\r\\n        emit BidAccepted(_newBidAmount, _newBidder);\\r\\n\\r\\n        /*\\r\\n        ========================== Payouts ==========================\\r\\n        */\\r\\n\\r\\n        uint256 duePay;\\r\\n        //if we are not an underbidder...\\r\\n        if((currentBids[highestBidder] \\u003c _newBidAmount)){\\r\\n            //In a GGBMA, every new highest bidder pays a 0.5% fee\\r\\n            duePay = (_newBidAmount * bid_cutOthers)/bid_Decimals;\\r\\n            unsettledPayouts += duePay;\\r\\n            distributeStakeholdersPayouts(duePay, _newBidder);\\r\\n            //Send the payout to the previous highest bidder\\r\\n            if(highestBidder != address(0)){\\r\\n                duePay = duePayout[highestBidder];\\r\\n                if(duePay != 0){\\r\\n                    unsettledPayouts += duePay;\\r\\n                    emit Payout(duePay,  highestBidder,  _newBidder);\\r\\n                    AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: duePay }(highestBidder, _newBidder);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            /*\\r\\n            ========================== Reward ==========================\\r\\n            */\\r\\n\\r\\n            //Set the new payout amount we will receive when outbid (Only for new highest bidders)\\r\\n            calculateReward(_newBidAmount, _newBidder);\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ===================== Bid Cancellation And Registering =====================\\r\\n        */\\r\\n        uint256 toSend;\\r\\n\\r\\n        //We need to cancel our own previous lower bid OR to update the number of bids\\r\\n        if(currentBids[_newBidder] != 0){\\r\\n\\r\\n            BidLink(bidLinks[_newBidder]).setBidAmount(_newBidAmount); //Updating our bid amount\\r\\n\\r\\n            //Updating our neigbors link\\r\\n            if( BidLink(bidLinks[_newBidder]).above() != address(0x0)){\\r\\n                BidLink(BidLink(bidLinks[_newBidder]).above()).setBelow(BidLink(bidLinks[_newBidder]).below()); //Unlinking above us\\r\\n            }\\r\\n\\r\\n            if( BidLink(bidLinks[_newBidder]).below() != address(0x0)){\\r\\n                BidLink(BidLink(bidLinks[_newBidder]).below()).setAbove(BidLink(bidLinks[_newBidder]).above()); //Unlinking below us\\r\\n            }\\r\\n            emit BidCancelled(currentBids[_newBidder], currentBids[_newBidder], _newBidder); //Emitting the event\\r\\n\\r\\n        } else {\\r\\n            //Create a bid link\\r\\n            bidLinks[_newBidder] = address(new BidLink(_newBidder, _newBidAmount));\\r\\n\\r\\n            //Refunding/Setting the tail.\\r\\n            if(numberOfBids == maxSupply \\u0026\\u0026 maxSupply != 0){\\r\\n                //Max number of bids reached, refunding the tail bid\\r\\n                toSend = currentBids[tailBidder];\\r\\n                currentBids[tailBidder] = 0;\\r\\n                if(toSend != 0){\\r\\n                    //Send back all the money : no payout settlement required\\r\\n                    emit BidCancelled(toSend, toSend, tailBidder);\\r\\n                    AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(tailBidder, tailBidder);\\r\\n                }\\r\\n                //Updating the tail bid\\r\\n                BidLink(BidLink(bidLinks[tailBidder]).above()).setBelow(address(0x0)); //Unlinking\\r\\n                tailBidder = BidLink(BidLink(bidLinks[tailBidder]).above()).bidder(); //Updating the tail\\r\\n\\r\\n\\r\\n            } else {\\r\\n                //Max not reached\\r\\n                numberOfBids++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        currentBids[_newBidder] = _newBidAmount; //Set the amount of the bid\\r\\n\\r\\n        //Browse the BidLink chain until the link above us have a bid greater or equal to us\\r\\n        address currentLink = bidLinks[highestBidder];\\r\\n\\r\\n        if(currentLink == address(0x0)){\\r\\n            tailBidder = _newBidder; //We are the only bidder = we are also the lowest bidder\\r\\n        } else {\\r\\n            //Browsing down the linked list\\r\\n            while( BidLink(currentLink).below() != address(0x0) \\u0026\\u0026 BidLink(BidLink(currentLink).below()).bidAmount() \\u003e= _newBidAmount){\\r\\n                    currentLink = BidLink(currentLink).below(); //Browse the chain\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //Are we the new highest bidder ?\\r\\n        if(currentBids[highestBidder] \\u003c _newBidAmount){\\r\\n            highestBidder = _newBidder; //We are the highest bidder\\r\\n            BidLink(bidLinks[_newBidder]).setBelow(currentLink); //Setting ourselves as above the old head\\r\\n            if(currentLink != address(0x0)){    //Only if there is a previous head\\r\\n                BidLink(currentLink).setAbove(bidLinks[_newBidder]); //Setting the old head as below us\\r\\n            }\\r\\n        } else { //Normally inserting ourself in the chain\\r\\n            BidLink(bidLinks[_newBidder]).setAbove(currentLink); //Above us is the current link\\r\\n            BidLink(bidLinks[_newBidder]).setBelow(BidLink(currentLink).below()); //Below us is the previous tail of the current link\\r\\n            if(BidLink(bidLinks[_newBidder]).below() != address(0x0)){  //If we have a new tail\\r\\n                BidLink(BidLink(bidLinks[_newBidder]).below()).setAbove(bidLinks[_newBidder]); //We are above our new tail\\r\\n            } else {\\r\\n                //We are the new tail\\r\\n                tailBidder = _newBidder;\\r\\n            }\\r\\n            //We should always have a new head (as we are not highest bidder)\\r\\n            BidLink(BidLink(bidLinks[_newBidder]).above()).setBelow(bidLinks[_newBidder]); //Our new head has us as a tail\\r\\n        }\\r\\n\\r\\n        //The chainlink is now ordered properly\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice USed to check which can of auction we are\\r\\n    /// @dev Only callable by the Auction House.\\r\\n    /// @param _newOwner The address of the bidder wishing to mint a new cryptograph\\r\\n    /// @return 0 if a normal auction, 1 if a minting auction\\r\\n    function win(address _newOwner) external restrictedToAuctionHouse() view returns(uint){\\r\\n        require(currentBids[_newOwner] != 0, \\\"You don\\u0027t have any active bid on this auction\\\");\\r\\n        require(now \\u003e endTime, \\\"The initial auction is not over yet\\\");\\r\\n\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    /// @notice Distribute the bid of an auction winner\\r\\n    /// @dev Only callable by the Auction House.\\r\\n    /// @param _newOwner The address of the bidder wishing to mint a new cryptograph\\r\\n    function distributeBid(address _newOwner) external restrictedToAuctionHouse(){\\r\\n\\r\\n         if(_newOwner == highestBidder){\\r\\n            distributeStakeholdersPayouts(currentBids[highestBidder] - unsettledPayouts, _newOwner); //Payouts are deduced from the highest bid\\r\\n        } else {\\r\\n            distributeStakeholdersPayouts(currentBids[_newOwner], _newOwner);\\r\\n        }\\r\\n\\r\\n        currentBids[_newOwner] = 0;\\r\\n    }\\r\\n\\r\\n    /// @notice Function used to distribute an arbitrary amount of money among non-bidders\\r\\n    /// @dev Only callable internally\\r\\n    /// @param _amount The amount of money to spread\\r\\n    /// @param _contributor The address of the gracious donor\\r\\n    function distributeStakeholdersPayouts(uint256 _amount, address _contributor) internal{\\r\\n        uint256 toDistribute = _amount;\\r\\n        uint256 toSend;\\r\\n\\r\\n        //Pay the charity\\r\\n        toSend = (charityCut * _amount) / bid_Decimals;\\r\\n        toDistribute -= toSend;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  charity,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(charity, _contributor);\\r\\n        }\\r\\n\\r\\n        //Pay the publisher\\r\\n        toSend = (publisherCut * _amount) / bid_Decimals;\\r\\n        toDistribute -= toSend;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  publisher,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(publisher, _contributor);\\r\\n        }\\r\\n\\r\\n        //Pay the thirdParty\\r\\n        toSend = (thirdPartyCut * _amount) / bid_Decimals;\\r\\n        toDistribute -= toSend;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  thirdParty,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(thirdParty, _contributor);\\r\\n        }\\r\\n\\r\\n        //Pay perpetual Altruism the reminder (25%). only non-null guaranteed address, so send any rounding errors there\\r\\n        toSend = toDistribute;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  perpertualAltruism,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(perpertualAltruism, _contributor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculating and setting how much payout a bidder will receive if outbid\\r\\n    /// @dev Only callable internally\\r\\n    /// @param _newBid The amount of money in the new bid\\r\\n    /// @param _bidder The address of the new bidder\\r\\n    function calculateReward(uint256 _newBid, address _bidder) internal{\\r\\n\\r\\n        //Calculating how much payout we will receive if we are outbid\\r\\n\\r\\n        //Init the baseline bid we need to perform against\\r\\n        uint256 baseBid = currentBids[highestBidder] * (bid_Decimals + bid_stepMin) / bid_Decimals;\\r\\n        if(baseBid == 0){\\r\\n            baseBid = startingPrice;\\r\\n\\r\\n            //Do not divide by 0\\r\\n            if(baseBid == 0){\\r\\n                baseBid = 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //We calculate our baseline reward. We square the decimals to guarantee a granularity of at least 1/bid_Decimals instead of 1/bid_multiplier\\r\\n        //This also somewhat limits the hardcap for a reward to max_UInt256/10^11 =\\u003e Not a problem as this amount of eth will not be minted\\r\\n        uint256 decimaledRatio = ((bid_Decimals * bid_multiplier * (_newBid - baseBid) ) / baseBid) + bid_incMin * bid_Decimals;\\r\\n\\r\\n        //If we go over the maximum payout, we set the reward to the maximum payout\\r\\n        if(decimaledRatio \\u003e (bid_Decimals * bid_incMax)){\\r\\n            decimaledRatio = bid_Decimals * bid_incMax;\\r\\n        }\\r\\n\\r\\n        duePayout[_bidder] = (_newBid * decimaledRatio)/(bid_Decimals*bid_Decimals);\\r\\n    }\\r\\n}\\r\\n\"},\"MintingAuctionProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./MintingAuctionV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title  Minting Auction Proxy Smart Contract\\r\\n/// @notice The Minting Auction proxy : this is this contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract MintingAuctionProxiedV1 is VCProxy, MintingAuctionHeaderV1, MintingAuctionStorageInternalV1  {\\r\\n\\r\\n    constructor(uint256 _version, address _vc)  public\\r\\n    VCProxy(_version, _vc) //Call the VC proxy constructor so that we know where our logic code is\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"MintingAuctionV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Minting Auction Header\\r\\n/// @notice Contain all the events emitted by the Minting Auction\\r\\ncontract MintingAuctionHeaderV1 {\\r\\n    event BidAccepted(uint256 bidValue, address bidder);\\r\\n    event Payout(uint256 amount, address beneficiary, address contributor);\\r\\n    event BidCancelled(uint256 bidValue, uint256 ethReturned, address bidder);\\r\\n    event SaleStarted(address seller, uint256 hammerTime, uint256 hammerBlock);\\r\\n    event SellingPriceAdjusted(address seller, uint256 amount);\\r\\n    event Win(address buyer, address seller, uint256 bidValue);\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Minting Auction Storage Internal\\r\\n/// @notice Contain all the storage of the Minting Auction declared in a way that don\\u0027t generate getters for Proxy use\\r\\ncontract MintingAuctionStorageInternalV1 {\\r\\n\\r\\n     /*\\r\\n    ==================================================\\r\\n                        Bidding section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    //The current bids made by each address\\r\\n    mapping (address =\\u003e uint) internal currentBids;\\r\\n\\r\\n    //The current amount of wei each address receive when outbid as the highest bid.\\r\\n    mapping (address =\\u003e uint) internal duePayout; //How much the bidder make\\r\\n\\r\\n    //The current highest bidder;\\r\\n    address internal highestBidder;\\r\\n\\r\\n    //The current amount of unsettled payouts distributed for the current bidding process\\r\\n    uint256 internal unsettledPayouts;\\r\\n\\r\\n    //The default starting price\\r\\n    uint256 internal startingPrice;\\r\\n\\r\\n    //The current selling price\\r\\n    uint256 internal sellingPrice;\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Calculations section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    /*\\r\\n    For a standing bid s and a new bid n, we express the return on the new bid as:\\r\\n\\r\\n    incentive(n,s) % = min[ incmax , incmin + m * (n- s * (1+ stepmin)) / (s * (1+ stepmin))]\\r\\n\\r\\n    Where:\\r\\n    stepmin is the minimum bid increment, expressed as a fraction of the current standing bid (ex : 0.01 for 1/10 or 10%)\\r\\n    incmin is the minimum incentive, expressed as a fraction\\r\\n    incmax is the maximum incentive, expressed as a fraction\\r\\n    m is the multiplier effect, expressed as a positive real number\\r\\n\\r\\n    */\\r\\n\\r\\n    //Values used to calculate the payouts.\\r\\n    uint256 internal bid_Decimals; //100k, or 100%\\r\\n    uint256 internal bid_incMax; //4.5k, or 4.5%\\r\\n    uint256 internal bid_incMin; //1k, or 1%\\r\\n    uint256 internal bid_stepMin; //5k, or 5%\\r\\n    uint256 internal bid_cutOthers; // 500, or 0.5%\\r\\n\\r\\n    uint256 internal bid_multiplier; //Will be divided by 100 for the calulations. 100 mean that doubling the bid mean 1% extra return\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Money section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    address internal publisher; //The address of the publisher of the cryptograph. Can edit media url and hash.\\r\\n    address internal charity; //The address to which the chartity cut is being sent to\\r\\n    address internal thirdParty; //The address of any third party taking a cut\\r\\n    address internal perpertualAltruism; //The perpetual altruism address\\r\\n\\r\\n    //The granularity of the redistribution is 0.001%. 100 000 = all the money\\r\\n    uint256 internal publisherCut;\\r\\n    uint256 internal charityCut;\\r\\n    uint256 internal thirdPartyCut;\\r\\n    uint256 internal perpetualAltruismCut;\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Timing section\\r\\n    ==================================================\\r\\n    */\\r\\n    uint256 internal startTime; //The start date of the initial auction\\r\\n    uint256 internal endTime; //The end date of the initial auction\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Binding section\\r\\n    ==================================================\\r\\n    */\\r\\n    address internal auctionHouse; //The address of the auction house\\r\\n    address internal myCryptograph; //The address of the Cryptograph I\\u0027m administrating\\r\\n    address internal cryFactory; //The address of the cryptograph Factory\\r\\n\\r\\n    bool internal initialized;\\r\\n\\r\\n    //A mapping associating each bidder with their associated chainLink\\r\\n    mapping (address =\\u003e address) internal bidLinks;\\r\\n\\r\\n    address internal initiator; //We keep the address of our initator for future minting\\r\\n\\r\\n    uint256 internal numberOfBids; //Current number of standing bids\\r\\n    uint256 internal maxSupply; //Maximum number of bid to keep\\r\\n    address internal tailBidder; //The address of the current bottom bidder\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Minting Auction Storage Public\\r\\n/// @notice Contain all the storage of the Minting Auction declared in a way that generate getters for Logic use\\r\\ncontract MintingAuctionStoragePublicV1 {\\r\\n      /*\\r\\n    ==================================================\\r\\n                        Bidding section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    //The current bids made by each address\\r\\n    mapping (address =\\u003e uint) public currentBids;\\r\\n\\r\\n    //The current amount of wei each address receive when outbid as the highest bid.\\r\\n    mapping (address =\\u003e uint) public duePayout; //How much the bidder make\\r\\n\\r\\n    //The current highest bidder;\\r\\n    address public highestBidder;\\r\\n\\r\\n    //The current amount of unsettled payouts distributed for the current bidding process\\r\\n    uint256 public unsettledPayouts;\\r\\n\\r\\n    //The default starting price\\r\\n    uint256 public startingPrice;\\r\\n\\r\\n    //The current selling price\\r\\n    uint256 public sellingPrice;\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Calculations section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    /*\\r\\n    For a standing bid s and a new bid n, we express the return on the new bid as:\\r\\n\\r\\n    incentive(n,s) % = min[ incmax , incmin + m * (n- s * (1+ stepmin)) / (s * (1+ stepmin))]\\r\\n\\r\\n    Where:\\r\\n    stepmin is the minimum bid increment, expressed as a fraction of the current standing bid (ex : 0.01 for 1/10 or 10%)\\r\\n    incmin is the minimum incentive, expressed as a fraction\\r\\n    incmax is the maximum incentive, expressed as a fraction\\r\\n    m is the multiplier effect, expressed as a positive real number\\r\\n\\r\\n    */\\r\\n\\r\\n    //Values used to calculate the payouts.\\r\\n    uint256 public bid_Decimals; //100k, or 100%\\r\\n    uint256 public bid_incMax; //4.5k, or 4.5%\\r\\n    uint256 public bid_incMin; //1k, or 1%\\r\\n    uint256 public bid_stepMin; //5k, or 5%\\r\\n    uint256 public bid_cutOthers; // 500, or 0.5%\\r\\n\\r\\n    uint256 public bid_multiplier; //Will be divided by 100 for the calulations. 100 mean that doubling the bid mean 1% extra return\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Money section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    address public publisher; //The address of the publisher of the cryptograph. Can edit media url and hash.\\r\\n    address public charity; //The address to which the chartity cut is being sent to\\r\\n    address public thirdParty; //The address of any third party taking a cut\\r\\n    address public perpertualAltruism; //The perpetual altruism address\\r\\n\\r\\n    //The granularity of the redistribution is 0.001%. 100 000 = all the money\\r\\n    uint256 public publisherCut;\\r\\n    uint256 public charityCut;\\r\\n    uint256 public thirdPartyCut;\\r\\n    uint256 public perpetualAltruismCut;\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Timing section\\r\\n    ==================================================\\r\\n    */\\r\\n    uint256 public startTime; //The start date of the initial auction\\r\\n    uint256 public endTime; //The end date of the initial auction\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Binding section\\r\\n    ==================================================\\r\\n    */\\r\\n    address public auctionHouse; //The address of the auction house\\r\\n    address public myCryptograph; //The address of the Cryptograph I\\u0027m administrating\\r\\n    address public cryFactory; //The address of the cryptograph Factory\\r\\n\\r\\n    bool public initialized;\\r\\n\\r\\n    //A mapping associating each bidder with their associated chainLink\\r\\n    mapping (address =\\u003e address) public bidLinks;\\r\\n\\r\\n    address public initiator; //We keep the address of our initator for future minting\\r\\n\\r\\n    uint256 public numberOfBids; //Current number of standing bids\\r\\n    uint256 public maxSupply; //Maximum number of bids to keep\\r\\n    address public tailBidder; //The address of the current bottom bidder\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"SenateLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./SenateV1.sol\\\";\\r\\nimport \\\"./CryptographIndexLogicV1.sol\\\";\\r\\nimport \\\"./TheCryptographLogicV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud\\r\\n/// @title Senate Logic Code\\r\\n/// @notice This contract is used by the Version Control to determine what smart contracts are allowed to use in the ecosystem. It\\u0027s logic code, cast a proxy with it.\\r\\ncontract SenateLogicV1 is VCProxyData, SenateHeaderV1, SenateStorageExternalV1  {\\r\\n\\r\\n    /// @notice Generic constructor, empty\\r\\n    /// @dev This contract is meant to be used in a delegatecall and hence its memory state is irrelevant\\r\\n    constructor() public\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //Modifier for functions that requires to be called only by the lawmaker\\r\\n    modifier restrictedToLawmaker(){\\r\\n        require(msg.sender == lawmaker, \\\"Only the lawmaker can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Init function of the Senate\\r\\n    /// @param _cryptographIndex The address of the cryptograph index that we will use to lookup owners\\r\\n    function init(address _cryptographIndex) external {\\r\\n        require (cryptographIndex == address(0x0), \\\"The senate has already been initialized\\\");\\r\\n        cryptographIndex = _cryptographIndex;\\r\\n    }\\r\\n\\r\\n    /// @notice The Version Control must ask the senate (using this function) if an address is authorized before setting it in code\\r\\n    /// @dev New addresses are voted in by cryptographs owners\\r\\n    /// @param _candidateAddress The serial of the Cryptograph you want to peek highest bid on\\r\\n    /// @return If the address can be used in the Version Control\\r\\n    function isAddressAllowed(address _candidateAddress) external view returns(bool){\\r\\n        bool retour = laws[_candidateAddress];\\r\\n        return retour;\\r\\n    }\\r\\n\\r\\n    /// @notice Forcefully add or remove an address from the addresses the VC can use.\\r\\n    /// @dev https://en.wikipedia.org/wiki/Article_49_of_the_French_Constitution\\r\\n    /// @param _candidateAddress The serial of the Cryptograph you want to peek highest bid on\\r\\n    /// @param _allowed A bool indicating _candidateAddress use for the Version Control. True if the address is to be allowed, False if disallowed\\r\\n    function quaranteNeufTrois(address _candidateAddress, bool _allowed) external restrictedToLawmaker() {\\r\\n        require(!democracy, \\\"Democracy is enforced, new addresses must be subject to approval by the senate\\\");\\r\\n        laws[_candidateAddress] = _allowed;\\r\\n        if(!_allowed){ //Are we deleting a law ?\\r\\n                laws[_candidateAddress] = false;\\r\\n                emit RemovedLogicCodeToVC(_candidateAddress); //emit the event\\r\\n            } else { //We are adding a law\\r\\n                laws[_candidateAddress] = true;\\r\\n                emit AddedLogicCodeToVC(_candidateAddress); //emit the event\\r\\n            }\\r\\n    }\\r\\n\\r\\n    /// @notice Set the senate to democratic : new laws must be voted upon\\r\\n    function powerToThePeople() external restrictedToLawmaker(){\\r\\n        require(!democracy, \\\"Democracy is already in place\\\");\\r\\n        democracy = true; //https://youtu.be/T-TGPhVC0AE?t=11\\r\\n        emit DemocracyOn(); //Emitting the event\\r\\n    }\\r\\n\\r\\n    /// @notice  Submit a new law proposition\\r\\n    /// @param _law The proposed logic smart contract address to be added to the VC law pool\\r\\n    /// @param _duration The time (in second) during which this law should be submitted to voting\\r\\n    /// @param _revokeLaw Set to true if the law is to be removed instead of added to the pool\\r\\n    /// @param _stateOfEmergency Set to true if democracy is to be revoked in the senate. Override _law and _revokeLaw.\\r\\n    /// @return The index of the new law in the law index\\r\\n    function submitNewLaw(address _law, uint256 _duration, bool _revokeLaw, bool _stateOfEmergency) external restrictedToLawmaker() returns (uint256) {\\r\\n        lawPropositions.push(address(new LawProposition(_law, _duration, _revokeLaw, _stateOfEmergency)));\\r\\n        emit NewLawProposal(lawPropositions.length - 1, _law, now + _duration, _revokeLaw, _stateOfEmergency);\\r\\n        totalLaws = lawPropositions.length;\\r\\n        return totalLaws;\\r\\n    }\\r\\n\\r\\n    /// @notice Vote on a law if you are a legitimate cryptograph owner\\r\\n    /// @dev For now, only the first # of each edition has voting rights\\r\\n    /// @param _vote True for agreeing with the law, false for refusing it\\r\\n    /// @param _lawIndex The LawProposition index to be voted on\\r\\n    /// @param _cryptographIssue The issue # of the Cryptograph\\r\\n    /// @param _editionSerial The edition serial # of the Cryptograph.\\r\\n    function VoteOnLaw(bool _vote, uint256 _lawIndex, uint256 _cryptographIssue, uint256 _editionSerial) external{\\r\\n\\r\\n        require((_editionSerial == 1 || _editionSerial == 0 ), \\\"Only the first serial of each edition is allowed to vote\\\");\\r\\n\\r\\n        //Grabbing the cryptograph\\r\\n        address _cry = CryptographIndexLogicV1(cryptographIndex).getCryptograph(_cryptographIssue, true, _editionSerial);\\r\\n\\r\\n        //Checking that you are indeed the cryptograph owner\\r\\n        require(\\r\\n            TheCryptographLogicV1(address(uint160(_cry))).owner() == msg.sender,\\r\\n            \\\"You are not an owner allowed to vote\\\"\\r\\n        );\\r\\n\\r\\n        //Voting\\r\\n        LawProposition(lawPropositions[_lawIndex]).vote(_vote, _cry);\\r\\n\\r\\n        //Emitting the event\\r\\n        emit Voted(_vote, _lawIndex, _cryptographIssue, _editionSerial);\\r\\n    }\\r\\n\\r\\n    /// @notice Enact a law\\r\\n    /// @dev Will only work if past enaction time and positive votes \\u003e= negative votes\\r\\n    /// @param _lawIndex The index of the LawProposition to be enacted\\r\\n    function EnactLaw(uint256 _lawIndex) external restrictedToLawmaker(){\\r\\n        //Grabbing the LawProposition\\r\\n        LawProposition _lawProp = LawProposition(lawPropositions[_lawIndex]);\\r\\n        _lawProp.enactable(); //Checks are made internally by the LawPropostion\\r\\n\\r\\n        //int lawIndex, address law, uint256 enactionTime, bool revokeLaw, bool stateOfEmergency\\r\\n        emit EnactProposal(_lawIndex, _lawProp.law(), _lawProp.enactionTime(), _lawProp.revokeLaw(), _lawProp.stateOfEmergency());\\r\\n\\r\\n        if(_lawProp.stateOfEmergency()){ //Dying with thunderous applause\\r\\n            democracy = false; //BETTER DEAD THAN RED\\r\\n            emit DemocracyOff(); // I am the senate\\r\\n        } else {\\r\\n            if(_lawProp.revokeLaw()){ //Are we deleting a law ?\\r\\n                laws[_lawProp.law()] = false;\\r\\n                emit RemovedLogicCodeToVC(_lawProp.law()); //emit the event\\r\\n            } else { //We are adding a law\\r\\n                laws[_lawProp.law()] = true;\\r\\n                emit AddedLogicCodeToVC(_lawProp.law()); //emit the event\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud\\r\\n/// @title Auction House Logic Code\\r\\n/// @notice Laws proposition instanced by the senate.\\r\\ncontract LawProposition {\\r\\n\\r\\n    address public senate; //The address of the senate\\r\\n    mapping (address =\\u003e bool) public tokenWhoVoted; //A mapping storing every token that has voted on this law\\r\\n    address public law; //The address of a smart contract logic code to be potentially used in the VC\\r\\n    uint256 public enactionTime; //A timestamp storing the earliest time at which the lawmaker can enact the law\\r\\n    bool public revokeLaw; //A bool true if the proposed smart contract address should be removed instead of added to the VC address pool\\r\\n    bool public stateOfEmergency; //A boolean indicating whether or not democracy shall be revoked in the senate once this law passes\\r\\n    uint256 public yesCount; //Number of tokens who voted yes\\r\\n    uint256 public noCount; //Number of tokens who voted no\\r\\n\\r\\n    modifier restrictedToSenate(){\\r\\n        require((msg.sender == senate), \\\"Only callable by senate/Can\\u0027t vote anymore\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Law constructor\\r\\n    /// @dev This contract is meant to be used by the senate only\\r\\n    /// @param _law The proposed logic smart contract address to be added to the VC law pool\\r\\n    /// @param _duration The time (in second) during which this law should be submitted to voting\\r\\n    /// @param _revokeLaw Set to true if the law is to be removed instead of added to the pool\\r\\n    /// @param _stateOfEmergency Set to true if democracy is to be revoked in the senate. Override _law and _revokeLaw.\\r\\n    constructor(address _law, uint256 _duration, bool _revokeLaw, bool _stateOfEmergency) public\\r\\n    {\\r\\n        //Duration of vote must be at least 24 hours\\r\\n        require (_duration \\u003e= 60*60*24, \\\"Voting should last at least 24 hours\\\");\\r\\n        require (_duration \\u003c= 60*60*24*366, \\\"Voting should last maximum a year\\\");\\r\\n\\r\\n        //Setting the senate\\r\\n        senate = msg.sender;\\r\\n\\r\\n        //Setting the other params\\r\\n        law = _law;\\r\\n        revokeLaw = _revokeLaw;\\r\\n        stateOfEmergency = _stateOfEmergency;\\r\\n        enactionTime = now + _duration;\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Vote on a law\\r\\n    /// @dev It is the senate responsability to ensure no imposters are voting\\r\\n    /// @param _vote True if agreed with the law, false is against\\r\\n    /// @param _token The address of the voting token\\r\\n    function vote(bool _vote, address _token)  external restrictedToSenate(){\\r\\n\\r\\n        //Checking if already voted\\r\\n        require(!tokenWhoVoted[_token], \\\"This token already cast a vote\\\");\\r\\n\\r\\n        //Setting up the vote\\r\\n        tokenWhoVoted[_token] = true;\\r\\n\\r\\n        //Counting the vote\\r\\n        if(_vote){\\r\\n            yesCount++;\\r\\n        } else {\\r\\n            noCount++;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Check if a law can be enacted. If yes, then prevents further voting.\\r\\n    /// @dev Throw if not enactable (save gas)\\r\\n    function enactable()  external restrictedToSenate(){\\r\\n        require(enactionTime \\u003c now, \\\"It is too early to enact the law\\\");\\r\\n        require(noCount \\u003c= yesCount, \\\"Too many voters oppose the law\\\");\\r\\n        senate = address(0x0); //Disable voting/enacting laws\\r\\n    }\\r\\n\\r\\n\\r\\n}\"},\"SenateProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./SenateV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title  Senate Proxy Smart Contract\\r\\n/// @notice The Senate proxy : this is this contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract SenateProxiedV1 is VCProxy, SenateHeaderV1, SenateStorageInternalV1  {\\r\\n\\r\\n    constructor(uint256 _version, address _vc)  public\\r\\n    VCProxy(_version, _vc) //Call the VC proxy constructor so that we know where our logic code is\\r\\n    {\\r\\n        lawmaker = msg.sender; //Only the creator of this smart contract will be able to submit new addresses to be voted on\\r\\n    }\\r\\n\\r\\n    //No other logic code as it is all proxied\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\"},\"SenateV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Senate Header\\r\\n/// @notice Contain all the events emitted by the Senate\\r\\ncontract SenateHeaderV1 {\\r\\n    event AddedLogicCodeToVC(address law); //A new logic code address (law) was added to the available pool\\r\\n    event RemovedLogicCodeToVC(address law); //A logic code address (law) was removed from the available pool\\r\\n    event NewLawProposal(uint256 lawIndex, address law, uint256 enactionTime, bool revokeLaw, bool stateOfEmergency); //A new law proposal to vote on\\r\\n    event EnactProposal(uint256 lawIndex, address law, uint256 enactionTime, bool revokeLaw, bool stateOfEmergency); //The lawmaker applied a proposal\\r\\n    event Voted(bool vote, uint256 lawIndex, uint256 issueNumber, uint256 SerialNumber); //Emitted when a token holder vote on a low\\r\\n    event DemocracyOn(); //Enable voting before adding new laws\\r\\n    event DemocracyOff(); //Give back the ability to the lawmaker to add any law without a vote\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud\\r\\n/// @title Senate Storage Internal\\r\\n/// @notice Contain all the storage of the Senate declared in a way that does not generate getters for Proxy use\\r\\ncontract SenateStorageInternalV1 {\\r\\n\\r\\n    bool internal democracy; //A bool controlling if address addition/removal is subject to vote\\r\\n    mapping (address =\\u003e bool) internal laws; //The list of allowed smart contract addresses for use in the Version Control\\r\\n    address internal lawmaker; //Address allowed to sumbmit new address to be voted upon.\\r\\n    address[] internal lawPropositions; //List of proposed laws to be voted upon\\r\\n    address internal cryptographIndex; //The cryptograph index address\\r\\n    uint256 internal totalLaws; //The total number of published laws\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud\\r\\n/// @title Senate Storage External\\r\\n/// @notice Contain all the storage of the Senate declared in a way that generates getters for Logic Code use\\r\\ncontract SenateStorageExternalV1 {\\r\\n\\r\\n    bool public democracy; //A bool controlling if address addition/removal is subject to vote\\r\\n    mapping(address =\\u003e bool) public laws; //The list of allowed smart contract addresses for use in the VC\\r\\n    address public lawmaker; //Address allowed to sumbmit new address to be voted upon.\\r\\n    address[] public lawPropositions; //List of proposed laws to be voted upon\\r\\n    address public cryptographIndex; //The cryptograph index address\\r\\n    uint256 public totalLaws; //The total number of published laws\\r\\n}\\r\\n\\r\\n\"},\"SingleAuctionBidLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./SingleAuctionV1.sol\\\";\\r\\nimport \\\"./CryptographFactoryV1.sol\\\";\\r\\nimport \\\"./AuctionHouseLogicV1.sol\\\";\\r\\nimport \\\"./TheCryptographLogicV1.sol\\\";\\r\\nimport \\\"./CryptographInitiator.sol\\\";\\r\\nimport \\\"./BidLinkSimple.sol\\\";\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Single Auction Bid Logic Code\\r\\n/// @notice Implements a GBM auction bid function. See white paper for the details. Logic code, to be casted on a proxy.\\r\\ncontract SingleAuctionBidLogicV1 is VCProxyData, SingleAuctionHeaderV1, SingleAuctionStorageInternalV1  {\\r\\n\\r\\n    //Modifier for functions that requires to be called only by the Auction house\\r\\n    modifier restrictedToAuctionHouse(){\\r\\n        require((msg.sender == auctionHouse), \\\"Only the auction house smart contract can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Place a bid to own a cryptograph and distribute the incentives\\r\\n    /// @dev Only callable by the Auction House\\r\\n    /// @param _newBidAmount The amount of the new bid\\r\\n    /// @param _newBidder The address of the bidder\\r\\n    function bid(uint256 _newBidAmount, address _newBidder) external payable restrictedToAuctionHouse(){\\r\\n\\r\\n        /*\\r\\n        ========================== money check ==========================\\r\\n        */\\r\\n\\r\\n        //uninitialized  cryptographs can\\u0027t be bid upon\\r\\n        require(initialized, \\\"This auction has not been properly setup yet\\\");\\r\\n\\r\\n        //Did we send the proper amount of money ?\\r\\n        require(_newBidAmount == msg.value + currentBids[_newBidder], \\\"Amount of money sent incorrect\\\");\\r\\n\\r\\n        //check to be made : is the new bid big enough ?\\r\\n        require( //Either fresh bid or meeting the standing bid * the step\\r\\n            ((highestBidder == address(0)) \\u0026\\u0026 startingPrice \\u003c= _newBidAmount) ||\\r\\n            ( (highestBidder != address(0)) \\u0026\\u0026 (currentBids[highestBidder] * (bid_Decimals + bid_stepMin) \\u003c= (_newBidAmount * bid_Decimals) )),\\r\\n            \\\"New bid amount does not meet the minimal new bid amount\\\");\\r\\n\\r\\n        /*\\r\\n        ========================== Timing check ==========================\\r\\n        */\\r\\n\\r\\n        //We must be past the initial auction start\\r\\n        require(now \\u003e= startTime, \\\"You can only bid once the initial auction has started\\\");\\r\\n\\r\\n        //Checking if an auction is not over\\r\\n        require((now \\u003c endTime \\u0026\\u0026 TheCryptographLogicV1(myCryptograph).owner() == address(0x0)) ||\\r\\n        (TheCryptographLogicV1(myCryptograph).owner() != address(0x0) \\u0026\\u0026 (hammerTime == 0 || now \\u003c hammerTime)),\\r\\n        \\\"The auction is over, the bid was rejected\\\");\\r\\n\\r\\n        //Extending the time at the end of the initial auction\\r\\n        if(endTime \\u003c now + 600 \\u0026\\u0026 TheCryptographLogicV1(myCryptograph).owner() == address(0x0)){\\r\\n            endTime = now + 600;\\r\\n        }\\r\\n\\r\\n        //If hammer time is non-zero, we must be before the end of hammerTime\\r\\n        //This allow potential bidders to come in.\\r\\n        if(hammerTime != 0 \\u0026\\u0026 now + 600 \\u003e hammerTime){\\r\\n            hammerTime = now + 600; //Extend the hammertime auction by 600s\\r\\n            hammerBlock = block.number + 4; //Extend the number of minimum elapsed block by 4\\r\\n        }\\r\\n\\r\\n\\r\\n        //Emit the bid acceptance event before triggering the payouts\\r\\n        emit BidAccepted(_newBidAmount, _newBidder);\\r\\n\\r\\n        /*\\r\\n        ========================== Payouts ==========================\\r\\n        */\\r\\n\\r\\n        //0.5% of the bid is sent to third parties\\r\\n        uint256 duePay;\\r\\n\\r\\n        //The first bid in perpetual trading is exempted from bidding fees\\r\\n        if(!(highestBidder == address(0) \\u0026\\u0026 TheCryptographLogicV1(myCryptograph).owner() != address(0))){\\r\\n            //If not, a bidding fee is taken and distrubuted\\r\\n            duePay = (_newBidAmount * bid_cutOthers)/bid_Decimals;\\r\\n            unsettledPayouts += duePay;\\r\\n            distributeStakeholdersPayouts(duePay, _newBidder);\\r\\n        }\\r\\n\\r\\n        //Send his payout to the previous highest bidder\\r\\n        duePay = duePayout[highestBidder];\\r\\n        if(duePay != 0){\\r\\n            unsettledPayouts += duePay;\\r\\n            emit Payout(duePay,  highestBidder,  _newBidder);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: duePay }(highestBidder, _newBidder);\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ========================== Reward ==========================\\r\\n        */\\r\\n\\r\\n        //Set the new payout amount we will receive when outbid\\r\\n        calculateReward(_newBidAmount, _newBidder);\\r\\n\\r\\n        /*\\r\\n        ===================== Bid Cancellation =====================\\r\\n        */\\r\\n        uint256 toSend;\\r\\n\\r\\n        if ( hammerTime != 0 || TheCryptographLogicV1(myCryptograph).owner() == address(0)) { //Ongoing sale\\r\\n            \\r\\n            if(highestBidder != _newBidder){\\r\\n                //We cancel and withdraw the current highest standing bid\\r\\n                toSend = currentBids[highestBidder];\\r\\n                if(toSend != 0){ //For the case of the first ever bid on an auction : address 0x0 is not cancelling anything...\\r\\n                    //Send back all the money : no payout settlement required\\r\\n                    emit BidCancelled(toSend, toSend, highestBidder);\\r\\n                    AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(highestBidder, highestBidder);\\r\\n                    //Edge case because of renatus : we may have a link of bids to maintain, so no reseting links\\r\\n                    delete currentBids[highestBidder];\\r\\n                    delete duePayout[highestBidder];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n            \\r\\n        if(currentBids[_newBidder] != 0){\\r\\n            emit BidCancelled(currentBids[_newBidder], 0, _newBidder);\\r\\n            //No need to send any back money to a self outbidder : this smart contract only receive the extra required amount\\r\\n\\r\\n            //Updating our neigbors link\\r\\n            if( BidLinkSimple(bidLinks[_newBidder]).above() != address(0x0)){\\r\\n                  BidLinkSimple(BidLinkSimple(bidLinks[_newBidder]).above()).setBelow(BidLinkSimple(bidLinks[_newBidder]).below()); //Unlinking above us\\r\\n            }\\r\\n\\r\\n            //We don\\u0027t need to update the link below us if we are already the highest bidder\\r\\n            if(highestBidder != _newBidder){\\r\\n                if( BidLinkSimple(bidLinks[_newBidder]).below() != address(0x0)){\\r\\n                    BidLinkSimple(BidLinkSimple(bidLinks[_newBidder]).below()).setAbove(BidLinkSimple(bidLinks[_newBidder]).above()); //Unlinking below us\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n\\r\\n        /*\\r\\n        ===================== Bid Registering =====================\\r\\n        */\\r\\n\\r\\n        //Check if the bidder already had a link. Create one if not\\r\\n        if(bidLinks[_newBidder] == address(0x0)){\\r\\n            bidLinks[_newBidder] = address(new BidLinkSimple(_newBidder));\\r\\n        }\\r\\n\\r\\n        //Link our bidlink to the previous head, if it\\u0027s not already us (which would mean no changes)\\r\\n        if(_newBidder != highestBidder){\\r\\n\\r\\n            //There is no one above us\\r\\n            BidLinkSimple(bidLinks[_newBidder]).setAbove(address(0x0));\\r\\n\\r\\n            if( hammerTime == 0 \\u0026\\u0026 TheCryptographLogicV1(myCryptograph).owner() != address(0)){ //We did not cancel the previous highest bidder\\r\\n                //The Link below us is the previous highest bidder\\r\\n                BidLinkSimple(bidLinks[_newBidder]).setBelow(bidLinks[highestBidder]);\\r\\n\\r\\n                //We are above the link below us\\r\\n                if(highestBidder != address(0x0)){\\r\\n                    BidLinkSimple(bidLinks[highestBidder]).setAbove(bidLinks[_newBidder]);\\r\\n                }\\r\\n\\r\\n            } else { //We just cancelled the previous highest bidder\\r\\n\\r\\n                //If said highest bidder existed\\r\\n                if(highestBidder != address(0x0)){\\r\\n\\r\\n                    //The bid below us is the bid that is currently below the still registered previous highest bidder\\r\\n                    BidLinkSimple(bidLinks[_newBidder]).setBelow(BidLinkSimple(bidLinks[highestBidder]).below());\\r\\n\\r\\n                    //We are also above said bid\\r\\n                    if(BidLinkSimple(bidLinks[highestBidder]).below() != address(0x0)){\\r\\n                       BidLinkSimple(BidLinkSimple(bidLinks[highestBidder]).below()).setAbove(bidLinks[_newBidder]);\\r\\n                    }\\r\\n\\r\\n\\r\\n                } else {\\r\\n                    //There is no one below us\\r\\n                    BidLinkSimple(bidLinks[_newBidder]).setBelow(address(0x0));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //Set the amount of the new highest bid\\r\\n        currentBids[_newBidder] = _newBidAmount;\\r\\n        highestBidder = _newBidder; //We are the new highest bidder\\r\\n\\r\\n        /*\\r\\n        ===================== Sales Trigger =====================\\r\\n        */\\r\\n\\r\\n        //If a selling price have been met, trigger a sale\\r\\n        if( sellingPrice != 0 \\u0026\\u0026 _newBidAmount \\u003e= sellingPrice \\u0026\\u0026 hammerTime == 0){\\r\\n            hammerTime = now + hammerTimeDuration;\\r\\n            hammerBlock = block.number + hammerBlockDuration;\\r\\n            emit SaleStarted(_newBidder, hammerTime, hammerBlock);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function used to distribute an arbitrary amount of money among non-bidders\\r\\n    /// @dev Only callable internally\\r\\n    /// @param _amount The amount of money to spread\\r\\n    /// @param _contributor The address of the source of the money\\r\\n    function distributeStakeholdersPayouts(uint256 _amount, address _contributor) internal{\\r\\n        uint256 toDistribute = _amount;\\r\\n        uint256 toSend;\\r\\n\\r\\n        //Pay the charity\\r\\n        toSend = (charityCut * _amount) / bid_Decimals;\\r\\n        toDistribute -= toSend;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  charity,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(charity, _contributor);\\r\\n        }\\r\\n\\r\\n        //Pay the publisher\\r\\n        toSend = (publisherCut * _amount) / bid_Decimals;\\r\\n        toDistribute -= toSend;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  publisher,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(publisher, _contributor);\\r\\n        }\\r\\n\\r\\n        //Pay the thirdParty account\\r\\n        toSend = (thirdPartyCut * _amount) / bid_Decimals;\\r\\n        toDistribute -= toSend;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  thirdParty,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(thirdParty, _contributor);\\r\\n        }\\r\\n\\r\\n        //Pay perpetual Altruism the reminder (25%). only non-null guaranteed address, so send any rounding errors there\\r\\n        toSend = toDistribute;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  perpertualAltruism,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(perpertualAltruism, _contributor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculating and setting how much payout a bidder will receive if outbid\\r\\n    /// @dev Only callable internally\\r\\n    /// @param _newBid The amount of money in the new bid\\r\\n    /// @param _bidder The address of the new bidder\\r\\n    function calculateReward(uint256 _newBid, address _bidder) internal{\\r\\n\\r\\n        //Calculating how much payout we will receive if we are outbid\\r\\n\\r\\n        //Init the baseline bid we need to perform against\\r\\n        uint256 baseBid = currentBids[highestBidder] * (bid_Decimals + bid_stepMin) / bid_Decimals;\\r\\n        if(baseBid == 0){\\r\\n            baseBid = startingPrice;\\r\\n\\r\\n            //Do not divide by 0\\r\\n            if(baseBid == 0){\\r\\n                baseBid = 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //We calculate our baseline reward. We square the decimals to guarantee a granularity of at least 1/bid_Decimals instead of 1/bid_multiplier\\r\\n        //This also somewhat limit the hardcap for a reward to max_UInt256/10^11 =\\u003e Not a problem as this amount of eth will not be minted\\r\\n        uint256 decimaledRatio = ((bid_Decimals * bid_multiplier * (_newBid - baseBid) ) / baseBid) + bid_incMin * bid_Decimals;\\r\\n\\r\\n        //If we go over the maximum payout, we set the reward to the maximum payout\\r\\n        if(decimaledRatio \\u003e (bid_Decimals * bid_incMax)){\\r\\n            decimaledRatio = bid_Decimals * bid_incMax;\\r\\n        }\\r\\n\\r\\n        duePayout[_bidder] = (_newBid * decimaledRatio)/(bid_Decimals*bid_Decimals);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"SingleAuctionLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./SingleAuctionV1.sol\\\";\\r\\nimport \\\"./CryptographFactoryV1.sol\\\";\\r\\nimport \\\"./AuctionHouseLogicV1.sol\\\";\\r\\nimport \\\"./TheCryptographLogicV1.sol\\\";\\r\\nimport \\\"./CryptographInitiator.sol\\\";\\r\\nimport \\\"./BidLinkSimple.sol\\\";\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Single Auction Logic Code\\r\\n/// @notice Implements a GBM auction. See white paper for the details. Logic code, to be casted on a proxy.\\r\\ncontract SingleAuctionLogicV1 is VCProxyData, SingleAuctionHeaderV1, SingleAuctionStoragePublicV1  {\\r\\n\\r\\n    /// @notice Generic constructor, empty\\r\\n    /// @dev This contract is meant to be used in a delegatecall and hence its memory state is irrelevant\\r\\n    constructor () public\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //Modifier for functions that requires to be called only by the Auction house\\r\\n    modifier restrictedToAuctionHouse(){\\r\\n        require((msg.sender == auctionHouse), \\\"Only the auction house smart contract can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Init function of the MintingAuction\\r\\n    /// @param _myCryptograph The address of the cryptograph this auction is paired with\\r\\n    /// @param _cryInitiator The address of the initator containing the details of our auction\\r\\n    /// @param _initialize true =\\u003e can\\u0027t change any spec afterward. false =\\u003e can initialize again.\\r\\n    function initAuction(\\r\\n            address _myCryptograph,\\r\\n            address _cryInitiator,\\r\\n            bool _initialize\\r\\n        ) public {\\r\\n\\r\\n        require(!initialized, \\\"This auction is already initialized\\\");\\r\\n        initialized = _initialize; //Are we locking ?\\r\\n\\r\\n        //we must be either perpetual altruism OR never inited before\\r\\n        require(auctionHouse == address(0) || msg.sender == cryFactory,\\\"Only Perpetual altruism can change a yet to be locked auction\\\");\\r\\n        cryFactory = msg.sender;\\r\\n\\r\\n        /*\\r\\n        ==================================================\\r\\n                            Bidding section\\r\\n        ==================================================\\r\\n        */\\r\\n\\r\\n        startingPrice = CryptographInitiator(_cryInitiator).startingPrice(); //The first bid that need to be outbid is 1 Wei\\r\\n        sellingPrice = 0; //A newly minted cryptograph doesn\\u0027t have an owner willing to sell\\r\\n\\r\\n        /*\\r\\n        ==================================================\\r\\n                        Calculations section\\r\\n        ==================================================\\r\\n        */\\r\\n        bid_Decimals = 100000;  //100k, or 100%\\r\\n        bid_incMax = 10000; //10k, or 10%\\r\\n        bid_incMin = 1000; //1k, or 1%\\r\\n        bid_stepMin = 10500; //10.5k, or 10.5%\\r\\n        bid_cutOthers = 500; // 500, or 0.5%\\r\\n        bid_multiplier = 11120; // 9000 = Doubling step min bid yield max gain (1%+9% = 10%). \\r\\n\\r\\n        sale_fee = 10000; //10k, or 10%\\r\\n\\r\\n         /*\\r\\n        ==================================================\\r\\n                            Money section\\r\\n        ==================================================\\r\\n        */\\r\\n        //Setting up money flow\\r\\n        perpertualAltruism = CryptographFactoryStoragePublicV1(cryFactory).officialPublisher();\\r\\n        perpetualAltruismCut = CryptographInitiator(_cryInitiator).perpetualAltruismCut();\\r\\n        publisher = CryptographInitiator(_cryInitiator).publisher();\\r\\n        publisherCut = CryptographInitiator(_cryInitiator).publisherCut();\\r\\n        charity = CryptographInitiator(_cryInitiator).charity();\\r\\n        charityCut = CryptographInitiator(_cryInitiator).charityCut();\\r\\n        thirdParty = CryptographInitiator(_cryInitiator).thirdParty();\\r\\n        thirdPartyCut = CryptographInitiator(_cryInitiator).thirdPartyCut();\\r\\n\\r\\n        //Setting up timings\\r\\n        startTime = CryptographInitiator(_cryInitiator).auctionStartTime();\\r\\n        endTime = CryptographInitiator(_cryInitiator).auctionStartTime() + CryptographInitiator(_cryInitiator).auctionSecondsDuration();\\r\\n\\r\\n        hammerBlockDuration = 10; //Minimum 10 blocks\\r\\n        hammerTimeDuration = 36*60*60; //The new perpetual auction will last for 36 hours at least\\r\\n        delete hammerBlock;\\r\\n        delete hammerTime;\\r\\n\\r\\n        auctionHouse = CryptographFactoryStoragePublicV1(cryFactory).targetAuctionHouse();\\r\\n        myCryptograph = _myCryptograph;\\r\\n    }\\r\\n\\r\\n    /// @notice Make an official auction unmodifiable once we are certain the parameters are correct\\r\\n    /// @dev Only callable by perpetual altruism\\r\\n    function lock() external{\\r\\n        require(msg.sender == cryFactory, \\\"Only Perpetual altruism can lock the initialization\\\");\\r\\n        initialized = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Place a bid to own a cryptograph and distribute the incentives\\r\\n    /// @dev Only callable by the Auction House\\r\\n    /// @param _newBidAmount The amount of the new bid\\r\\n    /// @param _newBidder The address of the bidder\\r\\n    function bid(uint256 _newBidAmount, address _newBidder) external payable restrictedToAuctionHouse(){\\r\\n        //Empty, as we are supposed to execute SingleAuctionBidLogic bid function but better have this function in the ABI\\r\\n    }\\r\\n\\r\\n    /// @notice Cancel a bid placed previously by a bidder\\r\\n    /// @dev Only callable by the Auction House\\r\\n    /// @param _bidder The address of the bidder wanting to cancel his bid\\r\\n    function cancelBid(address _bidder) external restrictedToAuctionHouse(){\\r\\n\\r\\n        //We can only cancel existing bids\\r\\n        require(currentBids[_bidder] != 0, \\\"Can\\u0027t cancel a bid that does not exist\\\");\\r\\n\\r\\n        //We can only cancel past the initial auction\\r\\n        require(TheCryptographLogicV1(myCryptograph).owner() != address(0), \\\"Bids cannot be manually cancelled during the initial auction\\\");\\r\\n\\r\\n        //We can\\u0027t cancel during hammerTime if we are the highest bidder\\r\\n        require(hammerTime == 0 || _bidder != highestBidder, \\\"The highest bid cannot be cancelled once a seller accepted a sale\\\");\\r\\n\\r\\n        uint256 toSend = currentBids[_bidder];\\r\\n\\r\\n        //If we are the highest bidder we have to settle the payouts before cancelling\\r\\n        //unsettledPayouts = 0 for the highest bidder if either first bidder or someone cancelled above\\r\\n        if(_bidder == highestBidder ){\\r\\n            //Deduce from amount of money we get back the unsettled payout\\r\\n            toSend -= unsettledPayouts;\\r\\n            unsettledPayouts = 0;\\r\\n\\r\\n            //Finding the new highest bidder :\\r\\n            //Explore the below link of the highest bidder. (We are cancelling a bid, so a highest bidder exist)\\r\\n            address _linkHighest = BidLinkSimple(bidLinks[_bidder]).below();\\r\\n            //If the below link exist, then the associated bidder is the next highest bidder\\r\\n            if(_linkHighest != address(0x0)){\\r\\n                highestBidder = BidLinkSimple(_linkHighest).bidder();\\r\\n            } else {\\r\\n                //No more bidders : we are cancelling ourselves\\r\\n                delete highestBidder;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //Emit the cancellation event\\r\\n        emit BidCancelled(currentBids[_bidder], toSend, _bidder);\\r\\n\\r\\n        //Reset our bid related variables\\r\\n        currentBids[_bidder] = 0;\\r\\n        duePayout[_bidder] = 0;\\r\\n\\r\\n\\r\\n        //Updating our neigbors link\\r\\n        if( BidLinkSimple(bidLinks[_bidder]).above() != address(0x0)){\\r\\n            BidLinkSimple(BidLinkSimple(bidLinks[_bidder]).above()).setBelow(BidLinkSimple(bidLinks[_bidder]).below()); //Unlinking above us\\r\\n        }\\r\\n\\r\\n        if( BidLinkSimple(bidLinks[_bidder]).below() != address(0x0)){\\r\\n            BidLinkSimple(BidLinkSimple(bidLinks[_bidder]).below()).setAbove(BidLinkSimple(bidLinks[_bidder]).above()); //Unlinking below us\\r\\n        }\\r\\n\\r\\n        //Finally, we send the funds back to the auction house\\r\\n        AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(_bidder, _bidder);\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Set an instant sale price. If set to 0, instant sale can\\u0027t be triggered.\\r\\n    /// @dev Only callable by the Auction House. Can\\u0027t be cancelled\\r\\n    /// @param _seller The address of the owner wishing to sell the Cryptograph\\r\\n    /// @param _sellPrice The minimum amount of eth the seller wants to get\\r\\n    function setSellingPrice(address _seller, uint256 _sellPrice) external restrictedToAuctionHouse(){\\r\\n\\r\\n        require(!isBeingERC2665Approved, \\\"You can\\u0027t auction a cryptograph that a third party can reclaim\\\");\\r\\n\\r\\n        require(_seller == TheCryptographLogicV1(myCryptograph).owner(), \\\"The seller can only be the owner\\\");\\r\\n        require(hammerTime == 0, \\\"A sale is already in progress\\\");\\r\\n\\r\\n        sellingPrice = _sellPrice;\\r\\n\\r\\n        emit SellingPriceAdjusted(_seller, _sellPrice);\\r\\n\\r\\n        if(currentBids[highestBidder] \\u003e= _sellPrice \\u0026\\u0026 _sellPrice != 0){ //Start a sale if the selling price is already met by the highest bidder\\r\\n            hammerTime = now + hammerTimeDuration;\\r\\n            hammerBlock = block.number + hammerBlockDuration;\\r\\n            emit SaleStarted(_seller, hammerTime, hammerBlock);\\r\\n        }\\r\\n\\r\\n        //Resetting Renatus timer\\r\\n        TheCryptographLogicV1(myCryptograph).renatus();\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Assign the cryptograph to its new legitmate owner. Only callable after the initial Auction or HammerTime\\r\\n    /// @dev Only callable by the Auction House.\\r\\n    /// @param _newOwner The address of the bidder wishing to win the cryptograph\\r\\n    /// @return 0 if a normal auction, 1 if a minting auction\\r\\n    function win(address _newOwner) external restrictedToAuctionHouse() returns(uint){\\r\\n\\r\\n        //Only the highest bidder can win a cryptograph\\r\\n        require(_newOwner == highestBidder, \\\"Only the highest bidder can win the Cryptograph\\\");\\r\\n     \\r\\n        //startingPrice being reset to 1 wei\\r\\n        if(startingPrice != 1){\\r\\n            startingPrice = 1;\\r\\n        }\\r\\n\\r\\n        //Fire the transfer following a win event\\r\\n        emit Win(_newOwner, TheCryptographLogicV1(myCryptograph).owner(), currentBids[highestBidder]);\\r\\n\\r\\n        uint256 toSend;\\r\\n\\r\\n        //If there is no owner yet\\r\\n        if(TheCryptographLogicV1(myCryptograph).owner() == address(0)){\\r\\n            //We are in the initial sale process\\r\\n            require(now \\u003e endTime, \\\"The initial auction is not over yet\\\");\\r\\n\\r\\n            //All the proceeds of the sale are distributed to third parties\\r\\n            distributeStakeholdersPayouts(currentBids[highestBidder] - unsettledPayouts, _newOwner);\\r\\n\\r\\n        } else {\\r\\n            //We are in the perpetual sale process\\r\\n\\r\\n            //A sale must be happening and other bidders must have had an opportunity to place their own bids\\r\\n            require(hammerTime != 0, \\\"No sales are happening right now\\\");\\r\\n            require(now \\u003e hammerTime, \\\"Not enough time has elapsed since the seller accepted the sale\\\");\\r\\n            require(block.number \\u003e hammerBlock, \\\"Not enough blocks have been mined since the seller accepted the sale\\\");\\r\\n\\r\\n            delete hammerBlock; //Reset the minimal sale block\\r\\n            delete hammerTime; //Reset the minmimal sale time\\r\\n\\r\\n            //10% of the seller proceed is distributed to third parties\\r\\n            toSend = ((currentBids[highestBidder] - unsettledPayouts ) * sale_fee) / bid_Decimals;\\r\\n            distributeStakeholdersPayouts(toSend, _newOwner);\\r\\n\\r\\n            //The remainder of the money is then sent to the seller\\r\\n            toSend = currentBids[highestBidder] - unsettledPayouts - toSend;\\r\\n            emit Payout(toSend, TheCryptographLogicV1(myCryptograph).owner(), _newOwner);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(TheCryptographLogicV1(myCryptograph).owner(), _newOwner);\\r\\n        }\\r\\n\\r\\n        delete unsettledPayouts; //Reset the payouts\\r\\n\\r\\n        /*\\r\\n            Find the new highest bidder\\r\\n         */\\r\\n\\r\\n        //Reset our bid related variables\\r\\n        currentBids[_newOwner] = 0;\\r\\n        duePayout[_newOwner] = 0;\\r\\n\\r\\n        //Finding the new highest bidder :\\r\\n        //Explore the below link of the highest bidder.\\r\\n        address _linkHighest = BidLinkSimple(bidLinks[highestBidder]).below();\\r\\n\\r\\n        //Deleting  our link\\r\\n        delete bidLinks[highestBidder];\\r\\n\\r\\n        //If the below link exist, then the associated bidder is the next highest bidder\\r\\n        if(_linkHighest != address(0x0)){\\r\\n            highestBidder = BidLinkSimple(_linkHighest).bidder();\\r\\n            BidLinkSimple(_linkHighest).setAbove(address(0x0)); //Our below neighbor is the new highest bidder\\r\\n        } else {\\r\\n            //No more bidders : we are cancelling ourselves\\r\\n            delete highestBidder;\\r\\n        }\\r\\n\\r\\n\\r\\n        //Reset the selling price\\r\\n        sellingPrice = 0;\\r\\n        emit SellingPriceAdjusted(_newOwner, 0);\\r\\n\\r\\n        //Actually transfer the cryptograph\\r\\n        TheCryptographLogicV1(myCryptograph).transfer(_newOwner);\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /// @notice Function used to distribute an arbitrary amount of money among non-bidders\\r\\n    /// @dev Only callable internally\\r\\n    /// @param _amount The amount of money to spread\\r\\n    /// @param _contributor The address of the source of the money\\r\\n    function distributeStakeholdersPayouts(uint256 _amount, address _contributor) internal{\\r\\n        uint256 toDistribute = _amount;\\r\\n        uint256 toSend;\\r\\n\\r\\n        //Pay the charity\\r\\n        toSend = (charityCut * _amount) / bid_Decimals;\\r\\n        toDistribute -= toSend;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  charity,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(charity, _contributor);\\r\\n        }\\r\\n\\r\\n        //Pay the publisher\\r\\n        toSend = (publisherCut * _amount) / bid_Decimals;\\r\\n        toDistribute -= toSend;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  publisher,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(publisher, _contributor);\\r\\n        }\\r\\n\\r\\n        //Pay the thirdParty account\\r\\n        toSend = (thirdPartyCut * _amount) / bid_Decimals;\\r\\n        toDistribute -= toSend;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  thirdParty,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(thirdParty, _contributor);\\r\\n        }\\r\\n\\r\\n        //Pay perpetual Altruism the reminder (25%). only non-null guaranteed address, so send any rounding errors there\\r\\n        toSend = toDistribute;\\r\\n        if(toSend != 0){\\r\\n            emit Payout(toSend,  perpertualAltruism,  _contributor);\\r\\n            AuctionHouseLogicV1(address(uint160(auctionHouse))).addFundsFor{value: toSend }(perpertualAltruism, _contributor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculating and setting how much payout a bidder will receive if outbid\\r\\n    /// @dev Only callable internally\\r\\n    /// @param _newBid The amount of money in the new bid\\r\\n    /// @param _bidder The address of the new bidder\\r\\n    function calculateReward(uint256 _newBid, address _bidder) internal{\\r\\n\\r\\n        //Calculating how much payout we will receive if we are outbid\\r\\n\\r\\n        //Init the baseline bid we need to perform against\\r\\n        uint256 baseBid = currentBids[highestBidder] * (bid_Decimals + bid_stepMin) / bid_Decimals;\\r\\n        if(baseBid == 0){\\r\\n            baseBid = startingPrice;\\r\\n\\r\\n            //Do not divide by 0\\r\\n            if(baseBid == 0){\\r\\n                baseBid = 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //We calculate our baseline reward. We square the decimals to guarantee a granularity of at least 1/bid_Decimals instead of 1/bid_multiplier\\r\\n        //This also somewhat limit the hardcap for a reward to max_UInt256/10^11 =\\u003e Not a problem as this amount of eth will not be minted\\r\\n        uint256 decimaledRatio = ((bid_Decimals * bid_multiplier * (_newBid - baseBid) ) / baseBid) + bid_incMin * bid_Decimals;\\r\\n\\r\\n        //If we go over the maximum payout, we set the reward to the maximum payout\\r\\n        if(decimaledRatio \\u003e (bid_Decimals * bid_incMax)){\\r\\n            decimaledRatio = bid_Decimals * bid_incMax;\\r\\n        }\\r\\n\\r\\n        duePayout[_bidder] = (_newBid * decimaledRatio)/(bid_Decimals*bid_Decimals);\\r\\n    }\\r\\n\\r\\n    /// @notice resetting an auction starting in two weeks with the initial auction parameters. No changes to the existing bids.\\r\\n    /// @dev Only callable by our own cryptograph\\r\\n    function renatus() external{\\r\\n\\r\\n        require(msg.sender == myCryptograph, \\\"Only callable by the paired Cryptograph\\\");\\r\\n\\r\\n        delete hammerBlock; //Reset the minimal sale block\\r\\n        delete hammerTime; //Reset the minmimal sale time\\r\\n        delete sellingPrice; //Reset the selling price\\r\\n\\r\\n        //Reset the auction end/start time to be same duration as initial auction but starting in 14 days\\r\\n        endTime = now + 60*60*24*14 + endTime - startTime;\\r\\n        startTime = now + 60*60*24*14;\\r\\n\\r\\n        //Actually transfer the cryptograph \\r\\n        TheCryptographLogicV1(myCryptograph).transfer(address(0));\\r\\n    }\\r\\n\\r\\n    /// @notice transfer following the ERC2665 standard\\r\\n    /// @dev Only callable by the auction house\\r\\n    /// @param _contributor The operator paying the transfer fee\\r\\n    /// @param _to The address of the new owner\\r\\n    function transferERC2665(address _contributor, address _to) external payable restrictedToAuctionHouse() {\\r\\n\\r\\n         if(msg.value != 0){\\r\\n            //Distributing the transfer fee\\r\\n            distributeStakeholdersPayouts(msg.value, _contributor);\\r\\n        }\\r\\n\\r\\n        //Checking that no auctions are running\\r\\n        require(hammerTime == 0, \\\"Can\\u0027t transfer a cryptograph under sale\\\");\\r\\n   \\r\\n        //Reset the selling price\\r\\n        if(sellingPrice != 0){\\r\\n            sellingPrice = 0;\\r\\n            emit SellingPriceAdjusted(_contributor, 0);\\r\\n        }\\r\\n\\r\\n        //Actually transfer the cryptograph\\r\\n        TheCryptographLogicV1(myCryptograph).transfer(_to);\\r\\n\\r\\n        //New owner mean no approval\\r\\n        isBeingERC2665Approved = false;\\r\\n\\r\\n    }\\r\\n\\r\\n    \\r\\n    /// @notice Approve following the ERC2665\\r\\n    /// @dev Only callable by the auction house\\r\\n    /// @param _contributor The operator paying the transfer fee\\r\\n    /// @param _approvedAddress The address of the new approved address\\r\\n    function approveERC2665(address _contributor, address _approvedAddress) external payable restrictedToAuctionHouse(){\\r\\n\\r\\n        if(msg.value != 0){\\r\\n            //Distributing the transfer fee\\r\\n            distributeStakeholdersPayouts(msg.value, _contributor);\\r\\n        }\\r\\n      \\r\\n\\r\\n        //Checking that no auctions are running\\r\\n        require(hammerTime == 0, \\\"Can\\u0027t approve a cryptograph under sale\\\");\\r\\n\\r\\n        //Reset the selling price\\r\\n        if(sellingPrice != 0){\\r\\n            sellingPrice = 0;\\r\\n            emit SellingPriceAdjusted(_contributor, 0);\\r\\n        }\\r\\n        \\r\\n        //Checking address approval\\r\\n        if(_approvedAddress == address(0) || _approvedAddress == TheCryptographLogicV1(myCryptograph).owner()){\\r\\n            isBeingERC2665Approved = false;\\r\\n        } else {\\r\\n            isBeingERC2665Approved = true;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"SingleAuctionProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./SingleAuctionV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title  Single Auction Proxy Smart Contract\\r\\n/// @notice The Single Auction proxy : this is the contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract SingleAuctionProxiedV1 is VCProxy, SingleAuctionHeaderV1, SingleAuctionStorageInternalV1  {\\r\\n\\r\\n    constructor(uint256 _version, address _vc, uint256 _versionBid)  public\\r\\n    VCProxy(_version, _vc) //Call the VC proxy constructor so that we know where our logic code is\\r\\n    {\\r\\n        versionBid = _versionBid;\\r\\n    }\\r\\n\\r\\n    //Routing the bid function to a separate smart contract than the regular version, with proper Bid ABI\\r\\n    function bid(uint256 , address) external payable {\\r\\n\\r\\n        address addr = VersionControlStoragePublic(vc).code(versionBid);\\r\\n        assembly {\\r\\n            let freememstart := mload(0x40)\\r\\n            calldatacopy(freememstart, 0, calldatasize())\\r\\n            let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 0)\\r\\n            returndatacopy(freememstart, 0, returndatasize())\\r\\n            switch success\\r\\n            case 0 { revert(freememstart, returndatasize()) }\\r\\n            default { return(freememstart, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\"},\"SingleAuctionV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Single Auction Header\\r\\n/// @notice Contain all the events emitted by the Single Auction\\r\\ncontract SingleAuctionHeaderV1 {\\r\\n    event BidAccepted(uint256 bidValue, address indexed bidder);\\r\\n    event Payout(uint256 amount, address indexed beneficiary, address indexed contributor);\\r\\n    event BidCancelled(uint256 bidValue, uint256 ethReturned, address indexed bidder);\\r\\n    event SaleStarted(address indexed seller, uint256 hammerTime, uint256 hammerBlock);\\r\\n    event SellingPriceAdjusted(address indexed seller, uint256 amount);\\r\\n    event Win(address indexed buyer, address indexed seller, uint256 bidValue);\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Single Auction Storage Internal\\r\\n/// @notice Contain all the storage of the Single Auction declared in a way that does not generate getters for Proxy use\\r\\ncontract SingleAuctionStorageInternalV1 {\\r\\n\\r\\n    //Used to store the index number of the bidding logic contract\\r\\n    uint256 internal versionBid;\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Bidding section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    //The current bids made by each address\\r\\n    mapping (address =\\u003e uint) internal currentBids;\\r\\n\\r\\n    //The current amount of wei each address receive when outbid as the highest bid.\\r\\n    mapping (address =\\u003e uint) internal duePayout; //How much the bidder make\\r\\n\\r\\n    //The current highest bidder;\\r\\n    address internal highestBidder;\\r\\n\\r\\n    //The current amount of unsettled payouts distributed for the current bidding process\\r\\n    uint256 internal unsettledPayouts;\\r\\n\\r\\n    //The default starting price\\r\\n    uint256 internal startingPrice;\\r\\n\\r\\n    //The current selling price\\r\\n    uint256 internal sellingPrice;\\r\\n\\r\\n    //A mapping associating each bidder with their associated chainLink\\r\\n    mapping (address =\\u003e address) internal bidLinks;\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Calculations section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    /*\\r\\n    For a standing bid s and a new bid n, we express the return on the new bid as:\\r\\n\\r\\n    incentive(n,s) % = min[ incmax , incmin + m * (n- s * (1+ stepmin)) / (s * (1+ stepmin))]\\r\\n\\r\\n    Where:\\r\\n    stepmin is the minimum bid increment, expressed as a fraction of the current standing bid (ex : 0.01 for 1/10 or 10%)\\r\\n    incmin is the minimum incentive, expressed as a fraction\\r\\n    incmax is the maximum incentive, expressed as a fraction\\r\\n    m is the multiplier effect, expressed as a positive real number\\r\\n\\r\\n    */\\r\\n\\r\\n    //Values used to calculate the payouts.\\r\\n    uint256 internal bid_Decimals; //100k, or 100%\\r\\n    uint256 internal bid_incMax; //10k, or 10%\\r\\n    uint256 internal bid_incMin; //1k, or 1%\\r\\n    uint256 internal bid_stepMin; // 10.5k, or 10.5%\\r\\n    uint256 internal bid_cutOthers; // 500, or 0.5%\\r\\n\\r\\n    uint256 internal bid_multiplier; //Will be divided by 100 for the calulations. 100 means that doubling the bid leads to 1% extra return\\r\\n\\r\\n    uint256 internal sale_fee; //Proportion of the bid_Decimals taken as a selling fee. 10% = 10k\\r\\n\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Money section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    address internal publisher; //The address of the publisher of the cryptograph. Can edit media url and hash.\\r\\n    address internal charity; //The address to which the chartity cut is being sent to. No special rights.\\r\\n    address internal thirdParty; //The address of any third party taking a cut. No special rights.\\r\\n    //The perpetual altruism address. Always take 25%+ for community cryptographs. Same as publisher for official cryptographs.\\r\\n    address internal perpertualAltruism;\\r\\n\\r\\n    //The granularity of the redistribution is 0.001%. 100 000 = all the money\\r\\n    uint256 internal publisherCut;\\r\\n    uint256 internal charityCut;\\r\\n    uint256 internal thirdPartyCut;\\r\\n    uint256 internal perpetualAltruismCut;\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Timing section\\r\\n    ==================================================\\r\\n    */\\r\\n    uint256 internal startTime; //The start date of the initial auction\\r\\n    uint256 internal endTime; //The end date of the initial auction\\r\\n\\r\\n    uint256 internal hammerBlockDuration; //The minium number of blocks for which other bidder can come in after a winning offer\\r\\n    uint256 internal hammerTimeDuration; //The  number of seconds for which other bidder can come in after a winning offer\\r\\n    uint256 internal hammerBlock; //The block number after which a winning offer can claim a cryptograph\\r\\n    uint256 internal hammerTime; //The date after which a winning offer can claim a cryptograph\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Binding section\\r\\n    ==================================================\\r\\n    */\\r\\n    address internal auctionHouse; //The address of the auction house\\r\\n    address internal myCryptograph; //The address of the Cryptograph I\\u0027m administrating\\r\\n    address internal cryFactory; //The address of the cryptograph Factory\\r\\n\\r\\n    bool internal initialized;\\r\\n    bool internal isBeingERC2665Approved; //If set to true, a potential new owner has been approved in ERC2665\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Single Auction Storage Public\\r\\n/// @notice Contain all the storage of the Single Auction declared in a way that generates getters for Logic use\\r\\ncontract SingleAuctionStoragePublicV1 {\\r\\n\\r\\n    //Used to store the VC index number of the bidding logic conctract\\r\\n    uint256 internal versionBid;\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Bidding section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    //The current bids made by each address\\r\\n    mapping (address =\\u003e uint) public currentBids;\\r\\n\\r\\n    //The current amount of wei each address receive when outbid as the highest bid.\\r\\n    mapping (address =\\u003e uint) public duePayout; //How much the bidder make\\r\\n\\r\\n    //The current highest bidder;\\r\\n    address public highestBidder;\\r\\n\\r\\n    //The current amount of unsettled payouts distributed for the current bidding process\\r\\n    uint256 public unsettledPayouts;\\r\\n\\r\\n    //The default starting price\\r\\n    uint256 public startingPrice;\\r\\n\\r\\n    //The current selling price\\r\\n    uint256 public sellingPrice;\\r\\n\\r\\n    //A mapping associating each bidder with their associated chainLink\\r\\n    mapping (address =\\u003e address) public bidLinks;\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Calculations section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    /*\\r\\n    For a standing bid s and a new bid n, we express the return on the new bid as:\\r\\n\\r\\n    incentive(n,s) % = min[ incmax , incmin + m * (n- s * (1+ stepmin)) / (s * (1+ stepmin))]\\r\\n\\r\\n    Where:\\r\\n    stepmin is the minimum bid increment, expressed as a fraction of the current standing bid (ex : 0.01 for 1/10 or 10%)\\r\\n    incmin is the minimum incentive, expressed as a fraction\\r\\n    incmax is the maximum incentive, expressed as a fraction\\r\\n    m is the multiplier effect, expressed as a positive real number\\r\\n\\r\\n    */\\r\\n\\r\\n    //Values used to calculate the payouts.\\r\\n    uint256 public bid_Decimals; //100k, or 100%\\r\\n    uint256 public bid_incMax; //10k, or 10%\\r\\n    uint256 public bid_incMin; //1k, or 1%\\r\\n    uint256 public bid_stepMin; // 10.5k, or 10.5%\\r\\n    uint256 public bid_cutOthers; // 500, or 0.5%\\r\\n\\r\\n    uint256 public bid_multiplier; //Will be divided by 100 for the calulations. 100 mean that doubling the bid mean 1% extra return\\r\\n\\r\\n    uint256 public sale_fee; //Proportion of the bid_Decimals taken as a selling fee. 10% = 10k\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Money section\\r\\n    ==================================================\\r\\n    */\\r\\n\\r\\n    address public publisher; //The address of the publisher of the cryptograph. Can edit media url and hash.\\r\\n    address public charity; //The address to which the chartity cut is being sent to\\r\\n    address public thirdParty; //The address of any third party taking a cut\\r\\n    address public perpertualAltruism; //The perpetual altruism address\\r\\n\\r\\n    //The granularity of the redistribution is 0.001%. 100 000 = all the money\\r\\n    uint256 public publisherCut;\\r\\n    uint256 public charityCut;\\r\\n    uint256 public thirdPartyCut;\\r\\n    uint256 public perpetualAltruismCut;\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Timing section\\r\\n    ==================================================\\r\\n    */\\r\\n    uint256 public startTime; //The start date of the initial auction\\r\\n    uint256 public endTime; //The end date of the initial auction\\r\\n\\r\\n    uint256 public hammerBlockDuration; //The minium number of blocks for which other bidder can come in after a winning offer\\r\\n    uint256 public hammerTimeDuration; //The  number of seconds for which other bidder can come in after a winning offer\\r\\n    uint256 public hammerBlock; //The block number after which a winning offer can claim a cryptograph\\r\\n    uint256 public hammerTime; //The date after which a winning offer can claim a cryptograph\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Binding section\\r\\n    ==================================================\\r\\n    */\\r\\n    address public auctionHouse; //The address of the auction house\\r\\n    address public myCryptograph; //The address of the Cryptograph I\\u0027m administrating\\r\\n    address public cryFactory; //The address of the cryptograph Factory\\r\\n\\r\\n    bool public initialized;\\r\\n    bool public isBeingERC2665Approved; //If set to true, a potential new owner has been approved in ERC2665\\r\\n}\\r\\n\\r\\n\"},\"TheCryptographLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./TheCryptographV1.sol\\\";\\r\\n\\r\\nimport \\\"./CryptographFactoryV1.sol\\\";\\r\\nimport \\\"./AuctionHouseV1.sol\\\";\\r\\nimport \\\"./ERC2665LogicV1.sol\\\";\\r\\nimport \\\"./SingleAuctionLogicV1.sol\\\";\\r\\nimport \\\"./CryptographInitiator.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title TheCryptograph Logic Code\\r\\n/// @notice Represent a single Cryptograph. Contain provenance, ownership and renatus.\\r\\ncontract TheCryptographLogicV1 is VCProxyData, TheCryptographHeaderV1, TheCryptographStoragePublicV1 {\\r\\n\\r\\n    /// @notice Generic constructor, empty\\r\\n    /// @dev This contract is meant to be used in a delegatecall and hence its memory state is irrelevant\\r\\n    constructor()public{\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //Modifier for functions that requires to be called only by the Factory\\r\\n    modifier restrictedToFactory() {\\r\\n        require(SingleAuctionLogicV1(myAuction).cryFactory() == msg.sender, \\\"Only callable by the factory\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Init function of TheCryptograph\\r\\n    /// @param _issue The issue # of this cryptograph\\r\\n    /// @param _serial The serial # of this cryptograph (only relevant for editions and GGBMA)\\r\\n    /// @param _official Is it an official or a community cryptograph ?\\r\\n    /// @param _myAuction The address of our paired auction\\r\\n    /// @param _cryInitiator The address of the initiator we are gonna grab name and media hash/url from\\r\\n    /// @param _owner The initial owner. Always 0x0 except for GGBMA minted.\\r\\n    function initCry(\\r\\n        uint256 _issue, uint256 _serial, bool _official, address _myAuction, address _cryInitiator, address _owner) external {\\r\\n\\r\\n        //Can only init if we are either (never init before) or if (we are official, before the auction starting time, and not under renatus)\\r\\n        require(\\r\\n            myAuction == address(0) ||\\r\\n            (\\r\\n                official \\u0026\\u0026\\r\\n                !hasCurrentOwnerMarked \\u0026\\u0026\\r\\n                SingleAuctionLogicV1(myAuction).cryFactory() == msg.sender \\u0026\\u0026\\r\\n                SingleAuctionLogicV1(myAuction).startTime() \\u003e now),\\r\\n            \\\"This Cryptograph has already been initialized\\\");\\r\\n        //When renatus is happening, hasCurrentOwnerMarked should be set to true so that perpetual Altruism can\\u0027t edit again the cryptograph\\r\\n\\r\\n        //Setting up cryptograph identity related vars\\r\\n        name = CryptographInitiator(_cryInitiator).name();\\r\\n        creator = CryptographInitiator(_cryInitiator).creator();\\r\\n\\r\\n        emit Named(name);\\r\\n\\r\\n        mediaHash = CryptographInitiator(_cryInitiator).mediaHash();\\r\\n        emit MediaHash(mediaHash);\\r\\n\\r\\n        mediaUrl = CryptographInitiator(_cryInitiator).mediaUrl();\\r\\n        emit MediaUrl(mediaUrl);\\r\\n\\r\\n        serial = _serial;\\r\\n        issue = _issue;\\r\\n\\r\\n        official = _official;\\r\\n\\r\\n        //Setting up initial owner (nobody EXCEPT GGBMA minting)\\r\\n        owner = _owner;\\r\\n\\r\\n        //Linking the auction\\r\\n        myAuction = _myAuction;\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Set the media hash of the Cryptograph\\r\\n    /// @dev Advanced requirement checks should be done on the factory side\\r\\n    /// @param _mediaHash A string containing the media hash\\r\\n    function setMediaHash(string calldata _mediaHash) external restrictedToFactory() {\\r\\n        mediaHash = _mediaHash;\\r\\n        emit MediaHash(_mediaHash);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the media url of the Cryptograph\\r\\n    /// @dev Advanced requirement checks should be done on the factory side\\r\\n    /// @param _mediaUrl A string containing the media url\\r\\n    function setMediaUrl(string calldata _mediaUrl)external restrictedToFactory() {\\r\\n        mediaUrl = _mediaUrl;\\r\\n        emit MediaUrl(_mediaUrl);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfer ownership of the token\\r\\n    /// @dev only callable by the associated GBM auction instance\\r\\n    /// @param _newOwner The address of the account to become the new owner\\r\\n    function transfer(address _newOwner) external {\\r\\n        require(msg.sender == myAuction, \\\"The auction is the only way to set a new owner\\\");\\r\\n        emit Transferred(owner, _newOwner);\\r\\n        owner = _newOwner;\\r\\n        hasCurrentOwnerMarked = false;\\r\\n\\r\\n        //Resetting renatus timer\\r\\n        lastOwnerInteraction = now;\\r\\n        renatusTimeStamp = 0;\\r\\n    }\\r\\n\\r\\n    /// @notice Mark a cryptograph\\r\\n    /// @dev only callable by the current owner if he has not done it since he gained ownership\\r\\n    /// @param _mark A 3 Character long string containing the mark\\r\\n    function mark(string calldata _mark) external {\\r\\n        require(msg.sender == owner, \\\"Only the owner can set a mark on a cryptograph\\\");\\r\\n        require(!hasCurrentOwnerMarked, \\\"The cryptograph has already been marked by the owner\\\");\\r\\n        require(bytes(_mark).length \\u003c= 3, \\\"You can only inscribe at most 3 characters at a time\\\"); //In Utf8, strlenght \\u003c= bytelength.\\r\\n\\r\\n        hasCurrentOwnerMarked = true; //Setting the current owner has having marked\\r\\n\\r\\n        marks.push(_mark); //Inscribing the mark\\r\\n        markers.push(owner); //Associating the owner\\r\\n\\r\\n        emit Marked(owner, _mark); //Emitting the event\\r\\n\\r\\n        //Resetting renatus timer\\r\\n        lastOwnerInteraction = now;\\r\\n        renatusTimeStamp = 0;\\r\\n    }\\r\\n\\r\\n    /// @notice Prevent burning cryptographs by putting them back to auctions if abandoned by their owners\\r\\n    /// @dev If called by the owner, and ERC-2665 operator of perpetual altruism refresh ownership for 5 years\\r\\n    function renatus() external {\\r\\n        if (msg.sender == owner ||\\r\\n            msg.sender == myAuction ||\\r\\n            msg.sender == SingleAuctionLogicV1(myAuction).publisher() ||\\r\\n            msg.sender == AuctionHouseStoragePublicV1(SingleAuctionLogicV1(myAuction).auctionHouse()).ERC2665Lieutenant()) {\\r\\n            lastOwnerInteraction = now; //If the owner/operator/Pa call, reset the renatus call\\r\\n            renatusTimeStamp = 0;\\r\\n            emit Renatus(0);\\r\\n        } else {\\r\\n            require(now \\u003e= lastOwnerInteraction + 60 * 60 * 24 * 366 * 5, \\\"Five years have not yet elapsed since last owner interaction\\\");\\r\\n\\r\\n            // Set up a 31 day deadline for the owner to claim their Cryptograph again\\r\\n            if (renatusTimeStamp == 0) {\\r\\n                renatusTimeStamp = now + 60 * 60 * 24 * 31;\\r\\n                //Emit the event\\r\\n                emit Renatus(renatusTimeStamp);\\r\\n            } else {\\r\\n                require(now \\u003e renatusTimeStamp, \\\"31 days since renatus was called have not elapsed yet\\\");\\r\\n\\r\\n                SingleAuctionLogicV1(myAuction).renatus();\\r\\n\\r\\n                //Notify the ERC2665 contract\\r\\n                ERC2665LogicV1(AuctionHouseStoragePublicV1(SingleAuctionLogicV1(myAuction).auctionHouse()).ERC2665Lieutenant()).triggerRenatus();\\r\\n                hasCurrentOwnerMarked = true; //Prevent publisher meddling\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"TheCryptographProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./TheCryptographV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title  TheCryptograph Proxy Smart Contract\\r\\n/// @notice TheCryptograph proxy : this is this contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract TheCryptographProxiedV1 is VCProxy, TheCryptographHeaderV1, TheCryptographStorageInternalV1  {\\r\\n\\r\\n    constructor(uint256 _version, address _vc)  public\\r\\n    VCProxy(_version, _vc) //Call the VC proxy constructor so that we know where our logic code is\\r\\n    {\\r\\n        //Self intialize (nothing)\\r\\n    }\\r\\n\\r\\n    //No other logic code as it is all proxied\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"},\"TheCryptographV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title TheCryptograph Header\\r\\n/// @notice Contain all the events emitted by TheCryptograph\\r\\ncontract TheCryptographHeaderV1 {\\r\\n    event Named(string name);\\r\\n    event MediaHash(string mediaHash);\\r\\n    event MediaUrl(string mediaUrl);\\r\\n    event Transferred(address indexed previousOwner, address indexed newOwner);\\r\\n    event Marked (address indexed Marker, string indexed Mark);\\r\\n    event Renatus(uint256 endtime);\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title TheCryptograph Storage Internal\\r\\n/// @notice Contain all the storage of TheCryptograph declared in a way that don\\u0027t generate getters for Proxy use\\r\\ncontract TheCryptographStorageInternalV1 {\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                    Identity Section\\r\\n    ==================================================\\r\\n    */\\r\\n    string internal name; //The name of this cryptograph\\r\\n    string internal creator; //The creator of this cryptograph\\r\\n    string internal mediaHash; //The hash of the cryptograph media\\r\\n    string internal mediaUrl; //An url where the cryptograph media is accessible\\r\\n    uint256 internal serial; //The serial number of this cryptograph (position in the index)\\r\\n    uint256 internal issue; //The numbered minting of this specific cryptograph.\\r\\n    bool internal hasCurrentOwnerMarked; //Each subsequent owner can only leave its mark once\\r\\n    string[] internal marks; //Each owner can leave its mark on the cryptograph\\r\\n    address[] internal markers; //List of owners that have left a mark\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Ownership section\\r\\n    ==================================================\\r\\n    */\\r\\n    address internal owner; //The current owner of the cryptograph\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                    Auction Section\\r\\n    ==================================================\\r\\n    */\\r\\n    address internal myAuction; //Address of the running auction associated with this Cryptograph\\r\\n    bool internal official; //Are we an official cryptograph ?\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                    Renatus Section\\r\\n    ==================================================\\r\\n    */\\r\\n    uint256 internal lastOwnerInteraction; //When was the last time the owner interacted with the cryptograph ?\\r\\n    uint256 internal renatusTimeStamp; //When was the last time someone wanted to check if the owner was still owning it\\u0027s private key ?\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title TheCryptograph Storage Public\\r\\n/// @notice Contain all the storage of TheCryptograph declared in a way that generates getters for Logic use\\r\\ncontract TheCryptographStoragePublicV1 {\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                    Identity Section\\r\\n    ==================================================\\r\\n    */\\r\\n    string public name; //The name of this cryptograph\\r\\n    string public creator; //The creator of this cryptograph\\r\\n    string public mediaHash; //The hash of the cryptograph media\\r\\n    string public mediaUrl; //An url where the cryptograph media is accessible\\r\\n    uint256 public serial; //The serial number of this cryptograph (position in the index)\\r\\n    uint256 public issue;\\r\\n    bool public hasCurrentOwnerMarked; //Each subsequent owner can only leave its mark once\\r\\n    string[] public marks; //Each owner can leave its mark on the cryptograph\\r\\n    address[] public markers; //List of owners that have left a mark\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                        Ownership Section\\r\\n    ==================================================\\r\\n    */\\r\\n    address public owner; //The current owner of the cryptograph\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                    Auction Section\\r\\n    ==================================================\\r\\n    */\\r\\n    address public myAuction; //Address of the running auction associated with this Cryptograph\\r\\n    bool public official; //Are we an official cryptograph ?\\r\\n\\r\\n    /*\\r\\n    ==================================================\\r\\n                    Renatus Section\\r\\n    ==================================================\\r\\n    */\\r\\n    uint256 public lastOwnerInteraction; //When was the last time the owner interacted with the cryptograph ?\\r\\n    uint256 public renatusTimeStamp; //When was the last time someone wanted to check if the owner was still owning it\\u0027s private key ?\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"VCProxy.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\n/* Based on a variation of https://blog.gnosis.pm/solidity-delegateproxy-contracts-e09957d0f201\\r\\nThis generic proxy is gonna ask a version control smart contract for its logic code instead\\r\\nof storing the remote address himself\\r\\n*/\\r\\n\\r\\n/*\\r\\nSmart contract only containing a public array named the same as VC so that the compiler call the proper\\r\\nfunction signature in our generic proxy\\r\\n*/\\r\\ncontract VersionControlStoragePublic {\\r\\n    address[] public code;\\r\\n}\\r\\n\\r\\n\\r\\n/*\\r\\nStorage stack of a proxy contract. VCproxy inherit this, as well as ALL logic contracts associated to a proxy for storage alignment reasons.\\r\\n*/\\r\\ncontract VCProxyData {\\r\\n    address internal vc; //Version Control Smart Contract Address\\r\\n    uint256 internal version; //The index of our logic code in the Version Control array.\\r\\n}\\r\\n\\r\\n\\r\\n/*\\r\\nLogic of a proxy contract. EVERY proxied contract inherit this\\r\\n*/\\r\\ncontract VCProxy is VCProxyData {\\r\\n    constructor(uint256 _version, address _vc) public {\\r\\n        version = _version;\\r\\n        vc = _vc;\\r\\n    }\\r\\n\\r\\n    fallback () virtual external payable {\\r\\n\\r\\n        address addr = VersionControlStoragePublic(vc).code(version);\\r\\n        assembly {\\r\\n            let freememstart := mload(0x40)\\r\\n            calldatacopy(freememstart, 0, calldatasize())\\r\\n            let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 0)\\r\\n            returndatacopy(freememstart, 0, returndatasize())\\r\\n            switch success\\r\\n            case 0 { revert(freememstart, returndatasize()) }\\r\\n            default { return(freememstart, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    /// @notice Generic catch-all function that refuse payments to prevent accidental Eth burn.\\r\\n    receive() virtual external payable{\\r\\n       require(false, \\\"Do not send me Eth without a reason\\\");\\r\\n    }\\r\\n}\"},\"VersionControlLogicV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./VersionControlV1.sol\\\";\\r\\nimport \\\"./SenateLogicV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Logic code smart contract for proper versioning of proxies. Logic code, to be casted on the proxy.\\r\\ncontract VersionControlLogicV1 is VCProxyData, VersionControlHeaderV1, VersionControlStoragePublicV1  {\\r\\n\\r\\n    /// @notice Generic constructor, empty\\r\\n    /// @dev This contract is meant to be used in a delegatecall and hence its memory state is irrelevant\\r\\n    constructor() public {\\r\\n        //Memory state for logic smart contract is irrelevant\\r\\n    }\\r\\n\\r\\n    //Modifier for functions that requires to be called only by the controller of the version control\\r\\n    modifier restrictedToController(){\\r\\n        require(msg.sender == controller, \\\"Only the controller can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the code address of a specific version to the new specified code address\\r\\n    /// @dev To be overhauled with voting in the future\\r\\n    /// @param _version The version that is stored by the smart contract you want to change the logic code of\\r\\n    /// @param _code The new code address\\r\\n    function setVersion(uint256 _version, address _code) public restrictedToController(){ //Need to be restricted to PA only\\r\\n        bool authorization = senate == address(0x0); //We check if the senate is set\\r\\n        if(!authorization){ //If the senate is set, ask for authorization\\r\\n            authorization = SenateLogicV1(senate).isAddressAllowed(_code);\\r\\n        }\\r\\n        require(authorization, \\\"The senate -voting smart contract- did not allow this address to be used\\\");\\r\\n        emit VCChangedVersion(_version, code[_version], _code);\\r\\n        code[_version] = _code;\\r\\n    }\\r\\n\\r\\n    /// @notice Push a new address in the versioning Ledger\\r\\n    /// @dev Must be approved by the senate\\r\\n    /// @param _code The new code address\\r\\n    /// @return The number of Cryptographs owned by `_owner`, possibly zero\\r\\n    function pushVersion(address _code) public restrictedToController() returns (uint256){ //Need to be restricted to PA only\\r\\n        bool authorization = senate == address(0x0); //We check if the senate is set\\r\\n        if(!authorization){ //If the senate is set, ask for authorization\\r\\n            authorization = SenateLogicV1(senate).isAddressAllowed(_code);\\r\\n        }\\r\\n        require(authorization, \\\"The senate -voting smart contract- did not allow this address to be pushed\\\");\\r\\n        code.push(_code);\\r\\n        uint256 index = code.length - 1;\\r\\n        emit VCCAddedVersion(index, _code);\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /// @notice Expose the length of the code array\\r\\n    /// @dev Useful to know the index of the last inserted code element\\r\\n    /// @return The lenght of the code array\\r\\n    function codeLength() external view returns (uint256){\\r\\n        return code.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Push a new address in the versioning Ledger\\r\\n    /// @dev Can be set up once only\\r\\n    /// @param _senate The new code address\\r\\n    function setSenate (address _senate) public restrictedToController(){\\r\\n        require(senate == address(0x0), \\\"The senate address has already been set\\\");\\r\\n        senate = _senate;\\r\\n    }\\r\\n\\r\\n}\"},\"VersionControlProxiedV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\nimport \\\"./VersionControlV1.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title  VCProxy Proxy Smart Contract\\r\\n/// @notice VCProxy proxy : this is the contract that will be instancied on the blockchain. Cast this as the logic contract to interact with it.\\r\\ncontract VersionControlProxiedV1 is VCProxy, VersionControlHeaderV1, VersionControlStorageInternalV1  {\\r\\n\\r\\n    constructor(address _vc)  public\\r\\n    VCProxy(0, _vc) //Call the VC proxy constructor with 0 as index paramter\\r\\n    {\\r\\n        //Self initialize\\r\\n        controller = msg.sender;\\r\\n        code.push(_vc); //Push the address of the VC logic code at index 0\\r\\n        emit VCCAddedVersion(0, _vc); //Fire relevant push event\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    trick to avoid infinite loop when a Version Control proxy calls itself : we override the VCProxy fallback function and\\r\\n    get the address from our own array instead of stacking one more call\\r\\n    */\\r\\n\\r\\n    fallback () external payable override{\\r\\n        address addr = code[version];\\r\\n        assembly{\\r\\n            let freememstart := mload(0x40)\\r\\n            calldatacopy(freememstart, 0, calldatasize())\\r\\n            let success := delegatecall(not(0), addr, freememstart, calldatasize(), freememstart, 0)\\r\\n            returndatacopy(freememstart, 0, returndatasize())\\r\\n            switch success\\r\\n            case 0 { revert(freememstart, returndatasize()) }\\r\\n            default { return(freememstart, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n   \\r\\n}\\r\\n\\r\\n\\r\\n\"},\"VersionControlV1.sol\":{\"content\":\"// © Copyright 2020. Patent pending. All rights reserved. Perpetual Altruism Ltd.\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./VCProxy.sol\\\";\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title Version Control Header\\r\\n/// @notice Contain all the events emitted by the Version Control\\r\\ncontract VersionControlHeaderV1 {\\r\\n    event VCChangedVersion(uint256 index, address oldCode, address newCode);\\r\\n    event VCCAddedVersion(uint256 index, address newCode);\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title TheCryptograph Storage Internal\\r\\n/// @notice Contain all the storage of TheCryptograph declared in a way that does not generate getters for Proxy use\\r\\ncontract VersionControlStorageInternalV1 {\\r\\n    address[] public code; //Public to shortcut lookups to it in proxy calls\\r\\n    address internal controller;\\r\\n    address internal senate;\\r\\n}\\r\\n\\r\\n\\r\\n/// @author Guillaume Gonnaud 2019\\r\\n/// @title TheCryptograph Storage Public\\r\\n/// @notice Contain all the storage of TheCryptograph declared in a way that generates getters for Logic use\\r\\ncontract VersionControlStoragePublicV1 {\\r\\n    address[] public code; //Public for ABI reasons, should be internal for strict gas saving\\r\\n    address public controller;\\r\\n    address public senate;\\r\\n}\\r\\n\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedTransferAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ERC2665ProxiedV1","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000050000000000000000000000001a9700c73fc51571e5da48adf1c58e084084270f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6c4c7c163456de6144736c238834046ac19d8dfcca7af1557fba0d6d8397e188"}]}