{"status":"1","message":"OK","result":[{"SourceCode":"////////////////////////////////////////////////////\r\n//******** In the name of god **********************\r\n//******** https://Helixnebula.help  ***************\r\n////p2p blockchain based helping system/////////////\r\n//This is an endless profitable cycle for everyone//\r\n////Contact us: support@helixnebula.help////////////\r\n////////////////////////////////////////////////////\r\n\r\npragma solidity ^0.5.0;\r\ncontract EIP20Interface {\r\n    \r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n    uint256 public MaxSupply;\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n\r\n}\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n    function sub0(uint x, uint y) internal pure returns (uint) {\r\n        if(x>y){\r\n            return x-y;\r\n        }else{\r\n           return 0;\r\n        }\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\n\r\ncontract HelixNebulaV2 is EIP20Interface {\r\n    using SafeMath for uint;\r\n//////////////////////////Token Layer////////////////////////////////////////////////\r\n    address payable wallet;\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) public balances;\r\n    \r\n//////////////////////////////////////////////////////////////////////////////\r\n    uint public ReleaseTime;\r\n    \r\n\r\n    address payable public owner;\r\n    address payable public Helix_Storage;\r\n    address public Pool_Address;\r\n    address public Weth_Address;\r\n    \r\n    struct BalanceTime {\r\n      uint ExpireTime;\r\n      address adr;\r\n    }\r\n    \r\n    struct LockedAddress{\r\n      uint ExpireTime;\r\n      address adr;\r\n    }\r\n\r\n    \r\n    LockedAddress[] public LockedAddresses;\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyHelix {\r\n        require(msg.sender == Helix_Storage);\r\n        _;\r\n    }\r\n\r\n    function UpgardeV1ToV2Balances() internal{\r\n        balances[0xa529D7D3D00148D861dA5c650e88250941FC291a] = 1500000000 * 10**11;\r\n        balances[0x329318Ca294A2d127e43058A7b23ED514B503d76] = 743605670 * 10**11;\r\n        balances[0x319b55df49A468Ff2F900C7Bff3C2C5712cC3037] = 736626277 * 10**11;\r\n        balances[0x727f33265f69bBCEE886b71480dDa95e416c1D13] = 677158185 * 10**11;\r\n        balances[0x51f4f6BB08338BF315D895Acec4695B8Ab12Ba30] = 517656005 * 10**11;\r\n        balances[0xF9D96CDBA21e917d2545E25300E96536070Fa0D4] = 500000000 * 10**11;\r\n        balances[0xBb1a016F07400696edA537658a7d76E35C61F31A] = 500000000 * 10**11;\r\n        balances[0xD8D37B4517e58013bA7D70662C081E157bd2F32B] = 328000815 * 10**11;\r\n        balances[0xeAa8bdcCf9a93DD7c4b66E4362863E3E531E41F7] = 288486689 * 10**11;\r\n        balances[0xA97a74F7C3489221B190928b79415cECbfcD7788] = 262191256 * 10**11;\r\n        balances[0x33C885AEccBde0Ad709638760324F6DEccC8A894] = 261320504 * 10**11;\r\n        balances[0xAC8AFD4fD7681Fe63d9cBdB383F54Cf7e7586B3D] = 252275663 * 10**11;\r\n        balances[0xF9107317B0fF77eD5b7ADea15e50514A3564002B] = 172443461 * 10**11;\r\n        balances[0xf56036f6a5D9b9991c209DcbC9C40b2C1cD46540] = 150000000 * 10**11;\r\n        balances[0xAFc6656c6209b5D066E00B318cCd95DfAA3B29D9] = 131511935 * 10**11;\r\n        balances[0x750343F8327fC50b77cd805974C08f08700f79F9] = 125000000 * 10**11;\r\n        balances[0xC6f1a9D4Fb5681f986d3Dc6EC116f66D95CC2F03] = 125000000 * 10**11;\r\n        balances[0xC3746825f13c07Dcd7e6fDb9C0c80A9aFFb18952] = 106871623 * 10**11;\r\n        balances[0xc3aFAE482366e8584D0848056293Db0205F4d227] = 100000000 * 10**11;\r\n        balances[0x9183b548Bda4BC94cf077466B338f43D3ad29DB3] = 79650879 * 10**11;\r\n        balances[0x4ceF35f2eC6D8F7A8cD3FdD26291221435135e74] = 75476366 * 10**11;\r\n        balances[0x6634411aA80EF3Db097538399fEabCDD0aa6C2BF] = 69554587 * 10**11;\r\n        balances[0xc0e4C5a33Ccd4C286Fd64b91CDCA42E2a59A68D7] = 54183570 * 10**11;\r\n        balances[0x9AFC8Cc4F49843098d8fa7dFeE69Db3708d5e9f0] = 40216304 * 10**11;\r\n        balances[0xB04a9CCbdB801C4Ca0403344eDb6Ff0ecAb07a8e] = 40000000 * 10**11;\r\n        balances[0x07C8B4D7F1BC58F8780eA96E9Ab68c840Ba04EFF] = 15133558 * 10**11;\r\n        balances[0x6c9A672be60B9BAfDe61944CFea1f43E9f3b6F3B] = 15000000 * 10**11;\r\n        totalSupply = totalSupply.add(7867363347 * 10**11);\r\n    }\r\n    function LockAddress(uint _days) external{\r\n        for(uint i=0;i<LockedAddresses.length;i++){\r\n            if(LockedAddresses[i].adr==msg.sender){\r\n                if(LockedAddresses[i].ExpireTime>block.timestamp){\r\n                    LockedAddresses[i].ExpireTime=LockedAddresses[i].ExpireTime + _days*24*3600;\r\n                }else{\r\n                    LockedAddresses[i].ExpireTime=block.timestamp + _days*24*3600;\r\n                }\r\n               return;\r\n            }\r\n        }\r\n        LockedAddresses.push(LockedAddress(block.timestamp+_days*24*3600,msg.sender));\r\n    }\r\n    function GetAddressExpTime(address _adr) external view returns(uint) {\r\n        for(uint i=0;i<LockedAddresses.length;i++){\r\n            if(LockedAddresses[i].adr==_adr){\r\n               return LockedAddresses[i].ExpireTime;\r\n            }\r\n        }\r\n         return 0;\r\n    }\r\n\r\n    function IsLockAddress(address _adr) public view returns(bool){\r\n        for(uint i=0;i<LockedAddresses.length;i++){\r\n            if(LockedAddresses[i].adr==_adr){\r\n                if(LockedAddresses[i].ExpireTime>block.timestamp){\r\n                   return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function SetPoolData(address _pooladr,address _wethadr) external onlyOwner{\r\n        Pool_Address=_pooladr;\r\n        Weth_Address=_wethadr;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n        wallet = _newOwner;\r\n    }\r\n    function SetHelixStorage(address payable _newHelix) external onlyOwner \r\n    {\r\n        Helix_Storage=_newHelix;\r\n    }\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    string public name;                   \r\n    uint8 public decimals;                \r\n    string public symbol;                 \r\n    \r\n    constructor() public {\r\n        wallet=msg.sender;\r\n        owner=msg.sender;\r\n        decimals = 18;                   // Amount of decimals for display purposes\r\n        totalSupply = 800*10**uint256(decimals);\r\n        MaxSupply=10000*10**uint256(decimals);  //10,000 UNV2\r\n        ReleaseTime=1597519477;  //ReleaseTime set to the old version time 0x72aa58a6bc3efc77cc8fe89b73bad27b468910e9\r\n        balances[msg.sender] = totalSupply;\r\n        name = \"Eye of God\";                             // Set the name for display purposes                                    \r\n        symbol = \"EOG\";                               // Set the symbol for display purposes\r\n        UpgardeV1ToV2Balances();\r\n    }\r\n   \r\n    function CirculatingSupply() public view returns(uint){\r\n      return totalSupply;  \r\n    }\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(IsLockAddress(_to)==false,'This Address is locked');\r\n        require(balances[msg.sender] >= _value);\r\n        \r\n        balances[msg.sender] =balances[msg.sender].sub(_value);\r\n        balances[_to] =balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(IsLockAddress(_to)==false,'This Address is locked');\r\n        require(IsLockAddress(_from)==false,'This Address is locked');\r\n        \r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        balances[_to] =balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] =allowed[_from][msg.sender].sub(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    function Mint(address _adr,uint256 _value) internal {\r\n        require(_adr != address(0), \"ERC20: mint to the zero address\");\r\n        require(totalSupply+_value<MaxSupply);\r\n        balances[_adr]=balances[_adr].add(_value);\r\n        totalSupply=totalSupply.add(_value);\r\n        emit Transfer(address(0), _adr, _value);\r\n    }\r\n  function burn(uint256 amount) public {   //anyone can burn the tokens. and it will decrease the total supply of the tokens.\r\n    require(amount != 0);\r\n    require(amount <= balances[msg.sender]);\r\n    totalSupply =totalSupply.sub(amount);\r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    emit Transfer(msg.sender, address(0), amount);\r\n  }\r\n\r\n  \r\n\r\n ////////////////////////////HelixNebula(eye of god) Minting System////////////////////////////////////////\r\n  \r\n  bool AutoSync=true;\r\n  uint ETHPrice=1000000 szabo;\r\n\r\n\r\n  function SetAutoSync(bool _snc) external onlyOwner{\r\n       AutoSync=_snc;\r\n  }\r\n\r\n\r\n  function GetHelixAmount() internal view returns(uint){\r\n      uint oneDaytime=3600*24;\r\n      if(block.timestamp.sub(ReleaseTime)<oneDaytime*30){     \r\n          return 10;    //first month: 10 EOG token Per 1 ETH Help\r\n      }\r\n      if(block.timestamp.sub(ReleaseTime)<oneDaytime*60){     \r\n          return 8;    //second month: 8 EOG token Per 1 ETH Help\r\n      }\r\n      if(block.timestamp.sub(ReleaseTime)<oneDaytime*90){     \r\n          return 6;    //third month: 6 EOG token Per 1 ETH Help\r\n      }\r\n      if(block.timestamp.sub(ReleaseTime)<oneDaytime*120){     \r\n          return 4;    //fourth month: 4 EOG token Per 1 ETH Help\r\n      }\r\n      if(block.timestamp.sub(ReleaseTime)<oneDaytime*150){     \r\n          return 2;    //fifth month: 2 EOG token Per 1 ETH Help\r\n      }\r\n      if(block.timestamp.sub(ReleaseTime)>oneDaytime*150){     \r\n          return 1;    //after five month: 1 EOG token Per 1 ETH Help\r\n      }\r\n  }\r\n  \r\n    function GetEOGPrice() public view returns(uint256){\r\n        if(balances[Pool_Address]>0){\r\n           \r\n            uint256 TempPrice=EIP20Interface(Weth_Address).balanceOf(Pool_Address)*10**7/balances[Pool_Address];\r\n            return TempPrice*10**11;\r\n        }\r\n    }\r\n  function SendTransaction(address payable _Hadr,address payable _From) external payable onlyHelix returns(uint){\r\n        \r\n        uint Hamount=GetHelixAmount();\r\n        uint NowPrice=GetEOGPrice();\r\n        uint minpoolcap=1*10**uint256(decimals);\r\n        if(NowPrice>ETHPrice/(Hamount*5)){\r\n            uint256 TempPrice=(msg.value*5/4)*10**7/(NowPrice*5);\r\n            Hamount=TempPrice*10**11;\r\n        }else{\r\n            Hamount=(msg.value*5/4)*Hamount;\r\n        }\r\n        \r\n        if(totalSupply+Hamount-(balances[Pool_Address]-minpoolcap)<MaxSupply){\r\n            if(balances[Pool_Address]>minpoolcap){\r\n                if(balances[Pool_Address].sub0(Hamount)>minpoolcap){\r\n                    balances[Pool_Address]=balances[Pool_Address].sub0(Hamount);\r\n                    balances[_From] = balances[_From].add(Hamount);\r\n                    if(AutoSync){\r\n                        IUniswapV2Pair(Pool_Address).sync();\r\n                    }\r\n                    emit Transfer(Pool_Address, _From, Hamount);\r\n                }else{\r\n                    uint diff=balances[Pool_Address].sub0(minpoolcap);\r\n                    balances[Pool_Address]=minpoolcap;\r\n                    emit Transfer(Pool_Address, _From, diff);\r\n                    balances[_From] = balances[_From].add(Hamount);\r\n                    totalSupply=totalSupply.add(Hamount.sub0(diff));\r\n                    if(AutoSync){\r\n                        IUniswapV2Pair(Pool_Address).sync();\r\n                    }\r\n                    emit Transfer(address(0), _From, Hamount.sub0(diff));\r\n                }\r\n\r\n            }else{\r\n                Mint(_From,Hamount); //Minting when there's not any token in the pool\r\n            }\r\n        }\r\n        \r\n        _Hadr.transfer(msg.value);\r\n        return Hamount;\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"GetAddressExpTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEOGPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Helix_Storage\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"IsLockAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"LockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LockedAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ExpireTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Pool_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_Hadr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_From\",\"type\":\"address\"}],\"name\":\"SendTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_snc\",\"type\":\"bool\"}],\"name\":\"SetAutoSync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newHelix\",\"type\":\"address\"}],\"name\":\"SetHelixStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pooladr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethadr\",\"type\":\"address\"}],\"name\":\"SetPoolData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Weth_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HelixNebulaV2","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f53a5d0bc0528a14ab9b3cd8e5746e2f8f71b1f4d3c8e0af594362a1ad5417cf"}]}