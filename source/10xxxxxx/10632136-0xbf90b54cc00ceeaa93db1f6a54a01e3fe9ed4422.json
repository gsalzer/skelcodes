{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/Ownable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract Ownable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor() internal {\r\n        _OWNER_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), _OWNER_);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"INVALID_OWNER\");\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/intf/IDODO.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\ninterface IDODO {\r\n    function init(\r\n        address owner,\r\n        address supervisor,\r\n        address maintainer,\r\n        address baseToken,\r\n        address quoteToken,\r\n        address oracle,\r\n        uint256 lpFeeRate,\r\n        uint256 mtFeeRate,\r\n        uint256 k,\r\n        uint256 gasPriceLimit\r\n    ) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function claimOwnership() external;\r\n\r\n    function sellBaseToken(\r\n        uint256 amount,\r\n        uint256 minReceiveQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function buyBaseToken(\r\n        uint256 amount,\r\n        uint256 maxPayQuote,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function querySellBaseToken(uint256 amount) external view returns (uint256 receiveQuote);\r\n\r\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256 payQuote);\r\n\r\n    function depositBaseTo(address to, uint256 amount) external returns (uint256);\r\n\r\n    function withdrawBase(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAllBase() external returns (uint256);\r\n\r\n    function depositQuoteTo(address to, uint256 amount) external returns (uint256);\r\n\r\n    function withdrawQuote(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAllQuote() external returns (uint256);\r\n\r\n    function _BASE_CAPITAL_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_CAPITAL_TOKEN_() external returns (address);\r\n\r\n    function _BASE_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external returns (address);\r\n}\r\n\r\n// File: contracts/intf/IERC20.sol\r\n\r\n// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeERC20.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    This is a simplified version of OpenZepplin's SafeERC20 library\r\n\r\n*/\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/helper/UniswapArbitrageur.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n\r\n*/\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ncontract UniswapArbitrageur {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public _UNISWAP_;\r\n    address public _DODO_;\r\n    address public _BASE_;\r\n    address public _QUOTE_;\r\n\r\n    bool public _REVERSE_; // true if dodo.baseToken=uniswap.token0\r\n\r\n    constructor(address _uniswap, address _dodo) public {\r\n        _UNISWAP_ = _uniswap;\r\n        _DODO_ = _dodo;\r\n\r\n        _BASE_ = IDODO(_DODO_)._BASE_TOKEN_();\r\n        _QUOTE_ = IDODO(_DODO_)._QUOTE_TOKEN_();\r\n\r\n        address token0 = IUniswapV2Pair(_UNISWAP_).token0();\r\n        address token1 = IUniswapV2Pair(_UNISWAP_).token1();\r\n\r\n        if (token0 == _BASE_ && token1 == _QUOTE_) {\r\n            _REVERSE_ = false;\r\n        } else if (token0 == _QUOTE_ && token1 == _BASE_) {\r\n            _REVERSE_ = true;\r\n        } else {\r\n            require(true, \"DODO_UNISWAP_NOT_MATCH\");\r\n        }\r\n\r\n        IERC20(_BASE_).approve(_DODO_, uint256(-1));\r\n        IERC20(_QUOTE_).approve(_DODO_, uint256(-1));\r\n    }\r\n\r\n    function executeBuyArbitrage(uint256 baseAmount) external returns (uint256 quoteProfit) {\r\n        IDODO(_DODO_).buyBaseToken(baseAmount, uint256(-1), \"0xd\");\r\n        quoteProfit = IERC20(_QUOTE_).balanceOf(address(this));\r\n        IERC20(_QUOTE_).transfer(msg.sender, quoteProfit);\r\n        return quoteProfit;\r\n    }\r\n\r\n    function executeSellArbitrage(uint256 baseAmount) external returns (uint256 baseProfit) {\r\n        IDODO(_DODO_).sellBaseToken(baseAmount, 0, \"0xd\");\r\n        baseProfit = IERC20(_BASE_).balanceOf(address(this));\r\n        IERC20(_BASE_).transfer(msg.sender, baseProfit);\r\n        return baseProfit;\r\n    }\r\n\r\n    function dodoCall(\r\n        bool isDODOBuy,\r\n        uint256 baseAmount,\r\n        uint256 quoteAmount,\r\n        bytes calldata\r\n    ) external {\r\n        require(msg.sender == _DODO_, \"WRONG_DODO\");\r\n        if (_REVERSE_) {\r\n            _inverseArbitrage(isDODOBuy, baseAmount, quoteAmount);\r\n        } else {\r\n            _arbitrage(isDODOBuy, baseAmount, quoteAmount);\r\n        }\r\n    }\r\n\r\n    function _inverseArbitrage(\r\n        bool isDODOBuy,\r\n        uint256 baseAmount,\r\n        uint256 quoteAmount\r\n    ) internal {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = IUniswapV2Pair(_UNISWAP_).getReserves();\r\n        uint256 token0Balance = uint256(_reserve0);\r\n        uint256 token1Balance = uint256(_reserve1);\r\n        uint256 token0Amount;\r\n        uint256 token1Amount;\r\n        if (isDODOBuy) {\r\n            IERC20(_BASE_).transfer(_UNISWAP_, baseAmount);\r\n            // transfer token1 into uniswap\r\n            uint256 newToken0Balance = token0Balance.mul(token1Balance).div(\r\n                token1Balance.add(baseAmount)\r\n            );\r\n            token0Amount = token0Balance.sub(newToken0Balance).mul(9969).div(10000); // mul 0.9969\r\n            require(token0Amount > quoteAmount, \"NOT_PROFITABLE\");\r\n            IUniswapV2Pair(_UNISWAP_).swap(token0Amount, token1Amount, address(this), \"\");\r\n        } else {\r\n            IERC20(_QUOTE_).transfer(_UNISWAP_, quoteAmount);\r\n            // transfer token0 into uniswap\r\n            uint256 newToken1Balance = token0Balance.mul(token1Balance).div(\r\n                token0Balance.add(quoteAmount)\r\n            );\r\n            token1Amount = token1Balance.sub(newToken1Balance).mul(9969).div(10000); // mul 0.9969\r\n            require(token1Amount > baseAmount, \"NOT_PROFITABLE\");\r\n            IUniswapV2Pair(_UNISWAP_).swap(token0Amount, token1Amount, address(this), \"\");\r\n        }\r\n    }\r\n\r\n    function _arbitrage(\r\n        bool isDODOBuy,\r\n        uint256 baseAmount,\r\n        uint256 quoteAmount\r\n    ) internal {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = IUniswapV2Pair(_UNISWAP_).getReserves();\r\n        uint256 token0Balance = uint256(_reserve0);\r\n        uint256 token1Balance = uint256(_reserve1);\r\n        uint256 token0Amount;\r\n        uint256 token1Amount;\r\n        if (isDODOBuy) {\r\n            IERC20(_BASE_).transfer(_UNISWAP_, baseAmount);\r\n            // transfer token0 into uniswap\r\n            uint256 newToken1Balance = token1Balance.mul(token0Balance).div(\r\n                token0Balance.add(baseAmount)\r\n            );\r\n            token1Amount = token1Balance.sub(newToken1Balance).mul(9969).div(10000); // mul 0.9969\r\n            require(token1Amount > quoteAmount, \"NOT_PROFITABLE\");\r\n            IUniswapV2Pair(_UNISWAP_).swap(token0Amount, token1Amount, address(this), \"\");\r\n        } else {\r\n            IERC20(_QUOTE_).transfer(_UNISWAP_, quoteAmount);\r\n            // transfer token1 into uniswap\r\n            uint256 newToken0Balance = token1Balance.mul(token0Balance).div(\r\n                token1Balance.add(quoteAmount)\r\n            );\r\n            token0Amount = token0Balance.sub(newToken0Balance).mul(9969).div(10000); // mul 0.9969\r\n            require(token0Amount > baseAmount, \"NOT_PROFITABLE\");\r\n            IUniswapV2Pair(_UNISWAP_).swap(token0Amount, token1Amount, address(this), \"\");\r\n        }\r\n    }\r\n\r\n    function retrieve(address token, uint256 amount) external {\r\n        IERC20(token).safeTransfer(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_BASE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_REVERSE_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UNISWAP_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isDODOBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"dodoCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"name\":\"executeBuyArbitrage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"name\":\"executeSellArbitrage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapArbitrageur","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b4e16d0168e52d35cacd2c6185b44281ec28c9dc00000000000000000000000075c23271661d9d143dcb617222bc4bec783eff34","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f511cde41a45a7af5c2d592e28ac60801f5a6c8f4e5b2247c18486b56dcbb8bd"}]}