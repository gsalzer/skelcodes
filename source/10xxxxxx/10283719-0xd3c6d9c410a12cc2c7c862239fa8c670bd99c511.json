{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n*/\r\npragma solidity 0.5.11 - 0.6.4;\r\n\r\ncontract testV2 {\r\n     address public ownerWallet;\r\n      uint public currUserID = 0;\r\n      uint public pool1currUserID = 0;\r\n      uint public pool2currUserID = 0;\r\n      uint public pool3currUserID = 0;\r\n      uint public pool4currUserID = 0;\r\n      uint public pool5currUserID = 0;\r\n      uint public pool6currUserID = 0;\r\n      uint public pool7currUserID = 0;\r\n      uint public pool8currUserID = 0;\r\n      uint public pool9currUserID = 0;\r\n      uint public pool10currUserID = 0;\r\n      \r\n        uint public pool1activeUserID = 0;\r\n      uint public pool2activeUserID = 0;\r\n      uint public pool3activeUserID = 0;\r\n      uint public pool4activeUserID = 0;\r\n      uint public pool5activeUserID = 0;\r\n      uint public pool6activeUserID = 0;\r\n      uint public pool7activeUserID = 0;\r\n      uint public pool8activeUserID = 0;\r\n      uint public pool9activeUserID = 0;\r\n      uint public pool10activeUserID = 0;\r\n      \r\n      \r\n      uint public unlimited_level_price=0;\r\n     \r\n      struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n       uint referredUsers;\r\n        mapping(uint => uint) levelExpired;\r\n    }\r\n    \r\n     struct PoolUserStruct {\r\n        bool isExist;\r\n        uint id;\r\n       uint payment_received; \r\n    }\r\n    \r\n    mapping (address => UserStruct) public users;\r\n     mapping (uint => address) public userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool1users;\r\n     mapping (uint => address) public pool1userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool2users;\r\n     mapping (uint => address) public pool2userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool3users;\r\n     mapping (uint => address) public pool3userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool4users;\r\n     mapping (uint => address) public pool4userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool5users;\r\n     mapping (uint => address) public pool5userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool6users;\r\n     mapping (uint => address) public pool6userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool7users;\r\n     mapping (uint => address) public pool7userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool8users;\r\n     mapping (uint => address) public pool8userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool9users;\r\n     mapping (uint => address) public pool9userList;\r\n     \r\n     mapping (address => PoolUserStruct) public pool10users;\r\n     mapping (uint => address) public pool10userList;\r\n     \r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n    \r\n   uint REGESTRATION_FESS=0.05 ether;\r\n   uint pool1_price=0.1 ether;\r\n   uint pool2_price=0.2 ether ;\r\n   uint pool3_price=0.3 ether;\r\n   uint pool4_price=0.5 ether;\r\n   uint pool5_price=1 ether;\r\n   uint pool6_price=2 ether;\r\n   uint pool7_price=3 ether ;\r\n   uint pool8_price=5 ether;\r\n   uint pool9_price=1 ether;\r\n   uint pool10_price=5 ether;\r\n\r\n   \r\n   \r\n     event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n      event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n      \r\n     event regPoolEntry(address indexed _user,uint _level,   uint _time);\r\n     event getMoneyBuyPool(address indexed _user, address indexed _referral, uint _level, uint _levelpool, uint _time);\r\n   \r\n     \r\n    event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);\r\n   \r\n    UserStruct[] public requests;\r\n     \r\n      constructor() public {\r\n          ownerWallet = msg.sender;\r\n\r\n        LEVEL_PRICE[1] = 0.01 ether;\r\n        LEVEL_PRICE[2] = 0.005 ether;\r\n        LEVEL_PRICE[3] = 0.0025 ether;\r\n        LEVEL_PRICE[4] = 0.00025 ether;\r\n      unlimited_level_price=0.00025 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            referredUsers:0\r\n           \r\n        });\r\n        \r\n        users[ownerWallet] = userStruct;\r\n       userList[currUserID] = ownerWallet;\r\n       \r\n       \r\n         PoolUserStruct memory pooluserStruct;\r\n        \r\n        pool1currUserID++;\r\n\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool1currUserID,\r\n            payment_received:0\r\n        });\r\n    pool1activeUserID=pool1currUserID;\r\n       pool1users[msg.sender] = pooluserStruct;\r\n       pool1userList[pool1currUserID]=msg.sender;\r\n      \r\n        \r\n        pool2currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool2currUserID,\r\n            payment_received:0\r\n        });\r\n    pool2activeUserID=pool2currUserID;\r\n       pool2users[msg.sender] = pooluserStruct;\r\n       pool2userList[pool2currUserID]=msg.sender;\r\n       \r\n       \r\n        pool3currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool3currUserID,\r\n            payment_received:0\r\n        });\r\n    pool3activeUserID=pool3currUserID;\r\n       pool3users[msg.sender] = pooluserStruct;\r\n       pool3userList[pool3currUserID]=msg.sender;\r\n       \r\n       \r\n         pool4currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool4currUserID,\r\n            payment_received:0\r\n        });\r\n    pool4activeUserID=pool4currUserID;\r\n       pool4users[msg.sender] = pooluserStruct;\r\n       pool4userList[pool4currUserID]=msg.sender;\r\n\r\n        \r\n          pool5currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool5currUserID,\r\n            payment_received:0\r\n        });\r\n    pool5activeUserID=pool5currUserID;\r\n       pool5users[msg.sender] = pooluserStruct;\r\n       pool5userList[pool5currUserID]=msg.sender;\r\n       \r\n       \r\n         pool6currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool6currUserID,\r\n            payment_received:0\r\n        });\r\n    pool6activeUserID=pool6currUserID;\r\n       pool6users[msg.sender] = pooluserStruct;\r\n       pool6userList[pool6currUserID]=msg.sender;\r\n       \r\n         pool7currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool7currUserID,\r\n            payment_received:0\r\n        });\r\n    pool7activeUserID=pool7currUserID;\r\n       pool7users[msg.sender] = pooluserStruct;\r\n       pool7userList[pool7currUserID]=msg.sender;\r\n       \r\n       pool8currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool8currUserID,\r\n            payment_received:0\r\n        });\r\n    pool8activeUserID=pool8currUserID;\r\n       pool8users[msg.sender] = pooluserStruct;\r\n       pool8userList[pool8currUserID]=msg.sender;\r\n       \r\n        pool9currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool9currUserID,\r\n            payment_received:0\r\n        });\r\n    pool9activeUserID=pool9currUserID;\r\n       pool9users[msg.sender] = pooluserStruct;\r\n       pool9userList[pool9currUserID]=msg.sender;\r\n       \r\n       \r\n        pool10currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool10currUserID,\r\n            payment_received:0\r\n        });\r\n    pool10activeUserID=pool10currUserID;\r\n       pool10users[msg.sender] = pooluserStruct;\r\n       pool10userList[pool10currUserID]=msg.sender;\r\n       \r\n       \r\n      }\r\n     \r\n       function regUser(uint _referrerID) public payable {\r\n       \r\n      require(!users[msg.sender].isExist, \"User Exists\");\r\n      require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referral ID');\r\n        require(msg.value == REGESTRATION_FESS, 'Incorrect Value');\r\n       \r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            referredUsers:0\r\n        });\r\n   \r\n    \r\n       users[msg.sender] = userStruct;\r\n       userList[currUserID]=msg.sender;\r\n       \r\n        users[userList[users[msg.sender].referrerID]].referredUsers=users[userList[users[msg.sender].referrerID]].referredUsers+1;\r\n        \r\n       payReferral(1,msg.sender);\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n   \r\n   \r\n     function payReferral(uint _level, address _user) internal {\r\n        address referer;\r\n       \r\n        referer = userList[users[_user].referrerID];\r\n       \r\n       \r\n         bool sent = false;\r\n       \r\n            uint level_price_local=0;\r\n            if(_level>4){\r\n            level_price_local=unlimited_level_price;\r\n            }\r\n            else{\r\n            level_price_local=LEVEL_PRICE[_level];\r\n            }\r\n            sent = address(uint160(referer)).send(level_price_local);\r\n\r\n            if (sent) {\r\n                emit getMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n                if(_level < 100 && users[referer].referrerID >= 1){\r\n                    payReferral(_level+1,referer);\r\n                }\r\n                else\r\n                {\r\n                    sendBalance();\r\n                }\r\n               \r\n            }\r\n       \r\n        if(!sent) {\r\n          //  emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n\r\n            payReferral(_level, referer);\r\n        }\r\n     }\r\n   \r\n   \r\n   \r\n   \r\n       function buyPool1() public payable {\r\n       require(users[msg.sender].isExist, \"User Not Registered\");\r\n      require(!pool1users[msg.sender].isExist, \"Already in AutoPool\");\r\n      \r\n        require(msg.value == pool1_price, 'Incorrect Value');\r\n        \r\n       \r\n        PoolUserStruct memory userStruct;\r\n        address pool1Currentuser=pool1userList[pool1activeUserID];\r\n        \r\n        pool1currUserID++;\r\n\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool1currUserID,\r\n            payment_received:0\r\n        });\r\n   \r\n       pool1users[msg.sender] = userStruct;\r\n       pool1userList[pool1currUserID]=msg.sender;\r\n       bool sent = false;\r\n       sent = address(uint160(pool1Currentuser)).send((pool1_price*3)/4);\r\n\r\n            if (sent) {\r\n                pool1users[pool1Currentuser].payment_received+=1;\r\n                if(pool1users[pool1Currentuser].payment_received>=3)\r\n                {\r\n                    pool1activeUserID+=1;\r\n                }\r\n                emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);\r\n            }\r\n       emit regPoolEntry(msg.sender, 1, now);\r\n       \r\n  \r\n     \r\n     payrefpool1(1,msg.sender);\r\n \r\n       \r\n    }\r\n\r\n    function payrefpool1(uint _level,address _user) internal{\r\n        address referer1;\r\n        referer1 = userList[users[_user].referrerID];\r\n        bool sent = false;\r\n        \r\n        if(_level == 1){\r\n        sent = address(uint160(referer1)).send(pool1_price/10);\r\n        emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);\r\n        }\r\n        if(_level == 2){\r\n        sent = address(uint160(referer1)).send(pool1_price/20);\r\n        emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);\r\n        }\r\n    \r\n        if(_level == 3){\r\n        sent = address(0x9A18c5AcFF0C0f63C78f006f4a288907eD29B20c).send(pool1_price/10);\r\n        }\r\n        if(_level < 3 && users[referer1].referrerID >= 1){\r\n                    payrefpool1(_level+1,referer1);\r\n        }\r\n        else\r\n        {\r\n            sendBalance();\r\n        }\r\n        \r\n    }\r\n    \r\n\r\n    \r\n    \r\n      function buyPool2() public payable {\r\n          require(users[msg.sender].isExist, \"User Not Registered\");\r\n      require(!pool2users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool2_price, 'Incorrect Value');\r\n        require(users[msg.sender].referredUsers>=0, \"Must need 0 referral\");\r\n         \r\n        PoolUserStruct memory userStruct;\r\n        address pool2Currentuser=pool2userList[pool2activeUserID];\r\n        \r\n        pool2currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool2currUserID,\r\n            payment_received:0\r\n        });\r\n       pool2users[msg.sender] = userStruct;\r\n       pool2userList[pool2currUserID]=msg.sender;\r\n       \r\n       \r\n       \r\n       bool sent = false;\r\n       sent = address(uint160(pool2Currentuser)).send((pool2_price*3)/4);\r\n\r\n            if (sent) {\r\n                pool2users[pool2Currentuser].payment_received+=1;\r\n                if(pool2users[pool2Currentuser].payment_received>=3)\r\n                {\r\n                    pool2activeUserID+=1;\r\n                }\r\n                emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);\r\n            }\r\n            emit regPoolEntry(msg.sender,2,  now);\r\n            \r\n    payrefpool2(1,msg.sender);\r\n \r\n       \r\n    }\r\n\r\n    function payrefpool2(uint _level,address _user) internal{\r\n        address referer2;\r\n        referer2 = userList[users[_user].referrerID];\r\n        bool sent = false;\r\n        \r\n        if(_level == 1){\r\n        sent = address(uint160(referer2)).send(pool2_price/10);\r\n        emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);\r\n        }\r\n        if(_level == 2){\r\n        sent = address(uint160(referer2)).send(pool2_price/20);\r\n        emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);\r\n        }\r\n   \r\n        \r\n        if(_level == 3){\r\n        sent = address(0x9A18c5AcFF0C0f63C78f006f4a288907eD29B20c).send(pool2_price/10);\r\n        }\r\n        if(_level < 3 && users[referer2].referrerID >= 1){\r\n                    payrefpool2(_level+1,referer2);\r\n        }\r\n        else\r\n        {\r\n            sendBalance();\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n     function buyPool3() public payable {\r\n         require(users[msg.sender].isExist, \"User Not Registered\");\r\n      require(!pool3users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool3_price, 'Incorrect Value');\r\n        require(users[msg.sender].referredUsers>=0, \"Must need 0 referral\");\r\n        \r\n        PoolUserStruct memory userStruct;\r\n        address pool3Currentuser=pool3userList[pool3activeUserID];\r\n        \r\n        pool3currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool3currUserID,\r\n            payment_received:0\r\n        });\r\n       pool3users[msg.sender] = userStruct;\r\n       pool3userList[pool3currUserID]=msg.sender;\r\n       bool sent = false;\r\n       sent = address(uint160(pool3Currentuser)).send((pool3_price*3)/4);\r\n\r\n            if (sent) {\r\n                pool3users[pool3Currentuser].payment_received+=1;\r\n                if(pool3users[pool3Currentuser].payment_received>=3)\r\n                {\r\n                    pool3activeUserID+=1;\r\n                }\r\n                emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);\r\n            }\r\nemit regPoolEntry(msg.sender,3,  now);\r\n    \r\n    payrefpool3(1,msg.sender);\r\n \r\n       \r\n    }\r\n\r\n    function payrefpool3(uint _level,address _user) internal{\r\n        address referer3;\r\n        referer3 = userList[users[_user].referrerID];\r\n        bool sent = false;\r\n        \r\n        if(_level == 1){\r\n        sent = address(uint160(referer3)).send(pool3_price/10);\r\n        emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);\r\n        }\r\n        if(_level == 2){\r\n        sent = address(uint160(referer3)).send(pool3_price/20);\r\n        emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);\r\n        }\r\n        \r\n        if(_level == 3){\r\n        sent = address(0x9A18c5AcFF0C0f63C78f006f4a288907eD29B20c).send(pool3_price/10);\r\n        }\r\n        if(_level < 3 && users[referer3].referrerID >= 1){\r\n                    payrefpool3(_level+1,referer3);\r\n        }\r\n        else\r\n        {\r\n            sendBalance();\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function buyPool4() public payable {\r\n        require(users[msg.sender].isExist, \"User Not Registered\");\r\n      require(!pool4users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool4_price, 'Incorrect Value');\r\n        require(users[msg.sender].referredUsers>=0, \"Must need 0 referral\");\r\n      \r\n        PoolUserStruct memory userStruct;\r\n        address pool4Currentuser=pool4userList[pool4activeUserID];\r\n        \r\n        pool4currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool4currUserID,\r\n            payment_received:0\r\n        });\r\n       pool4users[msg.sender] = userStruct;\r\n       pool4userList[pool4currUserID]=msg.sender;\r\n       bool sent = false;\r\n       sent = address(uint160(pool4Currentuser)).send((pool4_price*3)/4);\r\n\r\n            if (sent) {\r\n                pool4users[pool4Currentuser].payment_received+=1;\r\n                if(pool4users[pool4Currentuser].payment_received>=3)\r\n                {\r\n                    pool4activeUserID+=1;\r\n                }\r\n                 emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);\r\n            }\r\n        emit regPoolEntry(msg.sender,4, now);\r\n    \r\n    payrefpool4(1,msg.sender);\r\n \r\n       \r\n    }\r\n\r\n    function payrefpool4(uint _level,address _user) internal{\r\n        address referer4;\r\n        referer4 = userList[users[_user].referrerID];\r\n        bool sent = false;\r\n        \r\n        if(_level == 1){\r\n        sent = address(uint160(referer4)).send(pool4_price/10);\r\n        emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);\r\n        }\r\n        if(_level == 2){\r\n        sent = address(uint160(referer4)).send(pool4_price/20);\r\n        emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);\r\n        }\r\n        \r\n        if(_level == 3){\r\n        sent = address(0x9A18c5AcFF0C0f63C78f006f4a288907eD29B20c).send(pool4_price/10);\r\n        }\r\n        if(_level < 3 && users[referer4].referrerID >= 1){\r\n                    payrefpool4(_level+1,referer4);\r\n        }\r\n        else\r\n        {\r\n            sendBalance();\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    function buyPool5() public payable {\r\n        require(users[msg.sender].isExist, \"User Not Registered\");\r\n      require(!pool5users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool5_price, 'Incorrect Value');\r\n        require(users[msg.sender].referredUsers>=0, \"Must need 0 referral\");\r\n        \r\n        PoolUserStruct memory userStruct;\r\n        address pool5Currentuser=pool5userList[pool5activeUserID];\r\n        \r\n        pool5currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool5currUserID,\r\n            payment_received:0\r\n        });\r\n       pool5users[msg.sender] = userStruct;\r\n       pool5userList[pool5currUserID]=msg.sender;\r\n       bool sent = false;\r\n       sent = address(uint160(pool5Currentuser)).send((pool5_price*3)/4);\r\n\r\n            if (sent) {\r\n                pool5users[pool5Currentuser].payment_received+=1;\r\n                if(pool5users[pool5Currentuser].payment_received>=3)\r\n                {\r\n                    pool5activeUserID+=1;\r\n                }\r\n                 emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);\r\n            }\r\n        emit regPoolEntry(msg.sender,5,  now);\r\n    \r\n    payrefpool5(1,msg.sender);\r\n \r\n       \r\n    }\r\n\r\n    function payrefpool5(uint _level,address _user) internal{\r\n        address referer5;\r\n        referer5 = userList[users[_user].referrerID];\r\n        bool sent = false;\r\n        \r\n        if(_level == 1){\r\n        sent = address(uint160(referer5)).send(pool5_price/10);\r\n        emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);\r\n        }\r\n        if(_level == 2){\r\n        sent = address(uint160(referer5)).send(pool5_price/20);\r\n        emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);\r\n        }\r\n       \r\n        if(_level == 3){\r\n        sent = address(0x9A18c5AcFF0C0f63C78f006f4a288907eD29B20c).send(pool5_price/10);\r\n        }\r\n        if(_level < 3 && users[referer5].referrerID >= 1){\r\n                    payrefpool5(_level+1,referer5);\r\n        }\r\n        else\r\n        {\r\n            sendBalance();\r\n        }\r\n        \r\n    }\r\n    \r\n    function buyPool6() public payable {\r\n      require(!pool6users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool6_price, 'Incorrect Value');\r\n        require(users[msg.sender].referredUsers>=0, \"Must need 0 referral\");\r\n        \r\n        PoolUserStruct memory userStruct;\r\n        address pool6Currentuser=pool6userList[pool6activeUserID];\r\n        \r\n        pool6currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool6currUserID,\r\n            payment_received:0\r\n        });\r\n       pool6users[msg.sender] = userStruct;\r\n       pool6userList[pool6currUserID]=msg.sender;\r\n       bool sent = false;\r\n       sent = address(uint160(pool6Currentuser)).send((pool6_price*3)/4);\r\n\r\n            if (sent) {\r\n                pool6users[pool6Currentuser].payment_received+=1;\r\n                if(pool6users[pool6Currentuser].payment_received>=3)\r\n                {\r\n                    pool6activeUserID+=1;\r\n                }\r\n                 emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);\r\n            }\r\n        emit regPoolEntry(msg.sender,6,  now);\r\n    \r\n    payrefpool6(1,msg.sender);\r\n \r\n       \r\n    }\r\n\r\n    function payrefpool6(uint _level,address _user) internal{\r\n        address referer6;\r\n        referer6 = userList[users[_user].referrerID];\r\n        bool sent = false;\r\n        \r\n        if(_level == 1){\r\n        sent = address(uint160(referer6)).send(pool6_price/10);\r\n        emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);\r\n        }\r\n        if(_level == 2){\r\n        sent = address(uint160(referer6)).send(pool6_price/20);\r\n        emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);\r\n        }\r\n        \r\n        if(_level == 3){\r\n        sent = address(0x9A18c5AcFF0C0f63C78f006f4a288907eD29B20c).send(pool6_price/10);\r\n        }\r\n        if(_level < 3 && users[referer6].referrerID >= 1){\r\n                    payrefpool6(_level+1,referer6);\r\n        }\r\n        else\r\n        {\r\n            sendBalance();\r\n        }\r\n        \r\n    }\r\n    \r\n        function buyPool7() public payable {\r\n      require(!pool7users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool7_price, 'Incorrect Value');\r\n        require(users[msg.sender].referredUsers>=0, \"Must need 0 referral\");\r\n        \r\n        PoolUserStruct memory userStruct;\r\n        address pool7Currentuser=pool7userList[pool7activeUserID];\r\n        \r\n        pool7currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool7currUserID,\r\n            payment_received:0\r\n        });\r\n       pool7users[msg.sender] = userStruct;\r\n       pool7userList[pool7currUserID]=msg.sender;\r\n       bool sent = false;\r\n       sent = address(uint160(pool7Currentuser)).send((pool7_price*3)/4);\r\n\r\n            if (sent) {\r\n                pool7users[pool7Currentuser].payment_received+=1;\r\n                if(pool7users[pool7Currentuser].payment_received>=3)\r\n                {\r\n                    pool7activeUserID+=1;\r\n                }\r\n                 emit getPoolPayment(msg.sender,pool7Currentuser, 7, now);\r\n            }\r\n        emit regPoolEntry(msg.sender,7,  now);\r\n    \r\n    payrefpool7(1,msg.sender);\r\n \r\n       \r\n    }\r\n\r\n    function payrefpool7(uint _level,address _user) internal{\r\n        address referer7;\r\n        referer7 = userList[users[_user].referrerID];\r\n        bool sent = false;\r\n        \r\n        if(_level == 1){\r\n        sent = address(uint160(referer7)).send(pool7_price/10);\r\n        emit getMoneyBuyPool(referer7, msg.sender, _level,7, now);\r\n        }\r\n        if(_level == 2){\r\n        sent = address(uint160(referer7)).send(pool7_price/20);\r\n        emit getMoneyBuyPool(referer7, msg.sender, _level,7, now);\r\n        }\r\n        \r\n        if(_level == 3){\r\n        sent = address(0x9A18c5AcFF0C0f63C78f006f4a288907eD29B20c).send(pool7_price/10);\r\n        }\r\n        if(_level < 3 && users[referer7].referrerID >= 1){\r\n                    payrefpool7(_level+1,referer7);\r\n        }\r\n        else\r\n        {\r\n            sendBalance();\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n        function buyPool8() public payable {\r\n      require(!pool8users[msg.sender].isExist, \"Already in AutoPool\");\r\n        require(msg.value == pool8_price, 'Incorrect Value');\r\n        require(users[msg.sender].referredUsers>=0, \"Must need 0 referral\");\r\n        \r\n        PoolUserStruct memory userStruct;\r\n        address pool8Currentuser=pool8userList[pool8activeUserID];\r\n        \r\n        pool8currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool8currUserID,\r\n            payment_received:0\r\n        });\r\n       pool8users[msg.sender] = userStruct;\r\n       pool8userList[pool8currUserID]=msg.sender;\r\n       bool sent = false;\r\n       sent = address(uint160(pool8Currentuser)).send((pool8_price*3)/4);\r\n\r\n            if (sent) {\r\n                pool8users[pool8Currentuser].payment_received+=1;\r\n                if(pool8users[pool8Currentuser].payment_received>=3)\r\n                {\r\n                    pool8activeUserID+=1;\r\n                }\r\n                 emit getPoolPayment(msg.sender,pool8Currentuser, 8, now);\r\n            }\r\n        emit regPoolEntry(msg.sender,8,  now);\r\n    \r\n    payrefpool8(1,msg.sender);\r\n \r\n       \r\n    }\r\n\r\n    function payrefpool8(uint _level,address _user) internal{\r\n        address referer8;\r\n        referer8 = userList[users[_user].referrerID];\r\n        bool sent = false;\r\n        \r\n        if(_level == 1){\r\n        sent = address(uint160(referer8)).send(pool8_price/10);\r\n        emit getMoneyBuyPool(referer8, msg.sender, _level,8, now);\r\n        }\r\n        if(_level == 2){\r\n        sent = address(uint160(referer8)).send(pool8_price/20);\r\n        emit getMoneyBuyPool(referer8, msg.sender, _level,8, now);\r\n        }\r\n        \r\n        if(_level == 3){\r\n        sent = address(0x9A18c5AcFF0C0f63C78f006f4a288907eD29B20c).send(pool8_price/10);\r\n        }\r\n        if(_level < 3 && users[referer8].referrerID >= 1){\r\n                    payrefpool8(_level+1,referer8);\r\n        }\r\n        else\r\n        {\r\n            sendBalance();\r\n        }\r\n        \r\n    }\r\n        \r\n    \r\n    \r\n    function getEthBalance() public view returns(uint) {\r\n    return address(this).balance;\r\n    }\r\n    \r\n    function sendBalance() private\r\n    {\r\n         if (!address(uint160(ownerWallet)).send(getEthBalance()))\r\n         {\r\n             \r\n         }\r\n    }\r\n   \r\n   \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"buyPool1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool5currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool5users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool3userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool1userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool8userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool1users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool4\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool5activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool9currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool4userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool7\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool9userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool4activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool9users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool7currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool10currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool6users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool8\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool3users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlimited_level_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool2userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool8activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool4users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool6userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool2users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool8currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool7users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool9activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool7activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool10activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool4currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool8users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool6\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool3\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool5userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool7userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool10userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool6currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool10users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool5\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool6activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regPoolEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_levelpool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyBuyPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPoolPayment\",\"type\":\"event\"}]","ContractName":"testV2","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eac12c55c7e8b2ba0054ef1129413d72ba442c8087b5ab414bc4eeb1df371dcd"}]}