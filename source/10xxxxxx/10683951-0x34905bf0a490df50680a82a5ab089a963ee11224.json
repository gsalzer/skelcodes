{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\n\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IOracle {\n    function getPriceFeed() external view returns(uint[] memory);\n}\n\ninterface IStakeLPToken {\n    function notify(uint _deficit) external;\n    function totalSupply() external view returns(uint);\n}\n\ncontract IPeak {\n    function updateFeed(uint[] calldata _prices) external;\n    function portfolioValue() public view returns(uint);\n}\n\ninterface IDUSD {\n    function mint(address account, uint amount) external;\n    function burn(address account, uint amount) external;\n    function totalSupply() external view returns(uint);\n    function burnForSelf(uint amount) external;\n}\n\ninterface ICore {\n    function mint(uint dusdAmount, address account) external returns(uint usd);\n    function redeem(uint dusdAmount, address account) external returns(uint usd);\n    function rewardDistributionCheckpoint(bool shouldDistribute) external returns(uint periodIncome);\n\n    function lastPeriodIncome() external view returns(uint _totalAssets, uint _periodIncome, uint _adminFee);\n    function usdToDusd(uint usd) external view returns(uint);\n    function dusdToUsd(uint _dusd, bool fee) external view returns(uint usd);\n}\n\ncontract Initializable {\n    bool initialized = false;\n\n    modifier notInitialized() {\n        require(!initialized, \"already initialized\");\n        initialized = true;\n        _;\n    }\n\n    // Reserved storage space to allow for layout changes in the future.\n    uint256[50] private _gap;\n}\n\ncontract Ownable {\n    bytes32 constant OWNER_SLOT = keccak256(\"proxy.owner\");\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() internal {\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns(address _owner) {\n        bytes32 position = OWNER_SLOT;\n        assembly {\n            _owner := sload(position)\n        }\n    }\n\n    modifier onlyOwner() {\n        require(isOwner(), \"NOT_OWNER\");\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return owner() == msg.sender;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(owner(), newOwner);\n        bytes32 position = OWNER_SLOT;\n        assembly {\n            sstore(position, newOwner)\n        }\n    }\n}\n\ncontract Core is Ownable, Initializable, ICore {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    uint constant FEE_PRECISION = 10000;\n\n    IDUSD public dusd;\n    IStakeLPToken public stakeLPToken;\n    IOracle public oracle;\n    address[] public systemCoins;\n\n    uint public totalAssets;\n    uint public unclaimedRewards;\n    bool public inDeficit;\n    uint public redeemFactor;\n    uint public adminFee;\n\n    // Interface contracts for third-party protocol integrations\n    enum PeakState { Extinct, Active, Dormant }\n    struct Peak {\n        uint[] systemCoinIds; // system indices of the coins accepted by the peak\n        PeakState state;\n    }\n    mapping(address => Peak) peaks;\n    address[] public peaksAddresses;\n\n    // END OF STORAGE VARIABLES\n\n    event Mint(address indexed account, uint amount);\n    event Redeem(address indexed account, uint amount);\n    event FeedUpdated(uint[] feed);\n    event TokenWhiteListed(address indexed token);\n    event PeakWhitelisted(address indexed peak);\n    event UpdateDeficitState(bool inDeficit);\n\n    modifier checkAndNotifyDeficit() {\n        _;\n        uint supply = dusd.totalSupply();\n        if (supply > totalAssets) {\n            if (!inDeficit) {\n                emit UpdateDeficitState(true);\n                inDeficit = true;\n            }\n            stakeLPToken.notify(supply.sub(totalAssets));\n        } else if (inDeficit) {\n            inDeficit = false;\n            emit UpdateDeficitState(false);\n            stakeLPToken.notify(0);\n        }\n    }\n\n    modifier onlyStakeLPToken() {\n        require(\n            msg.sender == address(stakeLPToken),\n            \"Only stakeLPToken\"\n        );\n        _;\n    }\n\n    /**\n    * @dev Used to initialize contract state from the proxy\n    */\n    function initialize(\n        IDUSD _dusd,\n        IStakeLPToken _stakeLPToken,\n        IOracle _oracle,\n        uint _redeemFactor,\n        uint _adminFee\n    )   public\n        notInitialized\n    {\n        require(\n            address(_dusd) != address(0) &&\n            address(_stakeLPToken) != address(0) &&\n            address(_oracle) != address(0),\n            \"0 address during initialization\"\n        );\n        dusd = _dusd;\n        stakeLPToken = _stakeLPToken;\n        oracle = _oracle;\n        require(\n            _redeemFactor <= FEE_PRECISION && _adminFee <= FEE_PRECISION,\n            \"Incorrect upper bound for fee\"\n        );\n        redeemFactor = _redeemFactor;\n        adminFee = _adminFee;\n    }\n\n    /**\n    * @notice Mint DUSD\n    * @dev Only whitelisted peaks can call this function\n    * @param dusdAmount DUSD amount to mint\n    * @param account Account to mint DUSD to\n    * @return dusdAmount DUSD amount minted\n    */\n    function mint(uint usdDelta, address account)\n        external\n        checkAndNotifyDeficit\n        returns(uint dusdAmount)\n    {\n        require(usdDelta > 0, \"Minting 0\");\n        Peak memory peak = peaks[msg.sender];\n        require(\n            peak.state == PeakState.Active,\n            \"Peak is inactive\"\n        );\n        dusdAmount = usdToDusd(usdDelta);\n        dusd.mint(account, dusdAmount);\n        totalAssets = totalAssets.add(usdDelta);\n        emit Mint(account, dusdAmount);\n    }\n\n    /**\n    * @notice Redeem DUSD\n    * @dev Only whitelisted peaks can call this function\n    * @param dusdAmount DUSD amount to redeem.\n    * @param account Account to burn DUSD from\n    */\n    function redeem(uint dusdAmount, address account)\n        external\n        checkAndNotifyDeficit\n        returns(uint usd)\n    {\n        require(dusdAmount > 0, \"Redeeming 0\");\n        Peak memory peak = peaks[msg.sender];\n        require(\n            peak.state != PeakState.Extinct,\n            \"Peak is extinct\"\n        );\n        usd = dusdToUsd(dusdAmount, true);\n        dusd.burn(account, dusdAmount);\n        totalAssets = totalAssets.sub(usd);\n        emit Redeem(account, dusdAmount);\n    }\n\n    /**\n    * @notice Pull prices from the oracle and update system stats\n    * @dev Anyone can call this\n    */\n    function syncSystem()\n        external\n        checkAndNotifyDeficit\n    {\n        _updateFeed();\n        totalAssets = totalSystemAssets();\n    }\n\n    function rewardDistributionCheckpoint(bool shouldDistribute)\n        external\n        onlyStakeLPToken\n        checkAndNotifyDeficit\n        returns(uint periodIncome)\n    {\n        uint _adminFee;\n        (totalAssets, periodIncome, _adminFee) = lastPeriodIncome();\n        if (periodIncome == 0) {\n            return 0;\n        }\n        // note that we do not account for devalued dusd here\n        if (shouldDistribute) {\n            dusd.mint(address(stakeLPToken), periodIncome);\n            if (_adminFee > 0) {\n                dusd.mint(address(this), _adminFee);\n            }\n        } else {\n            // stakers don't get these, will act as extra volatility cushion\n            unclaimedRewards = unclaimedRewards.add(periodIncome).add(_adminFee);\n        }\n    }\n\n    /* ##### View functions ##### */\n\n    function lastPeriodIncome()\n        public\n        view\n        returns(uint _totalAssets, uint periodIncome, uint _adminFee)\n    {\n        _totalAssets = totalSystemAssets();\n        uint supply = dusd.totalSupply().add(unclaimedRewards);\n        if (_totalAssets > supply) {\n            periodIncome = _totalAssets.sub(supply);\n            if (adminFee > 0) {\n                _adminFee = periodIncome.mul(adminFee).div(FEE_PRECISION);\n                periodIncome = periodIncome.sub(_adminFee);\n            }\n        }\n    }\n\n    /**\n    * @notice Returns the net system assets across all peaks\n    * @return _totalAssets system assets denominated in dollars\n    */\n    function totalSystemAssets()\n        public\n        view\n        returns (uint _totalAssets)\n    {\n        for (uint i = 0; i < peaksAddresses.length; i++) {\n            Peak memory peak = peaks[peaksAddresses[i]];\n            if (peak.state == PeakState.Extinct) {\n                continue;\n            }\n            _totalAssets = _totalAssets.add(IPeak(peaksAddresses[i]).portfolioValue());\n        }\n    }\n\n    function usdToDusd(uint usd)\n        public\n        view\n        returns(uint)\n    {\n        // system is healthy. Pegged at $1\n        if (!inDeficit) {\n            return usd;\n        }\n        // system is in deficit, see if staked funds can make up for it\n        uint supply = dusd.totalSupply();\n        uint perceivedSupply = supply.sub(stakeLPToken.totalSupply());\n        // staked funds make up for the deficit\n        if (perceivedSupply <= totalAssets) {\n            return usd;\n        }\n        return usd.mul(perceivedSupply).div(totalAssets);\n    }\n\n    function dusdToUsd(uint _dusd, bool fee)\n        public\n        view\n        returns(uint usd)\n    {\n        // system is healthy. Pegged at $1\n        if (!inDeficit) {\n            usd = _dusd;\n        } else {\n        // system is in deficit, see if staked funds can make up for it\n            uint supply = dusd.totalSupply();\n            // do not perform a dusd.balanceOf(stakeLPToken) because that includes the reward tokens\n            uint perceivedSupply = supply.sub(stakeLPToken.totalSupply());\n            // staked funds make up for the deficit\n            if (perceivedSupply <= totalAssets) {\n                usd = _dusd;\n            } else {\n                usd = _dusd.mul(totalAssets).div(perceivedSupply);\n            }\n        }\n        if (fee) {\n            usd = usd.mul(redeemFactor).div(FEE_PRECISION);\n        }\n        return usd;\n    }\n\n    /* ##### Admin functions ##### */\n\n    /**\n    * @notice Whitelist new tokens supported by the peaks.\n    * These are vanilla coins like DAI, USDC, USDT etc.\n    * @dev onlyOwner ACL is provided by the whitelistToken call\n    * @param tokens Token addresses to whitelist\n    */\n    function whitelistTokens(address[] calldata tokens)\n        external\n        onlyOwner\n    {\n        for (uint i = 0; i < tokens.length; i++) {\n            _whitelistToken(tokens[i]);\n        }\n    }\n\n    /**\n    * @notice Whitelist a new peak\n    * @param peak Address of the contract that interfaces with the 3rd-party protocol\n    * @param _systemCoins Indices of the system coins, the peak supports\n    */\n    function whitelistPeak(\n        address peak,\n        uint[] calldata _systemCoins,\n        bool shouldUpdateFeed\n    )   external\n        onlyOwner\n    {\n        uint numSystemCoins = systemCoins.length;\n        for (uint i = 0; i < _systemCoins.length; i++) {\n            require(_systemCoins[i] < numSystemCoins, \"Invalid system coin index\");\n        }\n        require(\n            peaks[peak].state == PeakState.Extinct,\n            \"Peak already exists\"\n        );\n        peaksAddresses.push(peak);\n        peaks[peak] = Peak(_systemCoins, PeakState.Active);\n        if (shouldUpdateFeed) {\n            _updateFeed();\n        }\n        emit PeakWhitelisted(peak);\n    }\n\n    /**\n    * @notice Change a peaks status\n    */\n    function setPeakStatus(address peak, PeakState state)\n        external\n        onlyOwner\n    {\n        require(\n            peaks[peak].state != PeakState.Extinct,\n            \"Peak is extinct\"\n        );\n        peaks[peak].state = state;\n    }\n\n    function setFee(uint _redeemFactor, uint _adminFee)\n        external\n        onlyOwner\n    {\n        require(\n            _redeemFactor <= FEE_PRECISION && _adminFee <= FEE_PRECISION,\n            \"Incorrect upper bound for fee\"\n        );\n        redeemFactor = _redeemFactor;\n        adminFee = _adminFee;\n    }\n\n    function withdrawAdminFee(address destination)\n        external\n        onlyOwner\n    {\n        IERC20 _dusd = IERC20(address(dusd));\n        _dusd.safeTransfer(destination, _dusd.balanceOf(address(this)));\n    }\n\n    /* ##### Internal functions ##### */\n\n    function _updateFeed()\n        internal\n    {\n        uint[] memory feed = oracle.getPriceFeed();\n        require(feed.length == systemCoins.length, \"Invalid system state\");\n        uint[] memory prices;\n        Peak memory peak;\n        for (uint i = 0; i < peaksAddresses.length; i++) {\n            peak = peaks[peaksAddresses[i]];\n            prices = new uint[](peak.systemCoinIds.length);\n            if (peak.state == PeakState.Extinct) {\n                continue;\n            }\n            for (uint j = 0; j < prices.length; j++) {\n                prices[j] = feed[peak.systemCoinIds[j]];\n            }\n            IPeak(peaksAddresses[i]).updateFeed(prices);\n        }\n        emit FeedUpdated(feed);\n    }\n\n    function _whitelistToken(address token)\n        internal\n    {\n        for (uint i = 0; i < systemCoins.length; i++) {\n            require(systemCoins[i] != token, \"Adding a duplicate token\");\n        }\n        systemCoins.push(token);\n        emit TokenWhiteListed(token);\n    }\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"feed\",\"type\":\"uint256[]\"}],\"name\":\"FeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"peak\",\"type\":\"address\"}],\"name\":\"PeakWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenWhiteListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"inDeficit\",\"type\":\"bool\"}],\"name\":\"UpdateDeficitState\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dusd\",\"outputs\":[{\"internalType\":\"contract IDUSD\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dusd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"name\":\"dusdToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inDeficit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IDUSD\",\"name\":\"_dusd\",\"type\":\"address\"},{\"internalType\":\"contract IStakeLPToken\",\"name\":\"_stakeLPToken\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redeemFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPeriodIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peaksAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"shouldDistribute\",\"type\":\"bool\"}],\"name\":\"rewardDistributionCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodIncome\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"peak\",\"type\":\"address\"},{\"internalType\":\"enum Core.PeakState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"setPeakStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeLPToken\",\"outputs\":[{\"internalType\":\"contract IStakeLPToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"syncSystem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"systemCoins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSystemAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAssets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"}],\"name\":\"usdToDusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"peak\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_systemCoins\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"shouldUpdateFeed\",\"type\":\"bool\"}],\"name\":\"whitelistPeak\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"whitelistTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdrawAdminFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Core","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}