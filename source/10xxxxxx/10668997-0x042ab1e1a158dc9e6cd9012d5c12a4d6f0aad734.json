{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.15;\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n    }\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nlibrary Address {\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\tbytes32 codehash;\r\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\t\tassembly { codehash := extcodehash(account) }\r\n\t\treturn (codehash != 0x0 && codehash != accountHash);\r\n\t}\r\n\tfunction toPayable(address account) internal pure returns (address payable) {\r\n\t\treturn address(uint160(account));\r\n\t}\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\t\t(bool success, ) = recipient.call.value(amount)(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\tfunction safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\tfunction callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\trequire(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = address(token).call(data);\r\n\t\trequire(success, \"SafeERC20: low-level call failed\");\r\n\r\n\t\tif (returndata.length > 0) {\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction decimals() external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface StakingPool {\r\n\tfunction getReward() external;\r\n\tfunction stake(uint256) external;\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n\tfunction exit() external;\r\n}\r\n\r\ninterface UniswapRouter {\r\n\tfunction swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n\tfunction addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n\tfunction removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\r\n}\r\n\r\ncontract YamAutomation {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\t\r\n\taddress constant private _yam = address(0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16);\r\n\taddress constant private _ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\r\n\taddress constant private _univ2 = address(0x2C7a51A357d5739C5C74Bf3C96816849d2c9F726);\r\n\taddress constant private _stakingpool = address(0xADDBCd6A68BFeb6E312e82B30cE1EB4a54497F4c);\r\n\taddress constant private _unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\t\r\n\taddress public owner;\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"No owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        IERC20(_univ2).safeApprove(_stakingpool, uint(-1));\r\n        IERC20(_yam).safeApprove(_unirouter, uint(-1));\r\n        IERC20(_ycrv).safeApprove(_unirouter, uint(-1));\r\n    }\r\n    \r\n    function balanceStaked() public view returns (uint256 balance) {\r\n        balance = StakingPool(_stakingpool).balanceOf(address(this));\r\n    }\r\n    \r\n    function balanceOfToken(address token) public view returns (uint256 balance) {\r\n        balance = IERC20(token).balanceOf(address(this));\r\n    }\r\n    \r\n    function deposit(uint256 amount) external isOwner() {\r\n        require(IERC20(_univ2).balanceOf(msg.sender) > 0, \"not enough token to deposit\");\r\n        \r\n        IERC20(_univ2).safeTransferFrom(msg.sender, address(this), amount);\r\n        StakingPool(_stakingpool).stake(amount);\r\n    }\r\n    \r\n    function exit() external isOwner() {\r\n        require(balanceStaked() > 0, \"not enough token to withdraw\");\r\n        \r\n        StakingPool(_stakingpool).exit();\r\n        \r\n        UniswapRouter(_unirouter).removeLiquidity(\r\n            _yam,\r\n            _ycrv,\r\n            IERC20(_univ2).balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp.add(1800)\r\n            );\r\n        \r\n        IERC20(_yam).transfer(msg.sender,IERC20(_yam).balanceOf(address(this)));\r\n        IERC20(_ycrv).transfer(msg.sender,IERC20(_ycrv).balanceOf(address(this)));\r\n    }\r\n    \r\n    function reinvest() external isOwner() {\r\n        StakingPool(_stakingpool).getReward();\r\n        \r\n        address[] memory path2 = new address[](2);\r\n        path2[0] = address(_yam);\r\n        path2[1] = address(_ycrv);\r\n        \r\n        UniswapRouter(_unirouter).swapExactTokensForTokens(\r\n            IERC20(_yam).balanceOf(address(this)).div(2),\r\n            0,\r\n            path2,\r\n            address(this),\r\n            block.timestamp.add(1800)\r\n\t\t);\r\n\t\t\r\n        UniswapRouter(_unirouter).addLiquidity(\r\n            _yam,\r\n            _ycrv,\r\n            IERC20(_yam).balanceOf(address(this)),\r\n            IERC20(_ycrv).balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp.add(1800)\r\n\t\t);\r\n\t\t\r\n\t\tStakingPool(_stakingpool).stake(IERC20(_univ2).balanceOf(address(this)));\r\n    }\r\n    \r\n    \r\n    //EMERGENCY FUNCTIONS\r\n    function individualApproval(address token, address contractSpender) public isOwner() {\r\n        IERC20(token).safeApprove(contractSpender, uint(-1));    \r\n    }\r\n    \r\n    function withdraw(address token) external isOwner() {\r\n        require(IERC20(token).balanceOf(address(this)) > 0, \"no balance of token\");\r\n        \r\n        IERC20(token).transfer(msg.sender,IERC20(token).balanceOf(address(this)));\r\n    }\r\n    \r\n    function exitWithoutRemoveLiquidity() external isOwner() {\r\n        StakingPool(_stakingpool).exit();\r\n        \r\n        IERC20(_univ2).transfer(msg.sender,IERC20(_univ2).balanceOf(address(this)));\r\n        IERC20(_yam).transfer(msg.sender,IERC20(_yam).balanceOf(address(this)));\r\n    }\r\n\t\r\n    function exitPool() external isOwner() {\r\n        StakingPool(_stakingpool).exit();\r\n    }\r\n    //EMERGENCY FUNCTIONS\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitWithoutRemoveLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractSpender\",\"type\":\"address\"}],\"name\":\"individualApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YamAutomation","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f96a1e2a11c943f9f295c6c563b0499b4e40ac6f9906d145d2474a6e29cf57ec"}]}