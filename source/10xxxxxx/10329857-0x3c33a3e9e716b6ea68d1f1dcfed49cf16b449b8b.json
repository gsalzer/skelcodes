{"status":"1","message":"OK","result":[{"SourceCode":"/**************************************************************************\r\n *            ____        _                              \r\n *           / ___|      | |     __ _  _   _   ___  _ __ \r\n *          | |    _____ | |    / _` || | | | / _ \\| '__|\r\n *          | |___|_____|| |___| (_| || |_| ||  __/| |   \r\n *           \\____|      |_____|\\__,_| \\__, | \\___||_|   \r\n *                                     |___/             \r\n * \r\n **************************************************************************\r\n *\r\n *  The MIT License (MIT)\r\n *\r\n * Copyright (c) 2016-2020 Cyril Lapinte / C-Layer\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n **************************************************************************\r\n *\r\n * Flatten Contract: CoreConfiguration\r\n *\r\n * Git Commit:\r\n * https://github.com/c-layer/contracts/commit/0adcf9f214ae3f7b709cc41ec5dcb68e79d68772\r\n *\r\n * SPDX-License-Identifier: MIT\r\n **************************************************************************/\r\n\r\n// File: @c-layer/common/contracts/interface/IAccessDefinitions.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IAccessDefinitions\r\n * @dev IAccessDefinitions\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\ncontract IAccessDefinitions {\r\n\r\n  // Hardcoded role granting all - non sysop - privileges\r\n  bytes32 internal constant ALL_PRIVILEGES = bytes32(\"AllPrivileges\");\r\n  address internal constant ALL_PROXIES = address(0x416c6C50726F78696573); // \"AllProxies\"\r\n\r\n  // Roles\r\n  bytes32 internal constant FACTORY_CORE_ROLE = bytes32(\"FactoryCoreRole\");\r\n  bytes32 internal constant FACTORY_PROXY_ROLE = bytes32(\"FactoryProxyRole\");\r\n\r\n  // Sys Privileges\r\n  bytes4 internal constant DEFINE_ROLE_PRIV =\r\n    bytes4(keccak256(\"defineRole(bytes32,bytes4[])\"));\r\n  bytes4 internal constant ASSIGN_OPERATORS_PRIV =\r\n    bytes4(keccak256(\"assignOperators(bytes32,address[])\"));\r\n  bytes4 internal constant REVOKE_OPERATORS_PRIV =\r\n    bytes4(keccak256(\"revokeOperators(address[])\"));\r\n  bytes4 internal constant ASSIGN_PROXY_OPERATORS_PRIV =\r\n    bytes4(keccak256(\"assignProxyOperators(address,bytes32,address[])\"));\r\n}\r\n\r\n// File: @c-layer/common/contracts/interface/IOperableStorage.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title IOperableStorage\r\n * @dev The Operable storage\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\nabstract contract IOperableStorage is IAccessDefinitions {\r\n\r\n  struct RoleData {\r\n    mapping(bytes4 => bool) privileges;\r\n  }\r\n\r\n  struct OperatorData {\r\n    bytes32 coreRole;\r\n    mapping(address => bytes32) proxyRoles;\r\n  }\r\n\r\n  function coreRole(address _address) virtual public view returns (bytes32);\r\n  function proxyRole(address _proxy, address _address) virtual public view returns (bytes32);\r\n  function rolePrivilege(bytes32 _role, bytes4 _privilege) virtual public view returns (bool);\r\n  function roleHasPrivilege(bytes32 _role, bytes4 _privilege) virtual public view returns (bool);\r\n  function hasCorePrivilege(address _address, bytes4 _privilege) virtual public view returns (bool);\r\n  function hasProxyPrivilege(address _address, address _proxy, bytes4 _privilege) virtual public view returns (bool);\r\n\r\n  event RoleDefined(bytes32 role);\r\n  event OperatorAssigned(bytes32 role, address operator);\r\n  event ProxyOperatorAssigned(address proxy, bytes32 role, address operator);\r\n  event OperatorRevoked(address operator);\r\n}\r\n\r\n// File: @c-layer/common/contracts/interface/IOperableCore.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title IOperableCore\r\n * @dev The Operable contract enable the restrictions of operations to a set of operators\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n */\r\nabstract contract IOperableCore is IOperableStorage {\r\n  function defineRole(bytes32 _role, bytes4[] memory _privileges) virtual public returns (bool);\r\n  function assignOperators(bytes32 _role, address[] memory _operators) virtual public returns (bool);\r\n  function assignProxyOperators(\r\n    address _proxy, bytes32 _role, address[] memory _operators) virtual public returns (bool);\r\n  function revokeOperators(address[] memory _operators) virtual public returns (bool);\r\n}\r\n\r\n// File: @c-layer/common/contracts/interface/IProxy.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title IProxy\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n **/\r\ninterface IProxy {\r\n\r\n  function core() external view returns (address);\r\n\r\n}\r\n\r\n// File: @c-layer/common/contracts/core/Proxy.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title Proxy\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   PR01: Only accessible by core\r\n *   PR02: Core request should be successful\r\n **/\r\ncontract Proxy is IProxy {\r\n\r\n  address public override core;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than a core\r\n   */\r\n  modifier onlyCore {\r\n    require(core == msg.sender, \"PR01\");\r\n    _;\r\n  }\r\n\r\n  constructor(address _core) public {\r\n    core = _core;\r\n  }\r\n\r\n  /**\r\n   * @dev update the core\r\n   */\r\n  function updateCore(address _core)\r\n    public onlyCore returns (bool)\r\n  {\r\n    core = _core;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev enforce static immutability (view)\r\n   * @dev in order to read core value through internal core delegateCall\r\n   */\r\n  function staticCallUint256() internal view returns (uint256 result) {\r\n    (bool status, bytes memory value) = core.staticcall(msg.data);\r\n    require(status, \"PR02\");\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      result := mload(add(value, 0x20))\r\n    }\r\n  }\r\n}\r\n\r\n// File: @c-layer/common/contracts/operable/OperableAsCore.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title OperableAsCore\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   OA01: Missing the core privilege\r\n *   OA02: Missing the proxy privilege\r\n **/\r\ncontract OperableAsCore {\r\n\r\n  modifier onlyCoreOperator(IOperableCore _core) {\r\n    require(_core.hasCorePrivilege(\r\n      msg.sender, msg.sig), \"OA01\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyProxyOperator(Proxy _proxy) {\r\n    IOperableCore core = IOperableCore(_proxy.core());\r\n    require(core.hasProxyPrivilege(\r\n      msg.sender, address(_proxy), msg.sig), \"OA02\");\r\n    _;\r\n  }\r\n}\r\n\r\n// File: @c-layer/oracle/contracts/interface/IUserRegistry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IUserRegistry\r\n * @dev IUserRegistry interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\nabstract contract IUserRegistry {\r\n\r\n  enum KeyCode {\r\n    KYC_LIMIT_KEY,\r\n    RECEPTION_LIMIT_KEY,\r\n    EMISSION_LIMIT_KEY\r\n  }\r\n\r\n  event UserRegistered(uint256 indexed userId, address address_, uint256 validUntilTime);\r\n  event AddressAttached(uint256 indexed userId, address address_);\r\n  event AddressDetached(uint256 indexed userId, address address_);\r\n  event UserSuspended(uint256 indexed userId);\r\n  event UserRestored(uint256 indexed userId);\r\n  event UserValidity(uint256 indexed userId, uint256 validUntilTime);\r\n  event UserExtendedKey(uint256 indexed userId, uint256 key, uint256 value);\r\n  event UserExtendedKeys(uint256 indexed userId, uint256[] values);\r\n  event ExtendedKeysDefinition(uint256[] keys);\r\n\r\n  function registerManyUsersExternal(address[] calldata _addresses, uint256 _validUntilTime)\r\n    virtual external returns (bool);\r\n  function registerManyUsersFullExternal(\r\n    address[] calldata _addresses,\r\n    uint256 _validUntilTime,\r\n    uint256[] calldata _values) virtual external returns (bool);\r\n  function attachManyAddressesExternal(uint256[] calldata _userIds, address[] calldata _addresses)\r\n    virtual external returns (bool);\r\n  function detachManyAddressesExternal(address[] calldata _addresses)\r\n    virtual external returns (bool);\r\n  function suspendManyUsersExternal(uint256[] calldata _userIds) virtual external returns (bool);\r\n  function restoreManyUsersExternal(uint256[] calldata _userIds) virtual external returns (bool);\r\n  function updateManyUsersExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended) virtual external returns (bool);\r\n  function updateManyUsersExtendedExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _key, uint256 _value) virtual external returns (bool);\r\n  function updateManyUsersAllExtendedExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256[] calldata _values) virtual external returns (bool);\r\n  function updateManyUsersFullExternal(\r\n    uint256[] calldata _userIds,\r\n    uint256 _validUntilTime,\r\n    bool _suspended,\r\n    uint256[] calldata _values) virtual external returns (bool);\r\n\r\n  function name() virtual public view returns (string memory);\r\n  function currency() virtual public view returns (bytes32);\r\n\r\n  function userCount() virtual public view returns (uint256);\r\n  function userId(address _address) virtual public view returns (uint256);\r\n  function validUserId(address _address) virtual public view returns (uint256);\r\n  function validUser(address _address, uint256[] memory _keys)\r\n    virtual public view returns (uint256, uint256[] memory);\r\n  function validity(uint256 _userId) virtual public view returns (uint256, bool);\r\n\r\n  function extendedKeys() virtual public view returns (uint256[] memory);\r\n  function extended(uint256 _userId, uint256 _key)\r\n    virtual public view returns (uint256);\r\n  function manyExtended(uint256 _userId, uint256[] memory _key)\r\n    virtual public view returns (uint256[] memory);\r\n\r\n  function isAddressValid(address _address) virtual public view returns (bool);\r\n  function isValid(uint256 _userId) virtual public view returns (bool);\r\n\r\n  function defineExtendedKeys(uint256[] memory _extendedKeys) virtual public returns (bool);\r\n\r\n  function registerUser(address _address, uint256 _validUntilTime)\r\n    virtual public returns (bool);\r\n  function registerUserFull(\r\n    address _address,\r\n    uint256 _validUntilTime,\r\n    uint256[] memory _values) virtual public returns (bool);\r\n\r\n  function attachAddress(uint256 _userId, address _address) virtual public returns (bool);\r\n  function detachAddress(address _address) virtual public returns (bool);\r\n  function detachSelf() virtual public returns (bool);\r\n  function detachSelfAddress(address _address) virtual public returns (bool);\r\n  function suspendUser(uint256 _userId) virtual public returns (bool);\r\n  function restoreUser(uint256 _userId) virtual public returns (bool);\r\n  function updateUser(uint256 _userId, uint256 _validUntilTime, bool _suspended)\r\n    virtual public returns (bool);\r\n  function updateUserExtended(uint256 _userId, uint256 _key, uint256 _value)\r\n    virtual public returns (bool);\r\n  function updateUserAllExtended(uint256 _userId, uint256[] memory _values)\r\n    virtual public returns (bool);\r\n  function updateUserFull(\r\n    uint256 _userId,\r\n    uint256 _validUntilTime,\r\n    bool _suspended,\r\n    uint256[] memory _values) virtual public returns (bool);\r\n}\r\n\r\n// File: @c-layer/oracle/contracts/interface/IRatesProvider.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IRatesProvider\r\n * @dev IRatesProvider interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\nabstract contract IRatesProvider {\r\n\r\n  function defineRatesExternal(uint256[] calldata _rates) virtual external returns (bool);\r\n\r\n  function name() virtual public view returns (string memory);\r\n\r\n  function rate(bytes32 _currency) virtual public view returns (uint256);\r\n\r\n  function currencies() virtual public view\r\n    returns (bytes32[] memory, uint256[] memory, uint256);\r\n  function rates() virtual public view returns (uint256, uint256[] memory);\r\n\r\n  function convert(uint256 _amount, bytes32 _fromCurrency, bytes32 _toCurrency)\r\n    virtual public view returns (uint256);\r\n\r\n  function defineCurrencies(\r\n    bytes32[] memory _currencies,\r\n    uint256[] memory _decimals,\r\n    uint256 _rateOffset) virtual public returns (bool);\r\n  function defineRates(uint256[] memory _rates) virtual public returns (bool);\r\n\r\n  event RateOffset(uint256 rateOffset);\r\n  event Currencies(bytes32[] currencies, uint256[] decimals);\r\n  event Rate(bytes32 indexed currency, uint256 rate);\r\n}\r\n\r\n// File: contracts/interface/ITokenAccessDefinitions.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @title ITokenAccessDefinitions\r\n * @dev ITokenAccessDefinitions\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\nabstract contract ITokenAccessDefinitions is IAccessDefinitions {\r\n\r\n  // Roles\r\n  bytes32 internal constant COMPLIANCE_CORE_ROLE = bytes32(\"ComplianceCoreRole\");\r\n  bytes32 internal constant COMPLIANCE_PROXY_ROLE = bytes32(\"ComplianceProxyRole\");\r\n  bytes32 internal constant ISSUER_PROXY_ROLE = bytes32(\"IssuerProxyRole\");\r\n\r\n  // Core Privileges\r\n  bytes4 internal constant DEFINE_CORE_CONFIGURATION_PRIV =\r\n    bytes4(keccak256(\"defineCoreConfigurations(address,address,address[],address,address,address,address,address)\"));\r\n  bytes4 internal constant DEFINE_AUDIT_CONFIGURATION_PRIV =\r\n    bytes4(keccak256(\"defineAuditConfiguration(uint256,uint256,uint8,uint256[],uint256[],address,address)\"));\r\n  bytes4 internal constant DEFINE_TOKEN_DELEGATE_PRIV =\r\n    bytes4(keccak256(\"defineTokenDelegate(uint256,address,uint256[])\"));\r\n  bytes4 internal constant DEFINE_ORACLE_PRIV =\r\n    bytes4(keccak256(\"defineOracle(address,address,address)\"));\r\n  bytes4 internal constant DEFINE_TOKEN_PRIV =\r\n    bytes4(keccak256(\"defineToken(address,uint256,string,string,uint256)\"));\r\n\r\n  // Proxy Privileges\r\n  bytes4 internal constant MINT_PRIV =\r\n    bytes4(keccak256(\"mint(address,address[],uint256[])\"));\r\n  bytes4 internal constant BURN_PRIV =\r\n    bytes4(keccak256(\"burn(address,uint256)\"));\r\n  bytes4 internal constant FINISH_MINTING_PRIV =\r\n    bytes4(keccak256(\"finishMinting(address)\"));\r\n  bytes4 internal constant SEIZE_PRIV =\r\n    bytes4(keccak256(\"seize(address,address,uint256)\"));\r\n  bytes4 internal constant DEFINE_LOCK_PRIV =\r\n    bytes4(keccak256(\"defineLock(address,uint256,uint256,address[])\"));\r\n  bytes4 internal constant FREEZE_MANY_ADDRESSES_PRIV =\r\n    bytes4(keccak256(\"freezeManyAddresses(address,address[],uint256)\"));\r\n  bytes4 internal constant DEFINE_RULES_PRIV =\r\n    bytes4(keccak256(\"defineRules(address,address[])\"));\r\n\r\n  // Factory prilieges\r\n  bytes4 internal constant CONFIGURE_TOKENSALES_PRIV =\r\n    bytes4(keccak256(\"configureTokensales(address,address[],uint256[])\"));\r\n  bytes4 internal constant UPDATE_ALLOWANCE_PRIV =\r\n    bytes4(keccak256(\"updateAllowances(address,address[],uint256[])\"));\r\n}\r\n\r\n// File: contracts/interface/IRule.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title IRule\r\n * @dev IRule interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n **/\r\ninterface IRule {\r\n  function isAddressValid(address _address) external view returns (bool);\r\n  function isTransferValid(address _from, address _to, uint256 _amount)\r\n    external view returns (bool);\r\n}\r\n\r\n// File: contracts/interface/ITokenStorage.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ITokenStorage\r\n * @dev Token storage interface\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\nabstract contract ITokenStorage {\r\n  enum TransferCode {\r\n    UNKNOWN,\r\n    OK,\r\n    INVALID_SENDER,\r\n    NO_RECIPIENT,\r\n    INSUFFICIENT_TOKENS,\r\n    LOCKED,\r\n    FROZEN,\r\n    RULE,\r\n    INVALID_RATE,\r\n    NON_REGISTRED_SENDER,\r\n    NON_REGISTRED_RECEIVER,\r\n    LIMITED_EMISSION,\r\n    LIMITED_RECEPTION\r\n  }\r\n\r\n  enum Scope {\r\n    DEFAULT\r\n  }\r\n\r\n  enum AuditStorageMode {\r\n    ADDRESS,\r\n    USER_ID,\r\n    SHARED\r\n  }\r\n\r\n  enum AuditMode {\r\n    NEVER,\r\n    ALWAYS,\r\n    ALWAYS_TRIGGERS_EXCLUDED,\r\n    WHEN_TRIGGERS_MATCHED\r\n  }\r\n\r\n  event OracleDefined(\r\n    IUserRegistry userRegistry,\r\n    IRatesProvider ratesProvider,\r\n    address currency);\r\n  event TokenDelegateDefined(uint256 indexed delegateId, address delegate, uint256[] configurations);\r\n  event TokenDelegateRemoved(uint256 indexed delegateId);\r\n  event AuditConfigurationDefined(\r\n    uint256 indexed configurationId,\r\n    uint256 scopeId,\r\n    AuditMode mode,\r\n    uint256[] senderKeys,\r\n    uint256[] receiverKeys,\r\n    IRatesProvider ratesProvider,\r\n    address currency);\r\n  event AuditTriggersDefined(uint256 indexed configurationId, address[] triggers, bool[] tokens, bool[] senders, bool[] receivers);\r\n  event AuditsRemoved(address scope, uint256 scopeId);\r\n  event SelfManaged(address indexed holder, bool active);\r\n\r\n  event Minted(address indexed token, uint256 amount);\r\n  event MintFinished(address indexed token);\r\n  event Burned(address indexed token, uint256 amount);\r\n  event RulesDefined(address indexed token, IRule[] rules);\r\n  event LockDefined(\r\n    address indexed token,\r\n    uint256 startAt,\r\n    uint256 endAt,\r\n    address[] exceptions\r\n  );\r\n  event Seize(address indexed token, address account, uint256 amount);\r\n  event Freeze(address address_, uint256 until);\r\n  event ClaimDefined(\r\n    address indexed token,\r\n    address indexed claim,\r\n    uint256 claimAt);\r\n  event TokenDefined(\r\n    address indexed token,\r\n    uint256 delegateId,\r\n    string name,\r\n    string symbol,\r\n    uint256 decimals);\r\n  event TokenMigrated(address indexed token, address newCore);\r\n  event TokenRemoved(address indexed token);\r\n  event LogTransferData(\r\n    address token, address caller, address sender, address receiver,\r\n    uint256 senderId, uint256[] senderKeys, bool senderFetched,\r\n    uint256 receiverId, uint256[] receiverKeys, bool receiverFetched,\r\n    uint256 value, uint256 convertedValue);\r\n  event LogTransferAuditData(\r\n    uint256 auditConfigurationId, uint256 scopeId,\r\n    address currency, IRatesProvider ratesProvider,\r\n    bool senderAuditRequired, bool receiverAuditRequired);\r\n  event LogAuditData(\r\n    uint64 createdAt, uint64 lastTransactionAt,\r\n    uint256 cumulatedEmission, uint256 cumulatedReception\r\n  );\r\n}\r\n\r\n// File: contracts/interface/ITokenCore.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ITokenCore\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n **/\r\nabstract contract ITokenCore is ITokenStorage, IOperableCore {\r\n\r\n  function name() virtual public view returns (string memory);\r\n  function oracle() virtual public view returns (\r\n    IUserRegistry userRegistry,\r\n    IRatesProvider ratesProvider,\r\n    address currency);\r\n\r\n  function auditConfiguration(uint256 _configurationId)\r\n    virtual public view returns (\r\n      uint256 scopeId,\r\n      AuditMode mode,\r\n      uint256[] memory senderKeys,\r\n      uint256[] memory receiverKeys,\r\n      IRatesProvider ratesProvider,\r\n      address currency);\r\n  function auditTriggers(\r\n    uint256 _configurationId,\r\n    address[] memory _triggers) virtual public view returns (\r\n    bool[] memory senders,\r\n    bool[] memory receivers,\r\n    bool[] memory tokens);\r\n  function delegatesConfigurations(uint256 _delegateId)\r\n    virtual public view returns (uint256[] memory);\r\n\r\n  function auditCurrency(\r\n    address _scope,\r\n    uint256 _scopeId\r\n  ) virtual external view returns (address currency);\r\n  function audit(\r\n    address _scope,\r\n    uint256 _scopeId,\r\n    AuditStorageMode _storageMode,\r\n    bytes32 _storageId) virtual external view returns (\r\n    uint64 createdAt,\r\n    uint64 lastTransactionAt,\r\n    uint256 cumulatedEmission,\r\n    uint256 cumulatedReception);\r\n\r\n  /**************  ERC20  **************/\r\n  function tokenName() virtual external view returns (string memory);\r\n  function tokenSymbol() virtual external view returns (string memory);\r\n\r\n  function decimals() virtual external returns (uint256);\r\n  function totalSupply() virtual external returns (uint256);\r\n  function balanceOf(address) virtual external returns (uint256);\r\n  function allowance(address, address) virtual external returns (uint256);\r\n  function transfer(address, address, uint256)\r\n    virtual external returns (bool status);\r\n  function transferFrom(address, address, address, uint256)\r\n    virtual external returns (bool status);\r\n  function approve(address, address, uint256)\r\n    virtual external returns (bool status);\r\n  function increaseApproval(address, address, uint256)\r\n    virtual external returns (bool status);\r\n  function decreaseApproval(address, address, uint256)\r\n    virtual external returns (bool status);\r\n\r\n  /***********  TOKEN DATA   ***********/\r\n  function token(address _token) external view virtual returns (\r\n    bool mintingFinished,\r\n    uint256 allTimeMinted,\r\n    uint256 allTimeBurned,\r\n    uint256 allTimeSeized,\r\n    uint256[2] memory lock,\r\n    address[] memory lockExceptions,\r\n    uint256 freezedUntil,\r\n    IRule[] memory);\r\n  function canTransfer(address, address, uint256)\r\n    virtual external returns (uint256);\r\n\r\n  /***********  TOKEN ADMIN  ***********/\r\n  function mint(address, address[] calldata, uint256[] calldata)\r\n    virtual external returns (bool);\r\n  function finishMinting(address)\r\n    virtual external returns (bool);\r\n  function burn(address, uint256)\r\n    virtual external returns (bool);\r\n  function seize(address _token, address, uint256)\r\n    virtual external returns (bool);\r\n  function freezeManyAddresses(\r\n    address _token,\r\n    address[] calldata _addresses,\r\n    uint256 _until) virtual external returns (bool);\r\n  function defineLock(address, uint256, uint256, address[] calldata)\r\n    virtual external returns (bool);\r\n  function defineRules(address, IRule[] calldata) virtual external returns (bool);\r\n\r\n  /************  CORE ADMIN  ************/\r\n  function defineToken(\r\n    address _token,\r\n    uint256 _delegateId,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals) virtual external returns (bool);\r\n  function migrateToken(address _token, address _newCore)\r\n    virtual external returns (bool);\r\n  function removeToken(address _token) virtual external returns (bool);\r\n\r\n  function defineOracle(\r\n    IUserRegistry _userRegistry,\r\n    IRatesProvider _ratesProvider,\r\n    address _currency) virtual external returns (bool);\r\n  function defineTokenDelegate(\r\n    uint256 _delegateId,\r\n    address _delegate,\r\n    uint256[] calldata _configurations) virtual external returns (bool);\r\n  function defineAuditConfiguration(\r\n    uint256 _configurationId,\r\n    uint256 _scopeId,\r\n    AuditMode _mode,\r\n    uint256[] calldata _senderKeys,\r\n    uint256[] calldata _receiverKeys,\r\n    IRatesProvider _ratesProvider,\r\n    address _currency) virtual external returns (bool);\r\n  function removeAudits(address _scope, uint256 _scopeId)\r\n    virtual external returns (bool);\r\n  function defineAuditTriggers(\r\n    uint256 _configurationId,\r\n    address[] calldata _triggerAddresses,\r\n    bool[] calldata _triggerSenders,\r\n    bool[] calldata _triggerReceivers,\r\n    bool[] calldata _triggerTokens) virtual external returns (bool);\r\n\r\n  function isSelfManaged(address _owner)\r\n    virtual external view returns (bool);\r\n  function manageSelf(bool _active)\r\n    virtual external returns (bool);\r\n}\r\n\r\n// File: contracts/interface/ICoreConfiguration.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ICoreConfiguration\r\n * @dev ICoreConfiguration\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n */\r\nabstract contract ICoreConfiguration is ITokenAccessDefinitions {\r\n\r\n  enum Configuration {\r\n    DEFAULT,\r\n    AML_PRIMARY,\r\n    AML_FULL\r\n  }\r\n\r\n  enum Delegate {\r\n    UNDEFINED,\r\n    UTILITY,\r\n    PAYMENT,\r\n    SECURITY,\r\n    EQUITY,\r\n    BOND,\r\n    FUND,\r\n    DERIVATIVE\r\n  }\r\n\r\n  // The definition below should be considered as a constant\r\n  // Solidity 0.6.x do not provide ways to have arrays as constants\r\n  bytes4[] public requiredCorePrivileges = [\r\n    DEFINE_CORE_CONFIGURATION_PRIV,\r\n    DEFINE_AUDIT_CONFIGURATION_PRIV,\r\n    DEFINE_TOKEN_DELEGATE_PRIV,\r\n    DEFINE_ROLE_PRIV,\r\n    ASSIGN_OPERATORS_PRIV,\r\n    REVOKE_OPERATORS_PRIV,\r\n    ASSIGN_PROXY_OPERATORS_PRIV,\r\n    DEFINE_ORACLE_PRIV\r\n  ];\r\n\r\n  function hasCoreAccess(IOperableCore _core) virtual public view returns (bool);\r\n  function defineCoreConfigurations(\r\n    ITokenCore _core,\r\n    address[] calldata _factories,\r\n    address _mintableDelegate,\r\n    address _compliantDelegate,\r\n    IUserRegistry _userRegistry,\r\n    IRatesProvider _ratesProvider,\r\n    address _currency\r\n  ) virtual external returns (bool);\r\n}\r\n\r\n// File: contracts/CoreConfiguration.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title CoreConfiguration\r\n * @dev CoreConfiguration\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   CC01: Some required privileges from the core are missing\r\n *   CC02: Primary market audit configuration setup failed\r\n *   CC03: Secondary market audit configuration setup failed\r\n *   CC04: Utility token delegate setup failed\r\n *   CC05: Payment token delegate setup failed\r\n *   CC06: Security token delegate setup failed\r\n *   CC07: Equity token delegate setup failed\r\n *   CC08: Bond token delegate setup failed\r\n *   CC09: Fund token delegate setup failed\r\n *   CC10: Derivative token delegate setup failed\r\n *   CC11: Factory core role definition failed\r\n *   CC12: Factory core role assignment failed\r\n *   CC13: Factory proxy role definition failed\r\n *   CC14: Factory proxy role assignment failed\r\n *   CC15: Compliance core role definition failed\r\n *   CC16: Compliance proxy role definition failed\r\n *   CC17: Issuer proxy role definition failed\r\n *   CC18: Oracle definition failed\r\n *   CC19: Revoking core configuration access failed\r\n *   CC20: Revoking access from the core configuration was successful\r\n */\r\ncontract CoreConfiguration is ICoreConfiguration, OperableAsCore {\r\n\r\n  uint256[] private noAMLConfig = new uint256[](0);\r\n  uint256[] private primaryMarketAMLConfig = [ uint256(Configuration.AML_PRIMARY) ];\r\n  uint256[] private secondaryMarketAMLConfig = [ uint256(Configuration.AML_FULL) ];\r\n\r\n  uint256[] private emptyArray = new uint256[](0);\r\n  uint256[] private senderKeys = [ uint256(IUserRegistry.KeyCode.EMISSION_LIMIT_KEY) ];\r\n  uint256[] private receiverKeys = [ uint256(IUserRegistry.KeyCode.RECEPTION_LIMIT_KEY) ];\r\n\r\n  /**\r\n   * @dev has core access\r\n   */\r\n  function hasCoreAccess(IOperableCore _core) override public view returns (bool access) {\r\n    access = true;\r\n    for (uint256 i=0; i<requiredCorePrivileges.length; i++) {\r\n      access = access && _core.hasCorePrivilege(\r\n        address(this), requiredCorePrivileges[i]);\r\n    }\r\n  }\r\n\r\n   /**\r\n   * @dev defineCoreConfigurations\r\n   */\r\n  function defineCoreConfigurations(\r\n    ITokenCore _core,\r\n    address[] calldata _factories,\r\n    address _mintableDelegate,\r\n    address _compliantDelegate,\r\n    IUserRegistry _userRegistry,\r\n    IRatesProvider _ratesProvider,\r\n    address _currency\r\n  ) override external onlyCoreOperator(_core) returns (bool)\r\n  {\r\n    require(hasCoreAccess(_core), \"CC01\");\r\n\r\n    // Primary Market AML Configuration\r\n    require(_core.defineAuditConfiguration(\r\n      uint256(Configuration.AML_PRIMARY),\r\n      uint256(ITokenStorage.Scope.DEFAULT),\r\n      ITokenStorage.AuditMode.WHEN_TRIGGERS_MATCHED,\r\n      emptyArray, receiverKeys, _ratesProvider, _currency\r\n    ), \"CC02\");\r\n\r\n    // Secondary Market AML Configuration\r\n    require(_core.defineAuditConfiguration(\r\n      uint256(Configuration.AML_FULL),\r\n      uint256(ITokenStorage.Scope.DEFAULT),\r\n      ITokenStorage.AuditMode.ALWAYS_TRIGGERS_EXCLUDED,\r\n      senderKeys, receiverKeys, _ratesProvider, _currency\r\n    ), \"CC03\");\r\n\r\n    require(_core.defineTokenDelegate(\r\n      uint256(Delegate.UTILITY), _mintableDelegate, noAMLConfig), \"CC04\");\r\n    require(_core.defineTokenDelegate(\r\n      uint256(Delegate.PAYMENT), _mintableDelegate, noAMLConfig), \"CC05\");\r\n    require(_core.defineTokenDelegate(\r\n      uint256(Delegate.SECURITY), _compliantDelegate, primaryMarketAMLConfig), \"CC06\");\r\n    require(_core.defineTokenDelegate(\r\n      uint256(Delegate.EQUITY), _compliantDelegate, secondaryMarketAMLConfig), \"CC07\");\r\n    require(_core.defineTokenDelegate(\r\n      uint256(Delegate.BOND), _compliantDelegate, secondaryMarketAMLConfig), \"CC08\");\r\n    require(_core.defineTokenDelegate(\r\n      uint256(Delegate.FUND), _compliantDelegate, secondaryMarketAMLConfig), \"CC09\");\r\n    require(_core.defineTokenDelegate(\r\n      uint256(Delegate.DERIVATIVE), _compliantDelegate, secondaryMarketAMLConfig), \"CC10\");\r\n\r\n    // Setup basic roles\r\n    bytes4[] memory privileges = new bytes4[](2);\r\n    privileges[0] = ASSIGN_PROXY_OPERATORS_PRIV;\r\n    privileges[1] = DEFINE_TOKEN_PRIV;\r\n    require(_core.defineRole(FACTORY_CORE_ROLE, privileges), \"CC11\");\r\n    require(_core.assignOperators(FACTORY_CORE_ROLE, _factories), \"CC12\");\r\n\r\n    privileges = new bytes4[](4);\r\n    privileges[0] = MINT_PRIV;\r\n    privileges[1] = FINISH_MINTING_PRIV;\r\n    privileges[2] = DEFINE_RULES_PRIV;\r\n    privileges[3] = DEFINE_LOCK_PRIV;\r\n    require(_core.defineRole(FACTORY_PROXY_ROLE, privileges), \"CC13\");\r\n    require(_core.assignProxyOperators(ALL_PROXIES, FACTORY_PROXY_ROLE, _factories), \"CC14\");\r\n\r\n    privileges = new bytes4[](1);\r\n    privileges[0] = DEFINE_TOKEN_PRIV;\r\n    require(_core.defineRole(COMPLIANCE_CORE_ROLE, privileges), \"CC15\");\r\n\r\n    privileges = new bytes4[](4);\r\n    privileges[0] = DEFINE_RULES_PRIV;\r\n    privileges[1] = SEIZE_PRIV;\r\n    privileges[2] = FREEZE_MANY_ADDRESSES_PRIV;\r\n    privileges[3] = DEFINE_LOCK_PRIV;\r\n    require(_core.defineRole(COMPLIANCE_PROXY_ROLE, privileges), \"CC16\");\r\n\r\n    privileges = new bytes4[](6);\r\n    privileges[0] = MINT_PRIV;\r\n    privileges[1] = BURN_PRIV;\r\n    privileges[2] = FINISH_MINTING_PRIV;\r\n    privileges[3] = DEFINE_LOCK_PRIV;\r\n    privileges[4] = CONFIGURE_TOKENSALES_PRIV;\r\n    privileges[5] = UPDATE_ALLOWANCE_PRIV;\r\n    require(_core.defineRole(ISSUER_PROXY_ROLE, privileges), \"CC17\");\r\n\r\n    // Assign Oracle\r\n    require(_core.defineOracle(_userRegistry, _ratesProvider, _currency), \"CC18\");\r\n\r\n    address[] memory configOperators = new address[](1);\r\n    configOperators[0] = address(this);\r\n    require(_core.revokeOperators(configOperators), \"CC19\");\r\n    require(!hasCoreAccess(_core), \"CC20\");\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITokenCore\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_mintableDelegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compliantDelegate\",\"type\":\"address\"},{\"internalType\":\"contract IUserRegistry\",\"name\":\"_userRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IRatesProvider\",\"name\":\"_ratesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"defineCoreConfigurations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOperableCore\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"hasCoreAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredCorePrivileges\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CoreConfiguration","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://20390fb37e26cc4ebb91d4f2d82036b06c2db58bd913f0e1d156bd3adfa80de3"}]}