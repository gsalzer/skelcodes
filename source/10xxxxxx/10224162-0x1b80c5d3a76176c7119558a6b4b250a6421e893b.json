{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n\r\n// Adding only the ERC-20 function we need\r\ninterface DaiToken {\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n    function approve(address user, uint wad) external returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) external returns(bool);\r\n    function balanceOf(address guy) external view returns (uint);\r\n}\r\n\r\n\r\ncontract PiggericksShop {\r\n\r\n    // Define variables\r\n    DaiToken private daitoken;\r\n    address private owner; // owner of the contract\r\n    address payable private aragon;\r\n    bool private isActive;\r\n\r\n    // Define events\r\n    // from, amt, unit, code, pkg\r\n    event PurchaseMade(address from, uint amt, bytes32 unit, bytes32 code, bytes32 pkg);\r\n    event LogTransfer(address sender, address to, uint amount);\r\n\r\n    // sets msg.sender as owner\r\n    constructor(bool state, address payable a, address o) public {\r\n        owner = o;\r\n        aragon = a;\r\n        isActive = state;\r\n        daitoken = DaiToken(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    }\r\n\r\n    // checks if msg.sender is owner of the contract\r\n    modifier isAdmin {\r\n        require(msg.sender == owner, \"Only the contract owner can perform this operation\");\r\n        _;\r\n    }\r\n\r\n    // checks if this contract is open for transactions\r\n    modifier isOpen {\r\n        require(isActive, \"This contract is closed\");\r\n        _;\r\n    }\r\n\r\n    function toggleContract(bool state) external isAdmin returns (bool) {\r\n        isActive = state;\r\n        return isActive;\r\n    }\r\n\r\n    function updateAragon(address payable a) external isAdmin returns (address) {\r\n        aragon = a;\r\n        return aragon;\r\n    }\r\n\r\n    function updateOwner(address o) external isAdmin returns (address) {\r\n        owner = o;\r\n        return owner;\r\n    }\r\n\r\n    function moveFund(uint percent) external isAdmin returns (bool) {\r\n        if (daitoken.balanceOf(address(this)) > 0) {\r\n            daitoken.transferFrom(address(this), aragon, ((percent*daitoken.balanceOf(address(this)))/100));\r\n        }\r\n        if (address(this).balance > 0) {\r\n            aragon.transfer(((percent*address(this).balance))/100);\r\n        }\r\n        emit LogTransfer(address(this), aragon, percent);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n    @param p = package name\r\n    @param c = promo code\r\n    @param a = amount to transfer\r\n    @emit PurchaseMade\r\n    @return boolean\r\n    */\r\n    function receiveDai(bytes32 p, bytes32 c, uint a) external payable isOpen returns (bool) {\r\n        daitoken.transferFrom(msg.sender, address(this), a);\r\n        emit PurchaseMade(msg.sender, a, \"DAI\", c, p);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n    @param p = package name\r\n    @param c = promo code\r\n    @emit PurchaseMade\r\n    @return boolean\r\n    */\r\n    function receive(bytes32 p, bytes32 c) external payable isOpen returns (bool) {\r\n        emit PurchaseMade(msg.sender, msg.value, \"ETH\", c, p);\r\n        return true;\r\n    }\r\n\r\n    function refund(uint amt, address payable a) external isAdmin returns (bool) {\r\n        require(0 < amt && amt < address(this).balance, \"Incorrect amount\");\r\n        a.transfer(amt); // contract transfers ether to given address\r\n    }\r\n\r\n    function viewOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function viewAragon() external view returns (address) {\r\n        return aragon;\r\n    }\r\n\r\n    function viewIsOpen() external view returns (bool) {\r\n        return isActive;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"o\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"unit\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pkg\",\"type\":\"bytes32\"}],\"name\":\"PurchaseMade\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"moveFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"c\",\"type\":\"bytes32\"}],\"name\":\"receive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"p\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"c\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"receiveDai\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"toggleContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"updateAragon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"o\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewAragon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PiggericksShop","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000917ead3e55a4abdeca7f16e3bb8b4d2a75538c97000000000000000000000000917ead3e55a4abdeca7f16e3bb8b4d2a75538c97","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f89f1e775750a1ff9e3c28dd8b8074c8d75f693ef817dd5e9ba02821026b0fae"}]}