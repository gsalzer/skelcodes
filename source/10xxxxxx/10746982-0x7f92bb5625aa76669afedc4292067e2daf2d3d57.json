{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.0;\r\n\r\ninterface IRegistry {\r\n    function isOwner(address _addr) external view returns (bool);\r\n\r\n    function payableOwner() external view returns (address payable);\r\n\r\n    function isInternal(address _addr) external view returns (bool);\r\n\r\n    function getLatestAddress(bytes2 _contractName)\r\n        external\r\n        view\r\n        returns (address contractAddress);\r\n}\r\n\r\ninterface IRelayer {\r\n    function onReceive(address msgSender, bytes calldata msgData)\r\n        external\r\n        payable;\r\n\r\n    function onDeposit(address msgSender) external payable;\r\n\r\n    function registrationExt(address msgSender, address referrerAddress)\r\n        external\r\n        payable;\r\n\r\n    function registration(address msgSender, address referrerAddress)\r\n        external\r\n        payable;\r\n\r\n    function occupyMatrix(\r\n        address msgSender,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) external payable;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract IUpgradable {\r\n    IRegistry public registry;\r\n\r\n    modifier onlyInternal {\r\n        assert(registry.isInternal(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        assert(registry.isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegistry {\r\n        assert(address(registry) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeDependentContractAddress() public virtual;\r\n\r\n    function changeRegistryAddress(address addr) public {\r\n        require(Address.isContract(addr), \"not contract\");\r\n        require(\r\n            address(registry) == address(0) || address(registry) == msg.sender,\r\n            \"require registry\"\r\n        );\r\n        registry = IRegistry(addr);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract OccupyMatrix is IUpgradable, Pausable {\r\n    IRelayer private rl;\r\n\r\n    uint8 public constant MAX_LEVEL = 13;\r\n    uint256 public lastUserId = 2;\r\n    mapping(uint256 => address) public idToAddress;\r\n    address public owner;\r\n    mapping(uint8 => uint256) public levelPrice;\r\n    mapping(address => User) public users;\r\n    struct User {\r\n        uint256 id;\r\n        address referrer;\r\n        uint256 partnersCount;\r\n        mapping(uint8 => bool) activeX3Levels;\r\n        mapping(uint8 => bool) activeX4Levels;\r\n        mapping(uint8 => X3) x3Matrix;\r\n        mapping(uint8 => X4) x4Matrix;\r\n    }\r\n\r\n    struct X3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint256 reinvestCount;\r\n    }\r\n\r\n    struct X4 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint256 reinvestCount;\r\n        address closedPart;\r\n    }\r\n    event Registration(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint256 indexed userId,\r\n        uint256 referrerId\r\n    );\r\n    event Reinvest(\r\n        address indexed user,\r\n        address indexed currentReferrer,\r\n        address indexed caller,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n    event BuyNewLevel(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n    event NewUserPlace(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint8 matrix,\r\n        uint8 level,\r\n        uint8 place\r\n    );\r\n    event MissedEthReceive(\r\n        address indexed receiver,\r\n        address indexed from,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n    event SentExtraEthDividends(\r\n        address indexed from,\r\n        address indexed receiver,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n\r\n    constructor(address ownerAddress) {\r\n        levelPrice[1] = 0.02 ether;\r\n        for (uint8 i = 2; i <= MAX_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i - 1] * 2;\r\n        }\r\n\r\n        owner = ownerAddress;\r\n\r\n        users[ownerAddress].id = 1;\r\n        idToAddress[1] = ownerAddress;\r\n\r\n        for (uint8 i = 1; i <= MAX_LEVEL; i++) {\r\n            users[ownerAddress].activeX3Levels[i] = true;\r\n            users[ownerAddress].activeX4Levels[i] = true;\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        rl.onReceive{value: msg.value}(msg.sender, msg.data);\r\n    }\r\n\r\n    receive() external payable {\r\n        rl.onReceive{value: msg.value}(msg.sender, msg.data);\r\n    }\r\n\r\n    function deposit() external payable {\r\n        rl.onDeposit{value: msg.value}(msg.sender);\r\n    }\r\n\r\n    modifier checkRegisterMode(uint8 mode, address referrerAddress) {\r\n        if (mode == 1) {\r\n            _;\r\n        } else if (mode == 2) {\r\n            rl.registrationExt{value: msg.value}(msg.sender, referrerAddress);\r\n        } else {\r\n            rl.registration{value: msg.value}(msg.sender, referrerAddress);\r\n        }\r\n    }\r\n\r\n    modifier checkUpgradeMode(\r\n        uint8 mode,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) {\r\n        if (mode == 1) {\r\n            _;\r\n        } else {\r\n            rl.occupyMatrix{value: msg.value}(msg.sender, matrix, level);\r\n        }\r\n    }\r\n\r\n    function registrationExt(address referrerAddress, uint8 mode)\r\n        external\r\n        payable\r\n        checkRegisterMode(mode, referrerAddress)\r\n    {\r\n        address userAddress = msg.sender;\r\n        require(msg.value == 0.04 ether, \"registration cost 0.04\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        users[userAddress].id = lastUserId;\r\n        users[userAddress].referrer = referrerAddress;\r\n        idToAddress[lastUserId] = userAddress;\r\n\r\n        users[userAddress].referrer = referrerAddress;\r\n\r\n        users[userAddress].activeX3Levels[1] = true;\r\n        users[userAddress].activeX4Levels[1] = true;\r\n\r\n        lastUserId++;\r\n\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeX3Referrer = findFreeMatrixReferrer(1, userAddress, 1);\r\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\r\n        occupyX3(userAddress, freeX3Referrer, 1);\r\n\r\n        occupyX4(userAddress, findFreeMatrixReferrer(2, userAddress, 1), 1);\r\n\r\n        emit Registration(\r\n            userAddress,\r\n            referrerAddress,\r\n            users[userAddress].id,\r\n            users[referrerAddress].id\r\n        );\r\n    }\r\n\r\n    function occupyMatrix(\r\n        uint8 matrix,\r\n        uint8 level,\r\n        uint8 mode\r\n    ) external payable checkUpgradeMode(mode, matrix, level) {\r\n        require(\r\n            isUserExists(msg.sender),\r\n            \"user is not exists. Register first.\"\r\n        );\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= MAX_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(\r\n                !users[msg.sender].activeX3Levels[level],\r\n                \"level already activated\"\r\n            );\r\n            require(users[msg.sender].activeX3Levels[level - 1], \"no skipping\");\r\n\r\n            if (users[msg.sender].x3Matrix[level - 1].blocked) {\r\n                users[msg.sender].x3Matrix[level - 1].blocked = false;\r\n            }\r\n\r\n            address freeX3Referrer = findFreeMatrixReferrer(\r\n                1,\r\n                msg.sender,\r\n                level\r\n            );\r\n            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\r\n            users[msg.sender].activeX3Levels[level] = true;\r\n            occupyX3(msg.sender, freeX3Referrer, level);\r\n\r\n            emit BuyNewLevel(msg.sender, freeX3Referrer, 1, level);\r\n        } else {\r\n            require(\r\n                !users[msg.sender].activeX4Levels[level],\r\n                \"level already activated\"\r\n            );\r\n            require(users[msg.sender].activeX4Levels[level - 1], \"no skipping\");\r\n\r\n            if (users[msg.sender].x4Matrix[level - 1].blocked) {\r\n                users[msg.sender].x4Matrix[level - 1].blocked = false;\r\n            }\r\n\r\n            address freeX4Referrer = findFreeMatrixReferrer(\r\n                2,\r\n                msg.sender,\r\n                level\r\n            );\r\n\r\n            users[msg.sender].activeX4Levels[level] = true;\r\n            occupyX4(msg.sender, freeX4Referrer, level);\r\n\r\n            emit BuyNewLevel(msg.sender, freeX4Referrer, 2, level);\r\n        }\r\n    }\r\n\r\n    function occupyX3(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                1,\r\n                level,\r\n                uint8(users[referrerAddress].x3Matrix[level].referrals.length)\r\n            );\r\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n\r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        //close matrix\r\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\r\n        if (\r\n            !users[referrerAddress].activeX3Levels[level + 1] &&\r\n            level != MAX_LEVEL\r\n        ) {\r\n            users[referrerAddress].x3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeMatrixReferrer(\r\n                1,\r\n                referrerAddress,\r\n                level\r\n            );\r\n            if (\r\n                users[referrerAddress].x3Matrix[level].currentReferrer !=\r\n                freeReferrerAddress\r\n            ) {\r\n                users[referrerAddress].x3Matrix[level]\r\n                    .currentReferrer = freeReferrerAddress;\r\n            }\r\n\r\n            users[referrerAddress].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(\r\n                referrerAddress,\r\n                freeReferrerAddress,\r\n                userAddress,\r\n                1,\r\n                level\r\n            );\r\n            occupyX3(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(owner, userAddress, 1, level);\r\n            users[owner].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n\r\n    function occupyX4(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        require(\r\n            users[referrerAddress].activeX4Levels[level],\r\n            \"500. Referrer level is inactive\"\r\n        );\r\n\r\n        if (\r\n            users[referrerAddress].x4Matrix[level].firstLevelReferrals.length <\r\n            2\r\n        ) {\r\n            users[referrerAddress].x4Matrix[level].firstLevelReferrals.push(\r\n                userAddress\r\n            );\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                uint8(\r\n                    users[referrerAddress].x4Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length\r\n                )\r\n            );\r\n\r\n            //set current level\r\n            users[userAddress].x4Matrix[level]\r\n                .currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n\r\n            address ref = users[referrerAddress].x4Matrix[level]\r\n                .currentReferrer;\r\n            users[ref].x4Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n            uint256 len = users[ref].x4Matrix[level].firstLevelReferrals.length;\r\n\r\n            if (\r\n                (len == 2) &&\r\n                (users[ref].x4Matrix[level].firstLevelReferrals[0] ==\r\n                    referrerAddress) &&\r\n                (users[ref].x4Matrix[level].firstLevelReferrals[1] ==\r\n                    referrerAddress)\r\n            ) {\r\n                if (\r\n                    users[referrerAddress].x4Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length == 1\r\n                ) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            } else if (\r\n                (len == 1 || len == 2) &&\r\n                users[ref].x4Matrix[level].firstLevelReferrals[0] ==\r\n                referrerAddress\r\n            ) {\r\n                if (\r\n                    users[referrerAddress].x4Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length == 1\r\n                ) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (\r\n                len == 2 &&\r\n                users[ref].x4Matrix[level].firstLevelReferrals[1] ==\r\n                referrerAddress\r\n            ) {\r\n                if (\r\n                    users[referrerAddress].x4Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length == 1\r\n                ) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return occupyX4Second(userAddress, ref, level);\r\n        }\r\n\r\n        users[referrerAddress].x4Matrix[level].secondLevelReferrals.push(\r\n            userAddress\r\n        );\r\n\r\n        if (users[referrerAddress].x4Matrix[level].closedPart != address(0)) {\r\n            if (\r\n                (users[referrerAddress].x4Matrix[level]\r\n                    .firstLevelReferrals[0] ==\r\n                    users[referrerAddress].x4Matrix[level]\r\n                        .firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].x4Matrix[level]\r\n                    .firstLevelReferrals[0] ==\r\n                    users[referrerAddress].x4Matrix[level].closedPart)\r\n            ) {\r\n                updateX4(userAddress, referrerAddress, level, true);\r\n                return occupyX4Second(userAddress, referrerAddress, level);\r\n            } else if (\r\n                users[referrerAddress].x4Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x4Matrix[level].closedPart\r\n            ) {\r\n                updateX4(userAddress, referrerAddress, level, true);\r\n                return occupyX4Second(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateX4(userAddress, referrerAddress, level, false);\r\n                return occupyX4Second(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (\r\n            users[referrerAddress].x4Matrix[level].firstLevelReferrals[1] ==\r\n            userAddress\r\n        ) {\r\n            updateX4(userAddress, referrerAddress, level, false);\r\n            return occupyX4Second(userAddress, referrerAddress, level);\r\n        } else if (\r\n            users[referrerAddress].x4Matrix[level].firstLevelReferrals[0] ==\r\n            userAddress\r\n        ) {\r\n            updateX4(userAddress, referrerAddress, level, true);\r\n            return occupyX4Second(userAddress, referrerAddress, level);\r\n        }\r\n\r\n        if (\r\n            users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[0]]\r\n                .x4Matrix[level]\r\n                .firstLevelReferrals\r\n                .length <=\r\n            users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[1]]\r\n                .x4Matrix[level]\r\n                .firstLevelReferrals\r\n                .length\r\n        ) {\r\n            updateX4(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateX4(userAddress, referrerAddress, level, true);\r\n        }\r\n\r\n        occupyX4Second(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateX4(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level,\r\n        bool right\r\n    ) private {\r\n        if (!right) {\r\n            users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[0]]\r\n                .x4Matrix[level]\r\n                .firstLevelReferrals\r\n                .push(userAddress);\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                users[referrerAddress].x4Matrix[level].firstLevelReferrals[0],\r\n                2,\r\n                level,\r\n                uint8(\r\n                    users[users[referrerAddress].x4Matrix[level]\r\n                        .firstLevelReferrals[0]]\r\n                        .x4Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length\r\n                )\r\n            );\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                2 +\r\n                    uint8(\r\n                        users[users[referrerAddress].x4Matrix[level]\r\n                            .firstLevelReferrals[0]]\r\n                            .x4Matrix[level]\r\n                            .firstLevelReferrals\r\n                            .length\r\n                    )\r\n            );\r\n            //set current level\r\n            users[userAddress].x4Matrix[level]\r\n                .currentReferrer = users[referrerAddress].x4Matrix[level]\r\n                .firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].x4Matrix[level].firstLevelReferrals[1]]\r\n                .x4Matrix[level]\r\n                .firstLevelReferrals\r\n                .push(userAddress);\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                users[referrerAddress].x4Matrix[level].firstLevelReferrals[1],\r\n                2,\r\n                level,\r\n                uint8(\r\n                    users[users[referrerAddress].x4Matrix[level]\r\n                        .firstLevelReferrals[1]]\r\n                        .x4Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length\r\n                )\r\n            );\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                4 +\r\n                    uint8(\r\n                        users[users[referrerAddress].x4Matrix[level]\r\n                            .firstLevelReferrals[1]]\r\n                            .x4Matrix[level]\r\n                            .firstLevelReferrals\r\n                            .length\r\n                    )\r\n            );\r\n            //set current level\r\n            users[userAddress].x4Matrix[level]\r\n                .currentReferrer = users[referrerAddress].x4Matrix[level]\r\n                .firstLevelReferrals[1];\r\n        }\r\n    }\r\n\r\n    function occupyX4Second(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        if (\r\n            users[referrerAddress].x4Matrix[level].secondLevelReferrals.length <\r\n            4\r\n        ) {\r\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n\r\n        address[] memory _X4Matrix = users[users[referrerAddress]\r\n            .x4Matrix[level]\r\n            .currentReferrer]\r\n            .x4Matrix[level]\r\n            .firstLevelReferrals;\r\n\r\n        if (_X4Matrix.length == 2) {\r\n            if (\r\n                _X4Matrix[0] == referrerAddress ||\r\n                _X4Matrix[1] == referrerAddress\r\n            ) {\r\n                users[users[referrerAddress].x4Matrix[level].currentReferrer]\r\n                    .x4Matrix[level]\r\n                    .closedPart = referrerAddress;\r\n            }\r\n        } else if (_X4Matrix.length == 1) {\r\n            if (_X4Matrix[0] == referrerAddress) {\r\n                users[users[referrerAddress].x4Matrix[level].currentReferrer]\r\n                    .x4Matrix[level]\r\n                    .closedPart = referrerAddress;\r\n            }\r\n        }\r\n\r\n        users[referrerAddress].x4Matrix[level]\r\n            .firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].x4Matrix[level]\r\n            .secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].x4Matrix[level].closedPart = address(0);\r\n\r\n        if (\r\n            !users[referrerAddress].activeX4Levels[level + 1] &&\r\n            level != MAX_LEVEL\r\n        ) {\r\n            users[referrerAddress].x4Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].x4Matrix[level].reinvestCount++;\r\n\r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeMatrixReferrer(\r\n                2,\r\n                referrerAddress,\r\n                level\r\n            );\r\n\r\n            emit Reinvest(\r\n                referrerAddress,\r\n                freeReferrerAddress,\r\n                userAddress,\r\n                2,\r\n                level\r\n            );\r\n            occupyX4(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level);\r\n            sendETHDividends(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n\r\n    function findFreeMatrixReferrer(\r\n        uint8 matrix,\r\n        address userAddress,\r\n        uint8 level\r\n    ) public view returns (address) {\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[users[userAddress].referrer].activeX3Levels[level]) {\r\n                    return users[userAddress].referrer;\r\n                }\r\n\r\n                userAddress = users[userAddress].referrer;\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[users[userAddress].referrer].activeX4Levels[level]) {\r\n                    return users[userAddress].referrer;\r\n                }\r\n\r\n                userAddress = users[userAddress].referrer;\r\n            }\r\n        }\r\n    }\r\n\r\n    function findEthReceiver(\r\n        address userAddress,\r\n        address _from,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) private returns (address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].x3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].x4Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x4Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(\r\n        address userAddress,\r\n        address _from,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(\r\n            userAddress,\r\n            _from,\r\n            matrix,\r\n            level\r\n        );\r\n\r\n        if (!address(uint160(receiver)).send(levelPrice[level])) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n\r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function changeDependentContractAddress() public override {\r\n        rl = IRelayer(registry.getLatestAddress(\"RL\"));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"BuyNewLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeDependentContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeMatrixReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"occupyMatrix\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"registrationExt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"OccupyMatrix","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005508b48f208c5041eaf69f946f362e096488a1c3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://139bb1783ecee668b2b35cce58d1b82696f1b392842d841071df623a09de4d57"}]}