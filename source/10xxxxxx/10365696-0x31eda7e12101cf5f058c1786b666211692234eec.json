{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n          \r\n          //------ busniness plan ------\r\n\r\n\r\n        // www.bullera.io Package amount\r\n\r\n        //  Startup-0.1 ETH\r\n        //  ForX3                ForX4\r\n        // 1 - 0.05              1 - 0.05\r\n        // 2 - 0.1                2 - 0.1\r\n        // 3 - 0.2           3 - 0.2\r\n        // 4 - 0.4          4 - 0.4\r\n        // 5 - 0.8           5 - 0.8\r\n        // 6 - 1.6           6 - 1.6\r\n        // 7 - 3.2            7 - 3.2\r\n        // 8 - 6.4             8 - 6.4\r\n        // 9 - 12.4            9 - 12.4\r\n        // 10 - 25.6         10 - 25.6\r\n        // 11 - 51.2         11 - 51.2\r\n        // 12 - 102.4      12 - 102.4\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}\r\ncontract BulleraIo {\r\n    event Multisended(uint256 value , address sender);\r\n    using SafeMath for uint256;\r\n\r\n    function multisendEther(address payable[]  memory  _contributors, uint256[] memory _balances) public payable {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i] );\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n        emit Multisended(msg.value, msg.sender);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"BulleraIo","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ef589d114908e066e6a84b59e00c9094b9774007eb18b46bad612d23ba799d6e"}]}