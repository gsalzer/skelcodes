{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n   ____  ____  ______   _____                           \r\n   / __ \\/ __ \\/_  __/  / __(_)___  ____ _____  ________ \r\n  / /_/ / / / / / /    / /_/ / __ \\/ __ `/ __ \\/ ___/ _ \\\r\n / ____/ /_/ / / /    / __/ / / / / /_/ / / / / /__/  __/\r\n/_/    \\____/ /_/    /_/ /_/_/ /_/\\__,_/_/ /_/\\___/\\___/ \r\n\r\n* POT.Finance: ChefMao.sol\r\n* The first Admin contract for YuanYangPot\r\n*\r\n*/\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap\\lib\\contracts\\libraries\\FixedPoint.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\r\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\r\n        return uq112x112(self._x / uint224(x));\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\r\n        uint z;\r\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n}\r\n\r\n// File: @uniswap\\v2-periphery\\contracts\\libraries\\UniswapV2OracleLibrary.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(\r\n        address pair\r\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\r\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\IYuanYangPot.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n/**\r\n * @dev Interface of the YuanYangPot.\r\n */\r\ninterface IYuanYangPot {\r\n\t/**\r\n\t * @dev Hotpot Base created per block\r\n\t */\r\n\tfunction hotpotBasePerBlock() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev The Hotpot Base Token\r\n\t */\r\n\tfunction hotpotBaseTotalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev The block number when Hotpot mining starts.\r\n\t */\r\n\tfunction startBlock() external view returns (uint256);\r\n\t\r\n\t/**\r\n\t * @dev Update reward vairables for all pools.\r\n\t */\r\n\tfunction massUpdatePools() external;\r\n\r\n\t/**\r\n\t * @dev Update the Hotpot Base distribution speed.\r\n\t */\r\n\tfunction setHotpotBasePerBlock(uint256 _hotpotBasePerBlock) external;\r\n\r\n\t/**\r\n\t * @dev Update the distributio share of RED soups; WHITE share = 100% - RED share\r\n\t */\r\n\tfunction setRedPotShare(uint256 _redPotShare) external;\r\n\r\n\t/**\r\n\t * @dev Update if HotPot is in Circuit Breaker mode. Reward claims are suspended during CB\r\n\t */\r\n\tfunction setCircuitBreaker(bool _isInCircuitBreaker) external;\r\n\r\n\t/**\r\n\t * @dev Add a new lp to the pool.\r\n\t * XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n\t */\r\n\tfunction addPool(\r\n\t\tuint256 _allocPoint,\r\n\t\tIERC20 _lpToken,\r\n\t\tbool _isRed,\r\n\t\tbool _withUpdate\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Update the given pool's Hotpot allocation point.\r\n\t */\r\n\tfunction setPool(\r\n\t\tuint256 _pid,\r\n\t\tuint256 _allocPoint,\r\n\t\tbool _withUpdate\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Update the tip rate on reward distribution.\r\n\t */\r\n\tfunction setTipRate(uint256 _tipRate) external;\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the pot to a new account (`newOwner`).\r\n\t */\r\n\tfunction transferPotOwnership(address newOwner) external;\r\n}\r\n\r\n// File: contracts\\ChefMao.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract ChefMao {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmodifier onlyGov() {\r\n\t\trequire(msg.sender == gov, 'onlyGov: caller is not gov');\r\n\t\t_;\r\n\t}\r\n\t// an event emitted when deviationThreshold is changed\r\n\tevent NewDeviationThreshold(uint256 oldDeviationThreshold, uint256 newDeviationThreshold);\r\n\r\n\t// an event emitted when deviationMovement is changed\r\n\tevent NewDeviationMovement(uint256 oldDeviationMovement, uint256 newDeviationMovement);\r\n\r\n\t// Event emitted when pendingGov is changed\r\n\tevent NewPendingGov(address oldPendingGov, address newPendingGov);\r\n\r\n\t// Event emitted when gov is changed\r\n\tevent NewGov(address oldGov, address newGov);\r\n\r\n\t// Governance address\r\n\taddress public gov;\r\n\r\n\t// Pending Governance address\r\n\taddress public pendingGov;\r\n\r\n\t// Peg target\r\n\tuint256 public targetPrice;\r\n\r\n\t// POT Tokens created per block at inception.\r\n\t// POT's inflation will eventually be governed by targetStock2Flow.\r\n\tuint256 public farmHotpotBasePerBlock;\r\n\r\n\t// Halving period for Hotpot Base per block, in blocks.\r\n\tuint256 public halfLife = 88888;\r\n\r\n\t// targetTokenPerBlock = totalSupply / (targetStock2Flow * 2,400,000)\r\n\t// 2,400,000 is ~1-year's ETH block count as of Sep 2020\r\n\t// See @100trillionUSD's article below on Scarcity and S2F:\r\n\t// https://medium.com/@100trillionUSD/modeling-bitcoins-value-with-scarcity-91fa0fc03e25\r\n\t//\r\n\t// Ganularity of targetStock2Flow is intentionally restricted.\r\n\tuint256 public targetStock2Flow = 10; // ~10% p.a. target inflation;\r\n\r\n\t// If the current price is within this fractional distance from the target, no supply\r\n\t// update is performed. Fixed point number--same format as the price.\r\n\t// (ie) abs(price - targetPrice) / targetPrice < deviationThreshold, then no supply change.\r\n\tuint256 public deviationThreshold = 5e16; // 5%\r\n\r\n\tuint256 public deviationMovement = 5e16; // 5%\r\n\r\n\t// More than this much time must pass between rebase operations.\r\n\tuint256 public minRebaseTimeIntervalSec = 24 hours;\r\n\r\n\t// Block timestamp of last rebase operation\r\n\tuint256 public lastRebaseTimestamp;\r\n\r\n\t// The rebase window begins this many seconds into the minRebaseTimeInterval period.\r\n\t// For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.\r\n\tuint256 public rebaseWindowOffsetSec = 28800; // 8am/8pm UTC rebases\r\n\r\n\t// The length of the time window where a rebase operation is allowed to execute, in seconds.\r\n\tuint256 public rebaseWindowLengthSec = 3600; // 60 minutes\r\n\r\n\t// The number of rebase cycles since inception\r\n\tuint256 public epoch;\r\n\r\n\t// The number of halvings since inception\r\n\tuint256 public halvingCounter;\r\n\r\n\t// The number of consecutive upward threshold breaching when rebasing.\r\n\tuint256 public upwardCounter;\r\n\r\n\t// The number of consecutive downward threshold breaching when rebasing.\r\n\tuint256 public downwardCounter;\r\n\r\n\tuint256 public retargetThreshold = 2; // 2 days\r\n\r\n\t// rebasing is not active initially. It can be activated at T+12 hours from\r\n\t// deployment time\r\n\r\n\t// boolean showing rebase activation status\r\n\tbool public rebasingActive;\r\n\r\n\t// delays rebasing activation to facilitate liquidity\r\n\tuint256 public constant rebaseDelay = 12 hours;\r\n\r\n\t// Time of TWAP initialization\r\n\tuint256 public timeOfTwapInit;\r\n\r\n\t// pair for reserveToken <> POT\r\n\taddress public uniswapPair;\r\n\r\n\t// last TWAP update time\r\n\tuint32 public blockTimestampLast;\r\n\r\n\t// last TWAP cumulative price;\r\n\tuint256 public priceCumulativeLast;\r\n\r\n\t// Whether or not this token is first in uniswap POT<>Reserve pair\r\n\t// address of USDT:\r\n\t// address of POT:\r\n\tbool public isToken0 = true;\r\n\r\n\tIYuanYangPot public masterPot;\r\n\r\n\tconstructor(\r\n\t\tIYuanYangPot _masterPot,\r\n\t\taddress _uniswapPair,\r\n\t\taddress _gov,\r\n\t\tuint256 _targetPrice,\r\n\t\tbool _isToken0\r\n\t) public {\r\n\t\tmasterPot = _masterPot;\r\n\t\tfarmHotpotBasePerBlock = masterPot.hotpotBasePerBlock();\r\n\t\tuniswapPair = _uniswapPair;\r\n\t\tgov = _gov;\r\n\t\ttargetPrice = _targetPrice;\r\n\t\tisToken0 = _isToken0;\r\n\t}\r\n\r\n\t// sets the pendingGov\r\n\tfunction setPendingGov(address _pendingGov) external onlyGov {\r\n\t\taddress oldPendingGov = pendingGov;\r\n\t\tpendingGov = _pendingGov;\r\n\t\temit NewPendingGov(oldPendingGov, _pendingGov);\r\n\t}\r\n\r\n\t// lets msg.sender accept governance\r\n\tfunction acceptGov() external {\r\n\t\trequire(msg.sender == pendingGov, 'acceptGov: !pending');\r\n\t\taddress oldGov = gov;\r\n\t\tgov = pendingGov;\r\n\t\tpendingGov = address(0);\r\n\t\temit NewGov(oldGov, gov);\r\n\t}\r\n\r\n\t// Initializes TWAP start point, starts countdown to first rebase\r\n\tfunction initTwap() public onlyGov {\r\n\t\trequire(timeOfTwapInit == 0, 'initTwap: already activated');\r\n\t\t(\r\n\t\t\tuint256 price0Cumulative,\r\n\t\t\tuint256 price1Cumulative,\r\n\t\t\tuint32 blockTimestamp\r\n\t\t) = UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\r\n\t\tpriceCumulativeLast = isToken0 ? price0Cumulative : price1Cumulative;\r\n\t\trequire(priceCumulativeLast > 0, 'initTwap: no trades');\r\n\t\tblockTimestampLast = blockTimestamp;\r\n\t\ttimeOfTwapInit = blockTimestamp;\r\n\t}\r\n\r\n\t// @notice Activates rebasing\r\n\t// @dev One way function, cannot be undone, callable by anyone\r\n\tfunction activateRebasing() public {\r\n\t\trequire(timeOfTwapInit > 0, 'activateRebasing: twap wasnt intitiated, call init_twap()');\r\n\t\t// cannot enable prior to end of rebaseDelay\r\n\t\trequire(getNow() >= timeOfTwapInit + rebaseDelay, 'activateRebasing: !end_delay');\r\n\r\n\t\trebasingActive = true;\r\n\t}\r\n\r\n\t// If the latest block timestamp is within the rebase time window it, returns true.\r\n\t// Otherwise, returns false.\r\n\tfunction inRebaseWindow() public view returns (bool) {\r\n\t\t// rebasing is delayed until there is a liquid market\r\n\t\trequire(rebasingActive, 'inRebaseWindow: rebasing not active');\r\n\t\tuint256 nowTimestamp = getNow();\r\n\t\trequire(\r\n\t\t\tnowTimestamp.mod(minRebaseTimeIntervalSec) >= rebaseWindowOffsetSec,\r\n\t\t\t'inRebaseWindow: too early'\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tnowTimestamp.mod(minRebaseTimeIntervalSec) <\r\n\t\t\t\t(rebaseWindowOffsetSec.add(rebaseWindowLengthSec)),\r\n\t\t\t'inRebaseWindow: too late'\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\r\n\t *\r\n\t * @dev The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag\r\n\t *      Where DeviationFromTargetRate is (MarketOracleRate - targetPrice) / targetPrice\r\n\t *      and targetPrice is 1e18\r\n\t */\r\n\tfunction rebase() public {\r\n\t\t// no possibility of reentry as this function only invoke view functions or internal functions\r\n\t\t// or functions from master pot which also only invoke only invoke view functions or internal functions\r\n\t\t// EOA only\r\n\t\t// require(msg.sender == tx.origin);\r\n\t\t// ensure rebasing at correct time\r\n\t\tinRebaseWindow();\r\n\r\n\t\tuint256 nowTimestamp = getNow();\r\n\t\t// This comparison also ensures there is no reentrancy.\r\n\t\trequire(\r\n\t\t\tlastRebaseTimestamp.add(minRebaseTimeIntervalSec) < nowTimestamp,\r\n\t\t\t'rebase: Rebase already triggered'\r\n\t\t);\r\n\r\n\t\t// Snap the rebase time to the start of this window.\r\n\t\tlastRebaseTimestamp = nowTimestamp.sub(nowTimestamp.mod(minRebaseTimeIntervalSec)).add(\r\n\t\t\trebaseWindowOffsetSec\r\n\t\t);\r\n\r\n\t\t// no safe math required\r\n\t\tepoch++;\r\n\r\n\t\t// Get twap from uniswapv2.\r\n\t\t(uint256 priceCumulative, uint32 blockTimestamp, uint256 twap) = getCurrentTwap();\r\n\t\tpriceCumulativeLast = priceCumulative;\r\n\t\tblockTimestampLast = blockTimestamp;\r\n\r\n\t\tbool inCircuitBreaker = false;\r\n\t\t(\r\n\t\t\tuint256 newHotpotBasePerBlock,\r\n\t\t\tuint256 newFarmHotpotBasePerBlock,\r\n\t\t\tuint256 newHalvingCounter\r\n\t\t) = getNewHotpotBasePerBlock(twap);\r\n\t\tfarmHotpotBasePerBlock = newFarmHotpotBasePerBlock;\r\n\t\thalvingCounter = newHalvingCounter;\r\n\t\tuint256 newRedShare = getNewRedShare(twap);\r\n\r\n\t\t// Do a bunch of things if twap is outside of threshold.\r\n\t\tif (!withinDeviationThreshold(twap)) {\r\n\t\t\tuint256 absoluteDeviationMovement = targetPrice.mul(deviationMovement).div(1e18);\r\n\r\n\t\t\t// Calculates and sets the new target rate if twap is outside of threshold.\r\n\t\t\tif (twap > targetPrice) {\r\n\t\t\t\t// no safe math required\r\n\t\t\t\tupwardCounter++;\r\n\t\t\t\tif (downwardCounter > 0) {\r\n\t\t\t\t\tdownwardCounter = 0;\r\n\t\t\t\t}\r\n\t\t\t\t// if twap continues to go up, retargetThreshold is only effective for the first upward retarget\r\n\t\t\t\t// and every following rebase would retarget upward until twap is within deviation threshold\r\n\t\t\t\tif (upwardCounter >= retargetThreshold) {\r\n\t\t\t\t\ttargetPrice = targetPrice.add(absoluteDeviationMovement);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tinCircuitBreaker = true;\r\n\t\t\t\t// no safe math required\r\n\t\t\t\tdownwardCounter++;\r\n\t\t\t\tif (upwardCounter > 0) {\r\n\t\t\t\t\tupwardCounter = 0;\r\n\t\t\t\t}\r\n\t\t\t\t// if twap continues to go down, retargetThreshold is only effective for the first downward retarget\r\n\t\t\t\t// and every following rebase would retarget downward until twap is within deviation threshold\r\n\t\t\t\tif (downwardCounter >= retargetThreshold) {\r\n\t\t\t\t\ttargetPrice = targetPrice.sub(absoluteDeviationMovement);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tupwardCounter = 0;\r\n\t\t\tdownwardCounter = 0;\r\n\t\t}\r\n\r\n\t\tmasterPot.massUpdatePools();\r\n\t\tmasterPot.setHotpotBasePerBlock(newHotpotBasePerBlock);\r\n\t\tmasterPot.setRedPotShare(newRedShare);\r\n\t\tmasterPot.setCircuitBreaker(inCircuitBreaker);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Calculates TWAP from uniswap\r\n\t *\r\n\t * @dev When liquidity is low, this can be manipulated by an end of block -> next block\r\n\t *      attack. We delay the activation of rebases 12 hours after liquidity incentives\r\n\t *      to reduce this attack vector. Additional there is very little supply\r\n\t *      to be able to manipulate this during that time period of highest vuln.\r\n\t */\r\n\tfunction getCurrentTwap()\r\n\t\tpublic\r\n\t\tvirtual\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 priceCumulative,\r\n\t\t\tuint32 blockTimestamp,\r\n\t\t\tuint256 twap\r\n\t\t)\r\n\t{\r\n\t\t(\r\n\t\t\tuint256 price0Cumulative,\r\n\t\t\tuint256 price1Cumulative,\r\n\t\t\tuint32 blockTimestampUniswap\r\n\t\t) = UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\r\n\t\tpriceCumulative = isToken0 ? price0Cumulative : price1Cumulative;\r\n\t\tblockTimestamp = blockTimestampUniswap;\r\n\t\tuint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n\r\n\t\t// no period check as is done in isRebaseWindow\r\n\r\n\t\t// overflow is desired, casting never truncates\r\n\t\t// cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\r\n\t\tFixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\r\n\t\t\tuint224((priceCumulative - priceCumulativeLast) / timeElapsed)\r\n\t\t);\r\n\t\t// 1e30 for trading pair with 6-decimal tokens. Be ultra-cautious when changing this.\r\n\t\ttwap = FixedPoint.decode144(FixedPoint.mul(priceAverage, 1e30));\r\n\t}\r\n\r\n\t// Computes new tokenPerBlock based on price.\r\n\tfunction getNewHotpotBasePerBlock(uint256 price)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 newHotpotBasePerBlock,\r\n\t\t\tuint256 newFarmHotpotBasePerBlock,\r\n\t\t\tuint256 newHalvingCounter\r\n\t\t)\r\n\t{\r\n\t\tuint256 blockElapsed = getBlockNumber().sub(masterPot.startBlock());\r\n\t\tnewHalvingCounter = blockElapsed.div(halfLife);\r\n\t\tnewFarmHotpotBasePerBlock = farmHotpotBasePerBlock;\r\n\r\n\t\t// if new halvingCounter is larger than old one, perform halving.\r\n\t\tif (newHalvingCounter > halvingCounter) {\r\n\t\t\tnewFarmHotpotBasePerBlock = newFarmHotpotBasePerBlock.div(2);\r\n\t\t}\r\n\r\n\t\t// computes newHotpotBasePerBlock based on targetStock2Flow.\r\n\t\tnewHotpotBasePerBlock = masterPot.hotpotBaseTotalSupply().div(\r\n\t\t\ttargetStock2Flow.mul(2400000)\r\n\t\t);\r\n\r\n\t\t// use the larger of newHotpotBasePerBlock and newFarmHotpotBasePerBlock.\r\n\t\tnewHotpotBasePerBlock = newHotpotBasePerBlock > newFarmHotpotBasePerBlock\r\n\t\t\t? newHotpotBasePerBlock\r\n\t\t\t: newFarmHotpotBasePerBlock;\r\n\r\n\t\tif (price > targetPrice) {\r\n\t\t\tnewHotpotBasePerBlock = newHotpotBasePerBlock.mul(price).div(targetPrice);\r\n\t\t} else {\r\n\t\t\tnewHotpotBasePerBlock = newHotpotBasePerBlock.mul(targetPrice).div(price);\r\n\t\t}\r\n\t}\r\n\r\n\t// Computes new redShare based on price.\r\n\tfunction getNewRedShare(uint256 price) public view returns (uint256) {\r\n\t\treturn uint256(1e24).div(price.mul(1e12).div(targetPrice).add(1e12));\r\n\t}\r\n\r\n\t// Check if the current price is within the deviation threshold for rebasing.\r\n\tfunction withinDeviationThreshold(uint256 price) public view returns (bool) {\r\n\t\tuint256 absoluteDeviationThreshold = targetPrice.mul(deviationThreshold).div(1e18);\r\n\t\treturn\r\n\t\t\t(price >= targetPrice && price.sub(targetPrice) < absoluteDeviationThreshold) ||\r\n\t\t\t(price < targetPrice && targetPrice.sub(price) < absoluteDeviationThreshold);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Sets the deviation threshold fraction. If the exchange rate given by the market\r\n\t *         oracle is within this fractional distance from the targetPrice, then no supply\r\n\t *         modifications are made.\r\n\t * @param _deviationThreshold The new exchange rate threshold fraction.\r\n\t */\r\n\tfunction setDeviationThreshold(uint256 _deviationThreshold) external onlyGov {\r\n\t\trequire(_deviationThreshold > 0, 'deviationThreshold: too low');\r\n\t\tuint256 oldDeviationThreshold = deviationThreshold;\r\n\t\tdeviationThreshold = _deviationThreshold;\r\n\t\temit NewDeviationThreshold(oldDeviationThreshold, _deviationThreshold);\r\n\t}\r\n\r\n\tfunction setDeviationMovement(uint256 _deviationMovement) external onlyGov {\r\n\t\trequire(_deviationMovement > 0, 'deviationMovement: too low');\r\n\t\tuint256 oldDeviationMovement = deviationMovement;\r\n\t\tdeviationMovement = _deviationMovement;\r\n\t\temit NewDeviationMovement(oldDeviationMovement, _deviationMovement);\r\n\t}\r\n\r\n\t// Sets the retarget threshold parameter, Gov only.\r\n\tfunction setRetargetThreshold(uint256 _retargetThreshold) external onlyGov {\r\n\t\trequire(_retargetThreshold > 0, 'retargetThreshold: too low');\r\n\t\tretargetThreshold = _retargetThreshold;\r\n\t}\r\n\r\n\t// Overwrites the target stock-to-flow ratio, Gov only.\r\n\tfunction setTargetStock2Flow(uint256 _targetStock2Flow) external onlyGov {\r\n\t\trequire(_targetStock2Flow > 0, 'targetStock2Flow: too low');\r\n\t\ttargetStock2Flow = _targetStock2Flow;\r\n\t}\r\n\r\n\t/**\r\n     * @notice Sets the parameters which control the timing and frequency of\r\n     *         rebase operations.\r\n     *         a) the minimum time period that must elapse between rebase cycles.\r\n     *         b) the rebase window offset parameter.\r\n     *         c) the rebase window length parameter.\r\n     * @param _minRebaseTimeIntervalSec More than this much time must pass between rebase\r\n     *        operations, in seconds.\r\n     * @param _rebaseWindowOffsetSec The number of seconds from the beginning of\r\n              the rebase interval, where the rebase window begins.\r\n     * @param _rebaseWindowLengthSec The length of the rebase window in seconds.\r\n     */\r\n\tfunction setRebaseTimingParameters(\r\n\t\tuint256 _minRebaseTimeIntervalSec,\r\n\t\tuint256 _rebaseWindowOffsetSec,\r\n\t\tuint256 _rebaseWindowLengthSec\r\n\t) external onlyGov {\r\n\t\trequire(_minRebaseTimeIntervalSec > 0, 'minRebaseTimeIntervalSec: too low');\r\n\t\trequire(\r\n\t\t\t_rebaseWindowOffsetSec < _minRebaseTimeIntervalSec,\r\n\t\t\t'rebaseWindowOffsetSec: too high'\r\n\t\t);\r\n\r\n\t\tminRebaseTimeIntervalSec = _minRebaseTimeIntervalSec;\r\n\t\trebaseWindowOffsetSec = _rebaseWindowOffsetSec;\r\n\t\trebaseWindowLengthSec = _rebaseWindowLengthSec;\r\n\t}\r\n\r\n\t// Passthrough function to add pool.\r\n\tfunction addPool(\r\n\t\tuint256 _allocPoint,\r\n\t\tIERC20 _lpToken,\r\n\t\tbool _isRed,\r\n\t\tbool _withUpdate\r\n\t) public onlyGov {\r\n\t\tmasterPot.addPool(_allocPoint, _lpToken, _isRed, _withUpdate);\r\n\t}\r\n\r\n\t// Passthrough function to set pool.\r\n\tfunction setPool(\r\n\t\tuint256 _pid,\r\n\t\tuint256 _allocPoint,\r\n\t\tbool _withUpdate\r\n\t) public onlyGov {\r\n\t\tmasterPot.setPool(_pid, _allocPoint, _withUpdate);\r\n\t}\r\n\r\n\t// Passthrough function to set tip rate.\r\n\tfunction setTipRate(uint256 _tipRate) public onlyGov {\r\n\t\tmasterPot.setTipRate(_tipRate);\r\n\t}\r\n\r\n\t// Passthrough function to transfer pot ownership.\r\n\tfunction transferPotOwnership(address newOwner) public onlyGov {\r\n\t\tmasterPot.transferPotOwnership(newOwner);\r\n\t}\r\n\r\n\tfunction getNow() public virtual view returns (uint256) {\r\n\t\treturn now;\r\n\t}\r\n\r\n\tfunction getBlockNumber() public virtual view returns (uint256) {\r\n\t\treturn block.number;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IYuanYangPot\",\"name\":\"_masterPot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isToken0\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDeviationMovement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeviationMovement\",\"type\":\"uint256\"}],\"name\":\"NewDeviationMovement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDeviationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeviationThreshold\",\"type\":\"uint256\"}],\"name\":\"NewDeviationThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"NewGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingGov\",\"type\":\"address\"}],\"name\":\"NewPendingGov\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateRebasing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deviationMovement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deviationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"downwardCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmHotpotBasePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceCumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"twap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getNewHotpotBasePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newHotpotBasePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFarmHotpotBasePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newHalvingCounter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getNewRedShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halfLife\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRebaseWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initTwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToken0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterPot\",\"outputs\":[{\"internalType\":\"contract IYuanYangPot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRebaseTimeIntervalSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseWindowLengthSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseWindowOffsetSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retargetThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deviationMovement\",\"type\":\"uint256\"}],\"name\":\"setDeviationMovement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deviationThreshold\",\"type\":\"uint256\"}],\"name\":\"setDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGov\",\"type\":\"address\"}],\"name\":\"setPendingGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRebaseTimeIntervalSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseWindowOffsetSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseWindowLengthSec\",\"type\":\"uint256\"}],\"name\":\"setRebaseTimingParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_retargetThreshold\",\"type\":\"uint256\"}],\"name\":\"setRetargetThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetStock2Flow\",\"type\":\"uint256\"}],\"name\":\"setTargetStock2Flow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tipRate\",\"type\":\"uint256\"}],\"name\":\"setTipRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetStock2Flow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeOfTwapInit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferPotOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upwardCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"withinDeviationThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChefMao","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c6635074d5cf8c47585fab0b3ebf15c56fc6af530000000000000000000000008b4c1bf23da891e96bee6565bcc452c471a6ad14000000000000000000000000161f2b6eb149b20fb387b693262d79722bf5137a0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://06c3e1b7010ded32c215d8d2b064a338aa716548f7264dc15aba4614175c048f"}]}