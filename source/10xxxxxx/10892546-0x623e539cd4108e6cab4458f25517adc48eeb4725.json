{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract EEEMoney{\r\n    // SafeMath\r\n    using SafeMath for uint;\r\n    \r\n    // User struct\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint totalEarnedETH;\r\n        uint previousShare;\r\n        uint sharesHoldings;\r\n        uint directShare;\r\n        uint referralShare;\r\n        uint poolHoldings;\r\n        uint created;\r\n        address[] referral;\r\n    }\r\n    \r\n    EEEMoney public oldEEEMoney1;\r\n    EEEMoney public oldEEEMoney2;\r\n    \r\n    // Public variables\r\n    address public ownerWallet;\r\n    address public signature;\r\n    uint public poolMoney;\r\n    uint public qualifiedPoolHolding = 0.5 ether;\r\n    uint public invest = 0.25 ether;\r\n    uint public feePercentage = 5 ether; \r\n    uint public currUserID = 0;\r\n    uint public qualify = 86400;\r\n    bool public lockStatus;\r\n    \r\n    // Mapping\r\n    mapping(address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    \r\n    // Events\r\n    event regEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event poolMoneyEvent(address indexed _user, uint _money, uint _time);\r\n    event splitOverEvent(address indexed _user, uint _shareAmount, uint _userShares, uint _time);\r\n    event userInversement(address indexed _user, uint _noOfShares, uint _amount, uint _time, uint investType);\r\n    event userWalletTransferEvent(address indexed _user, uint _amount, uint _percentage, uint _gasFee, uint _time);\r\n    event ownerWalletTransferEvent(address indexed _user, uint _percentage, uint _gasFee, uint _time);\r\n    \r\n    // On Deploy\r\n    constructor()public{\r\n        ownerWallet = msg.sender;\r\n        \r\n        oldEEEMoney1 = EEEMoney(0xE90606828f08FA31e97fC594EC549e6749732a90);\r\n        oldEEEMoney2 = EEEMoney(0x6C9b9166EBb363339Ec0CC9951b1BB277a38BeC2);\r\n        \r\n        UserStruct memory userStruct;\r\n        currUserID = oldEEEMoney2.currUserID();\r\n        poolMoney = poolMoney.add(oldEEEMoney1.poolMoney());\r\n        poolMoney = poolMoney.add(oldEEEMoney2.poolMoney());\r\n        \r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: 1,\r\n            referrerID: 0,\r\n            totalEarnedETH: 0,\r\n            previousShare: 0,\r\n            sharesHoldings: 0,\r\n            directShare: 0,\r\n            referralShare: 0,\r\n            poolHoldings: 0,\r\n            created:0,\r\n            referral: new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[1] = ownerWallet;\r\n    }\r\n    \r\n\r\n    function () external payable {\r\n        require(msg.sender == ownerWallet,\"Invalid wallet\");\r\n    }\r\n    \r\n    /**\r\n     * @dev To register the User\r\n     * @param _referrerID id of user/referrer \r\n     */\r\n    function regUser(uint _referrerID) public payable returns(bool){\r\n        require(\r\n            lockStatus == false,\r\n            \"Contract is locked\"\r\n        );\r\n        require(\r\n            !users[msg.sender].isExist && !syncIsExist1(msg.sender) && !syncIsExist2(msg.sender),\r\n            \"User exist\"\r\n        );\r\n        require(\r\n            _referrerID > 0 && _referrerID <= currUserID,\r\n            \"Incorrect referrer Id\"\r\n        );\r\n        require(\r\n            msg.value == invest,\r\n            \"Incorrect Value\"\r\n        );\r\n        \r\n        uint32 size;\r\n        \r\n        address useraddress = msg.sender;\r\n        \r\n        assembly {\r\n            size := extcodesize(useraddress)\r\n        }\r\n        \r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            totalEarnedETH: 0,\r\n            previousShare: 0,\r\n            sharesHoldings: 1,\r\n            directShare: 0,\r\n            referralShare: 0,\r\n            poolHoldings: 0,\r\n            created:now.add(qualify),\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n        \r\n        address referer;\r\n        \r\n        if(_referrerID <= oldEEEMoney1.currUserID())\r\n            referer = oldEEEMoney1.userList(_referrerID);\r\n        else if(_referrerID <= oldEEEMoney2.currUserID())\r\n            referer = oldEEEMoney2.userList(_referrerID);\r\n        else    \r\n            referer = userList[_referrerID];\r\n            \r\n        if(referer == oldEEEMoney1.ownerWallet())\r\n            referer = ownerWallet;    \r\n        \r\n        users[referer].sharesHoldings = users[referer].sharesHoldings.add(1);\r\n        users[referer].referralShare = users[referer].referralShare.add(1);\r\n        users[referer].referral.push(msg.sender);\r\n    \r\n        uint _value = invest.div(2);\r\n        \r\n        \r\n                \r\n        require(\r\n            address(uint160(referer)).send(_value),\r\n            \"Transaction failed\"\r\n        );\r\n        \r\n        users[referer].totalEarnedETH = users[referer].totalEarnedETH.add(_value);\r\n        \r\n        poolMoney = poolMoney.add(_value);\r\n        \r\n        emit poolMoneyEvent( msg.sender, _value, now);\r\n        emit regEvent(msg.sender, referer, now);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev To invest on shares\r\n     * @param _noOfShares No of shares \r\n     */\r\n    function investOnShare(uint _noOfShares) public payable returns(bool){\r\n        require(\r\n            lockStatus == false,\r\n            \"Contract is locked\"\r\n        );\r\n        \r\n        require(\r\n            msg.value == invest.mul(_noOfShares),\r\n            \"Incorrect Value\"\r\n        );\r\n        \r\n        require(users[msg.sender].isExist || syncIsExist1(msg.sender) || syncIsExist2(msg.sender),\"User not exist\");\r\n        \r\n        require(msg.sender != oldEEEMoney1.ownerWallet(), \"old ownerWallet\");\r\n        \r\n        uint32 size;\r\n        \r\n        address useraddress = msg.sender;\r\n        \r\n        assembly {\r\n            size := extcodesize(useraddress)\r\n        }\r\n        \r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        uint _value = (msg.value).div(2);\r\n        address _referer;\r\n        \r\n        uint referrerID = users[msg.sender].referrerID;\r\n        \r\n        if(referrerID == 0)\r\n            referrerID = syncReferrerID2(msg.sender);\r\n            \r\n        if(referrerID == 0)\r\n            referrerID = syncReferrerID1(msg.sender);\r\n        \r\n        \r\n        _referer = userList[referrerID];\r\n        \r\n        if(_referer == address(0))\r\n            _referer = oldEEEMoney2.userList(referrerID); \r\n            \r\n        if(_referer == address(0))\r\n            _referer = oldEEEMoney1.userList(referrerID);\r\n        \r\n        if((_referer == address(0)) || (_referer == oldEEEMoney1.ownerWallet()))\r\n            _referer = ownerWallet;\r\n            \r\n        require(\r\n            address(uint160(_referer)).send(_value),\r\n            \"Transaction failed\"\r\n        ); \r\n        \r\n        users[_referer].totalEarnedETH = users[_referer].totalEarnedETH.add(_value);\r\n        \r\n        users[msg.sender].directShare = users[msg.sender].directShare.add(_noOfShares);\r\n        users[msg.sender].sharesHoldings = users[msg.sender].sharesHoldings.add(_noOfShares);\r\n        \r\n        poolMoney = poolMoney.add(_value);\r\n        \r\n        emit poolMoneyEvent( msg.sender, _value, now);\r\n        emit userInversement( msg.sender, _noOfShares, msg.value, now, 1);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    function shareWithdraw(address[] memory _userAddress, uint[] memory _shareAmount, uint [] memory _shares, uint _gasFee) public returns(bool){\r\n        \r\n        require(msg.sender == ownerWallet,\"Only ownerWallet\");\r\n        \r\n        require((_userAddress.length == _shareAmount.length) && (_userAddress.length == _shares.length),\"invalid user length\");\r\n        \r\n        for(uint i=0;i<_userAddress.length;i++){\r\n        \r\n            require(users[_userAddress[i]].isExist || syncIsExist1(_userAddress[i]) || syncIsExist2(_userAddress[i]),\"User not exist\");\r\n            \r\n            require(_userAddress[i] != oldEEEMoney1.ownerWallet(), \"old contract ownerWallet\");\r\n            \r\n            require(_shareAmount[i] >= qualifiedPoolHolding,\"share amount is less than qualifed\");\r\n            \r\n            require(address(this).balance/2 >= _shareAmount[i],\"Insufficient balance\");\r\n            \r\n            require(\r\n                (users[_userAddress[i]].created < now) &&\r\n                (syncUserCreated1(_userAddress[i]) < now) &&\r\n                (syncUserCreated2(_userAddress[i]) < now),\r\n                \"user is not qualified to withdraw\"\r\n            );\r\n            \r\n            uint32 size;\r\n            \r\n            address _useradd = _userAddress[i]; \r\n            \r\n            assembly {\r\n                size := extcodesize(_useradd)\r\n            }\r\n            \r\n            require(size == 0, \"cannot be a contract\");\r\n            \r\n            address _referer;\r\n            \r\n            uint referrerID = users[_useradd].referrerID;\r\n            \r\n            if(referrerID == 0)\r\n                referrerID = syncReferrerID2(_useradd);\r\n                \r\n            if(referrerID == 0)\r\n                referrerID = syncReferrerID1(_useradd);\r\n            \r\n            \r\n            _referer = userList[referrerID];\r\n            \r\n            if(_referer == address(0))\r\n                _referer = oldEEEMoney2.userList(referrerID); \r\n                \r\n            if(_referer == address(0))\r\n                _referer = oldEEEMoney1.userList(referrerID);\r\n            \r\n            if((_referer == address(0)) || (_referer == oldEEEMoney1.ownerWallet()))\r\n                _referer = ownerWallet;\r\n            \r\n            uint _totalInvestingShare = _shareAmount[i].div(qualifiedPoolHolding);\r\n            uint _referervalue = invest.div(2);\r\n            uint _value = (_referervalue.mul(_totalInvestingShare));\r\n            \r\n            poolMoney = poolMoney.sub(_shareAmount[i]);\r\n            \r\n            users[_useradd].previousShare = users[_useradd].previousShare.add(_shares[i]);\r\n            \r\n            require(\r\n                address(uint160(_referer)).send(_value),\r\n                \"re-inverset referer 50 percentage failed\"\r\n            );\r\n            \r\n            users[_referer].totalEarnedETH = users[_referer].totalEarnedETH.add(_value);\r\n            \r\n            users[_useradd].directShare = users[_useradd].directShare.add(_totalInvestingShare);\r\n            users[_useradd].sharesHoldings = users[_useradd].sharesHoldings.add(_totalInvestingShare);\r\n            \r\n            poolMoney = poolMoney.add(_value);\r\n            \r\n            // wallet\r\n            uint _walletAmount = invest.mul(_totalInvestingShare);\r\n            uint _adminCommission = (_walletAmount.mul(feePercentage)).div(100 ether);\r\n            \r\n            _walletAmount = _walletAmount.sub(_adminCommission.add(_gasFee));\r\n            \r\n            require(\r\n                address(uint160(_useradd)).send(_walletAmount) &&\r\n                address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),\r\n                \"user wallet transfer failed\"\r\n            );  \r\n            \r\n            \r\n            emit splitOverEvent(_useradd, _shareAmount[i], _shares[i], now);\r\n            emit userInversement( _useradd, _totalInvestingShare, invest.mul(_totalInvestingShare), now, 2);\r\n            emit poolMoneyEvent( _useradd, _value, now);\r\n            emit userWalletTransferEvent(_useradd, _walletAmount, _adminCommission, _gasFee, now);\r\n            emit ownerWalletTransferEvent(_useradd, _adminCommission, _gasFee, now);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Contract balance withdraw\r\n     * @param _toUser  receiver addrress\r\n     * @param _amount  withdraw amount\r\n     */ \r\n    function failSafe(address payable _toUser, uint _amount) public returns (bool) {\r\n        require(msg.sender == ownerWallet, \"Only Owner Wallet\");\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev To lock/unlock the contract\r\n     * @param _lockStatus  status in bool\r\n     */\r\n    function contractLock(bool _lockStatus) public returns (bool) {\r\n        require(msg.sender == ownerWallet, \"Invalid ownerWallet\");\r\n\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n    \r\n    function changeOwnerWallet(address _ownerWallet)public returns(bool){\r\n        require(msg.sender == ownerWallet,\"only ownerWallet\");\r\n        require(_ownerWallet != address(0),\"invalid owner address\");\r\n        \r\n        ownerWallet = _ownerWallet;\r\n        \r\n        UserStruct memory userStruct;\r\n        \r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: 1,\r\n            referrerID: 0,\r\n            totalEarnedETH: users[msg.sender].totalEarnedETH,\r\n            previousShare: users[msg.sender].previousShare,\r\n            sharesHoldings:  users[msg.sender].sharesHoldings,\r\n            directShare: users[msg.sender].directShare,\r\n            referralShare: users[msg.sender].referralShare,\r\n            poolHoldings: users[msg.sender].poolHoldings,\r\n            created:users[msg.sender].created,\r\n            referral: new address[](0)\r\n        });\r\n        \r\n        users[ownerWallet]= userStruct;\r\n        userList[1] = ownerWallet;\r\n        \r\n        users[msg.sender].isExist = false;\r\n        users[msg.sender].id = 0;\r\n        users[msg.sender].sharesHoldings = 0;\r\n        users[msg.sender].previousShare = 0;\r\n        users[msg.sender].directShare = 0;\r\n        users[msg.sender].referralShare = 0;\r\n        users[msg.sender].totalEarnedETH = 0;\r\n        \r\n        for(uint i=0;i<users[msg.sender].referral.length;i++){\r\n            users[ownerWallet].referral.push(users[msg.sender].referral[i]);\r\n        }\r\n        \r\n        \r\n        users[msg.sender].referral = new address[](0);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    // sync functions\r\n    \r\n    function syncIsExist1(address _user) public view  returns(bool){\r\n        uint oldData;\r\n        bool isExist;\r\n        (isExist, \r\n            oldData, \r\n            oldData, \r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData) = \r\n            oldEEEMoney1.users(_user);\r\n            \r\n            return(isExist);\r\n    }\r\n    \r\n    function syncIsExist2(address _user) public view  returns(bool){\r\n        uint oldData;\r\n        bool isExist;\r\n        (isExist, \r\n            oldData, \r\n            oldData, \r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData) = \r\n            oldEEEMoney2.users(_user);\r\n            \r\n            return(isExist);\r\n    }\r\n    \r\n    function syncID1(address _user) public view  returns(uint){\r\n        uint oldData;\r\n        bool isExist;\r\n        uint ID;\r\n        (isExist, \r\n            ID, \r\n            oldData, \r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData) = \r\n            oldEEEMoney1.users(_user);\r\n            \r\n            return(ID);\r\n    }\r\n    \r\n    function syncID2(address _user) public view  returns(uint){\r\n        uint oldData;\r\n        bool isExist;\r\n        uint ID;\r\n        (isExist, \r\n            ID, \r\n            oldData, \r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData) = \r\n            oldEEEMoney2.users(_user);\r\n            \r\n            return(ID);\r\n    }\r\n    \r\n    function syncUserCreated1(address _user) public view  returns(uint){\r\n        uint oldData;\r\n        uint created;\r\n        bool isExist;\r\n        (isExist, \r\n            oldData, \r\n            oldData, \r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            created) = \r\n            oldEEEMoney1.users(_user);\r\n            \r\n            return(created);\r\n    }\r\n    \r\n    function syncUserCreated2(address _user) public view  returns(uint){\r\n        uint oldData;\r\n        uint created;\r\n        bool isExist;\r\n        (isExist, \r\n            oldData, \r\n            oldData, \r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            created) = \r\n            oldEEEMoney2.users(_user);\r\n            \r\n            return(created);\r\n    }\r\n    \r\n    function syncReferrerID1(address _user) public view  returns(uint){\r\n        uint oldData;\r\n        uint RefID;\r\n        bool isExist;\r\n        (isExist, \r\n            oldData, \r\n            RefID, \r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData) = \r\n            oldEEEMoney1.users(_user);\r\n            \r\n            return RefID;\r\n    }\r\n    \r\n    function syncReferrerID2(address _user) public view  returns(uint){\r\n        uint oldData;\r\n        uint RefID;\r\n        bool isExist;\r\n        (isExist, \r\n            oldData, \r\n            RefID, \r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData) = \r\n            oldEEEMoney2.users(_user);\r\n            \r\n            return RefID;\r\n    }\r\n    \r\n\r\n    function syncTotalEarned1(address _user) public view  returns(uint){\r\n        uint oldData;\r\n        uint totalEth;\r\n        bool isExist;\r\n        (isExist, \r\n            oldData, \r\n            oldData, \r\n            totalEth,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData) = \r\n            oldEEEMoney1.users(_user);\r\n            \r\n            return totalEth;\r\n    }\r\n    \r\n    function syncTotalEarned2(address _user) public view  returns(uint){\r\n        uint oldData;\r\n        uint totalEth;\r\n        bool isExist;\r\n        (isExist, \r\n            oldData, \r\n            oldData, \r\n            totalEth,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData,\r\n            oldData) = \r\n            oldEEEMoney2.users(_user);\r\n            \r\n            return totalEth;\r\n    }\r\n    \r\n    \r\n     function getTotalEarnedEther() public view returns(uint) {\r\n        uint totalEth;\r\n        \r\n        for( uint _userIndex=1;_userIndex<= currUserID;_userIndex++) {\r\n            address user = userList[_userIndex];\r\n            if(user == address(0))\r\n                user = oldEEEMoney1.userList(_userIndex);\r\n            \r\n            if(user == address(0))\r\n                user = oldEEEMoney2.userList(_userIndex);\r\n                \r\n            totalEth = totalEth.add((syncTotalEarned1(user).add(syncTotalEarned2(user))).add(users[user].totalEarnedETH));\r\n        }\r\n        \r\n        return totalEth;\r\n    }\r\n    \r\n    /**\r\n     * @dev To view the referrals\r\n     * @param _user  User address\r\n     */ \r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n    \r\n    \r\n    function syncRefferrals(address _user)public view returns(address[] memory,address[] memory,address[] memory){\r\n        return(users[_user].referral,oldEEEMoney1.viewUserReferral(_user),oldEEEMoney2.viewUserReferral(_user));\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ownerWalletTransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"poolMoneyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"splitOverEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_noOfShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investType\",\"type\":\"uint256\"}],\"name\":\"userInversement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"userWalletTransferEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerWallet\",\"type\":\"address\"}],\"name\":\"changeOwnerWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalEarnedEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfShares\",\"type\":\"uint256\"}],\"name\":\"investOnShare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldEEEMoney1\",\"outputs\":[{\"internalType\":\"contract EEEMoney\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldEEEMoney2\",\"outputs\":[{\"internalType\":\"contract EEEMoney\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"qualifiedPoolHolding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"qualify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shareAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"shareWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncID1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncID2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncIsExist1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncIsExist2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncReferrerID1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncReferrerID2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncRefferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncTotalEarned1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncTotalEarned2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncUserCreated1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"syncUserCreated2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnedETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesHoldings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolHoldings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EEEMoney","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://221cadb305a609f8bdaa797baa90ce734009859cd311d560aaf6e399fb2b98c2"}]}