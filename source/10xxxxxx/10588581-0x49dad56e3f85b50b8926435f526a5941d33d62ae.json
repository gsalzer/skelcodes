{"status":"1","message":"OK","result":[{"SourceCode":"/* Discussion:\r\n * https://github.com/b-u-i-d-l/staking\r\n */\r\n/* Description:\r\n * This proposal is using 7,100,000 $buidl\r\n * from the NERV DFO to vote a proposal in dfohub. If everything works fine, the configuration parameters for staking application will be set up in the dfohub core\r\n */\r\npragma solidity ^0.6.0;\r\n\r\ncontract Interoperability {\r\n\r\n\t//The Transfer OneTime Proposal in dfohub\r\n\taddress constant private PROPOSAL = 0x8adDa273abff4f1F71a0Dc394fE2DB2bD7b2027A;\r\n\t\r\n\t//The buidl Token\r\n\taddress constant private TOKEN = 0x44b6e3e85561ce054aB13Affa0773358D795D36D;\r\n\t\r\n\t//The amount of buidl Tokens used for vote\r\n\tuint256 constant private VOTE = 1000001000000000000000000;\r\n\t\r\n\t//Te NERV Wallet Address\r\n\taddress constant private WALLET = 0x25756f9C2cCeaCd787260b001F224159aB9fB97A;\r\n\t\r\n    function callOneTime(address proposal) public {\r\n\r\n\t\t//Transfer the buidl voting Tokens to this OneTime Proposal\r\n\t\tIMVDProxy(msg.sender).transfer(address(this), VOTE, TOKEN);\r\n\r\n\t\t//Vote to Accept the dfohub proposal\r\n\t\tIMVDFunctionalityProposal(PROPOSAL).accept(VOTE);\r\n\r\n\t\t//If the vote is enough to reach the HardCap, the proposal will give back buidl Voting Tokens to this OneTime\r\n\t\tIERC20 token = IERC20(TOKEN);\r\n\t\tuint256 balanceOf = token.balanceOf(address(this));\r\n\t\tif(balanceOf > 0) {\r\n\t\t\t//Give back buidl Voting Tokens to the BuidlersFund Wallet\r\n\t\t\ttoken.transfer(WALLET, balanceOf);\r\n\t\t}\r\n    }\r\n\r\n\t//This collateral function is needed to let everyone withraw the eventual staked voting tokens still held in the proposal and give back the to the BuidlersFund wallet\r\n\tfunction withdraw(bool terminateFirst) public {\r\n\t\t//Terminate or withraw the Proposal\r\n\t\tif(terminateFirst) {\r\n\t\t\tIMVDFunctionalityProposal(PROPOSAL).terminate();\r\n\t\t} else {\r\n\t\t\tIMVDFunctionalityProposal(PROPOSAL).withdraw();\r\n\t\t}\r\n\t\t//Give back BUIDL Voting Tokens to the BuildersFund Wallet\r\n\t\tIERC20 token = IERC20(TOKEN);\r\n\t\ttoken.transfer(WALLET, token.balanceOf(address(this)));\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IMVDProxy {\r\n\tfunction transfer(address receiver, uint256 value, address token) external;\r\n}\r\n\r\ninterface IMVDFunctionalityProposal {\r\n    function accept(uint256 amount) external;\r\n\tfunction withdraw() external;\r\n    function terminate() external;\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"callOneTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"terminateFirst\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Interoperability","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f2294194bf650ca6751c2786eb716d5db84693cb9d4eff8bc59549bb47682d88"}]}