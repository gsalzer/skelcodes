{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.25 <0.7.0;\r\n/**\r\n*\r\n*       ╔═══╦═╗╔═╦═══╦════╗╔╗╔═══╗\r\n*       ║╔═╗║║╚╝║║╔═╗║╔╗╔╗╠╝║║╔══╝\r\n*       ║╚══╣╔╗╔╗║╚═╝╠╝║║╚╩╗║║╚══╗\r\n*       ╚══╗║║║║║║╔╗╔╝█║║██║║║╔═╗║\r\n*       ║╚═╝║║║║║║║║╚╗█║║█╔╝╚╣╚═╝║\r\n*       ╚═══╩╝╚╝╚╩╝╚═╝█╚╝█╚══╩═══╝\r\n*  \r\n*   Copyright 2020, Maxim Vasilkov\r\n*\r\n*   This program is free software: you can redistribute it and/or modify\r\n*   it under the terms of the GNU General Public License as published by\r\n*   the Free Software Foundation, either version 3 of the License.\r\n*\r\n*   This program is distributed in the hope that it will be useful,\r\n*   but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n*   GNU General Public License for more details.\r\n*\r\n*   You should have received a copy of the GNU General Public License\r\n*   along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*\r\n*\r\n*   SMRT16 is a practical implementation of the idea of Decentralized Unmanaged Organization (DUO). \r\n*   The DUO is about that there are possible businesses which operate on-chain only and make profit absolutely without any external management.\r\n*   \r\n*   SMRT16 project consists of this smart contract \"SMRT16Ext\" (this file) and two another:\r\n*    1) PROFIT SHARING \"ProfitSharingSMRT16\"\r\n*    2) PROFIT ACCUMULATOR \"ProfitAccamulatorSMRT16\"\r\n*   These two are dependent and working together with the SMRT16Ext, covering the minimum of the functionality needed to create a fully operational business.\r\n*   \r\n*   SMRT16Ext first of all describes SMRT16 Token, which is a MiniMe Token (from Jordi Baylina) and which implements the ERC20 interface as well. \r\n*   As soon it is ERC20, it can be freely transferred, sold, bought and exchanged.  \r\n*   As soon it is MiniMe token, SMRT16 has the feature to remember users' stakes at any Ethereum block.\r\n*   The last needed to make this token to work like shares, so our DUO can pay dividends. \r\n*   \r\n*   The dividends need to be claimed and are not paid automatically. \r\n*   It accrued and paid in ETH cryptocurrency, monthly, proportionally to the stakes holded on the end of a month.\r\n*   \r\n*   The dividends at least once per year, otherwise it's recycled. Recycled amount treated as profit and comes to the next period for all shareholders.\r\n*   \r\n*   The big thing about SMRT16 is decentralization of marketing which is built in the token sale. \r\n*   Unlike other projects, SMRT16 is not going to raise any funds for the development. The funds from the token sale are instantly paid back \r\n*   to the project participants as marketing bonuses. \r\n*   The goal of the project is to raise the people's attention which later will be monetized for the long lasting profit again back for investors of the project.\r\n*   Token sale has a multi level referral program, which is that decentralized marketing mentioned above.\r\n*   It works the following way: every project participant has his own \"PersonalSMRT16\" Smart Contract address, which was created for him during the first token purchase. \r\n*   With this address the user becomes an agent of the project and now he can invite other people to buy SMRT16 tokens by paying ETH to his personal address.\r\n*   In this case the agent gets up to half of every sale transaction of his 1st level referrals. \r\n*   There are four levels of referrals. Every next level of referrals has the half of the previous level. \r\n*   This looks like 1/2, 1/4, 1/8 and 1/16 of the original transaction amount.\r\n*   All together it makes that 15/16 of the token price are spent to pay for the marketing efforts of the project investors. \r\n*   Note: everything paid in ETH instantly. \r\n*   The remaining 1/16 of the token price, together with any other incomes goes to \"ProfitAccamulatorSMRT16\" address and paid out as dividends at the end of every month.\r\n*   \r\n*   What after the token sale the project is going to make money with a number of coming soon Smart contracts. Let's like slots and so on. \r\n*   Which are supposed to get traffic by the efforts of all the big number of investors involved during the token sale and referral marketing campaign.\r\n*   \r\n*   \r\n*   Contact details of the author and some more details you can find on smrt16.com\r\n*\r\n*\r\n*/\r\n// ------------------------------------------------------------------------\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n// ------------------------------------------------------------------------\r\n/** \r\n*  @dev The actual token contract, the default controller is the msg.sender\r\n*  that deploys the contract, so usually this token will be deployed by a\r\n*  token controller contract, which Giveth will call a \"Campaign\"\r\n*/\r\ncontract MiniMeToken {\r\n\r\n    string public name;                   //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;                //Number of decimals of the smallest unit\r\n    string public symbol;                 //An identifier: e.g. REP\r\n    string public version = 'SMRT16_1.0'; //An arbitrary versioning scheme\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    constructor(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string memory _tokenName,\r\n        uint8  _decimalUnits,\r\n        string memory _tokenSymbol\r\n    ) public {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) public returns (bool success) {\r\n        require(allowed[_from][msg.sender] >= _amount);\r\n        allowed[_from][msg.sender] -= _amount;\r\n        \r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal returns(bool) {\r\n            // Do nothin if amount to trnasfer is 0\r\n           if (_amount == 0) {\r\n               return true;\r\n           }\r\n           // cant be the same block\r\n           require (parentSnapShotBlock <= block.number);\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           require ((_to != address(0)) && (_to != address(this)));\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer returns false\r\n           uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n           if (previousBalanceFrom < _amount) {\r\n               return false;\r\n           }\r\n\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require (previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           emit Transfer(_from, _to, _amount);\r\n\r\n           return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public view returns  (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public view returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != address(0)) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != address(0)) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string memory _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string memory _cloneTokenSymbol,\r\n        uint _snapshotBlock\r\n        ) public returns(address) {\r\n        if (_snapshotBlock == uint256(0)) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            address(this),\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol\r\n            );\r\n\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        emit NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) view internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal   {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) internal view returns(bool) {\r\n        uint size;\r\n        if (_addr == address(0)) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) private pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n}\r\n\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol\r\n    ) public returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            address(this),\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol\r\n            );\r\n\r\n        return newToken;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * The MiniMeSMRT16Token is MiniMeToken ERC20 contract\r\n */\r\ncontract MiniMeSMRT16Token is MiniMeToken, MiniMeTokenFactory {\r\n\r\n  constructor() MiniMeToken(address(this),address(0),uint256(0),\"SMRT16\",18,\"S16\")  public {\r\n    \r\n  }\r\n  \r\n}\r\n\r\n\r\n/**\r\n* @dev This contract creates PersonalSMRT16 contracts\r\n*/\r\ncontract SMRT16Factory {\r\n\r\n  // ref wallet => contract\r\n  mapping(address => address) private contracts;\r\n\r\n  // contract => ref wallet\r\n  mapping(address => address) private wallets;\r\n\r\n  // Event about a Referral bonus sent successfully\r\n  event PersonalSMRT16(address indexed referrer, address indexed smrt16contract);\r\n\r\n  function _createPersonalContract (address payable referrer, address payable smrt16) internal {\r\n      if (contracts[referrer] == address(0)) {\r\n        SMRT16Personal newContract = new SMRT16Personal(referrer, smrt16);\r\n        emit PersonalSMRT16(referrer, smrt16);\r\n        contracts[referrer] = address(newContract);\r\n        wallets[address(newContract)] = referrer;\r\n      }\r\n  }\r\n\r\n  function getPersonalContractAddress() external view returns (address) {\r\n    return contracts[msg.sender];\r\n  }\r\n\r\n\r\n  function getPersonalContractAddressOf(address wallet) external view returns (address) {\r\n    return contracts[wallet];\r\n  }\r\n\r\n  function getWalletOf(address contractAddres) external view returns (address) {\r\n    return wallets[contractAddres];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n* @dev main proxy smart contract\r\n*/\r\ncontract SMRT16Ext is MiniMeSMRT16Token, Ownable, SMRT16Factory {\r\n\r\n    \r\n    // limit possible Supply of this token, 160 millions tokens\r\n    uint constant internal _maxSupply = 160 * 10**6 * 10**18; \r\n\r\n    //  The price is constant untill the end of the token offering: 100 Tokens x 1 ETH\r\n    uint constant internal _price = 100;\r\n\r\n    //  Remember all the referrers\r\n    mapping(address => address payable) private referrers;\r\n\r\n    // Event about a Referral bonus sent successfully\r\n    event Bonus(address indexed from, address indexed to, uint256 value);\r\n\r\n    // the smrt16 companies address for bonuses\r\n    address payable private _root;\r\n\r\n\r\n    /**\r\n    * @dev Constructor accept addresses of other smart contracts of the project\r\n    * It could not be cteated striaght here due to amount of gas needed\r\n    */\r\n    constructor ()  public {\r\n        _root = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the token price.\r\n     */\r\n    function price() pure public returns(uint) {\r\n        return _price;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the token maxSupply.\r\n     */\r\n    function maxSupply() pure public returns(uint) {\r\n        return _maxSupply;\r\n    }  \r\n\r\n \r\n\r\n\r\n    /*\r\n    * @dev this function will be called after the SMRT16 smart contract deployed \r\n    * to pass its address here\r\n    */\r\n    function setProfitAddress (address payable _profitAddress) onlyOwner public {\r\n        _root = _profitAddress;\r\n    }\r\n    \r\n    /**\r\n    * @dev Getter to check the profit gathering address\r\n    */\r\n    function profitAddress() view public returns (address) {\r\n        return _root;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev because the situation with empty referrer will cause a crash during giving bonuses\r\n     * by default the address of the wallet will be used.\r\n     * @param query the address to get referrer of\r\n     **/\r\n    function getReferrer(address query) public view returns (address payable) {\r\n      if (referrers[query]==address(0)) {\r\n          // cant have no referrer\r\n          return _root;\r\n      }\r\n      return referrers[query];\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev fallback function\r\n    * You supposed to put the referrer address into msg.data\r\n    * Avoid to use this function for it's complexity, easier to use the Personal smart contracts\r\n    * But if referrer is there from previous purchase, it is safe to use without msg.data\r\n    */\r\n    function () external payable {\r\n        buyTokens(msg.sender, _bytesToAddress(bytes(msg.data)));\r\n    }\r\n\r\n    /**\r\n    * @dev Token sales function\r\n    */\r\n    function buyTokens(address payable buyer, address payable referrer) public payable {\r\n        require(buyer != address(0));\r\n\r\n        uint _tokenAmount = msg.value*_price;\r\n\r\n        _setReferrer(referrer);\r\n        _createPersonalContract(buyer, address(this));\r\n        _applyBonuses();\r\n        _mint(buyer, _tokenAmount);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev owner access to _mint\r\n    */\r\n    function mint(address _beneficiary, uint _tokenAmount) onlyOwner public {\r\n        _mint(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    \r\n    /**\r\n    * @dev Minting the tokens\r\n    */\r\n    function _mint(address _owner, uint _amount)  internal {\r\n        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\r\n        require (curTotalSupply + _amount <= _maxSupply); // Check for maxSupply\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require (previousBalanceTo + _amount > previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        emit Transfer(address(0), _owner, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev simple routine function, returns minimum between two given uint256 numbers\r\n    */\r\n    function _min(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a>b) return b;\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * @dev sets the referrer who will receive the bonus\r\n     * @param _referrer where address must have non zero balance\r\n     **/\r\n    function _setReferrer(address payable _referrer) internal returns (address) {\r\n      // let it set but not change\r\n      if(referrers[msg.sender]==address(0)) {\r\n        // referrer should be already a one who has non-zero balance\r\n        if(balanceOf(_referrer)>uint(0)) {\r\n            referrers[msg.sender] = _referrer;\r\n        }\r\n      }\r\n      return referrers[msg.sender];\r\n    }\r\n\r\n    \r\n    \r\n    /**\r\n    * @dev The function which does the actual referrals payments \r\n    * Logic: 1st receives 50%, 2nd - 25%, 3rd - 12.5%, 4th - 6.125%\r\n    * Emits Bonus event, notifiying about bonuses payed\r\n    **/\r\n    function _applyBonuses() internal {\r\n        // Amount of tokens to be sent for the price\r\n        uint256 d16 = msg.value*_price;\r\n\r\n        // The amount is too small to generate any bonuses (less than 16 Weis)\r\n        if(d16<16) return;\r\n\r\n        uint256 d8 = d16 / 2; \r\n        uint256 d4 = d8 / 2;\r\n        uint256 d2 = d4 / 2;\r\n        uint256 d1 = d2 / 2;\r\n\r\n\r\n        address payable r1 = getReferrer(msg.sender);\r\n        uint r1d8 = _min(d8, balanceOf(r1)/2)/_price;  \r\n        if(r1.send(r1d8)==true) {\r\n            emit Bonus(address(this), r1, r1d8);\r\n        }\r\n        address payable r2 = getReferrer(r1);\r\n        uint r2d4 = _min(d4, balanceOf(r2)/4)/_price;\r\n        if(r2.send(r2d4)==true) {\r\n            emit Bonus(address(this), r2, r2d4);\r\n        }\r\n        address payable r3 = getReferrer(r2);\r\n        uint r3d2 = _min(d2, balanceOf(r3)/8)/_price;\r\n        if(r3.send(r3d2)==true) {\r\n            emit Bonus(address(this), r3, r3d2);\r\n        }\r\n        address payable r4 = getReferrer(r3);\r\n        uint r4d1 = _min(d1, balanceOf(r4)/16)/_price;\r\n        if(r4.send(r4d1)==true) {\r\n            emit Bonus(address(this), r4, r4d1);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev transfer to profit gathering account, for the case if something remain\r\n    * to perform a manual clearence \r\n    */\r\n    function withdraw(uint256 amount) onlyOwner public returns(bool) {\r\n      _root.transfer(amount);\r\n      return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev converts string in bytes of the address to address data type\r\n    * @param b is a string in bytes to be converted\r\n    **/\r\n    function _bytesToAddress(bytes memory b) internal pure returns (address payable) {\r\n      uint result = 0;\r\n      for (uint i = b.length-1; i+1 > 0; i--) {\r\n        uint c = uint(uint8(b[i]));\r\n        uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\r\n        result += to_inc;\r\n      }\r\n      return address(result);\r\n    }\r\n  \r\n}\r\n\r\n\r\n/**\r\n* @dev the main bone which makes referral program easy \r\n*/\r\ncontract SMRT16Personal {\r\n  // address of the guy who invated you\r\n  address payable private _referrer;\r\n\r\n  // reference to the parent smart contract\r\n  SMRT16Ext private _smrt16;\r\n\r\n  // Event which notifies about new Personal Smart contract created\r\n  event CreatedSMRT16Personal(address indexed addr);\r\n\r\n  /**\r\n  * @dev every participant of the project will have his own smart contract\r\n  * which he will be able to share to his referrals\r\n  * this smart contract does proxy sales of the tokens \r\n  * and unsure that the referrals structure is right\r\n  */\r\n  constructor(address payable referrer, address payable smrt16) public {\r\n    _referrer = referrer;\r\n    _smrt16 = SMRT16Ext(smrt16);\r\n    emit CreatedSMRT16Personal(address(this));\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n  * @dev fallback function\r\n  */\r\n  function () external payable {\r\n      _smrt16.buyTokens.value(msg.value)(msg.sender, _referrer);\r\n  }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"smrt16contract\",\"type\":\"address\"}],\"name\":\"PersonalSMRT16\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cloneTokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_cloneDecimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_cloneTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"internalType\":\"contract MiniMeToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPersonalContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getPersonalContractAddressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddres\",\"type\":\"address\"}],\"name\":\"getWalletOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"internalType\":\"contract MiniMeToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_profitAddress\",\"type\":\"address\"}],\"name\":\"setProfitAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"contract MiniMeTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SMRT16Ext","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5c3c66ac5830ee70cb95515f8b31399fc714a65fb42cc34b532be46376b77ebd"}]}