{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-09-30\r\n*/\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;}\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");}\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;}\r\n}\r\n\r\ninterface IERC20 {\r\n /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function mint(address account, uint256 amount) external;\r\n\r\n}\r\n\r\ninterface Uniswap{\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface Pool{\r\n    function primary() external view returns (address);\r\n}\r\n\r\ncontract Poolable{\r\n    \r\n    address payable internal constant _POOLADDRESS = 0xE0DD8c1E6145bDB2C1925Af1DF16a1ecAAC75621;\r\n    function primary() private view returns (address) {\r\n        return Pool(_POOLADDRESS).primary();\r\n    }\r\n    \r\n    modifier onlyPrimary() {\r\n        require(msg.sender == primary(), \"Caller is not primary\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Staker is Poolable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint constant internal DECIMAL = 10**18;\r\n    uint constant public INF = 33136721748;\r\n\r\n    uint private _rewardValue = 10**21;\r\n    \r\n    mapping (address => uint256) public  timePooled;\r\n    mapping (address => uint256) private internalTime;\r\n    mapping (address => uint256) private LPTokenBalance;\r\n    mapping (address => uint256) private rewards;\r\n    mapping (address => uint256) private referralEarned;\r\n\r\n    address public orbAddress;\r\n    \r\n    address constant public UNIROUTER         = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant public FACTORY           = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address          public WETHAddress       = Uniswap(UNIROUTER).WETH();\r\n    \r\n    bool private _unchangeable = false;\r\n    bool private _tokenAddressGiven = false;\r\n    bool public priceCapped = false;\r\n    \r\n    uint public creationTime = now;\r\n    \r\n    receive() external payable {\r\n        \r\n       if(msg.sender != UNIROUTER){\r\n           stake();\r\n       }\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        (bool success, ) = recipient.call{ value: amount }(\"\"); \r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    //If true, no changes can be made\r\n    function unchangeable() public view returns (bool){\r\n        return _unchangeable;\r\n    }\r\n    \r\n    function rewardValue() public view returns (uint){\r\n        return _rewardValue;\r\n    }\r\n    \r\n    //THE ONLY ADMIN FUNCTIONS vvvv\r\n    //After this is called, no changes can be made\r\n    function makeUnchangeable() public onlyPrimary{\r\n        _unchangeable = true;\r\n    }\r\n    \r\n    //Can only be called once to set token address\r\n    function setTokenAddress(address input) public onlyPrimary{\r\n        require(!_tokenAddressGiven, \"Function was already called\");\r\n        _tokenAddressGiven = true;\r\n        orbAddress = input;\r\n    }\r\n    \r\n    //Set reward value that has high APY, can't be called if makeUnchangeable() was called\r\n    function updateRewardValue(uint input) public onlyPrimary {\r\n        require(!unchangeable(), \"makeUnchangeable() function was already called\");\r\n        _rewardValue = input;\r\n    }\r\n    //Cap token price at 1 eth, can't be called if makeUnchangeable() was called\r\n    function capPrice(bool input) public onlyPrimary {\r\n        require(!unchangeable(), \"makeUnchangeable() function was already called\");\r\n        priceCapped = input;\r\n    }\r\n    //THE ONLY ADMIN FUNCTIONS ^^^^\r\n    \r\n    function sqrt(uint y) public pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n  \r\n    function stake() public payable{\r\n        address staker = msg.sender;\r\n        //require(creationTime + 2 hours <= now, \"It has not been 2 hours since contract creation yet\");\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(orbAddress, WETHAddress);\r\n        \r\n        if(price() >= (1.05 * 10**18) && priceCapped){\r\n           \r\n            uint t = IERC20(orbAddress).balanceOf(poolAddress); //token in uniswap\r\n            uint a = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n            uint x = (sqrt(9*t*t + 3988000*a*t) - 1997*t)/1994;\r\n            \r\n            IERC20(orbAddress).mint(address(this), x);\r\n            \r\n            address[] memory path = new address[](2);\r\n            path[0] = orbAddress;\r\n            path[1] = WETHAddress;\r\n            IERC20(orbAddress).approve(UNIROUTER, x);\r\n            Uniswap(UNIROUTER).swapExactTokensForETH(x, 1, path, _POOLADDRESS, INF);\r\n        }\r\n        \r\n        sendValue(_POOLADDRESS, address(this).balance/2);\r\n        \r\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        uint tokenAmount = IERC20(orbAddress).balanceOf(poolAddress); //token in uniswap\r\n      \r\n        uint toMint = (address(this).balance.mul(tokenAmount)).div(ethAmount);\r\n        IERC20(orbAddress).mint(address(this), toMint);\r\n        \r\n        uint poolTokenAmountBefore = IERC20(poolAddress).balanceOf(address(this));\r\n        \r\n        uint amountTokenDesired = IERC20(orbAddress).balanceOf(address(this));\r\n        IERC20(orbAddress).approve(UNIROUTER, amountTokenDesired ); //allow pool to get tokens\r\n        Uniswap(UNIROUTER).addLiquidityETH{ value: address(this).balance }(orbAddress, amountTokenDesired, 1, 1, address(this), INF);\r\n        \r\n        uint poolTokenAmountAfter = IERC20(poolAddress).balanceOf(address(this));\r\n        uint poolTokenGot = poolTokenAmountAfter.sub(poolTokenAmountBefore);\r\n        \r\n        rewards[staker] = rewards[staker].add(viewRecentRewardTokenAmount(staker));\r\n        timePooled[staker] = now;\r\n        internalTime[staker] = now;\r\n    \r\n        LPTokenBalance[staker] = LPTokenBalance[staker].add(poolTokenGot);\r\n    }\r\n\r\n    function withdrawLPTokens(uint amount) public {\r\n        require(timePooled[msg.sender] + 3 days <= now, \"It has not been 3 days since you staked yet\");\r\n        \r\n        rewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\r\n        LPTokenBalance[msg.sender] = LPTokenBalance[msg.sender].sub(amount);\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(orbAddress, WETHAddress);\r\n        IERC20(poolAddress).transfer(msg.sender, amount);\r\n        \r\n        internalTime[msg.sender] = now;\r\n    }\r\n    \r\n    function withdrawRewardTokens(uint amount) public {\r\n        require(timePooled[msg.sender] + 3 days <= now, \"It has not been 3 days since you staked yet\");\r\n        \r\n        rewards[msg.sender] = rewards[msg.sender].add(viewRecentRewardTokenAmount(msg.sender));\r\n        internalTime[msg.sender] = now;\r\n        \r\n        uint removeAmount = ethtimeCalc(amount);\r\n        rewards[msg.sender] = rewards[msg.sender].sub(removeAmount);\r\n       \r\n        IERC20(orbAddress).mint(msg.sender, amount);\r\n    }\r\n    \r\n    function viewRecentRewardTokenAmount(address who) internal view returns (uint){\r\n        return (viewLPTokenAmount(who).mul( now.sub(internalTime[who]) ));\r\n    }\r\n    \r\n    function viewRewardTokenAmount(address who) public view returns (uint){\r\n        return earnCalc( rewards[who].add(viewRecentRewardTokenAmount(who)) );\r\n    }\r\n    \r\n    function viewLPTokenAmount(address who) public view returns (uint){\r\n        return LPTokenBalance[who];\r\n    }\r\n    \r\n    function viewPooledEthAmount(address who) public view returns (uint){\r\n      \r\n        address poolAddress = Uniswap(FACTORY).getPair(orbAddress, WETHAddress);\r\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        \r\n        return (ethAmount.mul(viewLPTokenAmount(who))).div(IERC20(poolAddress).totalSupply());\r\n    }\r\n    \r\n    function viewPooledTokenAmount(address who) public view returns (uint){\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(orbAddress, WETHAddress);\r\n        uint tokenAmount = IERC20(orbAddress).balanceOf(poolAddress); //token in uniswap\r\n        \r\n        return (tokenAmount.mul(viewLPTokenAmount(who))).div(IERC20(poolAddress).totalSupply());\r\n    }\r\n    \r\n    function price() public view returns (uint){\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(orbAddress, WETHAddress);\r\n        \r\n        uint ethAmount = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        uint tokenAmount = IERC20(orbAddress).balanceOf(poolAddress); //token in uniswap\r\n        \r\n        return (DECIMAL.mul(ethAmount)).div(tokenAmount);\r\n    }\r\n    \r\n    function ethEarnCalc(uint eth, uint time) public view returns(uint){\r\n        \r\n        address poolAddress = Uniswap(FACTORY).getPair(orbAddress, WETHAddress);\r\n        uint totalEth = IERC20(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        uint totalLP = IERC20(poolAddress).totalSupply();\r\n        \r\n        uint LP = ((eth/2)*totalLP)/totalEth;\r\n        \r\n        return earnCalc(LP * time);\r\n    }\r\n\r\n    function earnCalc(uint LPTime) public view returns(uint){\r\n        return ( rewardValue().mul(LPTime)  ) / ( 31557600 * DECIMAL );\r\n    }\r\n    \r\n    function ethtimeCalc(uint orb) internal view returns(uint){\r\n        return ( orb.mul(31557600 * DECIMAL) ).div( rewardValue() );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"input\",\"type\":\"bool\"}],\"name\":\"capPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LPTime\",\"type\":\"uint256\"}],\"name\":\"earnCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ethEarnCalc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeUnchangeable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceCapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timePooled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unchangeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"updateRewardValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewLPTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewPooledEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewPooledTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"viewRewardTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Staker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0e45c0f2317bb79922fc273f458f2d15cadde16f7f9d6e32248d622eb2380508"}]}