{"status":"1","message":"OK","result":[{"SourceCode":"//Uniswap by symbol (v2)\r\n//Better uniswap v2 oracle for orfeed\r\n//v0.5.0+commit.1d4f565a.js&appVersion=0.7.7\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate (  string calldata fromSymbol,  string calldata toSymbol, string calldata venue, uint256  amount ) external view returns ( uint256 );\r\n      function getTokenAddress ( string calldata symbol ) external view returns ( address );\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    \r\n    \r\n   \r\n \r\n    \r\n   \r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n  \r\n  \r\n    contract oracleInfo {\r\n        \r\n    \r\n      address owner; \r\n      OrFeedInterface orfeed = OrFeedInterface(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\r\n      \r\n      address uniswapAddress = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\r\n        IUniswapV2Router01 uniswap = IUniswapV2Router01(uniswapAddress);\r\n\r\n\r\n      modifier onlyOwner() {\r\n            if (msg.sender != owner) {\r\n                revert();\r\n            }\r\n             _;\r\n        }\r\n        \r\n      constructor() public payable {\r\n            owner = msg.sender; \r\n           \r\n        }\r\n        \r\n        \r\n    function getPriceFromOracle(string memory fromParam, string memory  toParam, string memory side, uint amount) public view returns (uint256 amounts1){  \r\n          \r\n        \r\n        address sellToken = orfeed.getTokenAddress(fromParam);\r\n        address buyToken = orfeed.getTokenAddress(toParam);\r\n        \r\n        address [] memory addresses = new address[](2);\r\n      \r\n       addresses[0] = sellToken;\r\n       addresses[1] = buyToken;\r\n      \r\n       \r\n        uint256 [] memory amounts = getPriceFromOracleActual(addresses, amount );\r\n        uint256 resultingTokens = amounts[1];\r\n        return resultingTokens;\r\n          \r\n    }\r\n      \r\n    function getPriceFromOracleActual(address  [] memory theAddresses, uint amount) public view returns (uint256[] memory amounts1){  \r\n       \r\n      \r\n       \r\n        uint256 [] memory amounts = uniswap.getAmountsOut(amount,theAddresses );\r\n       \r\n        return amounts;\r\n          \r\n    }\r\n    \r\n \r\n      function changeOwner(address newOwner) public onlyOwner returns(bool){\r\n          owner = newOwner;\r\n          return true;\r\n      }\r\n      \r\n     function withdrawBalance() public onlyOwner returns(bool) {\r\n        uint amount = address(this).balance;\r\n        msg.sender.transfer(amount);\r\n        return true;\r\n\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fromParam\",\"type\":\"string\"},{\"name\":\"toParam\",\"type\":\"string\"},{\"name\":\"side\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceFromOracle\",\"outputs\":[{\"name\":\"amounts1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"theAddresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceFromOracleActual\",\"outputs\":[{\"name\":\"amounts1\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"oracleInfo","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ec8e9d0a4006fa015ef6cdffbfdddf390911d6db6ec28313fe302312749a3ec3"}]}