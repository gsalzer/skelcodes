{"status":"1","message":"OK","result":[{"SourceCode":"/**!\r\n* @mainpage\r\n* @brief     DDL合约文件\r\n* @details  DDL合约逻辑实现文件\r\n* @author     Jason\r\n* @date        2020-9-20\r\n* @version     V1.0\r\n* @copyright    Copyright (c) 2019-2020   \r\n**********************************************************************************\r\n* @attention\r\n* 编译工具: http://remix.ethereum.org\r\n* 编译参数: Enable optimization, EVM Version: petersburg, 默认EVM版本调用address(this).balance时会 throws error invalid opcode SELFBALANCE \\n\r\n* 编译器版本：solidity   0.7.0 以上版本\r\n* @par 修改日志:\r\n* <table>\r\n* <tr><th>Date        <th>Version  <th>Author    <th>Description\r\n* <tr><td>2020-9-15  <td>1.0      <td>Jason  <td>创建初始版本\r\n* </table>\r\n*\r\n**********************************************************************************\r\n*/\r\npragma solidity ^ 0.7.0;\r\n\r\ncontract DDLClub {\r\n\tusing SafeMath64 for uint64;\r\n\t//Wei转换\r\n\tuint64 constant private WEI = 1000000000000000000;\r\n\r\n\t//Wei转换到 单位：eth*10^2 即 保留小数点后2位\r\n\tuint64 constant private WEI_ETH2 = 10000000000000000;\r\n\r\n\t//Wei转换到 单位：eth*10^4 即 保留小数点后4位\r\n\tuint64 constant private WEI_ETH4 = 100000000000000;\r\n\r\n\t//私网测试地址\r\n\taddress constant private ROOT_ADDR = 0x5422d363BFBee232382eA65f6a4C0c400b99A6ed;\r\n\r\n\taddress constant private ADMIN_ADDR = 0xa04c077C326C019842fcA35B2Edb74Cd059d8755;\r\n\t//操作员地址，由管理员设置\r\n\taddress private op_addr = 0xeD5830B3cbDdcecB11f8D9F5FC5bfC2DB89dd2Ae;\r\n\r\n\tuint32 constant private TIME_BASE = 1598889600; //基准时间 2020-09-01 00:00:00\r\n\r\n \tuint16 constant private MAX_UINT16 = 65535;\r\n\t//高阶人才补助，级差值\r\n\tuint16[16] private ADV_ALLOWANCE = [uint16(0),25, 50,75,100,125,150,175,200,225,250,275,300,325,350,375];//高阶人才补助，级差\r\n\r\n\t// 定义事件\r\n    event ev_join(address indexed addr, address indexed paddr, address indexed refaddr, uint32 sidx, uint32 playid, uint32 nlayer, uint256 _value); //会员参与游戏事件\r\n    event ev_adv_up(address indexed addr,  uint32 playid, uint32 _oldLevel, uint32 _newLevel); //高阶人才升级事件\r\n    event ev_vip_up(address indexed addr,  uint32 playid, uint64 _timestamp, uint32 _ratio); //VIP升级事件\r\n\tevent ev_set_vip18_bonus(address indexed addr,  uint32 playId, uint16 burnTimes, uint16 slideTimes, uint64 val, string comment); //设置VIP18收益事件\r\n\tevent ev_bonus(address indexed addr,  uint32 playid,  address indexed saddr,  uint64 val, string comment); //获得收益事件\r\n    event ev_withdraw(address indexed addr,   uint32 playid,  uint256 _value, string comment); //提现\r\n \tevent ev_op_setting(address indexed addr, uint32 playid, string comment); //后台操作员设置参数\r\n\r\n\t//定义会员结构体\r\n\tstruct Player {\r\n\t\t//在父连接点的位置（0-2）\r\n\t\tuint8 pindex;\r\n\t\t//下一个伞下成员将要存放的位置系统号（0-2）\r\n\t\tuint8 next_idx;\r\n\t\t//高阶身份级别(0:普通,1:初级人才,2:高阶人才,3:一星,4-二星,5-三星,6-四星,7-五星,8-银级,9-金级,10-铂金,11-钻石,12-金钻,13-蓝宝石,14-翡翠级,15-荣誉星钻级)\r\n\t\tuint8 adv_level; \r\n\t\t//下属2层总会员数\r\n\t\tuint8 m2_count;\r\n\t\t//下属3层总会员数 Number of members on begin 4 floor\r\n\t\tuint8 m3_count;\r\n\t\t//会员当前在VIP级别上的奖金比例 单位：*100\r\n\t\tuint8 vip_ratio;\r\n \r\n \t\t//随机认证码，用于中心化系统绑定\r\n\t\tuint16 auth_code;\r\n\t\t//总被烧伤次数\r\n\t\tuint16 burn_times;\r\n\t\t//获得滑落奖金次数\r\n\t\tuint16 slide_times;\r\n\r\n\t\t//三个系统高阶人才数\r\n\t\tuint16[3] advN;\r\n\t\t//三个系统上的VIP用户数\r\n\t\tuint16[3] vipN;\r\n\r\n\t\t//会员加入时间，相对于基准时间TIME_BASE\r\n\t\tuint32 join_timestamp;\r\n\t \t//会员vip升级时间，相对于基准时间TIME_BASE\r\n\t\tuint32 vip_up_timestamp;\r\n\r\n\t\t\r\n\t\t//会员代数，从1开始\r\n\t\tuint32 gen_num;\r\n \t\t//会员伞下层数\r\n\t\tuint32 floors;\r\n\t\t//会员推荐人数\r\n\t\tuint32 ref_num; \r\n\r\n\t\t//会员连接ID，数组下标\r\n\t\tuint32 parent_id;\r\n\t\t//会员推荐人ID，数组下标\r\n\t\tuint32 ref_id;\r\n\r\n\t\t//会员伞下团队人数（不包括自己）\r\n\t\tuint32 team_num;\r\n\r\n\t\t//下一个伞下成员将要存放的位置\r\n\t\tuint32 next_id;\r\n\t\t//会员子代，三轨\r\n\t\tuint32[3] children;\r\n\r\n\t\t//会员已实现收益(1元奖金+直接推荐费) eth*10^4 保留小数点后4位\r\n\t\tuint64 base_earnings;\r\n\t\t//高阶人才补助收益 eth*10^4 保留小数点后4位\r\n\t\tuint64 adv_earnings;\r\n\t\t//会员第18层vip收益 eth*10^4 保留小数点后4位\r\n\t\tuint64 vip18_earnings;\r\n\t\t//会员vip收益 eth*10^4 保留小数点后4位\r\n\t\tuint64 vip_earnings;\r\n\t\t//会员已提现收益 eth*10^4 保留小数点后4位\r\n\t\tuint64 withdraw_earnings;\r\n\t}\r\n \r\n\tPlayer[] players;\r\n\tmapping (address => uint32) public playerIdx;\r\n    mapping (uint32 => address) public id2Addr;\r\n \r\n\t/**\r\n\t* 获取会员排位信息\r\n\t*/\r\n  \tfunction get_player_pos_info(address addr) external view \r\n  \treturns(\r\n  \t\taddress parent_addr, //会员连接人地址\r\n  \t\taddress ref_addr, //会员推荐人地址\r\n\t\taddress children1, //会员子接点1地址\r\n\t\taddress children2, //会员子接点2地址\r\n\t\taddress children3, //会员子接点3地址\r\n\t\tuint8 adv_level,//高阶身份级别(0-普通,1-高阶人才,2- 一星高阶人才,3-二星高阶人才,4-三星高阶人才,5-四星高阶人才,6-五星高阶人才)\r\n\t\tuint8 vip_ratio,//VIP的奖金比例 单位：*100\r\n\t\tuint8 pindex, //在父连接点的位置（0-2）\r\n\t\tuint8 nextidx, //下一个伞下成员将要存放的位置的系统号（0-2）\r\n\t\tuint32 gen_num, //会员代数，从1开始 \r\n\t\tuint32 nextid,//下一个伞下成员将要存放的位置\r\n\t\tuint32 playerId //会员Id\r\n  \t\t){\r\n\t \t\tuint32 playId = playerIdx[addr];\r\n\t\t\tif(playId == 0){//如果playId为0, 说明用户不存在\r\n\t\t\t\treturn(address(0), address(0), address(0), address(0), address(0), 0, 0, 0, 0, 0, 0, 0); //the address have not join the game\r\n\t\t\t}\r\n\t\t\tPlayer storage _p = players[playId];\r\n \t\t\treturn(id2Addr[_p.parent_id], id2Addr[_p.ref_id], \r\n \t\t\t\t_p.children[0] > 0 ? id2Addr[_p.children[0]]:address(0), \r\n \t\t\t\t_p.children[1] > 0 ? id2Addr[_p.children[1]]:address(0), \r\n \t\t\t\t_p.children[2] > 0 ? id2Addr[_p.children[2]]:address(0), \r\n \t\t\t\t_p.adv_level,_p.vip_ratio,_p.pindex, _p.next_idx, _p.gen_num, _p.next_id, playId);\r\n\t}\r\n\r\n\t/**\r\n\t* 获取会员排位 Id 信息\r\n\t*/\r\n  \tfunction get_player_pos_id_info(uint32 playId) external view \r\n  \treturns(\r\n  \t\tuint8 pindex, //在父连接点的位置（0-2）\r\n\t\tuint8 nextidx, //下一个伞下成员将要存放的位置的系统号（0-2）\r\n\t\tuint8 adv_level,//高阶身份级别(0-普通,1-高阶人才,2- 一星高阶人才,3-二星高阶人才,4-三星高阶人才,5-四星高阶人才,6-五星高阶人才)\r\n\t\tuint8 vip_ratio,//VIP的奖金比例 单位：*100\r\n\t\tuint32 gen_num, //会员代数，从1开始 \r\n  \t\tuint32 parentId, //会员连接人Id\r\n  \t\tuint32 refId, //会员推荐人Id\r\n\t\tuint32 children1, //会员子接点1 Id\r\n\t\tuint32 children2, //会员子接点2  Id\r\n\t\tuint32 children3, //会员子接点3  Id\r\n\t\tuint32 nextid,//下一个伞下成员将要存放的位置\r\n\t\taddress addr //会员地址\r\n  \t\t){\r\n\t\t\tif(playId < 1 || playId >= players.length){//说明用户不存在\r\n\t\t\t\treturn(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, address(0)); //the address have not join the game\r\n\t\t\t}\r\n\t\t\tPlayer storage _p = players[playId];\r\n\t\t\taddr = id2Addr[playId];\r\n \t\t\treturn(_p.pindex, _p.next_idx,_p.adv_level,_p.vip_ratio, _p.gen_num, _p.parent_id, _p.ref_id, _p.children[0], _p.children[1], _p.children[2], _p.next_id, addr);\r\n\t}\r\n\r\n\t/**\r\n\t* 获取会员总人数\r\n\t*/\r\n  \tfunction get_player_count() external view \r\n  \treturns(uint32){\r\n  \t\treturn uint32(players.length - 1);\r\n  \t}\r\n\t/**\r\n\t* 获取会员基本信息\r\n\t*/\r\n  \tfunction get_player_base_info(address addr) external view \r\n  \treturns(\r\n\t\tuint8 adv_level,//高阶身份级别(0-普通,1-高阶人才,2- 一星高阶人才,3-二星高阶人才,4-三星高阶人才,5-四星高阶人才,6-五星高阶人才)\r\n\t\tuint8 vip_ratio,//VIP的奖金比例 单位：*100\r\n\t\tuint32 ref_num,//会员推荐人数\r\n\t\tuint32 floors, //会员伞下层数\r\n\t\tuint32 playerId, //会员Id\r\n\t\tuint32 team_num,//会员伞下团队人数（不包括自己）\r\n\t\tuint64 join_timestamp //会员加入时间，相对于基准时间TIME_BASE\r\n  \t\t){\r\n\t \t\tuint32 playId = playerIdx[addr];\r\n\t\t\tif(playId == 0){//如果playId为0, 说明用户不存在\r\n\t\t\t\treturn(0, 0, 0, 0, 0, 0, 0); //the address have not join the game\r\n\t\t\t}\r\n\t\t\tPlayer storage _p = players[playId];\r\n \t\t\treturn( _p.adv_level, _p.vip_ratio, _p.ref_num,  _p.floors, playId, _p.team_num, uint64(_p.join_timestamp+TIME_BASE));\r\n\t}\r\n\r\n\t/**\r\n\t* 获取会员收益信息\r\n\t*/\r\n  \tfunction get_player_earning_info(address addr) external view \r\n  \treturns(\r\n  \t\tuint16 burn_times,//总被烧伤次数\r\n\t\tuint16 slide_times,//获得滑落奖金次数\r\n\t\tuint32 playerId, //会员Id\r\n\t\tuint64 base_earnings, //会员已实现收益(1元奖金+直接推荐费)\r\n\t\tuint64 adv_earnings, //高阶人才补助收益 eth*10^4 保留小数点后4位\r\n\t\tuint64 vip_earnings, //会员vip收益 eth*10^4 保留小数点后4位\r\n\t\tuint64 vip18_earnings, //会员在18层上获得的vip收益 eth*10^4 保留小数点后4位\r\n\t\tuint64 withdraw_earnings//会员已提现收益 eth*10^4 保留小数点后4位\r\n  \t\t){\r\n\t \t\tplayerId = playerIdx[addr];\r\n\t\t\tif(playerId == 0){//如果playId为0, 说明用户不存在\r\n\t\t\t\treturn(0, 0, 0, 0, 0, 0, 0, 0);\r\n\t\t\t}\r\n\t\t\tPlayer storage _p = players[playerId];\r\n \t\t\treturn(_p.burn_times, _p.slide_times, playerId, _p.base_earnings, _p.adv_earnings, _p.vip_earnings, _p.vip18_earnings, _p.withdraw_earnings);\r\n\t}\r\n\r\n\t/**\r\n\t* 获取会员vip信息\r\n\t*/\r\n  \tfunction get_player_vip_info(address addr) external view \r\n  \treturns(\r\n\t\tuint8 ratio,//VIP的奖金比例 单位：*100\r\n\t\tuint16 vip_num1,//第一条线VIP人数\r\n\t\tuint16 vip_num2,//第二条线VIP人数\r\n\t\tuint16 vip_num3,//第三条线VIP人数\r\n\t\tuint32 playerId, //会员Id\r\n\t\tuint64 vipearnings,//在VIP级别上获得的收益 单位：eth*10000\r\n\t\tuint64 vip18earnings,//在18层上获得的收益 单位：eth*10000\r\n\t\tuint64 vip_up_timestamp //会员vip升级时间，相对于基准时间TIME_BASE\r\n  \t\t){\r\n\t \t\tplayerId = playerIdx[addr];\r\n\t\t\tif(playerId == 0){//如果playId为0, 说明用户不存在\r\n\t\t\t\treturn(0, 0, 0, 0, 0, 0, 0, 0); //the address have not join the game\r\n\t\t\t}\r\n\t\t\tPlayer storage _p = players[playerId];\r\n \t\t\treturn(_p.vip_ratio, _p.vipN[0], _p.vipN[1], _p.vipN[2], playerId, _p.vip_earnings, _p.vip18_earnings, _p.vip_up_timestamp == 0 ? 0: uint64(_p.vip_up_timestamp+TIME_BASE));\r\n\t}\r\n\r\n\t/**\r\n\t* 获取高阶会员信息\r\n\t*/\r\n  \tfunction get_player_adv_info(address addr) external view \r\n  \treturns(\r\n\t\tuint8 level,//高阶身份级别(0-普通,1-高阶人才,2- 一星高阶人才,3-二星高阶人才,4-三星高阶人才,5-四星高阶人才,6-五星高阶人才)\r\n\t\tuint8 m2_count,//下属2层总会员数\r\n\t\tuint8 m3_count,//下属3层总会员数\r\n\t\tuint16 advN1,//第一条线上高阶人才数\r\n\t\tuint16 advN2,//第二条线上高阶人才数\r\n\t\tuint16 advN3,//第三条线上高阶人才数\r\n\t\tuint32 playerId //会员Id\r\n  \t\t){\r\n\t \t\tplayerId = playerIdx[addr];\r\n\t\t\tif(playerId == 0){//如果playId为0, 说明用户不存在\r\n\t\t\t\treturn(0, 0, 0, 0, 0, 0, 0); //the address have not join the game\r\n\t\t\t}\r\n\t\t\tPlayer storage _p = players[playerId];\r\n \t\t\treturn( _p.adv_level, _p.m2_count, _p.m3_count, _p.advN[0], _p.advN[1],  _p.advN[2], playerId);\r\n\t}\r\n \r\n\tconstructor() public {\r\n\t\tPlayer memory _player = Player({\r\n            parent_id: 0,\r\n            ref_id:0, \r\n\t \t\tjoin_timestamp: uint32(block.timestamp-TIME_BASE),\r\n            gen_num: 1,\r\n         \tfloors: 0,\r\n            team_num: 0,\r\n            ref_num: 0,\r\n            burn_times: 0,\r\n            slide_times: 0,\r\n            next_id: 1,\r\n            next_idx: 0,\r\n            pindex: 0,\r\n            m2_count: 0,\r\n            m3_count: 0,\r\n            adv_level: 0,\r\n            vip_ratio:0,\r\n            auth_code:0,\r\n            advN:[uint16(0),0,0],\r\n\t\t\tvipN:[uint16(0),0,0],\r\n         \tchildren:[uint32(0),0,0],\r\n\t\t\tvip_up_timestamp:0,\r\n\t\t\tbase_earnings: 0,\r\n\t\t\tadv_earnings: 0,\r\n\t\t\tvip_earnings:0,\r\n\t\t\tvip18_earnings:0,\r\n\t\t\twithdraw_earnings: 0\r\n        });\r\n\t\t//加入根节点\r\n\t\tplayers.push(_player);\r\n\t\tplayers.push(_player); //多复制一次，目的是使第一个元素的数组下标为1，ID也为1，方便后面的逻辑判断\r\n\t\tuint32 playerId = uint32(players.length - 1);\r\n\t\tplayerIdx[ROOT_ADDR] = playerId;\r\n\t\tid2Addr[playerId] = ROOT_ADDR;\r\n\t\t//sn2Id[_player.player_sn] = playerId;\r\n\t}\r\n\t\r\n \tfallback() external {\r\n\t}\r\n\treceive() payable external {\r\n\t   //currentBalance = address(this).balance + msg.value;\r\n\t}\r\n\t//function() payable external{ }\r\n\tmodifier onlyAdmin() {\r\n\t\trequire(msg.sender == ADMIN_ADDR);\r\n\t\t_;\r\n\t}\r\n\tmodifier onlyOperator() {\r\n\t\trequire(msg.sender == op_addr);\r\n\t\t_;\r\n\t}\r\n \r\n \t/**\r\n\t* 设置操作员,由管理员操作\r\n\t* opAddr 操作员地址\r\n\t*/\r\n\tfunction setOperator(address opAddr) public onlyAdmin{\r\n\t\top_addr = opAddr;\r\n\t}\r\n\t/**\r\n\t* 获取操作员地址\r\n\t*/\r\n\tfunction getOperator() external view onlyOperator returns(\r\n\t\taddress addr\r\n\t){\r\n\t\treturn op_addr;\r\n\t}\r\n\t/*\r\n\tfunction grand() internal view returns(uint16) {\r\n        uint256 random = uint256(keccak256(abi.encode(block.timestamp)));\r\n        return uint16(10000+random%50000);\r\n    }*/\r\n\r\n\t/**\r\n\t* 参与游戏\r\n\t* refaddr：推荐人地址\r\n\t* paddr：接点人地址(指定为推荐人地址则自动分配)\r\n\t*/\r\n\tfunction join(address refaddr, address paddr) public payable \r\n\treturns(\r\n\t\tuint32 playerId\r\n\t){\r\n\t\trequire(msg.value/WEI_ETH2 == 25 , \"Amount is invalid\");//激活金额为0.25个ETH\r\n\r\n\t\tplayerId = playerIdx[msg.sender];\r\n \t\trequire(playerId == 0 , \"You are already registered\");//激活金额为0.25个ETH\r\n\r\n\t\tuint8 status;\r\n\t\tuint8 index;\r\n\t\tuint32 refId;\r\n\t\tuint32 parentId;\r\n        uint32 nextid;\r\n\r\n\t\t(refId, parentId, index, status) = calc_player_pos_info(refaddr, paddr);\r\n\t\tif(status == 1) revert(\"Parent has no free connect points\");\r\n\t\tif(status == 2) revert(\"The parent does not exist\");\r\n\t\trequire(players[parentId].children[index] == 0 , \"parent is invalid\");//确保父节点上的点位没有被占位\r\n\t\trequire(players[parentId].gen_num < 4294967295 , \"gen_num is too large\");//确保层深不会溢出\r\n\t\trequire(players.length < 4294967295 , \"The number exceeds the limit\");//42亿\r\n\t\t//require(parentId != 0 , \"Parent is invalid!\");//确保父节点上的点位没有被占位\r\n\t\t//uint16 authcode = grand();\r\n\r\n\t\tplayerId = uint32(players.length);\r\n\t\t//函数中声明并创建结构体需要使用memory关键字\r\n\t\tPlayer memory _player = Player({\r\n            parent_id: parentId,\r\n         \tref_id: refId,\r\n            next_id: playerId,\r\n            next_idx: 0,\r\n\t \t\tjoin_timestamp: uint32(block.timestamp-TIME_BASE),\r\n            gen_num: players[parentId].gen_num+1,\r\n            floors: 0,\r\n            team_num: 0,\r\n            ref_num: 0,\r\n            burn_times: 0,\r\n            slide_times: 0,\r\n            pindex: index,\r\n            m2_count: 0,\r\n            m3_count: 0,\r\n            adv_level: 0,\r\n           \tvip_ratio:0,\r\n            auth_code:0,\r\n            advN:[uint16(0),0,0],\r\n\t\t\tvipN:[uint16(0),0,0],\r\n         \tchildren:[uint32(0),0,0],\r\n\t\t\tvip_up_timestamp:0,\r\n\t\t\tbase_earnings: 0,\r\n\t\t\tadv_earnings: 0,\r\n\t\t\tvip_earnings:0,\r\n\t\t\tvip18_earnings:0,\r\n\t\t\twithdraw_earnings: 0\r\n        });\r\n\t\tplayers.push(_player);\r\n\t\t//playerId = uint64(players.length - 1);\r\n\t\tplayerIdx[msg.sender] = playerId;\r\n\t\tid2Addr[playerId] = msg.sender;\r\n\t\tplayers[parentId].children[index] = playerId;\r\n \t\t//修改推荐人数\r\n\t\tplayers[refId].ref_num++;\r\n  \t\t\r\n  \t\t//直接推荐费 0.075ETH\r\n\t\tplayers[refId].base_earnings = players[refId].base_earnings.add(750);\r\n  \t\t\r\n\t\tjoin_calc(_player, parentId);\r\n\t\temit ev_join(msg.sender, id2Addr[parentId], id2Addr[refId], index, playerId, _player.gen_num, msg.value); //触发会员参与游戏事件\r\n\t\t \r\n\t\treturn playerId;\r\n\t}\r\n\r\n\r\n\tfunction join_calc(Player memory _player, uint32 parentId) internal{\r\n\t\tuint8 tidx;\r\n  \t\tuint8 advLevel;\r\n  \t\tuint16 advNum;\r\n  \t\tuint32 nlayers;\r\n \t\tuint32 nextid;\r\n  \t\tuint64 diff;\r\n  \t\tPlayer storage _p;\r\n  \t\tPlayer storage _tplayer;\r\n  \t\tfor(uint32 i=_player.gen_num; i>1; i--){\r\n\t\t\t_p = players[parentId];\r\n\t\t\t//往上计算每个父点位的  下一个伞下成员将要存放的位置\r\n\t\t\t _tplayer = players[_p.next_id];\r\n \r\n\t\t\tif(_tplayer.gen_num > 0 && _tplayer.children[_p.next_idx] > 0){ //被占用\r\n\t\t\t\tuint8 nextidx = (_p.next_idx+1) % 3;\r\n\t\t\t\tif(_tplayer.children[nextidx] > 0){\r\n\t\t\t\t\tnextidx = (nextidx+1) % 3; //排位占用，继续找\r\n\t\t\t\t\tif(_tplayer.children[nextidx] > 0) nextidx = 3; //说明该位置的3个子节点都放满，需要另外找一个空闲位置\r\n\t\t\t\t}\r\n\t\t\t\tif(nextidx > 2){\r\n\t\t\t\t\t//取3个孩子伞下 下一个成员将要存放的位置 和当前节点层差最小的 做为本节点的下一个位置\r\n\t\t\t\t\tuint32 uNext0 = players[_p.children[0]].next_id;\r\n\t\t\t\t\tuint32 uNext1 = players[_p.children[1]].next_id;\r\n\t\t\t\t\tuint32 uNext2 = players[_p.children[2]].next_id;\r\n\t\t\t\t\tnextid = players[uNext0].gen_num > players[uNext1].gen_num ? uNext1 : uNext0;\r\n\t\t\t\t\tnextid = players[nextid].gen_num > players[uNext2].gen_num ? uNext2 : nextid;\r\n\t\t\t\t\tnextidx = players[nextid].next_idx;\r\n\t\t\t\t\t_p.next_id = nextid;\r\n\t\t\t\t}\r\n\t\t\t\t_p.next_idx = nextidx;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif(advNum > 0){\r\n\t\t\t\tif(MAX_UINT16 - _p.advN[tidx] > advNum) _p.advN[tidx]+=advNum; //父节点这条线上的高阶人才数增加,溢出检查\r\n\t\t\t\telse _p.advN[tidx] = MAX_UINT16;\r\n\r\n\t\t\t\tif(_p.adv_level > 1){\r\n\t\t\t\t\tadvLevel = get_adv_level(_p.advN);\r\n\t\t\t\t\tif(_p.adv_level != advLevel){\r\n\t\t\t\t\t\temit ev_adv_up(id2Addr[parentId], parentId, _p.adv_level, advLevel); //高阶人才升级\r\n\t\t\t\t\t\t_p.adv_level = advLevel;\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//父点位团队人数加1，显示用，溢出不管\r\n\t\t\t_p.team_num++; \r\n\r\n\t\t\t//计算收益\r\n\t\t\t//1 元奖金 拿自己伞下 18 层\r\n\t\t\tif(_player.gen_num - _p.gen_num < 19){\r\n\t\t\t\t//_p.base_earnings = _p.base_earnings.add(uint64(msg.value/WEI_ETH4 / 100));\r\n\t\t\t\t_p.base_earnings = _p.base_earnings.add(uint64(msg.value/WEI_ETH2));\r\n\t\t\t}\r\n\t\t\t//高阶人才补助\r\n\t\t\tif(_p.adv_level > 0){\r\n\t\t\t\tif(ADV_ALLOWANCE[_p.adv_level] > diff){\r\n\t\t\t\t\t_p.adv_earnings = _p.adv_earnings.add(ADV_ALLOWANCE[_p.adv_level] - diff);\r\n\t\t\t\t\t//emit ev_bonus(id2Addr[parentId], parentId, msg.sender, ADV_ALLOWANCE[_p.adv_level] - diff, \"adv allowance\"); //获得收益事件\r\n\t\t\t\t\tdiff = ADV_ALLOWANCE[_p.adv_level];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnlayers = _player.gen_num - _p.gen_num;\r\n\t\t\t//高阶人才前3层人数判断\r\n\t\t\tif(nlayers < 4){\r\n\t\t\t\t_p.m3_count++; //只记录伞下3层内的会员数，用于高阶升级判断\r\n\t\t\t\tif(nlayers < 3) _p.m2_count++;\r\n\t\t\t\tif( _p.m2_count >=12 && _p.adv_level == 0){\r\n\t\t\t\t\t _p.adv_level = 1; //成为初级人才\r\n\t\t\t\t\t emit ev_adv_up(id2Addr[parentId], parentId, 0, 1); //人才升级\r\n\t\t\t\t}\r\n\t\t\t\tif(_p.m3_count >=39 && _p.adv_level == 1){\r\n\t\t\t\t\t _p.adv_level = 2; //成为高阶人才\r\n\t\t\t\t\t emit ev_adv_up(id2Addr[parentId], parentId, 1, 2); //高阶人才升级\r\n\t\t\t\t\t advNum ++;\r\n\t\t\t\t\t tidx = _p.pindex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(_p.adv_level > 1){\r\n\t\t\t\t\tadvLevel = get_adv_level(_p.advN);\r\n\t\t\t\t\tif(_p.adv_level != advLevel){\r\n\t\t\t\t\t\temit ev_adv_up(id2Addr[parentId], parentId, _p.adv_level, advLevel); //高阶人才升级\r\n\t\t\t\t\t\t_p.adv_level = advLevel;\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//计算会员伞下层数\r\n\t\t\tif(nlayers > _p.floors) {\r\n\t\t\t\t_p.floors = nlayers;\r\n\t\t\t}\r\n\t\t\tparentId = _p.parent_id;\r\n  \t\t}\r\n\t}\r\n\t/**\r\n\t* 激活钻石vip系统\r\n\t* 返回值： 成功返回true\r\n\t*/\r\n\tfunction active_vip() public payable \r\n\treturns(\r\n\t\tbool bOk\r\n\t){\r\n\t\t//for test comment\r\n\t\trequire(msg.value/WEI_ETH2 == 10, \"Amount is invalid.\");\r\n\t\t\r\n\t\tuint32 playId = playerIdx[msg.sender];\r\n\t\trequire(playId > 0, \"You have not registered\");\r\n \r\n\t\trequire(players[playId].vip_ratio == 0, \"The vip system has been activated\");\r\n\r\n\t\tPlayer storage _p = players[playId];\r\n\t\t//_p.vip_level = 1;\r\n\t\t_p.vip_up_timestamp = uint32(block.timestamp-TIME_BASE);\r\n\t\t_p.vip_ratio=get_vip_ratio(_p.vipN);\r\n \t\tuint8 ratio;\r\n\t\tuint32 gnum = _p.gen_num;\r\n\t\tuint32 parentId = _p.parent_id;\r\n\t\tuint64 diff;\r\n\t\tuint64 val = uint64(msg.value / WEI_ETH2);\r\n\t\twhile(gnum > 1){\r\n\r\n\t\t\t//这条线VIP人数增加\r\n\t\t\tif(players[parentId].vipN[_p.pindex] < MAX_UINT16){\r\n\t\t\t\tplayers[parentId].vipN[_p.pindex] += 1;\r\n\t\t\t}\r\n \t\t\t_p = players[parentId];\r\n\r\n \t\t\t//计算VIP 系统奖励 \r\n\t\t\tif(_p.vip_ratio > diff){\r\n\t\t\t\t_p.vip_earnings = _p.vip_earnings.add(val*(_p.vip_ratio-diff)); //这里不用再除100，因为前面val 已多除100， vip_earnings 的单位是 eth * 10^4\r\n\t\t\t\tdiff = _p.vip_ratio;\r\n\t\t\t\t//emit ev_bonus(id2Addr[parentId], id2Addr[playId], val*(_p.vip_ratio-diff), \"vip up\"); //获得收益事件\r\n\t\t\t}\r\n\t\t\tif(_p.vip_ratio > 0){ //自己必须先激活VIP\r\n\t\t\t\tratio=get_vip_ratio(_p.vipN); //根据各条线的人数，设置奖金比例\r\n\t\t\t\tif(ratio != _p.vip_ratio){\r\n\t\t\t\t\t_p.vip_ratio = ratio;\r\n\t\t\t\t\t//emit ev_vip_up(id2Addr[parentId], parentId, uint64(_p.vip_up_timestamp+TIME_BASE), _p.vip_ratio); //Vip升级事件\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tparentId = _p.parent_id;\r\n\t\t\tgnum --;\r\n  \t\t}\r\n  \t\temit ev_vip_up(id2Addr[playId], playId, uint64(players[playId].vip_up_timestamp+TIME_BASE),players[playId].vip_ratio); //Vip升级事件\r\n\t}\r\n\t/**\r\n\t* 根据节点VIP 人数，确定收益比例\r\n\t* 返回值：收益比例 单位: *100\r\n\t*/\r\n\tfunction get_vip_ratio(uint16[3] memory nVipN) internal pure returns (uint8){\r\n\t\tuint16 nmin = min16(nVipN[0], nVipN[1], nVipN[2]);\r\n\t\tuint16 n;\r\n\t\tif(nVipN[0] > 0) n += 1;\r\n\t\tif(nVipN[1] > 0) n += 1;\r\n\t\tif(nVipN[2] > 0) n += 1;\r\n\t\tif(n < 3){\r\n\t\t\tif(n == 0) return 20;\r\n\t\t\tif(n == 1) return 25;\r\n\t\t\tif(n == 2) return 30;\r\n\t\t}else{\r\n\t\t\tif(nmin < 20) return 35; //三个下属系统中都有会员成功升级成为⾦级VIP会员。\r\n\t\t\tif(nmin < 50) return 40;  //数量最少的⼀个系统达到了20个但小于50\r\n \t\t\tif(nmin < 100) return 45;\r\n\t\t\tif(nmin < 500) return 50;\r\n\t\t\tif(nmin < 1000) return 60;\r\n\t\t\tif(nmin < 10000) return 70;\r\n\t\t\telse return 70;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* 根据节点高阶人才数 ，确定高阶等级\r\n\t* 返回值：高阶身份级别(0:普通,1:初级人才,2:高阶人才,3:一星,4-二星,5-三星,6-四星,7-五星,8-银级,9-金级,10-铂金,11-钻石,12-金钻,13-蓝宝石,14-翡翠级,15-荣誉星钻级)\r\n\t*/\r\n\tfunction get_adv_level(uint16[3] memory nAdvN) internal pure returns (uint8){\r\n\t\tuint16 nmin = min16(nAdvN[0], nAdvN[1], nAdvN[2]);\r\n\t\tuint16 n;\r\n\t\tif(nAdvN[0] > 0) n += 1;\r\n\t\tif(nAdvN[1] > 0) n += 1;\r\n\t\tif(nAdvN[2] > 0) n += 1;\r\n\t\tif(n < 3){\r\n\t\t\tif(n == 0) return 2;\r\n\t\t\tif(n == 1) return 3;\r\n\t\t\tif(n == 2) return 4;\r\n\t\t}else{\r\n\t\t\tif(nmin < 10) return 5; //3星高阶人才，三条线各培养一个高阶人才及以上等级\r\n\t\t\tif(nmin < 30) return 6;\r\n\t\t\tif(nmin < 60) return 7;\r\n\t\t\tif(nmin < 100) return 8;\r\n\t\t\tif(nmin < 500) return 9;\r\n\t\t\tif(nmin < 1000) return 10;\r\n\t\t\tif(nmin < 5000) return 11;\r\n\t\t\tif(nmin < 10000) return 12;\r\n\t\t\tif(nmin < 100000) return 13;\r\n\t\t\tif(nmin < 1000000) return 14;\r\n\t\t\telse return 15;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* 根据确定点位, refaddr 为推荐人地址， paddr为接点人地址(可选，指定为推荐人地址则自动分配)\r\n\t* 返回值：refId为推荐人Id, parentId为连接人Id，index 为在连接人children的数组索引，status: 0正常，1接点人没有空位，2接点人不存在\r\n\t*/\r\n\tfunction calc_player_pos_info(address refaddr, address paddr) internal view\r\n\treturns (\r\n\t\tuint32 refId,\r\n        uint32 parentId,\r\n        uint8 index,\r\n        uint8 status\r\n    ){\r\n    \tif(refaddr == address(0)){\r\n\t\t\trefId = playerIdx[ROOT_ADDR];\r\n\t\t}else{\r\n\t\t\trefId = playerIdx[refaddr]; //如果refaddr没参与游戏，那么refId自动为0，\r\n\t\t}\r\n\t \tif(paddr == refaddr){\r\n\t\t\tpaddr = id2Addr[refId];\r\n\t\t\tparentId = playerIdx[paddr];\r\n\t\t}else{//指定接点人，就必须直接接到他下面\r\n\t\t\tparentId = playerIdx[paddr]; \r\n\t\t\tif(parentId == 0){//如果paddr没参与游戏, 返回\r\n\t\t\t\treturn (0, 0, 0, 2);\r\n\t\t\t}\r\n\t\t\tif(players[parentId].children[0] == 0) index = 0;\r\n\t\t\telse if(players[parentId].children[1] == 0) index = 1;\r\n\t\t\telse if(players[parentId].children[2] == 0) index = 2;\r\n\t\t\telse status = 1;//接点人没有空闲位\r\n\t\t\treturn (refId, parentId, index, status);  \r\n\t\t}\r\n  \t\tparentId = players[parentId].next_id;\r\n\t\tif(players[parentId].children[0] == 0) index = 0;\r\n\t\telse if(players[parentId].children[1] == 0) index = 1;\r\n\t\telse if(players[parentId].children[2] == 0) index = 2;\r\n\t\telse status = 1; //不合法的parent? 永远不会发生\r\n\t\treturn (refId, parentId, index, status);\r\n\t}\r\n   \r\n\t/**\r\n\t* 提现,全部提现\r\n\t*/\r\n\tfunction withdraw()\r\n\tpublic {\r\n\t\tuint32 playId = playerIdx[msg.sender];\r\n\t\trequire(playId > 0, \"You have not registered\");\r\n \t\t//uint256 wval = val*WEI_ETH2;\r\n\t\tPlayer storage _p = players[playId];\r\n\t\tuint256  totalEarnings = uint256(_p.base_earnings) + _p.adv_earnings + _p.vip_earnings  + _p.vip18_earnings;//总收益,   单位eth*10^4\r\n\t\trequire(_p.withdraw_earnings <= totalEarnings);\r\n\t\t \r\n\t\tuint256 undrawnEarnings = totalEarnings - _p.withdraw_earnings;//未提现余额 = 总收益-减已提现收益\r\n\t\ttotalEarnings = undrawnEarnings*WEI_ETH4; //将单位eth*10^4 转换为wei\r\n\t\trequire(totalEarnings / undrawnEarnings == WEI_ETH4, \"undrawn earnings invalid\"); //转换合法性检查\r\n\r\n\t\t//require(totalEarnings >= wval, \"Not enough balance.\"); //余额检查\r\n\t\trequire(address(this).balance >= totalEarnings, \"Contract is not enough balance.\");//合约余额检查\r\n        \r\n        uint64 withdrawVal = uint64(undrawnEarnings);\r\n        \r\n\t\t_p.withdraw_earnings = _p.withdraw_earnings.add(withdrawVal); //先扣除\r\n\t\tmsg.sender.transfer(totalEarnings);\r\n\t\t//触发提现事件\r\n\t\temit ev_withdraw(msg.sender, playId, withdrawVal, \"player\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* 管理员提现\r\n\t* val: 要提现的额度，单位eth*10^2\r\n\t*/\r\n\tfunction withdraw_admin(uint256 val) public payable onlyAdmin{\r\n\t\tval = val * WEI_ETH2; //将单位eth*10^2 转换为wei\r\n\t\trequire(val <= address(this).balance, \"Not enough balance.\");\r\n\t\taddress(uint160(ADMIN_ADDR)).transfer(val);\r\n\t\t//触发提现事件\r\n\t\temit ev_withdraw(ADMIN_ADDR, 0, val,\"admin\");\r\n\t}\r\n\r\n \tfunction min16(uint16 a, uint16 b, uint16 c) internal pure returns (uint16) {\r\n        uint16\td =  a > b ? b : a;\r\n\t\treturn d > c ? c : d;\r\n    }\r\n\r\n\t/**\r\n\t* 设置会员18层vip收益,由中心化管理员操作\r\n\t* playId 会员Id\r\n\t* val： 18层总收益，单位 ETH * 10^4\r\n\t* burnTimes： 被烧伤次数\r\n\t* slideTimes： 获得滑落奖金次数\r\n\t*/\r\n\tfunction op_set_vip18_earnings(uint32 playId, uint64 val, uint16 burnTimes, uint16 slideTimes) external onlyOperator{\r\n\t\trequire(id2Addr[playId] != address(0), \"playId have not registered\");\r\n\t\tPlayer storage _p = players[playId];\r\n\t\t_p.vip18_earnings = val;\r\n\t \t_p.slide_times = slideTimes; //滑落次数\r\n\t\t_p.burn_times = burnTimes; //烧伤次数\r\n\t\temit ev_set_vip18_bonus(id2Addr[playId], playId, burnTimes, slideTimes, val, \"set vip18 earnings\"); //设置VIP收益事件\r\n \t}\r\n\r\n\t /**\r\n\t* 设置会员排位参数, 由管理员操作\r\n\t* playId  会员Id\r\n\t* nextid 下一个伞下成员将要存放的位置\r\n\t* nextidx： 下一个伞下成员将要存放的位置系统号（0-2）\r\n\t*/\r\n\tfunction op_set_next_param(uint32 playId, uint32 nextid, uint8 nextidx) external onlyOperator{\r\n\t\trequire(id2Addr[playId] != address(0), \"playId have not registered\");\r\n\t\tPlayer storage _p = players[playId];\t\r\n\t\t_p.next_id=nextid;\r\n\t\t_p.next_idx=nextidx;\r\n\t\temit ev_op_setting(msg.sender, playId, \"set next param\"); //后台操作员设置参数\r\n \t}\r\n\t//设置会员收益,该接口正常用不到，需以管理员身份调用\r\n\tfunction op_set_earnings_param(uint32 playId,  uint64 baseEarnings, uint64 advEarnings, uint64 vipEarnings, uint64 vip18Earnings, uint64 withdrawEarnings) external onlyAdmin{\r\n\t\trequire(id2Addr[playId] != address(0), \"playId have not registered\");\r\n\t\tPlayer storage _p = players[playId];\t\r\n\t\t _p.base_earnings=baseEarnings;\r\n\t\t _p.adv_earnings=advEarnings;\r\n\t\t _p.vip_earnings=vipEarnings;\r\n\t\t _p.vip18_earnings=vip18Earnings;\r\n\t\t _p.withdraw_earnings=withdrawEarnings;\r\n\t\t emit ev_op_setting(msg.sender, playId, \"set earnings param\"); //后台操作员设置参数\r\n \t}\r\n\t//设置会员在各条线上的VIP、高阶人才人数, 该接口正常用不到，需以操作员身份调用\r\n\tfunction op_set_N_param(uint32 playId,  uint16[3] memory advN, uint16[3] memory vipN) external onlyOperator{\r\n\t\trequire(id2Addr[playId] != address(0), \"playId have not registered\");\r\n\t\tPlayer storage _p = players[playId];\t\r\n\t\t _p.vipN[0] = vipN[0];\r\n\t\t _p.vipN[1] = vipN[1];\r\n\t\t _p.vipN[2] = vipN[2];\r\n\r\n\t\t _p.advN[0] = advN[0];\r\n\t\t _p.advN[1] = advN[1];\r\n\t\t _p.advN[2] = advN[2];\r\n\t\t emit ev_op_setting(msg.sender, playId, \"set N param\"); //后台操作员设置参数\r\n \t}\r\n\r\n\t/**\r\n\t* 获取会员认证码\r\n\t*/\r\n\tfunction get_authcode(address addr) external view onlyAdmin returns (uint16) {\r\n\t\tuint32 playId = playerIdx[addr];\r\n\t\trequire(playId > 0, \"The address have not registered\");\r\n\t\treturn players[playId].auth_code;\r\n \t}\r\n\r\n\t/**\r\n\t* 设置会员认证码\r\n\t*/\r\n\tfunction set_authcode(uint16 authcode) external{\r\n\t\tuint32 playId = playerIdx[msg.sender];\r\n\t\trequire(playId > 0, \"The address have not registered\");\r\n\t\tplayers[playId].auth_code = authcode;\r\n \t}\r\n\t/**\r\n\t* 认证\r\n\t*/\r\n\tfunction auth(address addr, uint16 authcode) external view returns(bool){\r\n\t\tuint32 playId = playerIdx[addr];\r\n\t\tif(playId == 0) return false;\r\n\t\tif(authcode == 0) return false;\r\n\t\treturn authcode == players[playId].auth_code ? true : false;\r\n\t}\r\n}\r\n\r\nlibrary SafeMath64 {\r\n    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint64 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b <= a);\r\n        uint64 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        uint64 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"playid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_oldLevel\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newLevel\",\"type\":\"uint32\"}],\"name\":\"ev_adv_up\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"playid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"saddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"val\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"ev_bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refaddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"sidx\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"playid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"nlayer\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ev_join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"playid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"ev_op_setting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"playId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"burnTimes\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"slideTimes\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"val\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"ev_set_vip18_bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"playid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_ratio\",\"type\":\"uint32\"}],\"name\":\"ev_vip_up\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"playid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"ev_withdraw\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"active_vip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bOk\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"authcode\",\"type\":\"uint16\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_authcode\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_player_adv_info\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"m2_count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"m3_count\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"advN1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"advN2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"advN3\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"playerId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_player_base_info\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"adv_level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vip_ratio\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"ref_num\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"floors\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"playerId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"team_num\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"join_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_player_count\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_player_earning_info\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"burn_times\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"slide_times\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"playerId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"base_earnings\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"adv_earnings\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"vip_earnings\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"vip18_earnings\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdraw_earnings\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"playId\",\"type\":\"uint32\"}],\"name\":\"get_player_pos_id_info\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"pindex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nextidx\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"adv_level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vip_ratio\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"gen_num\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"parentId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"refId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"children1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"children2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"children3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_player_pos_info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parent_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ref_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"children1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"children2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"children3\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"adv_level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vip_ratio\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pindex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nextidx\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"gen_num\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"playerId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_player_vip_info\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"ratio\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"vip_num1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vip_num2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vip_num3\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"playerId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"vipearnings\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"vip18earnings\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"vip_up_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"id2Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paddr\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"playerId\",\"type\":\"uint32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"playId\",\"type\":\"uint32\"},{\"internalType\":\"uint16[3]\",\"name\":\"advN\",\"type\":\"uint16[3]\"},{\"internalType\":\"uint16[3]\",\"name\":\"vipN\",\"type\":\"uint16[3]\"}],\"name\":\"op_set_N_param\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"playId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"baseEarnings\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"advEarnings\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"vipEarnings\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"vip18Earnings\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"withdrawEarnings\",\"type\":\"uint64\"}],\"name\":\"op_set_earnings_param\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"playId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextid\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"nextidx\",\"type\":\"uint8\"}],\"name\":\"op_set_next_param\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"playId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"val\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"burnTimes\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"slideTimes\",\"type\":\"uint16\"}],\"name\":\"op_set_vip18_earnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerIdx\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opAddr\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"authcode\",\"type\":\"uint16\"}],\"name\":\"set_authcode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"withdraw_admin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DDLClub","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"petersburg","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a6c5984a5edc0d1bc1fb475a3adb81e9c6e7fb0a2240b60b87aadf734ab23fcc"}]}