{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n*\r\n*                                                                                                \r\n* 88888888888           88                                                88                        \r\n* 88             ,d     88                                                \"\"    ,d                  \r\n* 88             88     88                                                      88                  \r\n* 88aaaaa      MM88MMM  88,dPPYba,    ,adPPYba,  8b,dPPYba,  8b,dPPYba,   88  MM88MMM  8b       d8  \r\n* 88\"\"\"\"\"        88     88P'    \"8a  a8P_____88  88P'   \"Y8  88P'   `\"8a  88    88     `8b     d8'  \r\n* 88             88     88       88  8PP\"\"\"\"\"\"\"  88          88       88  88    88      `8b   d8'   \r\n* 88             88,    88       88  \"8b,   ,aa  88          88       88  88    88,      `8b,d8'    \r\n* 88888888888    \"Y888  88       88   `\"Ybbd8\"'  88          88       88  88    \"Y888      Y88'     \r\n*                                                                                          d8'      \r\n*                                                                                         d8'        \r\n* \r\n* Ethernity\r\n* https://ethernitiy.digital\r\n* \r\n**/\r\n\r\n\r\npragma solidity >=0.4.23 <0.6.0;\r\n\r\ncontract Ethernity {\r\n    \r\n    struct User {\r\n        uint id;\r\n        uint partnersCount;\r\n        \r\n        address referrer;\r\n        address globalReferrer;\r\n        \r\n        mapping(uint8 => bool) activeX3Levels;\r\n        mapping(uint8 => bool) activeX6Levels;\r\n        mapping(uint8 => bool) activeGlobalX3Levels;\r\n        mapping(uint8 => bool) activeGlobalX6Levels;\r\n        \r\n        mapping(uint8 => X3) x3Matrix;\r\n        mapping(uint8 => X6) x6Matrix;\r\n        mapping(uint8 => X3) globalX3Matrix;\r\n        mapping(uint8 => X6) globalX6Matrix;\r\n    }\r\n    \r\n    struct X3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct X6 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n\r\n        address closedPart;\r\n    }\r\n    \r\n    address private owner;\r\n\r\n    uint8 private constant LAST_LEVEL = 12;\r\n    uint8 private globalCurrentX3SponsorPartners = 0;\r\n    uint8 private globalCurrentX6SponsorPartners = 0;\r\n    uint private globalCurrentX3SponsorId = 1;\r\n    uint private globalCurrentX6SponsorId = 1;\r\n    uint private lastUserId = 2;\r\n   \r\n    mapping(uint8 => uint) private levelPrice;\r\n    mapping(uint => address) private idToAddress;\r\n    mapping(address => User) private users;\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\r\n    event Upgraded(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\r\n    \r\n    \r\n    constructor(address ownerAddress) public {\r\n        levelPrice[1] = 0.01 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n        \r\n        owner = ownerAddress;\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            globalReferrer: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n        \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeX3Levels[i] = true;\r\n            users[ownerAddress].activeX6Levels[i] = true;\r\n            users[ownerAddress].activeGlobalX3Levels[i] = true;\r\n            users[ownerAddress].activeGlobalX6Levels[i] = true;\r\n        }\r\n    }\r\n    \r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, owner);\r\n        }\r\n        \r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function join(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function upgrade(uint8 matrix, uint8 level) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2 || matrix == 3 || matrix == 4, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeX3Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].x3Matrix[level-1].blocked) {\r\n                users[msg.sender].x3Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeX3Referrer = findFreeX3Referrer(msg.sender, level);\r\n            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\r\n            users[msg.sender].activeX3Levels[level] = true;\r\n            updateX3Referrer(msg.sender, freeX3Referrer, level);\r\n            \r\n            emit Upgraded(msg.sender, freeX3Referrer, 1, level);\r\n\r\n        } else if (matrix == 2) {\r\n            require(!users[msg.sender].activeX6Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].x6Matrix[level-1].blocked) {\r\n                users[msg.sender].x6Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeX6Referrer = findFreeX6Referrer(msg.sender, level);\r\n\r\n            users[msg.sender].activeX6Levels[level] = true;\r\n            updateX6Referrer(msg.sender, freeX6Referrer, level);\r\n            \r\n            emit Upgraded(msg.sender, freeX6Referrer, 2, level);\r\n        } else if (matrix == 3) {\r\n            require(!users[msg.sender].activeGlobalX3Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].globalX3Matrix[level-1].blocked) {\r\n                users[msg.sender].globalX3Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeX3Referrer = findFreeGlobalX3Referrer(msg.sender, level);\r\n            \r\n            users[msg.sender].globalX3Matrix[level].currentReferrer = freeX3Referrer;\r\n            users[msg.sender].activeGlobalX3Levels[level] = true;\r\n            updateGlobalX3Referrer(msg.sender, freeX3Referrer, level);\r\n            \r\n            emit Upgraded(msg.sender, freeX3Referrer, 3, level);\r\n\r\n        } else if (matrix == 4) {\r\n            require(!users[msg.sender].activeGlobalX6Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].globalX6Matrix[level-1].blocked) {\r\n                users[msg.sender].globalX6Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeX6Referrer = findFreeGlobalX6Referrer(msg.sender, level);\r\n            \r\n            users[msg.sender].activeGlobalX6Levels[level] = true;\r\n            updateGlobalX6Referrer(msg.sender, freeX6Referrer, level);\r\n            \r\n            emit Upgraded(msg.sender, freeX6Referrer, 4, level);\r\n\r\n        }\r\n    }    \r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.04 ether, \"registration cost 0.04\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            globalReferrer: idToAddress[globalCurrentX3SponsorId],\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        \r\n        users[userAddress].activeX3Levels[1] = true; \r\n        users[userAddress].activeX6Levels[1] = true;\r\n        users[userAddress].activeGlobalX3Levels[1] = true; \r\n        users[userAddress].activeGlobalX6Levels[1] = true;\r\n        \r\n        lastUserId++;\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeX3Referrer = findFreeX3Referrer(userAddress, 1);\r\n        address freeX6Referrer = findFreeX6Referrer(userAddress, 1);\r\n        address globalX3ReferrerAddress = idToAddress[globalCurrentX3SponsorId];\r\n        address globalX6ReferrerAddress = idToAddress[globalCurrentX6SponsorId];\r\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\r\n        users[userAddress].globalX3Matrix[1].currentReferrer = globalX3ReferrerAddress;\r\n        \r\n        updateX3Referrer(userAddress, freeX3Referrer, 1);\r\n        updateGlobalX3Referrer(userAddress, globalX3ReferrerAddress, 1);\r\n        updateX6Referrer(userAddress, freeX6Referrer, 1);\r\n        updateGlobalX6Referrer(userAddress, globalX6ReferrerAddress, 1);\r\n        \r\n        globalCurrentX3SponsorPartners++;\r\n        globalCurrentX6SponsorPartners++;\r\n        \r\n        if (globalCurrentX3SponsorPartners == 3) {\r\n            globalCurrentX3SponsorPartners = 0;\r\n            globalCurrentX3SponsorId++;\r\n        }\r\n        \r\n        if (globalCurrentX6SponsorPartners == 2) {\r\n            globalCurrentX6SponsorPartners = 0;\r\n            globalCurrentX6SponsorId++;\r\n        }\r\n        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n    \r\n    function getAddressById(uint userId) external view returns(address) {\r\n        return idToAddress[userId];\r\n    }\r\n    \r\n    function getLastUserId() external view returns(uint) {\r\n        return lastUserId;\r\n    }\r\n    \r\n    function updateX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length));\r\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        //close matrix\r\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeX3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeX3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            \r\n            users[referrerAddress].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\r\n            updateX3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(owner, userAddress, 1, level);\r\n            users[owner].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n    \r\n    function updateGlobalX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].globalX3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].globalX3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 3, level, uint8(users[referrerAddress].globalX3Matrix[level].referrals.length));\r\n            return sendETHDividends(referrerAddress, userAddress, 3, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, referrerAddress, 3, level, 3);\r\n        //close matrix\r\n        users[referrerAddress].globalX3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeGlobalX3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].globalX3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeGlobalX3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].globalX3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].globalX3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            \r\n            users[referrerAddress].globalX3Matrix[level].reinvestCount++;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 3, level);\r\n            updateGlobalX3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(owner, userAddress, 3, level);\r\n            users[owner].globalX3Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 3, level);\r\n        }\r\n    }\r\n\r\n    function updateX6Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeX6Levels[level], \"500. Referrer level is inactive\");\r\n        \r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length));\r\n            \r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;            \r\n            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress); \r\n            \r\n            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return updateX6ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x6Matrix[level].closedPart)) {\r\n\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].x6Matrix[level].closedPart) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateX6(userAddress, referrerAddress, level, false);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function updateX6ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\r\n        \r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress ||\r\n                x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n            } else if (x6.length == 1) {\r\n                if (x6[0] == referrerAddress) {\r\n                    users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        \r\n        users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeX6Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x6Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].reinvestCount++;\r\n        \r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeX6Referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\r\n            updateX6Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level);\r\n            sendETHDividends(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function updateGlobalX6Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeGlobalX6Levels[level], \"500. Referrer level is inactive\");\r\n        \r\n        if (users[referrerAddress].globalX6Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].globalX6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 4, level, uint8(users[referrerAddress].globalX6Matrix[level].firstLevelReferrals.length));\r\n            \r\n            //set current level\r\n            users[userAddress].globalX6Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendETHDividends(referrerAddress, userAddress, 4, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].globalX6Matrix[level].currentReferrer;            \r\n            users[ref].globalX6Matrix[level].secondLevelReferrals.push(userAddress); \r\n            \r\n            uint len = users[ref].globalX6Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].globalX6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].globalX6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].globalX6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 4, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 4, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].globalX6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].globalX6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 4, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 4, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].globalX6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].globalX6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 4, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 4, level, 6);\r\n                }\r\n            }\r\n\r\n            return updateGlobalX6ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].globalX6Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].globalX6Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].globalX6Matrix[level].closedPart)) {\r\n\r\n                updateGlobalX6(userAddress, referrerAddress, level, true);\r\n                return updateGlobalX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].globalX6Matrix[level].closedPart) {\r\n                updateGlobalX6(userAddress, referrerAddress, level, true);\r\n                return updateGlobalX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateGlobalX6(userAddress, referrerAddress, level, false);\r\n                return updateGlobalX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateGlobalX6(userAddress, referrerAddress, level, false);\r\n            return updateGlobalX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateGlobalX6(userAddress, referrerAddress, level, true);\r\n            return updateGlobalX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[0]].globalX6Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[1]].globalX6Matrix[level].firstLevelReferrals.length) {\r\n            updateGlobalX6(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateGlobalX6(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateGlobalX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateGlobalX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[0]].globalX6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[0], 4, level, uint8(users[users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[0]].globalX6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 4, level, 2 + uint8(users[users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[0]].globalX6Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].globalX6Matrix[level].currentReferrer = users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[1]].globalX6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[1], 4, level, uint8(users[users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[1]].globalX6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 4, level, 4 + uint8(users[users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[1]].globalX6Matrix[level].firstLevelReferrals.length));\r\n            //set current level\r\n            users[userAddress].globalX6Matrix[level].currentReferrer = users[referrerAddress].globalX6Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function updateGlobalX6ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].globalX6Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendETHDividends(referrerAddress, userAddress, 4, level);\r\n        }\r\n        \r\n        address[] memory x6 = users[users[referrerAddress].globalX6Matrix[level].currentReferrer].globalX6Matrix[level].firstLevelReferrals;\r\n        \r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress ||\r\n                x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].globalX6Matrix[level].currentReferrer].globalX6Matrix[level].closedPart = referrerAddress;\r\n            } else if (x6.length == 1) {\r\n                if (x6[0] == referrerAddress) {\r\n                    users[users[referrerAddress].globalX6Matrix[level].currentReferrer].globalX6Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        \r\n        users[referrerAddress].globalX6Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].globalX6Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].globalX6Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeGlobalX6Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].globalX6Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].globalX6Matrix[level].reinvestCount++;\r\n        \r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeGlobalX6Referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 4, level);\r\n            updateGlobalX6Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 4, level);\r\n            sendETHDividends(owner, userAddress, 4, level);\r\n        }\r\n    }\r\n    \r\n    function findFreeX3Referrer(address userAddress, uint8 level) private view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeGlobalX3Referrer(address userAddress, uint8 level) private view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].globalReferrer].activeGlobalX3Levels[level]) {\r\n                return users[userAddress].globalReferrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].globalReferrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeX6Referrer(address userAddress, uint8 level) private view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX6Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeGlobalX6Referrer(address userAddress, uint8 level) private view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].globalReferrer].activeGlobalX6Levels[level]) {\r\n                return users[userAddress].globalReferrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].globalReferrer;\r\n        }\r\n    }\r\n        \r\n    function usersActiveX3Levels(address userAddress, uint8 level) external view returns(bool) {\r\n        return users[userAddress].activeX3Levels[level];\r\n    }\r\n    \r\n    function usersGlobalActiveX3Levels(address userAddress, uint8 level) external view returns(bool) {\r\n        return users[userAddress].activeGlobalX3Levels[level];\r\n    }\r\n\r\n    function usersActiveX6Levels(address userAddress, uint8 level) external view returns(bool) {\r\n        return users[userAddress].activeX6Levels[level];\r\n    }\r\n    \r\n     function usersGlobalActiveX6Levels(address userAddress, uint8 level) external view returns(bool) {\r\n        return users[userAddress].activeGlobalX6Levels[level];\r\n    }\r\n\r\n    function usersX3Matrix(address userAddress, uint8 level) external view returns(address, address[] memory, bool, uint) {\r\n        return (users[userAddress].x3Matrix[level].currentReferrer,\r\n                users[userAddress].x3Matrix[level].referrals,\r\n                users[userAddress].x3Matrix[level].blocked,\r\n                users[userAddress].x3Matrix[level].reinvestCount);\r\n    }\r\n    \r\n    function usersGlobalX3Matrix(address userAddress, uint8 level) external view returns(address, address[] memory, bool, uint) {\r\n        return (users[userAddress].globalX3Matrix[level].currentReferrer,\r\n                users[userAddress].globalX3Matrix[level].referrals,\r\n                users[userAddress].globalX3Matrix[level].blocked,\r\n                users[userAddress].globalX3Matrix[level].reinvestCount);\r\n    }\r\n\r\n    function usersX6Matrix(address userAddress, uint8 level) external view returns(address, address[] memory, address[] memory, bool, uint, address) {\r\n        return (users[userAddress].x6Matrix[level].currentReferrer,\r\n                users[userAddress].x6Matrix[level].firstLevelReferrals,\r\n                users[userAddress].x6Matrix[level].secondLevelReferrals,\r\n                users[userAddress].x6Matrix[level].blocked,\r\n                users[userAddress].x6Matrix[level].reinvestCount,\r\n                users[userAddress].x6Matrix[level].closedPart);\r\n    }\r\n    \r\n    function usersGlobalX6Matrix(address userAddress, uint8 level) external view returns(address, address[] memory, address[] memory, bool, uint, address) {\r\n        return (users[userAddress].globalX6Matrix[level].currentReferrer,\r\n                users[userAddress].globalX6Matrix[level].firstLevelReferrals,\r\n                users[userAddress].globalX6Matrix[level].secondLevelReferrals,\r\n                users[userAddress].globalX6Matrix[level].blocked,\r\n                users[userAddress].globalX6Matrix[level].reinvestCount,\r\n                users[userAddress].globalX6Matrix[level].closedPart);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    \r\n    function userInfo(address userAddress) external view returns(uint, uint, address, address) {\r\n        return (users[userAddress].id,\r\n            users[userAddress].partnersCount,\r\n            users[userAddress].referrer,\r\n            users[userAddress].globalReferrer);\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].x3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else if (matrix == 2) {\r\n            while (true) {\r\n                if (users[receiver].x6Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x6Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else if (matrix == 3) {\r\n            while (true) {\r\n                if (users[receiver].globalX3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 3, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].globalX3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else if (matrix == 4) {\r\n            while (true) {\r\n                if (users[receiver].globalX6Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 4, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].globalX6Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n\r\n        if (!address(uint160(receiver)).send(levelPrice[level])) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n        \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX6Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersGlobalActiveX3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersGlobalActiveX6Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersGlobalX3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersGlobalX6Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX6Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Ethernity","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ea5821a1e8fb2810dac7a0ca7923d82e28d9838f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://81ab7dbce0bb993c4995557bb866aa3dd7a3a0bcd4fb3a83185ab7521a5dc5fc"}]}