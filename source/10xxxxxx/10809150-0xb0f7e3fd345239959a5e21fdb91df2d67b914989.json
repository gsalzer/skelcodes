{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2020, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b != 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n    */\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return divCeil(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n    */\r\n    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b != 0, errorMessage);\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = ((a - 1) / b) + 1;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a < _b ? _a : _b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ncontract IERC20 {\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing loan sets\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\r\n *\r\n */\r\nlibrary EnumerableBytes32Set {\r\n\r\n    struct Bytes32Set {\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) index;\r\n        bytes32[] values;\r\n    }\r\n\r\n    /**\r\n     * @dev Add an address value to a set. O(1).\r\n     * Returns false if the value was already in the set.\r\n     */\r\n    function addAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return addBytes32(set, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     * Returns false if the value was already in the set.\r\n     */\r\n    function addBytes32(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!contains(set, value)){\r\n            set.index[value] = set.values.push(value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes an address value from a set. O(1).\r\n     * Returns false if the value was not present in the set.\r\n     */\r\n    function removeAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return removeBytes32(set, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     * Returns false if the value was not present in the set.\r\n     */\r\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (contains(set, value)){\r\n            uint256 toDeleteIndex = set.index[value] - 1;\r\n            uint256 lastIndex = set.values.length - 1;\r\n\r\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set.values[lastIndex];\r\n\r\n                // Move the last value to the index where the deleted value is\r\n                set.values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\r\n            }\r\n\r\n            // Delete the index entry for the deleted value\r\n            delete set.index[value];\r\n\r\n            // Delete the old entry for the moved value\r\n            set.values.pop();\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set.index[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function containsAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return set.index[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array with all values in the set. O(N).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n\r\n     * WARNING: This function may run out of gas on large sets: use {length} and\r\n     * {get} instead in these cases.\r\n     */\r\n    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\r\n        internal\r\n        view\r\n        returns (bytes32[] memory output)\r\n    {\r\n        uint256 end = start + count;\r\n        require(end >= start, \"addition overflow\");\r\n        end = set.values.length < end ? set.values.length : end;\r\n        if (end == 0 || start >= end) {\r\n            return output;\r\n        }\r\n\r\n        output = new bytes32[](end-start);\r\n        for (uint256 i = start; i < end; i++) {\r\n            output[i-start] = set.values[i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements on the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return set.values.length;\r\n    }\r\n\r\n   /** @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function get(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set.values[index];\r\n    }\r\n\r\n   /** @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function getAddress(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        bytes32 value = set.values[index];\r\n        address addrvalue;\r\n        assembly {\r\n            addrvalue := value\r\n        }\r\n        return addrvalue;\r\n    }\r\n}\r\n\r\ncontract StakingState is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\r\n\r\n    uint256 public constant initialCirculatingSupply = 1030000000e18 - 889389933e18;\r\n    address internal constant ZERO_ADDRESS = address(0);\r\n\r\n    address public BZRX;\r\n    address public vBZRX;\r\n    address public LPToken;\r\n\r\n    address public implementation;\r\n\r\n    bool public isInit;\r\n    bool public isActive;\r\n\r\n    mapping(address => uint256) internal _totalSupplyPerToken;                      // token => value\r\n    mapping(address => mapping(address => uint256)) internal _balancesPerToken;     // token => account => value\r\n    mapping(address => mapping(address => uint256)) internal _checkpointPerToken;   // token => account => value\r\n\r\n    mapping(address => address) public delegate;                                    // user => delegate\r\n    mapping(address => mapping(address => uint256)) public repStakedPerToken;       // token => user => value\r\n    mapping(address => bool) public reps;                                           // user => isActive\r\n\r\n    uint256 public rewardPerTokenStored;\r\n    mapping(address => uint256) public userRewardPerTokenPaid;                      // user => value\r\n    mapping(address => uint256) public rewards;                                     // user => value\r\n\r\n    EnumerableBytes32Set.Bytes32Set internal repStakedSet;\r\n\r\n    uint256 public lastUpdateTime;\r\n    uint256 public periodFinish;\r\n    uint256 public rewardRate;\r\n}\r\n\r\ninterface ILoanPool {\r\n    function tokenPrice()\r\n        external\r\n        view\r\n        returns (uint256 price);\r\n\r\n    function borrowInterestRate()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalAssetSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function assetBalanceOf(\r\n        address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ncontract StakingInterim is StakingState {\r\n\r\n    ILoanPool public constant iBZRX = ILoanPool(0x18240BD9C07fA6156Ce3F3f61921cC82b2619157);\r\n\r\n    struct RepStakedTokens {\r\n        address wallet;\r\n        bool isActive;\r\n        uint256 BZRX;\r\n        uint256 vBZRX;\r\n        uint256 LPToken;\r\n    }\r\n\r\n    event Staked(\r\n        address indexed user,\r\n        address indexed token,\r\n        address indexed delegate,\r\n        uint256 amount\r\n    );\r\n\r\n    event DelegateChanged(\r\n        address indexed user,\r\n        address indexed oldDelegate,\r\n        address indexed newDelegate\r\n    );\r\n\r\n    event RewardAdded(\r\n        uint256 indexed reward,\r\n        uint256 duration\r\n    );\r\n\r\n    modifier checkActive() {\r\n        require(isActive, \"not active\");\r\n        _;\r\n    }\r\n \r\n    function init(\r\n        address _BZRX,\r\n        address _vBZRX,\r\n        address _LPToken,\r\n        bool _isActive)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(!isInit, \"already init\");\r\n        \r\n        BZRX = _BZRX;\r\n        vBZRX = _vBZRX;\r\n        LPToken = _LPToken;\r\n\r\n        isActive = _isActive;\r\n\r\n        isInit = true;\r\n    }\r\n\r\n    function setActive(\r\n        bool _isActive)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(isInit, \"not init\");\r\n        isActive = _isActive;\r\n    }\r\n\r\n    function rescueToken(\r\n        IERC20 token,\r\n        address receiver,\r\n        uint256 amount)\r\n        external\r\n        onlyOwner\r\n        returns (uint256 withdrawAmount)\r\n    {\r\n        withdrawAmount = token.balanceOf(address(this));\r\n        if (withdrawAmount > amount) {\r\n            withdrawAmount = amount;\r\n        }\r\n        if (withdrawAmount != 0) {\r\n            token.safeTransfer(\r\n                receiver,\r\n                withdrawAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function stake(\r\n        address[] memory tokens,\r\n        uint256[] memory values)\r\n        public\r\n    {\r\n        stakeWithDelegate(\r\n            tokens,\r\n            values,\r\n            ZERO_ADDRESS\r\n        );\r\n    }\r\n\r\n    function stakeWithDelegate(\r\n        address[] memory tokens,\r\n        uint256[] memory values,\r\n        address delegateToSet)\r\n        public\r\n        checkActive\r\n        updateReward(msg.sender)\r\n    {\r\n        require(tokens.length == values.length, \"count mismatch\");\r\n\r\n        address currentDelegate = _setDelegate(delegateToSet);\r\n\r\n        address token;\r\n        uint256 stakeAmount;\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            token = tokens[i];\r\n            stakeAmount = values[i];\r\n\r\n            if (stakeAmount == 0) {\r\n                continue;\r\n            }\r\n\r\n            require(token == BZRX || token == vBZRX || token == LPToken, \"invalid token\");\r\n            require(stakeAmount <= stakeableByAsset(token, msg.sender), \"insufficient balance\");\r\n\r\n            _balancesPerToken[token][msg.sender] = _balancesPerToken[token][msg.sender].add(stakeAmount);\r\n            _totalSupplyPerToken[token] = _totalSupplyPerToken[token].add(stakeAmount);\r\n\r\n            emit Staked(\r\n                msg.sender,\r\n                token,\r\n                currentDelegate,\r\n                stakeAmount\r\n            );\r\n\r\n            repStakedPerToken[currentDelegate][token] = repStakedPerToken[currentDelegate][token]\r\n                .add(stakeAmount);\r\n        }\r\n    }\r\n\r\n    function setRepActive(\r\n        bool _isActive)\r\n        public\r\n    {\r\n        reps[msg.sender] = _isActive;\r\n        if (_isActive) {\r\n            repStakedSet.addAddress(msg.sender);\r\n        }\r\n    }\r\n\r\n    function getRepVotes(\r\n        uint256 start,\r\n        uint256 count)\r\n        external\r\n        view\r\n        returns (RepStakedTokens[] memory repStakedArr)\r\n    {\r\n        uint256 end = start.add(count).min256(repStakedSet.length());\r\n        if (start >= end) {\r\n            return repStakedArr;\r\n        }\r\n        count = end-start;\r\n\r\n        uint256 idx = count;\r\n        address wallet;\r\n        repStakedArr = new RepStakedTokens[](idx);\r\n        for (uint256 i = --end; i >= start; i--) {\r\n            wallet = repStakedSet.getAddress(i);\r\n            repStakedArr[count-(idx--)] = RepStakedTokens({\r\n                wallet: wallet,\r\n                isActive: reps[wallet],\r\n                BZRX: repStakedPerToken[wallet][BZRX],\r\n                vBZRX: repStakedPerToken[wallet][vBZRX],\r\n                LPToken: repStakedPerToken[wallet][LPToken]\r\n            });\r\n\r\n            if (i == 0) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (idx != 0) {\r\n            count -= idx;\r\n            assembly {\r\n                mstore(repStakedArr, count)\r\n            }\r\n        }\r\n    }\r\n\r\n    function lastTimeRewardApplicable()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return periodFinish\r\n            .min256(_getTimestamp());\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        uint256 _rewardsPerToken = rewardsPerToken();\r\n        rewardPerTokenStored = _rewardsPerToken;\r\n\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n\r\n        if (account != address(0)) {\r\n            rewards[account] = _earned(account, _rewardsPerToken);\r\n            userRewardPerTokenPaid[account] = _rewardsPerToken;\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    function rewardsPerToken()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 totalSupplyBZRX = totalSupplyByAssetNormed(BZRX);\r\n        uint256 totalSupplyVBZRX = totalSupplyByAssetNormed(vBZRX);\r\n        uint256 totalSupplyLPToken = totalSupplyByAssetNormed(LPToken);\r\n\r\n        uint256 totalTokens = totalSupplyBZRX\r\n            .add(totalSupplyVBZRX)\r\n            .add(totalSupplyLPToken);\r\n\r\n        if (totalTokens == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n\r\n        return rewardPerTokenStored.add(\r\n            lastTimeRewardApplicable()\r\n                .sub(lastUpdateTime)\r\n                .mul(rewardRate)\r\n                .mul(1e18)\r\n                .div(totalTokens)\r\n        );\r\n    }\r\n\r\n    function earned(\r\n        address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _earned(\r\n            account,\r\n            rewardsPerToken()\r\n        );\r\n    }\r\n\r\n    function _earned(\r\n        address account,\r\n        uint256 _rewardsPerToken)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 bzrxBalance = balanceOfByAssetNormed(BZRX, account);\r\n        uint256 vbzrxBalance = balanceOfByAssetNormed(vBZRX, account);\r\n        uint256 lptokenBalance = balanceOfByAssetNormed(LPToken, account);\r\n\r\n        uint256 totalTokens = bzrxBalance\r\n            .add(vbzrxBalance)\r\n            .add(lptokenBalance);\r\n\r\n        return totalTokens\r\n            .mul(_rewardsPerToken.sub(userRewardPerTokenPaid[account]))\r\n            .div(1e18)\r\n            .add(rewards[account]);\r\n    }\r\n\r\n    function notifyRewardAmount(\r\n        uint256 reward,\r\n        uint256 duration)\r\n        external\r\n        onlyOwner\r\n        updateReward(address(0))\r\n    {\r\n        require(isInit, \"not init\");\r\n\r\n        if (periodFinish != 0) {\r\n            if (_getTimestamp() >= periodFinish) {\r\n                rewardRate = reward\r\n                    .div(duration);\r\n            } else {\r\n                uint256 remaining = periodFinish\r\n                    .sub(_getTimestamp());\r\n                uint256 leftover = remaining\r\n                    .mul(rewardRate);\r\n                rewardRate = reward\r\n                    .add(leftover)\r\n                    .div(duration);\r\n            }\r\n\r\n            lastUpdateTime = _getTimestamp();\r\n            periodFinish = _getTimestamp()\r\n                .add(duration);\r\n        } else {\r\n            rewardRate = reward\r\n                .div(duration);\r\n            lastUpdateTime = _getTimestamp();\r\n            periodFinish = _getTimestamp()\r\n                .add(duration);\r\n        }\r\n\r\n        emit RewardAdded(\r\n            reward,\r\n            duration\r\n        );\r\n    }\r\n\r\n    function stakeableByAsset(\r\n        address token,\r\n        address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 walletBalance = IERC20(token).balanceOf(account);\r\n\r\n        // excludes staking by way of iBZRX\r\n        uint256 stakedBalance = _balancesPerToken[token][account];\r\n\r\n        return walletBalance > stakedBalance ?\r\n            walletBalance - stakedBalance :\r\n            0;\r\n    }\r\n\r\n    function balanceOfByAsset(\r\n        address token,\r\n        address account)\r\n        public\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        balance = _balancesPerToken[token][account];\r\n        if (token == BZRX) {\r\n            balance = balance\r\n                .add(iBZRX.assetBalanceOf(account));\r\n        }\r\n    }\r\n\r\n    function balanceOfByAssetNormed(\r\n        address token,\r\n        address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (token == LPToken) {\r\n            // normalizes the LPToken balance\r\n            uint256 lptokenBalance = totalSupplyByAsset(LPToken);\r\n            if (lptokenBalance != 0) {\r\n                return totalSupplyByAssetNormed(LPToken)\r\n                    .mul(balanceOfByAsset(LPToken, account))\r\n                    .div(lptokenBalance);\r\n            }\r\n        } else {\r\n            return balanceOfByAsset(token, account);\r\n        }\r\n    }\r\n\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalSupplyByAsset(BZRX)\r\n            .add(totalSupplyByAsset(vBZRX))\r\n            .add(totalSupplyByAsset(LPToken));\r\n    }\r\n\r\n    function totalSupplyNormed()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalSupplyByAssetNormed(BZRX)\r\n            .add(totalSupplyByAssetNormed(vBZRX))\r\n            .add(totalSupplyByAssetNormed(LPToken));\r\n    }\r\n\r\n    function totalSupplyByAsset(\r\n        address token)\r\n        public\r\n        view\r\n        returns (uint256 supply)\r\n    {\r\n        supply = _totalSupplyPerToken[token];\r\n        if (token == BZRX) {\r\n            supply = supply\r\n                .add(iBZRX.totalAssetSupply());\r\n        }\r\n    }\r\n\r\n    function totalSupplyByAssetNormed(\r\n        address token)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (token == LPToken) {\r\n            uint256 circulatingSupply = initialCirculatingSupply; // + VBZRX.totalVested();\r\n            \r\n            // staked LP tokens are assumed to represent the total unstaked supply (circulated supply - staked BZRX)\r\n            return totalSupplyByAsset(LPToken) != 0 ?\r\n                circulatingSupply - totalSupplyByAsset(BZRX) :\r\n                0;\r\n        } else {\r\n            return totalSupplyByAsset(token);\r\n        }\r\n    }\r\n\r\n    function _setDelegate(\r\n        address delegateToSet)\r\n        internal\r\n        returns (address currentDelegate)\r\n    {\r\n        currentDelegate = delegate[msg.sender];\r\n        if (currentDelegate != ZERO_ADDRESS) {\r\n            require(delegateToSet == ZERO_ADDRESS || delegateToSet == currentDelegate, \"delegate already set\");\r\n        } else {\r\n            if (delegateToSet == ZERO_ADDRESS) {\r\n                delegateToSet = msg.sender;\r\n            }\r\n            delegate[msg.sender] = delegateToSet;\r\n\r\n            emit DelegateChanged(\r\n                msg.sender,\r\n                currentDelegate,\r\n                delegateToSet\r\n            );\r\n\r\n            currentDelegate = delegateToSet;\r\n        }\r\n    }\r\n\r\n    function _getTimestamp()\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return block.timestamp;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfByAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfByAssetNormed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getRepVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"BZRX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vBZRX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LPToken\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingInterim.RepStakedTokens[]\",\"name\":\"repStakedArr\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iBZRX\",\"outputs\":[{\"internalType\":\"contract ILoanPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BZRX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vBZRX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LPToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"repStakedPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setRepActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"delegateToSet\",\"type\":\"address\"}],\"name\":\"stakeWithDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeableByAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupplyByAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupplyByAssetNormed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyNormed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vBZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingInterim","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://efe9d9f8d89458975e8ebf631a003a649adc1e4ba43912867b914da66315fa55"}]}