{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/managment/Constants.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract Constants {\r\n    // Permissions bit constants\r\n    uint256 public constant CAN_MINT_TOKENS = 0;\r\n    uint256 public constant CAN_BURN_TOKENS = 1;\r\n    uint256 public constant CAN_UPDATE_STATE = 2;\r\n    uint256 public constant CAN_LOCK_TOKENS = 3;\r\n    uint256 public constant CAN_UPDATE_PRICE = 4;\r\n    uint256 public constant CAN_INTERACT_WITH_ALLOCATOR = 5;\r\n    uint256 public constant CAN_SET_ALLOCATOR_MAX_SUPPLY = 6;\r\n    uint256 public constant CAN_PAUSE_TOKENS = 7;\r\n    uint256 public constant ECLIUDED_ADDRESSES = 8;\r\n    uint256 public constant WHITELISTED = 9;\r\n    uint256 public constant SIGNERS = 10;\r\n    uint256 public constant EXTERNAL_CONTRIBUTORS = 11;\r\n    uint256 public constant CAN_SEE_BALANCE = 12;\r\n    uint256 public constant CAN_CANCEL_TRANSACTION = 13;\r\n    uint256 public constant CAN_ALLOCATE_REFERRAL_TOKENS = 14;\r\n    uint256 public constant CAN_SET_REFERRAL_MAX_SUPPLY = 15;\r\n    uint256 public constant MANUAL_TOKENS_ALLOCATION = 16;\r\n    uint256 public constant CAN_SET_WHITELISTED = 17;\r\n\r\n    // Contract Registry keys\r\n    uint256 public constant CONTRACT_TOKEN = 1;\r\n    uint256 public constant CONTRACT_PRICING = 2;\r\n    uint256 public constant CONTRACT_CROWDSALE = 3;\r\n    uint256 public constant CONTRACT_ALLOCATOR = 4;\r\n    uint256 public constant CONTRACT_AGENT = 5;\r\n    uint256 public constant CONTRACT_FORWARDER = 6;\r\n    uint256 public constant CONTRACT_REFERRAL = 7;\r\n    uint256 public constant CONTRACT_STATS = 8;\r\n    uint256 public constant CONTRACT_LOCKUP = 9;\r\n\r\n    uint256 public constant YEAR_IN_SECONDS = 31556952;\r\n    uint256 public constant SIX_MONTHS =  15778476;\r\n    uint256 public constant MONTH_IN_SECONDS = 2629746;\r\n\r\n    string public constant ERROR_ACCESS_DENIED = \"ERROR_ACCESS_DENIED\";\r\n    string public constant ERROR_WRONG_AMOUNT = \"ERROR_WRONG_AMOUNT\";\r\n    string public constant ERROR_NO_CONTRACT = \"ERROR_NO_CONTRACT\";\r\n    string public constant ERROR_NOT_AVAILABLE = \"ERROR_NOT_AVAILABLE\";\r\n}\r\n\r\n// File: contracts/managment/Management.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract Management is Ownable, Constants {\r\n\r\n    // Contract Registry\r\n    mapping (uint256 => address payable) public contractRegistry;\r\n\r\n    // Permissions\r\n    mapping (address => mapping(uint256 => bool)) public permissions;\r\n\r\n    event PermissionsSet(\r\n        address subject, \r\n        uint256 permission, \r\n        bool value\r\n    );\r\n\r\n    event ContractRegistered(\r\n        uint256 key,\r\n        address source,\r\n        address target\r\n    );\r\n\r\n    function setPermission(\r\n        address _address, \r\n        uint256 _permission, \r\n        bool _value\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        permissions[_address][_permission] = _value;\r\n        emit PermissionsSet(_address, _permission, _value);\r\n    }\r\n\r\n    function registerContract(\r\n        uint256 _key, \r\n        address payable _target\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n        contractRegistry[_key] = _target;\r\n        emit ContractRegistered(_key, address(0), _target);\r\n    }\r\n\r\n    function setWhitelisted(\r\n        address _address,\r\n        bool _value\r\n    )\r\n        public\r\n    {\r\n        require(\r\n            permissions[msg.sender][CAN_SET_WHITELISTED] == true,\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n\r\n        permissions[_address][WHITELISTED] = _value;\r\n\r\n        emit PermissionsSet(_address, WHITELISTED, _value);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/managment/Managed.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Managed is Ownable, Constants {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    Management public management;\r\n\r\n    modifier requirePermission(uint256 _permissionBit) {\r\n        require(\r\n            hasPermission(msg.sender, _permissionBit),\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canCallOnlyRegisteredContract(uint256 _key) {\r\n        require(\r\n            msg.sender == management.contractRegistry(_key),\r\n            ERROR_ACCESS_DENIED\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier requireContractExistsInRegistry(uint256 _key) {\r\n        require(\r\n            management.contractRegistry(_key) != address(0),\r\n            ERROR_NO_CONTRACT\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _managementAddress) public {\r\n        management = Management(_managementAddress);\r\n    }\r\n\r\n    function setManagementContract(address _management) public onlyOwner {\r\n        require(address(0) != _management, ERROR_NO_CONTRACT);\r\n\r\n        management = Management(_management);\r\n    }\r\n\r\n    function hasPermission(address _subject, uint256 _permissionBit)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return management.permissions(_subject, _permissionBit);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/allocator/TokenAllocator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n/// @title TokenAllocator\r\n/// @author Applicature\r\n/// @notice Contract responsible for defining distribution logic of tokens.\r\n/// @dev Base class\r\ncontract TokenAllocator is Managed {\r\n\r\n    uint256 public maxSupply;\r\n\r\n    constructor(uint256 _maxSupply, address _management)\r\n        public\r\n        Managed(_management)\r\n    {\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    function allocate(\r\n        address _holder,\r\n        uint256 _tokens,\r\n        uint256 _allocatedTokens\r\n    )\r\n        public\r\n        requirePermission(CAN_INTERACT_WITH_ALLOCATOR)\r\n    {\r\n        require(\r\n            tokensAvailable(_allocatedTokens) >= _tokens,\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n        internalAllocate(_holder, _tokens);\r\n    }\r\n\r\n    function updateMaxSupply(uint256 _maxSupply)\r\n        internal\r\n        requirePermission(CAN_INTERACT_WITH_ALLOCATOR)\r\n    {\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    /// @notice Check whether contract is initialised\r\n    /// @return true if initialized\r\n    function isInitialized() public view returns (bool) {\r\n        if (\r\n            address(management) == address(0) ||\r\n            management.contractRegistry(CONTRACT_TOKEN) == address(0) ||\r\n            management.contractRegistry(CONTRACT_ALLOCATOR) != address(this)\r\n        ) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @return available tokens\r\n    function tokensAvailable(uint256 _allocatedTokens)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return maxSupply.sub(_allocatedTokens);\r\n    }\r\n\r\n    function internalAllocate(\r\n        address _holder,\r\n        uint256 _tokens\r\n    )\r\n        internal;\r\n}\r\n\r\n// File: contracts/agent/Agent.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n/// @title Agent\r\n/// @author Applicature\r\n/// @notice Contract which takes actions on state change and contribution\r\n/// @dev Base class\r\ncontract Agent is Managed {\r\n\r\n    constructor(address _management) public Managed(_management) {}\r\n\r\n    function isInitialized() public view returns (bool);\r\n}\r\n\r\n// File: contracts/crowdsale/Crowdsale.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\ncontract Crowdsale {\r\n\r\n    uint256 public tokensSold;\r\n    uint256 public bonusProduced;\r\n\r\n    enum State {\r\n        Unknown,\r\n        Initializing,\r\n        BeforeCrowdsale,\r\n        InCrowdsale,\r\n        Success,\r\n        Finalized,\r\n        Refunding\r\n    }\r\n\r\n    function externalContribution(\r\n        address payable _contributor,\r\n        uint256 _currencyAmount\r\n    )\r\n        external\r\n        payable;\r\n\r\n    function contribute(uint8 _v, bytes32 _r, bytes32 _s) external payable;\r\n\r\n    function updateState() public;\r\n\r\n    function getState() public view returns (State);\r\n\r\n    function isInitialized() public view returns (bool);\r\n\r\n    function internalContribution(\r\n        address payable _contributor,\r\n        uint256 _currencyAmount\r\n    )\r\n        internal;\r\n}\r\n\r\n// File: contracts/agent/CrowdsaleAgent.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/// @title CrowdsaleAgent\r\n/// @author Applicature\r\n/// @notice Contract which takes actions on state change and contribution\r\n/// @dev Base class\r\ncontract CrowdsaleAgent is Agent {\r\n\r\n    constructor(address _management) public Agent(_management) {}\r\n\r\n    function isInitialized()\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (\r\n            address(management) != address(0) &&\r\n            management.contractRegistry(CONTRACT_CROWDSALE) != address(0)\r\n        );\r\n    }\r\n\r\n    function onContribution(\r\n        address _contributor,\r\n        uint256 _currencyAmount,\r\n        uint256 _tokens,\r\n        uint256 _bonus\r\n    )\r\n        public\r\n        canCallOnlyRegisteredContract(CONTRACT_CROWDSALE)\r\n    {}\r\n\r\n    function onStateChange(\r\n        Crowdsale.State _state\r\n    )\r\n        public\r\n        requirePermission(CAN_UPDATE_STATE)\r\n        requireContractExistsInRegistry(CONTRACT_CROWDSALE)\r\n    {}\r\n\r\n    function onRefund(\r\n        address _contributor,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        canCallOnlyRegisteredContract(CONTRACT_CROWDSALE)\r\n        returns (uint256 burned)\r\n    {}\r\n\r\n}\r\n\r\n// File: contracts/contribution/ContributionForwarder.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n/// @title ContributionForwarder\r\n/// @author Applicature\r\n/// @notice Contract is responsible for distributing collected ethers, that are received from CrowdSale.\r\n/// @dev Base class\r\ncontract ContributionForwarder is Managed {\r\n\r\n    uint256 public weiCollected;\r\n    uint256 public weiForwarded;\r\n\r\n    event ContributionForwarded(\r\n        address receiver,\r\n        uint256 weiAmount\r\n    );\r\n\r\n    constructor(address _management) \r\n        public \r\n        Managed(_management) \r\n    {}\r\n\r\n    /// @notice transfer wei to receiver\r\n    function forward() \r\n        public \r\n        payable \r\n    {\r\n        require(msg.value > 0, ERROR_WRONG_AMOUNT);\r\n\r\n        weiCollected = weiCollected.add(msg.value);\r\n        internalForward();\r\n    }\r\n\r\n    function isInitialized()\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (\r\n            address(management) != address(0) &&\r\n            management.contractRegistry(\r\n                CONTRACT_FORWARDER\r\n            ) != address(0)\r\n        );\r\n    }\r\n\r\n    function internalForward() internal;\r\n}\r\n\r\n// File: contracts/pricing/PricingStrategy.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/// @title PricingStrategy\r\n/// @author Applicature\r\n/// @notice Contract is responsible for calculating tokens amount depending on different criterias\r\n/// @dev Base class\r\ncontract PricingStrategy {\r\n\r\n    function isInitialized() public view returns (bool);\r\n\r\n    function getCurrencyAmount(uint256 _weiAmount)\r\n        public\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTokens(\r\n        address _contributor,\r\n        uint256 _tokensAvailable, uint256 _tokensSold,\r\n        uint256 _weiAmount, uint256 _collectedWei\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 tokens,\r\n            uint256 tokensExludingBonus,\r\n            uint256 bonus\r\n        );\r\n\r\n    function getWeis(\r\n        uint256 _collectedWei,\r\n        uint256 _tokensSold,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 weiAmount,\r\n            uint256 tokensBonus\r\n        );\r\n}\r\n\r\n// File: contracts/crowdsale/CrowdsaleImpl.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Crowdsale\r\n/// @author Applicature\r\n/// @notice Contract is responsible for collecting, refunding, allocating tokens during different stages of Crowdsale.\r\ncontract CrowdsaleImpl is Crowdsale, Managed {\r\n\r\n    State public currentState;\r\n    bool public finalized;\r\n    uint256 public startDate;\r\n    uint256 public endDate;\r\n    bool public allowWhitelisted;\r\n    bool public allowSigned;\r\n    bool public allowAnonymous;\r\n\r\n    event Contribution(\r\n        address _contributor,\r\n        uint256 _currencyAmount,\r\n        uint256 _tokensExcludingBonus,\r\n        uint256 _bonus\r\n    );\r\n\r\n    constructor(\r\n        uint256 _startDate,\r\n        uint256 _endDate,\r\n        bool _allowWhitelisted,\r\n        bool _allowSigned,\r\n        bool _allowAnonymous,\r\n        address _management\r\n    ) \r\n        public \r\n        Managed(_management) \r\n    {\r\n        startDate = _startDate;\r\n        endDate = _endDate;\r\n\r\n        allowWhitelisted = _allowWhitelisted;\r\n        allowSigned = _allowSigned;\r\n        allowAnonymous = _allowAnonymous;\r\n\r\n        currentState = State.Unknown;\r\n    }\r\n\r\n    /// @notice default payable function\r\n    function()\r\n        external\r\n        payable\r\n    {\r\n        buyInternal(\r\n            msg.sender,\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    /// @notice allows external user to do contribution\r\n    function externalContribution(\r\n        address payable _contributor,\r\n        uint256 _currencyAmount\r\n    )\r\n        external\r\n        payable \r\n        requirePermission(EXTERNAL_CONTRIBUTORS)\r\n    {\r\n        internalContribution(_contributor, _currencyAmount);\r\n    }\r\n\r\n    /// @notice allows to do signed contributions\r\n    function contribute(\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        external\r\n        payable\r\n    {\r\n        address recoveredAddress = verify(\r\n            msg.sender,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n\r\n        require(hasPermission(recoveredAddress, SIGNERS), ERROR_ACCESS_DENIED);\r\n        internalContribution(\r\n            msg.sender,\r\n            PricingStrategy(management.contractRegistry(CONTRACT_PRICING)).getCurrencyAmount(msg.value)\r\n        );\r\n    }\r\n\r\n    /// @notice Crowdsale state\r\n    function updateState() public {\r\n        State state = getState();\r\n\r\n        if (currentState != state) {\r\n            if (management.contractRegistry(CONTRACT_AGENT) != address(0)) {\r\n                CrowdsaleAgent(management.contractRegistry(CONTRACT_AGENT)).onStateChange(state);\r\n            }\r\n            currentState = state;\r\n        }\r\n    }\r\n\r\n    /// @notice check sign\r\n    function verify(\r\n        address _sender, \r\n        uint8 _v, \r\n        bytes32 _r, \r\n        bytes32 _s\r\n    )\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(address(this), _sender));\r\n\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n        return ecrecover(\r\n            keccak256(abi.encodePacked(prefix, hash)),\r\n            _v, \r\n            _r, \r\n            _s\r\n        );\r\n    }\r\n\r\n    /// @return Crowdsale state\r\n    function getState() public view returns (State) {\r\n        if (finalized) {\r\n            return State.Finalized;\r\n        } else if (TokenAllocator(management.contractRegistry(CONTRACT_ALLOCATOR)).isInitialized() == false) {\r\n            return State.Initializing;\r\n        } else if (ContributionForwarder(management.contractRegistry(CONTRACT_FORWARDER)).isInitialized() == false) {\r\n            return State.Initializing;\r\n        } else if (PricingStrategy(management.contractRegistry(CONTRACT_PRICING)).isInitialized() == false) {\r\n            return State.Initializing;\r\n        } else if (block.timestamp < startDate) {\r\n            return State.BeforeCrowdsale;\r\n        } else if (block.timestamp >= startDate && block.timestamp <= endDate) {\r\n            return State.InCrowdsale;\r\n        } else if (block.timestamp > endDate) {\r\n            return State.Success;\r\n        }\r\n\r\n        return State.Unknown;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return (\r\n            management.contractRegistry(CONTRACT_TOKEN) != address(0) &&\r\n            management.contractRegistry(CONTRACT_AGENT) != address(0) &&\r\n            management.contractRegistry(CONTRACT_FORWARDER) != address(0) &&\r\n            management.contractRegistry(CONTRACT_PRICING) != address(0) &&\r\n            management.contractRegistry(CONTRACT_ALLOCATOR) != address(0)\r\n        );\r\n    }\r\n\r\n    function buyInternal(\r\n        address payable _contributor,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        require(allowWhitelisted || allowAnonymous, ERROR_ACCESS_DENIED);\r\n\r\n        if (!allowAnonymous && allowWhitelisted) {\r\n            require(hasPermission(_contributor, WHITELISTED), ERROR_ACCESS_DENIED);\r\n        }\r\n\r\n        internalContribution(\r\n            _contributor,\r\n            PricingStrategy(management.contractRegistry(CONTRACT_PRICING)).getCurrencyAmount(ethAmount)\r\n        );\r\n    }\r\n\r\n    function internalContribution(\r\n        address payable _contributor,\r\n        uint256 _currencyAmount\r\n    )\r\n        internal\r\n    {\r\n        updateState();\r\n        require(getState() == State.InCrowdsale, ERROR_ACCESS_DENIED);\r\n\r\n        TokenAllocator allocator = TokenAllocator(\r\n            management.contractRegistry(CONTRACT_ALLOCATOR)\r\n        );\r\n\r\n        uint256 tokensAvailable = allocator.tokensAvailable(tokensSold);\r\n\r\n        uint256 tokens;\r\n        uint256 tokensExcludingBonus;\r\n        uint256 bonus;\r\n\r\n        (tokens, tokensExcludingBonus, bonus) = PricingStrategy(\r\n            management.contractRegistry(CONTRACT_PRICING)\r\n        ).getTokens(\r\n            _contributor,\r\n            tokensAvailable,\r\n            tokensSold,\r\n            _currencyAmount,\r\n            bonusProduced\r\n        );\r\n\r\n        preValidatePurchase(_contributor, tokens);\r\n\r\n        allocator.allocate(_contributor, tokens, tokensSold);\r\n\r\n        onContribution(\r\n            _contributor,\r\n            _currencyAmount,\r\n            tokens,\r\n            bonus\r\n        );\r\n    }\r\n\r\n    function preValidatePurchase(\r\n        address _beneficiary,\r\n        uint256 _tokensAmount\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        require(_beneficiary != address(0), ERROR_WRONG_AMOUNT);\r\n        require(_tokensAmount > 0, ERROR_WRONG_AMOUNT);\r\n    }\r\n\r\n    function onContribution(\r\n        address payable _contributor,\r\n        uint256 _currencyAmount,\r\n        uint256 _tokens,\r\n        uint256 _bonus\r\n    ) internal {\r\n        tokensSold = tokensSold.add(_tokens);\r\n        bonusProduced = bonusProduced.add(_bonus);\r\n\r\n        CrowdsaleAgent(\r\n            management.contractRegistry(CONTRACT_AGENT)\r\n        ).onContribution(\r\n            _contributor,\r\n            _currencyAmount,\r\n            _tokens,\r\n            _bonus\r\n        );\r\n\r\n        forwardFunds(_contributor);\r\n\r\n        emit Contribution(\r\n            _contributor,\r\n            _currencyAmount,\r\n            _tokens.sub(_bonus),\r\n            _bonus\r\n        );\r\n    }\r\n\r\n    function forwardFunds(address) internal\r\n    requireContractExistsInRegistry(CONTRACT_FORWARDER)\r\n    {\r\n        if (msg.value > 0) {\r\n            ContributionForwarder(\r\n                management.contractRegistry(CONTRACT_FORWARDER)\r\n            ).forward.value(msg.value)();\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/allocator/MintableTokenAllocator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/// @title MintableTokenAllocator\r\n/// @author Applicature\r\n/// @notice Contract responsible for defining distribution logic of tokens.\r\n/// @dev implementation\r\ncontract MintableTokenAllocator is TokenAllocator {\r\n\r\n    constructor(uint256 _maxSupply, address _management)\r\n        public\r\n        TokenAllocator(_maxSupply, _management)\r\n    {}\r\n\r\n    /// @notice Check whether contract is initialised\r\n    /// @return true if initialized\r\n    function isInitialized() public view returns (bool) {\r\n        return (\r\n            super.isInitialized() &&\r\n            hasPermission(address(this), CAN_MINT_TOKENS)\r\n        );\r\n    }\r\n\r\n\r\n    function decreaseCap(uint256 _valueToSubtract)\r\n        public\r\n        requirePermission(CAN_INTERACT_WITH_ALLOCATOR)\r\n        requireContractExistsInRegistry(CONTRACT_TOKEN)\r\n    {\r\n        require(\r\n            maxSupply.sub(_valueToSubtract) >= ERC20Mintable(\r\n                management.contractRegistry(CONTRACT_TOKEN)\r\n            ).totalSupply(),\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n        updateMaxSupply(maxSupply.sub(_valueToSubtract));\r\n    }\r\n\r\n    function internalAllocate(\r\n        address _holder,\r\n        uint256 _tokens\r\n    )\r\n        internal\r\n        requireContractExistsInRegistry(CONTRACT_TOKEN)\r\n        requirePermission(CAN_INTERACT_WITH_ALLOCATOR)\r\n    {\r\n        ERC20Mintable(management.contractRegistry(CONTRACT_TOKEN))\r\n            .mint(_holder, _tokens);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/LockupContract.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract LockupContract is Managed {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant PERCENT_ABS_MAX = 100;\r\n    bool public isPostponedStart;\r\n    uint256 public postponedStartDate;\r\n\r\n    mapping(address => uint256[]) public lockedAllocationData;\r\n\r\n    mapping(address => uint256) public manuallyLockedBalances;\r\n\r\n    event Lock(address holderAddress, uint256 amount);\r\n\r\n    constructor(address _management) public Managed(_management) {\r\n        isPostponedStart = true;\r\n    }\r\n\r\n    function isTransferAllowed(\r\n        address _address,\r\n        uint256 _value,\r\n        uint256 _time,\r\n        uint256 _holderBalance\r\n    )\r\n    external\r\n    view\r\n    returns (bool)\r\n    {\r\n        uint256 unlockedBalance = getUnlockedBalance(\r\n            _address,\r\n            _time,\r\n            _holderBalance\r\n        );\r\n        if (unlockedBalance >= _value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function allocationLog(\r\n        address _address,\r\n        uint256 _amount,\r\n        uint256 _startingAt,\r\n        uint256 _lockPeriodInSeconds,\r\n        uint256 _initialUnlockInPercent,\r\n        uint256 _releasePeriodInSeconds\r\n    )\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        lockedAllocationData[_address].push(_startingAt);\r\n        if (_initialUnlockInPercent > 0) {\r\n            _amount = _amount.mul(uint256(PERCENT_ABS_MAX)\r\n                .sub(_initialUnlockInPercent)).div(PERCENT_ABS_MAX);\r\n        }\r\n        lockedAllocationData[_address].push(_amount);\r\n        lockedAllocationData[_address].push(_lockPeriodInSeconds);\r\n        lockedAllocationData[_address].push(_releasePeriodInSeconds);\r\n        emit Lock(_address, _amount);\r\n    }\r\n\r\n    function getUnlockedBalance(\r\n        address _address,\r\n        uint256 _time,\r\n        uint256 _holderBalance\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 blockedAmount = manuallyLockedBalances[_address];\r\n\r\n        if (lockedAllocationData[_address].length == 0) {\r\n            return _holderBalance.sub(blockedAmount);\r\n        }\r\n        uint256[] memory  addressLockupData = lockedAllocationData[_address];\r\n        for (uint256 i = 0; i < addressLockupData.length / 4; i++) {\r\n            uint256 lockedAt = addressLockupData[i.mul(4)];\r\n            uint256 lockedBalance = addressLockupData[i.mul(4).add(1)];\r\n            uint256 lockPeriodInSeconds = addressLockupData[i.mul(4).add(2)];\r\n            uint256 _releasePeriodInSeconds = addressLockupData[\r\n                i.mul(4).add(3)\r\n            ];\r\n            if (lockedAt == 0 && true == isPostponedStart) {\r\n                if (postponedStartDate == 0) {\r\n                    blockedAmount = blockedAmount.add(lockedBalance);\r\n                    continue;\r\n                }\r\n                lockedAt = postponedStartDate;\r\n            }\r\n            if (lockedAt > _time) {\r\n                blockedAmount = blockedAmount.add(lockedBalance);\r\n                continue;\r\n            }\r\n            if (lockedAt.add(lockPeriodInSeconds) > _time) {\r\n                if (lockedBalance == 0) {\r\n                    blockedAmount = _holderBalance;\r\n                    break;\r\n                } else {\r\n                    uint256 tokensUnlocked;\r\n                    if (_releasePeriodInSeconds > 0) {\r\n                        uint256 duration = (_time.sub(lockedAt))\r\n                            .div(_releasePeriodInSeconds);\r\n                        tokensUnlocked = lockedBalance.mul(duration)\r\n                            .mul(_releasePeriodInSeconds)\r\n                            .div(lockPeriodInSeconds);\r\n                    }\r\n                    blockedAmount = blockedAmount\r\n                        .add(lockedBalance)\r\n                        .sub(tokensUnlocked);\r\n                }\r\n            }\r\n        }\r\n\r\n        return _holderBalance.sub(blockedAmount);\r\n    }\r\n\r\n    function setManuallyLockedForAddress (\r\n        address _holder,\r\n        uint256 _balance\r\n    )\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        manuallyLockedBalances[_holder] = _balance;\r\n    }\r\n\r\n    function setPostponedStartDate(uint256 _postponedStartDate)\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        postponedStartDate = _postponedStartDate;\r\n\r\n    }\r\n}\r\n\r\n// File: contracts/CLIAllocator.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract CLIAllocator is MintableTokenAllocator {\r\n\r\n    /* solium-disable */\r\n    address public constant strategicPartners = 0xd5249aB86Ef7cE0651DF1b111E607f59950514c3;\r\n    address public constant promotionsBounty = 0x38069DD2C6D385a7dE7dbB90eF74E23B12D124e3;\r\n    address public constant shareholders = 0xA210F19b4C1c52dB213f88fdCA76fD83859052FA;\r\n    address public constant advisors = 0x5d6019C130158FC00bc4Dc1edc949Fa84b8ad098;\r\n    address public constant pharmaIndustrialTrials = 0x880574A5b701e017C254840063DFBd1f59dF9a15;\r\n    address public constant managementTeam = 0x1e2Ce74Bc0a9A9fB2D6b3f630d585E0c00FF66B0;\r\n    address public constant teamIncentive = 0xD4184B19170af014c595EF0b0321760d89918B95;\r\n    address public constant publicSaleTokensHolder = 0x9ED362b5A8aF29CBC06548ba5C2f40978ca48Ec1;\r\n    address public constant applicature = 0x63e638d15462037161003a6083A9c4AeD50f8F73;\r\n\r\n    uint256 public constant strategicPartnersTokensAmount = 20000000e18;\r\n    uint256 public constant promotionsBountyTokensAmount = 5200000e18;\r\n    uint256 public constant shareholdersTokensAmount = 25000000e18;\r\n    uint256 public constant advisorsTokensAmount = 8000000e18;\r\n    uint256 public constant applicatureTokensAmount = 2000000e18;\r\n    uint256 public constant pharmaIndustrialTrialsTokensAmount = 10000000e18;\r\n    uint256 public constant managementTeamTokensAmount = 25000000e18;\r\n    uint256 public constant teamIncentiveTokensAmount = 24000000e18;\r\n    uint256 public constant publicSaleTokensAmount = 60000000e18;\r\n    /* solium-enable */\r\n\r\n    bool public isAllocated;\r\n\r\n    constructor(uint256 _maxSupply, address _management)\r\n        public\r\n        MintableTokenAllocator(_maxSupply, _management)\r\n    {\r\n\r\n    }\r\n\r\n    function increasePublicSaleCap(uint256 valueToAdd)\r\n        external\r\n        canCallOnlyRegisteredContract(CONTRACT_CROWDSALE)\r\n    {\r\n        internalAllocate(publicSaleTokensHolder, valueToAdd);\r\n    }\r\n\r\n    function unlockManuallyLockedBalances(address _holder)\r\n        public\r\n        requirePermission(CAN_LOCK_TOKENS)\r\n    {\r\n        LockupContract lockupContract = LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        );\r\n        lockupContract.setManuallyLockedForAddress(\r\n            _holder,\r\n            0\r\n        );\r\n    }\r\n\r\n    function allocateRequiredTokensToHolders() public {\r\n        require(isAllocated == false, ERROR_NOT_AVAILABLE);\r\n        isAllocated = true;\r\n        allocateTokensWithSimpleLockUp();\r\n        allocateTokensWithComplicatedLockup();\r\n        allocateTokensWithManualUnlock();\r\n        allocatePublicSale();\r\n    }\r\n\r\n    function allocatePublicSale() private {\r\n        internalAllocate(publicSaleTokensHolder, publicSaleTokensAmount);\r\n    }\r\n\r\n    function allocateTokensWithSimpleLockUp() private {\r\n        LockupContract lockupContract = LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        );\r\n        internalAllocate(strategicPartners, strategicPartnersTokensAmount);\r\n\r\n        internalAllocate(promotionsBounty, promotionsBountyTokensAmount);\r\n        lockupContract.allocationLog(\r\n            promotionsBounty,\r\n            promotionsBountyTokensAmount,\r\n            0,\r\n            SIX_MONTHS,\r\n            0,\r\n            SIX_MONTHS\r\n        );\r\n        internalAllocate(advisors, advisorsTokensAmount);\r\n        lockupContract.allocationLog(\r\n            advisors,\r\n            advisorsTokensAmount,\r\n            0,\r\n            SIX_MONTHS,\r\n            0,\r\n            SIX_MONTHS\r\n        );\r\n        internalAllocate(applicature, applicatureTokensAmount);\r\n        // 25% each  6 months\r\n        lockupContract.allocationLog(\r\n            applicature,\r\n            applicatureTokensAmount,\r\n            0,\r\n            SIX_MONTHS.mul(4),\r\n            0,\r\n            SIX_MONTHS\r\n        );\r\n    }\r\n\r\n    function allocateTokensWithComplicatedLockup() private {\r\n        LockupContract lockupContract = LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        );\r\n\r\n        internalAllocate(shareholders, shareholdersTokensAmount);\r\n        lockupContract.allocationLog(\r\n            shareholders,\r\n            shareholdersTokensAmount.div(5),\r\n            0,\r\n            SIX_MONTHS,\r\n            0,\r\n            SIX_MONTHS\r\n        );\r\n        lockupContract.allocationLog(\r\n            shareholders,\r\n            shareholdersTokensAmount.sub(shareholdersTokensAmount.div(5)),\r\n            0,\r\n            uint256(48).mul(MONTH_IN_SECONDS),\r\n            0,\r\n            YEAR_IN_SECONDS\r\n        );\r\n\r\n        internalAllocate(managementTeam, managementTeamTokensAmount);\r\n        lockupContract.allocationLog(\r\n            managementTeam,\r\n            managementTeamTokensAmount.mul(2).div(5),\r\n            0,\r\n            SIX_MONTHS,\r\n            50,\r\n            SIX_MONTHS\r\n        );\r\n        lockupContract.allocationLog(\r\n            managementTeam,\r\n            managementTeamTokensAmount.sub(\r\n                managementTeamTokensAmount.mul(2).div(5)\r\n            ),\r\n            0,\r\n            uint256(36).mul(MONTH_IN_SECONDS),\r\n            0,\r\n            YEAR_IN_SECONDS\r\n        );\r\n    }\r\n\r\n    function allocateTokensWithManualUnlock() private {\r\n        LockupContract lockupContract = LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        );\r\n\r\n        internalAllocate(\r\n            pharmaIndustrialTrials,\r\n            pharmaIndustrialTrialsTokensAmount\r\n        );\r\n        lockupContract.setManuallyLockedForAddress(\r\n            pharmaIndustrialTrials,\r\n            pharmaIndustrialTrialsTokensAmount\r\n        );\r\n        internalAllocate(teamIncentive, teamIncentiveTokensAmount);\r\n        lockupContract.setManuallyLockedForAddress(\r\n            teamIncentive,\r\n            teamIncentiveTokensAmount\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/pricing/ExchangeContract.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ncontract ExchangeContract is Managed {\r\n\r\n    uint256 public etherPriceInCurrency;\r\n    uint256 public currencyDecimals;\r\n    uint256 public priceUpdateAt;\r\n\r\n    event NewPriceTicker(string _price);\r\n\r\n    constructor(\r\n        address _management,\r\n        uint256 _etherPriceInCurrency,\r\n        uint256 _currencyDecimals\r\n    )\r\n        public\r\n        Managed(_management)\r\n    {\r\n        require(_etherPriceInCurrency > 0, ERROR_WRONG_AMOUNT);\r\n        require(_currencyDecimals > 0, ERROR_WRONG_AMOUNT);\r\n\r\n        etherPriceInCurrency = _etherPriceInCurrency;\r\n        currencyDecimals = _currencyDecimals;\r\n        priceUpdateAt = block.timestamp;\r\n    }\r\n\r\n    function setEtherInCurrency(string memory _price)\r\n        public\r\n        requirePermission(CAN_UPDATE_PRICE)\r\n    {\r\n        bytes memory bytePrice = bytes(_price);\r\n        uint256 dot = bytePrice.length.sub(uint256(currencyDecimals).add(1));\r\n\r\n        require(0x2e == uint(uint8(bytePrice[dot])), ERROR_WRONG_AMOUNT);\r\n\r\n        etherPriceInCurrency = parseInt(_price, currencyDecimals);\r\n\r\n        require(etherPriceInCurrency > 0, ERROR_WRONG_AMOUNT);\r\n\r\n        priceUpdateAt = block.timestamp;\r\n\r\n        emit NewPriceTicker(_price);\r\n    }\r\n\r\n    function parseInt(\r\n        string memory _a,\r\n        uint _b\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint _parsedInt)\r\n    {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i = 0; i < bresult.length; i++) {\r\n            if (\r\n                (uint(uint8(bresult[i])) >= 48) &&\r\n                (uint(uint8(bresult[i])) <= 57)\r\n            ) {\r\n                if (decimals) {\r\n                    if (_b == 0) {\r\n                        break;\r\n                    } else {\r\n                        _b--;\r\n                    }\r\n                }\r\n                mint *= 10;\r\n                mint += uint(uint8(bresult[i])) - 48;\r\n            } else if (uint(uint8(bresult[i])) == 46) {\r\n                decimals = true;\r\n            }\r\n        }\r\n        if (_b > 0) {\r\n            mint *= 10 ** _b;\r\n        }\r\n        return mint;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/pricing/PricingStrategyImpl.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title PricingStrategy\r\n * @author Applicature\r\n * @notice Contract is responsible for calculating tokens amount depending on price in USD\r\n * @dev implementation\r\n */\r\ncontract PricingStrategyImpl is PricingStrategy, ExchangeContract {\r\n\r\n    uint256 public constant TIER_ELEMENTS_AMOUNT = 9;\r\n\r\n    struct Tier {\r\n        uint256 tokenInCurrency;\r\n        uint256 maxTokensCollected;\r\n        uint256 bonusCap;\r\n        uint256 discountPercents;\r\n        uint256 bonusPercents;\r\n        uint256 minInvestInCurrency;\r\n        uint256 maxInvestInCurrency;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n    }\r\n\r\n    Tier[] public tiers;\r\n    uint256 public tokenDecimals;\r\n    uint256 public percentageAbsMax;\r\n    bool tiersChangingAllowed;\r\n    bool updateChangeRateAllowed;\r\n\r\n    constructor(\r\n        address _management,\r\n        bool _tiersChangingAllowed,\r\n        bool _updateChangeRateAllowed,\r\n        uint256[] memory _tiers,\r\n        uint256 _etherPriceInCurrency,\r\n        uint256 _currencyDecimals,\r\n        uint256 _tokenDecimals,\r\n        uint256 _percentageAbsMax\r\n    )\r\n        public\r\n        ExchangeContract(_management, _etherPriceInCurrency, _currencyDecimals)\r\n    {\r\n        require(_tiers.length % TIER_ELEMENTS_AMOUNT == 0, ERROR_WRONG_AMOUNT);\r\n        require(_tokenDecimals > 0, ERROR_WRONG_AMOUNT);\r\n        require(_percentageAbsMax > 0, ERROR_WRONG_AMOUNT);\r\n\r\n        tokenDecimals = _tokenDecimals;\r\n        percentageAbsMax = _percentageAbsMax;\r\n        tiersChangingAllowed = _tiersChangingAllowed;\r\n        updateChangeRateAllowed = _updateChangeRateAllowed;\r\n\r\n        uint256 length = _tiers.length.div(TIER_ELEMENTS_AMOUNT);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(1)] > 0 &&\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(3)] < _percentageAbsMax &&\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(4)] < _percentageAbsMax &&\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(7)] > 0 &&\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(8)] > _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(7)],\r\n                ERROR_WRONG_AMOUNT\r\n            );\r\n            require (\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(6)] == 0 ||\r\n                _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(6)] >= _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(5)],\r\n                ERROR_WRONG_AMOUNT\r\n            );\r\n            tiers.push(\r\n                Tier(\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT)],//tokenInCurrency\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(1)],//maxTokensCollected\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(2)],//bonusCap\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(3)],//discountPercents\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(4)],//bonusPercents\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(5)],//minInvestInCurrency\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(6)],//maxInvestInCurrency\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(7)],//startTime\r\n                    _tiers[i.mul(TIER_ELEMENTS_AMOUNT).add(8)]//endTime\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function updateDates(\r\n        uint8 _tierId,\r\n        uint256 _start,\r\n        uint256 _end\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require (\r\n            _start != 0 &&\r\n            _start < _end &&\r\n            _tierId < tiers.length,\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n        Tier storage tier = tiers[_tierId];\r\n        tier.startTime = _start;\r\n        tier.endTime = _end;\r\n    }\r\n\r\n    function updateTier(\r\n        uint256 _tierId,\r\n        uint256 _tokenInCurrency,\r\n        uint256 _maxTokensCollected,\r\n        uint256 _bonusCap,\r\n        uint256 _discountPercents,\r\n        uint256 _bonusPercents,\r\n        uint256 _minInvestInCurrency,\r\n        uint256 _maxInvestInCurrency,\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            tiersChangingAllowed == true &&\r\n            _maxTokensCollected >= _bonusCap &&\r\n            _discountPercents < percentageAbsMax &&\r\n            _bonusPercents < percentageAbsMax &&\r\n            (_maxInvestInCurrency == 0 || _maxInvestInCurrency >= _minInvestInCurrency) &&\r\n            _startTime != 0 &&\r\n            _startTime < _endTime &&\r\n            _tierId < tiers.length,\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n\r\n        Tier storage tier = tiers[_tierId];\r\n        tier.tokenInCurrency = _tokenInCurrency;\r\n        tier.maxTokensCollected = _maxTokensCollected;\r\n        tier.bonusCap = _bonusCap;\r\n        tier.discountPercents = _discountPercents;\r\n        tier.bonusPercents = _bonusPercents;\r\n        tier.minInvestInCurrency = _minInvestInCurrency;\r\n        tier.maxInvestInCurrency = _maxInvestInCurrency;\r\n        tier.startTime = _startTime;\r\n        tier.endTime = _endTime;\r\n    }\r\n\r\n    function setEtherInCurrency(string memory _price)\r\n        public\r\n        requirePermission(CAN_UPDATE_PRICE)\r\n    {\r\n        require(updateChangeRateAllowed == true, ERROR_NOT_AVAILABLE);\r\n        super.setEtherInCurrency(_price);\r\n    }\r\n\r\n    function isInitialized() \r\n        public \r\n        view \r\n        returns (bool) \r\n    {\r\n        return tiers.length > 0;\r\n    }\r\n\r\n    function getArrayOfTiers() \r\n        public \r\n        view \r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory tiersData = new uint256[](\r\n            getTiersAmount().mul(TIER_ELEMENTS_AMOUNT)\r\n        );\r\n\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            tiersData[j++] = uint256(tiers[i].tokenInCurrency);\r\n            tiersData[j++] = uint256(tiers[i].maxTokensCollected);\r\n            tiersData[j++] = uint256(tiers[i].bonusCap);\r\n            tiersData[j++] = uint256(tiers[i].discountPercents);\r\n            tiersData[j++] = uint256(tiers[i].bonusPercents);\r\n            tiersData[j++] = uint256(tiers[i].minInvestInCurrency);\r\n            tiersData[j++] = uint256(tiers[i].maxInvestInCurrency);\r\n            tiersData[j++] = uint256(tiers[i].startTime);\r\n            tiersData[j++] = uint256(tiers[i].endTime);\r\n        }\r\n\r\n        return tiersData;\r\n    }\r\n\r\n    function getTiersAmount()\r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        return tiers.length;\r\n    }\r\n\r\n    function getTierIndex(uint256 _tokensSold) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            if (\r\n                block.timestamp >= tiers[i].startTime &&\r\n                block.timestamp < tiers[i].endTime &&\r\n                tiers[i].maxTokensCollected > _tokensSold\r\n            ) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return tiers.length;\r\n    }\r\n\r\n    function getActualTierIndex(uint256 _tokensSold)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        for (uint256 i = 0; i < tiers.length; i++) {\r\n            if (\r\n                block.timestamp >= tiers[i].startTime &&\r\n                block.timestamp < tiers[i].endTime &&\r\n                tiers[i].maxTokensCollected > _tokensSold ||\r\n                block.timestamp < tiers[i].startTime\r\n            ) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return tiers.length.sub(1);\r\n    }\r\n\r\n    function getTierActualDates(uint256 _tokensSold)\r\n        public\r\n        view\r\n        returns (uint256 startTime, uint256 endTime)\r\n    {\r\n        uint256 tierIndex = getActualTierIndex(_tokensSold);\r\n        startTime = tiers[tierIndex].startTime;\r\n        endTime = tiers[tierIndex].endTime;\r\n    }\r\n\r\n    function getCurrencyAmount(uint256 _weiAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _weiAmount.mul(etherPriceInCurrency).div(1 ether);\r\n    }\r\n\r\n    function getTokenInCurrency(uint256 _tierIndex)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_tierIndex < tiers.length) {\r\n            if (getDiscount(_tierIndex) > 0) {\r\n\r\n                return tiers[_tierIndex].tokenInCurrency.mul(\r\n                    percentageAbsMax.sub(getDiscount(_tierIndex))\r\n                ).div(percentageAbsMax);\r\n            }\r\n\r\n            return tiers[_tierIndex].tokenInCurrency;\r\n        }\r\n    }\r\n\r\n    function calculateTokensByCurrency(\r\n        uint256 _tierIndex,\r\n        uint256 _currencyAmount\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _currencyAmount.mul(uint256(10) ** tokenDecimals)\r\n            .div(getTokenInCurrency(_tierIndex));\r\n    }\r\n\r\n    function calculateCurrencyByTokens(\r\n        uint256 _tierIndex,\r\n        uint256 _tokenAmount\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _tokenAmount.mul(getTokenInCurrency(_tierIndex))\r\n            .div(uint256(10) ** tokenDecimals);\r\n    }\r\n\r\n    function getDiscount(uint256 _tierIndex) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {\r\n        if (_tierIndex < uint256(tiers.length)) {\r\n            return tiers[_tierIndex].discountPercents;\r\n        }\r\n    }\r\n\r\n    function getMinEtherInvest(uint256 _tierIndex)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (\r\n            _tierIndex < uint256(tiers.length) && \r\n            tiers[_tierIndex].minInvestInCurrency > 0\r\n        ) {\r\n            return tiers[_tierIndex].minInvestInCurrency\r\n                .mul(1 ether)\r\n                .div(etherPriceInCurrency);\r\n        }\r\n    }\r\n\r\n    function getMaxEtherInvest(uint256 _tierIndex)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (\r\n            _tierIndex < uint256(tiers.length) && \r\n            tiers[_tierIndex].maxInvestInCurrency > 0\r\n        ) {\r\n            return tiers[_tierIndex].maxInvestInCurrency\r\n                .mul(1 ether)\r\n                .div(etherPriceInCurrency);\r\n        }\r\n    }\r\n\r\n    function getRemainingTokens(uint256 _tokensSold)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return tiers[tiers.length.sub(1)]\r\n            .maxTokensCollected\r\n            .sub(_tokensSold);\r\n    }\r\n\r\n    function getTierUnsoldTokens(uint256 _tokensSold) \r\n        public \r\n        view \r\n        returns (uint256) \r\n    {   \r\n        return tiers[getActualTierIndex(_tokensSold)]\r\n            .maxTokensCollected\r\n            .sub(_tokensSold);\r\n    }\r\n\r\n    function calculateBonusAmount(\r\n        uint256 _tierIndex, \r\n        uint256 _tokens, \r\n        uint256 _bonusProduced\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_bonusProduced.add(_tokens) <= tiers[_tierIndex].bonusCap) {\r\n            return _tokens\r\n                .mul(tiers[_tierIndex].bonusPercents)\r\n                .div(percentageAbsMax);\r\n        }\r\n\r\n        return tiers[_tierIndex]\r\n            .bonusCap\r\n            .sub(_bonusProduced)\r\n            .mul(tiers[_tierIndex].bonusPercents)\r\n            .div(percentageAbsMax);\r\n    }\r\n\r\n    function getTokensWithoutRestrictions(\r\n        uint256 _currencyAmount,\r\n        uint256 _tokensSold\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 tokens, \r\n            uint256 tokensExcludingBonus, \r\n            uint256 bonus\r\n        )\r\n    {\r\n        if (_currencyAmount == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 tierIndex = getActualTierIndex(_tokensSold);\r\n\r\n        tokensExcludingBonus = calculateTokensByCurrency(\r\n            tierIndex,\r\n            _currencyAmount\r\n        );\r\n        bonus = tokensExcludingBonus\r\n            .mul(tiers[tierIndex].bonusPercents)\r\n            .div(percentageAbsMax);\r\n        tokens = tokensExcludingBonus.add(bonus);\r\n    }\r\n\r\n    function getTokens(\r\n        address,\r\n        uint256 _tokensAvailable,\r\n        uint256 _tokensSold,\r\n        uint256 _currencyAmount,\r\n        uint256 _bonusProduced\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 tokens,\r\n            uint256 tokensExcludingBonus,\r\n            uint256 bonus\r\n        )\r\n    {\r\n        if (_currencyAmount == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 tierIndex = getTierIndex(_tokensSold);\r\n        if (tierIndex == tiers.length) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        if (\r\n            _currencyAmount < tiers[tierIndex].minInvestInCurrency ||\r\n            tiers[tierIndex].maxInvestInCurrency > 0 &&\r\n            _currencyAmount > tiers[tierIndex].maxInvestInCurrency\r\n        ) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 remainingCurrencyAmount = _currencyAmount;\r\n        uint256 newTokensSold = _tokensSold;\r\n        uint256 tierTokens;\r\n        uint256 diff;\r\n\r\n        for (uint256 i = tierIndex; i < tiers.length; i++) {\r\n            tierTokens = calculateTokensByCurrency(i, remainingCurrencyAmount);\r\n\r\n            if (\r\n                tiers[i].startTime < block.timestamp &&\r\n                tiers[i].endTime > block.timestamp\r\n            ) {\r\n                if (newTokensSold.add(tierTokens) > tiers[i].maxTokensCollected) {\r\n                    diff = tiers[i].maxTokensCollected.sub(newTokensSold);\r\n                    remainingCurrencyAmount = remainingCurrencyAmount.sub(\r\n                        calculateCurrencyByTokens(i, diff)\r\n                    );\r\n                } else {\r\n                    diff = tierTokens;\r\n                    remainingCurrencyAmount = 0;\r\n                }\r\n\r\n                tokensExcludingBonus = tokensExcludingBonus.add(diff);\r\n                bonus = bonus.add(calculateBonusAmount(i, diff, _bonusProduced));\r\n\r\n                if (remainingCurrencyAmount == 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        tokens = tokens.add(tokensExcludingBonus.add(bonus));\r\n\r\n        if (remainingCurrencyAmount > 0 || tokens > _tokensAvailable) {\r\n            return (0, 0, 0);\r\n        }\r\n    }\r\n\r\n    function getWeis(\r\n        uint256 _bonusProduced,\r\n        uint256 _tokensSold,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 totalWeiAmount, \r\n            uint256 tokensBonus\r\n        )\r\n    {\r\n        if (_tokens == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 tierIndex = getTierIndex(_tokensSold);\r\n        if (tierIndex == tiers.length) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 remainingTokens = _tokens;\r\n        uint256 newTokensSold = _tokensSold;\r\n        uint256 diff;\r\n\r\n        for (uint i = tierIndex; i < tiers.length; i++) {\r\n            if (\r\n                tiers[i].startTime < block.timestamp &&\r\n                tiers[i].endTime > block.timestamp\r\n            ) {\r\n                if (\r\n                    newTokensSold.add(remainingTokens) > \r\n                    tiers[i].maxTokensCollected\r\n                ) {\r\n                    diff = tiers[i].maxTokensCollected.sub(newTokensSold);\r\n                    remainingTokens = remainingTokens.sub(diff);\r\n                } else {\r\n                    diff = remainingTokens;\r\n                    remainingTokens = 0;\r\n                }\r\n\r\n                totalWeiAmount = totalWeiAmount.add(\r\n                    calculateCurrencyByTokens(i, diff).mul(1 ether).div(etherPriceInCurrency)\r\n                );\r\n                tokensBonus = tokensBonus\r\n                    .add(calculateBonusAmount(i, diff, _bonusProduced));\r\n\r\n                if (remainingTokens == 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 currencyAmount = getCurrencyAmount(totalWeiAmount);\r\n        if (\r\n            currencyAmount < tiers[tierIndex].minInvestInCurrency ||\r\n            tiers[tierIndex].maxInvestInCurrency > 0 &&\r\n            currencyAmount > tiers[tierIndex].maxInvestInCurrency\r\n        ) {\r\n            return (0, 0);\r\n        }\r\n\r\n        if (remainingTokens > 0) {\r\n            return (0, 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/CLIPricingStrategy.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ncontract CLIPricingStrategy is PricingStrategyImpl {\r\n\r\n    constructor(\r\n        address _management,\r\n        uint256 _etherPriceInCurrency,\r\n        uint256[] memory _tiers\r\n    ) public PricingStrategyImpl(\r\n        _management,\r\n        true,\r\n        true,\r\n        _tiers,\r\n        _etherPriceInCurrency,\r\n        5,  // main currency decimals - 1$ = 100000\r\n        18, // token decimals\r\n        100 // absolute percent amount  - 100%\r\n    ) {\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/CLIToken.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CLIToken is ERC20, ERC20Detailed, Managed {\r\n\r\n    modifier requireUnlockedBalance(\r\n        address _address,\r\n        uint256 _value,\r\n        uint256 _time,\r\n        uint256 _holderBalance\r\n    ) {\r\n\r\n        require(\r\n            LockupContract(\r\n                management.contractRegistry(CONTRACT_LOCKUP)\r\n            ).isTransferAllowed(\r\n                _address,\r\n                _value,\r\n                _time,\r\n                _holderBalance\r\n            ),\r\n            ERROR_NOT_AVAILABLE\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _management\r\n    )\r\n        public\r\n        ERC20Detailed(\"ClinTex\", \"CTI\", 18)\r\n        Managed(_management)\r\n    {\r\n        _mint(0x8FAE27b50457C10556C45798c34f73AE263282a6, 151000000000000000);\r\n    }\r\n\r\n    function mint(\r\n        address _account,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        requirePermission(CAN_MINT_TOKENS)\r\n        canCallOnlyRegisteredContract(CONTRACT_ALLOCATOR)\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _amount <= CLIAllocator(\r\n                management.contractRegistry(CONTRACT_ALLOCATOR)\r\n            ).tokensAvailable(totalSupply()),\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n        _mint(_account, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        requireUnlockedBalance(\r\n            msg.sender,\r\n            _tokens,\r\n            block.timestamp,\r\n            balanceOf(msg.sender)\r\n        )\r\n        returns (bool)\r\n    {\r\n        super.transfer(_to, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _holder,\r\n        address _to,\r\n        uint256 _tokens\r\n    )\r\n        public\r\n        requireUnlockedBalance(\r\n            _holder,\r\n            _tokens,\r\n            block.timestamp,\r\n            balanceOf(_holder)\r\n        )\r\n        returns (bool)\r\n    {\r\n        super.transferFrom(_holder, _to, _tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 value)\r\n        public\r\n        requirePermission(CAN_BURN_TOKENS)\r\n        requireUnlockedBalance(\r\n            msg.sender,\r\n            value,\r\n            block.timestamp,\r\n            balanceOf(msg.sender)\r\n        )\r\n    {\r\n        require(balanceOf(msg.sender) >= value, ERROR_WRONG_AMOUNT);\r\n        super._burn(msg.sender, value);\r\n    }\r\n}\r\n\r\n// File: contracts/CLIContribution.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\ncontract CLIContribution is ContributionForwarder {\r\n\r\n    address payable public receiver;\r\n\r\n    Contribution[] public contributions;\r\n\r\n    struct Contribution {\r\n        address payable contributor;\r\n        uint256 weiAmount;\r\n        uint256 currencyAmount;\r\n        uint256 tokensAmount;\r\n        uint256 timestamp;\r\n        uint256 referralTokensSent;\r\n    }\r\n\r\n    constructor(\r\n        address payable _receiver,\r\n        address _management\r\n    )\r\n        public\r\n        ContributionForwarder(_management)\r\n    {\r\n        receiver = _receiver;\r\n    }\r\n\r\n    function recordContribution(\r\n        address payable _contributor,\r\n        uint256 _currencyAmount,\r\n        uint256 _etherAmount,\r\n        uint256 _tokens,\r\n        uint256 _referralTokens\r\n    )\r\n        external\r\n        payable\r\n        canCallOnlyRegisteredContract(CONTRACT_CROWDSALE)\r\n        returns (uint256 id)\r\n    {\r\n        id = contributions.push(Contribution(\r\n            _contributor,\r\n            _etherAmount,\r\n            _currencyAmount,\r\n            _tokens,\r\n            block.timestamp,\r\n            _referralTokens\r\n        )).sub(1);\r\n\r\n    }\r\n\r\n    function internalForward() internal {\r\n        weiForwarded = weiForwarded.add(address(this).balance);\r\n        receiver.transfer(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/CLIReferral.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CLIReferral is Managed {\r\n\r\n    uint256 public referralMaxSupply = 800000e18;\r\n    uint256 public referralPercent = 4;\r\n    uint256 public absPercentValue = 100;\r\n    uint256 public referralTotalSupply;\r\n    mapping (address => address) public referralToRefererRegistry;\r\n\r\n    constructor(address _management) public Managed(_management) {}\r\n\r\n    function registerRefererForAddress(\r\n        address _referral,\r\n        address _referrer\r\n    )\r\n        public\r\n        requirePermission(CAN_SET_WHITELISTED)\r\n    {\r\n        require(\r\n            referralToRefererRegistry[_referral] == address(0),\r\n            ERROR_NOT_AVAILABLE\r\n        );\r\n        referralToRefererRegistry[_referral] = _referrer;\r\n    }\r\n\r\n    function allocate(\r\n        address _referralAddress,\r\n        uint256 _tokensPurchased\r\n    )\r\n        public\r\n        requirePermission(CAN_ALLOCATE_REFERRAL_TOKENS)\r\n        returns (uint256 allocatedTokens)\r\n    {\r\n        address referrer = referralToRefererRegistry[_referralAddress];\r\n\r\n        allocatedTokens = getReferrerTokens(\r\n            _referralAddress, _tokensPurchased\r\n        );\r\n\r\n        if (allocatedTokens == 0){\r\n            return allocatedTokens;\r\n        }\r\n        require(\r\n            referralTotalSupply.add(allocatedTokens) <= referralMaxSupply,\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n\r\n        referralTotalSupply = referralTotalSupply.add(allocatedTokens);\r\n\r\n        TokenAllocator(\r\n            management.contractRegistry(CONTRACT_ALLOCATOR)\r\n        ).allocate(\r\n            referrer,\r\n            allocatedTokens,\r\n            CLIToken(management.contractRegistry(CONTRACT_TOKEN)).totalSupply()\r\n        );\r\n        // unlock initial 25% tokens\r\n        // lock 25% tokens for 6 months\r\n        LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        ).allocationLog(\r\n            referrer,\r\n            allocatedTokens.div(2),\r\n            0,\r\n            SIX_MONTHS,\r\n            50,\r\n            SIX_MONTHS\r\n        );\r\n\r\n        // lock 25% tokens for 12 months\r\n        // lock 25% tokens for 24 months\r\n        LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        ).allocationLog(\r\n            referrer,\r\n            allocatedTokens.sub(allocatedTokens.div(2)),\r\n            0,\r\n            uint256(24).mul(MONTH_IN_SECONDS),\r\n            0,\r\n            YEAR_IN_SECONDS\r\n        );\r\n\r\n    }\r\n\r\n    function getReferrerTokens(\r\n        address _referralAddress,\r\n        uint256 _tokensPurchased\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address referrer = referralToRefererRegistry[_referralAddress];\r\n        if (referrer == address(0)) {\r\n            return 0;\r\n        }\r\n        return _tokensPurchased.mul(referralPercent).div(absPercentValue);\r\n    }\r\n}\r\n\r\n// File: contracts/CLICrowdsale.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CLICrowdsale is CrowdsaleImpl {\r\n\r\n    uint256 public constant safeAgreementThreshold = 100000e5;\r\n    uint256 public seedMaxSupply = 20000000e18;\r\n\r\n    uint256 public collectedCurrency;\r\n\r\n    mapping (address => uint256) public contributedByUser;\r\n    mapping (address => bool) public userSafeAgreementExist;\r\n    address[] public userSafeAgreementsList;\r\n\r\n    event Contribution(\r\n        uint256 _id,\r\n        address _contributor,\r\n        uint256 _currencyAmount,\r\n        uint256 _tokensExcludingBonus,\r\n        uint256 _bonus\r\n    );\r\n\r\n    constructor(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        address _management\r\n    )\r\n        public\r\n        CrowdsaleImpl(\r\n            _startTime,\r\n            _endTime,\r\n            true,\r\n            true,\r\n            false,\r\n            _management\r\n        )\r\n    {}\r\n\r\n    // function is added to omit issue with fallback gas limits\r\n    function buy()\r\n        external\r\n        payable\r\n    {\r\n        buyInternal(\r\n            msg.sender,\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    function updateState() public {\r\n        (startDate, endDate) = CLIPricingStrategy(\r\n            management.contractRegistry(CONTRACT_PRICING)\r\n        ).getTierActualDates(tokensSold);\r\n\r\n        super.updateState();\r\n    }\r\n\r\n\r\n    function discardUnsoldTokens() public {\r\n        updateState();\r\n\r\n        if (endDate < block.timestamp && false == finalized) {\r\n            uint256 valueToSubtract = (seedMaxSupply.sub(tokensSold)).div(2);\r\n            CLIAllocator allocatorContract = CLIAllocator(\r\n                management.contractRegistry(CONTRACT_ALLOCATOR)\r\n            );\r\n            allocatorContract.decreaseCap(valueToSubtract);\r\n            allocatorContract.increasePublicSaleCap(\r\n                seedMaxSupply.sub(tokensSold).sub(valueToSubtract)\r\n            );\r\n            seedMaxSupply = tokensSold;\r\n            finalized = true;\r\n        }\r\n    }\r\n\r\n    function preValidatePurchase(\r\n        address _beneficiary,\r\n        uint256 _tokensAmount\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        super.preValidatePurchase(_beneficiary, _tokensAmount);\r\n        require(\r\n            tokensSold.add(_tokensAmount) <= seedMaxSupply,\r\n            ERROR_WRONG_AMOUNT\r\n        );\r\n    }\r\n\r\n    function onContribution(\r\n        address payable _contributor,\r\n        uint256 _currencyAmount,\r\n        uint256 _tokens,\r\n        uint256\r\n    ) internal {\r\n        tokensSold = tokensSold.add(_tokens);\r\n        collectedCurrency = collectedCurrency.add(_currencyAmount);\r\n        contributedByUser[_contributor] = contributedByUser[_contributor]\r\n            .add(_currencyAmount);\r\n        if (\r\n            !userSafeAgreementExist[_contributor] &&\r\n            _currencyAmount >= safeAgreementThreshold\r\n        ) {\r\n            userSafeAgreementExist[_contributor] = true;\r\n            userSafeAgreementsList.push(_contributor);\r\n        }\r\n\r\n        uint256 referralTokens = CLIReferral(\r\n            management.contractRegistry(CONTRACT_REFERRAL)\r\n        ).allocate(_contributor, _tokens);\r\n\r\n        lockPurchasedTokens(\r\n            _contributor,\r\n            _tokens\r\n        );\r\n\r\n        uint256 contributionId = CLIContribution(\r\n            management.contractRegistry(CONTRACT_FORWARDER)\r\n        ).recordContribution(\r\n            _contributor,\r\n            _currencyAmount,\r\n            msg.value,\r\n            _tokens,\r\n            referralTokens\r\n        );\r\n        forwardFunds(_contributor);\r\n\r\n        emit Contribution(\r\n            contributionId,\r\n            _contributor,\r\n            _currencyAmount,\r\n            _tokens,\r\n            0\r\n        );\r\n    }\r\n\r\n    function lockPurchasedTokens(\r\n        address _contributor,\r\n        uint256 _tokens\r\n    )\r\n    private\r\n    {\r\n        // unlock initial 25% tokens\r\n        // lock 25% tokens for 6 months\r\n        LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        ).allocationLog(\r\n            _contributor,\r\n            _tokens.div(2),\r\n            0,\r\n            SIX_MONTHS,\r\n            50,\r\n            SIX_MONTHS\r\n        );\r\n\r\n        // lock 25% tokens for 12 months\r\n        // lock 25% tokens for 24 months\r\n        LockupContract(\r\n            management.contractRegistry(CONTRACT_LOCKUP)\r\n        ).allocationLog(\r\n            _contributor,\r\n            _tokens.sub(_tokens.div(2)),\r\n            0,\r\n            uint256(24).mul(MONTH_IN_SECONDS),\r\n            0,\r\n            YEAR_IN_SECONDS\r\n        );\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensExcludingBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensExcludingBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ALLOCATE_REFERRAL_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_BURN_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_CANCEL_TRANSACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_INTERACT_WITH_ALLOCATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_LOCK_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_MINT_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_PAUSE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_ALLOCATOR_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_REFERRAL_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SET_WHITELISTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_UPDATE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_UPDATE_STATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_AGENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ALLOCATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_CROWDSALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_FORWARDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_PRICING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_STATS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ECLIUDED_ADDRESSES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_ACCESS_DENIED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NOT_AVAILABLE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_NO_CONTRACT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_WRONG_AMOUNT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXTERNAL_CONTRIBUTORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANUAL_TOKENS_ALLOCATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONTH_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIGNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SIX_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHITELISTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YEAR_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowAnonymous\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowSigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusProduced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"internalType\":\"enum Crowdsale.State\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"discardUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currencyAmount\",\"type\":\"uint256\"}],\"name\":\"externalContribution\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum Crowdsale.State\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"contract Management\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeAgreementThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"setManagementContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSafeAgreementExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSafeAgreementsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CLICrowdsale","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ed64fce000000000000000000000000000000000000000000000000000000005fc7127a0000000000000000000000005475379562cff40032733220128e8d58a917e058","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6ec4d199fbae983d163ae38db32d54373c80d4d94ccf0ce32e69a3799e76ccc8"}]}