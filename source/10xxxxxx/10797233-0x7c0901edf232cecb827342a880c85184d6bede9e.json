{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract BrandContestV2 {\r\n    uint256 private _startBlock;\r\n    uint256 private _endBlock;\r\n\r\n    address private _votingTokenAddress;\r\n    address private _nftTokenAddress;\r\n\r\n    uint256[] private _candidates;\r\n    mapping(uint256 => bool) _isCandidate;\r\n\r\n    uint256 private _singleVoteAmount;\r\n    uint256 private _singleVoteAmountToBurn;\r\n\r\n    mapping(address => bool) private _voted;\r\n    mapping(address => bool) private _redeemed;\r\n    mapping(address => uint256) private _voters;\r\n    mapping(uint256 => uint256) private _votes;\r\n\r\n    uint256 private _toBurn;\r\n\r\n    bool private _burnt;\r\n\r\n    constructor(\r\n        uint256 startBlock,\r\n        uint256 endBlock,\r\n        address votingTokenAddress,\r\n        address nftTokenAddress,\r\n        uint256[] memory candidates,\r\n        uint256 singleVoteAmount,\r\n        uint256 singleVoteAmountToBurn\r\n    ) {\r\n        _startBlock = startBlock;\r\n        _endBlock = endBlock;\r\n        _votingTokenAddress = votingTokenAddress;\r\n        _nftTokenAddress = nftTokenAddress;\r\n        _candidates = candidates;\r\n        for(uint256 i = 0; i < candidates.length; i++) {\r\n            _isCandidate[candidates[i]] = true;\r\n        }\r\n        _singleVoteAmount = singleVoteAmount;\r\n        _singleVoteAmountToBurn = singleVoteAmountToBurn;\r\n    }\r\n\r\n    function startBlock() public view returns (uint256) {\r\n        return _startBlock;\r\n    }\r\n\r\n    function endBlock() public view returns (uint256) {\r\n        return _endBlock;\r\n    }\r\n\r\n    function votingTokenAddress() public view returns (address) {\r\n        return _votingTokenAddress;\r\n    }\r\n\r\n    function nftTokenAddress() public view returns (address) {\r\n        return _nftTokenAddress;\r\n    }\r\n\r\n    function candidates() public view returns (uint256[] memory) {\r\n        return _candidates;\r\n    }\r\n\r\n    function isCandidate(uint256 tokenId) public view returns (bool) {\r\n        return _isCandidate[tokenId];\r\n    }\r\n\r\n    function singleVoteAmount() public view returns (uint256) {\r\n        return _singleVoteAmount;\r\n    }\r\n\r\n    function singleVoteAmountToBurn() public view returns (uint256) {\r\n        return _singleVoteAmountToBurn;\r\n    }\r\n\r\n    function votes(uint256 tokenId) public view returns (uint256) {\r\n        return _votes[tokenId];\r\n    }\r\n\r\n    function voted(address voter) public view returns (bool, uint256) {\r\n        return (_voted[voter], _voters[voter]);\r\n    }\r\n\r\n    function burnt() public view returns (bool) {\r\n        return _burnt;\r\n    }\r\n\r\n    function toBurn() public view returns (uint256) {\r\n        return _toBurn;\r\n    }\r\n\r\n    function redeemed(address voter) public view returns (bool) {\r\n        return _redeemed[voter];\r\n    }\r\n\r\n    function vote(uint256 tokenId) public {\r\n        require(block.number >= _startBlock, \"Survey not yet started\");\r\n        require(block.number <= _endBlock, \"Survey has ended\");\r\n        require(!_voted[msg.sender], \"User Already Voted\");\r\n        require(\r\n            _isCandidate[tokenId],\r\n            \"The chosen tokenId is not concurring in the challenge\"\r\n        );\r\n        IERC20(_votingTokenAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _singleVoteAmount\r\n        );\r\n        _voters[msg.sender] = tokenId;\r\n        _voted[msg.sender] = true;\r\n        _votes[tokenId] = _votes[tokenId] + 1;\r\n        _toBurn += _singleVoteAmountToBurn;\r\n    }\r\n\r\n    function redeemVotingTokens(address voter) public {\r\n        require(block.number >= _startBlock, \"Survey not yet started\");\r\n        require(block.number >= _endBlock, \"Survey is still running\");\r\n        require(_voted[voter], \"Your address did not vote\");\r\n        require(!_redeemed[voter], \"This voter already redeemed his stake\");\r\n        _redeemed[voter] = true;\r\n        IERC20(_votingTokenAddress).transfer(\r\n            voter,\r\n            _singleVoteAmount - _singleVoteAmountToBurn\r\n        );\r\n    }\r\n\r\n    function burn() public {\r\n        require(block.number >= _startBlock, \"Survey not yet started\");\r\n        require(block.number >= _endBlock, \"Survey is still running\");\r\n        require(!_burnt, \"Already burnt\");\r\n        IERC20(_votingTokenAddress).burn(_toBurn);\r\n        _burnt = true;\r\n    }\r\n}\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function burn(uint256 amount) external;\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"votingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"candidates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"singleVoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singleVoteAmountToBurn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"redeemVotingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"redeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleVoteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleVoteAmountToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BrandContestV2","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000a4cb800000000000000000000000000000000000000000000000000000000000a50de80000000000000000000000007b123f53421b1bf8533339bfbdc7c98aa94163db000000000000000000000000a0a5bb7b563461a586c1bd6d635ba9fde731500800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007a000000000000000000000000000000000000000000000000000000000000007900000000000000000000000000000000000000000000000000000000000000780000000000000000000000000000000000000000000000000000000000000077000000000000000000000000000000000000000000000000000000000000007600000000000000000000000000000000000000000000000000000000000000750000000000000000000000000000000000000000000000000000000000000074","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6ae0866ec413cae05ef8a91fdeb0eae69a694eedb0aa5ecdb06126c2deaf0019"}]}