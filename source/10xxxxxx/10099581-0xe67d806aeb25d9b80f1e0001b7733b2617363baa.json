{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * \r\n * ██████╗ ██╗   ██╗███████╗██╗  ██╗ ██████╗██╗  ██╗ █████╗ ██╗███╗   ██╗██╗███╗   ██╗ ██████╗\r\n * ██╔══██╗██║   ██║██╔════╝██║  ██║██╔════╝██║  ██║██╔══██╗██║████╗  ██║██║████╗  ██║██╔════╝\r\n * ██████╔╝██║   ██║███████╗███████║██║     ███████║███████║██║██╔██╗ ██║██║██╔██╗ ██║██║  ███╗\r\n * ██╔══██╗██║   ██║╚════██║██╔══██║██║     ██╔══██║██╔══██║██║██║╚██╗██║██║██║╚██╗██║██║   ██║\r\n * ██║  ██║╚██████╔╝███████║██║  ██║╚██████╗██║  ██║██║  ██║██║██║ ╚████║██║██║ ╚████║╚██████╔╝\r\n * ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚═╝╚═╝  ╚═══╝ ╚═════╝\r\n * \r\n * \r\n * Auto Run Queue 1 Line Concept !\r\n * URL: https://rushchaining.com/\r\n **/\r\npragma solidity 0.6.4;\r\n\r\n\r\ncontract RushChaining {\r\n    address public ownerWallet;\r\n\r\n    struct QueueStruct {\r\n        uint256 id;\r\n        address addr;\r\n    }\r\n    mapping(uint256 => QueueStruct) public queue;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint256 id;\r\n        uint256 invest;\r\n        uint256 profit;\r\n        address refAddr;\r\n        uint256 referral;\r\n    }\r\n    mapping(address => UserStruct) public users;\r\n\r\n    // Fee for ownerWallet in percentage\r\n    uint256 FEE = 3;\r\n    // Rewards for invitation in percentage\r\n    uint256 REWARD = 7;\r\n\r\n    mapping(uint256 => address) public addrByID;\r\n    uint256 public currQueue = 0;\r\n\r\n    // Event for notification\r\n    event regEvent(\r\n        address indexed _user,\r\n        address indexed _refAddr,\r\n        uint256 currQueue\r\n    );\r\n\r\n    constructor() public {\r\n        ownerWallet = msg.sender;\r\n\r\n        UserStruct memory userStruct;\r\n        QueueStruct memory queueStruct;\r\n        currQueue++;\r\n\r\n        queueStruct = QueueStruct({id: currQueue, addr: msg.sender});\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currQueue,\r\n            invest: 0,\r\n            profit: 0,\r\n            refAddr: msg.sender,\r\n            referral: 0\r\n        });\r\n\r\n        users[ownerWallet] = userStruct;\r\n        queue[currQueue] = queueStruct;\r\n        addrByID[currQueue] = ownerWallet;\r\n    }\r\n\r\n    function regByID(uint256 _referrerID) public payable {\r\n        require(msg.value == 0.1 ether, \"Require 0.1 ether\");\r\n\r\n        require(_referrerID <= currQueue, \"Incorrect referrer Id\");\r\n        if (_referrerID <= 0) _referrerID = 1;\r\n\r\n        UserStruct memory userStruct;\r\n        QueueStruct memory queueStruct;\r\n        currQueue++;\r\n\r\n        queueStruct = QueueStruct({id: currQueue, addr: msg.sender});\r\n\r\n        if (!users[msg.sender].isExist) {\r\n            userStruct = UserStruct({\r\n                isExist: true,\r\n                id: currQueue,\r\n                invest: msg.value,\r\n                profit: 0,\r\n                refAddr: addrByID[_referrerID],\r\n                referral: 0\r\n            });\r\n\r\n            users[msg.sender] = userStruct;\r\n        } else {\r\n            users[msg.sender].invest = users[msg.sender].invest + msg.value;\r\n        }\r\n\r\n        queue[currQueue] = queueStruct;\r\n        addrByID[currQueue] = msg.sender;\r\n\r\n        users[addrByID[_referrerID]].referral++;\r\n\r\n        // Send fee to ownerWallet\r\n        address(uint160(ownerWallet)).transfer((msg.value * FEE) / 100);\r\n        users[ownerWallet].profit =\r\n            users[ownerWallet].profit +\r\n            (msg.value * FEE) /\r\n            100;\r\n\r\n        // Pay for referral\r\n        address(uint160(addrByID[_referrerID])).transfer(\r\n            (msg.value * REWARD) / 100\r\n        );\r\n        users[addrByID[_referrerID]].profit =\r\n            users[addrByID[_referrerID]].profit +\r\n            (msg.value * REWARD) /\r\n            100;\r\n\r\n        emit regEvent(msg.sender, addrByID[_referrerID], currQueue);\r\n\r\n        if (currQueue > 11) {\r\n            address(uint160(addrByID[currQueue - 11])).transfer(\r\n                (msg.value * 10) / 100\r\n            );\r\n            users[addrByID[currQueue - 11]].profit =\r\n                users[addrByID[currQueue - 11]].profit +\r\n                (msg.value * 10) /\r\n                100;\r\n\r\n            address(uint160(addrByID[currQueue - 10])).transfer(\r\n                (msg.value * 10) / 100\r\n            );\r\n            users[addrByID[currQueue - 10]].profit =\r\n                users[addrByID[currQueue - 10]].profit +\r\n                (msg.value * 10) /\r\n                100;\r\n\r\n            address(uint160(addrByID[currQueue - 9])).transfer(\r\n                (msg.value * 10) / 100\r\n            );\r\n            users[addrByID[currQueue - 9]].profit =\r\n                users[addrByID[currQueue - 9]].profit +\r\n                (msg.value * 10) /\r\n                100;\r\n\r\n            address(uint160(addrByID[currQueue - 8])).transfer(\r\n                (msg.value * 10) / 100\r\n            );\r\n            users[addrByID[currQueue - 8]].profit =\r\n                users[addrByID[currQueue - 8]].profit +\r\n                (msg.value * 10) /\r\n                100;\r\n\r\n            address(uint160(addrByID[currQueue - 7])).transfer(\r\n                (msg.value * 10) / 100\r\n            );\r\n            users[addrByID[currQueue - 7]].profit =\r\n                users[addrByID[currQueue - 7]].profit +\r\n                (msg.value * 10) /\r\n                100;\r\n\r\n            address(uint160(addrByID[currQueue - 6])).transfer(\r\n                (msg.value * 10) / 100\r\n            );\r\n            users[addrByID[currQueue - 6]].profit =\r\n                users[addrByID[currQueue - 6]].profit +\r\n                (msg.value * 10) /\r\n                100;\r\n\r\n            address(uint160(addrByID[currQueue - 5])).transfer(\r\n                (msg.value * 10) / 100\r\n            );\r\n            users[addrByID[currQueue - 5]].profit =\r\n                users[addrByID[currQueue - 5]].profit +\r\n                (msg.value * 10) /\r\n                100;\r\n\r\n            address(uint160(addrByID[currQueue - 4])).transfer(\r\n                (msg.value * 10) / 100\r\n            );\r\n            users[addrByID[currQueue - 4]].profit =\r\n                users[addrByID[currQueue - 4]].profit +\r\n                (msg.value * 10) /\r\n                100;\r\n\r\n            address(uint160(addrByID[currQueue - 3])).transfer(\r\n                (msg.value * 10) / 100\r\n            );\r\n            users[addrByID[currQueue - 3]].profit =\r\n                users[addrByID[currQueue - 3]].profit +\r\n                (msg.value * 10) /\r\n                100;\r\n        } else {\r\n            address(uint160(ownerWallet)).transfer(\r\n                (msg.value * (100 - FEE - REWARD)) / 100\r\n            );\r\n            users[ownerWallet].profit =\r\n                users[ownerWallet].profit +\r\n                (msg.value * (100 - FEE - REWARD)) /\r\n                100;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_refAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currQueue\",\"type\":\"uint256\"}],\"name\":\"regEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addrByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regByID\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RushChaining","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2fdf3296fae9861a393ed79c8f05d46372acb5b1f9bfbe861760386abea76d36"}]}