{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.9;\r\n\r\ncontract vnxAuctionSC {\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Admin security: caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------\r\n    // Data Structures\r\n    //-----------------------------------------------------------------------------------\r\n    enum StatusName {NEW, FUNDED, CANCELED}\r\n\r\n    struct AuctionDetails {\r\n        uint bookingId;\r\n        // name and ticker should remain empty until the closure (with close function) of the auction\r\n        string name;\r\n        string ticker;\r\n        bool isClosed;\r\n    }\r\n\r\n    struct BidStatus {\r\n        StatusName status; // 0: New; 1: Paid; 2: Canceled\r\n        address user; // user who initiated a bid\r\n        address userStatusUpdate; // user who updated the status to present state (can be either user or admin)\r\n        uint timeUpdate;\r\n    }\r\n\r\n    struct BidList {\r\n        uint[] bids;  // Bid hashes, the key to bidStatuses mapping\r\n        uint timeInit;\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------\r\n    // Variables, Instances, Mappings\r\n    //-----------------------------------------------------------------------------------\r\n    uint constant BULK_LENGTH = 50;\r\n    address private admin;\r\n    address[] private users;\r\n\r\n    AuctionDetails private auctionDetails;\r\n\r\n    /* Bid's uint(Hash) is a param to this mapping */\r\n    mapping(uint => BidStatus) private bidStatuses;\r\n    \r\n    /* User who initiated the bids is a param to this mapping */\r\n    mapping(address => BidList) private userBids;\r\n\r\n    //-----------------------------------------------------------------------------------\r\n    // Smart contract Constructor\r\n    //-----------------------------------------------------------------------------------\r\n    // name and ticker should remain empty until the closure (with close function) of the auction\r\n    constructor(uint _bookingId) public {\r\n        require(_bookingId != 0, \"Booking ID should not be zero\");\r\n\r\n        admin = msg.sender;\r\n        auctionDetails.bookingId = _bookingId;\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------\r\n    // View Functions\r\n    //-----------------------------------------------------------------------------------\r\n    function getAuctionDetails() public view returns (uint bookingId, string memory name, string memory ticker, bool isClosed){\r\n        return (auctionDetails.bookingId, auctionDetails.name, auctionDetails.ticker, auctionDetails.isClosed);\r\n    }\r\n\r\n    function getUsersLen() public view returns(uint) {\r\n        return users.length;\r\n    }\r\n\r\n    function getUsersItem(uint _ind) public view returns(address) {\r\n        if( _ind >= users.length ) {\r\n            return address(0);\r\n        }\r\n        return users[_ind];\r\n    }\r\n\r\n    function getBidListLen(address _user) public view returns(uint) {\r\n        if (userBids[_user].timeInit==0) {\r\n\t\treturn 0;\r\n        }\r\n\r\n        return userBids[_user].bids.length;\r\n    }\r\n\r\n    function getBidListHash(address _user, uint _ind) public view returns(uint) {\r\n        if (userBids[_user].timeInit==0 || _ind >= userBids[_user].bids.length) {\r\n\t\treturn 0;\r\n        }\r\n\r\n        return userBids[_user].bids[_ind];\r\n    }\r\n\r\n    function getBidListItem(address _user, uint _ind) public view returns(uint status, uint timeUpdate) {\r\n        if (userBids[_user].timeInit==0 || _ind >= userBids[_user].bids.length) {\r\n          return (0,0);\r\n        }\r\n\r\n        return (uint(bidStatuses[userBids[_user].bids[_ind]].status), bidStatuses[userBids[_user].bids[_ind]].timeUpdate);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------\r\n    // Transact Functions\r\n    //-----------------------------------------------------------------------------------\r\n    event BidUpdated(uint indexed _hashBid, uint8 _newStatus);\r\n\r\n    /**\r\n    * IMPORTANT -- In case of value overflow no event is sent due to THROW (revert) -- this is rollback\r\n    * @dev writes a bid to the blockchain\r\n    * @param _user      The address of a user which has the corrersponding hashBid.\r\n    * @param _hashBid   The hash of bid for the user to see/confirm his/her bid.\r\n    * @param _newStatus The status of the bid.\r\n    */\r\n    function writeBid(address _user, uint _hashBid, StatusName _newStatus) public returns (bool) {\r\n        require(auctionDetails.isClosed == false, \"Auction is already closed\");\r\n        require(msg.sender == admin || msg.sender == _user, \"Only admin or bid owner can write bids\");\r\n        require(_newStatus == StatusName.NEW || _newStatus == StatusName.FUNDED || _newStatus == StatusName.CANCELED, \"Wrong status id passed\");\r\n        require(_hashBid != 0, \"Bid hash cannot be zero\");\r\n\r\n        return _writeBid(_user, _hashBid, _newStatus);\r\n    }\r\n\r\n    function _writeBid(address _user, uint _hashBid, StatusName _newStatus) internal returns (bool) {\r\n        if (bidStatuses[_hashBid].timeUpdate != 0) { // bid already exists, simply update\r\n            return _setBidState(_hashBid, _newStatus);\r\n        }\r\n\r\n        // Bid not exist yet\r\n        if (userBids[_user].timeInit == 0) { // no such user registered yet\r\n            users.push(_user);\r\n            userBids[_user].timeInit = now;\r\n        }\r\n\r\n        userBids[_user].bids.push(_hashBid);\r\n        BidStatus memory bidStatus;\r\n        bidStatus.status = _newStatus;\r\n        bidStatus.user = _user;\r\n        bidStatus.userStatusUpdate = msg.sender;\r\n        bidStatus.timeUpdate = now;\r\n        bidStatuses[_hashBid] = bidStatus;\r\n        emit BidUpdated(_hashBid, uint8(_newStatus));\r\n        return true;\r\n    }\r\n\r\n    event BatchBidsUpdated(uint indexed bulkId, uint processedCount);\r\n\r\n    /**\r\n    *    IMPORTANT -- In case of value overflow no event is sent due to THROW (revert) -- this is rollback\r\n    * @dev writes bids in a bulk to the blockchain\r\n\t* Bids state changes in the batch must be sorted by the time of their occurence in the system\r\n\t*\r\n    * @param _bulkId The unique ID of the bulk which is calculated on the client side (by the admin) as a hash of some bulk bids' data\r\n    * @param _bidUsers The array of addresses of users which have the corrersponding hashBid.\r\n    * @param _hashBids The array of hashes of bids for users to see/confirm their bids.\r\n    * @param _newStatuses The array of statuses of the bids.\r\n    * IMPORTANT -- in evNewBulkBid( _bulkId, _processedNum, _err, _errMsg ) check __processedNum !!\r\n    *    Not all records in the Bulk can be loaded. Check the messing records with evNewBid events\r\n    */\r\n    function writeBidsBatch(uint _bulkId, address[] memory _bidUsers, uint[] memory _hashBids,\r\n                 StatusName[] memory _newStatuses) public onlyAdmin returns (bool)\r\n    {\r\n        require(_bidUsers.length == _hashBids.length, \"Input arrays should be of the same size\");\r\n        require(_bidUsers.length == _newStatuses.length, \"Input arrays should be of the same size\");\r\n        require(auctionDetails.isClosed == false, \"Auction is already closed\");\r\n        require(_bidUsers.length <= BULK_LENGTH, \"Array length can not be larger than BULK_LENGTH\");\r\n\r\n        uint _procCount = 0;\r\n\r\n        uint[BULK_LENGTH] memory _itemsToSave;\r\n        uint _itemsLength = 0;\r\n\r\n\t\t/**\r\n\t\t*  _writeBid behaviour (write new bid or update bid status) depends on all bid write transactions being committed to the blockchain before _writeBid is called \r\n\t\t*  so it will not work correctly when the batch contains new bid and subsequent status changes of this bid in the same batch\r\n\t\t*  in which case _writeBid will erroneously consider state changes as new bids with the same hashes from the same user\r\n\t\t*\r\n\t\t*  The following loop makes sure that only one (the latest) transaction for each unique bid in the batch will pass through to _writeBid call\r\n\t\t*/\r\n        for (uint j = 0; j<_bidUsers.length; j++) { // run through all input entries\r\n            if (_bidUsers[j] == address(0) || _hashBids[j] == 0 ) {\r\n                revert('Wrong input parameters');\r\n            }\r\n\r\n            for (uint k = 0; k < _itemsLength; k++) { // check previously saved entries\r\n                if (_bidUsers[_itemsToSave[k]]==_bidUsers[j]) { // got the same user as current item\r\n                    if (_hashBids[_itemsToSave[k]]==_hashBids[j]) { // got the same bid hash, update status\r\n                        _itemsToSave[k] = j;\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n            _itemsToSave[_itemsLength++] = j;\r\n        }\r\n\r\n        for (uint k = 0; k < _itemsLength; k++) { // store filtered entries        \r\n            _procCount = _procCount + 1;\r\n            _writeBid(_bidUsers[_itemsToSave[k]], _hashBids[_itemsToSave[k]], _newStatuses[_itemsToSave[k]]);\r\n        }\r\n\r\n        emit BatchBidsUpdated(_bulkId, _procCount);\r\n        return true;\r\n    }\r\n\r\n    event BidStateChanged(uint indexed _hashBid, StatusName indexed _newStatus);\r\n\r\n    function _setBidState( uint _hashBid, StatusName _newStatus ) internal returns (bool) {\r\n        require(bidStatuses[_hashBid].status != StatusName.CANCELED, \"Bid status is CANCELLED, no more changes allowed\");\r\n\r\n        bidStatuses[_hashBid].status = _newStatus;\r\n        bidStatuses[_hashBid].userStatusUpdate = msg.sender;\r\n        bidStatuses[_hashBid].timeUpdate = now;\r\n        emit BidStateChanged(_hashBid, _newStatus);\r\n        return true;\r\n    }\r\n\r\n    event AuctionClosed();\r\n\r\n    // NOT EMITTED -- _err = 3; _errMsqg = \"Closing status in blockchain does not correspond to action\"\r\n    function closeAuction(string memory _name, string memory _ticker) public onlyAdmin returns (bool) {\r\n        require(auctionDetails.isClosed==false, \"Auction is already closed\");\r\n        auctionDetails.isClosed = true;\r\n        auctionDetails.name = _name;\r\n        auctionDetails.ticker = _ticker;\r\n        emit AuctionClosed();\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBidListLen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsersLen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionDetails\",\"outputs\":[{\"name\":\"bookingId\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"isClosed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bulkId\",\"type\":\"uint256\"},{\"name\":\"_bidUsers\",\"type\":\"address[]\"},{\"name\":\"_hashBids\",\"type\":\"uint256[]\"},{\"name\":\"_newStatuses\",\"type\":\"uint8[]\"}],\"name\":\"writeBidsBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_ticker\",\"type\":\"string\"}],\"name\":\"closeAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"getUsersItem\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"getBidListHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_hashBid\",\"type\":\"uint256\"},{\"name\":\"_newStatus\",\"type\":\"uint8\"}],\"name\":\"writeBid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"getBidListItem\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"timeUpdate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bookingId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_hashBid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newStatus\",\"type\":\"uint8\"}],\"name\":\"BidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bulkId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"processedCount\",\"type\":\"uint256\"}],\"name\":\"BatchBidsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_hashBid\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_newStatus\",\"type\":\"uint8\"}],\"name\":\"BidStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionClosed\",\"type\":\"event\"}]","ContractName":"vnxAuctionSC","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000006","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f6790d29965d2c1eab83db4338457fe337fbf6189f6ff0315b53fe66f7e8570d"}]}