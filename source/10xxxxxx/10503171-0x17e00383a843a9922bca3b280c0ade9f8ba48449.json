{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"pragma solidity 0.6.11;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"POLContract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.6.11;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract POLContract {\\r\\n\\r\\n    event Received(address, uint);\\r\\n    event onDeposit(address, uint256, uint256);\\r\\n    event onWithdraw(address, uint256);\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct VestingPeriod {\\r\\n      uint256 epoch;\\r\\n      uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct UserTokenInfo {\\r\\n      uint256 deposited; // incremented on successful deposit\\r\\n      uint256 withdrawn; // incremented on successful withdrawl\\r\\n      VestingPeriod[] vestingPeriods; // added to on successful deposit\\r\\n    }\\r\\n\\r\\n    // map erc20 token to user address to release schedule\\r\\n    mapping(address =\\u003e mapping(address =\\u003e UserTokenInfo)) tokenUserMap;\\r\\n\\r\\n    struct LiquidityTokenomics {\\r\\n      uint256[] epochs;\\r\\n      mapping (uint256 =\\u003e uint256) releaseMap; // map epoch -\\u003e amount withdrawable\\r\\n    }\\r\\n\\r\\n    // map erc20 token to release schedule\\r\\n    mapping(address =\\u003e LiquidityTokenomics) tokenEpochMap;\\r\\n\\r\\n    \\r\\n    // Fast mapping to prevent array iteration in solidity\\r\\n    mapping(address =\\u003e bool) public lockedTokenLookup;\\r\\n\\r\\n    // A dynamically-sized array of currently locked tokens\\r\\n    address[] public lockedTokens;\\r\\n    \\r\\n    // fee variables\\r\\n    uint256 public feeNumerator;\\r\\n    uint256 public feeDenominator;\\r\\n    \\r\\n    address public feeReserveAddress;\\r\\n    address public owner;\\r\\n    \\r\\n    constructor() public {                  \\r\\n      feeNumerator = 3;\\r\\n      feeDenominator = 1000;\\r\\n      feeReserveAddress = address(0xAA3d85aD9D128DFECb55424085754F6dFa643eb1);\\r\\n      owner = address(0xfCdd591498e86876F086524C0b2E9Af41a0c9FCD);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner {\\r\\n      require(msg.sender == owner, \\\"You are not the owner\\\");\\r\\n      _;\\r\\n    }\\r\\n    \\r\\n    function updateFee(uint256 numerator, uint256 denominator) onlyOwner public {\\r\\n      feeNumerator = numerator;\\r\\n      feeDenominator = denominator;\\r\\n    }\\r\\n    \\r\\n    function calculateFee(uint256 amount) public view returns (uint256){\\r\\n      require(amount \\u003e= feeDenominator, \\u0027Deposit is too small\\u0027);    \\r\\n      uint256 amountInLarge = amount.mul(feeDenominator.sub(feeNumerator));\\r\\n      uint256 amountIn = amountInLarge.div(feeDenominator);\\r\\n      uint256 fee = amount.sub(amountIn);\\r\\n      return (fee);\\r\\n    }\\r\\n    \\r\\n    function depositTokenMultipleEpochs(address token, uint256[] memory amounts, uint256[] memory dates) public payable {\\r\\n      require(amounts.length == dates.length, \\u0027Amount and date arrays have differing lengths\\u0027);\\r\\n      for (uint i=0; i\\u003camounts.length; i++) {\\r\\n        depositToken(token, amounts[i], dates[i]);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function depositToken(address token, uint256 amount, uint256 unlock_date) public payable {\\r\\n      require(unlock_date \\u003c 10000000000, \\u0027Enter an unix timestamp in seconds, not miliseconds\\u0027);\\r\\n      require(amount \\u003e 0, \\u0027Your attempting to trasfer 0 tokens\\u0027);\\r\\n      uint256 allowance = IERC20(token).allowance(msg.sender, address(this));\\r\\n      require(allowance \\u003e= amount, \\u0027You need to set a higher allowance\\u0027);\\r\\n      // charge a fee\\r\\n      uint256 fee = calculateFee(amount);\\r\\n      uint256 amountIn = amount.sub(fee);\\r\\n      require(IERC20(token).transferFrom(msg.sender, address(this), amountIn), \\u0027Transfer failed\\u0027);\\r\\n      require(IERC20(token).transferFrom(msg.sender, address(feeReserveAddress), fee), \\u0027Transfer failed\\u0027);\\r\\n      if (!lockedTokenLookup[token]) {\\r\\n        lockedTokens.push(token);\\r\\n        lockedTokenLookup[token] = true;\\r\\n      }\\r\\n      LiquidityTokenomics storage liquidityTokenomics = tokenEpochMap[token];\\r\\n      // amount is required to be above 0 in the start of this block, therefore this works\\r\\n      if (liquidityTokenomics.releaseMap[unlock_date] \\u003e 0) {\\r\\n        liquidityTokenomics.releaseMap[unlock_date] = liquidityTokenomics.releaseMap[unlock_date].add(amountIn);\\r\\n      } else {\\r\\n        liquidityTokenomics.epochs.push(unlock_date);\\r\\n        liquidityTokenomics.releaseMap[unlock_date] = amountIn;\\r\\n      }\\r\\n      UserTokenInfo storage uto = tokenUserMap[token][msg.sender];\\r\\n      uto.deposited = uto.deposited.add(amountIn);\\r\\n      VestingPeriod[] storage vp = uto.vestingPeriods;\\r\\n      vp.push(VestingPeriod(unlock_date, amountIn));\\r\\n      \\r\\n      emit onDeposit(token, amount, unlock_date);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address token, uint256 amount) public {\\r\\n      require(amount \\u003e 0, \\u0027Your attempting to withdraw 0 tokens\\u0027);\\r\\n      uint256 withdrawable = getWithdrawableBalance(token, msg.sender);\\r\\n      UserTokenInfo storage uto = tokenUserMap[token][msg.sender];\\r\\n      uto.withdrawn = uto.withdrawn.add(amount);\\r\\n      require(amount \\u003c= withdrawable, \\u0027Your attempting to withdraw more than you have available\\u0027);\\r\\n      require(IERC20(token).transfer(msg.sender, amount), \\u0027Transfer failed\\u0027);\\r\\n      emit onWithdraw(token, amount);\\r\\n    }\\r\\n\\r\\n    function getWithdrawableBalance(address token, address user) public view returns (uint256) {\\r\\n      UserTokenInfo storage uto = tokenUserMap[token][address(user)];\\r\\n      uint arrayLength = uto.vestingPeriods.length;\\r\\n      uint256 withdrawable = 0;\\r\\n      for (uint i=0; i\\u003carrayLength; i++) {\\r\\n        VestingPeriod storage vestingPeriod = uto.vestingPeriods[i];\\r\\n        if (vestingPeriod.epoch \\u003c block.timestamp) {\\r\\n          withdrawable = withdrawable.add(vestingPeriod.amount);\\r\\n        }\\r\\n      }\\r\\n      withdrawable = withdrawable.sub(uto.withdrawn);\\r\\n      return withdrawable;\\r\\n    }\\r\\n    \\r\\n    function getUserTokenInfo (address token, address user) public view returns (uint256, uint256, uint256) {\\r\\n      UserTokenInfo storage uto = tokenUserMap[address(token)][address(user)];\\r\\n      uint256 deposited = uto.deposited;\\r\\n      uint256 withdrawn = uto.withdrawn;\\r\\n      uint256 length = uto.vestingPeriods.length;\\r\\n      return (deposited, withdrawn, length);\\r\\n    }\\r\\n\\r\\n    function getUserVestingAtIndex (address token, address user, uint index) public view returns (uint256, uint256) {\\r\\n      UserTokenInfo storage uto = tokenUserMap[address(token)][address(user)];\\r\\n      VestingPeriod storage vp = uto.vestingPeriods[index];\\r\\n      return (vp.epoch, vp.amount);\\r\\n    }\\r\\n\\r\\n    function getTokenReleaseLength (address token) public view returns (uint256) {\\r\\n      LiquidityTokenomics storage liquidityTokenomics = tokenEpochMap[address(token)];\\r\\n      return liquidityTokenomics.epochs.length;\\r\\n    }\\r\\n\\r\\n    function getTokenReleaseAtIndex (address token, uint index) public view returns (uint256, uint256) {\\r\\n      LiquidityTokenomics storage liquidityTokenomics = tokenEpochMap[address(token)];\\r\\n      uint256 epoch = liquidityTokenomics.epochs[index];\\r\\n      uint256 amount = liquidityTokenomics.releaseMap[epoch];\\r\\n      return (epoch, amount);\\r\\n    }\\r\\n    \\r\\n    function lockedTokensLength() external view returns (uint) {\\r\\n        return lockedTokens.length;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.6.11;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlock_date\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dates\",\"type\":\"uint256[]\"}],\"name\":\"depositTokenMultipleEpochs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReserveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenReleaseAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenReleaseLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserVestingAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokenLookup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"POLContract","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f434b118ec385a5249c223d36e955551f0955402f1488ac1aada89cb961f4ffa"}]}