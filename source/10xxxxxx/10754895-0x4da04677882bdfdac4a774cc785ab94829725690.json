{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <=0.7.0;\r\n\r\ncontract election2020 {\r\n  address payable public owner;\r\n  uint256 constant public feePerc = 5;\r\n  mapping (address => uint256) public betsBiden;\r\n  uint256 public betsBidenTotal;\r\n  mapping (address => uint256) public betsTrump;\r\n  uint256 public betsTrumpTotal;\r\n  uint256 public fees;\r\n  uint8 public electionResult; // 0 - election not completed, 1 - Biden won, 2 - Trump won\r\n  string public dappURL;\r\n  uint256 public electionDay = 1604379600; // 11/3/2020 12:00:00 AM EST\r\n\r\n  constructor() {\r\n    owner = tx.origin;\r\n    //electionResult = 0;\r\n    //betsBidenTotal = 0;\r\n    //betsTrumpTotal = 0;\r\n    //fees = 0;\r\n  }\r\n\r\n  /**\r\n   * Make sure cannot receive ETH any other way.\r\n   */\r\n  fallback() external payable {\r\n    revert(\"Not accepting payments any other way.\");\r\n  }\r\n\r\n  /**\r\n   * Change election day, in case it is changed officially.\r\n   */\r\n  function setElectionDay(uint256 _electionDay) external {\r\n    require(tx.origin == owner && 0 == electionResult);\r\n    electionDay = _electionDay;\r\n  }\r\n\r\n  function betOnBiden() external payable {\r\n    require(block.timestamp < electionDay, \"Too late - election has started!\");\r\n    uint256 fee = (msg.value * feePerc) / 100;\r\n    fees += fee;\r\n    betsBidenTotal += msg.value - fee;\r\n    betsBiden[tx.origin] = betsBiden[tx.origin] + msg.value - fee;\r\n  }\r\n\r\n  function betOnTrump() external payable {\r\n    require(block.timestamp < electionDay, \"Too late - election has started!\");\r\n    uint256 fee = (msg.value * feePerc) / 100;\r\n    fees += fee;\r\n    betsTrumpTotal += msg.value - fee;\r\n    betsTrump[tx.origin] = betsTrump[tx.origin] + msg.value - fee;\r\n  }\r\n\r\n  /**\r\n   * Enter results after election completes / oracle function.\r\n   */\r\n  function setElectionResult(uint8 _electionResult) external {\r\n    require(tx.origin == owner && 0 == electionResult);\r\n    electionResult = _electionResult;\r\n  }\r\n\r\n  /**\r\n   * Owner withdrawal of fees.\r\n   */\r\n  function withdrawFees() external {\r\n    require(tx.origin == owner && electionResult != 0, \"Election not complete!\");\r\n    owner.transfer(fees);\r\n    fees = 0;\r\n  }\r\n\r\n  /**\r\n   * Better withdrawal of fees.\r\n   */\r\n  function withdrawWins() public {\r\n    require(electionResult != 0, \"Election not complete!\");\r\n    uint256 win;\r\n    if (1 == electionResult) { // Biden won\r\n      win = ((betsBiden[tx.origin] * (100000 * betsTrumpTotal / betsBidenTotal)) / 100000) + betsBiden[tx.origin];\r\n    } else { // Trump won\r\n      win = ((betsTrump[tx.origin] * (100000 * betsBidenTotal / betsTrumpTotal)) / 100000) + betsTrump[tx.origin];\r\n    }\r\n    betsBiden[tx.origin] = 0;\r\n    betsTrump[tx.origin] = 0;\r\n    tx.origin.transfer(win);\r\n  }\r\n\r\n  /**\r\n   * Receive ETH to withdraw your wins.\r\n   */\r\n  receive() external payable {\r\n    require(msg.value == 0, \"Must send 0 to retrieve your wins.\");\r\n    withdrawWins();\r\n  }\r\n\r\n  function setDAppURL(string memory _dappURL) external {\r\n    require(tx.origin == owner);\r\n    dappURL = _dappURL;\r\n  }\r\n\r\n  function getMyBets() external view returns (uint256 myBetsTrump, uint256 myBetsBiden) {\r\n    myBetsTrump = betsTrump[tx.origin];\r\n    myBetsBiden = betsBiden[tx.origin];\r\n  }\r\n\r\n  // ERC-20 Methods\r\n  function name() public pure returns (string memory) { return \"EL20 - Bet on US Presidential Election 2020\"; }\r\n  function symbol() public pure returns (string memory) { return \"EL20\"; }\r\n  function decimals() public pure returns (uint8) { return 18; }\r\n  function totalSupply() public pure returns (uint256) { return 0; }\r\n  function transfer(address, uint256) public pure returns (bool success) { return false; }\r\n  function transferFrom(address, address, uint256) public pure returns (bool success) { return false; }\r\n  function approve(address, uint256) public pure returns (bool success) { return false; }\r\n  function allowance(address, address) public pure returns (uint256 remaining) { return 0; }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return betsTrump[_owner] + betsBiden[_owner];\r\n  }\r\n}\r\n\r\ncontract betOnBiden {\r\n    election2020 theE2020;\r\n\r\n    constructor(address payable _electionContract) {\r\n        theE2020 = election2020(_electionContract);\r\n    }\r\n\r\n    /**\r\n    * Make sure cannot receive ETH any other way.\r\n    */\r\n    fallback() external payable {\r\n        revert(\"Not accepting payments any other way.\");\r\n    }\r\n\r\n    /**\r\n    * Receive ETH to bet on Biden.\r\n    */\r\n    receive() external payable {\r\n        theE2020.betOnBiden{value: msg.value}();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_electionContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"betOnBiden","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007f222f42d2d8d21bb289fdf6f47a91c9b507ec58","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://314072cf5866b3ca2bfe09c88d043b64a24f2bc2a6cc4c7d9a12f47672b2d340"}]}