{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IAccessModule {\r\n    enum Operation {\r\n        // LiquidityModule\r\n        Deposit,\r\n        Withdraw,\r\n        // LoanModule\r\n        CreateDebtProposal,\r\n        AddPledge,\r\n        WithdrawPledge,\r\n        CancelDebtProposal,\r\n        ExecuteDebtProposal,\r\n        Repay,\r\n        ExecuteDebtDefault,\r\n        WithdrawUnlockedPledge\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if operation is allowed\r\n     * @param operation Requested operation\r\n     * @param sender Sender of transaction\r\n     */\r\n    function isOperationAllowed(Operation operation, address sender) external view returns(bool);\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for token transfers, provides info about current liquidity/debts and pool token price.\r\n */\r\ninterface IFundsModule {\r\n    event Status(uint256 lBalance, uint256 lDebts, uint256 lProposals, uint256 pEnterPrice, uint256 pExitPrice);\r\n\r\n    /**\r\n     * @notice Deposit liquid tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositLTokens(address from, uint256 amount) external;\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw liquid tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     * @param poolFee Pool fee will be sent to pool owner\r\n     */\r\n    function withdrawLTokens(address to, uint256 amount, uint256 poolFee) external;\r\n\r\n    /**\r\n     * @notice Deposit pool tokens to the pool\r\n     * @param from Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function depositPTokens(address from, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Withdraw pool tokens from the pool\r\n     * @param to Address of the user, who sends tokens. Should have enough allowance.\r\n     * @param amount Amount of tokens to deposit\r\n     */\r\n    function withdrawPTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mint new PTokens\r\n     * @param to Address of the user, who sends tokens.\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function mintPTokens(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Mint new PTokens and distribute the to other PToken holders\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function distributePTokens(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Burn pool tokens\r\n     * @param from Address of the user, whos tokens we burning. Should have enough allowance.\r\n     * @param amount Amount of tokens to burn\r\n     */\r\n    function burnPTokens(address from, uint256 amount) external;\r\n\r\n    function lockPTokens(address[] calldata from, uint256[] calldata amount) external;\r\n\r\n    function mintAndLockPTokens(uint256 amount) external;\r\n\r\n    function unlockAndWithdrawPTokens(address to, uint256 amount) external;\r\n\r\n    function burnLockedPTokens(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be given to user for increasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be put into the pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pToken which should be sent to sender\r\n     */\r\n    function calculatePoolEnter(uint256 lAmount, uint256 liquidityCorrection) external view returns(uint256);\r\n    \r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExit(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many liquid tokens should be removed from pool when decreasing liquidity\r\n     * @param pAmount Amount of pToken which should be taken from sender\r\n     * @return Amount of liquid tokens which will be removed from the pool: total, part for sender, part for pool\r\n     */\r\n    function calculatePoolExitInverse(uint256 pAmount) external view returns(uint256, uint256, uint256);\r\n\r\n    /**\r\n     * @notice Calculates how many pTokens should be taken from user for decreasing liquidity\r\n     * @param lAmount Amount of liquid tokens which will be removed from the pool\r\n     * @return Amount of pToken which should be taken from sender\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Calculates amount of pTokens which should be burned/locked when liquidity removed from pool\r\n     * @param lAmount Amount of liquid tokens beeing withdrawn. Does NOT include part for pool\r\n     * @param liquidityCorrection Amount of liquid tokens to remove from liquidity because it was \"virtually\" withdrawn\r\n     * @return Amount of pTokens to burn/lock\r\n     */\r\n    function calculatePoolExitWithFee(uint256 lAmount, uint256 liquidityCorrection) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Current pool liquidity\r\n     * @return available liquidity\r\n     */\r\n    function lBalance() external view returns(uint256);\r\n\r\n    /**\r\n     * @return Amount of pTokens locked in FundsModule by account\r\n     */\r\n    function pBalanceOf(address account) external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Funds Module Interface\r\n * @dev Funds module is responsible for deposits, withdrawals, debt proposals, debts and repay.\r\n */\r\ninterface ILoanModule {\r\n    event Repay(address indexed sender, uint256 debt, uint256 lDebtLeft, uint256 lFullPaymentAmount, uint256 lInterestPaid, uint256 pInterestPaid, uint256 newlastPayment);\r\n    event UnlockedPledgeWithdraw(address indexed sender, address indexed borrower, uint256 proposal, uint256 debt, uint256 pAmount);\r\n    event DebtDefaultExecuted(address indexed borrower, uint256 debt, uint256 pBurned);\r\n\r\n    /**\r\n     * @notice Creates Debt from proposal\r\n     * @dev Used by LoanProposalModule to create debt\r\n     * @param borrower Address of borrower\r\n     * @param proposal Index of DebtProposal\r\n     * @param lAmount Amount of the loan\r\n     * @return Index of created Debt\r\n     */\r\n    function createDebt(address borrower, uint256 proposal, uint256 lAmount) external returns(uint256);\r\n\r\n    /**\r\n     * @notice Repay amount of liquidToken and unlock pTokens\r\n     * @param debt Index of Debt\r\n     * @param lAmount Amount of liquid tokens to repay\r\n     */\r\n    function repay(uint256 debt, uint256 lAmount) external;\r\n\r\n    function repayPTK(uint256 debt, uint256 pAmount, uint256 lAmountMin) external;\r\n\r\n    function repayAllInterest(address borrower) external;\r\n\r\n    /**\r\n     * @notice Allows anyone to default a debt which is behind it's repay deadline\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     */\r\n    function executeDebtDefault(address borrower, uint256 debt) external;\r\n\r\n    /**\r\n     * @notice Withdraw part of the pledge which is already unlocked (borrower repaid part of the debt) + interest\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     */\r\n    function withdrawUnlockedPledge(address borrower, uint256 debt) external;\r\n\r\n    /**\r\n     * @notice Calculates if default time for the debt is reached\r\n     * @param borrower Address of borrower\r\n     * @param debt Index of borrowers's debt\r\n     * @return true if debt is defaulted\r\n     */\r\n    function isDebtDefaultTimeReached(address borrower, uint256 debt) external view returns(bool);\r\n\r\n    /**\r\n     * @notice Check if user has active debts\r\n     * @param borrower Address to check\r\n     * @return True if borrower has unpaid debts\r\n     */\r\n    function hasActiveDebts(address borrower) external view returns(bool);\r\n\r\n    /**\r\n     * @notice Total amount of debts\r\n     * @return Summ of all liquid token in debts\r\n     */\r\n    function totalLDebts() external view returns(uint256);\r\n\r\n}\r\n\r\n/**\r\n * @title Liquidity Module Interface\r\n * @dev Liquidity module is responsible for deposits, withdrawals and works with Funds module.\r\n */\r\ninterface ILiquidityModule {\r\n\r\n    event Deposit(address indexed sender, uint256 lAmount, uint256 pAmount);\r\n    event Withdraw(address indexed sender, uint256 lAmountTotal, uint256 lAmountUser, uint256 pAmount);\r\n\r\n    /*\r\n     * @notice Deposit amount of lToken and mint pTokens\r\n     * @param lAmount Amount of liquid tokens to invest\r\n     * @param pAmountMin Minimal amout of pTokens suitable for sender\r\n     */ \r\n    function deposit(uint256 lAmount, uint256 pAmountMin) external;\r\n\r\n    /**\r\n     * @notice Withdraw amount of lToken and burn pTokens\r\n     * @param pAmount Amount of pTokens to send\r\n     * @param lAmountMin Minimal amount of liquid tokens to withdraw\r\n     */\r\n    function withdraw(uint256 pAmount, uint256 lAmountMin) external;\r\n\r\n    /**\r\n     * @notice Simulate withdrawal for loan repay with PTK\r\n     * @param pAmount Amount of pTokens to use\r\n     */\r\n    function withdrawForRepay(address borrower, uint256 pAmount) external;\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string public constant MODULE_ACCESS            = \"access\";\r\n    string public constant MODULE_PTOKEN            = \"ptoken\";\r\n    string public constant MODULE_CURVE             = \"curve\";\r\n    string public constant MODULE_FUNDS             = \"funds\";\r\n    string public constant MODULE_LIQUIDITY         = \"liquidity\";\r\n    string public constant MODULE_LOAN              = \"loan\";\r\n    string public constant MODULE_LOAN_LIMTS        = \"loan_limits\";\r\n    string public constant MODULE_LOAN_PROPOSALS    = \"loan_proposals\";\r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string public constant MODULE_LTOKEN            = \"ltoken\";\r\n}\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        require(moduleAddress != ZERO_ADDRESS, \"Module: requested module not found\");\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\ncontract LiquidityModule is Module, ILiquidityModule {\r\n    struct LiquidityLimits {\r\n        uint256 lDepositMin;     // Minimal amount of liquid tokens for deposit\r\n        uint256 pWithdrawMin;    // Minimal amount of pTokens for withdraw\r\n    }\r\n\r\n    LiquidityLimits public limits;\r\n\r\n    modifier operationAllowed(IAccessModule.Operation operation) {\r\n        IAccessModule am = IAccessModule(getModuleAddress(MODULE_ACCESS));\r\n        require(am.isOperationAllowed(operation, _msgSender()), \"LiquidityModule: operation not allowed\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Module.initialize(_pool);\r\n        setLimits(10*10**18, 0);    //10 DAI minimal enter\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit amount of lToken and mint pTokens\r\n     * @param lAmount Amount of liquid tokens to invest\r\n     * @param pAmountMin Minimal amout of pTokens suitable for sender\r\n     */ \r\n    function deposit(uint256 lAmount, uint256 pAmountMin) public operationAllowed(IAccessModule.Operation.Deposit) {\r\n        require(lAmount > 0, \"LiquidityModule: lAmount should not be 0\");\r\n        require(lAmount >= limits.lDepositMin, \"LiquidityModule: amount should be >= lDepositMin\");\r\n        uint pAmount = fundsModule().calculatePoolEnter(lAmount);\r\n        require(pAmount >= pAmountMin, \"LiquidityModule: Minimal amount is too high\");\r\n        fundsModule().depositLTokens(_msgSender(), lAmount);\r\n        fundsModule().mintPTokens(_msgSender(), pAmount);\r\n        emit Deposit(_msgSender(), lAmount, pAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw amount of lToken and burn pTokens\r\n     * @dev This operation also repays all interest on all debts\r\n     * @param pAmount Amount of pTokens to send (this amount does not include pTokens used to pay interest)\r\n     * @param lAmountMin Minimal amount of liquid tokens to withdraw\r\n     */\r\n    function withdraw(uint256 pAmount, uint256 lAmountMin) public operationAllowed(IAccessModule.Operation.Withdraw) {\r\n        require(pAmount > 0, \"LiquidityModule: pAmount should not be 0\");\r\n        require(pAmount >= limits.pWithdrawMin, \"LiquidityModule: amount should be >= pWithdrawMin\");\r\n        loanModule().repayAllInterest(_msgSender());\r\n        (uint256 lAmountT, uint256 lAmountU, uint256 lAmountP) = fundsModule().calculatePoolExitInverse(pAmount);\r\n        require(lAmountU >= lAmountMin, \"LiquidityModule: Minimal amount is too high\");\r\n        uint256 availableLiquidity = fundsModule().lBalance();\r\n        require(lAmountT <= availableLiquidity, \"LiquidityModule: not enough liquidity\");\r\n        fundsModule().burnPTokens(_msgSender(), pAmount);\r\n        fundsModule().withdrawLTokens(_msgSender(), lAmountU, lAmountP);\r\n        emit Withdraw(_msgSender(), lAmountT, lAmountU, pAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw amount of lToken and burn pTokens\r\n     * @param borrower Address of the borrower\r\n     * @param pAmount Amount of pTokens to send\r\n     */\r\n    function withdrawForRepay(address borrower, uint256 pAmount) public {\r\n        require(_msgSender() == getModuleAddress(MODULE_LOAN), \"LiquidityModule: call only allowed from LoanModule\");\r\n        require(pAmount > 0, \"LiquidityModule: pAmount should not be 0\");\r\n        //require(pAmount >= limits.pWithdrawMin, \"LiquidityModule: amount should be >= pWithdrawMin\"); //Limit disabled, because this is actually repay\r\n        (uint256 lAmountT, uint256 lAmountU, uint256 lAmountP) = fundsModule().calculatePoolExitInverse(pAmount);\r\n        uint256 availableLiquidity = fundsModule().lBalance();\r\n        require(lAmountP <= availableLiquidity, \"LiquidityModule: not enough liquidity\");\r\n        fundsModule().burnPTokens(borrower, pAmount);           //We just burn pTokens, withous sending lTokens to _msgSender()\r\n        fundsModule().withdrawLTokens(borrower, 0, lAmountP);   //This call is required to send pool fee\r\n        emit Withdraw(borrower, lAmountT, lAmountU, pAmount);\r\n    }\r\n\r\n    function setLimits(uint256 lDepositMin, uint256 pWithdrawMin) public onlyOwner {\r\n        limits.lDepositMin = lDepositMin;\r\n        limits.pWithdrawMin = pWithdrawMin;\r\n    }\r\n\r\n    function fundsModule() internal view returns(IFundsModule) {\r\n        return IFundsModule(getModuleAddress(MODULE_FUNDS));\r\n    }\r\n\r\n    function loanModule() internal view returns(ILoanModule) {\r\n        return ILoanModule(getModuleAddress(MODULE_LOAN));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmountTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmountUser\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_ACCESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_CURVE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_FUNDS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LIQUIDITY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN_LIMTS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LOAN_PROPOSALS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_LTOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MODULE_PTOKEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pAmountMin\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lDepositMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pWithdrawMin\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lDepositMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pWithdrawMin\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lAmountMin\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawForRepay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquidityModule","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://86568af7e81478683b6a81500107c203c8ea5ca4109a2ecce21745b4d439b172"}]}