{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/game_coinflip/node_modules/openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: localhost/game_coinflip/node_modules/openzeppelin-solidity/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File: localhost/game_coinflip/node_modules/openzeppelin-solidity/contracts/utils/Pausable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: localhost/game_coinflip/contracts/GameRaffle.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\nabstract contract GameRaffle is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  struct RaffleResult {\r\n    address winner;\r\n    uint256 prize;\r\n    uint256 time;\r\n  }\r\n  \r\n  mapping(address => uint256) public rafflePrizePendingForAddress;\r\n  uint256 public ongoinRafflePrize;\r\n  uint256 public rafflePrizesWonTotal;\r\n\r\n  uint256 public raffleActivationParticipantsAmount = 200;  //  1 game has 2 participants\r\n  address[] public raffleParticipants;  //  the more you play, the more times added\r\n  RaffleResult[] public raffleResults;\r\n\r\n\r\n  event CF_RafflePlayed(address indexed winner, uint256 indexed prize);\r\n  event CF_RafflePrizeWithdrawn(address indexed winner, uint256 indexed prize);\r\n\r\n\r\n  /**\r\n   * @dev Gets raffle participants.\r\n   * @return Participants count.\r\n   * TESTED\r\n   */\r\n  function getRaffleParticipants() public view returns (address[] memory) {\r\n    return raffleParticipants;\r\n  }\r\n  \r\n  /**\r\n   * @dev Updates raffle minimum participants count to activate.\r\n   * @param _amount Amount to be set.\r\n   * TESTED\r\n   */\r\n  function updateRaffleActivationParticipantsCount(uint256 _amount) external onlyOwner {\r\n    require(_amount > 0, \"Should be > 0\");\r\n    raffleActivationParticipantsAmount = _amount;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets past raffle results count.\r\n   * @return Results count.\r\n   * TESTED\r\n   */\r\n  function getRaffleResultCount() external view returns (uint256) {\r\n    return raffleResults.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if raffle is activated.\r\n   * @return Wether raffle is activated.\r\n   * TESTED\r\n   */\r\n  function raffleActivated() public view returns(bool) {\r\n    return (raffleParticipants.length >= raffleActivationParticipantsAmount && ongoinRafflePrize > 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Runs the raffle.\r\n   * TESTED\r\n   */\r\n  function runRaffle() external {\r\n    require(raffleActivated(), \"Raffle != activated\");\r\n\r\n    uint256 winnerIdx = rand();\r\n    rafflePrizePendingForAddress[raffleParticipants[winnerIdx]] = rafflePrizePendingForAddress[raffleParticipants[winnerIdx]].add(ongoinRafflePrize);\r\n    rafflePrizesWonTotal = rafflePrizesWonTotal.add(ongoinRafflePrize);\r\n    raffleResults.push(RaffleResult(raffleParticipants[winnerIdx], ongoinRafflePrize, now));\r\n\r\n    emit CF_RafflePlayed(raffleParticipants[winnerIdx], ongoinRafflePrize);\r\n\r\n    delete ongoinRafflePrize;\r\n    delete raffleParticipants;\r\n  }\r\n\r\n  /**\r\n   * @dev Generates random number\r\n   * TESTED\r\n   */\r\n  function rand() public view returns(uint256) {\r\n    require(raffleParticipants.length > 0, \"No participants\");\r\n    return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, ongoinRafflePrize, raffleParticipants.length))) % raffleParticipants.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw prizes for all won raffles.\r\n   */\r\n  function withdrawRafflePrizes() external virtual;\r\n}\r\n\r\n// File: localhost/game_coinflip/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: localhost/game_coinflip/contracts/Partnership.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic fu=nctionality for donates to partner address.\r\n */\r\ncontract Partnership is Ownable {\r\n  using SafeMath for uint256;\r\n  \r\n  address payable public partner;\r\n  \r\n  uint256 public partnerFeeTransferThreshold;\r\n  uint256 public partnerFeePending;\r\n  uint256 public partnerFeeTotalUsed;\r\n\r\n  event CF_PartnerFeeTransferred(address from, address indexed to, uint256 indexed amount);\r\n\r\n  /**\r\n   * @dev Initializes the contract.\r\n   * @param _partnerAddress Partner address.\r\n   * @param _transferThreshold Fee amount, that should trigger transfer.\r\n   * TESTED\r\n   */\r\n  constructor(address payable _partnerAddress, uint256 _transferThreshold) public {\r\n    updatePartner(_partnerAddress);\r\n    updatePartnerTransferThreshold(_transferThreshold);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates partner address.\r\n   * @param _partnerAddress Address for partner.\r\n   * TESTED\r\n   */\r\n  function updatePartner(address payable _partnerAddress) public onlyOwner {\r\n    require(_partnerAddress != address(0), \"Cannt be 0x0\");\r\n    partner = _partnerAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Updates partner fee transfer threshold limit, when fee should be transferred to address.\r\n   * @notice In wei.\r\n   * @param _transferThreshold Fee amount, that should trigger transfer.\r\n   * TESTED\r\n   */\r\n  function updatePartnerTransferThreshold(uint256 _transferThreshold) public onlyOwner {\r\n    require(_transferThreshold > 0, \"threshold must be > 0\");\r\n    partnerFeeTransferThreshold = _transferThreshold;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers partner fee to partner address if threshold was reached.\r\n   * TESTED\r\n   */\r\n  function transferPartnerFee() internal {\r\n    if (partnerFeePending >= partnerFeeTransferThreshold) {\r\n      uint256 partnerFeePendingTmp = partnerFeePending;\r\n      delete partnerFeePending;\r\n\r\n      partnerFeeTotalUsed = partnerFeeTotalUsed.add(partnerFeePendingTmp);\r\n      partner.transfer(partnerFeePendingTmp);\r\n      emit CF_PartnerFeeTransferred(address(this), partner, partnerFeePendingTmp);\r\n    }\r\n  }\r\n}\r\n\r\n// File: localhost/game_coinflip/contracts/CoinFlipGame.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n  * @notice IMPORTANT: owner should create first game.\r\n  * @notice CoinFlipGame can be created by creator and run by joined playr. Creator is not required to be online or perform any actions for game to be played.\r\n  */\r\n\r\n/**\r\n  * Testing:\r\n  *    update suspendedTimeDuration to 1 minute\r\n  */\r\n\r\ncontract CoinFlipGame is Pausable, Partnership, GameRaffle {\r\n  struct Game {\r\n    uint8 creatorGuessCoinSide;\r\n    uint256 id;\r\n    uint256 bet;\r\n    address payable creator;\r\n    address payable opponent;\r\n    address payable winner;\r\n    address creatorReferral;\r\n    address opponentReferral;\r\n  }\r\n\r\n  uint256 private constant FEE_PERCENT = 1;\r\n\r\n  uint256 public minBet = 10 finney;\r\n  uint256 public suspendedTimeDuration = 1 hours;\r\n\r\n  uint256[5] public topGames;\r\n\r\n  uint256 public gamesCreatedAmount;\r\n  uint256 public gamesCompletedAmount; //  played, quitted, move expired\r\n\r\n  mapping(uint256 => Game) public games;\r\n  mapping(address => uint256) public ongoingGameIdxForCreator;\r\n  mapping(address => uint256[]) private participatedGameIdxsForPlayer;\r\n  mapping(address => uint256[]) public gamesWithPendingPrizeWithdrawalForAddress; //  for both won & draw\r\n\r\n  mapping(address => uint256) public addressBetTotal;\r\n  mapping(address => uint256) public addressPrizeTotal;\r\n\r\n  mapping(address => uint256) public referralFeesPending;\r\n  mapping(address => uint256) public referralFeesWithdrawn;\r\n\r\n  mapping(address => uint256) public lastPlayTimestamp;\r\n\r\n  uint256 public devFeePending;\r\n\r\n  uint256 public totalUsedReferralFees;\r\n  uint256 public totalUsedInGame;\r\n\r\n  event CF_GameCreated(uint256 indexed id, address indexed creator, uint256 indexed bet);\r\n  event CF_GamePlayed(uint256 indexed id, address indexed creator, address indexed opponent, address winner, uint256 bet);\r\n  event CF_GamePrizesWithdrawn(address indexed player);\r\n  event CF_GameAddedToTop(uint256 indexed id, address indexed creator);\r\n  event CF_GameReferralWithdrawn(address indexed referral);\r\n  event CF_GameUpdated(uint256 indexed id, address indexed creator);\r\n \r\n\r\n  modifier onlyCorrectBet() {\r\n    require(msg.value >= minBet, \"Wrong bet\");\r\n    _;\r\n  }\r\n\r\n  modifier onlySingleGameCreated() {\r\n    require(ongoingGameIdxForCreator[msg.sender] == 0, \"No more creating\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyAllowedToPlay() {\r\n    require(allowedToPlay(), \"Suspended to play\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyCreator(uint256 _id) {\r\n    require(games[_id].creator == msg.sender, \"Not creator\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyNotCreator(uint256 _id) {\r\n    require(games[_id].creator != msg.sender, \"Is creator\");\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n    * @dev Contract constructor.\r\n    * @param _partner Address for partner.\r\n    * TESTED\r\n    */\r\n  constructor(address payable _partner) Partnership (_partner, 1 ether) public {\r\n    updatePartner(_partner);\r\n  }\r\n\r\n  /**\r\n    * @dev Destroyes the contract.\r\n    * TESTED\r\n    */\r\n  function kill() external onlyOwner {\r\n    address payable addr = msg.sender;\r\n    selfdestruct(addr);\r\n  }\r\n  \r\n  /**\r\n   * Pausable.sol\r\n   * TESTED\r\n   */\r\n  /**\r\n   * @dev Triggers stopped state.\r\n   * TESTED\r\n   */\r\n  function pause() external onlyOwner {\r\n    Pausable._pause();\r\n  }\r\n\r\n  /**\r\n    * GAMEPLAY\r\n    */\r\n\r\n  /**\r\n    * @dev Creates new game.\r\n    * @param _guessCoinSide Сoin side (0 or 1).\r\n    * @param _referral Address for referral.\r\n    * TESTED\r\n    */\r\n  function createGame(uint8 _guessCoinSide, address _referral) external payable whenNotPaused onlySingleGameCreated onlyCorrectBet {\r\n    require(_guessCoinSide < 2, \"Wrong guess coin side\");\r\n    require(_referral != msg.sender, \"Wrong referral\");\r\n\r\n    addressBetTotal[msg.sender] = addressBetTotal[msg.sender].add(msg.value);\r\n\r\n    games[gamesCreatedAmount].id = gamesCreatedAmount;\r\n    games[gamesCreatedAmount].creator = msg.sender;\r\n    games[gamesCreatedAmount].bet = msg.value;\r\n    games[gamesCreatedAmount].creatorGuessCoinSide = _guessCoinSide;\r\n    if (_referral != address(0)) {\r\n      games[gamesCreatedAmount].creatorReferral = _referral;\r\n    }\r\n\r\n    ongoingGameIdxForCreator[msg.sender] = gamesCreatedAmount;\r\n    participatedGameIdxsForPlayer[msg.sender].push(gamesCreatedAmount);\r\n\r\n    totalUsedInGame = totalUsedInGame.add(msg.value);\r\n\r\n    emit CF_GameCreated(gamesCreatedAmount, msg.sender, msg.value);\r\n\r\n    gamesCreatedAmount = gamesCreatedAmount.add(1);\r\n  }\r\n\r\n  /**\r\n    * @dev Joins and plays game.\r\n    * @param _id Game id to join.\r\n    * @param _referral Address for referral.\r\n    * TESTED\r\n    */\r\n  function joinAndPlayGame(uint256 _id, address _referral) external payable onlyNotCreator(_id) onlyAllowedToPlay {\r\n    Game storage game = games[_id];\r\n    require(game.creator != address(0), \"No game with such id\");\r\n    require(game.winner == address(0), \"Game has winner\");\r\n    require(game.bet == msg.value, \"Wrong bet\");\r\n    require(_referral != msg.sender, \"Wrong referral\");\r\n\r\n    addressBetTotal[msg.sender] = addressBetTotal[msg.sender].add(msg.value);\r\n\r\n    game.opponent = msg.sender;\r\n    if (_referral != address(0)) {\r\n      game.opponentReferral = _referral;\r\n    }\r\n\r\n    //  play\r\n    uint8 coinSide = uint8(uint256(keccak256(abi.encodePacked(now, msg.sender, gamesCreatedAmount, totalUsedInGame,devFeePending))) %2);\r\n    game.winner = (coinSide == game.creatorGuessCoinSide) ? game.creator : game.opponent;\r\n\r\n    gamesWithPendingPrizeWithdrawalForAddress[game.winner].push(_id);\r\n\r\n    raffleParticipants.push(game.creator);\r\n    raffleParticipants.push(game.opponent);\r\n    lastPlayTimestamp[msg.sender] = now;\r\n    gamesCompletedAmount = gamesCompletedAmount.add(1);\r\n    totalUsedInGame = totalUsedInGame.add(msg.value);\r\n    participatedGameIdxsForPlayer[msg.sender].push(_id);\r\n    delete ongoingGameIdxForCreator[game.creator];\r\n\r\n    if (isTopGame(_id)) {\r\n      removeTopGame(game.id);\r\n    }\r\n\r\n    emit CF_GamePlayed(_id, game.creator, game.opponent, game.winner, game.bet);\r\n  }\r\n\r\n  /**\r\n    * WITHDRAW\r\n    */\r\n\r\n  /**\r\n    * @dev Withdraws prize for won game.\r\n    * @param _maxLoop max loop.\r\n    * TESTED\r\n    */\r\n  function withdrawGamePrizes(uint256 _maxLoop) external {\r\n    require(_maxLoop > 0, \"_maxLoop == 0\");\r\n    \r\n    uint256[] storage pendingGames = gamesWithPendingPrizeWithdrawalForAddress[msg.sender];\r\n    require(pendingGames.length > 0, \"no pending\");\r\n    require(_maxLoop <= pendingGames.length, \"wrong _maxLoop\");\r\n    \r\n    uint256 prizeTotal;\r\n    for (uint256 i = 0; i < _maxLoop; i ++) {\r\n      uint256 gameId = pendingGames[pendingGames.length.sub(1)];\r\n      Game storage game = games[gameId];\r\n\r\n      uint256 gamePrize = game.bet.mul(2);\r\n\r\n      //  referral\r\n      address winnerReferral = (msg.sender == game.creator) ? game.creatorReferral : game.opponentReferral;\r\n      if (winnerReferral == address(0)) {\r\n        winnerReferral = owner();\r\n      }\r\n      uint256 referralFee = gamePrize.mul(FEE_PERCENT).div(100);\r\n      referralFeesPending[winnerReferral] = referralFeesPending[winnerReferral].add(referralFee);\r\n      totalUsedReferralFees = totalUsedReferralFees.add(referralFee);\r\n      \r\n      prizeTotal += gamePrize;\r\n      pendingGames.pop();\r\n    }\r\n\r\n    addressPrizeTotal[msg.sender] = addressPrizeTotal[msg.sender].add(prizeTotal);\r\n    \r\n    uint256 singleFee = prizeTotal.mul(FEE_PERCENT).div(100);\r\n    partnerFeePending = partnerFeePending.add(singleFee);\r\n    ongoinRafflePrize = ongoinRafflePrize.add(singleFee);\r\n    devFeePending = devFeePending.add(singleFee.mul(2));\r\n\r\n    prizeTotal = prizeTotal.sub(singleFee.mul(5));\r\n    msg.sender.transfer(prizeTotal);\r\n\r\n    //  partner transfer\r\n    transferPartnerFee();\r\n\r\n    emit CF_GamePrizesWithdrawn(msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @dev Withdraws referral fees.\r\n    * TESTED\r\n    */\r\n  function withdrawReferralFees() external {\r\n    uint256 feeTmp = referralFeesPending[msg.sender];\r\n    require(feeTmp > 0, \"No referral fee\");\r\n\r\n    delete referralFeesPending[msg.sender];\r\n    referralFeesWithdrawn[msg.sender] = referralFeesWithdrawn[msg.sender].add(feeTmp);\r\n\r\n    msg.sender.transfer(feeTmp);\r\n    emit CF_GameReferralWithdrawn(msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @dev Withdraws developer fees.\r\n    * TESTED\r\n    */\r\n  function withdrawDevFee() external onlyOwner {\r\n    require(devFeePending > 0, \"No dev fee\");\r\n\r\n    uint256 fee = devFeePending;\r\n    delete devFeePending;\r\n\r\n    msg.sender.transfer(fee);\r\n  }\r\n\r\n  /**\r\n   * GameRaffle\r\n   * TESTED\r\n   */\r\n  function withdrawRafflePrizes() external override {\r\n    require(rafflePrizePendingForAddress[msg.sender] > 0, \"No raffle prize\");\r\n\r\n    uint256 prize = rafflePrizePendingForAddress[msg.sender];\r\n    delete rafflePrizePendingForAddress[msg.sender];\r\n    \r\n    addressPrizeTotal[msg.sender] = addressPrizeTotal[msg.sender].add(prize);\r\n\r\n    uint256 singleFee = prize.mul(FEE_PERCENT).div(100);\r\n    partnerFeePending = partnerFeePending.add(singleFee);\r\n    devFeePending = devFeePending.add(singleFee.mul(2));\r\n\r\n    //  transfer prize\r\n    prize = prize.sub(singleFee.mul(3));\r\n    msg.sender.transfer(prize);\r\n\r\n    //  partner transfer\r\n    transferPartnerFee();\r\n\r\n    emit CF_RafflePrizeWithdrawn(msg.sender, prize);\r\n  }\r\n\r\n  /**\r\n    * OTHER\r\n    */\r\n\r\n  /**\r\n    * @dev Checks if player is allowed to play since last game played time.\r\n    * @return Returns weather player is allowed to play.\r\n    * TESTED\r\n    */\r\n  function allowedToPlay() public view returns (bool) {\r\n    return now.sub(lastPlayTimestamp[msg.sender]) > suspendedTimeDuration;\r\n  }\r\n\r\n  /**\r\n    * @dev Adds game idx to the beginning of topGames.\r\n    * @param _id Game idx to be added.\r\n    * TESTED\r\n    */\r\n  function addTopGame(uint256 _id) external payable onlyCreator(_id) {\r\n    require(msg.value == minBet, \"Wrong fee\");\r\n    require(topGames[0] != _id, \"Top in TopGames\");\r\n        \r\n    uint256[5] memory topGamesTmp = [_id, 0, 0, 0, 0];\r\n    bool isIdPresent;\r\n    for (uint8 i = 0; i < 4; i ++) {\r\n      if (topGames[i] == _id && !isIdPresent) {\r\n        isIdPresent = true;\r\n      }\r\n      topGamesTmp[i+1] = (isIdPresent) ? topGames[i+1] : topGames[i];\r\n    }\r\n    topGames = topGamesTmp;\r\n    devFeePending = devFeePending.add(msg.value);\r\n    totalUsedInGame = totalUsedInGame.add(msg.value);\r\n\r\n    emit CF_GameAddedToTop(_id, msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @dev Removes game idx from topGames.\r\n    * @param _id Game idx to be removed.\r\n    * TESTED\r\n    */\r\n  function removeTopGame(uint256 _id) private {\r\n    uint256[5] memory tmpArr;\r\n    bool found;\r\n    \r\n    for(uint256 i = 0; i < 5; i ++) {\r\n      if(topGames[i] == _id) {\r\n        found = true;\r\n      } else {\r\n        if (found) {\r\n          tmpArr[i-1] = topGames[i];\r\n        } else {\r\n          tmpArr[i] = topGames[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    require(found, \"Not TopGame\");\r\n    topGames = tmpArr;\r\n  }\r\n\r\n  /**\r\n    * @dev Gets top games.\r\n    * @return Returns list of top games.\r\n    * TESTED\r\n    */\r\n  function getTopGames() external view returns (uint256[5] memory) {\r\n    return topGames;\r\n  }\r\n\r\n  /**\r\n    * @dev Checks if game id is in top games.\r\n    * @param _id Game id to check.\r\n    * @return Whether game id is in top games.\r\n    * TESTED\r\n    */\r\n  function isTopGame(uint256 _id) public view returns (bool) {\r\n    for (uint8 i = 0; i < 5; i++) {\r\n      if (topGames[i] == _id) {\r\n          return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns game ids with pending withdrawal for address.\r\n    * @param _address Player address.\r\n    * @return ids Game ids.\r\n    * TESTED\r\n    */\r\n  function getGamesWithPendingPrizeWithdrawalForAddress(address _address) external view returns (uint256[] memory ids) {\r\n    ids =  gamesWithPendingPrizeWithdrawalForAddress[_address];\r\n  }\r\n\r\n  /**\r\n   * @dev Updates bet for game.\r\n   * @param _id Game index.\r\n   * TESTED\r\n   */\r\n  function increaseBetForGameBy(uint256 _id) whenNotPaused onlyCreator(_id) external payable {\r\n    require(msg.value > 0, \"increase must be > 0\");\r\n\r\n    addressBetTotal[msg.sender] = addressBetTotal[msg.sender].add(msg.value);\r\n    \r\n    games[_id].bet = games[_id].bet.add(msg.value);\r\n    totalUsedInGame = totalUsedInGame.add(msg.value);\r\n    emit CF_GameUpdated(_id, msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @dev Updates minimum bet value. Can be 0 if no restrictions.\r\n    * @param _minBet Min bet value.\r\n    * TESTED\r\n    */\r\n  function updateMinBet(uint256 _minBet) external onlyOwner {\r\n    require(_minBet > 0, \"Wrong bet\");\r\n    minBet = _minBet;\r\n  }\r\n\r\n  /**\r\n    * @dev Updates spended time duration.\r\n    * @param _duration time duration value.\r\n    * TESTED\r\n    */\r\n  function updateSuspendedTimeDuration(uint256 _duration) external onlyOwner {\r\n    require(_duration > 0, \"Wrong duration\");\r\n    suspendedTimeDuration = _duration;\r\n  }\r\n\r\n  /**\r\n    * @dev Gets game indexes where player participated. Created and joined\r\n    * @param _address Player address.\r\n    * @return List of indexes.\r\n    * TESTED\r\n    */\r\n  function getParticipatedGameIdxsForPlayer(address _address) external view returns (uint256[] memory) {\r\n    require(_address != address(0), \"Cannt be 0x0\");\r\n    return participatedGameIdxsForPlayer[_address];\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_partner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CF_GameAddedToTop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"CF_GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"CF_GamePlayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"CF_GamePrizesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"CF_GameReferralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CF_GameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CF_PartnerFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"CF_RafflePlayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"CF_RafflePrizeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addTopGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressBetTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressPrizeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedToPlay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_guessCoinSide\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeePending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"creatorGuessCoinSide\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"opponent\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorReferral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opponentReferral\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesCompletedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamesCreatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesWithPendingPrizeWithdrawalForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getGamesWithPendingPrizeWithdrawalForAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getParticipatedGameIdxsForPlayer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleResultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopGames\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"increaseBetForGameBy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isTopGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"joinAndPlayGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPlayTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ongoinRafflePrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ongoingGameIdxForCreator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerFeePending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerFeeTotalUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerFeeTransferThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleActivationParticipantsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleParticipants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rafflePrizePendingForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rafflePrizesWonTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleResults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralFeesPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralFeesWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspendedTimeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsedInGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsedReferralFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBet\",\"type\":\"uint256\"}],\"name\":\"updateMinBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_partnerAddress\",\"type\":\"address\"}],\"name\":\"updatePartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferThreshold\",\"type\":\"uint256\"}],\"name\":\"updatePartnerTransferThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateRaffleActivationParticipantsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"updateSuspendedTimeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLoop\",\"type\":\"uint256\"}],\"name\":\"withdrawGamePrizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRafflePrizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReferralFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CoinFlipGame","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006a5e1ea0b50d8ed076ff8992568b98cd618b65eb","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d13eff95979a921a49e0d4accb2a2f98a7531d1b71d10d7c220c32fa5a9010e0"}]}