{"status":"1","message":"OK","result":[{"SourceCode":"/* Discussion:\r\n * https://test.dfohub.eth?ensd=test.dfohub.eth\r\n */\r\n/* Description:\r\n * New Staking Transfer Functionality\r\n */\r\npragma solidity ^0.7.1;\r\n\r\ncontract StakingTransferFunctionality {\r\n\r\n    string private _metadataLink;\r\n\r\n    constructor(string memory metadataLink) {\r\n        _metadataLink = metadataLink;\r\n    }\r\n\r\n    function getMetadataLink() public view returns(string memory) {\r\n        return _metadataLink;\r\n    }\r\n\r\n    function onStart(address, address) public {\r\n        IMVDProxy proxy = IMVDProxy(msg.sender);\r\n        IStateHolder stateHolder = IStateHolder(proxy.getStateHolderAddress());\r\n        stateHolder.setBool(_toStateHolderKey(\"staking.transfer.authorized\", _toString(0x792BF16B9C6CaD4c180C0031F32c39EB51d6A290)), true);\r\n        stateHolder.setUint256(\"staking.0x792bf16b9c6cad4c180c0031f32c39eb51d6a290.tiers[0].minCap\", 100000000000000000000);\r\n        stateHolder.setUint256(\"staking.0x792bf16b9c6cad4c180c0031f32c39eb51d6a290.tiers[0].hardCap\", 100000000000000000000000);\r\n        stateHolder.setUint256(\"staking.0x792bf16b9c6cad4c180c0031f32c39eb51d6a290.tiers.length\", 1);\r\n    }\r\n\r\n    function onStop(address) public {\r\n    }\r\n\r\n    function stakingTransfer(address sender, uint256, uint256 value, address receiver) public {\r\n        IMVDProxy proxy = IMVDProxy(msg.sender);\r\n\r\n        require(IStateHolder(proxy.getStateHolderAddress()).getBool(_toStateHolderKey(\"staking.transfer.authorized\", _toString(sender))), \"Unauthorized action!\");\r\n\r\n        proxy.transfer(receiver, value, proxy.getToken());\r\n    }\r\n\r\n    function _toStateHolderKey(string memory a, string memory b) private pure returns(string memory) {\r\n        return _toLowerCase(string(abi.encodePacked(a, \".\", b)));\r\n    }\r\n\r\n    function _toString(address _addr) private pure returns(string memory) {\r\n        bytes32 value = bytes32(uint256(_addr));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint i = 0; i < 20; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function _toLowerCase(string memory str) private pure returns(string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        for (uint i = 0; i < bStr.length; i++) {\r\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\r\n        }\r\n        return string(bStr);\r\n    }\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getToken() external view returns(address);\r\n    function getStateHolderAddress() external view returns(address);\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function transfer(address receiver, uint256 value, address token) external;\r\n    function flushToWallet(address tokenAddress, bool is721, uint256 tokenId) external;\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getBool(string calldata varName) external view returns (bool);\r\n    function setBool(string calldata varName, bool val) external returns(bool);\r\n    function setUint256(string calldata varName, uint256 val) external returns(uint256);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n}\r\n\r\ninterface IERC20 {\r\n    function mint(uint256 amount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataLink\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getMetadataLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"stakingTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingTransferFunctionality","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003a697066733a2f2f697066732f516d59686b74365962707a6f4635647537447036386f7754566b384535586a32595a7776374c62514a576f42766f000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cdc9e1f826b5279f56063bcc4ade578ad90c5875c5e9d822bda4d31bcbb594c1"}]}