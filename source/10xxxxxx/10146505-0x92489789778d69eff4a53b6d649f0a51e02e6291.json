{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract Proxy {\r\n    function () payable external {\r\n        _fallback();\r\n    }\r\n\r\n    function _implementation() internal view returns (address);\r\n\r\n    function _delegate(address implementation) internal {\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            switch result\r\n            case 0 { revert(0, returndatasize) }\r\n            default { return(0, returndatasize) }\r\n        }\r\n    }\r\n\r\n    function _willFallback() internal pure {\r\n    }\r\n\r\n    function _fallback() internal {\r\n        _willFallback();\r\n        _delegate(_implementation());\r\n    }\r\n}\r\n\r\nlibrary AddressUtils {\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\ncontract UpgradeabilityProxy is Proxy {\r\n    event Upgraded(address implementation);\r\n\r\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n    constructor(address _implementation) public {\r\n        assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n\r\n        _setImplementation(_implementation);\r\n    }\r\n\r\n    function _implementation() internal view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    function _setImplementation(address newImplementation) private {\r\n        require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, newImplementation)\r\n        }\r\n    }\r\n}\r\n\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n    event AdminUpdated(address newAdmin);\r\n\r\n    bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n    bytes32 private constant PENDING_ADMIN_SLOT = 0x54ac2bd5363dfe95a011c5b5a153968d77d153d212e900afce8624fdad74525c;\r\n\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _admin()) {\r\n            _;\r\n        }/* else {\r\n        _fallback();\r\n        }*/\r\n    }\r\n\r\n    constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\r\n        assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\r\n\r\n        _setAdmin(msg.sender);\r\n    }\r\n\r\n    function admin() external view ifAdmin returns (address) {\r\n        return _admin();\r\n    }\r\n\r\n    function pendingAdmin() external view ifAdmin returns (address) {\r\n        return _pendingAdmin();\r\n    }\r\n\r\n    function implementation() external view ifAdmin returns (address) {\r\n        return _implementation();\r\n    }\r\n\r\n    function changeAdmin(address _newAdmin) external ifAdmin {\r\n        require(_newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n        require(_newAdmin != _admin(), \"The current and new admin cannot be the same .\");\r\n        require(_newAdmin != _pendingAdmin(), \"Cannot set the newAdmin of a proxy to the same address .\");\r\n        _setPendingAdmin(_newAdmin);\r\n        emit AdminChanged(_admin(), _newAdmin);\r\n    }\r\n\r\n    function updateAdmin() external {\r\n        address _newAdmin = _pendingAdmin();\r\n        require(_newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n        require(msg.sender == _newAdmin, \"msg.sender and newAdmin must be the same .\");\r\n        _setAdmin(_newAdmin);\r\n        _setPendingAdmin(address(0));\r\n        emit AdminUpdated(_newAdmin);\r\n    }\r\n\r\n    function upgradeTo(address newImplementation) external ifAdmin {\r\n        _upgradeTo(newImplementation);\r\n    }\r\n\r\n    function upgradeToAndCall(address newImplementation, bytes data) payable external ifAdmin {\r\n        _upgradeTo(newImplementation);\r\n        (bool success) = address(this).call.value(msg.value)(data);\r\n        require(success, \"upgradeToAndCall-error\");\r\n    }\r\n\r\n    function _admin() internal view returns (address adm) {\r\n        bytes32 slot = ADMIN_SLOT;\r\n        assembly {\r\n            adm := sload(slot)\r\n        }\r\n    }\r\n\r\n    function _pendingAdmin() internal view returns (address pendingAdm) {\r\n        bytes32 slot = PENDING_ADMIN_SLOT;\r\n        assembly {\r\n            pendingAdm := sload(slot)\r\n        }\r\n    }\r\n\r\n    function _setAdmin(address newAdmin) internal {\r\n        bytes32 slot = ADMIN_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, newAdmin)\r\n        }\r\n    }\r\n\r\n    function _setPendingAdmin(address pendingAdm) internal {\r\n        bytes32 slot = PENDING_ADMIN_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, pendingAdm)\r\n        }\r\n    }\r\n\r\n    function _willFallback() internal pure {\r\n        // require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n        super._willFallback();\r\n    }\r\n}\r\n\r\ncontract DistributionProxy is AdminUpgradeabilityProxy {\r\n    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newImplementation\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]","ContractName":"DistributionProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008de7a0cd975d690e12e478603446c0d78833adbf","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"1","Implementation":"0x8de7a0cd975d690e12e478603446c0d78833adbf","SwarmSource":"bzzr://d21095699bdf3c853668b15041961870718ea75c33bfd0ff8e76444d60206483"}]}