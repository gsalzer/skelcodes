{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    // /**\r\n    //  * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    //  * overflow (when the result is negative).\r\n    //  *\r\n    //  * Counterpart to Solidity's `-` operator.\r\n    //  *\r\n    //  * Requirements:\r\n    //  * - Subtraction cannot overflow.\r\n    //  */\r\n    // function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    //     return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n    //  * overflow (when the result is negative).\r\n    //  *\r\n    //  * Counterpart to Solidity's `-` operator.\r\n    //  *\r\n    //  * Requirements:\r\n    //  * - Subtraction cannot overflow.\r\n    //  */\r\n    // function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    //     require(b <= a, errorMessage);\r\n    //     uint256 c = a - b;\r\n\r\n    //     return c;\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    //  * overflow.\r\n    //  *\r\n    //  * Counterpart to Solidity's `*` operator.\r\n    //  *\r\n    //  * Requirements:\r\n    //  * - Multiplication cannot overflow.\r\n    //  */\r\n    // function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    //     // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    //     // benefit is lost if 'b' is also tested.\r\n    //     // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    //     if (a == 0) {\r\n    //         return 0;\r\n    //     }\r\n\r\n    //     uint256 c = a * b;\r\n    //     require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    //     return c;\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    //  * division by zero. The result is rounded towards zero.\r\n    //  *\r\n    //  * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    //  * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    //  * uses an invalid opcode to revert (consuming all remaining gas).\r\n    //  *\r\n    //  * Requirements:\r\n    //  * - The divisor cannot be zero.\r\n    //  */\r\n    // function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    //     return div(a, b, \"SafeMath: division by zero\");\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n    //  * division by zero. The result is rounded towards zero.\r\n    //  *\r\n    //  * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    //  * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    //  * uses an invalid opcode to revert (consuming all remaining gas).\r\n    //  *\r\n    //  * Requirements:\r\n    //  * - The divisor cannot be zero.\r\n    //  */\r\n    // function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    //     // Solidity only automatically asserts when dividing by 0\r\n    //     require(b > 0, errorMessage);\r\n    //     uint256 c = a / b;\r\n    //     // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    //     return c;\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    //  * Reverts when dividing by zero.\r\n    //  *\r\n    //  * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    //  * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    //  * invalid opcode to revert (consuming all remaining gas).\r\n    //  *\r\n    //  * Requirements:\r\n    //  * - The divisor cannot be zero.\r\n    //  */\r\n    // function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    //     return mod(a, b, \"SafeMath: modulo by zero\");\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    //  * Reverts with custom message when dividing by zero.\r\n    //  *\r\n    //  * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    //  * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    //  * invalid opcode to revert (consuming all remaining gas).\r\n    //  *\r\n    //  * Requirements:\r\n    //  * - The divisor cannot be zero.\r\n    //  */\r\n    // function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    //     require(b != 0, errorMessage);\r\n    //     return a % b;\r\n    // }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    // function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    // event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    // event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    // function sendValue(address payable recipient, uint256 amount) internal {\r\n    //     require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    //     // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    //     (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    //     require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    // }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    // function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    //     uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    //     _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    // }\r\n\r\n    // function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    //     uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n    //     _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    // }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title IFlashLoanReceiver interface\r\n * @notice Interface for the Aave fee IFlashLoanReceiver.\r\n * @author Aave\r\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\r\n **/\r\ninterface IFlashLoanReceiver {\r\n    function executeOperation(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        bytes calldata _params\r\n    ) external;\r\n}\r\n\r\n/**\r\n    @title ILendingPoolAddressesProvider interface\r\n    @notice provides the interface to fetch the LendingPoolCore address\r\n */\r\ninterface ILendingPoolAddressesProvider {\r\n    function getLendingPoolCore() external view returns (address payable);\r\n\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    // function _msgData() internal view virtual returns (bytes memory) {\r\n    //     this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    //     return msg.data;\r\n    // }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n// contract ERC20 is Context, IERC20 {\r\n//     using SafeMath for uint256;\r\n//     using Address for address;\r\n\r\n//     mapping (address => uint256) private _balances;\r\n\r\n//     mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n//     uint256 private _totalSupply;\r\n\r\n//     string private _name;\r\n//     string private _symbol;\r\n//     uint8 private _decimals;\r\n\r\n//     /**\r\n//      * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n//      * a default value of 18.\r\n//      *\r\n//      * To select a different value for {decimals}, use {_setupDecimals}.\r\n//      *\r\n//      * All three of these values are immutable: they can only be set once during\r\n//      * construction.\r\n//      */\r\n//     constructor (string memory name, string memory symbol) public {\r\n//         _name = name;\r\n//         _symbol = symbol;\r\n//         _decimals = 18;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the name of the token.\r\n//      */\r\n//     function name() public view returns (string memory) {\r\n//         return _name;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the symbol of the token, usually a shorter version of the\r\n//      * name.\r\n//      */\r\n//     function symbol() public view returns (string memory) {\r\n//         return _symbol;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Returns the number of decimals used to get its user representation.\r\n//      * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n//      * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n//      *\r\n//      * Tokens usually opt for a value of 18, imitating the relationship between\r\n//      * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n//      * called.\r\n//      *\r\n//      * NOTE: This information is only used for _display_ purposes: it in\r\n//      * no way affects any of the arithmetic of the contract, including\r\n//      * {IERC20-balanceOf} and {IERC20-transfer}.\r\n//      */\r\n//     function decimals() public view returns (uint8) {\r\n//         return _decimals;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-totalSupply}.\r\n//      */\r\n//     function totalSupply() public view override returns (uint256) {\r\n//         return _totalSupply;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-balanceOf}.\r\n//      */\r\n//     function balanceOf(address account) public view override returns (uint256) {\r\n//         return _balances[account];\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-transfer}.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `recipient` cannot be the zero address.\r\n//      * - the caller must have a balance of at least `amount`.\r\n//      */\r\n//     function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n//         _transfer(_msgSender(), recipient, amount);\r\n//         return true;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-allowance}.\r\n//      */\r\n//     function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n//         return _allowances[owner][spender];\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-approve}.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `spender` cannot be the zero address.\r\n//      */\r\n//     function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n//         _approve(_msgSender(), spender, amount);\r\n//         return true;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev See {IERC20-transferFrom}.\r\n//      *\r\n//      * Emits an {Approval} event indicating the updated allowance. This is not\r\n//      * required by the EIP. See the note at the beginning of {ERC20};\r\n//      *\r\n//      * Requirements:\r\n//      * - `sender` and `recipient` cannot be the zero address.\r\n//      * - `sender` must have a balance of at least `amount`.\r\n//      * - the caller must have allowance for ``sender``'s tokens of at least\r\n//      * `amount`.\r\n//      */\r\n//     function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n//         _transfer(sender, recipient, amount);\r\n//         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n//         return true;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n//      *\r\n//      * This is an alternative to {approve} that can be used as a mitigation for\r\n//      * problems described in {IERC20-approve}.\r\n//      *\r\n//      * Emits an {Approval} event indicating the updated allowance.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `spender` cannot be the zero address.\r\n//      */\r\n//     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n//         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n//         return true;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n//      *\r\n//      * This is an alternative to {approve} that can be used as a mitigation for\r\n//      * problems described in {IERC20-approve}.\r\n//      *\r\n//      * Emits an {Approval} event indicating the updated allowance.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `spender` cannot be the zero address.\r\n//      * - `spender` must have allowance for the caller of at least\r\n//      * `subtractedValue`.\r\n//      */\r\n//     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n//         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n//         return true;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n//      *\r\n//      * This is internal function is equivalent to {transfer}, and can be used to\r\n//      * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n//      *\r\n//      * Emits a {Transfer} event.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `sender` cannot be the zero address.\r\n//      * - `recipient` cannot be the zero address.\r\n//      * - `sender` must have a balance of at least `amount`.\r\n//      */\r\n//     function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n//         require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n//         require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n//         _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n//         _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n//         _balances[recipient] = _balances[recipient].add(amount);\r\n//         emit Transfer(sender, recipient, amount);\r\n//     }\r\n\r\n//     /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n//      * the total supply.\r\n//      *\r\n//      * Emits a {Transfer} event with `from` set to the zero address.\r\n//      *\r\n//      * Requirements\r\n//      *\r\n//      * - `to` cannot be the zero address.\r\n//      */\r\n//     function _mint(address account, uint256 amount) internal virtual {\r\n//         require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n//         _beforeTokenTransfer(address(0), account, amount);\r\n\r\n//         _totalSupply = _totalSupply.add(amount);\r\n//         _balances[account] = _balances[account].add(amount);\r\n//         emit Transfer(address(0), account, amount);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Destroys `amount` tokens from `account`, reducing the\r\n//      * total supply.\r\n//      *\r\n//      * Emits a {Transfer} event with `to` set to the zero address.\r\n//      *\r\n//      * Requirements\r\n//      *\r\n//      * - `account` cannot be the zero address.\r\n//      * - `account` must have at least `amount` tokens.\r\n//      */\r\n//     function _burn(address account, uint256 amount) internal virtual {\r\n//         require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n//         _beforeTokenTransfer(account, address(0), amount);\r\n\r\n//         _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n//         _totalSupply = _totalSupply.sub(amount);\r\n//         emit Transfer(account, address(0), amount);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n//      *\r\n//      * This is internal function is equivalent to `approve`, and can be used to\r\n//      * e.g. set automatic allowances for certain subsystems, etc.\r\n//      *\r\n//      * Emits an {Approval} event.\r\n//      *\r\n//      * Requirements:\r\n//      *\r\n//      * - `owner` cannot be the zero address.\r\n//      * - `spender` cannot be the zero address.\r\n//      */\r\n//     function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n//         require(owner != address(0), \"ERC20: approve from the zero address\");\r\n//         require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n//         _allowances[owner][spender] = amount;\r\n//         emit Approval(owner, spender, amount);\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Sets {decimals} to a value other than the default one of 18.\r\n//      *\r\n//      * WARNING: This function should only be called from the constructor. Most\r\n//      * applications that interact with token contracts will not expect\r\n//      * {decimals} to ever change, and may work incorrectly if it does.\r\n//      */\r\n//     function _setupDecimals(uint8 decimals_) internal {\r\n//         _decimals = decimals_;\r\n//     }\r\n\r\n//     /**\r\n//      * @dev Hook that is called before any transfer of tokens. This includes\r\n//      * minting and burning.\r\n//      *\r\n//      * Calling conditions:\r\n//      *\r\n//      * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n//      * will be to transferred to `to`.\r\n//      * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n//      * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n//      * - `from` and `to` are never both zero.\r\n//      *\r\n//      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n//      */\r\n//     function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n// }\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    // event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        // emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    // function renounceOwnership() public virtual onlyOwner {\r\n    //     emit OwnershipTransferred(_owner, address(0));\r\n    //     _owner = address(0);\r\n    // }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    // function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    //     require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    //     emit OwnershipTransferred(_owner, newOwner);\r\n    //     _owner = newOwner;\r\n    // }\r\n}\r\n\r\n/**\r\n    Ensures that any contract that inherits from this contract is able to\r\n    withdraw funds that are accidentally received or stuck.\r\n */\r\ncontract Withdrawable is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    address constant ETHER = address(0);\r\n\r\n    // event LogWithdraw(\r\n    //     address indexed _from,\r\n    //     address indexed _assetAddress,\r\n    //     uint amount\r\n    // );\r\n\r\n    /**\r\n     * @dev Withdraw asset.\r\n     * @param _assetAddress Asset to be withdrawn.\r\n     */\r\n    function withdraw(address _assetAddress) public onlyOwner {\r\n        uint256 assetBalance;\r\n        if (_assetAddress == ETHER) {\r\n            address self = address(this); // workaround for a possible solidity bug\r\n            assetBalance = self.balance;\r\n            msg.sender.transfer(assetBalance);\r\n        } else {\r\n            assetBalance = IERC20(_assetAddress).balanceOf(address(this));\r\n            IERC20(_assetAddress).safeTransfer(msg.sender, assetBalance);\r\n        }\r\n        // emit LogWithdraw(msg.sender, _assetAddress, assetBalance);\r\n    }\r\n}\r\n\r\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver, Withdrawable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    address constant ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    ILendingPoolAddressesProvider public addressesProvider;\r\n\r\n    constructor(address _addressProvider) public {\r\n        addressesProvider = ILendingPoolAddressesProvider(_addressProvider);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function transferFundsBackToPoolInternal(address _reserve, uint256 _amount)\r\n        internal\r\n    {\r\n        address payable core = addressesProvider.getLendingPoolCore();\r\n        transferInternal(core, _reserve, _amount);\r\n    }\r\n\r\n    function transferInternal(\r\n        address payable _destination,\r\n        address _reserve,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_reserve == ethAddress) {\r\n            (bool success, ) = _destination.call{value: _amount}(\"\");\r\n            require(success == true, \"Couldn't transfer ETH\");\r\n            return;\r\n        }\r\n        IERC20(_reserve).safeTransfer(_destination, _amount);\r\n    }\r\n\r\n    function getBalanceInternal(address _target, address _reserve)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_reserve == ethAddress) {\r\n            return _target.balance;\r\n        }\r\n        return IERC20(_reserve).balanceOf(_target);\r\n    }\r\n}\r\n\r\ninterface ILendingPool {\r\n    function addressesProvider() external view returns (address);\r\n\r\n    //   function deposit ( address _reserve, uint256 _amount, uint16 _referralCode ) external payable;\r\n    //   function redeemUnderlying ( address _reserve, address _user, uint256 _amount ) external;\r\n    //   function borrow ( address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode ) external;\r\n    //   function repay ( address _reserve, uint256 _amount, address _onBehalfOf ) external payable;\r\n    //   function swapBorrowRateMode ( address _reserve ) external;\r\n    //   function rebalanceFixedBorrowRate ( address _reserve, address _user ) external;\r\n    //   function setUserUseReserveAsCollateral ( address _reserve, bool _useAsCollateral ) external;\r\n    function liquidationCall(\r\n        address _collateral,\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _purchaseAmount,\r\n        bool _receiveAToken\r\n    ) external payable;\r\n\r\n    function flashLoan(\r\n        address _receiver,\r\n        address _reserve,\r\n        uint256 _amount,\r\n        bytes calldata _params\r\n    ) external;\r\n    //   function getReserveConfigurationData ( address _reserve ) external view returns ( uint256 ltv, uint256 liquidationThreshold, uint256 liquidationDiscount, address interestRateStrategyAddress, bool usageAsCollateralEnabled, bool borrowingEnabled, bool fixedBorrowRateEnabled, bool isActive );\r\n    //   function getReserveData ( address _reserve ) external view returns ( uint256 totalLiquidity, uint256 availableLiquidity, uint256 totalBorrowsFixed, uint256 totalBorrowsVariable, uint256 liquidityRate, uint256 variableBorrowRate, uint256 fixedBorrowRate, uint256 averageFixedBorrowRate, uint256 utilizationRate, uint256 liquidityIndex, uint256 variableBorrowIndex, address aTokenAddress, uint40 lastUpdateTimestamp );\r\n    //   function getUserAccountData ( address _user ) external view returns ( uint256 totalLiquidityETH, uint256 totalCollateralETH, uint256 totalBorrowsETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor );\r\n    //   function getUserReserveData ( address _reserve, address _user ) external view returns ( uint256 currentATokenBalance, uint256 currentUnderlyingBalance, uint256 currentBorrowBalance, uint256 principalBorrowBalance, uint256 borrowRateMode, uint256 borrowRate, uint256 liquidityRate, uint256 originationFee, uint256 variableBorrowIndex, uint256 lastUpdateTimestamp, bool usageAsCollateralEnabled );\r\n    //   function getReserves () external view;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapRouter is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IBank {\r\n    function withdraw(address underlying, uint256 withdrawTokens) external;\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        address underlyingBorrow,\r\n        address underlyingCollateral,\r\n        uint256 repayAmount\r\n    ) external payable;\r\n}\r\n\r\ninterface IFToken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IBankController {\r\n    function getFTokeAddress(address underlying)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ninterface ICrEth {\r\n    /*** User Interface ***/\r\n\r\n    function transfer(address dst, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function getAccountSnapshot(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function borrowRatePerBlock() external view returns (uint256);\r\n\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function borrowBalanceStored(address account)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function getCash() external view returns (uint256);\r\n\r\n    function accrueInterest() external returns (uint256);\r\n\r\n    function seize(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external returns (uint256);\r\n\r\n    //function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        ICrToken cTokenCollateral\r\n    ) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n}\r\n\r\ninterface ICrToken is ICrEth {\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ncontract FlashloanAaveLiquidate is FlashLoanReceiverBase {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // address public bank = address(0xdE7B3b2Fe0E7b4925107615A5b199a4EB40D9ca9);\r\n\r\n    // //https://bloxy.info/address/892b14321a4fcba80669ae30bd0cd99a7ecf6ac0\r\n    // address public creamUnitroller = address(\r\n    //     0x3d5BC3c8d13dcB8bF317092d84783c2697AE9258\r\n    // );\r\n    // address public crCream = address(\r\n    //     0x892B14321a4FCba80669aE30Bd0cd99a7ECF6aC0\r\n    // );\r\n    // //https://bloxy.info/address/0xd06527d5e56a3495252a528c4987003b712860ee\r\n    // address public crEth = address(0xD06527D5e56A3495252A528C4987003b712860eE);\r\n\r\n    address[] public reserve2BorrowRouting;\r\n    address[] public swap2TokenRouting;\r\n\r\n    address public uniRouterV2 = address(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n    address public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // used for for <> weth <> usdc route\r\n\r\n    constructor(address _addressProvider)\r\n        public\r\n        FlashLoanReceiverBase(_addressProvider)\r\n    {}\r\n\r\n    function doApprove(address erc20, address spender) public {\r\n        IERC20(erc20).safeApprove(spender, 0);\r\n        IERC20(erc20).safeApprove(spender, uint256(-1));\r\n    }\r\n\r\n    function myLiquidationFunction(\r\n        address _collateral,\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _purchaseAmount,\r\n        bool _receiveaToken\r\n    ) public {\r\n        if (_reserve != ethAddress) {\r\n            //require(IERC20(_reserve).approve(addressesProvider.getLendingPoolCore(), _purchaseAmount), \"Approval error\");\r\n            doApprove(_reserve, addressesProvider.getLendingPoolCore());\r\n        }\r\n\r\n        ILendingPool lendingPool = ILendingPool(\r\n            addressesProvider.getLendingPool()\r\n        );\r\n\r\n        // Assumes this contract already has `_purchaseAmount` of `_reserve`.\r\n        lendingPool.liquidationCall{\r\n            value: _reserve == ethAddress ? _purchaseAmount : 0\r\n        }(_collateral, _reserve, _user, _purchaseAmount, _receiveaToken);\r\n    }\r\n\r\n    /**\r\n        This function is called after your contract has received the flash loaned amount\r\n     */\r\n    function executeOperation(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        bytes calldata _params\r\n    ) external override {\r\n        require(\r\n            _amount <= getBalanceInternal(address(this), _reserve),\r\n            \"Invalid balance, was the flashLoan successful?\"\r\n        );\r\n\r\n        //\r\n        // Your logic goes here.\r\n        // !! Ensure that *this contract* has enough of `_reserve` funds to payback the `_fee` !!\r\n        //\r\n\r\n        (\r\n            // address borrower,\r\n            // address cTokenBorrow,\r\n            // address cTokenCollateral,\r\n            // uint256 repayAmount\r\n            address underlyingCollateral,\r\n            address _underlyingBorrow,\r\n            address _user,\r\n            uint256 repayAmount\r\n        ) = abi.decode(_params, (address, address, address, uint256));\r\n\r\n        // 1. 从aave借_reserve\r\n        // 2. 授权ETH，在uniswap上卖ETH，买CREAM\r\n        // 3. 授权CREAM到crCream\r\n        // 4. 调用crCream的清算方法，清算CREAM，获得crETH清算奖励(cTokenCollateral)，borrower为被清算人，repayAmount为CREAM清算数量，cTokenCollateral为crETH\r\n        // 5. 得到crETH后，调用crETH的redeem，用crETH赎回ETH\r\n        // 6. 还款aave ETH，还本金和利息（万分之九利息）\r\n        // address underlyingCollateral = ICrToken(cTokenCollateral).underlying();\r\n\r\n        if (_reserve != _underlyingBorrow) {\r\n            // reserve2BorrowRouting = [_reserve, weth, underlyingBorrow];\r\n            address[] memory _weth2BorrowRouting = new address[](2);\r\n            _weth2BorrowRouting[0] = weth;\r\n            _weth2BorrowRouting[1] = _underlyingBorrow;\r\n\r\n            if (_reserve == ethAddress) {\r\n                IUniswapRouter(uniRouterV2).swapExactETHForTokens(\r\n                    0,\r\n                    _weth2BorrowRouting,\r\n                    address(this),\r\n                    now.add(1800)\r\n                );\r\n            } else {\r\n                doApprove(_reserve, uniRouterV2);\r\n                reserve2BorrowRouting = [_reserve, weth, _underlyingBorrow];\r\n                IUniswapRouter(uniRouterV2).swapExactTokensForTokens(\r\n                    IERC20(_reserve).balanceOf(address(this)),\r\n                    0,\r\n                    reserve2BorrowRouting,\r\n                    address(this),\r\n                    now.add(1800)\r\n                );\r\n            }\r\n        }\r\n\r\n        doApprove(_underlyingBorrow, addressesProvider.getLendingPool()); // 授权aave LendingPool\r\n        myLiquidationFunction(\r\n            underlyingCollateral,\r\n            _underlyingBorrow,\r\n            _user,\r\n            repayAmount,\r\n            false\r\n        );\r\n\r\n        if (_reserve != underlyingCollateral) {\r\n            if (underlyingCollateral == ethAddress) {\r\n                address[] memory _weth2ReserveRouting = new address[](2);\r\n                _weth2ReserveRouting[0] = weth;\r\n                _weth2ReserveRouting[1] = _reserve;\r\n\r\n                IUniswapRouter(uniRouterV2).swapExactETHForTokens(\r\n                    0,\r\n                    _weth2ReserveRouting,\r\n                    address(this),\r\n                    now.add(1800)\r\n                );\r\n            } else {\r\n                //use uniswap\r\n                doApprove(underlyingCollateral, uniRouterV2);\r\n                swap2TokenRouting = [underlyingCollateral, weth, _reserve];\r\n                IUniswapRouter(uniRouterV2).swapExactTokensForTokens(\r\n                    IERC20(underlyingCollateral).balanceOf(address(this)),\r\n                    0,\r\n                    swap2TokenRouting,\r\n                    address(this),\r\n                    now.add(1800)\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 totalDebt = _amount.add(_fee);\r\n        transferFundsBackToPoolInternal(_reserve, totalDebt);\r\n    }\r\n\r\n    /**\r\n        Flash loan _amount worth of `_asset` with _data\r\n     */\r\n    function flashloan(\r\n        address _asset,\r\n        uint256 _amount,\r\n        bytes calldata _data\r\n    ) external onlyOwner {\r\n        ILendingPool lendingPool = ILendingPool(\r\n            addressesProvider.getLendingPool()\r\n        );\r\n        lendingPool.flashLoan(address(this), _asset, _amount, _data);\r\n    }\r\n\r\n    function set(\r\n        // address _bank,\r\n        address _weth,\r\n        address _uniRouterV2,\r\n        address _addressesProvider\r\n    ) external onlyOwner {\r\n        // bank = _bank;\r\n        weth = _weth;\r\n        uniRouterV2 = _uniRouterV2;\r\n        addressesProvider = ILendingPoolAddressesProvider(_addressesProvider);\r\n    }\r\n\r\n    // function setRouting(\r\n    //     address[] calldata _reserve2BorrowRouting,\r\n    //     address[] calldata _swap2TokenRouting\r\n    // ) external onlyOwner {\r\n    //     reserve2BorrowRouting = _reserve2BorrowRouting;\r\n    //     swap2TokenRouting = _swap2TokenRouting;\r\n    // }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"doApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"flashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_receiveaToken\",\"type\":\"bool\"}],\"name\":\"myLiquidationFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserve2BorrowRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniRouterV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressesProvider\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swap2TokenRouting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouterV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FlashloanAaveLiquidate","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000024a42fd28c976a61df5d00d0599c34c4f90748c8","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c126b711ea3f63455e03a47d2365f2a1d4f4b3638ef4ca50fbf082c354c37141"}]}