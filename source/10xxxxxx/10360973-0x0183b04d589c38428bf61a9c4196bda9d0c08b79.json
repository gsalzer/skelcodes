{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\ncontract ERC20Interface {\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n}\r\n\r\ninterface BadERC20 {\r\n  function transfer(address to, uint value) external;\r\n}\r\n\r\n\r\ncontract etherForwarder {\r\n\r\n  address payable public ownerAddress;\r\n  address payable public trezorAddress;\r\n  \r\n  \r\n  constructor(address payable _trezorAddress) public {\r\n    ownerAddress = msg.sender;\r\n    trezorAddress = _trezorAddress;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n\r\n    if (msg.sender != ownerAddress) {\r\n      revert();\r\n    }\r\n\r\n    _;\r\n\r\n  }\r\n  \r\n  modifier onlyTrezorOwner {\r\n\r\n    if (msg.sender != trezorAddress) {\r\n      revert();\r\n    }\r\n\r\n    _;\r\n\r\n  }\r\n\r\n\r\n  function() external payable {\r\n\r\n    if(!trezorAddress.send(msg.value)){\r\n      revert();\r\n    }\r\n  }\r\n  \r\n  function changeOwner(address payable newOwnerAddress) external onlyTrezorOwner {\r\n      trezorAddress = newOwnerAddress;\r\n  }\r\n\r\n  function transferTokens(address tokenContractAddress) external onlyOwner {\r\n\r\n    ERC20Interface instance = ERC20Interface(tokenContractAddress);\r\n    address forwarderAddress = address(this);\r\n    uint256 forwarderBalance = instance.balanceOf(forwarderAddress);\r\n\r\n    if (forwarderBalance == 0) {\r\n      return;\r\n    }\r\n    \r\n    if(!safeTransfer(tokenContractAddress,forwarderBalance)){\r\n        revert();\r\n    }\r\n\r\n    //if (!instance.transfer(trezorAddress, forwarderBalance)) {\r\n    //  revert();\r\n    //}\r\n\r\n  }\r\n\r\n  function withdrawEther() public {\r\n\r\n    uint256 balance = address(this).balance;\r\n\r\n    if(!trezorAddress.send(balance)){\r\n        revert();\r\n    }\r\n\r\n  }\r\n  \r\n  function safeTransfer(address token,  uint value) public returns (bool result) {\r\n        \r\n        BadERC20(token).transfer(trezorAddress,value);\r\n\r\n        assembly {\r\n            switch returndatasize()   \r\n                case 0 {                      // This is our BadToken\r\n                    result := not(0)          // result is true\r\n                }\r\n                case 32 {                     // This is our GoodToken\r\n                    returndatacopy(0, 0, 32) \r\n                    result := mload(0)        // result == returndata of external call\r\n                }\r\n                default {                     // This is not an ERC20 token\r\n                    revert(0, 0) \r\n                }\r\n        }\r\n    require(result);                          // revert() if result is false\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trezorAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwnerAddress\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_trezorAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"etherForwarder","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000817590e074dafa0ddf9a18ad18e7d441dca0d98c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://14aa0f587f76c325951fb03fcdb3ebd7b0e08bf066b4e87644e9cb9ad30444e3"}]}