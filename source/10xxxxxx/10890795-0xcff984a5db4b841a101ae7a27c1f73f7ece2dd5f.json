{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\PwayInitiatives.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract PwayInitiatives is Ownable  {\r\n    \r\n    struct VoteStake {\r\n        uint128 up;\r\n        uint128 down;\r\n    }\r\n\r\n    struct Initiative {\r\n        mapping(address => VoteStake) votersStake;\r\n\r\n        uint128 totalVotesUp;\r\n        uint128 totalVotesDown;\r\n\r\n        uint128 startTimestamp;\r\n        uint128 endTimestamp;\r\n    }\r\n\r\n    IERC20 public token;\r\n    Initiative[] public initiatives;\r\n\r\n    event InitiativeCreated(uint256 initiativeId, uint256 identifier);\r\n    event Voted(address indexed voter,uint256 initiativeId, bool voteFor, uint256 amount);\r\n    event StakeReclaimed(address indexed voter,uint256 initiativeId);\r\n    event StakeWithdrawn(address indexed voter,uint256 initiativeId);\r\n\r\n    constructor(IERC20 _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    function addInitiative(uint128 startTimestamp, uint128 endTimestamp, uint256 identifier) external onlyOwner {\r\n        require(startTimestamp > now , \"Invalid start date\");\r\n        require(startTimestamp < endTimestamp, \"Invalid dates\");\r\n\r\n        require(identifier > 0, \"Invalid identifier\");\r\n\r\n        Initiative memory newInitiative = Initiative({\r\n            startTimestamp : startTimestamp, \r\n            endTimestamp:endTimestamp,\r\n            totalVotesUp:0,\r\n            totalVotesDown:0});\r\n\r\n        initiatives.push(newInitiative);\r\n\r\n        emit InitiativeCreated(initiatives.length-1, identifier);\r\n    }\r\n\r\n    function getInitiativeCount() view external returns(uint256){\r\n        return initiatives.length;\r\n    }\r\n\r\n    function getInitiative(uint256 initiativeId) view public \r\n    returns(\r\n        uint128 voteUp, \r\n        uint128 voteDown, \r\n        uint128 startTimestamp,\r\n        uint128 endTimestamp) {\r\n        Initiative memory initiative = initiatives[initiativeId];\r\n        \r\n        return (initiative.totalVotesUp, initiative.totalVotesDown, initiative.startTimestamp, initiative.endTimestamp);\r\n    }\r\n\r\n    function getVoterData(uint256 initiativeId,address voter) public view returns(uint128 voteFor, uint128 voteAgains) {\r\n        Initiative storage initiative = initiatives[initiativeId];\r\n\r\n        VoteStake storage voterStake = initiative.votersStake[voter];\r\n\r\n        return(voterStake.up, voterStake.down);\r\n    }\r\n\r\n    function vote(uint256 initiativeId, bool voteFor, uint256 amount) external {\r\n        Initiative storage initiative = initiatives[initiativeId];\r\n\r\n        require(initiative.startTimestamp > 0, \"InitiativeId do not existst\");\r\n        require(initiative.endTimestamp > now);\r\n        \r\n        require(amount > 0, \"Amount should greater than zero\");\r\n\r\n        require(token.allowance(msg.sender, address(this)) >= amount, \"Not enought PWay token to vote\");\r\n\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n\r\n        VoteStake storage voterStake = initiative.votersStake[msg.sender];\r\n\r\n        if(voteFor) {\r\n            voterStake.up += uint128(amount);\r\n            initiative.totalVotesUp += uint128(amount);\r\n        }\r\n        else {\r\n            voterStake.down += uint128(amount);\r\n            initiative.totalVotesDown += uint128(amount);\r\n        }\r\n\r\n        emit Voted(msg.sender, initiativeId, voteFor, amount);\r\n    }\r\n\r\n    function withdrawStake(address voter,uint initiativeId) external {\r\n\r\n        Initiative storage initiative = initiatives[initiativeId];\r\n\r\n        require(initiative.startTimestamp > 0, \"InitiativeId do not existst\");\r\n        require(uint256(initiative.endTimestamp) < now,\"Initiative is not ended\");\r\n\r\n        VoteStake storage voterStake = initiative.votersStake[voter];\r\n        uint256 voterTotalStake = uint256(voterStake.up) + uint256(voterStake.down);\r\n\r\n        voterStake.up = 0;\r\n        voterStake.down = 0;\r\n        \r\n        token.transfer(voter, voterTotalStake);\r\n        emit StakeWithdrawn(voter, initiativeId);\r\n    }\r\n\r\n    function reclaimStake(uint initiativeId) external {\r\n\r\n        Initiative storage initiative = initiatives[initiativeId];\r\n\r\n        require(initiative.startTimestamp > 0, \"InitiativeId do not exists\");\r\n        require(uint256(initiative.endTimestamp) > now,\"Initiative is ended\");\r\n\r\n        VoteStake storage voterStake = initiative.votersStake[msg.sender];\r\n        uint256 voterTotalStake = uint256(voterStake.up) + uint256(voterStake.down);\r\n\r\n        initiative.totalVotesUp -= uint128(voterStake.up);\r\n        initiative.totalVotesDown -= uint128(voterStake.down);\r\n\r\n        voterStake.up = 0;\r\n        voterStake.down = 0;\r\n        \r\n        token.transfer(msg.sender, voterTotalStake);\r\n\r\n        emit StakeReclaimed(msg.sender, initiativeId);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initiativeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"InitiativeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initiativeId\",\"type\":\"uint256\"}],\"name\":\"StakeReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initiativeId\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initiativeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"startTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"addInitiative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initiativeId\",\"type\":\"uint256\"}],\"name\":\"getInitiative\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"voteUp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"voteDown\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTimestamp\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitiativeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initiativeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVoterData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"voteFor\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"voteAgains\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initiatives\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalVotesUp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalVotesDown\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTimestamp\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initiativeId\",\"type\":\"uint256\"}],\"name\":\"reclaimStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initiativeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voteFor\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initiativeId\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PwayInitiatives","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005a14fe6923e767a8238f29d3e1fb1a913975f0d7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://157cf7947ab6be09c5a590a38f759b4f7003e4498e99a541d473a92a400aaa38"}]}