{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n    address payable internal newOwnerCandidate;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Permission denied\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address payable newOwner) public onlyOwner {\r\n        newOwnerCandidate = newOwner;\r\n    }\r\n\r\n    function acceptOwner() public {\r\n        require(msg.sender == newOwnerCandidate, \"Permission denied\");\r\n        owner = newOwnerCandidate;\r\n    }\r\n}\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\r\n// import \"./SafeMath.sol\";\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface IToken {\r\n    function decimals() external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function approve(address spender, uint value) external;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint amount) external;\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IToken token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IToken token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IToken token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IToken token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IToken token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IToken token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IToken;\r\n\r\n    IToken private constant ZERO_ADDRESS = IToken(0x0000000000000000000000000000000000000000);\r\n    IToken private constant ETH_ADDRESS = IToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IToken token, address to, uint256 amount) internal {\r\n        universalTransfer(token, to, amount, false);\r\n    }\r\n\r\n    function universalTransfer(IToken token, address to, uint256 amount, bool mayFail) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (mayFail) {\r\n                return address(uint160(to)).send(amount);\r\n            } else {\r\n                address(uint160(to)).transfer(amount);\r\n                return true;\r\n            }\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalApprove(IToken token, address to, uint256 amount) internal {\r\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IToken token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(uint256(msg.value).sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IToken token, address who) internal view returns (uint256) {\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n\r\ncontract FundsMgr is Ownable {\r\n    using UniversalERC20 for IToken;\r\n\r\n    function withdraw(address token, uint256 amount) public onlyOwner {\r\n        if (token == address(0x0)) {\r\n            owner.transfer(amount);\r\n        } else {\r\n            IToken(token).universalTransfer(owner, amount);\r\n        }\r\n    }\r\n\r\n    function withdrawAll(address[] memory tokens) public onlyOwner {\r\n        for(uint256 i = 0; i < tokens.length;i++) {\r\n            withdraw(tokens[i], IToken(tokens[i]).universalBalanceOf(address(this)));\r\n        }\r\n    }\r\n}\r\n\r\ninterface IGST2 {\r\n\tfunction freeUpTo(uint256 value) external returns(uint256 freed);\r\n\tfunction freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract GasTokenSpender {\r\n\r\n    address public constant GAS_TOKEN = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n\r\n    // ** PUBLIC VIEW functions **\r\n\r\n    function gasTokenBalance() public view returns(uint256 amount) {\r\n        amount = IGST2(GAS_TOKEN).balanceOf(address(this));\r\n    }\r\n\r\n    // ** INTERNAL functions **\r\n\r\n    function _burnGasToken(uint256 gasSpent) internal returns(bool) {\r\n        uint maxTokens = gasTokenBalance();\r\n        if (maxTokens == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint tokensToBurn = (gasSpent + 14154) / 41130;\r\n        if (tokensToBurn > maxTokens) {\r\n            tokensToBurn = maxTokens;\r\n        }\r\n\r\n        IGST2(GAS_TOKEN).freeUpTo(tokensToBurn);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y, uint base) internal pure returns (uint z) {\r\n        z = add(mul(x, y), base / 2) / base;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    /*function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }*/\r\n}\r\n// import \"../utils/UniversalERC20.sol\";\r\n\r\ncontract ConstantAddressesMainnet {\r\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    address public constant COMPOUND_ORACLE = 0x1D8aEdc9E924730DD3f9641CDb4D1B92B848b4bd;\r\n\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n\r\n    address public constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant CUSDC_ADDRESS = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\r\n\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n}\r\n\r\n// solhint-disable-next-line no-empty-blocks\r\ncontract ConstantAddresses is ConstantAddressesMainnet {}\r\n\r\n// ECDSA operations for signature\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * NOTE: This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\ncontract SignatureHelper {\r\n\r\n    // ** CONSTANTS **\r\n\r\n    // EIP191 header for EIP712 prefix\r\n    bytes2 constant internal EIP191_HEADER = 0x1901;\r\n\r\n    // EIP712 Domain Name value\r\n    string constant internal EIP712_DOMAIN_NAME = \"DF.Help\";\r\n\r\n    // EIP712 Domain Version value\r\n    string constant internal EIP712_DOMAIN_VERSION = \"1.0\";\r\n\r\n    // Hash of the EIP712 Domain Separator Schema\r\n    bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\r\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n    ));\r\n}\r\n\r\ncontract CloseSignatureLogic is SignatureHelper {\r\n\r\n    // ** CONSTANTS **\r\n\r\n    // Hash of the EIP712 IncreaseStrategyUsd struct\r\n    bytes32 constant internal EIP712_DEAL_STRUCT_SCHEMA_HASH = keccak256(abi.encodePacked(\r\n        \"IncreaseStrategyUsd(address dfWallet,uint256 coefficient,uint256 valueUsdc,uint256 minEntryEthPrice,uint256 maxEntryEthPrice,uint256 expireTime,uint256 signNonce)\"\r\n    ));\r\n\r\n    // ** Immutable Storage **\r\n\r\n    // Hash of the EIP712 Domain Separator data\r\n    bytes32 public EIP712_DOMAIN_HASH;\r\n\r\n    constructor() public {\r\n        EIP712_DOMAIN_HASH = keccak256(abi.encode(\r\n            EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\r\n            keccak256(bytes(EIP712_DOMAIN_NAME)),\r\n            keccak256(bytes(EIP712_DOMAIN_VERSION)),\r\n            1,\r\n            address(this)\r\n        ));\r\n    }\r\n\r\n    // Returns the EIP712 hash of an IncreaseStrategyUsd\r\n    function _getUsdIncreaseStrategyHash(\r\n        address _dfWallet,\r\n        uint[6] memory _params\r\n    )\r\n        internal\r\n        view\r\n        returns(bytes32)\r\n    {\r\n        // compute the overall signed struct hash\r\n        bytes32 structHash = keccak256(abi.encode(\r\n            EIP712_DEAL_STRUCT_SCHEMA_HASH,\r\n            _dfWallet,   // dfWallet\r\n            _params[0],  // coefficient\r\n            _params[1],  // valueUsdc\r\n            _params[2],  // minEntryEthPrice\r\n            _params[3],  // maxEntryEthPrice\r\n            _params[4],  // expireTime\r\n            _params[5]   // signNonce\r\n        ));\r\n\r\n        // compute eip712 compliant hash\r\n        return keccak256(abi.encodePacked(\r\n            EIP191_HEADER,\r\n            EIP712_DOMAIN_HASH,\r\n            structHash\r\n        ));\r\n    }\r\n}\r\n\r\n// ** INTERFACES **\r\n\r\ninterface IDfWallet {\r\n\r\n    function setDfFinanceClose(address _dfFinanceClose) external;\r\n\r\n    function deposit(\r\n        address _tokenIn, address _cTokenIn, uint _amountIn, address _tokenOut, address _cTokenOut, uint _amountOut\r\n    ) external payable;\r\n\r\n    function withdraw(\r\n        address _tokenIn, address _cTokenIn, address _tokenOut, address _cTokenOut\r\n    ) external payable;\r\n\r\n}\r\n\r\ninterface ICToken {\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrow() external payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function supplyRatePerBlock() external returns (uint256);\r\n\r\n    function borrowRatePerBlock() external returns (uint256);\r\n\r\n    function totalReserves() external returns (uint256);\r\n\r\n    function reserveFactorMantissa() external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function borrowBalanceStored(address account) external view returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n\r\n    function getCash() external returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function underlying() external returns (address);\r\n}\r\n\r\ninterface ICompoundOracle {\r\n    function getUnderlyingPrice(address cToken) external view returns (uint);\r\n}\r\n\r\ninterface IComptroller {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external returns (uint256);\r\n\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n\r\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\r\n\r\n    function markets(address cTokenAddress) external view returns (bool, uint);\r\n}\r\n\r\ninterface IDfFinanceClose {\r\n\r\n    // // setup with Compound Oracle eth price\r\n    // function setupStrategy(\r\n    //     address _owner, address _dfWallet, uint256 _deposit, uint8 _profitPercent, uint8 _fee\r\n    // ) external;\r\n\r\n    // setup with special eth price\r\n    function setupStrategy(\r\n        address _owner, address _dfWallet, uint256 _deposit, uint256 _priceEth, uint8 _profitPercent, uint8 _fee\r\n    ) external;\r\n\r\n    // setup with special eth price and current extraCoef – for strategy migration\r\n    function setupStrategy(\r\n        address _owner, address _dfWallet, uint256 _deposit, uint256 _priceEth, uint8 _profitPercent, uint8 _fee, uint256 _extraCoef\r\n    ) external;\r\n\r\n    // setup empty strategy (without deposit)\r\n    function setupStrategy(\r\n        address _owner, address _dfWallet, uint8 _profitPercent, uint8 _fee\r\n    ) external;\r\n\r\n    function getStrategy(\r\n        address _dfWallet\r\n    ) external view\r\n    returns(\r\n        address strategyOwner,\r\n        uint deposit,\r\n        uint extraCoef,\r\n        uint entryEthPrice,\r\n        uint profitPercent,\r\n        uint fee,\r\n        uint ethForRedeem,\r\n        uint usdToWithdraw,\r\n        bool onlyProfitInUsd);\r\n\r\n    function migrateStrategies(address[] calldata _dfWallets) external;\r\n\r\n    function collectAndCloseByUser(\r\n        address _dfWallet,\r\n        uint256 _ethForRedeem,\r\n        uint256 _minAmountUsd,\r\n        bool _onlyProfitInUsd,\r\n        bytes calldata _exData\r\n    ) external payable;\r\n\r\n    function exitAfterLiquidation(\r\n        address _dfWallet,\r\n        uint256 _ethForRedeem,\r\n        uint256 _minAmountUsd,\r\n        bytes calldata _exData\r\n    ) external payable;\r\n\r\n    function depositEth(address _dfWallet) external payable;\r\n\r\n}\r\n\r\ninterface IOneInchExchange {\r\n    function spender() external view returns (address);\r\n}\r\n\r\ninterface ILoanPool {\r\n    function loan(uint _amount) external;\r\n}\r\n\r\ninterface IAffiliateProgram {\r\n\r\n    function getProfitPercentByReferral(address referral) external view returns (uint8);\r\n\r\n    function addReferral(address referral, bytes32 code, uint256 ethValue) external;\r\n    function distributeProfitByReferral(address referral) external payable;\r\n\r\n/*\r\n    function getPartnerByReferral(address referral) external view returns (address, uint8, uint256, uint256, uint256);\r\n    function levels(uint8 level) external view returns (uint16, uint256);\r\n*/\r\n\r\n    // Old functions for Maker Sai ver.\r\n    function addUserUseCode(address user, string calldata code) external;\r\n    function getPartnerFromUser(address user) external view returns (address, uint8, uint256, uint256);\r\n    function levels(uint8 level) external view returns (uint16, uint256);\r\n    function addPartnerProfitUseAddress(address partner) external payable;\r\n\r\n}\r\n\r\ninterface IDfStrategyCallback {\r\n\r\n    function __callback(\r\n        bool _isStrategyClosed,\r\n        uint _closingType\r\n    ) external returns(bool success);\r\n\r\n}\r\n\r\ncontract DfFinanceCloseCompound is\r\n    DSMath,\r\n    ConstantAddresses,\r\n    CloseSignatureLogic,\r\n    GasTokenSpender,\r\n    FundsMgr\r\n{\r\n    using UniversalERC20 for IToken;\r\n    using ECDSA for bytes32;\r\n\r\n    struct Strategy {\r\n        // first bytes32 (== uint256) slot\r\n        uint80 deposit;  // in eth – max more 1.2 mln eth\r\n        uint80 entryEthPrice;  // in usd – max more 1.2 mln USD for 1 eth\r\n        uint8 profitPercent;  // % – 0 to 255\r\n        uint8 fee;  // % – 0 to 100 (ex. 30% = 30)\r\n        uint80 ethForRedeem;  // eth for repay loan – max more 1.2 mln eth\r\n\r\n        // second bytes32 (== uint256) slot\r\n        uint64 usdToWithdraw;  // in usd\r\n        bool onlyProfitInUsd;  // only profit withdraw in usd (deposit withdraw in eth)\r\n        address owner;  // == uint160\r\n        uint16 extraCoef;  // extra locked coef in % (100 == 1/1) where ethLocked = extraCoef * deposit\r\n    }\r\n\r\n    mapping(address => bool) public admins;\r\n    mapping(address => bool) public strategyManagers;\r\n\r\n    mapping(address => Strategy) public strategies;  //  dfWallet => Strategy\r\n\r\n    ILoanPool public loanPool;\r\n    IAffiliateProgram public aff;\r\n\r\n    IDfFinanceClose public upgradedAddress;  // DfFinanceClose contract for migration\r\n\r\n    // Fee\r\n    uint256 public earlyCloseFee;  // fee for early close\r\n    uint256 public dateUntilFees;  // date until earlyCloseFee available\r\n\r\n    // canceled or used signs\r\n    mapping(address => mapping(uint256 => bool)) public signedNonces;\r\n\r\n    // ** EVENTS **\r\n\r\n    event AfterExchangeRefund(address indexed user, uint ethToRefund, uint usdToRefund);\r\n\r\n    event StrategyClosing(address indexed dfWallet, uint ethToWithdraw, uint usdToWithdraw);\r\n    event StrategyClosed(address indexed dfWallet, uint ethToWithdraw, uint usdToWithdraw);\r\n    event SetupStrategy(\r\n        address indexed owner, address indexed dfWallet, uint deposit, uint priceEth, uint8 profitPercent, uint8 fee\r\n    );\r\n\r\n    event StrategyMigrated(address indexed dfWallet);\r\n\r\n    event SystemProfit(uint profit);\r\n\r\n    // ** MODIFIERS **\r\n\r\n    modifier hasSetupStrategyPermission {\r\n        require(strategyManagers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin {\r\n        require(admins[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier useGasToken {\r\n        uint gasProvided = gasleft();\r\n        _;\r\n        _burnGasToken(sub(gasProvided, gasleft()));\r\n    }\r\n\r\n    modifier onlyUsdIncreaseVerified(\r\n        address _dfWallet,\r\n        bytes memory _signature,    // dfWallet user signature is v, r, s for ECDSA\r\n        uint[8] memory _params      // coef [0], valueUsdc [1],\r\n                                    // entryEthPrice [2], minEntryEthPrice [3], maxEntryEthPrice [4],\r\n                                    // expireTime [5], signNonce [6], ethType[7]\r\n    ) {\r\n        // check signature\r\n        require(\r\n            isUsdIncreaseVerified(\r\n                /* dfWallet, signature,\r\n                coef, valueUsdc, entryEthPrice, minEntryEthPrice, maxEntryEthPrice, expireTime, signNonce */\r\n                _dfWallet, _signature,\r\n                [_params[0], _params[1], _params[2], _params[3], _params[4], _params[5], _params[6]]\r\n            )\r\n        );\r\n\r\n        // signNonce for dfWallet is used\r\n        signedNonces[_dfWallet][_params[6]] = true;\r\n        _;\r\n    }\r\n\r\n    // ** CONSTRUCTOR **\r\n\r\n    constructor() public {\r\n        loanPool = ILoanPool(0x9EdAe6aAb4B0f0f8146051ab353593209982d6B6);\r\n        strategyManagers[address(0x7eF7eBf6c5DA51A95109f31063B74ECf269b22bE)] = true;  // TODO: set DfFinanceOpenCompound\r\n    }\r\n\r\n    // ** PUBLIC VIEW function **\r\n\r\n    function getStrategy(address _dfWallet) public view returns(\r\n        address strategyOwner,\r\n        uint deposit,\r\n        uint extraCoef,\r\n        uint entryEthPrice,\r\n        uint profitPercent,\r\n        uint fee,\r\n        uint ethForRedeem,\r\n        uint usdToWithdraw,\r\n        bool onlyProfitInUsd)\r\n    {\r\n        strategyOwner = strategies[_dfWallet].owner;\r\n        deposit = strategies[_dfWallet].deposit;\r\n        extraCoef = strategies[_dfWallet].extraCoef;\r\n        entryEthPrice = strategies[_dfWallet].entryEthPrice;\r\n        profitPercent = strategies[_dfWallet].profitPercent;\r\n        fee = strategies[_dfWallet].fee;\r\n        ethForRedeem = strategies[_dfWallet].ethForRedeem;\r\n        usdToWithdraw = strategies[_dfWallet].usdToWithdraw;\r\n        onlyProfitInUsd = strategies[_dfWallet].onlyProfitInUsd;\r\n    }\r\n\r\n    // function getCurPriceEth() public view returns(uint256) {\r\n    //     // eth - usdc price call to Compound Oracle contract\r\n    //     uint price = ICompoundOracle(COMPOUND_ORACLE).getUnderlyingPrice(CUSDC_ADDRESS) / 1e12;   // get 1e18 price * 1e12\r\n    //     return wdiv(WAD, price);\r\n    // }\r\n\r\n    /// @notice Returns the maximum amount of borrow amount available\r\n    /// @dev Due to rounding errors the result is - 100 wei from the exact amount\r\n    function getMaxBorrow(address _cBorrowToken, address _wallet) public view returns (uint) {\r\n        (, uint liquidityInEth, ) = IComptroller(COMPTROLLER).getAccountLiquidity(_wallet);\r\n\r\n        if (_cBorrowToken == CETH_ADDRESS) {\r\n            return liquidityInEth;\r\n        }\r\n\r\n        uint ethPrice = ICompoundOracle(COMPOUND_ORACLE).getUnderlyingPrice(_cBorrowToken);\r\n        uint liquidityInToken = wdiv(liquidityInEth, ethPrice);\r\n\r\n        return sub(liquidityInToken, 100); // cut off 100 wei to handle rounding issues\r\n    }\r\n\r\n    function isUsdIncreaseVerified(\r\n        address _dfWallet,\r\n        bytes memory _signature,    // dfWallet user signature is v, r, s for ECDSA\r\n        uint[7] memory _params      // coef [0], valueUsdc [1],\r\n                                    // entryEthPrice [2], minEntryEthPrice [3], maxEntryEthPrice [4],\r\n                                    // expireTime [5], signNonce [6]\r\n    ) public view returns(bool) {\r\n        require(_params[3] <= _params[4]);\r\n\r\n        // sign is expired, used or canceled\r\n        if (now > _params[5] ||\r\n            signedNonces[_dfWallet][_params[6]]) {\r\n            return false;\r\n        }\r\n\r\n        // entryEthPrice is too high or low\r\n        if (_params[2] < _params[3] || _params[2] > _params[4]) {\r\n            return false;\r\n        }\r\n\r\n        // This recreates the message hash that was signed on the client\r\n        bytes32 hash = _getUsdIncreaseStrategyHash(\r\n            /* dfWallet,\r\n            coef, valueUsdc, minEntryEthPrice, maxEntryEthPrice, expireTime, signNonce */\r\n            _dfWallet,\r\n            [_params[0], _params[1], _params[3], _params[4], _params[5], _params[6]]\r\n        );\r\n\r\n        // Verify that the message's signer is the owner of _dfWallet\r\n        return (\r\n            strategies[_dfWallet].owner == hash.recover(_signature)\r\n        );\r\n    }\r\n\r\n    // * SETUP_STRATAGY_PERMISSION function **\r\n\r\n    // // setup with Compound Oracle eth price\r\n    // function setupStrategy(\r\n    //     address _owner, address _dfWallet, uint256 _deposit, uint8 _profitPercent, uint8 _fee\r\n    // ) public hasSetupStrategyPermission {\r\n    //     _setupStrategy(_owner, _dfWallet, _deposit, getCurPriceEth(), _profitPercent, _fee, 0);\r\n    // }\r\n\r\n    // setup with special eth price\r\n    function setupStrategy(\r\n        address _owner, address _dfWallet, uint256 _deposit, uint256 _priceEth, uint8 _profitPercent, uint8 _fee\r\n    ) public hasSetupStrategyPermission {\r\n        _setupStrategy(_owner, _dfWallet, _deposit, _priceEth, _profitPercent, _fee, 0);\r\n    }\r\n\r\n    // setup with special eth price and current extraCoef – for strategy migration\r\n    function setupStrategy(\r\n        address _owner,\r\n        address _dfWallet,\r\n        uint256 _deposit,\r\n        uint256 _priceEth,\r\n        uint8 _profitPercent,\r\n        uint8 _fee,\r\n        uint256 _extraCoef\r\n    ) public hasSetupStrategyPermission {\r\n        _setupStrategy(_owner, _dfWallet, _deposit, _priceEth, _profitPercent, _fee, _extraCoef);\r\n    }\r\n\r\n    // setup empty strategy (without deposit)\r\n    function setupStrategy(\r\n        address _owner, address _dfWallet, uint8 _profitPercent, uint8 _fee\r\n    ) public hasSetupStrategyPermission {\r\n        _setupStrategy(_owner, _dfWallet, 0, 0, _profitPercent, _fee, 0);\r\n    }\r\n\r\n    // ** ONLY_OWNER_OR_ADMIN functions **\r\n\r\n    function increaseStrategyUsdWithSign(\r\n        address _dfWallet,\r\n        bytes memory _signature,    // dfWallet user signature is v, r, s for ECDSA\r\n        uint[8] memory _params,     // coef [0], valueUsdc [1],\r\n                                    // entryEthPrice [2], minEntryEthPrice [3], maxEntryEthPrice [4],\r\n                                    // expireTime [5], signNonce [6], ethType[7]\r\n        bytes memory _exData        // data for 1inch exchange\r\n    ) public\r\n        useGasToken\r\n        onlyOwnerOrAdmin\r\n        onlyUsdIncreaseVerified(_dfWallet, _signature, _params)\r\n    {\r\n        _increaseStrategyUsd(\r\n            /* _dfWallet, _coef, _valueUsdc, _entryEthPrice, _exData, _ethType */\r\n            _dfWallet, _params[0], _params[1], _params[2], _exData, _params[7]\r\n        );\r\n    }\r\n\r\n    // with GasToken usage\r\n    function collectUsdForStrategies(\r\n        address[] memory _dfWallets,\r\n        uint256 _amountUsdToRedeem,\r\n        uint256 _amountUsdToBuy,\r\n        uint256 _usdPrice,\r\n        bool _onlyProfitInUsd,\r\n        bool _useExchange,\r\n        bytes memory _exData\r\n    ) public\r\n        useGasToken\r\n        onlyOwnerOrAdmin\r\n    {\r\n        // uint usdDecimals = IToken(USDC_ADDRESS).decimals(); == 1e6\r\n        uint totalLoanEth = wmul(add(_amountUsdToRedeem, _amountUsdToBuy), _usdPrice, 1e6) * 1e12;\r\n\r\n        // exchange function result\r\n        /**\r\n            exResult[2] - extra ToTokens after exchange – USDC\r\n            exResult[3] - extra FromTokens after exchange – ETH\r\n         */\r\n        uint[4] memory exResult;\r\n\r\n        // Use 1inch exchange (ETH to USDC swap)\r\n        if (_useExchange) {\r\n            loanPool.loan(totalLoanEth);  // take an totalCredit eth loan\r\n            exResult = _exchange(\r\n                IToken(ETH_ADDRESS), totalLoanEth,\r\n                IToken(USDC_ADDRESS), add(_amountUsdToRedeem, _amountUsdToBuy),\r\n                _exData\r\n            );\r\n        }\r\n\r\n        uint ethAfterClose = 0; //  count all ETH gets for USDC exchange after closing strategies\r\n\r\n        // collect USD for close logic\r\n        for (uint i = 0; i < _dfWallets.length; i++) {\r\n            ethAfterClose += _collectUsdHelper(_dfWallets[i], _amountUsdToBuy, _usdPrice, _onlyProfitInUsd);\r\n        }\r\n\r\n        require(ethAfterClose >= totalLoanEth);\r\n\r\n        // distribute extra exchange profit\r\n        if (exResult[2] > 0 || exResult[3] > 0) {\r\n            /**\r\n                exResult[2] - extra ToTokens after exchange – USDC\r\n                exResult[3] - extra FromTokens after exchange – ETH\r\n             */\r\n            _distributeExtraExchangeProfit(_dfWallets, exResult[3], exResult[2]);\r\n        }\r\n    }\r\n\r\n    // with GasToken usage\r\n    function collectAndClose(\r\n        address[] memory _dfWallets,\r\n        uint256 _amountUsdToRedeem,\r\n        uint256 _amountUsdToBuy,\r\n        uint256 _usdPrice,\r\n        bool _onlyProfitInUsd,\r\n        bool _useExchange,\r\n        bytes memory _exData\r\n    ) public {  // onlyOwnerOrAdmin & useGasToken in collectUsdForStrategies function\r\n\r\n        // step 1: collect usd for closing\r\n        collectUsdForStrategies(\r\n            _dfWallets,\r\n            _amountUsdToRedeem,\r\n            _amountUsdToBuy,\r\n            _usdPrice,\r\n            _onlyProfitInUsd,\r\n            _useExchange,\r\n            _exData\r\n        );\r\n\r\n        // step 2: close strategies\r\n        closeStrategies(_dfWallets);\r\n    }\r\n\r\n    // ** PUBLIC function **\r\n\r\n    // // with GasToken usage\r\n    // function closeStrategy(address _dfWallet) public useGasToken {\r\n    //     require(strategies[_dfWallet].ethForRedeem > 0, \"Strategy is not exists or ready for close\");\r\n\r\n    //     // close strategy internal\r\n    //     _strategyCloseHelper(_dfWallet);\r\n    // }\r\n\r\n    // with GasToken usage\r\n    function closeStrategies(address[] memory _dfWallets) public useGasToken {\r\n        for (uint i = 0; i < _dfWallets.length; i++) {\r\n            require(strategies[_dfWallets[i]].ethForRedeem > 0);\r\n            // close strategy internal\r\n            _strategyCloseHelper(_dfWallets[i]);\r\n        }\r\n    }\r\n\r\n    function migrateStrategies(address[] memory _dfWallets) public {\r\n        IDfFinanceClose migrationAddress = upgradedAddress;\r\n        require(migrationAddress != IDfFinanceClose(0));\r\n\r\n        for(uint i = 0; i < _dfWallets.length; i++) {\r\n            Strategy memory strategy = strategies[_dfWallets[i]];\r\n            require(strategy.owner == msg.sender);\r\n            require(strategy.ethForRedeem == 0);\r\n\r\n            migrationAddress.setupStrategy(\r\n                strategy.owner,\r\n                _dfWallets[i],\r\n                strategy.deposit,\r\n                strategy.entryEthPrice,\r\n                strategy.profitPercent,\r\n                strategy.fee,\r\n                strategy.extraCoef\r\n            );\r\n\r\n            // change dfWallet's DfFinanceClose contract state\r\n            IDfWallet(_dfWallets[i]).setDfFinanceClose(address(migrationAddress));\r\n\r\n            // clear _dfWallets[i] strategy struct\r\n            _clearStrategy(_dfWallets[i]);\r\n\r\n            emit StrategyMigrated(_dfWallets[i]);\r\n        }\r\n    }\r\n\r\n    function depositEth(address _dfWallet) public payable {\r\n        require(strategies[_dfWallet].deposit > 0);\r\n\r\n        uint addedEth = msg.value;\r\n\r\n        strategies[_dfWallet].deposit += uint80(addedEth);\r\n\r\n        // mint cEther without borrowing\r\n        IDfWallet(_dfWallet).deposit.value(addedEth)(ETH_ADDRESS, CETH_ADDRESS, addedEth, address(0), address(0), 0);\r\n    }\r\n\r\n    // with GasToken usage\r\n    function collectAndCloseByUser(\r\n        address _dfWallet,\r\n        uint256 _ethForRedeem,\r\n        uint256 _minAmountUsd,\r\n        bool _onlyProfitInUsd,\r\n        bytes memory _exData\r\n    ) public payable\r\n        useGasToken\r\n    {\r\n        require(strategies[_dfWallet].owner == msg.sender);\r\n\r\n        _collectAndCloseHelper(\r\n            _dfWallet, _ethForRedeem, _minAmountUsd, _onlyProfitInUsd, _exData, true\r\n        );\r\n    }\r\n\r\n    // with GasToken usage\r\n    function exitAfterLiquidation(\r\n        address _dfWallet,\r\n        uint256 _ethForRedeem,\r\n        uint256 _minAmountUsd,\r\n        bytes memory _exData\r\n    ) public payable\r\n        useGasToken\r\n    {\r\n        Strategy memory strategy = strategies[_dfWallet];\r\n\r\n        // only strategy owner or onlyOwnerOrAdmin call\r\n        require(\r\n            msg.sender == strategy.owner ||\r\n            msg.sender == owner ||\r\n            admins[msg.sender]);\r\n\r\n        uint ethLocked = ICToken(CETH_ADDRESS).balanceOfUnderlying(_dfWallet);\r\n        uint ethInitial = mul(strategy.deposit, strategy.extraCoef) / 100;\r\n\r\n        require(ethLocked < ethInitial);\r\n\r\n        _collectAndCloseHelper(\r\n            _dfWallet, _ethForRedeem, _minAmountUsd, false, _exData, false\r\n        );\r\n    }\r\n\r\n    function cancelSign(address _dfWallet, uint _signNonce) public returns(bool) {\r\n        require(msg.sender == strategies[_dfWallet].owner);\r\n\r\n        signedNonces[_dfWallet][_signNonce] = true;\r\n        return true;\r\n    }\r\n\r\n    // ** ONLY_OWNER functions **\r\n\r\n    function setLoanPool(address _loanAddr) public onlyOwner {\r\n        require(_loanAddr != address(0));\r\n        loanPool = ILoanPool(_loanAddr);\r\n    }\r\n\r\n    // function setAdminPermission(address _admin, bool _status) public onlyOwner {\r\n    //     admins[_admin] = _status;\r\n    // }\r\n\r\n    function setAdminPermission(address[] memory _admins, bool _status) public onlyOwner {\r\n        for (uint i = 0; i < _admins.length; i++) {\r\n            admins[_admins[i]] = _status;\r\n        }\r\n    }\r\n\r\n    // function setSetupStrategyPermission(address _manager, bool _status) public onlyOwner {\r\n    //     strategyManagers[_manager] = _status;\r\n    // }\r\n\r\n    function setSetupStrategyPermission(address[] memory _managers, bool _status) public onlyOwner {\r\n        for (uint i = 0; i < _managers.length; i++) {\r\n            strategyManagers[_managers[i]] = _status;\r\n        }\r\n    }\r\n\r\n    function setAffProgram(address _aff) public onlyOwner {\r\n        aff = IAffiliateProgram(_aff);\r\n    }\r\n\r\n    function upgrade(address _upgradedAddress) public onlyOwner {\r\n        require(_upgradedAddress != address(0));\r\n        upgradedAddress = IDfFinanceClose(_upgradedAddress);\r\n    }\r\n\r\n    // ** INTERNAL VIEW functions **\r\n\r\n    function _getProfitEth(\r\n        address _dfWallet, uint256 _ethLocked, uint256 _ethForRedeem\r\n    ) internal view returns(uint256 profitEth) {\r\n        uint deposit = strategies[_dfWallet].deposit;  // in eth\r\n        uint fee = strategies[_dfWallet].fee; // in percent (from 0 to 100)\r\n        uint profitPercent = strategies[_dfWallet].profitPercent; // in percent (from 0 to 255)\r\n\r\n        // user additional profit in eth\r\n        profitEth = sub(sub(_ethLocked, deposit), _ethForRedeem) * sub(100, fee) / 100;\r\n\r\n        require(wdiv(profitEth, deposit) * 100 >= profitPercent * WAD);\r\n    }\r\n\r\n    function _getUsdToWithdraw(\r\n        address _dfWallet, uint256 _ethLocked, uint256 _ethForRedeem, uint256 _usdPrice\r\n    ) internal view returns(uint256 usdProfit, uint256 usdToWithdraw) {\r\n        uint deposit = strategies[_dfWallet].deposit;  // in eth\r\n        uint fee = strategies[_dfWallet].fee; // in percent (from 0 to 100)\r\n        uint profitPercent = strategies[_dfWallet].profitPercent; // in percent (from 0 to 255)\r\n        uint ethPrice = strategies[_dfWallet].entryEthPrice;\r\n\r\n        // user additional profit in eth\r\n        uint profitEth = sub(sub(_ethLocked, deposit), _ethForRedeem) * sub(100, fee) / 100;\r\n\r\n        usdToWithdraw = wdiv(add(deposit, profitEth), _usdPrice * 1e12) / 1e12;\r\n\r\n        uint usdOriginal = wmul(deposit, ethPrice) / 1e12;\r\n        require(usdOriginal > 0);\r\n\r\n        usdProfit = sub(usdToWithdraw, usdOriginal);\r\n\r\n        require(wdiv(usdProfit, usdOriginal) * 100 >= profitPercent * WAD);\r\n    }\r\n\r\n    function _takeFeeHelper(\r\n        Strategy memory _strategy,\r\n        uint256 _ethToWithdraw,\r\n        uint256 _minAmountUsd,\r\n        bool _onlyProfitInUsd\r\n    ) internal view returns(\r\n        uint256 ethToWithdraw, bool hasProfit, uint256 extraProfitEth\r\n    ) {\r\n        ethToWithdraw = _ethToWithdraw;\r\n\r\n        // is profitable\r\n        // ethToWithdraw = ethLocked - ethForReedem\r\n        if (ethToWithdraw > _strategy.deposit) {\r\n            extraProfitEth = sub(ethToWithdraw, _strategy.deposit);\r\n\r\n            if (_minAmountUsd > 0) {\r\n                if (_onlyProfitInUsd) {\r\n                    // VIA deposit in ETH and profit in USD\r\n                    hasProfit = (_minAmountUsd * 1e12 * 10000 / wmul(_strategy.deposit, _strategy.entryEthPrice)) >= uint(_strategy.profitPercent) * 100;\r\n                } else {\r\n                    // VIA USD\r\n                    hasProfit = (_minAmountUsd * 1e12 * 10000 / wmul(_strategy.deposit, _strategy.entryEthPrice)) >= (100 + uint(_strategy.profitPercent)) * 100;\r\n                }\r\n            } else {\r\n                // VIA ETH\r\n                hasProfit = ((extraProfitEth * sub(100, _strategy.fee) / 100) * 10000 / _strategy.deposit) >= uint(_strategy.profitPercent) * 100;\r\n            }\r\n        }\r\n\r\n        if (hasProfit) {\r\n            uint ethAfterFee = add(_strategy.deposit, extraProfitEth * sub(100, _strategy.fee) / 100);\r\n            require(ethToWithdraw >= ethAfterFee);\r\n\r\n            ethToWithdraw = ethAfterFee;\r\n        } else {\r\n            // if not profitable strategy - addition fee\r\n            if (now < dateUntilFees) {\r\n                ethToWithdraw = sub(ethToWithdraw, mul(ethToWithdraw, earlyCloseFee) / 100);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ** INTERNAL functions **\r\n\r\n    function _setupStrategy(\r\n        address _owner,\r\n        address _dfWallet,\r\n        uint256 _deposit,\r\n        uint256 _priceEth,\r\n        uint8 _profitPercent,\r\n        uint8 _fee,\r\n        uint256 _extraCoef\r\n    ) internal {\r\n        require(strategies[_dfWallet].owner == address(0));\r\n\r\n        uint extraCoef = _extraCoef;\r\n        if (extraCoef == 0 && _deposit > 0) {\r\n            uint ethLocked = ICToken(CETH_ADDRESS).balanceOfUnderlying(_dfWallet);\r\n            extraCoef = (ethLocked * 100) / _deposit;  // in percent (ex. 150 == 150%)\r\n        }\r\n\r\n        strategies[_dfWallet] = Strategy(\r\n            uint80(_deposit),\r\n            uint80(_priceEth),\r\n            _profitPercent,\r\n            _fee,\r\n            0,\r\n            0,\r\n            false,\r\n            _owner,\r\n            uint16(extraCoef)\r\n        );\r\n\r\n        emit SetupStrategy(_owner, _dfWallet, _deposit, _priceEth, _profitPercent, _fee);\r\n    }\r\n\r\n    function _increaseStrategyUsd(\r\n        address _dfWallet,\r\n        uint _coef,\r\n        uint _valueUsdc,\r\n        uint _entryEthPrice,\r\n        bytes memory _exData,\r\n        uint _ethType\r\n    ) internal {\r\n        Strategy memory strategy = strategies[_dfWallet];\r\n\r\n        require(strategy.owner != address(0) && strategy.ethForRedeem == 0);\r\n        require(_coef >= 150 && _coef <= 300, \"Invalid coefficient\");\r\n\r\n        // transfer valueUsdc USDC from strategy owner to this contract\r\n        IToken(USDC_ADDRESS).universalTransferFrom(strategy.owner, address(this), _valueUsdc);\r\n\r\n        uint extraUsdc = _valueUsdc * (_coef - 100) / 100;\r\n        uint totalUsdcForLoanEth = add(_valueUsdc, extraUsdc);\r\n\r\n        // take an eth loan\r\n        uint totalLoanEth = wdiv(totalUsdcForLoanEth * 1e12, _entryEthPrice);\r\n        loanPool.loan(totalLoanEth);\r\n\r\n        // deposit ETH and borrow USDC\r\n        _depositToDfWallet(_dfWallet, totalLoanEth, extraUsdc);\r\n\r\n        /**\r\n            exResult[2] - extra ToTokens after exchange – ETH\r\n            exResult[3] - extra FromTokens after exchange – USDC\r\n         */\r\n        uint[4] memory exResult = _exchange(\r\n            IToken(USDC_ADDRESS), totalUsdcForLoanEth,\r\n            _ethType == 0 ? IToken(WETH_ADDRESS) : IToken(ETH_ADDRESS), totalLoanEth,\r\n            _exData\r\n        );\r\n\r\n        if (_ethType == 0) {\r\n            IToken(WETH_ADDRESS).withdraw(IToken(WETH_ADDRESS).balanceOf(address(this)));\r\n        }\r\n\r\n        // deposited eth after increase\r\n        uint addedEth = wdiv(_valueUsdc * 1e12, _entryEthPrice);\r\n        uint depositAfter = add(strategy.deposit, addedEth);\r\n\r\n        // UPD Strategy states\r\n        strategies[_dfWallet].deposit = uint80(depositAfter);\r\n        strategies[_dfWallet].entryEthPrice = uint80(\r\n            wdiv(add(wmul(strategy.deposit, strategy.entryEthPrice), wmul(addedEth, _entryEthPrice)), depositAfter)\r\n        );\r\n        strategies[_dfWallet].extraCoef = uint16((ICToken(CETH_ADDRESS).balanceOfUnderlying(_dfWallet) * 100) / depositAfter);\r\n\r\n        // return an eth loan to LoanPool contract\r\n        _transferEth(address(loanPool), totalLoanEth);\r\n\r\n        // return short change to strategy owner (rest ETH and USDC)\r\n        _paybackExtraExchangeProfit(strategy.owner, exResult[2], exResult[3]);\r\n    }\r\n\r\n    function _collectUsdHelper(\r\n        address _dfWallet,\r\n        uint256 _amountUsdToBuy,\r\n        uint256 _usdPrice,\r\n        bool _onlyProfitInUsd\r\n    ) internal returns(\r\n        uint256 ethAfterClose\r\n    ) {\r\n        Strategy storage strategy = strategies[_dfWallet];\r\n        require(strategy.ethForRedeem == 0 && strategy.deposit > 0);\r\n\r\n        uint ethLocked = ICToken(CETH_ADDRESS).balanceOfUnderlying(_dfWallet);\r\n        uint ethForRedeem = wmul(ICToken(CUSDC_ADDRESS).borrowBalanceStored(_dfWallet), _usdPrice, 1e6) * 1e12;\r\n\r\n        uint usdToWithdraw = 0;\r\n        uint ethToWithdraw = 0;\r\n\r\n        if (_amountUsdToBuy > 0) { // in USD\r\n            uint usdProfit;\r\n            (usdProfit, usdToWithdraw) = _getUsdToWithdraw(_dfWallet, ethLocked, ethForRedeem, _usdPrice);\r\n\r\n            // return value\r\n            ethAfterClose = ethLocked;\r\n\r\n            // deposit in ETH and profit in USD\r\n            if (_onlyProfitInUsd) {\r\n                strategy.onlyProfitInUsd = _onlyProfitInUsd;  // set strategy value\r\n\r\n                ethToWithdraw = strategy.deposit;\r\n                usdToWithdraw = usdProfit;\r\n\r\n                // return value\r\n                ethAfterClose = sub(ethLocked, ethToWithdraw);\r\n            }\r\n\r\n            strategy.usdToWithdraw = uint64(usdToWithdraw);  // set strategy value\r\n        } else { // in ETH\r\n            uint profitEth = _getProfitEth(_dfWallet, ethLocked, ethForRedeem);\r\n            ethToWithdraw = add(strategy.deposit, profitEth);\r\n\r\n            // return value\r\n            ethAfterClose = ethForRedeem;\r\n        }\r\n\r\n        strategy.ethForRedeem = uint80(ethForRedeem);  // set strategy value\r\n\r\n        // call strategy owner's callback function (without revert if callback does not exist)\r\n        _callbackTo(\r\n            strategy.owner,                                                 // callback to address\r\n            false,                                                          // isStrategyClosed\r\n            (_amountUsdToBuy > 0) ? (_onlyProfitInUsd ? 3 : 2) : 1      // closingType\r\n        );\r\n\r\n        emit StrategyClosing(_dfWallet, ethToWithdraw, usdToWithdraw);\r\n    }\r\n\r\n    function _strategyCloseHelper(address _dfWallet) internal {\r\n        Strategy memory strategy = strategies[_dfWallet];\r\n\r\n        uint ethLocked = ICToken(CETH_ADDRESS).balanceOfUnderlying(_dfWallet);\r\n        // uint ethForRedeem = wmul(ICToken(CUSDC_ADDRESS).borrowBalanceStored(_dfWallet), _usdPrice, 1e6) * 1e12;\r\n\r\n        // TODO: check usdc balance and ceth transfer to dfWallet\r\n        IToken(USDC_ADDRESS).approve(_dfWallet, uint(-1));\r\n        IDfWallet(_dfWallet).withdraw(ETH_ADDRESS, CETH_ADDRESS, USDC_ADDRESS, CUSDC_ADDRESS);\r\n\r\n        // Calculate affiliate process partner profit\r\n        uint systemProfit = sub(sub(ethLocked, strategy.deposit), strategy.ethForRedeem) * strategy.fee / 100;\r\n        uint partnerProfit = _affiliateProcess(strategy.owner, systemProfit);\r\n\r\n        uint usdToWithdraw = strategy.usdToWithdraw;\r\n        uint ethToWithdraw = 0;\r\n\r\n        if (usdToWithdraw > 0) {\r\n            // transfer USDC to user\r\n            IToken(USDC_ADDRESS).universalTransfer(strategy.owner, usdToWithdraw);\r\n\r\n            // close: deposit in ETH + profit in usd\r\n            if (strategy.onlyProfitInUsd) {\r\n                ethToWithdraw = strategy.deposit;\r\n            }\r\n        } else {  // close in ETH\r\n            uint profitEth = _getProfitEth(_dfWallet, ethLocked, strategy.ethForRedeem);\r\n            ethToWithdraw = add(strategy.deposit, profitEth);\r\n        }\r\n\r\n        // transfer ETH to user\r\n        if (ethToWithdraw > 0) {\r\n            IToken(ETH_ADDRESS).universalTransfer(strategy.owner, ethToWithdraw);\r\n        }\r\n\r\n        // transfer loan and our profit to loanPool\r\n        uint loanAndProfit = sub(sub(ethLocked, ethToWithdraw), partnerProfit);\r\n        _transferEth(address(loanPool), loanAndProfit);\r\n\r\n        // call strategy owner's callback function (without revert if callback does not exist)\r\n        _callbackTo(\r\n            strategy.owner,                                                 // callback to address\r\n            true,                                                           // isStrategyClosed\r\n            (usdToWithdraw > 0) ? (strategy.onlyProfitInUsd ? 3 : 2) : 1    // closingType\r\n        );\r\n\r\n        // clear _dfWallet strategy struct\r\n        _clearStrategy(_dfWallet);\r\n\r\n        emit StrategyClosed(_dfWallet, ethToWithdraw, usdToWithdraw);\r\n    }\r\n\r\n    function _collectAndCloseHelper(\r\n        address _dfWallet,\r\n        uint256 _ethForRedeem,\r\n        uint256 _minAmountUsd,\r\n        bool _onlyProfitInUsd,\r\n        bytes memory _exData,\r\n        bool _withFee\r\n    ) internal returns(bool hasProfit, uint256 extraProfitEth) {\r\n        Strategy memory strategy = strategies[_dfWallet];\r\n        require(strategy.deposit > 0 && strategy.ethForRedeem == 0);\r\n\r\n        // ethToWithdraw = ethLocked - _ethForRedeem\r\n        uint ethToWithdraw = sub(ICToken(CETH_ADDRESS).balanceOfUnderlying(_dfWallet), _ethForRedeem);\r\n\r\n        // with fee logic\r\n        if (_withFee) {\r\n            (ethToWithdraw, hasProfit, extraProfitEth) = _takeFeeHelper(strategy, ethToWithdraw, _minAmountUsd, _onlyProfitInUsd);\r\n        }\r\n\r\n        uint ethForExchange = _ethForRedeem;\r\n\r\n        // if close not in eth\r\n        if (_minAmountUsd > 0) {\r\n            // VIA USD\r\n            ethForExchange = add(ethForExchange, ethToWithdraw);\r\n\r\n            if (_onlyProfitInUsd) {\r\n                // VIA deposit in ETH and profit in USD\r\n                ethForExchange = sub(ethForExchange, strategy.deposit);\r\n            }\r\n        }\r\n\r\n        // calculate and take an extra eth loan from LoanPool\r\n        uint loan = 0;\r\n        if (msg.value < ethForExchange) {\r\n            loan = sub(ethForExchange, msg.value);\r\n            loanPool.loan(loan);\r\n        }\r\n\r\n        /**\r\n            exResult[2] - extra ToTokens after exchange – USDC\r\n            exResult[3] - extra FromTokens after exchange – ETH\r\n         */\r\n        uint[4] memory exResult = _exchangeAndRedeemHelper(_dfWallet, ethForExchange, _minAmountUsd, _exData);\r\n\r\n        // affiliate pay to referrer\r\n        uint systemProfit = 0;\r\n        if (hasProfit) {\r\n            uint fee = mul(extraProfitEth, strategy.fee) / 100;\r\n            systemProfit = sub(fee, _affiliateProcess(strategy.owner, fee));\r\n        }\r\n\r\n        // return loan and system profit to LoanPool\r\n        if (add(loan, systemProfit) > 0) {\r\n            _transferEth(address(loanPool), add(loan, systemProfit));\r\n        }\r\n\r\n        if (_minAmountUsd > 0) {\r\n            if (_onlyProfitInUsd) {\r\n                // VIA deposit in ETH and profit in USD\r\n                ethToWithdraw = strategy.deposit;\r\n            } else {\r\n                // VIA USD\r\n                ethToWithdraw = 0;\r\n            }\r\n        }\r\n\r\n        /**\r\n            exResult[2] - extra ToTokens after exchange – USDC\r\n            exResult[3] - extra FromTokens after exchange – ETH\r\n         */\r\n        _withdrawProfit(\r\n            strategy.owner,\r\n            (ethToWithdraw + exResult[3]),\r\n            (_minAmountUsd + exResult[2])\r\n        );\r\n\r\n        // call strategy owner's callback function (without revert if callback does not exist)\r\n        _callbackTo(\r\n            strategy.owner,                                                 // callback to address\r\n            true,                                                           // isStrategyClosed\r\n            (_minAmountUsd > 0) ? (_onlyProfitInUsd ? 3 : 2) : 1        // closingType\r\n        );\r\n\r\n        // clear _dfWallet strategy struct\r\n        _clearStrategy(_dfWallet);\r\n\r\n        // return msg.value to msg.sender\r\n        if (msg.value > 0) {\r\n            address(msg.sender).transfer(msg.value);\r\n        }\r\n\r\n        // emit StrategyClosed(_dfWallet, ethToWithdraw, _minAmountUsd);\r\n\r\n        // with extra eth and usdc after exchange profit\r\n        emit StrategyClosed(_dfWallet, (ethToWithdraw + exResult[3]), (_minAmountUsd + exResult[2]));\r\n    }\r\n\r\n    function _exchangeAndRedeemHelper(\r\n        address _dfWallet,\r\n        uint256 _ethForExchange,\r\n        uint256 _minAmountUsd,\r\n        bytes memory _exData\r\n    ) internal returns(\r\n        uint[4] memory exResult\r\n        /**\r\n            [0] - received ToTokens\r\n            [1] - spent FromTokens\r\n            [2] - extra ToTokens after exchange\r\n            [3] - extra FromTokens after exchange\r\n         */\r\n    ) {\r\n        //  ETH => USDC - 1inch exchange\r\n        uint usdcForRedeem = ICToken(CUSDC_ADDRESS).borrowBalanceStored(_dfWallet);\r\n\r\n        exResult = _exchange(\r\n            IToken(ETH_ADDRESS), _ethForExchange,\r\n            IToken(USDC_ADDRESS), add(usdcForRedeem, _minAmountUsd),\r\n            _exData\r\n        );\r\n\r\n        // redeem usdc and unlock eth\r\n        IToken(USDC_ADDRESS).approve(_dfWallet, uint(-1));\r\n        IDfWallet(_dfWallet).withdraw(ETH_ADDRESS, CETH_ADDRESS, USDC_ADDRESS, CUSDC_ADDRESS);\r\n    }\r\n\r\n    function _withdrawProfit(\r\n        address _strategyOwner, uint256 _ethToWithdraw, uint256 _usdToWithdraw\r\n    ) internal {\r\n        // withdraw ETH to strategy owner\r\n        if (_ethToWithdraw > 0) {\r\n            IToken(ETH_ADDRESS).universalTransfer(_strategyOwner, _ethToWithdraw);\r\n        }\r\n\r\n        // withdraw USDC to strategy owner\r\n        if (_usdToWithdraw > 0) {\r\n            IToken(USDC_ADDRESS).universalTransfer(_strategyOwner, _usdToWithdraw);\r\n        }\r\n    }\r\n\r\n    function _transferEth(address receiver, uint256 amount) internal {\r\n        address payable receiverPayable = address(uint160(receiver));\r\n        (bool result, ) = receiverPayable.call.value(amount)(\"\");\r\n        require(result);\r\n    }\r\n\r\n    function _exchange(\r\n        IToken _fromToken, uint256 _maxFromTokenAmount,\r\n        IToken _toToken, uint256 _minToTokenAmount,\r\n        bytes memory _exData\r\n    ) internal returns(\r\n        uint[4] memory res\r\n        /**\r\n            [0] - received ToTokens\r\n            [1] - spent FromTokens\r\n            [2] - extra ToTokens after exchange\r\n            [3] - extra FromTokens after exchange\r\n         */\r\n    ) {\r\n        IOneInchExchange ex = IOneInchExchange(0x11111254369792b2Ca5d084aB5eEA397cA8fa48B);\r\n\r\n        // Approve tokens for 1inch\r\n        uint256 ethAmount = 0;\r\n        if (address(_fromToken) != ETH_ADDRESS) {\r\n            if (_fromToken.allowance(address(this), ex.spender()) != uint(-1)) {\r\n                _fromToken.approve(ex.spender(), uint(-1));\r\n            }\r\n        } else {\r\n            ethAmount = _maxFromTokenAmount;\r\n        }\r\n\r\n        uint fromTokenBalanceBefore = _fromToken.universalBalanceOf(address(this));\r\n        uint toTokenBalanceBefore = _toToken.universalBalanceOf(address(this));\r\n\r\n        bytes32 response;\r\n        assembly {\r\n            // call(g, a, v, in, insize, out, outsize)\r\n            let succeeded := call(sub(gas, 5000), ex, ethAmount, add(_exData, 0x20), mload(_exData), 0, 32)\r\n            response := mload(0)      // load delegatecall output\r\n            //switch iszero(succeeded)\r\n            //case 1 {\r\n            //    // throw if call failed\r\n            //    revert(0, 0)\r\n            //}\r\n        }\r\n\r\n        res[0] = sub(_toToken.universalBalanceOf(address(this)), toTokenBalanceBefore);         //  received ToTokens\r\n        res[1] = sub(fromTokenBalanceBefore, _fromToken.universalBalanceOf(address(this)));     // spent FromTokens\r\n        res[2] = sub(res[0], _minToTokenAmount);    //  extra ToTokens\r\n        res[3] = sub(_maxFromTokenAmount, res[1]);  // extra FromTokens\r\n    }\r\n\r\n    function _clearStrategy(address _dfWallet) internal {\r\n        strategies[_dfWallet] = Strategy(0, 0, 0, 0, 0, 0, false, address(0), 0);\r\n    }\r\n\r\n    function _affiliateProcess(address _strategyOwner, uint256 _systemProfit) internal returns(uint256 affPayment) {\r\n        if (aff != IAffiliateProgram(0)) {\r\n            affPayment = _systemProfit * aff.getProfitPercentByReferral(_strategyOwner) / 100;\r\n            require(affPayment < _systemProfit);\r\n\r\n            // tranfer eth to AffiliateProgram contract\r\n            aff.distributeProfitByReferral.value(affPayment)(_strategyOwner);\r\n\r\n            emit SystemProfit(sub(_systemProfit, affPayment));\r\n        } else {\r\n            emit SystemProfit(_systemProfit);\r\n        }\r\n    }\r\n\r\n    function _depositToDfWallet(\r\n        address _dfWallet,\r\n        uint256 ethToDeposit,\r\n        uint256 usdcForExtract\r\n    ) internal {\r\n\r\n        // mint cEther and borrow USDC\r\n        IDfWallet(_dfWallet).deposit.value(ethToDeposit)(\r\n            ETH_ADDRESS, CETH_ADDRESS, ethToDeposit, USDC_ADDRESS, CUSDC_ADDRESS, usdcForExtract\r\n        );\r\n\r\n        // Needs more 15 percent in collateral\r\n        uint maxBorrowUsdc = getMaxBorrow(CUSDC_ADDRESS, _dfWallet);\r\n        require(maxBorrowUsdc > 0 && (maxBorrowUsdc * 100 / (maxBorrowUsdc + usdcForExtract) >= 15));\r\n    }\r\n\r\n    function _paybackExtraExchangeProfit(\r\n        address _userAddr,\r\n        uint256 _extraEth,\r\n        uint256 _extraUsd\r\n    ) internal {\r\n\r\n        uint ethForPayback = _extraEth;\r\n        uint usdForPayback = _extraUsd;\r\n\r\n        // transfer more than need gas for transfer\r\n        if (ethForPayback > tx.gasprice * 21000 * 2) {\r\n            IToken(ETH_ADDRESS).universalTransfer(_userAddr, ethForPayback);\r\n        } else {\r\n            ethForPayback = 0;\r\n        }\r\n\r\n        // transfer more than 0.5 USDC\r\n        if (usdForPayback > 0.5e6) {\r\n            IToken(USDC_ADDRESS).universalTransfer(_userAddr, usdForPayback);\r\n        } else {\r\n            usdForPayback = 0;\r\n        }\r\n\r\n        // Refund ETH and USDC to user Log\r\n        emit AfterExchangeRefund(_userAddr, ethForPayback, usdForPayback);\r\n    }\r\n\r\n    function _distributeExtraExchangeProfit(\r\n        address[] memory _dfWallets,\r\n        uint256 _extraEth,\r\n        uint256 _extraUsd\r\n    ) internal {\r\n\r\n        // deposits of strategies\r\n        uint[] memory deposits = new uint[](_dfWallets.length);\r\n\r\n        uint totalDeposit = 0;  //  total deposit of these strategies\r\n\r\n        // deposits of strategies and totalDeposit calculate\r\n        for (uint i = 0; i < _dfWallets.length; i++) {\r\n            deposits[i] = strategies[_dfWallets[i]].deposit;\r\n            totalDeposit += deposits[i];\r\n        }\r\n\r\n        // add extra ETH and USDC to strategies profit\r\n        for (uint i = 0; i < _dfWallets.length; i++) {\r\n            uint strategyShare = wdiv(deposits[i], totalDeposit);\r\n\r\n            if (_extraEth > 0) {\r\n                uint ethForStrategy = wmul(strategyShare, _extraEth);\r\n                if (strategies[_dfWallets[i]].ethForRedeem > ethForStrategy) {\r\n                    strategies[_dfWallets[i]].ethForRedeem -= uint80(ethForStrategy);\r\n                }\r\n            }\r\n\r\n            if (_extraUsd > 0) {\r\n                uint usdForStrategy = wmul(strategyShare, _extraUsd);\r\n                strategies[_dfWallets[i]].usdToWithdraw += uint64(usdForStrategy);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _callbackTo(\r\n        address _to,\r\n        bool _isStrategyClosed,\r\n        uint _closingType\r\n    ) internal {\r\n        bytes memory data = abi.encodeWithSelector(IDfStrategyCallback(_to).__callback.selector, _isStrategyClosed, _closingType);\r\n\r\n        // call without revert if function does not exist\r\n        (bool success, bytes memory returndata) = address(_to).call(data);\r\n\r\n        // verify that the callback function returns true\r\n        if (success && returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)));\r\n        }\r\n    }\r\n\r\n    // ** FALLBACK functions **\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethToRefund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdToRefund\",\"type\":\"uint256\"}],\"name\":\"AfterExchangeRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"profitPercent\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"SetupStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethToWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdToWithdraw\",\"type\":\"uint256\"}],\"name\":\"StrategyClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethToWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdToWithdraw\",\"type\":\"uint256\"}],\"name\":\"StrategyClosing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"}],\"name\":\"StrategyMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"SystemProfit\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CUSDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP712_DOMAIN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aff\",\"outputs\":[{\"internalType\":\"contract IAffiliateProgram\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_signNonce\",\"type\":\"uint256\"}],\"name\":\"cancelSign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dfWallets\",\"type\":\"address[]\"}],\"name\":\"closeStrategies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dfWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountUsdToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountUsdToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onlyProfitInUsd\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_useExchange\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_exData\",\"type\":\"bytes\"}],\"name\":\"collectAndClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethForRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountUsd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onlyProfitInUsd\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_exData\",\"type\":\"bytes\"}],\"name\":\"collectAndCloseByUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dfWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountUsdToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountUsdToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onlyProfitInUsd\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_useExchange\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_exData\",\"type\":\"bytes\"}],\"name\":\"collectUsdForStrategies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateUntilFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"}],\"name\":\"depositEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyCloseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethForRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountUsd\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_exData\",\"type\":\"bytes\"}],\"name\":\"exitAfterLiquidation\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cBorrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"}],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraCoef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryEthPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethForRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onlyProfitInUsd\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256[8]\",\"name\":\"_params\",\"type\":\"uint256[8]\"},{\"internalType\":\"bytes\",\"name\":\"_exData\",\"type\":\"bytes\"}],\"name\":\"increaseStrategyUsdWithSign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256[7]\",\"name\":\"_params\",\"type\":\"uint256[7]\"}],\"name\":\"isUsdIncreaseVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanPool\",\"outputs\":[{\"internalType\":\"contract ILoanPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dfWallets\",\"type\":\"address[]\"}],\"name\":\"migrateStrategies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdminPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aff\",\"type\":\"address\"}],\"name\":\"setAffProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanAddr\",\"type\":\"address\"}],\"name\":\"setLoanPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setSetupStrategyPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"}],\"name\":\"setupStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceEth\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"}],\"name\":\"setupStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceEth\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_extraCoef\",\"type\":\"uint256\"}],\"name\":\"setupStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"deposit\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"entryEthPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint8\",\"name\":\"profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint80\",\"name\":\"ethForRedeem\",\"type\":\"uint80\"},{\"internalType\":\"uint64\",\"name\":\"usdToWithdraw\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"onlyProfitInUsd\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"extraCoef\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"internalType\":\"contract IDfFinanceClose\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DfFinanceCloseCompound","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2a064888cd969cbb048ba1e1ee6cc3ebc34a68a3e9688e70900ecfa64a05f062"}]}