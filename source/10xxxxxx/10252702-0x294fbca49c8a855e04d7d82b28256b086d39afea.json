{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Config.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Config {\r\n    // function signature of \"postProcess()\"\r\n    bytes4 constant POSTPROCESS_SIG = 0xc2722916;\r\n\r\n    // Handler post-process type. Others should not happen now.\r\n    enum HandlerType {Token, Custom, Others}\r\n}\r\n\r\n// File: localhost/contracts/lib/LibCache.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\nlibrary LibCache {\r\n    function setAddress(bytes32[] storage _cache, address _input) internal {\r\n        _cache.push(bytes32(uint256(uint160(_input))));\r\n    }\r\n\r\n    function set(bytes32[] storage _cache, bytes32 _input) internal {\r\n        _cache.push(_input);\r\n    }\r\n\r\n    function setHandlerType(bytes32[] storage _cache, uint256 _input) internal {\r\n        require(_input < uint96(-1), \"Invalid Handler Type\");\r\n        _cache.push(bytes12(uint96(_input)));\r\n    }\r\n\r\n    function setSender(bytes32[] storage _cache, address _input) internal {\r\n        require(_cache.length == 0, \"cache not empty\");\r\n        setAddress(_cache, _input);\r\n    }\r\n\r\n    function getAddress(bytes32[] storage _cache)\r\n        internal\r\n        returns (address ret)\r\n    {\r\n        ret = address(uint160(uint256(peek(_cache))));\r\n        _cache.pop();\r\n    }\r\n\r\n    function getSig(bytes32[] storage _cache) internal returns (bytes4 ret) {\r\n        ret = bytes4(peek(_cache));\r\n        _cache.pop();\r\n    }\r\n\r\n    function get(bytes32[] storage _cache) internal returns (bytes32 ret) {\r\n        ret = peek(_cache);\r\n        _cache.pop();\r\n    }\r\n\r\n    function peek(bytes32[] storage _cache)\r\n        internal\r\n        view\r\n        returns (bytes32 ret)\r\n    {\r\n        require(_cache.length > 0, \"cache empty\");\r\n        ret = _cache[_cache.length - 1];\r\n    }\r\n\r\n    function getSender(bytes32[] storage _cache)\r\n        internal\r\n        returns (address ret)\r\n    {\r\n        require(_cache.length > 0, \"cache empty\");\r\n        ret = address(uint160(uint256(_cache[0])));\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Cache.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/// @notice A cache structure composed by a bytes32 array\r\ncontract Cache {\r\n    using LibCache for bytes32[];\r\n\r\n    bytes32[] cache;\r\n\r\n    modifier isCacheEmpty() {\r\n        require(cache.length == 0, \"Cache not empty\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/handlers/HandlerBase.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract HandlerBase is Cache, Config {\r\n    function postProcess() external payable {\r\n        revert(\"Invalid post process\");\r\n        /* Implementation template\r\n        bytes4 sig = cache.getSig();\r\n        if (sig == bytes4(keccak256(bytes(\"handlerFunction_1()\")))) {\r\n            // Do something\r\n        } else if (sig == bytes4(keccak256(bytes(\"handlerFunction_2()\")))) {\r\n            bytes32 temp = cache.get();\r\n            // Do something\r\n        } else revert(\"Invalid post process\");\r\n        */\r\n    }\r\n\r\n    function _updateToken(address token) internal {\r\n        cache.setAddress(token);\r\n        // Ignore token type to fit old handlers\r\n        // cache.setHandlerType(uint256(HandlerType.Token));\r\n    }\r\n\r\n    function _updatePostProcess(bytes32[] memory params) internal {\r\n        for (uint256 i = params.length; i > 0; i--) {\r\n            cache.set(params[i - 1]);\r\n        }\r\n        cache.set(msg.sig);\r\n        cache.setHandlerType(uint256(HandlerType.Custom));\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/handlers/maker/IMaker.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IMakerManager {\r\n    function cdpCan(address, uint, address) external view returns (uint);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n    function open(bytes32, address) external returns (uint);\r\n    function give(uint, address) external;\r\n    function cdpAllow(uint, address, uint) external;\r\n    function urnAllow(address, uint) external;\r\n    function frob(uint, int, int) external;\r\n    function flux(uint, address, uint) external;\r\n    function move(uint, address, uint) external;\r\n    function exit(address, uint, address, uint) external;\r\n    function quit(uint, address) external;\r\n    function enter(address, uint) external;\r\n    function shift(uint, uint) external;\r\n\r\n    function count(address) external view returns (uint256);\r\n    function first(address) external view returns (uint256);\r\n    function last(address) external view returns (uint256);\r\n}\r\n\r\ninterface IMakerVat {\r\n    function can(address, address) external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function frob(bytes32, address, address, address, int, int) external;\r\n    function hope(address) external;\r\n    function move(address, address, uint) external;\r\n}\r\n\r\ninterface IMakerGemJoin {\r\n    function dec() external returns (uint);\r\n    function gem() external returns (address);\r\n    function join(address, uint) external payable;\r\n    function exit(address, uint) external;\r\n}\r\n\r\n// File: localhost/contracts/handlers/maker/IDSProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IDSProxy {\r\n    function execute(address _target, bytes calldata _data) external payable returns (bytes32 response);\r\n}\r\n\r\ninterface IDSProxyFactory {\r\n    function isProxy(address proxy) external view returns (bool);\r\n    function build() external returns (address);\r\n    function build(address owner) external returns (address);\r\n}\r\n\r\ninterface IDSProxyRegistry {\r\n    function proxies(address input) external returns (address);\r\n    function build() external returns (address);\r\n    function build(address owner) external returns (address);\r\n}\r\n\r\n// File: localhost/contracts/handlers/maker/HMaker.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HMaker is HandlerBase {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\r\n    address constant CDP_MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address constant PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\r\n    address constant MCD_JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant DAI_TOKEN = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    modifier cdpAllowed(uint256 cdp) {\r\n        IMakerManager manager = IMakerManager(CDP_MANAGER);\r\n        address owner = manager.owns(cdp);\r\n        address sender = cache.getSender();\r\n        require(\r\n            IDSProxyRegistry(PROXY_REGISTRY).proxies(sender) == owner ||\r\n                manager.cdpCan(owner, cdp, sender) == 1,\r\n            \"Unauthorized sender of cdp\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function openLockETHAndDraw(\r\n        uint256 value,\r\n        address ethJoin,\r\n        address daiJoin,\r\n        bytes32 ilk,\r\n        uint256 wadD\r\n    ) external payable returns (uint256 cdp) {\r\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\r\n        cdp = uint256(\r\n            proxy.execute.value(value)(\r\n                PROXY_ACTIONS,\r\n                abi.encodeWithSelector(\r\n                    // selector of \"openLockETHAndDraw(address,address,address,address,bytes32,uint256)\"\r\n                    0xe685cc04,\r\n                    CDP_MANAGER,\r\n                    MCD_JUG,\r\n                    ethJoin,\r\n                    daiJoin,\r\n                    ilk,\r\n                    wadD\r\n                )\r\n            )\r\n        );\r\n\r\n        // Update post process\r\n        bytes32[] memory params = new bytes32[](1);\r\n        params[0] = bytes32(cdp);\r\n        _updatePostProcess(params);\r\n    }\r\n\r\n    function openLockGemAndDraw(\r\n        address gemJoin,\r\n        address daiJoin,\r\n        bytes32 ilk,\r\n        uint256 wadC,\r\n        uint256 wadD\r\n    ) external payable returns (uint256 cdp) {\r\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\r\n        address token = IMakerGemJoin(gemJoin).gem();\r\n        IERC20(token).safeApprove(address(proxy), wadC);\r\n        cdp = uint256(\r\n            proxy.execute(\r\n                PROXY_ACTIONS,\r\n                abi.encodeWithSelector(\r\n                    // selector of \"openLockGemAndDraw(address,address,address,address,bytes32,uint256,uint256,bool)\"\r\n                    0xdb802a32,\r\n                    CDP_MANAGER,\r\n                    MCD_JUG,\r\n                    gemJoin,\r\n                    daiJoin,\r\n                    ilk,\r\n                    wadC,\r\n                    wadD,\r\n                    true\r\n                )\r\n            )\r\n        );\r\n        IERC20(token).safeApprove(address(proxy), 0);\r\n\r\n        // Update post process\r\n        bytes32[] memory params = new bytes32[](1);\r\n        params[0] = bytes32(cdp);\r\n        _updatePostProcess(params);\r\n    }\r\n\r\n    function safeLockETH(\r\n        uint256 value,\r\n        address ethJoin,\r\n        uint256 cdp\r\n    ) external payable {\r\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\r\n        address owner = _getProxy(cache.getSender());\r\n        proxy.execute.value(value)(\r\n            PROXY_ACTIONS,\r\n            abi.encodeWithSelector(\r\n                // selector of \"safeLockETH(address,address,uint256,address)\"\r\n                0xee284576,\r\n                CDP_MANAGER,\r\n                ethJoin,\r\n                cdp,\r\n                owner\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeLockGem(\r\n        address gemJoin,\r\n        uint256 cdp,\r\n        uint256 wad\r\n    ) external payable {\r\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\r\n        address owner = _getProxy(cache.getSender());\r\n        address token = IMakerGemJoin(gemJoin).gem();\r\n        IERC20(token).safeApprove(address(proxy), wad);\r\n        proxy.execute(\r\n            PROXY_ACTIONS,\r\n            abi.encodeWithSelector(\r\n                // selector of \"safeLockGem(address,address,uint256,uint256,bool,address)\"\r\n                0xead64729,\r\n                CDP_MANAGER,\r\n                gemJoin,\r\n                cdp,\r\n                wad,\r\n                true,\r\n                owner\r\n            )\r\n        );\r\n        IERC20(token).safeApprove(address(proxy), 0);\r\n    }\r\n\r\n    function freeETH(\r\n        address ethJoin,\r\n        uint256 cdp,\r\n        uint256 wad\r\n    ) external payable cdpAllowed(cdp) {\r\n        // Check msg.sender authority\r\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\r\n        proxy.execute(\r\n            PROXY_ACTIONS,\r\n            abi.encodeWithSelector(\r\n                // selector of \"freeETH(address,address,uint256,uint256)\"\r\n                0x7b5a3b43,\r\n                CDP_MANAGER,\r\n                ethJoin,\r\n                cdp,\r\n                wad\r\n            )\r\n        );\r\n    }\r\n\r\n    function freeGem(\r\n        address gemJoin,\r\n        uint256 cdp,\r\n        uint256 wad\r\n    ) external payable cdpAllowed(cdp) {\r\n        // Check msg.sender authority\r\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\r\n        address token = IMakerGemJoin(gemJoin).gem();\r\n        proxy.execute(\r\n            PROXY_ACTIONS,\r\n            abi.encodeWithSelector(\r\n                // selector of \"freeGem(address,address,uint256,uint256)\"\r\n                0x6ab6a491,\r\n                CDP_MANAGER,\r\n                gemJoin,\r\n                cdp,\r\n                wad\r\n            )\r\n        );\r\n\r\n        // Update post process\r\n        _updateToken(token);\r\n    }\r\n\r\n    function draw(\r\n        address daiJoin,\r\n        uint256 cdp,\r\n        uint256 wad\r\n    ) external payable cdpAllowed(cdp) {\r\n        // Check msg.sender authority\r\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\r\n        proxy.execute(\r\n            PROXY_ACTIONS,\r\n            abi.encodeWithSelector(\r\n                // selector of \"draw(address,address,address,uint256,uint256)\"\r\n                0x9f6f3d5b,\r\n                CDP_MANAGER,\r\n                MCD_JUG,\r\n                daiJoin,\r\n                cdp,\r\n                wad\r\n            )\r\n        );\r\n\r\n        // Update post process\r\n        _updateToken(DAI_TOKEN);\r\n    }\r\n\r\n    function wipe(\r\n        address daiJoin,\r\n        uint256 cdp,\r\n        uint256 wad\r\n    ) external payable {\r\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\r\n        IERC20(DAI_TOKEN).safeApprove(address(proxy), wad);\r\n        proxy.execute(\r\n            PROXY_ACTIONS,\r\n            abi.encodeWithSelector(\r\n                // selector of \"wipe(address,address,uint256,uint256)\"\r\n                0x4b666199,\r\n                CDP_MANAGER,\r\n                daiJoin,\r\n                cdp,\r\n                wad\r\n            )\r\n        );\r\n        IERC20(DAI_TOKEN).safeApprove(address(proxy), 0);\r\n    }\r\n\r\n    function wipeAll(address daiJoin, uint256 cdp) external payable {\r\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\r\n        IERC20(DAI_TOKEN).safeApprove(address(proxy), uint256(-1));\r\n        proxy.execute(\r\n            PROXY_ACTIONS,\r\n            abi.encodeWithSelector(\r\n                // selector of \"wipeAll(address,address,uint256)\"\r\n                0x036a2395,\r\n                CDP_MANAGER,\r\n                daiJoin,\r\n                cdp\r\n            )\r\n        );\r\n        IERC20(DAI_TOKEN).safeApprove(address(proxy), 0);\r\n    }\r\n\r\n    function postProcess() external payable {\r\n        bytes4 sig = cache.getSig();\r\n        // selector of openLockETHAndDraw(uint256,address,address,bytes32,uint256)\r\n        // and openLockGemAndDraw(address,address,bytes32,uint256,uint256)\r\n        if (sig == 0x5481e4a4 || sig == 0x73af24e7) {\r\n            _transferCdp(uint256(cache.get()));\r\n            uint256 amount = IERC20(DAI_TOKEN).balanceOf(address(this));\r\n            if (amount > 0)\r\n                IERC20(DAI_TOKEN).safeTransfer(cache.getSender(), amount);\r\n        } else revert(\"Invalid post process\");\r\n    }\r\n\r\n    function _getProxy(address user) internal returns (address) {\r\n        return IDSProxyRegistry(PROXY_REGISTRY).proxies(user);\r\n    }\r\n\r\n    function _transferCdp(uint256 cdp) internal {\r\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\r\n        proxy.execute(\r\n            PROXY_ACTIONS,\r\n            abi.encodeWithSelector(\r\n                // selector of \"giveToProxy(address,address,uint256,address)\"\r\n                0x493c2049,\r\n                PROXY_REGISTRY,\r\n                CDP_MANAGER,\r\n                cdp,\r\n                cache.getSender()\r\n            )\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"freeETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"freeGem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"openLockETHAndDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"openLockGemAndDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"safeLockETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"safeLockGem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"wipeAll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"HMaker","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d88e03fdc7dd16c7a8ae25ae45bdbb91cd8029009fcc220eb7a432bf7181a338"}]}