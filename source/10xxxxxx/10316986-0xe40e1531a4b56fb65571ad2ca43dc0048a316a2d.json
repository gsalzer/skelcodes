{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n\r\n/**\r\n * EthPrime - ethprime.io\r\n * \r\n * A defi dapp ecosystem which simplifies and automates the process of playing eth dapps/games by bundling them into a \"portfolio/fund\"\r\n * \r\n */\r\n\r\n\r\ncontract EthPrime {\r\n    \r\n    LoyaltyScheme loyalty = LoyaltyScheme(0x0);\r\n    UniswapPriceGuard uniswapPriceGuard = UniswapPriceGuard(0x0);\r\n\r\n    Subscription[] public activeSubscriptions;\r\n    mapping(address => bool) public subscriptionLoanable;\r\n    \r\n    mapping(address => address payable[]) public userSubscriptionsList;\r\n    mapping(address => mapping(address => bool)) public userSubscriptions;\r\n    mapping(address => Streak) public reinvestStreaks;\r\n    mapping(address => Approval) public pendingDapps;\r\n    mapping(address => uint256) public ethLoaned;\r\n    \r\n    FundPaymentHandler paymentHandler = FundPaymentHandler(0x4f50cAAEA490A5B939ad291d0567093E89649872);\r\n    \r\n    uint256 totalWeighting = 0; // Updates every time subscription is added/removed\r\n    address payable owner = msg.sender;\r\n    \r\n    uint256 fundFee = 10; // 1% on launch, reducing over time\r\n    uint256 loansFee = 50; // 5% (of earnt divs)\r\n    uint256 public newDappDelay;\r\n    \r\n    uint256 platformFees;\r\n    uint256 loanDivs;\r\n    \r\n    struct Subscription {\r\n        address payable dapp;\r\n        uint128 weighting;\r\n        bool requiresFunds;\r\n    }\r\n    \r\n    struct Approval {\r\n        address payable dapp;\r\n        uint128 weighting;\r\n        uint128 delayTimestamp;\r\n        bool requiresFunds;\r\n        bool loanable;\r\n    }\r\n    \r\n    struct Streak {\r\n        uint128 currentStreak;\r\n        uint128 lastReinvestWeek;\r\n    }\r\n    \r\n    event Deposit(address player, address ref, uint256 tron);\r\n    event Cashout(address player, address ref, uint256 tron);\r\n    event Reinvest(address player, address ref, uint256 tron);\r\n    event Withdraw(address player, uint256 tron);\r\n    event Borrow(address player, uint256 tron);\r\n    event Payback(address player, uint256 tron);\r\n    \r\n    function() external payable { }\r\n    \r\n    function reduceFundFee(uint256 newFundFee) external {\r\n        require(msg.sender == owner);\r\n        require(newFundFee < fundFee);\r\n        fundFee = newFundFee;\r\n    }\r\n    \r\n    function withdrawPlatformFees(uint256 amount) external {\r\n        require(msg.sender == owner);\r\n        require(amount <= platformFees);\r\n        platformFees -= amount;\r\n        owner.transfer(amount);\r\n    }\r\n    \r\n    function withdrawLoanDivs(uint256 amount) external {\r\n        require(msg.sender == owner);\r\n        require(amount <= loanDivs);\r\n        loanDivs -= amount;\r\n        owner.transfer(amount);\r\n    }\r\n    \r\n    function updateDappDelay(uint256 newDelay) external {\r\n        require(msg.sender == owner);\r\n        require(newDelay >= 3 days);\r\n        newDappDelay = newDelay;\r\n    }\r\n    \r\n    function updateLoansFee(uint256 newLoansFee) external {\r\n        require(msg.sender == owner);\r\n        require(newLoansFee <= 200); // 20%\r\n        loansFee = newLoansFee;\r\n    }\r\n    \r\n    function updateLoyaltyContract(address loyaltyAddress) external {\r\n        require(msg.sender == owner);\r\n        loyalty = LoyaltyScheme(loyaltyAddress);\r\n    }\r\n    \r\n    function updateUniswapPriceGuard(address guardAddress) external {\r\n        require(msg.sender == owner);\r\n        uniswapPriceGuard = UniswapPriceGuard(guardAddress);\r\n    }\r\n    \r\n    function updateLoanable(address dapp, bool loanable) external {\r\n        require(msg.sender == owner);\r\n        subscriptionLoanable[dapp] = loanable;\r\n    }\r\n    \r\n    function addSubscription(address dappAddress, uint128 dappWeighting, bool requiresFunds, bool loanable) external {\r\n        require(msg.sender == owner); \r\n        require(dappWeighting > 0);\r\n        require(dappWeighting < 1000);\r\n        \r\n        // If existing then update subscription weighting\r\n        for (uint256 i = 0; i < activeSubscriptions.length; i++) {\r\n            Subscription storage existing = activeSubscriptions[i];\r\n            if (existing.dapp == dappAddress) {\r\n                if (dappWeighting > existing.weighting) {\r\n                    totalWeighting += (dappWeighting - existing.weighting);\r\n                } else if (dappWeighting < existing.weighting) {\r\n                    totalWeighting -= (existing.weighting - dappWeighting);\r\n                }\r\n                existing.weighting = dappWeighting;\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Otherwise add new subscription after newDappDelay\r\n        pendingDapps[dappAddress] = Approval(address(uint160(dappAddress)), dappWeighting, uint128(now + newDappDelay), requiresFunds, loanable);\r\n    }\r\n    \r\n    function addPendingSubscription(address dappAddress) external {\r\n        require(msg.sender == owner);\r\n        Approval memory approval = pendingDapps[dappAddress];\r\n        require(now > approval.delayTimestamp);\r\n        activeSubscriptions.push(Subscription(approval.dapp, approval.weighting, approval.requiresFunds));\r\n        subscriptionLoanable[approval.dapp] = approval.loanable;\r\n        totalWeighting += approval.weighting;\r\n        delete pendingDapps[dappAddress];\r\n    }\r\n    \r\n    function removeSubscription(address dappAddress) external {\r\n        require(msg.sender == owner);\r\n        \r\n        for (uint256 i = 0; i < activeSubscriptions.length; i++) {\r\n            Subscription memory existing = activeSubscriptions[i];\r\n            if (existing.dapp == dappAddress) {\r\n                totalWeighting -= existing.weighting;\r\n                \r\n                // Remove subscription (and shift all subscriptions left one position) \r\n                uint256 length = activeSubscriptions.length - 1;\r\n                for (uint j = i; j < length; j++){\r\n                    activeSubscriptions[j] = activeSubscriptions[j+1]; \r\n                }\r\n                activeSubscriptions.length--;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function deposit(address referrer, address[] calldata pathPairs, uint256[] calldata minOuts) external payable {\r\n        require(msg.value > 0.199 ether);\r\n        require(uniswapPriceGuard.overPriceFloorValue(pathPairs, minOuts));\r\n        depositInternal(msg.value, msg.sender, referrer, false);\r\n        emit Deposit(msg.sender, referrer, msg.value);\r\n    }\r\n    \r\n    function depositFor(address player, address referrer, address[] calldata pathPairs, uint256[] calldata minOuts) external payable {\r\n        require(msg.value > 0.199 ether);\r\n        require(uniswapPriceGuard.overPriceFloorValue(pathPairs, minOuts));\r\n        depositInternal(msg.value, player, referrer, false);\r\n        emit Deposit(player, referrer, msg.value);\r\n    }\r\n    \r\n    function depositInternal(uint256 ethDeposit, address player, address referrer, bool alreadyClaimedDivs) internal {\r\n        if (now < 1592866800) {\r\n            player = owner; // Before launch time no-one can deposit\r\n        } else if (now < 1592867100) {\r\n            require(ethDeposit <= 50 ether && tx.gasprice <= 0.1 szabo); // For first 5 mins max buy is 50 eth & 100 gwei\r\n        }\r\n        \r\n        if (fundFee > 0) {\r\n            uint256 fee = (ethDeposit * fundFee) / 1000;\r\n            ethDeposit -= fee;\r\n            platformFees += fee;\r\n        }\r\n        \r\n        uint256 subscriptions = activeSubscriptions.length;\r\n        uint256 remainingWeighting = totalWeighting;\r\n        for (uint256 i = 0; i < subscriptions; i++) {\r\n            if (remainingWeighting == 0) {\r\n                break;\r\n            }\r\n            \r\n            Subscription memory subscription = activeSubscriptions[i];\r\n            SubscriptionDapp dapp = SubscriptionDapp(subscription.dapp);\r\n            uint256 maxDeposit = (ethDeposit * subscription.weighting) / remainingWeighting;\r\n            \r\n            uint256 deposited;\r\n            if (subscription.requiresFunds) {\r\n                deposited = maxDeposit;\r\n            }\r\n            (bool success, bytes memory returnData) = address(dapp).call.value(deposited)(abi.encodePacked(dapp.deposit.selector, abi.encode(player, maxDeposit, referrer, alreadyClaimedDivs)));\r\n            \r\n            if (success) {\r\n                deposited = abi.decode(returnData, (uint256));\r\n            }\r\n            \r\n            require(deposited <= maxDeposit);\r\n            if (deposited > 0) {\r\n                ethDeposit -= deposited;\r\n                if (!userSubscriptions[player][subscription.dapp]) {\r\n                    userSubscriptions[player][subscription.dapp] = true;\r\n                    userSubscriptionsList[player].push(subscription.dapp);\r\n                }\r\n            }\r\n            remainingWeighting -= subscription.weighting;\r\n        }\r\n    }\r\n    \r\n    function cashout(address referrer, uint256 percent, address[] calldata pathPairs, uint256[] calldata minOuts) external {\r\n        require(percent > 0 && percent < 101);\r\n        require(uniswapPriceGuard.overPriceFloorValue(pathPairs, minOuts));\r\n        require(ethLoaned[msg.sender] == 0);\r\n        \r\n        uint256 ethGained;\r\n        uint256 length = userSubscriptionsList[msg.sender].length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            SubscriptionDapp dapp = SubscriptionDapp(userSubscriptionsList[msg.sender][i]);\r\n            (bool success, bytes memory returnData) = address(dapp).call(abi.encodePacked(dapp.cashout.selector, abi.encode(msg.sender, referrer, percent)));\r\n            if (success) {\r\n                ethGained += abi.decode(returnData, (uint256));\r\n            }\r\n            \r\n        }\r\n        paymentHandler.cashout.value(ethGained)(msg.sender);\r\n        reinvestStreaks[msg.sender] = Streak(0, weeksSinceEpoch());\r\n        \r\n        emit Cashout(msg.sender, referrer, ethGained);\r\n    }\r\n    \r\n    function claimDivs() public {\r\n        uint256 ethGained = claimDivsInternal(msg.sender);\r\n        paymentHandler.cashout.value(ethGained)(msg.sender);\r\n        reinvestStreaks[msg.sender] = Streak(0, weeksSinceEpoch());\r\n        emit Withdraw(msg.sender, ethGained);\r\n    }\r\n    \r\n    function claimDivsInternal(address player) internal returns (uint256) {\r\n        uint256 ethGained;\r\n        uint256 length = userSubscriptionsList[player].length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            SubscriptionDapp dapp = SubscriptionDapp(userSubscriptionsList[player][i]);\r\n            (bool success, bytes memory returnData) = address(dapp).call(abi.encodePacked(dapp.claimDivs.selector, abi.encode(player)));\r\n            if (success) {\r\n                ethGained += abi.decode(returnData, (uint256));\r\n            }\r\n        }\r\n        \r\n        if (ethLoaned[player] > 0) {\r\n            uint256 fee = ethGained * loansFee / 1000;\r\n            ethGained -= fee;\r\n            loanDivs += fee;\r\n        }\r\n        \r\n        return ethGained;\r\n    }\r\n    \r\n    function reinvest(address referrer, address[] calldata pathPairs, uint256[] calldata minOuts) external {\r\n        require(uniswapPriceGuard.overPriceFloorValue(pathPairs, minOuts));\r\n        reinvestInternal(msg.sender, referrer, 100);\r\n    }\r\n    \r\n    function reinvestInternal(address player, address referrer, uint256 percent) internal {\r\n        uint256 ethGained = claimDivsInternal(player);\r\n        uint256 reinvestPortion = (ethGained * percent) / 100;\r\n        if (percent < 100) {\r\n            paymentHandler.cashout.value(ethGained - reinvestPortion)(player);\r\n            emit Withdraw(player, ethGained - reinvestPortion);\r\n        }\r\n        paymentHandler.reinvest.value(reinvestPortion)(address(this));\r\n        depositInternal(reinvestPortion, player, referrer, true);\r\n        \r\n        // Streak stuff\r\n        Streak memory streak = reinvestStreaks[player];\r\n        uint128 epochWeek = weeksSinceEpoch();\r\n        if (streak.lastReinvestWeek + 1 == epochWeek) {\r\n            streak.currentStreak++;\r\n        } else if (streak.lastReinvestWeek < epochWeek || streak.currentStreak == 0) {\r\n            streak.currentStreak = 1;\r\n        }\r\n\r\n        streak.lastReinvestWeek = epochWeek;\r\n        reinvestStreaks[player] = streak;\r\n        \r\n        emit Reinvest(player, referrer, reinvestPortion);\r\n    }\r\n    \r\n    function drawEth(uint256 amount) external {\r\n        uint256 ethValue = loanableValueInternal(msg.sender);\r\n        uint256 maxLoanPercent = loyalty.getLoanPercentMax(msg.sender);\r\n        require(maxLoanPercent < 80);\r\n        uint256 maxLoan = (ethValue * maxLoanPercent) / 100;\r\n        require(amount <= maxLoan);\r\n        require(ethLoaned[msg.sender] + amount <= maxLoan);\r\n        ethLoaned[msg.sender] += amount;\r\n        msg.sender.transfer(amount);\r\n        emit Borrow(msg.sender, amount);\r\n    }\r\n    \r\n    function cashoutPayLoan(address referrer, uint256 percent, address[] calldata pathPairs, uint256[] calldata minOuts) external {\r\n        uint256 existing = ethLoaned[msg.sender];\r\n        require(existing > 0);\r\n        require(percent > 0 && percent < 101);\r\n        require(uniswapPriceGuard.overPriceFloorValue(pathPairs, minOuts));\r\n        \r\n        uint256 ethGained;\r\n        uint256 length = userSubscriptionsList[msg.sender].length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            SubscriptionDapp dapp = SubscriptionDapp(userSubscriptionsList[msg.sender][i]);\r\n            (bool success, bytes memory returnData) = address(dapp).call(abi.encodePacked(dapp.cashout.selector, abi.encode(msg.sender, referrer, percent)));\r\n            if (success) {\r\n                ethGained += abi.decode(returnData, (uint256));\r\n            }\r\n            \r\n        }\r\n        \r\n        emit Cashout(msg.sender, referrer, ethGained);\r\n        \r\n        if (ethGained > existing) {\r\n            msg.sender.transfer(ethGained - existing);\r\n            ethGained = existing;\r\n        }\r\n        ethLoaned[msg.sender] -= ethGained;\r\n        reinvestStreaks[msg.sender] = Streak(0, weeksSinceEpoch());\r\n    }\r\n    \r\n    function paybackEthWithDivs() public {\r\n        uint256 existing = ethLoaned[msg.sender];\r\n        require(existing > 0);\r\n        \r\n        uint256 ethGained = claimDivsInternal(msg.sender);\r\n        emit Payback(msg.sender, ethGained);\r\n        \r\n        if (ethGained > existing) {\r\n            msg.sender.transfer(ethGained - existing);\r\n            ethGained = existing;\r\n        }\r\n        ethLoaned[msg.sender] -= ethGained;\r\n    }\r\n    \r\n    function paybackEth() external payable {\r\n        claimDivs();\r\n        uint256 amount = msg.value;\r\n        uint256 existing = ethLoaned[msg.sender];\r\n        if (amount > existing) {\r\n            msg.sender.transfer(amount - existing);\r\n            amount = existing;\r\n        }\r\n        ethLoaned[msg.sender] -= amount;\r\n        emit Payback(msg.sender, amount);\r\n    }\r\n    \r\n    function weeksSinceEpoch() public view returns(uint128) {\r\n        return uint128((now - 259200) / 604800);\r\n    }\r\n    \r\n    function totalDivsInternal(address player) internal returns (uint256) {\r\n        uint256 length = userSubscriptionsList[player].length;\r\n        \r\n        uint256 ethDivs;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            SubscriptionDapp dapp = SubscriptionDapp(userSubscriptionsList[player][i]);\r\n            (bool success, bytes memory returnData) = address(dapp).call(abi.encodePacked(dapp.currentDivs.selector, abi.encode(player)));\r\n            if (success) {\r\n                ethDivs += abi.decode(returnData, (uint256));\r\n            }\r\n        }\r\n        \r\n        return ethDivs;\r\n    }\r\n    \r\n    function totalDivs(address player) external view returns (uint256) {\r\n        uint256 length = userSubscriptionsList[player].length;\r\n        \r\n        uint256 ethDivs;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            ethDivs += SubscriptionDapp(userSubscriptionsList[player][i]).currentDivs(player);\r\n        }\r\n        \r\n        return ethDivs;\r\n    }\r\n    \r\n    function accountValue(address player, bool includeFees) external view returns(uint256) {\r\n        uint256 length = userSubscriptionsList[player].length;\r\n        \r\n        uint256 ethValue;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            ethValue += SubscriptionDapp(userSubscriptionsList[player][i]).currentValue(player, includeFees);\r\n        }\r\n        \r\n        return ethValue;\r\n    }\r\n    \r\n    function loanableValueInternal(address player) internal returns(uint256) {\r\n        uint256 length = userSubscriptionsList[player].length;\r\n        \r\n        uint256 ethValue;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (subscriptionLoanable[userSubscriptionsList[player][i]]) { // If whitelisted\r\n                SubscriptionDapp dapp = SubscriptionDapp(userSubscriptionsList[player][i]);\r\n                (bool success, bytes memory returnData) = address(dapp).call(abi.encodePacked(dapp.currentValue.selector, abi.encode(player, false)));\r\n                if (success) {\r\n                    ethValue += abi.decode(returnData, (uint256));\r\n                }\r\n            }\r\n        }\r\n        return ethValue;\r\n    }\r\n    \r\n    function loanableValue(address player) external view returns(uint256) {\r\n        uint256 length = userSubscriptionsList[player].length;\r\n        \r\n        uint256 ethValue;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (subscriptionLoanable[userSubscriptionsList[player][i]]) { // If whitelisted\r\n                ethValue += SubscriptionDapp(userSubscriptionsList[player][i]).currentValue(player, false);\r\n            }\r\n        }\r\n        return ethValue;\r\n    }\r\n    \r\n    function accountSubscriptions(address player) external view returns (uint256) {\r\n        return userSubscriptionsList[player].length;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface SubscriptionDapp {\r\n    function deposit(address player, uint256 amount, address referrer, bool alreadyClaimedDivs) external payable returns (uint256);\r\n    function cashout(address player, address referrer, uint256 percent) external returns (uint256);\r\n    function claimDivs(address player) external returns (uint256);\r\n    function currentValue(address player, bool removeFees) external view returns(uint256);\r\n    function currentDivs(address player) external view returns(uint256);\r\n    function() external payable;\r\n}\r\n\r\n\r\ninterface FundPaymentHandler {\r\n    function cashout(address player) external payable;\r\n    function reinvest(address player) external payable;\r\n}\r\n\r\n\r\ninterface UniswapPriceGuard {\r\n    function overPriceFloorValue(address[] calldata pathPairs, uint256[] calldata minOuts) external returns(bool);\r\n}\r\n\r\n\r\ninterface LoyaltyScheme {\r\n    function getLoanPercentMax(address player) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tron\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tron\",\"type\":\"uint256\"}],\"name\":\"Cashout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tron\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tron\",\"type\":\"uint256\"}],\"name\":\"Payback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tron\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tron\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"accountSubscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"includeFees\",\"type\":\"bool\"}],\"name\":\"accountValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeSubscriptions\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"dapp\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"weighting\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"requiresFunds\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dappAddress\",\"type\":\"address\"}],\"name\":\"addPendingSubscription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dappAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"dappWeighting\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"requiresFunds\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"loanable\",\"type\":\"bool\"}],\"name\":\"addSubscription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pathPairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minOuts\",\"type\":\"uint256[]\"}],\"name\":\"cashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pathPairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minOuts\",\"type\":\"uint256[]\"}],\"name\":\"cashoutPayLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimDivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pathPairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minOuts\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pathPairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minOuts\",\"type\":\"uint256[]\"}],\"name\":\"depositFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethLoaned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"loanableValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newDappDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"paybackEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"paybackEthWithDivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingDapps\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"dapp\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"weighting\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"delayTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"requiresFunds\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"loanable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFundFee\",\"type\":\"uint256\"}],\"name\":\"reduceFundFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pathPairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minOuts\",\"type\":\"uint256[]\"}],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reinvestStreaks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"currentStreak\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastReinvestWeek\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dappAddress\",\"type\":\"address\"}],\"name\":\"removeSubscription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriptionLoanable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"totalDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"updateDappDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"loanable\",\"type\":\"bool\"}],\"name\":\"updateLoanable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLoansFee\",\"type\":\"uint256\"}],\"name\":\"updateLoansFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loyaltyAddress\",\"type\":\"address\"}],\"name\":\"updateLoyaltyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapPriceGuard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSubscriptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSubscriptionsList\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weeksSinceEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLoanDivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPlatformFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EthPrime","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://181679c82289a629261bd9dd454d6843b581f65f7164b396a345f214b005dec9"}]}