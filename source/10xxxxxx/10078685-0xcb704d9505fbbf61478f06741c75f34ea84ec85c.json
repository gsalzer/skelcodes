{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\ninterface SoloMarginContract {\r\n\r\n    struct Info {\r\n        address owner;\r\n        uint256 number;\r\n    }\r\n\r\n\r\n    struct Wei {\r\n        bool sign;\r\n        uint256 value;\r\n    }\r\n\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n\r\n    function getMarketPrice(uint256 marketId) external view returns (Price memory);\r\n    function getAccountWei(Info calldata account, uint256 marketId) external view returns (Wei memory);\r\n    function getMarketTotalPar(uint256 marketId) external view returns (TotalPar memory);\r\n    function getMarketCurrentIndex(uint256 marketId) external view returns (Index memory);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\ncontract Helpers is DSMath{\r\n\r\n    /**\r\n     * @dev get Dydx Solo Address\r\n    */\r\n    function getSoloAddress() public pure returns (address addr) {\r\n        addr = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    }\r\n\r\n    /**\r\n    * @dev Get Dydx Account Arg\r\n    */\r\n    function getAccountArgs(address owner) internal pure returns (SoloMarginContract.Info memory) {\r\n        SoloMarginContract.Info[] memory accounts = new SoloMarginContract.Info[](1);\r\n        accounts[0] = (SoloMarginContract.Info(owner, 0));\r\n        return accounts[0];\r\n    }\r\n\r\n    struct DydxData {\r\n        uint tokenPrice;\r\n        uint supplyBalance;\r\n        uint borrowBalance;\r\n        uint tokenUtil;\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is Helpers {\r\n    function getPosition(address user, uint[] memory marketId) public view returns(DydxData[] memory) {\r\n        SoloMarginContract solo = SoloMarginContract(getSoloAddress());\r\n        DydxData[] memory tokensData = new DydxData[](marketId.length);\r\n        for (uint i = 0; i < marketId.length; i++) {\r\n            uint id = marketId[i];\r\n            SoloMarginContract.Wei memory tokenBal = solo.getAccountWei(getAccountArgs(user), id);\r\n            SoloMarginContract.TotalPar memory totalPar = solo.getMarketTotalPar(id);\r\n            SoloMarginContract.Index memory rateIndex = solo.getMarketCurrentIndex(id);\r\n\r\n            tokensData[i] = DydxData(\r\n                solo.getMarketPrice(id).value,\r\n                tokenBal.sign ? tokenBal.value : 0,\r\n                !tokenBal.sign ? tokenBal.value : 0,\r\n                wdiv(wmul(totalPar.borrow, rateIndex.borrow), wmul(totalPar.supply, rateIndex.supply))\r\n            );\r\n        }\r\n        return tokensData;\r\n    }\r\n}\r\n\r\ncontract InstaDydxResolver is Resolver {\r\n    string public constant name = \"Dydx-Resolver-v1\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"marketId\",\"type\":\"uint256[]\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenUtil\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.DydxData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoloAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaDydxResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://46800aed7bde05e4de091d046e03ddf3ff59dd44a722ce9dd7042f941f6d8535"}]}