{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: Loopring Foundation (Loopring Project Ltd)\n*/\n\npragma solidity ^0.6.6;\n\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/// @title Utility Functions for uint\n/// @author Daniel Wang - <daniel@loopring.org>\nlibrary MathUint {\n    function mul(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint c)\n    {\n        c = a * b;\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\n    }\n\n    function sub(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint)\n    {\n        require(b <= a, \"SUB_UNDERFLOW\");\n        return a - b;\n    }\n\n    function add(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint c)\n    {\n        c = a + b;\n        require(c >= a, \"ADD_OVERFLOW\");\n    }\n}\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/// @title Ownable\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @dev The Ownable contract has an owner address, and provides basic\n///      authorization control functions, this simplifies the implementation of\n///      \"user permissions\".\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /// @dev The Ownable constructor sets the original `owner` of the contract\n    ///      to the sender.\n    constructor()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    /// @dev Throws if called by any account other than the owner.\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n        _;\n    }\n\n    /// @dev Allows the current owner to transfer control of the contract to a\n    ///      new owner.\n    /// @param newOwner The address to transfer ownership to.\n    function transferOwnership(\n        address newOwner\n        )\n        public\n        virtual\n        onlyOwner\n    {\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function renounceOwnership()\n        public\n        onlyOwner\n    {\n        emit OwnershipTransferred(owner, address(0));\n        owner = address(0);\n    }\n}\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/// @title Claimable\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @dev Extension for the Ownable contract, where the ownership needs\n///      to be claimed. This allows the new owner to accept the transfer.\ncontract Claimable is Ownable\n{\n    address public pendingOwner;\n\n    /// @dev Modifier throws if called by any account other than the pendingOwner.\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner, \"UNAUTHORIZED\");\n        _;\n    }\n\n    /// @dev Allows the current owner to set the pendingOwner address.\n    /// @param newOwner The address to transfer ownership to.\n    function transferOwnership(\n        address newOwner\n        )\n        public\n        override\n        onlyOwner\n    {\n        require(newOwner != address(0) && newOwner != owner, \"INVALID_ADDRESS\");\n        pendingOwner = newOwner;\n    }\n\n    /// @dev Allows the pendingOwner address to finalize the transfer.\n    function claimOwnership()\n        public\n        onlyPendingOwner\n    {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n}\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/// @title AddressSet\n/// @author Daniel Wang - <daniel@loopring.org>\ncontract AddressSet {\n    struct Set\n    {\n        address[] addresses;\n        mapping (address => uint) positions;\n        uint count;\n    }\n    mapping (bytes32 => Set) private sets;\n\n    function addAddressToSet(\n        bytes32 key,\n        address addr,\n        bool maintainList\n        ) internal\n    {\n        Set storage set = sets[key];\n        require(set.positions[addr] == 0, \"ALREADY_IN_SET\");\n        \n        if (maintainList) {\n            require(set.addresses.length == set.count, \"PREVIOUSLY_NOT_MAINTAILED\");\n            set.addresses.push(addr);\n        } else {\n            require(set.addresses.length == 0, \"MUST_MAINTAIN\");\n        }\n\n        set.count += 1;\n        set.positions[addr] = set.count;\n    }\n\n    function removeAddressFromSet(\n        bytes32 key,\n        address addr\n        )\n        internal\n    {\n        Set storage set = sets[key];\n        uint pos = set.positions[addr];\n        require(pos != 0, \"NOT_IN_SET\");\n\n        delete set.positions[addr];\n        set.count -= 1;\n\n        if (set.addresses.length > 0) {\n            address lastAddr = set.addresses[set.count];\n            if (lastAddr != addr) {\n                set.addresses[pos - 1] = lastAddr;\n                set.positions[lastAddr] = pos;\n            }\n            set.addresses.pop();\n        }\n    }\n\n    function removeSet(bytes32 key)\n        internal\n    {\n        delete sets[key];\n    }\n\n    function isAddressInSet(\n        bytes32 key,\n        address addr\n        )\n        internal\n        view\n        returns (bool)\n    {\n        return sets[key].positions[addr] != 0;\n    }\n\n    function numAddressesInSet(bytes32 key)\n        internal\n        view\n        returns (uint)\n    {\n        Set storage set = sets[key];\n        return set.count;\n    }\n\n    function addressesInSet(bytes32 key)\n        internal\n        view\n        returns (address[] memory)\n    {\n        Set storage set = sets[key];\n        require(set.count == set.addresses.length, \"NOT_MAINTAINED\");\n        return sets[key].addresses;\n    }\n}\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\ncontract OwnerManagable is Claimable, AddressSet\n{\n    bytes32 internal constant MANAGER = keccak256(\"__MANAGED__\");\n\n    event ManagerAdded  (address indexed manager);\n    event ManagerRemoved(address indexed manager);\n\n    modifier onlyManager\n    {\n        require(isManager(msg.sender), \"NOT_MANAGER\");\n        _;\n    }\n\n    modifier onlyOwnerOrManager\n    {\n        require(msg.sender == owner || isManager(msg.sender), \"NOT_OWNER_OR_MANAGER\");\n        _;\n    }\n\n    constructor() public Claimable() {}\n\n    /// @dev Gets the managers.\n    /// @return The list of managers.\n    function managers()\n        public\n        view\n        returns (address[] memory)\n    {\n        return addressesInSet(MANAGER);\n    }\n\n    /// @dev Gets the number of managers.\n    /// @return The numer of managers.\n    function numManagers()\n        public\n        view\n        returns (uint)\n    {\n        return numAddressesInSet(MANAGER);\n    }\n\n    /// @dev Checks if an address is a manger.\n    /// @param addr The address to check.\n    /// @return True if the address is a manager, False otherwise.\n    function isManager(address addr)\n        public\n        view\n        returns (bool)\n    {\n        return isAddressInSet(MANAGER, addr);\n    }\n\n    /// @dev Adds a new manager.\n    /// @param manager The new address to add.\n    function addManager(address manager)\n        public\n        onlyOwner\n    {\n        addManagerInternal(manager);\n    }\n\n    /// @dev Removes a manager.\n    /// @param manager The manager to remove.\n    function removeManager(address manager)\n        public\n        onlyOwner\n    {\n        removeAddressFromSet(MANAGER, manager);\n        emit ManagerRemoved(manager);\n    }\n\n    function addManagerInternal(address manager)\n        internal\n    {\n        addAddressToSet(MANAGER, manager, true);\n        emit ManagerAdded(manager);\n    }\n}\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/// @title PriceOracle\nabstract contract PriceOracle {\n    function tokenPrice(address token, uint amount)\n        public\n        view\n        virtual\n        returns (uint value);\n}\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/// @title Wallet\n/// @dev Base contract for smart wallets.\n///      Sub-contracts must NOT use non-default constructor to initialize\n///      wallet states, instead, `init` shall be used. This is to enable\n///      proxies to be deployed in front of the real wallet contract for\n///      saving gas.\n///\n/// @author Daniel Wang - <daniel@loopring.org>\n///\n/// The design of this contract is inspired by Argent's contract codebase:\n/// https://github.com/argentlabs/argent-contracts\ninterface Wallet {\n    function owner() external view returns (address);\n\n    /// @dev Set a new owner.\n    function setOwner(address newOwner) external;\n\n    /// @dev Set up this wallet by assigning an original owner and a\n    ///      list of initial modules. For each module, its `init` method\n    ///      will be called with `address(this)` as the parameter.\n    ///\n    ///      Note that calling this method more than once will throw.\n    ///\n    /// @param _controller The Controller instance.\n    /// @param _owner The owner of this wallet, must not be address(0).\n    /// @param _boostrapModule The bootstrap module.\n    function setup(address _controller, address _owner, address _boostrapModule) external;\n\n    /// @dev Adds a new module. The `init` method of the module\n    ///      will be called with `address(this)` as the parameter.\n    ///      This method must throw if the module has already been added.\n    /// @param _module The module's address.\n    function addModule(address _module) external;\n\n    /// @dev Removes an existing module. This method must throw if the module\n    ///      has NOT been added or the module is the wallet's only module.\n    /// @param _module The module's address.\n    function removeModule(address _module) external;\n\n    /// @dev Returns the list of modules added to this wallet in the order\n    ///      they were added.\n    /// @return _modules The list of modules added to this wallet.\n    function modules() external view returns (address[] memory _modules);\n\n    /// @dev Checks if a module has been added to this wallet.\n    /// @param _module The module to check.\n    /// @return True if the module exists; False otherwise.\n    function hasModule(address _module) external view returns (bool);\n\n    /// @dev Binds a method from the given module to this\n    ///      wallet so the method can be invoked using this wallet's default\n    ///      function.\n    ///      Note that this method must throw when the given module has\n    ///      not been added to this wallet.\n    /// @param _method The method's 4-byte selector.\n    /// @param _module The module's address. Use address(0) to unbind the method.\n    function bindMethod(bytes4 _method, address _module) external;\n\n    /// @dev Returns the module the given method has been bound to.\n    /// @param _method The method's 4-byte selector.\n    /// @return _module The address of the bound module. If no binding exists,\n    ///                 returns address(0) instead.\n    function boundMethodModule(bytes4 _method) external view returns (address _module);\n\n    /// @dev Performs generic transactions. Any module that has been added to this\n    ///      wallet can use this method to transact on any third-party contract with\n    ///      msg.sender as this wallet itself.\n    ///\n    ///      This method will emit `Transacted` event if it doesn't throw.\n    ///\n    ///      Note: this method must ONLY allow invocations from a module that has\n    ///      been added to this wallet. The wallet owner shall NOT be permitted\n    ///      to call this method directly.\n    ///\n    /// @param mode The transaction mode, 1 for CALL, 2 for DELEGATECALL.\n    /// @param to The desitination address.\n    /// @param value The amount of Ether to transfer.\n    /// @param data The data to send over using `to.call{value: value}(data)`\n    /// @return returnData The transaction's return value.\n    function transact(\n        uint8    mode,\n        address  to,\n        uint     value,\n        bytes    calldata data\n        )\n        external\n        returns (bytes memory returnData);\n}\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/// @title DataStore\n/// @dev Modules share states by accessing the same storage instance.\n///      Using ModuleStorage will achieve better module decoupling.\n///\n/// @author Daniel Wang - <daniel@loopring.org>\n///\n/// The design of this contract is inspired by Argent's contract codebase:\n/// https://github.com/argentlabs/argent-contracts\ncontract DataStore {\n  modifier onlyWalletModule(address wallet)\n    {\n        require(Wallet(wallet).hasModule(msg.sender), \"UNAUTHORIZED\");\n        _;\n    }\n}\n\n/*\n\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/// @title PriceCacheStore\ncontract PriceCacheStore is DataStore, PriceOracle, OwnerManagable\n{\n    using MathUint for uint;\n\n    PriceOracle oracle;\n    uint expiry;\n\n    event PriceCached (\n        address indexed token,\n        uint            amount,\n        uint            value,\n        uint            timestamp\n    );\n\n    struct TokenPrice\n    {\n        uint amount;\n        uint value;\n        uint timestamp;\n    }\n\n    mapping (address => TokenPrice) prices;\n\n    constructor(\n        PriceOracle _oracle,\n        uint        _expiry\n        )\n        public\n        DataStore()\n    {\n        oracle = _oracle;\n        expiry = _expiry;\n    }\n\n    function tokenPrice(address token, uint amount)\n        public\n        view\n        override\n        returns (uint)\n    {\n        TokenPrice storage tp = prices[token];\n        if (tp.timestamp > 0 && now < tp.timestamp + expiry) {\n            return tp.value.mul(amount) / tp.amount;\n        } else {\n            return 0;\n        }\n    }\n\n    function updateTokenPrice(\n        address token,\n        uint    amount\n        )\n        external\n        onlyManager\n    {\n        uint value = oracle.tokenPrice(token, amount);\n        if (value > 0) {\n            cacheTokenPrice(token, amount, value);\n        }\n    }\n\n    function setTokenPrice(\n        address token,\n        uint    amount,\n        uint    value\n        )\n        external\n        onlyManager\n    {\n        cacheTokenPrice(token, amount, value);\n    }\n\n    function setOracle(PriceOracle _oracle)\n        external\n        onlyManager\n    {\n        oracle = _oracle;\n    }\n\n    function cacheTokenPrice(\n        address token,\n        uint    amount,\n        uint    value\n        )\n        internal\n    {\n        prices[token].amount = amount;\n        prices[token].value = value;\n        prices[token].timestamp = now;\n        emit PriceCached(token, amount, value, now);\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PriceCached\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numManagers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PriceCacheStore","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fbbdec9bd33324b960195d9ff951377d41a359800000000000000000000000000000000000000000000000000000000000127500","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}