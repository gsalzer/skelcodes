{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\ncontract CommitGoodBase {\r\n    /**\r\n     * @dev Emiited when a GSN enabled recipient processes a transaction.\r\n     * @param actualCharge The estimated cost of the transaction.\r\n     */\r\n    event CommitGoodTransactionCharge(uint256 actualCharge);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MinterRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isMinter(sender)) {\r\n            _addMinter(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is Initializable, ERC20, MinterRole {\r\n    function initialize(address sender) public initializer {\r\n        MinterRole.initialize(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is Initializable, IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20Mintable} that adds a cap to the supply of tokens.\r\n */\r\ncontract ERC20Capped is Initializable, ERC20Mintable {\r\n    uint256 private _cap;\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    function initialize(uint256 cap, address sender) public initializer {\r\n        ERC20Mintable.initialize(sender);\r\n\r\n        require(cap > 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20Mintable-mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `value` must not cause the total supply to go over the cap.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(totalSupply().add(value) <= _cap, \"ERC20Capped: cap exceeded\");\r\n        super._mint(account, value);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Initializable, Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PauserRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isPauser(sender)) {\r\n            _addPauser(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Initializable, Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        PauserRole.initialize(sender);\r\n\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 with pausable transfers and allowances.\r\n *\r\n * Useful if you want to stop trades until the end of a crowdsale, or have\r\n * an emergency switch for freezing all token transfers in the event of a large\r\n * bug.\r\n */\r\ncontract ERC20Pausable is Initializable, ERC20, Pausable {\r\n    function initialize(address sender) public initializer {\r\n        Pausable.initialize(sender);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Base interface for a contract that will be called via the GSN from {IRelayHub}.\r\n *\r\n * TIP: You don't need to write an implementation yourself! Inherit from {GSNRecipient} instead.\r\n */\r\ninterface IRelayRecipient {\r\n    /**\r\n     * @dev Returns the address of the {IRelayHub} instance this recipient interacts with.\r\n     */\r\n    function getHubAddr() external view returns (address);\r\n\r\n    /**\r\n     * @dev Called by {IRelayHub} to validate if this recipient accepts being charged for a relayed call. Note that the\r\n     * recipient will be charged regardless of the execution result of the relayed call (i.e. if it reverts or not).\r\n     *\r\n     * The relay request was originated by `from` and will be served by `relay`. `encodedFunction` is the relayed call\r\n     * calldata, so its first four bytes are the function selector. The relayed call will be forwarded `gasLimit` gas,\r\n     * and the transaction executed with a gas price of at least `gasPrice`. `relay`'s fee is `transactionFee`, and the\r\n     * recipient will be charged at most `maxPossibleCharge` (in wei). `nonce` is the sender's (`from`) nonce for\r\n     * replay attack protection in {IRelayHub}, and `approvalData` is a optional parameter that can be used to hold a signature\r\n     * over all or some of the previous values.\r\n     *\r\n     * Returns a tuple, where the first value is used to indicate approval (0) or rejection (custom non-zero error code,\r\n     * values 1 to 10 are reserved) and the second one is data to be passed to the other {IRelayRecipient} functions.\r\n     *\r\n     * {acceptRelayedCall} is called with 50k gas: if it runs out during execution, the request will be considered\r\n     * rejected. A regular revert will also trigger a rejection.\r\n     */\r\n    function acceptRelayedCall(\r\n        address relay,\r\n        address from,\r\n        bytes calldata encodedFunction,\r\n        uint256 transactionFee,\r\n        uint256 gasPrice,\r\n        uint256 gasLimit,\r\n        uint256 nonce,\r\n        bytes calldata approvalData,\r\n        uint256 maxPossibleCharge\r\n    )\r\n        external\r\n        view\r\n        returns (uint256, bytes memory);\r\n\r\n    /**\r\n     * @dev Called by {IRelayHub} on approved relay call requests, before the relayed call is executed. This allows to e.g.\r\n     * pre-charge the sender of the transaction.\r\n     *\r\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}.\r\n     *\r\n     * Returns a value to be passed to {postRelayedCall}.\r\n     *\r\n     * {preRelayedCall} is called with 100k gas: if it runs out during exection or otherwise reverts, the relayed call\r\n     * will not be executed, but the recipient will still be charged for the transaction's cost.\r\n     */\r\n    function preRelayedCall(bytes calldata context) external returns (bytes32);\r\n\r\n    /**\r\n     * @dev Called by {IRelayHub} on approved relay call requests, after the relayed call is executed. This allows to e.g.\r\n     * charge the user for the relayed call costs, return any overcharges from {preRelayedCall}, or perform\r\n     * contract-specific bookkeeping.\r\n     *\r\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}. `success` is the execution status of\r\n     * the relayed call. `actualCharge` is an estimate of how much the recipient will be charged for the transaction,\r\n     * not including any gas used by {postRelayedCall} itself. `preRetVal` is {preRelayedCall}'s return value.\r\n     *\r\n     *\r\n     * {postRelayedCall} is called with 100k gas: if it runs out during execution or otherwise reverts, the relayed call\r\n     * and the call to {preRelayedCall} will be reverted retroactively, but the recipient will still be charged for the\r\n     * transaction's cost.\r\n     */\r\n    function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface for `RelayHub`, the core contract of the GSN. Users should not need to interact with this contract\r\n * directly.\r\n *\r\n * See the https://github.com/OpenZeppelin/openzeppelin-gsn-helpers[OpenZeppelin GSN helpers] for more information on\r\n * how to deploy an instance of `RelayHub` on your local test network.\r\n */\r\ninterface IRelayHub {\r\n    // Relay management\r\n\r\n    /**\r\n     * @dev Adds stake to a relay and sets its `unstakeDelay`. If the relay does not exist, it is created, and the caller\r\n     * of this function becomes its owner. If the relay already exists, only the owner can call this function. A relay\r\n     * cannot be its own owner.\r\n     *\r\n     * All Ether in this function call will be added to the relay's stake.\r\n     * Its unstake delay will be assigned to `unstakeDelay`, but the new value must be greater or equal to the current one.\r\n     *\r\n     * Emits a {Staked} event.\r\n     */\r\n    function stake(address relayaddr, uint256 unstakeDelay) external payable;\r\n\r\n    /**\r\n     * @dev Emitted when a relay's stake or unstakeDelay are increased\r\n     */\r\n    event Staked(address indexed relay, uint256 stake, uint256 unstakeDelay);\r\n\r\n    /**\r\n     * @dev Registers the caller as a relay.\r\n     * The relay must be staked for, and not be a contract (i.e. this function must be called directly from an EOA).\r\n     *\r\n     * This function can be called multiple times, emitting new {RelayAdded} events. Note that the received\r\n     * `transactionFee` is not enforced by {relayCall}.\r\n     *\r\n     * Emits a {RelayAdded} event.\r\n     */\r\n    function registerRelay(uint256 transactionFee, string calldata url) external;\r\n\r\n    /**\r\n     * @dev Emitted when a relay is registered or re-registerd. Looking at these events (and filtering out\r\n     * {RelayRemoved} events) lets a client discover the list of available relays.\r\n     */\r\n    event RelayAdded(address indexed relay, address indexed owner, uint256 transactionFee, uint256 stake, uint256 unstakeDelay, string url);\r\n\r\n    /**\r\n     * @dev Removes (deregisters) a relay. Unregistered (but staked for) relays can also be removed.\r\n     *\r\n     * Can only be called by the owner of the relay. After the relay's `unstakeDelay` has elapsed, {unstake} will be\r\n     * callable.\r\n     *\r\n     * Emits a {RelayRemoved} event.\r\n     */\r\n    function removeRelayByOwner(address relay) external;\r\n\r\n    /**\r\n     * @dev Emitted when a relay is removed (deregistered). `unstakeTime` is the time when unstake will be callable.\r\n     */\r\n    event RelayRemoved(address indexed relay, uint256 unstakeTime);\r\n\r\n    /** Deletes the relay from the system, and gives back its stake to the owner.\r\n     *\r\n     * Can only be called by the relay owner, after `unstakeDelay` has elapsed since {removeRelayByOwner} was called.\r\n     *\r\n     * Emits an {Unstaked} event.\r\n     */\r\n    function unstake(address relay) external;\r\n\r\n    /**\r\n     * @dev Emitted when a relay is unstaked for, including the returned stake.\r\n     */\r\n    event Unstaked(address indexed relay, uint256 stake);\r\n\r\n    // States a relay can be in\r\n    enum RelayState {\r\n        Unknown, // The relay is unknown to the system: it has never been staked for\r\n        Staked, // The relay has been staked for, but it is not yet active\r\n        Registered, // The relay has registered itself, and is active (can relay calls)\r\n        Removed    // The relay has been removed by its owner and can no longer relay calls. It must wait for its unstakeDelay to elapse before it can unstake\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a relay's status. Note that relays can be deleted when unstaked or penalized, causing this function\r\n     * to return an empty entry.\r\n     */\r\n    function getRelay(address relay) external view returns (uint256 totalStake, uint256 unstakeDelay, uint256 unstakeTime, address payable owner, RelayState state);\r\n\r\n    // Balance management\r\n\r\n    /**\r\n     * @dev Deposits Ether for a contract, so that it can receive (and pay for) relayed transactions.\r\n     *\r\n     * Unused balance can only be withdrawn by the contract itself, by calling {withdraw}.\r\n     *\r\n     * Emits a {Deposited} event.\r\n     */\r\n    function depositFor(address target) external payable;\r\n\r\n    /**\r\n     * @dev Emitted when {depositFor} is called, including the amount and account that was funded.\r\n     */\r\n    event Deposited(address indexed recipient, address indexed from, uint256 amount);\r\n\r\n    /**\r\n     * @dev Returns an account's deposits. These can be either a contracts's funds, or a relay owner's revenue.\r\n     */\r\n    function balanceOf(address target) external view returns (uint256);\r\n\r\n    /**\r\n     * Withdraws from an account's balance, sending it back to it. Relay owners call this to retrieve their revenue, and\r\n     * contracts can use it to reduce their funding.\r\n     *\r\n     * Emits a {Withdrawn} event.\r\n     */\r\n    function withdraw(uint256 amount, address payable dest) external;\r\n\r\n    /**\r\n     * @dev Emitted when an account withdraws funds from `RelayHub`.\r\n     */\r\n    event Withdrawn(address indexed account, address indexed dest, uint256 amount);\r\n\r\n    // Relaying\r\n\r\n    /**\r\n     * @dev Checks if the `RelayHub` will accept a relayed operation.\r\n     * Multiple things must be true for this to happen:\r\n     *  - all arguments must be signed for by the sender (`from`)\r\n     *  - the sender's nonce must be the current one\r\n     *  - the recipient must accept this transaction (via {acceptRelayedCall})\r\n     *\r\n     * Returns a `PreconditionCheck` value (`OK` when the transaction can be relayed), or a recipient-specific error\r\n     * code if it returns one in {acceptRelayedCall}.\r\n     */\r\n    function canRelay(\r\n        address relay,\r\n        address from,\r\n        address to,\r\n        bytes calldata encodedFunction,\r\n        uint256 transactionFee,\r\n        uint256 gasPrice,\r\n        uint256 gasLimit,\r\n        uint256 nonce,\r\n        bytes calldata signature,\r\n        bytes calldata approvalData\r\n    ) external view returns (uint256 status, bytes memory recipientContext);\r\n\r\n    // Preconditions for relaying, checked by canRelay and returned as the corresponding numeric values.\r\n    enum PreconditionCheck {\r\n        OK,                         // All checks passed, the call can be relayed\r\n        WrongSignature,             // The transaction to relay is not signed by requested sender\r\n        WrongNonce,                 // The provided nonce has already been used by the sender\r\n        AcceptRelayedCallReverted,  // The recipient rejected this call via acceptRelayedCall\r\n        InvalidRecipientStatusCode  // The recipient returned an invalid (reserved) status code\r\n    }\r\n\r\n    /**\r\n     * @dev Relays a transaction.\r\n     *\r\n     * For this to succeed, multiple conditions must be met:\r\n     *  - {canRelay} must `return PreconditionCheck.OK`\r\n     *  - the sender must be a registered relay\r\n     *  - the transaction's gas price must be larger or equal to the one that was requested by the sender\r\n     *  - the transaction must have enough gas to not run out of gas if all internal transactions (calls to the\r\n     * recipient) use all gas available to them\r\n     *  - the recipient must have enough balance to pay the relay for the worst-case scenario (i.e. when all gas is\r\n     * spent)\r\n     *\r\n     * If all conditions are met, the call will be relayed and the recipient charged. {preRelayedCall}, the encoded\r\n     * function and {postRelayedCall} will be called in that order.\r\n     *\r\n     * Parameters:\r\n     *  - `from`: the client originating the request\r\n     *  - `to`: the target {IRelayRecipient} contract\r\n     *  - `encodedFunction`: the function call to relay, including data\r\n     *  - `transactionFee`: fee (%) the relay takes over actual gas cost\r\n     *  - `gasPrice`: gas price the client is willing to pay\r\n     *  - `gasLimit`: gas to forward when calling the encoded function\r\n     *  - `nonce`: client's nonce\r\n     *  - `signature`: client's signature over all previous params, plus the relay and RelayHub addresses\r\n     *  - `approvalData`: dapp-specific data forwared to {acceptRelayedCall}. This value is *not* verified by the\r\n     * `RelayHub`, but it still can be used for e.g. a signature.\r\n     *\r\n     * Emits a {TransactionRelayed} event.\r\n     */\r\n    function relayCall(\r\n        address from,\r\n        address to,\r\n        bytes calldata encodedFunction,\r\n        uint256 transactionFee,\r\n        uint256 gasPrice,\r\n        uint256 gasLimit,\r\n        uint256 nonce,\r\n        bytes calldata signature,\r\n        bytes calldata approvalData\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted when an attempt to relay a call failed.\r\n     *\r\n     * This can happen due to incorrect {relayCall} arguments, or the recipient not accepting the relayed call. The\r\n     * actual relayed call was not executed, and the recipient not charged.\r\n     *\r\n     * The `reason` parameter contains an error code: values 1-10 correspond to `PreconditionCheck` entries, and values\r\n     * over 10 are custom recipient error codes returned from {acceptRelayedCall}.\r\n     */\r\n    event CanRelayFailed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint256 reason);\r\n\r\n    /**\r\n     * @dev Emitted when a transaction is relayed. \r\n     * Useful when monitoring a relay's operation and relayed calls to a contract\r\n     *\r\n     * Note that the actual encoded function might be reverted: this is indicated in the `status` parameter.\r\n     *\r\n     * `charge` is the Ether value deducted from the recipient's balance, paid to the relay's owner.\r\n     */\r\n    event TransactionRelayed(address indexed relay, address indexed from, address indexed to, bytes4 selector, RelayCallStatus status, uint256 charge);\r\n\r\n    // Reason error codes for the TransactionRelayed event\r\n    enum RelayCallStatus {\r\n        OK,                      // The transaction was successfully relayed and execution successful - never included in the event\r\n        RelayedCallFailed,       // The transaction was relayed, but the relayed call failed\r\n        PreRelayedFailed,        // The transaction was not relayed due to preRelatedCall reverting\r\n        PostRelayedFailed,       // The transaction was relayed and reverted due to postRelatedCall reverting\r\n        RecipientBalanceChanged  // The transaction was relayed and reverted due to the recipient's balance changing\r\n    }\r\n\r\n    /**\r\n     * @dev Returns how much gas should be forwarded to a call to {relayCall}, in order to relay a transaction that will\r\n     * spend up to `relayedCallStipend` gas.\r\n     */\r\n    function requiredGas(uint256 relayedCallStipend) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the maximum recipient charge, given the amount of gas forwarded, gas price and relay fee.\r\n     */\r\n    function maxPossibleCharge(uint256 relayedCallStipend, uint256 gasPrice, uint256 transactionFee) external view returns (uint256);\r\n\r\n     // Relay penalization. \r\n     // Any account can penalize relays, removing them from the system immediately, and rewarding the\r\n    // reporter with half of the relay's stake. The other half is burned so that, even if the relay penalizes itself, it\r\n    // still loses half of its stake.\r\n\r\n    /**\r\n     * @dev Penalize a relay that signed two transactions using the same nonce (making only the first one valid) and\r\n     * different data (gas price, gas limit, etc. may be different).\r\n     *\r\n     * The (unsigned) transaction data and signature for both transactions must be provided.\r\n     */\r\n    function penalizeRepeatedNonce(bytes calldata unsignedTx1, bytes calldata signature1, bytes calldata unsignedTx2, bytes calldata signature2) external;\r\n\r\n    /**\r\n     * @dev Penalize a relay that sent a transaction that didn't target `RelayHub`'s {registerRelay} or {relayCall}.\r\n     */\r\n    function penalizeIllegalTransaction(bytes calldata unsignedTx, bytes calldata signature) external;\r\n\r\n    /**\r\n     * @dev Emitted when a relay is penalized.\r\n     */\r\n    event Penalized(address indexed relay, address sender, uint256 amount);\r\n\r\n    /**\r\n     * @dev Returns an account's nonce in `RelayHub`.\r\n     */\r\n    function getNonce(address from) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Base GSN recipient contract: includes the {IRelayRecipient} interface\r\n * and enables GSN support on all contracts in the inheritance tree.\r\n *\r\n * TIP: This contract is abstract. The functions {IRelayRecipient-acceptRelayedCall},\r\n *  {_preRelayedCall}, and {_postRelayedCall} are not implemented and must be\r\n * provided by derived contracts. See the\r\n * xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategies] for more\r\n * information on how to use the pre-built {GSNRecipientSignature} and\r\n * {GSNRecipientERC20Fee}, or how to write your own.\r\n */\r\ncontract GSNRecipient is Initializable, IRelayRecipient, Context {\r\n    function initialize() public initializer {\r\n        if (_relayHub == address(0)) {\r\n            setDefaultRelayHub();\r\n        }\r\n    }\r\n\r\n    function setDefaultRelayHub() public {\r\n        _upgradeRelayHub(0xD216153c06E857cD7f72665E0aF1d7D82172F494);\r\n    }\r\n\r\n    // Default RelayHub address, deployed on mainnet and all testnets at the same address\r\n    address private _relayHub;\r\n\r\n    uint256 constant private RELAYED_CALL_ACCEPTED = 0;\r\n    uint256 constant private RELAYED_CALL_REJECTED = 11;\r\n\r\n    // How much gas is forwarded to postRelayedCall\r\n    uint256 constant internal POST_RELAYED_CALL_MAX_GAS = 100000;\r\n\r\n    /**\r\n     * @dev Emitted when a contract changes its {IRelayHub} contract to a new one.\r\n     */\r\n    event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub);\r\n\r\n    /**\r\n     * @dev Returns the address of the {IRelayHub} contract for this recipient.\r\n     */\r\n    function getHubAddr() public view returns (address) {\r\n        return _relayHub;\r\n    }\r\n\r\n    /**\r\n     * @dev Switches to a new {IRelayHub} instance. This method is added for future-proofing: there's no reason to not\r\n     * use the default instance.\r\n     *\r\n     * IMPORTANT: After upgrading, the {GSNRecipient} will no longer be able to receive relayed calls from the old\r\n     * {IRelayHub} instance. Additionally, all funds should be previously withdrawn via {_withdrawDeposits}.\r\n     */\r\n    function _upgradeRelayHub(address newRelayHub) internal {\r\n        address currentRelayHub = _relayHub;\r\n        require(newRelayHub != address(0), \"GSNRecipient: new RelayHub is the zero address\");\r\n        require(newRelayHub != currentRelayHub, \"GSNRecipient: new RelayHub is the current one\");\r\n\r\n        emit RelayHubChanged(currentRelayHub, newRelayHub);\r\n\r\n        _relayHub = newRelayHub;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the version string of the {IRelayHub} for which this recipient implementation was built. If\r\n     * {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.\r\n     */\r\n    // This function is view for future-proofing, it may require reading from\r\n    // storage in the future.\r\n    function relayHubVersion() public view returns (string memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return \"1.0.0\";\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws the recipient's deposits in `RelayHub`.\r\n     *\r\n     * Derived contracts should expose this in an external interface with proper access control.\r\n     */\r\n    function _withdrawDeposits(uint256 amount, address payable payee) internal {\r\n        IRelayHub(_relayHub).withdraw(amount, payee);\r\n    }\r\n\r\n    // Overrides for Context's functions: when called from RelayHub, sender and\r\n    // data require some pre-processing: the actual sender is stored at the end\r\n    // of the call data, which in turns means it needs to be removed from it\r\n    // when handling said data.\r\n\r\n    /**\r\n     * @dev Replacement for msg.sender. Returns the actual sender of a transaction: msg.sender for regular transactions,\r\n     * and the end-user for GSN relayed calls (where msg.sender is actually `RelayHub`).\r\n     *\r\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.sender`, and use {_msgSender} instead.\r\n     */\r\n    function _msgSender() internal view returns (address payable) {\r\n        if (msg.sender != _relayHub) {\r\n            return msg.sender;\r\n        } else {\r\n            return _getRelayedCallSender();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for msg.data. Returns the actual calldata of a transaction: msg.data for regular transactions,\r\n     * and a reduced version for GSN relayed calls (where msg.data contains additional information).\r\n     *\r\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.data`, and use {_msgData} instead.\r\n     */\r\n    function _msgData() internal view returns (bytes memory) {\r\n        if (msg.sender != _relayHub) {\r\n            return msg.data;\r\n        } else {\r\n            return _getRelayedCallData();\r\n        }\r\n    }\r\n\r\n    // Base implementations for pre and post relayedCall: only RelayHub can invoke them, and data is forwarded to the\r\n    // internal hook.\r\n\r\n    /**\r\n     * @dev See `IRelayRecipient.preRelayedCall`.\r\n     *\r\n     * This function should not be overriden directly, use `_preRelayedCall` instead.\r\n     *\r\n     * * Requirements:\r\n     *\r\n     * - the caller must be the `RelayHub` contract.\r\n     */\r\n    function preRelayedCall(bytes calldata context) external returns (bytes32) {\r\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\r\n        return _preRelayedCall(context);\r\n    }\r\n\r\n    /**\r\n     * @dev See `IRelayRecipient.preRelayedCall`.\r\n     *\r\n     * Called by `GSNRecipient.preRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\r\n     * must implement this function with any relayed-call preprocessing they may wish to do.\r\n     *\r\n     */\r\n    function _preRelayedCall(bytes memory context) internal returns (bytes32);\r\n\r\n    /**\r\n     * @dev See `IRelayRecipient.postRelayedCall`.\r\n     *\r\n     * This function should not be overriden directly, use `_postRelayedCall` instead.\r\n     *\r\n     * * Requirements:\r\n     *\r\n     * - the caller must be the `RelayHub` contract.\r\n     */\r\n    function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external {\r\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\r\n        _postRelayedCall(context, success, actualCharge, preRetVal);\r\n    }\r\n\r\n    /**\r\n     * @dev See `IRelayRecipient.postRelayedCall`.\r\n     *\r\n     * Called by `GSNRecipient.postRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\r\n     * must implement this function with any relayed-call postprocessing they may wish to do.\r\n     *\r\n     */\r\n    function _postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) internal;\r\n\r\n    /**\r\n     * @dev Return this in acceptRelayedCall to proceed with the execution of a relayed call. Note that this contract\r\n     * will be charged a fee by RelayHub\r\n     */\r\n    function _approveRelayedCall() internal pure returns (uint256, bytes memory) {\r\n        return _approveRelayedCall(\"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See `GSNRecipient._approveRelayedCall`.\r\n     *\r\n     * This overload forwards `context` to _preRelayedCall and _postRelayedCall.\r\n     */\r\n    function _approveRelayedCall(bytes memory context) internal pure returns (uint256, bytes memory) {\r\n        return (RELAYED_CALL_ACCEPTED, context);\r\n    }\r\n\r\n    /**\r\n     * @dev Return this in acceptRelayedCall to impede execution of a relayed call. No fees will be charged.\r\n     */\r\n    function _rejectRelayedCall(uint256 errorCode) internal pure returns (uint256, bytes memory) {\r\n        return (RELAYED_CALL_REJECTED + errorCode, \"\");\r\n    }\r\n\r\n    /*\r\n     * @dev Calculates how much RelayHub will charge a recipient for using `gas` at a `gasPrice`, given a relayer's\r\n     * `serviceFee`.\r\n     */\r\n    function _computeCharge(uint256 gas, uint256 gasPrice, uint256 serviceFee) internal pure returns (uint256) {\r\n        // The fee is expressed as a percentage. E.g. a value of 40 stands for a 40% fee, so the recipient will be\r\n        // charged for 1.4 times the spent amount.\r\n        return (gas * gasPrice * (100 + serviceFee)) / 100;\r\n    }\r\n\r\n    function _getRelayedCallSender() private pure returns (address payable result) {\r\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\r\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\r\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\r\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\r\n        // bytes. This can always be done due to the 32-byte prefix.\r\n\r\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\r\n        // easiest/most-efficient way to perform this operation.\r\n\r\n        // These fields are not accessible from assembly\r\n        bytes memory array = msg.data;\r\n        uint256 index = msg.data.length;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function _getRelayedCallData() private pure returns (bytes memory) {\r\n        // RelayHub appends the sender address at the end of the calldata, so in order to retrieve the actual msg.data,\r\n        // we must strip the last 20 bytes (length of an address type) from it.\r\n\r\n        uint256 actualDataLength = msg.data.length - 20;\r\n        bytes memory actualData = new bytes(actualDataLength);\r\n\r\n        for (uint256 i = 0; i < actualDataLength; ++i) {\r\n            actualData[i] = msg.data[i];\r\n        }\r\n\r\n        return actualData;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * NOTE: This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev A xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategy] that allows relayed transactions through when they are\r\n * accompanied by the signature of a trusted signer. The intent is for this signature to be generated by a server that\r\n * performs validations off-chain. Note that nothing is charged to the user in this scheme. Thus, the server should make\r\n * sure to account for this in their economic and threat model.\r\n */\r\ncontract GSNRecipientSignature is Initializable, GSNRecipient {\r\n    using ECDSA for bytes32;\r\n\r\n    address private _trustedSigner;\r\n\r\n    enum GSNRecipientSignatureErrorCodes {\r\n        INVALID_SIGNER\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the trusted signer that is going to be producing signatures to approve relayed calls.\r\n     */\r\n    function initialize(address trustedSigner) public initializer {\r\n        require(trustedSigner != address(0), \"GSNRecipientSignature: trusted signer is the zero address\");\r\n        _trustedSigner = trustedSigner;\r\n\r\n        GSNRecipient.initialize();\r\n    }\r\n\r\n    /**\r\n     * @dev Ensures that only transactions with a trusted signature can be relayed through the GSN.\r\n     */\r\n    function acceptRelayedCall(\r\n        address relay,\r\n        address from,\r\n        bytes calldata encodedFunction,\r\n        uint256 transactionFee,\r\n        uint256 gasPrice,\r\n        uint256 gasLimit,\r\n        uint256 nonce,\r\n        bytes calldata approvalData,\r\n        uint256\r\n    )\r\n        external\r\n        view\r\n        returns (uint256, bytes memory)\r\n    {\r\n        bytes memory blob = abi.encodePacked(\r\n            relay,\r\n            from,\r\n            encodedFunction,\r\n            transactionFee,\r\n            gasPrice,\r\n            gasLimit,\r\n            nonce, // Prevents replays on RelayHub\r\n            getHubAddr(), // Prevents replays in multiple RelayHubs\r\n            address(this) // Prevents replays in multiple recipients\r\n        );\r\n        if (keccak256(blob).toEthSignedMessageHash().recover(approvalData) == _trustedSigner) {\r\n            return _approveRelayedCall();\r\n        } else {\r\n            return _rejectRelayedCall(uint256(GSNRecipientSignatureErrorCodes.INVALID_SIGNER));\r\n        }\r\n    }\r\n\r\n    function _preRelayedCall(bytes memory) internal returns (bytes32) {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n\r\n    function _postRelayedCall(bytes memory, bool, uint256, bytes32) internal {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract that sets access control levels for users and charities.\r\n */\r\ncontract CommitGoodAccessControl is Initializable, Ownable, GSNRecipientSignature, CommitGoodBase {\r\n    mapping(address => bool) public users;\r\n    mapping(address => bool) public campaigns;\r\n\r\n    function initialize(address owner, address trustedSigner) public initializer {\r\n        GSNRecipientSignature.initialize(trustedSigner);\r\n        Ownable.initialize(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when `registrar` has their authorization `enabled`.\r\n     * @param registrar Address of the account to be authorized or deauthorized.\r\n     * @param enabled Boolean value that denotes the authorization.\r\n     */\r\n    event Authorize(address indexed registrar, bool enabled);\r\n\r\n    /**\r\n     * Emitted when `campaign` has their authorization `enabled`.\r\n     */\r\n    event CampaignAuthorize(address indexed campaign, bool enabled);\r\n\r\n    /**\r\n     * @dev Validates an address\r\n     * @param account The address that is being validated\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be a zero address or a contract address.\r\n     */\r\n    modifier validAddress(address account) {\r\n        require(account != address(0), \"0x0 is not a valid address\");\r\n        require(!Address.isContract(account), \"Contract address is not a valid address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates a contract address\r\n     * @param kontract The address that is being validated\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `kontract` cannot be a zero address and must be a contract address.\r\n     */\r\n    modifier validContract(address kontract) {\r\n        require(kontract != address(0), \"0x0 is not a valid address\");\r\n        require(Address.isContract(kontract), \"Contract address is not a valid address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a user to the whitelist.\r\n     * @param account The wallet address of the user.\r\n     * @return True indicating the function completed successfully.\r\n     *\r\n     * Emits a {Authorize} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be a zero address and must not be a contract.\r\n     */\r\n    function whitelistUser(address account) public onlyOwner validAddress(account) returns (bool) {\r\n        users[account] = true;\r\n        emit Authorize(account, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a user from the whitelist.\r\n     * @param account The wallet address of the user.\r\n     * @return True indicating the function completed successfully.\r\n     *\r\n     * Emits a {Authorize} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be a zero address and must not be a contract.\r\n     */\r\n    function blacklistUser(address account) public onlyOwner validAddress(account) returns (bool) {\r\n        users[account] = false;\r\n        emit Authorize(account, false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a campaign from the whitelist.\r\n     * @param campaign The contract address of the campaign.\r\n     * @return True indicating the function completed successfully.\r\n     *\r\n     * Emits a {CampaignAuthorize} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `campaign` cannot be a zero address and must be a contract.\r\n     */\r\n    function whitelistCampaign(address campaign) public onlyOwner validContract(campaign) returns (bool) {\r\n        campaigns[campaign] = true;\r\n        emit CampaignAuthorize(campaign, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a campaign from the whitelist.\r\n     * @param campaign The contract address of the campaign.\r\n     * @return True indicating the function completed successfully.\r\n     *\r\n     * Emits a {CampaignAuthorize} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `campaign` cannot be a zero address and must be a contract.\r\n     */\r\n    function blacklistCampaign(address campaign) public onlyOwner validContract(campaign) returns (bool) {\r\n        campaigns[campaign] = false;\r\n        emit CampaignAuthorize(campaign, false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean value indicating if the user is whitelisted.\r\n     * @param account The wallet address of the user.\r\n     * @return A boolean value indicating if the user is whitelisted.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be a zero address.\r\n     */\r\n    function isUserWhitelisted(address account) public view validAddress(account) returns (bool) {\r\n        return users[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean value indicating if the campaign is whitelisted.\r\n     * @param campaign The contract address of the campaign.\r\n     * @return A boolean value indicating if the campaign is whitelisted.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `campaign` cannot be a zero address and must be a contract.\r\n     */\r\n    function isCampaignWhitelisted(address campaign) public view validContract(campaign) returns (bool) {\r\n        return campaigns[campaign];\r\n    }\r\n\r\n    function _preRelayedCall(bytes memory context) internal returns (bytes32) {}\r\n\r\n    function _postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) internal {\r\n        emit CommitGoodTransactionCharge(actualCharge);\r\n    }\r\n}\r\n\r\n\r\ncontract CommitGoodToken is\r\n    Initializable,\r\n    Ownable,\r\n    ERC20,\r\n    ERC20Detailed,\r\n    ERC20Mintable,\r\n    ERC20Capped,\r\n    ERC20Burnable,\r\n    ERC20Pausable,\r\n    CommitGoodBase {\r\n    CommitGoodAccessControl private _accessControl;\r\n\r\n    function initialize(\r\n        address owner,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        uint256 capacity) public initializer {\r\n        Ownable.initialize(owner);\r\n        ERC20Detailed.initialize(name, symbol, decimals);\r\n        ERC20Capped.initialize(capacity, owner);\r\n        ERC20Mintable.initialize(owner);\r\n        ERC20Pausable.initialize(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the token owner to set the access control contract. In the future when the\r\n     * organization can become an actual DAO, the owners can utilize a voting mechanism to\r\n     * update the access control contract.\r\n     * @param accessControl The address of the access control contract that adheres to the `CommitGoodAccessControl` contract.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `msg.sender` must be the token owner.\r\n     */\r\n    function setAccessControl(CommitGoodAccessControl accessControl) public onlyOwner {\r\n        _accessControl = accessControl;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the campaigns contract to set approvals on the users behalf when executing donations.\r\n     * @param donor The donor that executed the transaction.\r\n     * @param amount The amount that is to be donated to the campaign.\r\n     * @return A boolean value indicating that the approval succeeded.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `donor` must be whitelisted.\r\n     * - `_msgSender()` must be a contract and the campaigns contract.\r\n     */\r\n    function campaignApproval(address donor, uint256 amount) public returns(bool) {\r\n        require(_accessControl.isUserWhitelisted(donor), \"The donor must be whitelisted.\");\r\n        require(Address.isContract(_msgSender()), \"Recipient must be a contract.\");\r\n        require(_accessControl.isCampaignWhitelisted(_msgSender()), \"The campaign must be whitelisted.\");\r\n        _approve(donor, _msgSender(), amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualCharge\",\"type\":\"uint256\"}],\"name\":\"CommitGoodTransactionCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"campaignApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CommitGoodAccessControl\",\"name\":\"accessControl\",\"type\":\"address\"}],\"name\":\"setAccessControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CommitGoodToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"petersburg","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9d8addb53620c7d62a0d55077e14792cebcfb92072302606c486c05cd630fba4"}]}