{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ncontract IDAP {\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function burn(uint _amount) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Auth {\r\n\r\n  address internal mainAdmin;\r\n  address internal backupAdmin;\r\n  address internal contractAdmin;\r\n\r\n  event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n  constructor(\r\n    address _mainAdmin,\r\n    address _backupAdmin,\r\n    address _contractAdmin\r\n  ) internal {\r\n    mainAdmin = _mainAdmin;\r\n    backupAdmin = _backupAdmin;\r\n    contractAdmin = _contractAdmin;\r\n  }\r\n\r\n  modifier onlyMainAdmin() {\r\n    require(isMainAdmin(), 'onlyMainAdmin');\r\n    _;\r\n  }\r\n\r\n  modifier onlyBackupAdmin() {\r\n    require(isBackupAdmin(), 'onlyBackupAdmin');\r\n    _;\r\n  }\r\n\r\n  modifier onlyContractAdmin() {\r\n    require(isContractAdmin() || isMainAdmin(), 'onlyContractAdmin');\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) onlyBackupAdmin internal {\r\n    require(_newOwner != address(0x0));\r\n    mainAdmin = _newOwner;\r\n    emit OwnershipTransferred(msg.sender, _newOwner);\r\n  }\r\n\r\n  function isMainAdmin() public view returns (bool) {\r\n    return msg.sender == mainAdmin;\r\n  }\r\n\r\n  function isBackupAdmin() public view returns (bool) {\r\n    return msg.sender == backupAdmin;\r\n  }\r\n\r\n  function isContractAdmin() public view returns (bool) {\r\n    return msg.sender == contractAdmin;\r\n  }\r\n}\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Withdraw is Auth {\r\n\r\n  IDAP public dapToken;\r\n  bool lCT = false;\r\n\r\n  event Withdrew(address indexed user, uint amount, uint timestamp);\r\n  event WithdrewCanceled(address indexed user, string id, uint timestamp);\r\n  event Payout(address indexed user, uint amount, string id, uint timestamp);\r\n\r\n  constructor (\r\n    address _mainAdmin,\r\n    address _backupAdmin\r\n  )\r\n  Auth(_mainAdmin, _backupAdmin, msg.sender)\r\n  public {}\r\n\r\n  function updateMainAdmin(address _admin) public {\r\n    transferOwnership(_admin);\r\n  }\r\n\r\n  function updateBackupAdmin(address _backupAdmin) onlyBackupAdmin public {\r\n    require(_backupAdmin != address(0x0), 'Invalid address');\r\n    backupAdmin = _backupAdmin;\r\n  }\r\n\r\n  function updateContractAdmin(address _contractAdmin) onlyMainAdmin public {\r\n    require(_contractAdmin != address(0x0), 'Invalid address');\r\n    contractAdmin = _contractAdmin;\r\n  }\r\n\r\n  function uLT(bool _l) onlyMainAdmin public {\r\n    lCT = _l;\r\n  }\r\n\r\n  function setToken(address _token) onlyContractAdmin public {\r\n    require(_token != address(0x0), 'Invalid address');\r\n    require(!lCT, 'Can not change token');\r\n    dapToken = IDAP(_token);\r\n  }\r\n\r\n  function withdraw(uint amount) public {\r\n    emit Withdrew(msg.sender, amount, now);\r\n  }\r\n\r\n  function cancelWithdraw(string id) public {\r\n    emit WithdrewCanceled(msg.sender, id, now);\r\n  }\r\n\r\n  function payout(address[] _addresses, uint[] _amounts, string[] _ids) onlyMainAdmin public {\r\n    require(_addresses.length == _amounts.length && _amounts.length == _ids.length, 'Data invalid');\r\n    for (uint i = 0; i < _addresses.length; i++) {\r\n      dapToken.transfer(_addresses[i], _amounts[i]);\r\n      emit Payout(_addresses[i], _amounts[i], _ids[i], now);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_contractAdmin\",\"type\":\"address\"}],\"name\":\"updateContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_backupAdmin\",\"type\":\"address\"}],\"name\":\"updateBackupAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dapToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBackupAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_ids\",\"type\":\"string[]\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"updateMainAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_l\",\"type\":\"bool\"}],\"name\":\"uLT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mainAdmin\",\"type\":\"address\"},{\"name\":\"_backupAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrewCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Withdraw","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000118c11862150f130121d5fe1d4c9f02263fa079c000000000000000000000000118c11862150f130121d5fe1d4c9f02263fa079c","EVMVersion":"Default","Library":"","LicenseType":"BSD-2-Clause","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9d36fb41fdd74e8e5ccabf2c305bea0366a9e9ef1e96b8a1655d384c7c98f374"}]}