{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface TokenInterface {\r\n    function symbol() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n}\r\n\r\ncontract Liquidity is Ownable {\r\n    address public DEX;\r\n    string[] public allLiquidities;\r\n    mapping(string => address) public contractAddress;\r\n\r\n    event DEXUpdated(address oldDEX, address newDEX);\r\n    event TokenUpdated(string symbol, address newContract);\r\n    event PaymentReceived(address from, uint256 amount);\r\n    event LiquidityWithdraw(\r\n        string symbol,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n    event LiquidityTransfer(\r\n        string symbol,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the DEX.\r\n     */\r\n    modifier onlyDEX() {\r\n        require(DEX == _msgSender(), \"Liquidity: caller is not DEX\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address owner,\r\n        address gsu,\r\n        address usdt\r\n    ) public {\r\n        require(owner != address(0x0), \"[Liquidity], owner is zero address\");\r\n        require(gsu != address(0x0), \"[Liquidity], gsu is zero address\");\r\n        require(usdt != address(0x0), \"[Liquidity], usdt is zero address\");\r\n\r\n        allLiquidities.push(\"ETH\");\r\n\r\n        newLiquidity(gsu);\r\n        newLiquidity(usdt);\r\n        transferOwnership(owner);\r\n    }\r\n\r\n    fallback() external payable {\r\n        emit PaymentReceived(_msgSender(), msg.value);\r\n    }\r\n\r\n    receive() external payable {\r\n        emit PaymentReceived(_msgSender(), msg.value);\r\n    }\r\n\r\n    function withdraw(string calldata symbol, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(amount > 0, \"[Liquidity] amount is zero\");\r\n\r\n        if (isERC20Token(symbol))\r\n            TokenInterface(contractAddress[symbol]).transfer(owner(), amount);\r\n        else address(uint160(owner())).transfer(amount);\r\n\r\n        emit LiquidityWithdraw(symbol, owner(), amount, block.timestamp);\r\n    }\r\n\r\n    function transfer(\r\n        string calldata symbol,\r\n        address payable recipient,\r\n        uint256 amount\r\n    ) external onlyDEX returns (bool) {\r\n        if (isERC20Token(symbol))\r\n            TokenInterface(contractAddress[symbol]).transfer(recipient, amount);\r\n        else recipient.transfer(amount);\r\n\r\n        emit LiquidityTransfer(symbol, recipient, amount, block.timestamp);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(string memory symbol) public view returns (uint256) {\r\n        if (isERC20Token(symbol))\r\n            return\r\n                TokenInterface(contractAddress[symbol]).balanceOf(\r\n                    address(this)\r\n                );\r\n        else return address(this).balance;\r\n    }\r\n\r\n    function isERC20Token(string memory symbol) public view returns (bool) {\r\n        return contractAddress[symbol] != address(0x0);\r\n    }\r\n\r\n    function updateDEX(address newDEX) external onlyOwner returns (bool) {\r\n        emit DEXUpdated(DEX, newDEX);\r\n        DEX = newDEX;\r\n        return true;\r\n    }\r\n\r\n    function newLiquidity(address _contract) private onlyOwner returns (bool) {\r\n        string memory symbol = TokenInterface(_contract).symbol();\r\n        allLiquidities.push(symbol);\r\n        contractAddress[symbol] = _contract;\r\n        return true;\r\n    }\r\n\r\n    function setTokenContract(string calldata symbol, address newContract)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(isERC20Token(symbol));\r\n        contractAddress[symbol] = newContract;\r\n        emit TokenUpdated(symbol, newContract);\r\n        return true;\r\n    }\r\n\r\n    function totalLiquidities() external view returns (uint256) {\r\n        return allLiquidities.length;\r\n    }\r\n\r\n    function destroy() external onlyOwner {\r\n        // index 0 is ethereum\r\n        for (uint8 a = 1; a < allLiquidities.length; a++) {\r\n            string memory currency = allLiquidities[a];\r\n            TokenInterface(contractAddress[currency]).transfer(\r\n                owner(),\r\n                balanceOf(currency)\r\n            );\r\n        }\r\n\r\n        selfdestruct(payable(owner()));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gsu\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDEX\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDEX\",\"type\":\"address\"}],\"name\":\"DEXUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiquidityTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiquidityWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLiquidities\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"isERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDEX\",\"type\":\"address\"}],\"name\":\"updateDEX\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Liquidity","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4a4e4fcf437de891355f6684f2534ac2c916b650000000000000000000000003931af3546151b936890aff5390aaf53d3a219d6000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d146ce310b33beb21df12880f152793d5764c348004522fb711325686ccddc1d"}]}