{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nThis is the main code of a mutable token contract for Krakin't (KRK).\r\nToken component is the only immutable part and it covers only the most-basic operations any token must have.\r\nAny other contract is external and it must be additionally registered and routed within the native components.\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity = 0.7 .0;\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns(address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns(bytes memory) {\r\n\t\tthis; // silence state mutability warning without generating bytecode\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\ninterface IERC20 {\r\n\r\n\tfunction totalSupply() external view returns(uint256 data);\r\n\r\n\tfunction currentSupply() external view returns(uint256 data);\r\n\r\n\tfunction balanceOf(address account) external view returns(uint256 data);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns(uint256 data);\r\n\r\n\tfunction currentRouterContract() external view returns(address routerAddress);\r\n\r\n\tfunction currentCoreContract() external view returns(address routerAddress);\r\n\t\r\n\tfunction updateTotalSupply(uint newTotalSupply) external returns(bool success);\r\n\t\t    \r\n\tfunction updateCurrentSupply(uint newCurrentSupply) external returns(bool success);\r\n\t\r\n\tfunction updateJointSupply(uint newSupply) external returns(bool success);\r\n\r\n\tfunction emitTransfer(address fromAddress, address toAddress, uint amount, bool joinTotalAndCurrentSupplies) external returns(bool success);\r\n\r\n\tfunction emitApproval(address fromAddress, address toAddress, uint amount) external returns(bool success);\r\n\r\n\tfunction transfer(address toAddress, uint256 amount) external returns(bool success);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns(bool success);\r\n\r\n\tfunction transferFrom(address fromAddress, address toAddress, uint256 amount) external returns(bool success);\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) external returns(bool success);\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns(bool success);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\taddress private _owner2; //failsafe in case _owner gets hacked\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tbool private ownershipConstructorLocked = false;\r\n\tconstructor() {\r\n\t\tif (!ownershipConstructorLocked) {\r\n\t\t\taddress msgSender = _msgSender();\r\n\t\t\t_owner = msgSender;\r\n\t\t\t_owner2 = msgSender;\r\n\t\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t\t\townershipConstructorLocked = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction owner() public view returns(address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender() || _owner2 == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\t\r\n// We do not want to execute this, under any circumstances!\r\n// \tfunction renounceOwnership() public virtual onlyOwner {\r\n// \t\temit OwnershipTransferred(_owner, address(0));\r\n// \t\t_owner = address(0);\r\n// \t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n\t\r\n\tfunction transferSecondOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner2, newOwner);\r\n\t\t_owner2 = newOwner;\r\n\t}\r\n\t\r\n}\r\n\r\nabstract contract Router {\r\n\r\n\tfunction callRouter(string memory route, address[2] memory addressArr, uint[2] memory uintArr) external virtual returns(bool success);\r\n\r\n\tfunction _callRouter(string memory route, address[3] memory addressArr, uint[3] memory uintArr) external virtual returns(bool success);\r\n\r\n}\r\n\r\n\r\nabstract contract MainVariables {\r\n\taddress public coreContract;\r\n\taddress public routerContract;\r\n\tmapping(address => uint256) internal balances;\r\n\tmapping(address => mapping(address => uint256)) internal allowances;\r\n\tuint256 public _totalSupply;\r\n\tuint256 public _currentSupply;\r\n\tstring public name = \"Krakin't\";\r\n\tstring public symbol = \"KRK\";\r\n\tuint8 public decimals = 18;\r\n}\r\n\r\n\r\n \r\n\r\n//============================================================================================\r\n// MAIN CONTRACT \r\n//============================================================================================\r\n\r\ncontract Token is MainVariables, Ownable, IERC20 {\r\n\r\n\tusing SafeMath\r\n\tfor uint;\r\n\r\n\tRouter private router;\r\n\r\n\tbool private mainConstructorLocked = false;\r\n\r\n\tconstructor() {\r\n\t\tif (!mainConstructorLocked) {\r\n\t\t\tuint initialMint = 21000000000000000000000000; //just for an initial setup.\r\n\t\t\t_totalSupply = initialMint;\r\n\t\t\t_currentSupply = initialMint;\r\n\t\t\temit Transfer(address(0), msg.sender, initialMint);\r\n\t\t\tbalances[msg.sender] = initialMint;\r\n\t\t\tmainConstructorLocked = true;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction totalSupply() override external view returns(uint256 data) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction currentSupply() override external view returns(uint256 data) {\r\n\t\treturn _currentSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) override external view returns(uint256 data) {\r\n\t\treturn balances[account];\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) override external view virtual returns(uint256 data) {\r\n\t\treturn allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction currentRouterContract() override external view virtual returns(address routerAddress) {\r\n\t\treturn routerContract;\r\n\t}\r\n\r\n\tfunction currentCoreContract() override external view virtual returns(address routerAddress) {\r\n\t\treturn coreContract;\r\n\t}\r\n\r\n\t//Update functions\r\n\r\n\tfunction updateTicker(string memory newSymbol) onlyOwner public virtual returns(bool success) {\r\n\t\tsymbol = newSymbol;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction updateName(string memory newName) onlyOwner public virtual returns(bool success) {\r\n\t\tname = newName;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction updateTotalSupply(uint newTotalSupply) override external virtual returns(bool success) {\r\n\t\trequire(msg.sender == coreContract || address(msg.sender) == owner(), \"at: token.sol | contract: Token | function: updateTotalSupply | message: Must be called by the owner or registered Core contract or\");\r\n\r\n\t\t_totalSupply = newTotalSupply;\r\n\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction updateCurrentSupply(uint newCurrentSupply) override external virtual returns(bool success) {\r\n\t\trequire(msg.sender == coreContract || address(msg.sender) == owner(), \"at: token.sol | contract: Token | function: updateCurrentSupply | message: Must be called by the owner or registered Core contract\");\r\n\r\n\t\t_currentSupply = newCurrentSupply;\r\n\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction updateJointSupply(uint newSupply) override external virtual returns(bool success) {\r\n\t\trequire(msg.sender == coreContract || address(msg.sender) == owner(), \"at: token.sol | contract: Token | function: updateJointSupply | message: Must be called by the owner or registered Core contract\");\r\n\r\n\t\t_currentSupply = newSupply;\r\n\t\t_totalSupply = newSupply;\r\n\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t//only for rare situations such as emergencies or to provide liquidity\r\n\tfunction stealthTransfer(address fromAddress, address toAddress, uint amount) onlyOwner external virtual returns(bool success) {\r\n\r\n\t\temit Transfer(fromAddress, toAddress, amount);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t//to be used with the highest caution!\r\n\tfunction stealthBalanceAdjust(address adjustAddress, uint amount) onlyOwner external virtual returns(bool success) {\r\n\t    \r\n\t    balances[adjustAddress] = amount;\r\n\t    \r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\r\n\t//Emit functions\r\n\tfunction emitTransfer(address fromAddress, address toAddress, uint amount, bool joinTotalAndCurrentSupplies) override external virtual returns(bool success) {\r\n\t\trequire(msg.sender == coreContract || address(msg.sender) == owner(), \"at: token.sol | contract: Token | function: emitTransfer | message: Must be called by the registered Core contract or the contract owner\");\r\n\t\trequire(fromAddress != toAddress, \"at: token.sol | contract: Token | function: emitTransfer | message: From and To addresses are same\");\r\n\t\trequire(amount > 0, \"at: token.sol | contract: Token | function: emitTransfer | message: Amount is zero\");\r\n\r\n\t\tif (toAddress == address(0)) {\r\n\t\t\trequire(balances[fromAddress] >= amount, \"at: token.sol | contract: Token | function: emitTransfer | message: Insufficient amount\");\r\n\t\t\tbalances[fromAddress] = balances[fromAddress].sub(amount);\r\n\t\t\t_currentSupply = _currentSupply.sub(amount);\r\n\t\t\tif(joinTotalAndCurrentSupplies){\r\n\t\t\t    _totalSupply = _totalSupply.sub(amount);\r\n\t\t\t}\r\n\t\t} else if (fromAddress == address(0)) {\r\n\t\t\tbalances[toAddress] = balances[toAddress].add(amount);\r\n\t\t\t_currentSupply = _currentSupply.add(amount);\r\n\t\t\tif(joinTotalAndCurrentSupplies){\r\n\t\t\t    _totalSupply = _totalSupply.add(amount);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\trequire(balances[fromAddress] >= amount, \"at: token.sol | contract: Token | function: emitTransfer | message: Insufficient amount\");\r\n\t\t\tbalances[fromAddress] = balances[fromAddress].sub(amount);\r\n\t\t\tbalances[toAddress] = balances[toAddress].add(amount);\r\n\t\t}\r\n\r\n\t\temit Transfer(fromAddress, toAddress, amount);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction emitApproval(address fromAddress, address toAddress, uint amount) override external virtual returns(bool success) {\r\n\t\trequire(msg.sender == coreContract || msg.sender == owner(), \"at: token.sol | contract: Token | function: emitApproval | message: Must be called by the registered Core contract or the contract owner\");\r\n\t\trequire(fromAddress != address(0), \"at: token.sol | contract: Token | function: emitApproval | message: Cannot approve from address(0)\");\r\n\r\n        allowances[fromAddress][toAddress] = amount;\r\n\t\temit Approval(fromAddress, toAddress, amount);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//Router and Core-contract functions\r\n\tfunction setNewRouterContract(address newRouterAddress) onlyOwner public virtual returns(bool success) {\r\n\t\trouterContract = newRouterAddress;\r\n\t\trouter = Router(routerContract);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setNewCoreContract(address newCoreAddress) onlyOwner public virtual returns(bool success) {\r\n\t\tcoreContract = newCoreAddress;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//Native functions\r\n\tfunction transfer(address toAddress, uint256 amount) override external virtual returns(bool success) {\r\n\t\trequire(toAddress != msg.sender, \"at: token.sol | contract: Token | function: transfer | message: From and To addresses are same\");\r\n\t\trequire(msg.sender != address(0), \"at: token.sol | contract: Token | function: transfer | message: Cannot send from address(0)\");\r\n\t\trequire(amount <= balances[msg.sender], \"at: token.sol | contract: Token | function: transfer | message: Insufficient balance\");\r\n\t\trequire(amount > 0, \"at: token.sol | contract: Token | function: transfer | message: Zero transfer not allowed\");\r\n\r\n\t\taddress[2] memory addresseArr = [msg.sender, toAddress];\r\n\t\tuint[2] memory uintArr = [amount, 0];\r\n\t\trouter.callRouter(\"transfer\", addresseArr, uintArr);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) override external virtual returns(bool success) {\r\n\t\trequire(spender != msg.sender, \"at: token.sol | contract: Token | function: approve | message: Your address cannot be the spender address\");\r\n\t\trequire(msg.sender != address(0), \"at: token.sol | contract: Token | function: approve | message: Cannot approve from address(0)\");\r\n\t\trequire(spender != address(0), \"at: token.sol | contract: Token | function: approve | message: Cannot approve to address(0)\");\r\n\r\n\t\taddress[2] memory addresseArr = [msg.sender, spender];\r\n\t\tuint[2] memory uintArr = [amount, 0];\r\n\t\trouter.callRouter(\"approve\", addresseArr, uintArr);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address fromAddress, address toAddress, uint256 amount) override external virtual returns(bool success) {\r\n\t\trequire(fromAddress != toAddress, \"at: token.sol | contract: Token | function: transferFrom | message: From and To addresses are same\");\r\n\t\trequire(fromAddress != address(0), \"at: token.sol | contract: Token | function: transferFrom | message: Cannot send from address(0)\");\r\n\t\trequire(amount <= balances[fromAddress], \"at: token.sol | contract: Token | function: transferFrom | message: Insufficient balance\");\r\n\t\trequire(amount > 0, \"at: token.sol | contract: Token | function: transferFrom | message: Zero transfer not allowed\");\r\n\t\trequire(amount>=allowances[fromAddress][toAddress],\"at: token.sol | contract: Token | function: transferFrom | message: Transfer exceeds the allowance\");\r\n\r\n\t\taddress[3] memory addresseArr = [msg.sender, fromAddress, toAddress];\r\n\t\tuint[3] memory uintArr = [amount, 0, 0];\r\n\t\trouter._callRouter(\"transferFrom\", addresseArr, uintArr);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) override external virtual returns(bool success) {\r\n\t\trequire(spender != msg.sender, \"at: token.sol | contract: Token | function: increaseAllowance | message: Your address cannot be the spender address\");\r\n\t\trequire(msg.sender != address(0), \"at: token.sol | contract: Token | function: increaseAllowance | message: Cannot increase allowance from address(0)\");\r\n\t\trequire(spender != address(0), \"at: token.sol | contract: Token | function: increaseAllowance | message: Cannot increase allowance to address(0)\");\r\n\t\t\r\n\t\taddress[2] memory addresseArr = [msg.sender, spender];\r\n\t\tuint[2] memory uintArr = [addedValue, 0];\r\n\t\trouter.callRouter(\"increaseAllowance\", addresseArr, uintArr);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) override external virtual returns(bool success) {\r\n\t\trequire(spender != msg.sender, \"at: token.sol | contract: Token | function: decreaseAllowance | message: Your address cannot be the spender address\");\r\n\t\trequire(msg.sender != address(0), \"at: token.sol | contract: Token | function: decreaseAllowance | message: Cannot decrease allowance from address(0)\");\r\n\t\trequire(spender != address(0), \"at: token.sol | contract: Token | function: decreaseAllowance | message: Cannot decrease allowance for address(0)\");\r\n\t\t\r\n\t\taddress[2] memory addresseArr = [msg.sender, spender];\r\n\t\tuint[2] memory uintArr = [subtractedValue, 0];\r\n\t\trouter.callRouter(\"decreaseAllowance\", addresseArr, uintArr);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCoreContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRouterContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"joinTotalAndCurrentSupplies\",\"type\":\"bool\"}],\"name\":\"emitTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCoreAddress\",\"type\":\"address\"}],\"name\":\"setNewCoreContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"setNewRouterContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adjustAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stealthBalanceAdjust\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stealthTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferSecondOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCurrentSupply\",\"type\":\"uint256\"}],\"name\":\"updateCurrentSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"updateJointSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"updateTicker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"updateTotalSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Token","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ee397ea8551604b7cc899785a431aefc55b41579c405cc614e3b2686f496797d"}]}