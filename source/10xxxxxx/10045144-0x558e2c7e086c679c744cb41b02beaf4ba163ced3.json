{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/Owned.sol\r\n\r\n// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.4;\r\n\r\n/**\r\n * @title Owned\r\n * @dev Basic contract to define an owner.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract Owned {\r\n\r\n    // The owner\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"O: Must be owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner transfer ownership of the contract to a new owner.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"O: _newOwner must not be 0\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/MethodRegistry.sol\r\n\r\n// Copyright (C) 2020  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title MethodRegistry\r\n * @dev Registry of (contract, method signature) tuples.\r\n * @author Olivier Vdb - <olivier@argent.xyz>\r\n */\r\ncontract MethodRegistry is Owned {\r\n\r\n    event Registration(address indexed _contract, bytes4 _method);\r\n    event Deregistration(address indexed _contract, bytes4 _method);\r\n\r\n    mapping(address => mapping(bytes4 => bool)) public isRegistered; // [contract_addr][method_sig] => bool\r\n\r\n    // Used by `addList()` and `removeList()`\r\n    struct ContractMethod {\r\n        address addr;\r\n        bytes4 method;\r\n    }\r\n\r\n    /************************ External Methods *******************************/\r\n\r\n    function add(address _contract, bytes4 _method) external onlyOwner {\r\n        _add(_contract, _method);\r\n    }\r\n\r\n    function remove(address _contract, bytes4 _method) external onlyOwner {\r\n        _remove(_contract, _method);\r\n    }\r\n\r\n    function addList(ContractMethod[] calldata _contractMethods) external onlyOwner {\r\n        for(uint i = 0; i < _contractMethods.length; i++) {\r\n            _add(_contractMethods[i].addr, _contractMethods[i].method);\r\n        }\r\n    }\r\n\r\n    function removeList(ContractMethod[] calldata _contractMethods) external onlyOwner {\r\n        for(uint i = 0; i < _contractMethods.length; i++) {\r\n            _remove(_contractMethods[i].addr, _contractMethods[i].method);\r\n        }\r\n    }\r\n\r\n    /************************ Internal Methods *******************************/\r\n\r\n    function _add(address _contract, bytes4 _method) internal {\r\n        require(!isRegistered[_contract][_method], \"MR: Already registered\");\r\n        isRegistered[_contract][_method] = true;\r\n        emit Registration(_contract, _method);\r\n    }\r\n\r\n    function _remove(address _contract, bytes4 _method) internal {\r\n        require(isRegistered[_contract][_method], \"MR: Not registered\");\r\n        delete isRegistered[_contract][_method];\r\n        emit Deregistration(_contract, _method);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"_method\",\"type\":\"bytes4\"}],\"name\":\"Deregistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"_method\",\"type\":\"bytes4\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_method\",\"type\":\"bytes4\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"}],\"internalType\":\"struct MethodRegistry.ContractMethod[]\",\"name\":\"_contractMethods\",\"type\":\"tuple[]\"}],\"name\":\"addList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_method\",\"type\":\"bytes4\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"}],\"internalType\":\"struct MethodRegistry.ContractMethod[]\",\"name\":\"_contractMethods\",\"type\":\"tuple[]\"}],\"name\":\"removeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MethodRegistry","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c3c6ff81a7a6bdeb7c679713d4637676ceab68b155dda3c6b6a2152a8e7055e0"}]}