{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n* @dev This is the Axia Protocol Staking pool 4 contract (AXIA LONE Pool), a part of the protocol where stakers are rewarded in AXIA tokens \r\n* when they make stakes of Axia tokens.\r\n\r\n* stakers reward come from the daily emission from the total supply into circulation,\r\n* this happens daily and upon the reach of a new epoch each made of 180 days, \r\n* halvings are experienced on the emitting amount of tokens.\r\n\r\n\r\n* on the 11th epoch all the tokens would have been completed emitted into circulation,\r\n* from here on, the stakers will still be earning from daily emissions\r\n* which would now be coming from the accumulated basis points over the epochs.\r\n\r\n* upon unstaking, stakers are charged a fee of 1% of their unstaking sum which is\r\n* burnt forever, thereby reducing the total supply. this gives the Axia token its deflationary feature.\r\n\r\n\r\n*/\r\npragma solidity 0.6.4;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function supplyeffect(uint _amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ASP{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    //======================================EVENTS=========================================//\r\n    event StakeEvent(address indexed staker, address indexed pool, uint amount);\r\n    event UnstakeEvent(address indexed unstaker, address indexed pool, uint amount);\r\n    event RewardEvent(address indexed staker, address indexed pool, uint amount);\r\n    event RewardStake(address indexed staker, address indexed pool, uint amount);\r\n    \r\n    \r\n    //======================================STAKING POOL=========================================//\r\n    address public Axiatoken;\r\n    \r\n    bool public stakingEnabled;\r\n    \r\n    uint256 constant private FLOAT_SCALAR = 2**64;\r\n    uint256 public MINIMUM_STAKE = 1000000000000000000; // 1000 AXIA Tokens\r\n\tuint256 public MIN_DIVIDENDS_DUR = 18 hours;\r\n\tuint256 private  UNSTAKE_FEE = 1; //1% burns when you unstake\r\n\tuint public infocheck;\r\n\tuint _burnedAmount;\r\n\tuint actualValue;\r\n    \r\n    struct User {\r\n\t\tuint256 balance;\r\n\t\tuint256 frozen;\r\n\t\tint256 scaledPayout;  \r\n\t\tuint256 staketime;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tuint256 totalFrozen;\r\n\t\tmapping(address => User) users;\r\n\t\tuint256 scaledPayoutPerToken; //pool balance \r\n\t\taddress admin;\r\n\t}\r\n\t\r\n\tInfo private info;\r\n\t\r\n\t\r\n\tconstructor() public {\r\n       \r\n\t    info.admin = msg.sender;\r\n\t\tstakingEnabled = false;\r\n\t\t\r\n\t}\r\n\t\r\n//======================================ADMINSTRATION=========================================//\r\n\r\n\tmodifier onlyCreator() {\r\n        require(msg.sender == info.admin, \"Ownable: caller is not the administrator\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAxiaToken() {\r\n        require(msg.sender == Axiatoken, \"Authorization: only token contract can call\");\r\n        _;\r\n    }\r\n    \r\n\t function tokenconfigs(address _axiatoken) public onlyCreator returns (bool success) {\r\n        Axiatoken = _axiatoken;\r\n        return true;\r\n    }\r\n\t\r\n\tfunction _minStakeAmount(uint256 _number) onlyCreator public {\r\n\t\t\r\n\t\tMINIMUM_STAKE = _number*1000000000000000000;\r\n\t\t\r\n\t}\r\n    \r\n    function stakingStatus(bool _status) public onlyCreator {\r\n    require(Axiatoken != address(0), \"Pool address is not yet setup\");\r\n\tstakingEnabled = _status;\r\n    }\r\n    \r\n    function unstakeburnrate(uint _rate) public onlyCreator returns (bool success) {\r\n        UNSTAKE_FEE = _rate;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function MIN_DIVIDENDS_DUR_TIME(uint256 _minDuration) public onlyCreator {\r\n        \r\n\tMIN_DIVIDENDS_DUR = _minDuration;\r\n\t\r\n    }\r\n//======================================USER WRITE=========================================//\r\n\r\n\tfunction StakeAxiaTokens(uint256 _tokens) external {\r\n\t\t_stake(_tokens);\r\n\t}\r\n    \r\n    function UnstakeAxiaTokens(uint256 _tokens) external {\r\n\t\t_unstake(_tokens);\r\n\t}\r\n\t\r\n//======================================USER READ=========================================//\r\n\r\n\tfunction totalFrozen() public view returns (uint256) {\r\n\t\treturn info.totalFrozen;\r\n\t}\r\n\t\r\n    function frozenOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].frozen;\r\n\t}\r\n\r\n\tfunction dividendsOf(address _user) public view returns (uint256) {\r\n\t    \r\n\t    if(info.users[_user].staketime < MIN_DIVIDENDS_DUR){\r\n\t        return 0;\r\n\t    }else{\r\n\t     return uint256(int256(info.scaledPayoutPerToken * info.users[_user].frozen) - info.users[_user].scaledPayout) / FLOAT_SCALAR;   \r\n\t    }\r\n\t}\r\n\t\r\n\r\n\tfunction userData(address _user) public view \r\n\treturns (uint256 totalTokensFrozen, uint256 userFrozen, \r\n\tuint256 userDividends, uint256 userStaketime, int256 scaledPayout) {\r\n\t    \r\n\t\treturn (totalFrozen(), frozenOf(_user), dividendsOf(_user), info.users[_user].staketime, info.users[_user].scaledPayout);\r\n\t\r\n\t    \r\n\t}\r\n\t\r\n\r\n//======================================ACTION CALLS=========================================//\t\r\n\t\r\n\tfunction _stake(uint256 _amount) internal {\r\n\t    \r\n\t    require(stakingEnabled, \"Staking not yet initialized\");\r\n\t    \r\n\t\trequire(IERC20(Axiatoken).balanceOf(msg.sender) >= _amount, \"Insufficient Axia token balance\");\r\n\t\trequire(frozenOf(msg.sender) + _amount >= MINIMUM_STAKE, \"Your amount is lower than the minimum amount allowed to stake\");\r\n\t\trequire(IERC20(Axiatoken).allowance(msg.sender, address(this)) >= _amount, \"Not enough allowance given to contract yet to spend by user\");\r\n\t\t\r\n\t\tinfo.users[msg.sender].staketime = now;\r\n\t\tinfo.totalFrozen += _amount;\r\n\t\tinfo.users[msg.sender].frozen += _amount;\r\n\t\t\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken); \r\n\t\tIERC20(Axiatoken).transferFrom(msg.sender, address(this), _amount);      // Transfer liquidity tokens from the sender to this contract\r\n\t\t\r\n        emit StakeEvent(msg.sender, address(this), _amount);\r\n\t}\r\n\t\r\n\t    \r\n\t\r\n\tfunction _unstake(uint256 _amount) internal {\r\n\t    \r\n\t\trequire(frozenOf(msg.sender) >= _amount, \"You currently do not have up to that amount staked\");\r\n\t\t\r\n\t\tinfo.totalFrozen -= _amount;\r\n\t\tinfo.users[msg.sender].frozen -= _amount;\r\n\t\tinfo.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);\r\n\t\t\r\n\t\t_burnedAmount = mulDiv(_amount, UNSTAKE_FEE, 100);\r\n\t\tactualValue = _amount.sub(_burnedAmount);\r\n\t\t\r\n\t\trequire(IERC20(Axiatoken).transfer(msg.sender, actualValue), \"Transaction failed\");\r\n        emit UnstakeEvent(address(this), msg.sender, actualValue);\r\n\t\t\r\n\t\t\r\n\t\trequire(IERC20(Axiatoken).transfer(address(0x0), _burnedAmount), \"Transaction failed\");\r\n \t\tIERC20(Axiatoken).supplyeffect(_burnedAmount);\r\n \t\t\r\n\t\t\r\n\t}\r\n\t\t\r\n\t\t\r\n\tfunction TakeDividends() external returns (uint256) {\r\n\t\t    \r\n\t\tuint256 _dividends = dividendsOf(msg.sender);\r\n\t\trequire(_dividends >= 0, \"you do not have any dividend yet\");\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);\r\n\t\t\r\n\t\trequire(IERC20(Axiatoken).transfer(msg.sender, _dividends), \"Transaction Failed\");    // Transfer dividends to msg.sender\r\n\t\temit RewardEvent(msg.sender, address(this), _dividends);\r\n\t\t\r\n\t\treturn _dividends;\r\n\t    \r\n\t\t    \r\n\t}\r\n\t\t\r\n\t\t\r\n\tfunction scaledToken(uint _amount) external onlyAxiaToken returns(bool){\r\n            \r\n    \t\tinfo.scaledPayoutPerToken += _amount * FLOAT_SCALAR / info.totalFrozen;\r\n    \t\tinfocheck = info.scaledPayoutPerToken;\r\n    \t\treturn true;\r\n            \r\n    }\r\n \r\n        \r\n    function mulDiv (uint x, uint y, uint z) public pure returns (uint) {\r\n              (uint l, uint h) = fullMul (x, y);\r\n              assert (h < z);\r\n              uint mm = mulmod (x, y, z);\r\n              if (mm > l) h -= 1;\r\n              l -= mm;\r\n              uint pow2 = z & -z;\r\n              z /= pow2;\r\n              l /= pow2;\r\n              l += h * ((-pow2) / pow2 + 1);\r\n              uint r = 1;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              r *= 2 - z * r;\r\n              return l * r;\r\n    }\r\n        \r\n    function fullMul (uint x, uint y) private pure returns (uint l, uint h) {\r\n              uint mm = mulmod (x, y, uint (-1));\r\n              l = x * y;\r\n              h = mm - l;\r\n              if (mm < l) h -= 1;\r\n    }\r\n \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unstaker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Axiatoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DIVIDENDS_DUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDuration\",\"type\":\"uint256\"}],\"name\":\"MIN_DIVIDENDS_DUR_TIME\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"StakeAxiaTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TakeDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"UnstakeAxiaTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"_minStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"frozenOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infocheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"mulDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"scaledToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"stakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_axiatoken\",\"type\":\"address\"}],\"name\":\"tokenconfigs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"unstakeburnrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensFrozen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userFrozen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStaketime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"scaledPayout\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ASP","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6a6e51c4f54998cabee3d3da13a628f4c56729a0416128c67fdf8a9611b54336"}]}