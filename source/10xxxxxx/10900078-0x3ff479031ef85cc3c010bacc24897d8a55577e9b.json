{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n \r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed burner, uint256 value);\r\n}\r\n \r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n     \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n     \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n     \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n \r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    uint256 totalSupply_;\r\n    uint256 burnedTotalNum_;\r\n\r\n  \r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n \r\n    function totalBurned() public view returns (uint256) {\r\n        return burnedTotalNum_;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool) {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        burnedTotalNum_ = burnedTotalNum_.add(_value);\r\n\r\n        emit Burn(burner, _value);\r\n        return true;\r\n    }\r\n\r\n  \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        // if _to is address(0), invoke burn function.\r\n        if (_to == address(0)) {\r\n            return burn(_value);\r\n        }\r\n\r\n        require(_value <= balances[msg.sender]);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n \r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n \r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\ncontract StandardToken is ERC20, BasicToken {\r\n    uint private constant MAX_UINT = 2**256 - 1;\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function burnFrom(address _owner, uint256 _value) public returns (bool) {\r\n        require(_owner != address(0));\r\n        require(_value <= balances[_owner]);\r\n        require(_value <= allowed[_owner][msg.sender]);\r\n\r\n        balances[_owner] = balances[_owner].sub(_value);\r\n        if (allowed[_owner][msg.sender] < MAX_UINT) {\r\n            allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_value);\r\n        }\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        burnedTotalNum_ = burnedTotalNum_.add(_value);\r\n\r\n        emit Burn(_owner, _value);\r\n        return true;\r\n    }\r\n\r\n     \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if (_to == address(0)) {\r\n            return burnFrom(_from, _value);\r\n        }\r\n\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n  \r\n        if (allowed[_from][msg.sender] < MAX_UINT) {\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n     \r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n     \r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n     \r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n     \r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract KugulaToken is StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    string     public name = \"Kugula\";\r\n    string     public symbol = \"KGL\";\r\n    uint8      public decimals = 18;\r\n\r\n    constructor() public {\r\n        totalSupply_ = 10000000000000000000000000;\r\n        balances[msg.sender] = totalSupply_;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"BasicToken","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://34b5af57c30d0bedb177ebec10d9b8debc5ad9c07e0d690b6dddd10403129f78"}]}