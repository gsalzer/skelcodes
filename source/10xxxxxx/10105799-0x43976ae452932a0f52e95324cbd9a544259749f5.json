{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.1;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;}\r\n}\r\n\r\ninterface Uniswap{\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface Token{\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function primary() external view returns (address payable);\r\n}\r\n\r\ncontract Secondary{\r\n    \r\n    address constant public OUSDAddress = 0xD2d01dd6Aa7a2F5228c7c17298905A7C7E1dfE81;\r\n\r\n    function primary() internal view returns (address payable) {\r\n        return Token(OUSDAddress).primary();\r\n    }\r\n}\r\n\r\ncontract OnyxZap is Secondary{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address constant public ROUTER      = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\r\n    address constant public FACTORY     = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address constant public WETHAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    uint constant public INF = 33136721784;\r\n\r\n    function LetsInvest(address _TokenContractAddress, address _towhomtoissue) public payable{\r\n        \r\n        //get pool address for token\r\n        address poolAddress = Uniswap(FACTORY).getPair(_TokenContractAddress, WETHAddress);\r\n        require(poolAddress != address(0), \"WETH/Token pool does not exist\");\r\n        \r\n        uint a = msg.value;                                 //Eth given to Zap\r\n        uint b = Token(WETHAddress).balanceOf(poolAddress); //Eth in uniswap\r\n        \r\n        //Eth to trade for token\r\n        uint c = (a.mul(  b.mul(107000).add(a.mul(8030))  )).div(  b.mul(213679).add(a.mul(55916))  );\r\n        \r\n        uint tokensBefore = Token(_TokenContractAddress).balanceOf(address(this));\r\n        \r\n        //getting tokens\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETHAddress;\r\n        path[1] = _TokenContractAddress;\r\n        Uniswap(ROUTER).swapExactETHForTokens.value(c)(1, path, address(this), INF);\r\n        \r\n        //pool eth and tokens\r\n        uint tokensAfter = Token(_TokenContractAddress).balanceOf(address(this));\r\n        uint amountTokenDesired = tokensAfter.sub(tokensBefore);\r\n        Token(_TokenContractAddress).approve(ROUTER, amountTokenDesired); //allow pool to get tokens\r\n        Uniswap(ROUTER).addLiquidityETH.value( a.sub(c) )(_TokenContractAddress, amountTokenDesired, 1, 1, _towhomtoissue, INF);\r\n        \r\n        //trade extra tokens back to eth\r\n        uint tokensAfterAfter = Token(_TokenContractAddress).balanceOf(address(this));\r\n        path[0] = _TokenContractAddress;\r\n        path[1] = WETHAddress;\r\n        Uniswap(ROUTER).swapExactTokensForETH(tokensAfterAfter.sub(tokensBefore), 1, path, _towhomtoissue, INF);\r\n    }\r\n    \r\n    function getStuckTokens(address _tokenAddress) public {\r\n        Token(_tokenAddress).transfer(primary(), Token(_tokenAddress).balanceOf(address(this)));\r\n    }\r\n    \r\n    function getStuckETH() public {\r\n        primary().transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_towhomtoissue\",\"type\":\"address\"}],\"name\":\"LetsInvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OUSDAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OnyxZap","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7090b8f974cb625574b4f6cb4bcd142459af94ad454462c119189b4a4b56de12"}]}