{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24 <0.6.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract SetterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event SetterAdded(address indexed account);\r\n    event SetterRemoved(address indexed account);\r\n\r\n    Roles.Role private _setters;\r\n\r\n    constructor () internal {\r\n        _addSetter(msg.sender);\r\n    }\r\n\r\n    modifier onlySetter() {\r\n        require(isSetter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isSetter(address account) public view returns (bool) {\r\n        return _setters.has(account);\r\n    }\r\n\r\n    function addSetter(address account) public onlySetter {\r\n        _addSetter(account);\r\n    }\r\n\r\n    function _addSetter(address account) internal {\r\n        _setters.add(account);\r\n        emit SetterAdded(account);\r\n    }\r\n\r\n    function removeSetter(address account) public onlySetter {\r\n        _removeSetter(account);\r\n    }\r\n\r\n    function _removeSetter(address account) internal {\r\n        _setters.remove(account);\r\n        emit SetterRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external payable returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract Erc20StdI {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract DBMintI {\r\n    function mint(address _beneficiary, uint _txAmount, address _pairAddress) public;\r\n}\r\n\r\ncontract BDEthPay is SetterRole {\r\n    using SafeMath for uint;\r\n\r\n    // ERC20 token for withdraw\r\n    Erc20StdI public erc20;\r\n    // uniswap-v2 router contract\r\n    IUniswapV2Router01 public swapRouter;\r\n    // dividend contract address\r\n    address payable public mintDivsAddr;\r\n\r\n    //Order status\r\n    enum STATUS{\r\n        init, //init：0，cannot cancel this value\r\n        paid, //Order has been paid\r\n        received, //Order has been received\r\n        aborted, //Order has been aborted\r\n        returning, //Order application return\r\n        canceledReturn, //Order canceled for return refund\r\n        refuseReturn, //Order rejected for return refund\r\n        refunded//Order has been returned\r\n    }\r\n\r\n    uint16 public constant  FEE_RATIO = 200;\r\n    uint16 constant         THIS_DIVISOR = 10000;\r\n    uint40 public constant  RETURN_PERIOD = 7 days;\r\n    uint40 public constant  MAX_EXTENSION_PERIOD = 4 days;\r\n    uint   public           lockedInOrders;\r\n\r\n    //Order info\r\n    struct Order {\r\n        address seller;//uint160 20byte\r\n        address buyer; //uint160 20byte\r\n        uint8 status;//1byte\r\n        uint40 endTime;//5byte\r\n        uint sellerAmount;//32byte\r\n        uint returnAmount;//32byte\r\n    }//20+32(20+2+1+5+4)+32+32\r\n\r\n    //All orders data\r\n    mapping(uint => Order) public orders;\r\n\r\n    event Purchase(uint indexed orderID, uint amount);\r\n    event ConfirmReceived(uint indexed orderID);\r\n    event Abort(uint indexed orderID, uint amount);\r\n    event ApplyReturn(uint indexed orderID, uint amount);\r\n    event CancelReturn(uint indexed orderID, uint amount);\r\n    event RefuseReturn(uint indexed orderID);\r\n    event ConfirmReturned(uint indexed orderID);\r\n    event Withdraw(uint indexed orderID, address indexed beneficiary, uint amount);\r\n\r\n    modifier validOrder(uint _orderID){\r\n        require(orders[_orderID].buyer != address(0), \"Order invalid.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _swapRouter, address _tokenAddr, address payable _mintDivsAddr) public{\r\n        // Check address\r\n        require(_swapRouter != address(0) && _tokenAddr != address(0) && _mintDivsAddr != address(0), \"InitAddress is invalid address.\");\r\n        swapRouter = IUniswapV2Router01(_swapRouter);\r\n        mintDivsAddr = _mintDivsAddr;\r\n        erc20 = Erc20StdI(_tokenAddr);\r\n    }\r\n\r\n    function() external payable {\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev purchase\r\n    **/\r\n    function purchase(uint _orderID, address _seller) public payable {\r\n        _purchase(_orderID, _seller, msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Volume Purchase\r\n     **/\r\n    function purchaseMulti(uint[] memory _orderIDs, address[] memory _sellers, uint[] memory _amounts) public payable {\r\n        require(_orderIDs.length > 0\r\n        && _sellers.length == _orderIDs.length\r\n        && _amounts.length == _orderIDs.length, \"Invalid purchase info.\");\r\n\r\n        uint _totalAmount = 0;\r\n        for (uint i = 0; i < _orderIDs.length; i++) {\r\n            _totalAmount = _totalAmount.add(_amounts[i]);\r\n            _purchase(_orderIDs[i], _sellers[i], msg.sender, _amounts[i]);\r\n        }\r\n        require(msg.value == _totalAmount, \"Invalid total amount.\");\r\n    }\r\n\r\n    function _purchase(uint _orderID, address _seller, address _buyer, uint _amount) internal {\r\n        Order storage order = orders[_orderID];\r\n\r\n        require(_orderID > 0, \"Invalid orderID.\");\r\n        require(order.buyer == address(0), \"Order should be in 'clean' state.\");\r\n        require(_buyer != _seller, \"Seller and buyer cannot be the same address.\");\r\n        require(_seller != address(0), \"Seller is invalid address.\");\r\n        require(_buyer != address(0), \"Buyer is invalid address.\");\r\n\r\n        order.seller = _seller;\r\n        order.buyer = _buyer;\r\n        order.status = uint8(STATUS.paid);\r\n        order.sellerAmount = _amount;\r\n        lockedInOrders += _amount;\r\n\r\n        emit Purchase(_orderID, _amount);\r\n    }\r\n\r\n    function getEthBoughtPrice(uint _amountOut) public view returns (uint amount){\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = swapRouter.WETH();\r\n        _path[1] = address(erc20);\r\n\r\n        amount = swapRouter.getAmountsIn(_amountOut, _path)[0];\r\n    }\r\n\r\n    function getTokenBoughtPrice(uint _amountOut) public view returns (uint amount){\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = address(erc20);\r\n        _path[1] = swapRouter.WETH();\r\n\r\n        amount = swapRouter.getAmountsIn(_amountOut, _path)[0];\r\n    }\r\n\r\n    /**\r\n     * @dev confirm received\r\n     **/\r\n    function confirmReceived(uint _orderID) public {\r\n        Order storage order = orders[_orderID];\r\n        // Permission check\r\n        require(msg.sender == order.buyer || isSetter(msg.sender), \"Permission limit.\");\r\n        // Status check\r\n        require(order.status == uint8(STATUS.paid), \"Status is not allowed.\");\r\n\r\n        // Modify data\r\n        order.status = uint8(STATUS.received);\r\n        order.endTime = uint40(block.timestamp + RETURN_PERIOD);\r\n\r\n        emit ConfirmReceived(_orderID);\r\n    }\r\n\r\n    /**\r\n     * @dev abort the order\r\n     **/\r\n    function abort(uint _orderID, bool _isToken) public {\r\n        Order storage order = orders[_orderID];\r\n        uint _sellerAmount = order.sellerAmount;\r\n        // Permission check\r\n        require(msg.sender == order.seller || isSetter(msg.sender), \"Permission limit.\");\r\n        // Status check\r\n        require(order.status == uint8(STATUS.paid), \"Status error.\");\r\n\r\n        // Modify status\r\n        order.returnAmount = _sellerAmount;\r\n        order.sellerAmount = 0;\r\n        order.status = uint8(STATUS.aborted);\r\n\r\n        emit Abort(_orderID, _sellerAmount);\r\n\r\n        // transfer to buyer\r\n        if (_sellerAmount > 0) _withdraw(_orderID, _isToken, address(uint160(order.buyer)));\r\n    }\r\n\r\n    /**\r\n     * @dev Apply order return\r\n     **/\r\n    function applyReturn(uint _orderID, uint _returnAmount) public {\r\n        Order storage order = orders[_orderID];\r\n        uint _sellerAmount = order.sellerAmount;\r\n        // Permission check\r\n        require(msg.sender == order.buyer, \"Permission limit.\");\r\n        // Status check\r\n        require(order.status == uint8(STATUS.received) || order.status == uint8(STATUS.canceledReturn), \"Status is not allowed.\");\r\n        // Time check\r\n        require(block.timestamp < order.endTime, \"Has timed out.\");\r\n        // Amount check\r\n        require(_returnAmount <= _sellerAmount, \"Invalid refund amount.\");\r\n\r\n        //Add extension period\r\n        if (order.status == uint8(STATUS.received) && order.endTime - block.timestamp < MAX_EXTENSION_PERIOD) {\r\n            order.endTime = uint40(block.timestamp + MAX_EXTENSION_PERIOD);\r\n        }\r\n\r\n        // Modify data\r\n        order.status = uint8(STATUS.returning);\r\n        order.returnAmount = _returnAmount;\r\n        order.sellerAmount = _sellerAmount - _returnAmount;\r\n\r\n        emit ApplyReturn(_orderID, _returnAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev cancel order return\r\n     **/\r\n    function cancelReturn(uint _orderID) public {\r\n        Order storage order = orders[_orderID];\r\n        uint _returnAmount = order.returnAmount;\r\n        // Permission check\r\n        require(msg.sender == order.buyer, \"Permission limit.\");\r\n        // Status check\r\n        require(order.status == uint8(STATUS.returning), \"Status is not allowed.\");\r\n\r\n        // Modify data\r\n        order.status = uint8(STATUS.canceledReturn);\r\n        order.sellerAmount += _returnAmount;\r\n        order.returnAmount = 0;\r\n\r\n        emit CancelReturn(_orderID, _returnAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev refuse return\r\n     **/\r\n    function refuseReturn(uint _orderID) public {\r\n        Order storage order = orders[_orderID];\r\n        // Permission check\r\n        require(isSetter(msg.sender), \"Permission limit.\");\r\n        // Status check\r\n        require(order.status == uint8(STATUS.returning), \"Operation is not allowed.\");\r\n\r\n        // Modify status\r\n        order.status = uint8(STATUS.refuseReturn);\r\n        order.sellerAmount += order.returnAmount;\r\n        order.returnAmount = 0;\r\n\r\n        emit RefuseReturn(_orderID);\r\n    }\r\n\r\n    /**\r\n     * @dev confirm returned\r\n     **/\r\n    function confirmReturned(uint _orderID, bool _isToken, uint _returnAmount) public {\r\n        Order storage order = orders[_orderID];\r\n        // Permission check\r\n        require(order.seller == msg.sender || isSetter(msg.sender), \"Permission limit.\");\r\n        // Status check\r\n        require(order.status == uint8(STATUS.returning), \"Operation is not allowed.\");\r\n        // Amount check\r\n        require(order.returnAmount == _returnAmount, \"Return amount is error.\");\r\n\r\n        // Modify status\r\n        order.status = uint8(STATUS.refunded);\r\n\r\n        emit ConfirmReturned(_orderID);\r\n\r\n        // transfer to buyer\r\n        if (order.returnAmount > 0) _withdraw(_orderID, _isToken, address(uint160(order.buyer)));\r\n    }\r\n\r\n    /**\r\n    * @dev seller volume withdraw\r\n    **/\r\n    function withdrawMulti(uint[] memory _orderIDs, bool[] memory _isTokens) public {\r\n        require(_orderIDs.length > 0 && _isTokens.length == _orderIDs.length, \"Invalid orders info.\");\r\n        for (uint i = 0; i < _orderIDs.length; i++) {\r\n            _withdraw(_orderIDs[i], _isTokens[i], msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev seller withdraw token/ether\r\n     **/\r\n    function withdraw(uint _orderID, bool _isToken) public {\r\n        _withdraw(_orderID, _isToken, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev buyer,seller withdraw token/ether\r\n     **/\r\n    function _withdraw(uint _orderID, bool _isToken, address payable sender) internal {\r\n        Order storage order = orders[_orderID];\r\n        uint _returnAmount = order.returnAmount;\r\n        uint _sellerAmount = order.sellerAmount;\r\n        uint8 _status = order.status;\r\n\r\n        // for seller\r\n        if (order.seller == sender && _sellerAmount > 0 && (\r\n        // normal received\r\n        ((_status == uint8(STATUS.received) || _status == uint8(STATUS.canceledReturn)) && uint40(block.timestamp) > order.endTime)\r\n        // rejected return\r\n        || (_status == uint8(STATUS.refuseReturn))\r\n        // part of return\r\n        || (_status == uint8(STATUS.refunded))\r\n        )) {\r\n            uint _revenue = _sellerAmount * FEE_RATIO / THIS_DIVISOR;\r\n            uint _txAmount = _sellerAmount.sub(_revenue);\r\n            // transfer revenue to divsAddr\r\n            if (_revenue > 0) mintDivsAddr.transfer(_revenue);\r\n            // Modify status\r\n            order.sellerAmount = 0;\r\n            lockedInOrders -= _sellerAmount;\r\n            // transfer\r\n            if (!_isToken) {\r\n                sender.transfer(_txAmount);\r\n            } else {\r\n                address[] memory _path = new address[](2);\r\n                _path[0] = swapRouter.WETH();\r\n                _path[1] = address(erc20);\r\n                swapRouter.swapExactETHForTokens.value(_txAmount)(1, _path, sender, block.timestamp + (10 minutes));\r\n            }\r\n            // mining\r\n            DBMintI(mintDivsAddr).mint(order.buyer, _sellerAmount, address(0));\r\n\r\n            emit Withdraw(_orderID, sender, _txAmount);\r\n            return;\r\n        }\r\n        // for buyer\r\n        if (order.buyer == sender && _returnAmount > 0 && (\r\n        // refunded\r\n        (_status == uint8(STATUS.refunded)\r\n        // aborted\r\n        || (_status == uint8(STATUS.aborted))\r\n        // part of aborted and received\r\n        || (_status == uint8(STATUS.received))))) {\r\n            // Modify status\r\n            order.returnAmount = 0;\r\n            lockedInOrders -= _returnAmount;\r\n            // transfer\r\n            sender.transfer(_returnAmount);\r\n            emit Withdraw(_orderID, sender, _returnAmount);\r\n            return;\r\n        }\r\n        revert(\"Something bad happened\");\r\n    }\r\n\r\n    /**\r\n      * @dev reset token contract address.\r\n      */\r\n    function resetTokenAddr(address _tokenAddr) public onlySetter returns (bool isSuccess){\r\n        require(_tokenAddr != address(0), \"_tokenAddr is invalid.\");\r\n        erc20 = Erc20StdI(_tokenAddr);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev reset uniswap-v2 router contract address.\r\n     */\r\n    function resetSwapRouter(address _swapRouter) public onlySetter returns (bool isSuccess){\r\n        require(_swapRouter != address(0), \"_swapRouter is invalid.\");\r\n        swapRouter = IUniswapV2Router01(_swapRouter);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev kill this contract while upgraded.\r\n     */\r\n    function kill() public onlySetter {\r\n        require(lockedInOrders == 0, \"All order balances need to be withdrawn.\");\r\n        selfdestruct(msg.sender);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_mintDivsAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Abort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApplyReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CancelReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"ConfirmReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"ConfirmReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"RefuseReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_RATIO\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_EXTENSION_PERIOD\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RETURN_PERIOD\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isToken\",\"type\":\"bool\"}],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_returnAmount\",\"type\":\"uint256\"}],\"name\":\"applyReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"cancelReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"confirmReceived\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_returnAmount\",\"type\":\"uint256\"}],\"name\":\"confirmReturned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract Erc20StdI\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"getEthBoughtPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"getTokenBoughtPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedInOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintDivsAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"sellerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_orderIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_sellers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"purchaseMulti\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"refuseReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"resetSwapRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"resetTokenAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isToken\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_orderIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isTokens\",\"type\":\"bool[]\"}],\"name\":\"withdrawMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BDEthPay","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f164fc0ec4e93095b804a4795bbe1e041497b92a0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000003c05b735a4a7456f6fee0bbcd64b05c4c64bbcfe","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c951e362b15ee58a817959db473dff0c188de03faeadb5f0118d0e447c5c057e"}]}