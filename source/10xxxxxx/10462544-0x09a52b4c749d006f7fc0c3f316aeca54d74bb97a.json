{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n    event OwnerUpdate     (address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n    address      public  newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Pausable is DSAuth {\r\n    bool public paused;\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"whenNotPaused: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused, \"whenPaused: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the contract owner to pause, triggers stopped state.\r\n     */\r\n    function pause() public whenNotPaused auth {\r\n        paused = true;\r\n        emit Paused(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the contract owner to unpause, returns to normal state.\r\n     */\r\n    function unpause() public whenPaused auth {\r\n        paused = false;\r\n        emit Unpaused(owner);\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool internal notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, notEntered will be true\r\n        require(notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        notEntered = true;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint amount) external;\r\n    function transfer(address recipient, uint amount) external;\r\n    function transferFrom(address sender, address recipient, uint amount) external;\r\n\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ncontract ERC20SafeTransfer {\r\n    function doTransferOut(address _token, address _to, uint _amount) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool _result;\r\n\r\n        token.transfer(_to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    _result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    _result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return _result;\r\n    }\r\n\r\n    function doTransferFrom(address _token, address _from, address _to, uint _amount) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool _result;\r\n\r\n        token.transferFrom(_from, _to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    _result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    _result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return _result;\r\n    }\r\n}\r\n\r\ninterface IPAXG {\r\n    function feeParts() external view returns (uint256);\r\n    function feeRate() external view returns (uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n}\r\n\r\ncontract GOLDx is Pausable, ReentrancyGuard, ERC20SafeTransfer {\r\n    using SafeMath for uint256;\r\n\r\n    // --- ERC20 Data ---\r\n    string  public name;\r\n    string  public symbol;\r\n    uint8   public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // --- Data ---\r\n    bool private initialized;           // Flags for initializing data\r\n\r\n    address public token;               // Basic anchored asset\r\n    address public pendingToken;        // New replacing anchored asset\r\n\r\n    uint256 public unit;                // The exchange rate\r\n    uint256 public pendingUnit;         // New exchange rate\r\n\r\n    uint256 public minMintAmount;\r\n    uint256 public minBurnAmount;\r\n    uint256 public pendingMinMintAmount;\r\n    uint256 public pendingMinBurnAmount;\r\n\r\n    address public feeRecipient;\r\n    mapping(bytes4 => uint256) public fee;\r\n    mapping(address => bool) public blacklists;\r\n    uint256 public upgradeTime;\r\n\r\n    uint256 constant ONE = 10**18;\r\n\r\n    // --- Event ---\r\n    event Approval(address indexed src, address indexed guy, uint256 wad);\r\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\r\n\r\n    event Mint(address indexed dst, uint256 pie);\r\n    event Burn(address indexed src, uint256 wad);\r\n    event FeeCollected(address indexed src, address indexed dst, uint256 value);\r\n\r\n    event BlacklistAdded(address indexed account);\r\n    event BlacklistRemoved(address indexed account);\r\n\r\n    // --- Modifier ---\r\n    /**\r\n     * @dev Modifier to make a function callable when the contract is before upgrading.\r\n     */\r\n    modifier notUpgrading() {\r\n        require(upgradeTime == 0 || upgradeTime > now, \"notUpgrading: Upgrading!\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * The constructor is used here to ensure that the implementation contract is initialized.\r\n     * An uncontrolled implementation contract might lead to misleading state for users\r\n     * who accidentally interact with it.\r\n     */\r\n    constructor(string memory _name, string memory _symbol, address _token) public {\r\n        initialize(_name, _symbol, _token);\r\n    }\r\n\r\n    // --- Init ---\r\n    // This function is used with contract proxy, do not modify this function.\r\n    function initialize(string memory _name, string memory _symbol, address _token) public {\r\n        require(!initialized, \"initialize: Already initialized!\");\r\n        name = _name;\r\n        symbol = _symbol;\r\n        token = _token;\r\n        decimals = 18;\r\n        owner = msg.sender;\r\n        feeRecipient = msg.sender;\r\n        notEntered = true;\r\n        unit = 31103476800000000000;\r\n        initialized = true;\r\n    }\r\n\r\n    // ******************************\r\n    // **** Authorized functions ****\r\n    // ******************************\r\n\r\n    /**\r\n     * @dev Authorized function to set a new exchange rate when wraps anchored asset to GOLDx.\r\n     */\r\n    function setUnit(uint256 _newUnit) external auth {\r\n        require(_newUnit > 0, \"setUnit: New unit should be greater than 0!\");\r\n        require(_newUnit != unit, \"setUnit: New unit should be different!\");\r\n        unit = _newUnit;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to set the minimum valid amount when mints GOLDx.\r\n     */\r\n    function setMinMintAmount(uint256 _minMintAmount) external auth {\r\n        require(_minMintAmount != minMintAmount,\r\n                \"setMinMintAmount: New minimum minting amount should be different!\");\r\n        minMintAmount = _minMintAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to set the minimum valid amount when burns GOLDx.\r\n     */\r\n    function setMinBurnAmount(uint256 _minBurnAmount) external auth {\r\n        require(_minBurnAmount != minBurnAmount,\r\n                \"setMinBurnAmount: New minimum burning amount should be different!\");\r\n        minBurnAmount = _minBurnAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to set a new account to receive fee.\r\n     */\r\n    function setFeeRecipient(address _feeRecipient) external auth {\r\n        require(_feeRecipient != feeRecipient,\r\n                \"setFeeRecipient: New fee recipient should be different!\");\r\n        require(_feeRecipient != address(0),\r\n                \"setFeeRecipient: New fee recipient should not be zero address!\");\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to set fee for operation`_sig`.\r\n     * @param _sig Function to set fee, and uses its selector to represent it.\r\n     * @param _fee New fee when executes this function.\r\n     */\r\n    function setFee(bytes4 _sig, uint256 _fee) external auth {\r\n        require(_fee != fee[_sig], \"setFee: New fee should be different!\");\r\n        fee[_sig] = _fee;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to add an account`_account` to the blacklist.\r\n     * @param _account The address to the blacklist.\r\n     */\r\n    function addBlacklist(address _account) external auth {\r\n        require(!blacklists[_account], \"addBlacklist: Account has been in the blacklist!\");\r\n        blacklists[_account] = true;\r\n        emit BlacklistAdded(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to remove an account`_account` from the blacklist.\r\n     * @param _account The address to remove from the blacklist.\r\n     */\r\n    function removeBlacklist(address _account) external auth {\r\n        require(blacklists[_account], \"removeBlacklist: Account is not in the blacklist!\");\r\n        blacklists[_account] = false;\r\n        emit BlacklistRemoved(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to set config for upgrading to new anchored asset.\r\n     * @param _upgradeTime The timestamp when contract will upgrade protocol.\r\n     * @param _token New anchored asset.\r\n     * @param _unit New exchange rate when wraps new anchored asset to GOLDx.\r\n     * @param _minMintAmount Minimum minting amount when uses the new anchored asset.\r\n     * @param _minBurnAmount Minimum burning amount when uses the new anchored asset.\r\n     */\r\n    function upgradeProtocol(\r\n        uint256 _upgradeTime,\r\n        address _token,\r\n        uint256 _unit,\r\n        uint256 _minMintAmount,\r\n        uint256 _minBurnAmount\r\n    ) external auth {\r\n        require(_upgradeTime > now, \"upgradeProtocol: Upgrading time should be greater than now!\");\r\n        require(_token != address(0), \"upgradeProtocol: New anchored asset should not be zero address!\");\r\n        upgradeTime = _upgradeTime;\r\n        pendingToken = _token;\r\n        pendingUnit = _unit;\r\n        pendingMinMintAmount = _minMintAmount;\r\n        pendingMinBurnAmount = _minBurnAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to remove current reserve only when reaches the upgrading time.\r\n     */\r\n    function removeReserve() external auth {\r\n        require(upgradeTime > 0 && upgradeTime <= now, \"removeReserve: Too early to remove reserve!\");\r\n        uint256 _balance = IERC20(token).balanceOf(address(this));\r\n        if (_balance > 0) {\r\n            require(doTransferOut(token, msg.sender, _balance), \"removeReserve: Transfer out failed!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to confirm upgrading only when exceeds the upgrading time.\r\n     */\r\n    function confirmUpgrade() external auth {\r\n        require(upgradeTime > 0 && upgradeTime <= now, \"confirmUpgrade:  Too early to confirm upgrading!\");\r\n        token = pendingToken;\r\n        unit = pendingUnit;\r\n        minMintAmount = pendingMinMintAmount;\r\n        minBurnAmount = pendingMinBurnAmount;\r\n        cancelUpgrade();\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to cancel upgrading.\r\n     */\r\n    function cancelUpgrade() public auth {\r\n        require(getOutstanding() == 0, \"cancelUpgrade: Add more current anchored asset!\");\r\n        upgradeTime = 0;\r\n        pendingToken = address(0);\r\n        pendingUnit = 0;\r\n        pendingMinMintAmount = 0;\r\n        pendingMinBurnAmount = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to retrieve asset from account in the blacklist.\r\n     */\r\n    function retrieveBlackAddress(address _address) external auth {\r\n        require(blacklists[_address], \"retrieveBlackAddress: Address is not frozen!\");\r\n        uint256 _balance = balanceOf[_address];\r\n        balanceOf[_address] = 0;\r\n        balanceOf[owner] = balanceOf[owner].add(_balance);\r\n        emit Transfer(_address, owner, _balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to wipe asset from account in the blacklist.\r\n     */\r\n    function wipeBlackAddress(address _address) external auth {\r\n        require(blacklists[_address], \"wipeBlackAddress: Address is not frozen!\");\r\n        uint256 _balance = balanceOf[_address];\r\n        balanceOf[_address] = 0;\r\n        totalSupply = totalSupply.sub(_balance);\r\n        emit Transfer(_address, address(0), _balance);\r\n    }\r\n\r\n    // --- Math ---\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(y) / ONE;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(ONE) / y;\r\n    }\r\n\r\n    // ****************************\r\n    // **** Internal functions ****\r\n    // ****************************\r\n    /**\r\n     * @dev Checks whether the preconditions are met.\r\n     */\r\n    function checkPrecondition(address _src, address _dst, uint256 _wad) internal {\r\n        require(!blacklists[_src] && !blacklists[_dst], \"checkPrecondition: Address is frozen!\");\r\n        require(balanceOf[_src] >= _wad, \"checkPrecondition: Insufficient balance!\");\r\n        if (_src != _dst && allowance[_src][_dst] != uint256(-1)) {\r\n            require(allowance[_src][_dst] >= _wad, \"checkPrecondition: Insufficient allowance!\");\r\n            allowance[_src][_dst] = allowance[_src][_dst].sub(_wad);\r\n        }\r\n    }\r\n\r\n    function transfer(address _src, address _dst, uint256 _wad) internal whenNotPaused notUpgrading {\r\n        uint256 _fee = getFee(fee[this.transfer.selector], _wad);\r\n        uint256 _principle = _wad.sub(_fee);\r\n        balanceOf[_src] = balanceOf[_src].sub(_wad);\r\n        balanceOf[_dst] = balanceOf[_dst].add(_principle);\r\n        emit Transfer(_src, _dst, _principle);\r\n        if (_fee > 0) {\r\n            balanceOf[feeRecipient] = balanceOf[feeRecipient].add(_fee);\r\n            emit FeeCollected(_src, feeRecipient, _fee);\r\n        }\r\n    }\r\n\r\n    // **************************\r\n    // **** Public functions ****\r\n    // **************************\r\n    /**\r\n     * @dev Wraps anchored asset to get GOLDx.\r\n     * @param _dst Account who will get GOLDx.\r\n     * @param _pie Amount to mint, scaled by 1e18.\r\n     */\r\n    function mint(address _dst, uint256 _pie) external whenNotPaused notUpgrading nonReentrant {\r\n        require(!blacklists[msg.sender] && !blacklists[_dst], \"mint: Address is frozen!\");\r\n        uint256 _balance = IERC20(token).balanceOf(address(this));\r\n        require(doTransferFrom(token, msg.sender, address(this), _pie), \"mint: TransferFrom failed!\");\r\n        uint256 _wad = rmul(\r\n            convertDecimals(\r\n                IERC20(token).decimals(),\r\n                decimals,\r\n                IERC20(token).balanceOf(address(this)).sub(_balance)\r\n            ),\r\n            unit\r\n        );\r\n        require(_wad > 0 && _wad >= minMintAmount, \"mint: Do not satisfy min minting amount!\");\r\n        uint256 _fee = getFee(fee[msg.sig], _wad);\r\n        uint256 _principle = _wad.sub(_fee);\r\n        balanceOf[_dst] = balanceOf[_dst].add(_principle);\r\n        totalSupply = totalSupply.add(_wad);\r\n        emit Transfer(address(0), _dst, _principle);\r\n        emit Mint(_dst, _principle);\r\n        if (_fee > 0) {\r\n            balanceOf[feeRecipient] = balanceOf[feeRecipient].add(_fee);\r\n            emit Transfer(address(0), feeRecipient, _fee);\r\n            emit FeeCollected(address(0), feeRecipient, _fee);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Unwraps GlodX to get anchored asset.\r\n     * @param _src Account who will burn GOLDx.\r\n     * @param _wad Amount to burn, scaled by 1e18.\r\n     */\r\n    function burn(address _src, uint256 _wad) external whenNotPaused notUpgrading {\r\n        checkPrecondition(_src, msg.sender, _wad);\r\n        require(_wad >= minBurnAmount, \"burn: Do not satisfy min burning amount!\");\r\n        uint256 _fee = getFee(fee[msg.sig], _wad);\r\n        uint256 _principle = _wad.sub(_fee);\r\n        balanceOf[_src] = balanceOf[_src].sub(_wad);\r\n        totalSupply = totalSupply.sub(_principle);\r\n        emit Transfer(_src, address(0), _principle);\r\n        emit Burn(_src, _principle);\r\n        if (_fee > 0) {\r\n            balanceOf[feeRecipient] = balanceOf[feeRecipient].add(_fee);\r\n            emit Transfer(_src, feeRecipient, _fee);\r\n            emit FeeCollected(_src, feeRecipient, _fee);\r\n        }\r\n        uint256 _pie = getRedeemAmount(_principle);\r\n        if (_pie > 0) {\r\n            require(doTransferOut(token, msg.sender, _pie), \"burn: Transfer out failed!\");\r\n        }\r\n    }\r\n\r\n    // --- ERC20 ---\r\n    function transfer(address _dst, uint256 _wad) external returns (bool) {\r\n        return transferFrom(msg.sender, _dst, _wad);\r\n    }\r\n\r\n    function transferFrom(address _src, address _dst, uint256 _wad) public returns (bool) {\r\n        checkPrecondition(_src, msg.sender, _wad);\r\n        transfer(_src, _dst, _wad);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _wad) external returns (bool) {\r\n        allowance[msg.sender][_spender] = _wad;\r\n        emit Approval(msg.sender, _spender, _wad);\r\n        return true;\r\n    }\r\n\r\n    // ***************************\r\n    // ***** Query functions *****\r\n    // ***************************\r\n    /**\r\n     * @dev Gets total amount of anchored asset of account`_src`.\r\n     * @param _src Account to query.\r\n     */\r\n    function getTokenBalance(address _src) external view returns (uint256) {\r\n        return getRedeemAmount(balanceOf[_src]);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets corresponding anchored asset based on the amount of GOLDx.\r\n     * @param _wad Amount of GOLDx, scaled by 1e18.\r\n     */\r\n    function getRedeemAmount(uint256 _wad) public view returns (uint256) {\r\n        return\r\n            convertDecimals(\r\n                decimals,\r\n                IERC20(token).decimals(),\r\n                rdiv(_wad, unit)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets outstanding amount.\r\n     */\r\n    function getOutstanding() public view returns (uint256) {\r\n        int256 _amount = getOutstanding(token, unit);\r\n        return _amount > 0 ? uint256(_amount) : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets outstanding amount based on anchored asset`_token` and exchange rate`_uint`.\r\n     * @return int256 negative number means insufficient reserve.\r\n     *          positive number means enough reserve.\r\n     */\r\n    function getOutstanding(address _token, uint256 _unit) public view returns (int256) {\r\n        uint256 _amount = convertDecimals(\r\n            decimals,\r\n            IERC20(_token).decimals(),\r\n            rdiv(totalSupply, _unit)\r\n        );\r\n        return int256(_amount - IERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets execution fee based on the amount`_amount`.\r\n     */\r\n    function getFee(uint256 _feeRate, uint256 _amount) public pure returns (uint256) {\r\n        if (_feeRate == 0) return 0;\r\n\r\n        return rmul(_amount, _feeRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets corresponding output amount based on input decimal`_srcDecimals`, input amount`_amount`\r\n     *      and output decimal`_dstDecimals`.\r\n     */\r\n    function convertDecimals(\r\n        uint256 _srcDecimals,\r\n        uint256 _dstDecimals,\r\n        uint256 _amount\r\n    ) public pure returns (uint256) {\r\n        if (_srcDecimals == 0 || _dstDecimals == 0 || _amount == 0) return 0;\r\n\r\n        if (_srcDecimals > _dstDecimals)\r\n            return _amount / 10**_srcDecimals.sub(_dstDecimals);\r\n\r\n        return _amount.mul(10**_dstDecimals.sub(_srcDecimals));\r\n    }\r\n\r\n    function getBaseData() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool) {\r\n        return (\r\n            unit,\r\n            decimals,\r\n            IERC20(token).decimals(),\r\n            fee[this.mint.selector],\r\n            fee[this.burn.selector],\r\n            IPAXG(token).feeParts(),\r\n            IPAXG(token).feeRate(),\r\n            paused || (upgradeTime > 0 && upgradeTime <= now)\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pie\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBaseData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOutstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unit\",\"type\":\"uint256\"}],\"name\":\"getOutstanding\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"getRedeemAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pie\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingMinBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingMinMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"retrieveBlackAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_sig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBurnAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBurnAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minMintAmount\",\"type\":\"uint256\"}],\"name\":\"setMinMintAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUnit\",\"type\":\"uint256\"}],\"name\":\"setUnit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upgradeTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBurnAmount\",\"type\":\"uint256\"}],\"name\":\"upgradeProtocol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"wipeBlackAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GOLDx","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000045804880de22913dafe09f4980848ece6ecbaf78000000000000000000000000000000000000000000000000000000000000000664466f72636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005474f4c4478000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://401161aead78ed1794387508d5a2c704d5e49242624aa2e561d81a66e45977e3"}]}