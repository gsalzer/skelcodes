{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EndaomentAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD 3-Clause\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./interfaces/IEndaomentAdmin.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * In order to transfer ownership, a recipient must be specified, at which point\\n * the specified recipient can call `acceptOwnership` and take ownership.\\n */\\ncontract TwoStepOwnable {\\n  address private _owner;\\n  address private _newPotentialOwner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event TransferInitiated(address indexed newOwner);\\n\\n  event TransferCancelled(address indexed newPotentialOwner);\\n\\n  /**\\n   * @dev Initialize contract by setting transaction submitter as initial owner.\\n   */\\n  constructor() internal {\\n    _owner = tx.origin;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function getOwner() external view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current potential new owner.\\n   */\\n  function getNewPotentialOwner() external view returns (address) {\\n    return _newPotentialOwner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(isOwner(), \\\"TwoStepOwnable: caller is not the owner.\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() public view returns (bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  /**\\n   * @dev Allows a new account (`newOwner`) to accept ownership.\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newPotentialOwner) public onlyOwner {\\n    require(\\n      newPotentialOwner != address(0),\\n      \\\"TwoStepOwnable: new potential owner is the zero address.\\\"\\n    );\\n\\n    _newPotentialOwner = newPotentialOwner;\\n    emit TransferInitiated(address(newPotentialOwner));\\n  }\\n\\n  /**\\n   * @dev Cancel a transfer of ownership to a new account.\\n   * Can only be called by the current owner.\\n   */\\n  function cancelOwnershipTransfer() public onlyOwner {\\n    emit TransferCancelled(address(_newPotentialOwner));\\n    delete _newPotentialOwner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to the caller.\\n   * Can only be called by a new potential owner set by the current owner.\\n   */\\n  function acceptOwnership() public {\\n    require(\\n      msg.sender == _newPotentialOwner,\\n      \\\"TwoStepOwnable: current owner must set caller as new potential owner.\\\"\\n    );\\n\\n    delete _newPotentialOwner;\\n\\n    emit OwnershipTransferred(_owner, msg.sender);\\n\\n    _owner = msg.sender;\\n  }\\n}\\n\\n/**\\n * @title EndaomentAdmin\\n * @author rheeger\\n * @notice Provides admin controls for the Endaoment contract ecosystem using\\n * a roles-based system. Available roles are PAUSER (1), ACCOUNTANT (2),\\n * REVIEWER (3), FUND_FACTORY (4), ORG_FACTORY (5), and ADMIN (6).\\n */\\ncontract EndaomentAdmin is IEndaomentAdmin, TwoStepOwnable {\\n  // Maintain a role status mapping with assigned accounts and paused states.\\n  mapping(uint256 => RoleStatus) private _roles;\\n\\n  /**\\n   * @notice Set a new account on a given role and emit a `RoleModified` event\\n   * if the role holder has changed. Only the owner may call this function.\\n   * @param role The role that the account will be set for.\\n   * @param account The account to set as the designated role bearer.\\n   */\\n  function setRole(Role role, address account) public override onlyOwner {\\n    require(account != address(0), \\\"EndaomentAdmin: Must supply an account.\\\");\\n    _setRole(role, account);\\n  }\\n\\n  /**\\n   * @notice Remove any current role bearer for a given role and emit a\\n   * `RoleModified` event if a role holder was previously set. Only the owner\\n   * may call this function.\\n   * @param role The role that the account will be removed from.\\n   */\\n  function removeRole(Role role) public override onlyOwner {\\n    _setRole(role, address(0));\\n  }\\n\\n  /**\\n   * @notice Pause a currently unpaused role and emit a `RolePaused` event. Only\\n   * the owner or the designated pauser may call this function. Also, bear in\\n   * mind that only the owner may unpause a role once paused.\\n   * @param role The role to pause.\\n   */\\n  function pause(Role role) public override onlyAdminOr(Role.PAUSER) {\\n    RoleStatus storage storedRoleStatus = _roles[uint256(role)];\\n    require(!storedRoleStatus.paused, \\\"EndaomentAdmin: Role in question is already paused.\\\");\\n    storedRoleStatus.paused = true;\\n    emit RolePaused(role);\\n  }\\n\\n  /**\\n   * @notice Unpause a currently paused role and emit a `RoleUnpaused` event.\\n   * Only the owner may call this function.\\n   * @param role The role to pause.\\n   */\\n  function unpause(Role role) public override onlyOwner {\\n    RoleStatus storage storedRoleStatus = _roles[uint256(role)];\\n    require(storedRoleStatus.paused, \\\"EndaomentAdmin: Role in question is already unpaused.\\\");\\n    storedRoleStatus.paused = false;\\n    emit RoleUnpaused(role);\\n  }\\n\\n  /**\\n   * @notice External view function to check whether or not the functionality\\n   * associated with a given role is currently paused or not. The owner or the\\n   * pauser may pause any given role (including the pauser itself), but only the\\n   * owner may unpause functionality. Additionally, the owner may call paused\\n   * functions directly.\\n   * @param role The role to check the pause status on.\\n   * @return A boolean to indicate if the functionality associated with\\n   * the role in question is currently paused.\\n   */\\n  function isPaused(Role role) external override view returns (bool) {\\n    return _isPaused(role);\\n  }\\n\\n  /**\\n   * @notice External view function to check whether the caller is the current\\n   * role holder.\\n   * @param role The role to check for.\\n   * @return A boolean indicating if the caller has the specified role.\\n   */\\n  function isRole(Role role) external override view returns (bool) {\\n    return _isRole(role);\\n  }\\n\\n  /**\\n   * @notice External view function to check the account currently holding the\\n   * given role.\\n   * @param role The desired role to fetch the current address of.\\n   * @return The address of the requested role, or the null\\n   * address if none is set.\\n   */\\n  function getRoleAddress(Role role) external override view returns (address) {\\n    require(\\n      _roles[uint256(role)].account != address(0),\\n      \\\"EndaomentAdmin: Role bearer is null address.\\\"\\n    );\\n    return _roles[uint256(role)].account;\\n  }\\n\\n  /**\\n   * @notice Private function to set a new account on a given role and emit a\\n   * `RoleModified` event if the role holder has changed.\\n   * @param role The role that the account will be set for.\\n   * @param account The account to set as the designated role bearer.\\n   */\\n  function _setRole(Role role, address account) private {\\n    RoleStatus storage storedRoleStatus = _roles[uint256(role)];\\n\\n    if (account != storedRoleStatus.account) {\\n      storedRoleStatus.account = account;\\n      emit RoleModified(role, account);\\n    }\\n  }\\n\\n  /**\\n   * @notice Private view function to check whether the caller is the current\\n   * role holder.\\n   * @param role The role to check for.\\n   * @return A boolean indicating if the caller has the specified role.\\n   */\\n  function _isRole(Role role) private view returns (bool) {\\n    return msg.sender == _roles[uint256(role)].account;\\n  }\\n\\n  /**\\n   * @notice Private view function to check whether the given role is paused or\\n   * not.\\n   * @param role The role to check for.\\n   * @return A boolean indicating if the specified role is paused or not.\\n   */\\n  function _isPaused(Role role) private view returns (bool) {\\n    return _roles[uint256(role)].paused;\\n  }\\n\\n  /**\\n   * @notice Modifier that throws if called by any account other than the owner\\n   * or the supplied role, or if the caller is not the owner and the role in\\n   * question is paused.\\n   * @param role The role to require unless the caller is the owner.\\n   */\\n  modifier onlyAdminOr(Role role) {\\n    if (!isOwner()) {\\n      require(_isRole(role), \\\"EndaomentAdmin: Caller does not have a required role.\\\");\\n      require(!_isPaused(role), \\\"EndaomentAdmin: Role in question is currently paused.\\\");\\n    }\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEndaomentAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD 3-Clause\\n\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Interface of the EndaomentAdmin contract\\n */\\ninterface IEndaomentAdmin {\\n  event RoleModified(Role indexed role, address account);\\n  event RolePaused(Role indexed role);\\n  event RoleUnpaused(Role indexed role);\\n\\n  enum Role {\\n    EMPTY,\\n    PAUSER,\\n    ACCOUNTANT,\\n    REVIEWER,\\n    FUND_FACTORY,\\n    ORG_FACTORY,\\n    ADMIN\\n  }\\n\\n  struct RoleStatus {\\n    address account;\\n    bool paused;\\n  }\\n\\n  function setRole(Role role, address account) external;\\n\\n  function removeRole(Role role) external;\\n\\n  function pause(Role role) external;\\n\\n  function unpause(Role role) external;\\n\\n  function isPaused(Role role) external view returns (bool);\\n\\n  function isRole(Role role) external view returns (bool);\\n\\n  function getRoleAddress(Role role) external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IEndaomentAdmin.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IEndaomentAdmin.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RolePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IEndaomentAdmin.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RoleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"TransferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewPotentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEndaomentAdmin.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"getRoleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEndaomentAdmin.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEndaomentAdmin.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"isRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEndaomentAdmin.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEndaomentAdmin.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"removeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEndaomentAdmin.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEndaomentAdmin.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EndaomentAdmin","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}