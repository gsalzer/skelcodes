{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n *      /$$$$$                       /$$           /$$$$$$$$        /$$\r\n *     |__  $$                      | $$          |__  $$__/       | $$\r\n *        | $$ /$$   /$$  /$$$$$$$ /$$$$$$           | $$  /$$$$$$ | $$   /$$  /$$$$$$  /$$$$$$$\r\n *        | $$| $$  | $$ /$$_____/|_  $$_/           | $$ /$$__  $$| $$  /$$/ /$$__  $$| $$__  $$\r\n *   /$$  | $$| $$  | $$|  $$$$$$   | $$             | $$| $$  \\ $$| $$$$$$/ | $$$$$$$$| $$  \\ $$\r\n *  | $$  | $$| $$  | $$ \\____  $$  | $$ /$$         | $$| $$  | $$| $$_  $$ | $$_____/| $$  | $$\r\n *  |  $$$$$$/|  $$$$$$/ /$$$$$$$/  |  $$$$/         | $$|  $$$$$$/| $$ \\  $$|  $$$$$$$| $$  | $$\r\n *   \\______/  \\______/ |_______/    \\___/           |__/ \\______/ |__/  \\__/ \\_______/|__/  |__/\r\n * This product is protected under license.  Any unauthorized copy, modification, or use without\r\n * express written consent from the creators is prohibited.\r\n * Get touch with us justrunio2020@gmail.com\r\n * WARNING:  THIS PRODUCT IS HIGHLY ADDICTIVE.  IF YOU HAVE AN ADDICTIVE NATURE.  DO NOT PLAY.\r\n */\r\npragma solidity ^ 0.4 .24;\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two numbers, throws on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b)\r\n  internal\r\n  pure\r\n  returns(uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    require(c / a == b, \"SafeMath mul failed\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two numbers, truncating the quotient.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b)\r\n  internal\r\n  pure\r\n  returns(uint256) {\r\n    require(b <= a, \"SafeMath sub failed\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, throws on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b)\r\n  internal\r\n  pure\r\n  returns(uint256 c) {\r\n    c = a + b;\r\n    require(c >= a, \"SafeMath add failed\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev gives square root of given x.\r\n   */\r\n  function sqrt(uint256 x)\r\n  internal\r\n  pure\r\n  returns(uint256 y) {\r\n    uint256 z = ((add(x, 1)) / 2);\r\n    y = x;\r\n    while (z < y) {\r\n      y = z;\r\n      z = ((add((x / z), z)) / 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev gives square. multiplies x by x\r\n   */\r\n  function sq(uint256 x)\r\n  internal\r\n  pure\r\n  returns(uint256) {\r\n    return (mul(x, x));\r\n  }\r\n\r\n  /**\r\n   * @dev x to the power of y \r\n   */\r\n  function pwr(uint256 x, uint256 y)\r\n  internal\r\n  pure\r\n  returns(uint256) {\r\n    if (x == 0)\r\n      return (0);\r\n    else if (y == 0)\r\n      return (1);\r\n    else {\r\n      uint256 z = x;\r\n      for (uint256 i = 1; i < y; i++)\r\n        z = mul(z, x);\r\n      return (z);\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract TokenRun {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 public supplied;\r\n    uint256 public surplusSupply;\r\n    uint256 riseTimes = 0;\r\n    uint256 public sellingPrice = 10**14;\r\n    address owner;\r\n    address exAddr;\r\n    address runAddr;\r\n    address lotteryAddr;\r\n    address foundationAddr;\r\n    bool active = false;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    constructor(\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals,\r\n        uint256 _totalSupply,\r\n        address _foundationAddr,\r\n        address _owner\r\n    ) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply * (10**uint256(decimals));\r\n        owner = _owner;\r\n        foundationAddr = _foundationAddr;\r\n        surplusSupply = totalSupply;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function activation(\r\n        address eAddr,\r\n        address rAddr,\r\n        address lAddr\r\n    ) external {\r\n        require(active == false, \"activated\");\r\n        require(owner == msg.sender, \"Insufficient permissions\");\r\n        exAddr = eAddr;\r\n        runAddr = rAddr;\r\n        lotteryAddr = lAddr;\r\n        uint256 value = 1000 * 10**4 * 10**8;\r\n        balanceOf[foundationAddr] = SafeMath.add(\r\n            balanceOf[foundationAddr],\r\n            value\r\n        );\r\n        surplusSupply = SafeMath.sub(surplusSupply, value);\r\n        active = true;\r\n        emit Transfer(this, foundationAddr, value);\r\n    }\r\n\r\n    function riseSellingPrice(uint256 index, uint256 count)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        if (count > index) {\r\n            for (uint256 i = index; i < count; i++) {\r\n                sellingPrice = SafeMath.add(\r\n                    sellingPrice,\r\n                    SafeMath.div(sellingPrice, 100)\r\n                );\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public {\r\n        require(value >= 0, \"Incorrect transfer amount\");\r\n        require(balanceOf[msg.sender] >= value, \"Insufficient balance\");\r\n        require(balanceOf[to] + value >= balanceOf[to], \"Transfer failed\");\r\n\r\n        balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], value);\r\n        balanceOf[to] = SafeMath.add(balanceOf[to], value);\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public {\r\n        require(\r\n            (value == 0) || (allowance[msg.sender][spender] == 0),\r\n            \"Authorized tokens are not used up\"\r\n        );\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public {\r\n        require(value >= 0, \"Incorrect transfer amount\");\r\n        require(balanceOf[from] >= value, \"Insufficient balance\");\r\n        require(balanceOf[to] + value >= balanceOf[to], \"Transfer failed\");\r\n        require(\r\n            value <= allowance[from][msg.sender],\r\n            \"The transfer amount is higher than the available amount\"\r\n        );\r\n\r\n        balanceOf[from] = SafeMath.sub(balanceOf[from], value);\r\n        balanceOf[to] = SafeMath.add(balanceOf[to], value);\r\n        allowance[from][msg.sender] = SafeMath.sub(\r\n            allowance[from][msg.sender],\r\n            value\r\n        );\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /** Calculate the token that eth can buy */\r\n    function calcTokenReceived(uint256 _eth) external view returns (uint256) {\r\n        return SafeMath.div(_eth * 10**8, sellingPrice);\r\n    }\r\n\r\n    /** Calculate the tokens required to participate in the run */\r\n    function calcTokenRequired(uint256 _eth) external view returns (uint256) {\r\n        return SafeMath.div(this.calcTokenReceived(_eth), 10);\r\n    }\r\n\r\n    /** Calculate token value */\r\n    function calcTokenValue(uint256 tokenNumber)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return SafeMath.mul(SafeMath.div(tokenNumber, 10**8), sellingPrice);\r\n    }\r\n\r\n    /**API for ExRun and LotteryRun*/\r\n    function getToken(uint256 value) external {\r\n        require(\r\n            msg.sender == exAddr || msg.sender == lotteryAddr,\r\n            \"Insufficient permissions\"\r\n        );\r\n        require(\r\n            value <= surplusSupply,\r\n            \"require remaining supply are larger than the tokens\"\r\n        );\r\n        surplusSupply = SafeMath.sub(surplusSupply, value);\r\n        supplied = SafeMath.add(supplied, value);\r\n        uint256 count = SafeMath.div(supplied, 10**8 * 100000);\r\n        riseTimes = riseSellingPrice(riseTimes, count);\r\n        balanceOf[msg.sender] = SafeMath.add(balanceOf[msg.sender], value);\r\n    }\r\n\r\n    /**API for ExRun*/\r\n    function advancedTransfer(address addr, uint256 value) external {\r\n        require(msg.sender == exAddr, \"Insufficient permissions\");\r\n        require(balanceOf[addr] >= value, \"Insufficient tokens required\");\r\n        balanceOf[addr] = SafeMath.sub(balanceOf[addr], value);\r\n        balanceOf[msg.sender] = SafeMath.add(balanceOf[msg.sender], value);\r\n        emit Transfer(addr, msg.sender, value);\r\n    }\r\n\r\n    /** Burn API for JustRun and LotteryRun */\r\n    function burn(address addr, uint256 value) public {\r\n        require(\r\n            msg.sender == runAddr || msg.sender == lotteryAddr,\r\n            \"Insufficient permissions\"\r\n        );\r\n        require(balanceOf[addr] >= value, \"Insufficient tokens required\");\r\n        balanceOf[addr] = SafeMath.sub(balanceOf[addr], value);\r\n        balanceOf[address(0x0)] = SafeMath.add(balanceOf[address(0x0)], value);\r\n\r\n        emit Transfer(addr, address(0x0), value);\r\n    }\r\n\r\n    function aaa(uint256 a, uint256 b) external pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function bbb(uint256 a, uint256 b) external pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenNumber\",\"type\":\"uint256\"}],\"name\":\"calcTokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"calcTokenRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"aaa\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"calcTokenReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplied\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eAddr\",\"type\":\"address\"},{\"name\":\"rAddr\",\"type\":\"address\"},{\"name\":\"lAddr\",\"type\":\"address\"}],\"name\":\"activation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"bbb\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"surplusSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"advancedTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_foundationAddr\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TokenRun","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000001312d00000000000000000000000000725307b2d0e1e51917820ff299d2fb355e6d17e4000000000000000000000000119eb8e686423e56b7cfc6f211c8cd4a9f71e3cc00000000000000000000000000000000000000000000000000000000000000074a75737452756e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000352756e0000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://461414298c2de852606a6f2d19a4c8e5231e9ded77c48df844b3207810621858"}]}