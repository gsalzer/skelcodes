{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IKULAPDex.sol\r\n\r\n// pragma solidity 0.5.17;\r\n\r\n// import \"../helper/ERC20Interface.sol\";\r\n// import \"./IKULAPTradingProxy.sol\";\r\n\r\ninterface IKULAPDex {\r\n  // /**\r\n  // * @dev when new trade occure (and success), this event will be boardcast.\r\n  // * @param _src Source token\r\n  // * @param _srcAmount amount of source tokens\r\n  // * @param _dest   Destination token\r\n  // * @return _destAmount: amount of actual destination tokens\r\n  // */\r\n  // event Trade(ERC20 _src, uint256 _srcAmount, ERC20 _dest, uint256 _destAmount);\r\n\r\n  /**\r\n  * @notice use token address 0xeee...eee for ether\r\n  * @dev makes a trade between src and dest token by tradingProxyIndex\r\n  * Ex1: trade 0.5 ETH -> EOS\r\n  * 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\r\n  * Ex2: trade 30 EOS -> ETH\r\n  * 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\r\n  * @param tradingProxyIndex index of trading proxy\r\n  * @param src Source token\r\n  * @param srcAmount amount of source tokens\r\n  * @param dest Destination token\r\n  * @param minDestAmount minimun destination amount\r\n  * @param partnerIndex index of partnership for revenue sharing\r\n  * @return amount of actual destination tokens\r\n  */\r\n  function trade(\r\n      uint256   tradingProxyIndex,\r\n      ERC20     src,\r\n      uint256   srcAmount,\r\n      ERC20     dest,\r\n      uint256   minDestAmount,\r\n      uint256   partnerIndex\r\n    )\r\n    external\r\n    payable\r\n    returns(uint256);\r\n  \r\n  /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade with multiple routes ex. UNI -> ETH -> DAI\r\n    * Ex: trade 50 UNI -> ETH -> DAI\r\n    * Step1: trade 50 UNI -> ETH\r\n    * Step2: trade xx ETH -> DAI\r\n    * srcAmount: 50 * 1e18\r\n    * routes: [0, 1]\r\n    * srcTokens: [0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE]\r\n    * destTokens: [0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, 0x6B175474E89094C44Da98b954EedeAC495271d0F]\r\n    * @param srcAmount amount of source tokens\r\n    * @param minDestAmount minimun destination amount\r\n    * @param routes Trading paths\r\n    * @param srcTokens all source of token pairs\r\n    * @param destTokens all destination of token pairs\r\n    * @param partnerIndex index of partnership for revenue sharing\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function tradeRoutes(\r\n      uint256   srcAmount,\r\n      uint256   minDestAmount,\r\n      uint256[] calldata routes,\r\n      ERC20[]   calldata srcTokens,\r\n      ERC20[]   calldata destTokens,\r\n      uint256   partnerIndex\r\n    )\r\n    external\r\n    payable\r\n    returns(uint256);\r\n  \r\n  /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade with split volumes to multiple-routes ex. UNI -> ETH (5%, 15% and 80%)\r\n    * @param routes Trading paths\r\n    * @param src Source token\r\n    * @param srcAmounts amount of source tokens\r\n    * @param dest Destination token\r\n    * @param minDestAmount minimun destination amount\r\n    * @param partnerIndex index of partnership for revenue sharing\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function splitTrades(\r\n      uint256[] calldata routes,\r\n      ERC20     src,\r\n      uint256[] calldata srcAmounts,\r\n      ERC20     dest,\r\n      uint256   minDestAmount,\r\n      uint256   partnerIndex\r\n    )\r\n    external\r\n    payable\r\n    returns(uint256);\r\n  \r\n  /**\r\n  * @notice use token address 0xeee...eee for ether\r\n  * @dev get amount of destination token for given source token amount\r\n  * @param tradingProxyIndex index of trading proxy\r\n  * @param src Source token\r\n  * @param dest Destination token\r\n  * @param srcAmount amount of source tokens\r\n  * @return amount of actual destination tokens\r\n  */\r\n  function getDestinationReturnAmount(\r\n    uint256 tradingProxyIndex,\r\n    ERC20   src,\r\n    ERC20   dest,\r\n    uint256 srcAmount,\r\n    uint256 partnerIndex\r\n  )\r\n    external\r\n    view\r\n    returns(uint256);\r\n  \r\n  function getDestinationReturnAmountForSplitTrades(\r\n    uint256[] calldata routes,\r\n    ERC20     src,\r\n    uint256[] calldata srcAmounts,\r\n    ERC20     dest,\r\n    uint256   partnerIndex\r\n  )\r\n    external\r\n    view\r\n    returns(uint256);\r\n  \r\n  function getDestinationReturnAmountForTradeRoutes(\r\n    ERC20     src,\r\n    uint256   srcAmount,\r\n    ERC20     dest,\r\n    address[] calldata _tradingPaths,\r\n    uint256   partnerIndex\r\n  )\r\n    external\r\n    view\r\n    returns(uint256);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IKULAPTradingProxy.sol\r\n\r\n// pragma solidity 0.5.17;\r\n\r\n// import \"../helper/ERC20Interface.sol\";\r\n\r\n/**\r\n * @title KULAP Trading Proxy\r\n * @dev The KULAP trading proxy interface has an standard functions and event\r\n * for other smart contract to implement to join KULAP Dex as Market Maker.\r\n */\r\ninterface IKULAPTradingProxy {\r\n    /**\r\n    * @dev when new trade occure (and success), this event will be boardcast.\r\n    * @param _src Source token\r\n    * @param _srcAmount amount of source tokens\r\n    * @param _dest   Destination token\r\n    * @return _destAmount: amount of actual destination tokens\r\n    */\r\n    event Trade(ERC20 _src, uint256 _srcAmount, ERC20 _dest, uint256 _destAmount);\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade between src and dest token\r\n    * @param _src Source token\r\n    * @param _dest   Destination token\r\n    * @param _srcAmount amount of source tokens\r\n    * @return _destAmount: amount of actual destination tokens\r\n    */\r\n    function trade(\r\n        ERC20 _src,\r\n        ERC20 _dest,\r\n        uint256 _srcAmount\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 _destAmount);\r\n\r\n    /**\r\n    * @dev provide destinationm token amount for given source amount\r\n    * @param _src Source token\r\n    * @param _dest Destination token\r\n    * @param _srcAmount Amount of source tokens\r\n    * @return _destAmount: amount of expected destination tokens\r\n    */\r\n    function getDestinationReturnAmount(\r\n        ERC20 _src,\r\n        ERC20 _dest,\r\n        uint256 _srcAmount\r\n    )\r\n        external\r\n        view\r\n        returns(uint256 _destAmount);\r\n\r\n    /**\r\n    * @dev provide source token amount for given destination amount\r\n    * @param _src Source token\r\n    * @param _dest Destination token\r\n    * @param _destAmount Amount of destination tokens\r\n    * @return _srcAmount: amount of expected source tokens\r\n    */\r\n    // function getSourceReturnAmount(\r\n    //     ERC20 _src,\r\n    //     ERC20 _dest,\r\n    //     uint256 _destAmount\r\n    // )\r\n    //     external\r\n    //     view\r\n    //     returns(uint256 _srcAmount);\r\n}\r\n// Dependency file: contracts/helper/ERC20Interface.sol\r\n\r\n// pragma solidity 0.5.17;\r\n\r\n/**\r\n * @title ERC20\r\n * @dev The ERC20 interface has an standard functions and event\r\n * for erc20 compatible token on Ethereum blockchain.\r\n */\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external; // Some ERC20 doesn't have return\r\n    function transferFrom(address _from, address _to, uint _value) external; // Some ERC20 doesn't have return\r\n    function approve(address _spender, uint _value) external; // Some ERC20 doesn't have return\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n// Dependency file: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n// import \"../GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\npragma solidity 0.5.17;\r\n\r\n// import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/ownership/Ownable.sol\";\r\n// import \"./helper/ERC20Interface.sol\";\r\n// import \"./interfaces/IKULAPTradingProxy.sol\";\r\n// import \"./interfaces/IKULAPDex.sol\";\r\n\r\ncontract ProxyManagement is Ownable {\r\n    /**\r\n    * @dev Struct of trading proxy\r\n    * @param name Name of trading proxy.\r\n    * @param enable The flag of trading proxy to check is trading proxy enable.\r\n    * @param proxy The address of trading proxy.\r\n    */\r\n    struct Proxy {\r\n      string name;\r\n      bool enable;\r\n      IKULAPTradingProxy proxy;\r\n    }\r\n\r\n    event AddedTradingProxy(\r\n        address indexed addedBy,\r\n        string name,\r\n        IKULAPTradingProxy indexed proxyAddress,\r\n        uint256 indexed index\r\n    );\r\n\r\n    event EnabledTradingProxy(\r\n        address indexed enabledBy,\r\n        string name,\r\n        IKULAPTradingProxy proxyAddress,\r\n        uint256 indexed index\r\n    );\r\n\r\n    event DisabledTradingProxy(\r\n        address indexed disabledBy,\r\n        string name,\r\n        IKULAPTradingProxy indexed proxyAddress,\r\n        uint256 indexed index\r\n    );\r\n\r\n    Proxy[] public tradingProxies; // list of trading proxies\r\n\r\n    modifier onlyTradingProxyEnabled(uint _index) {\r\n        require(tradingProxies[_index].enable == true, \"This trading proxy is disabled\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTradingProxyDisabled(uint _index) {\r\n        require(tradingProxies[_index].enable == false, \"This trading proxy is enabled\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Function for adding new trading proxy\r\n    * @param _name Name of trading proxy.\r\n    * @param _proxyAddress The address of trading proxy.\r\n    * @return length of trading proxies.\r\n    */\r\n    function addTradingProxy(\r\n        string memory _name,\r\n        IKULAPTradingProxy _proxyAddress\r\n    )\r\n      public\r\n      onlyOwner\r\n    {\r\n        tradingProxies.push(Proxy({\r\n            name: _name,\r\n            enable: true,\r\n            proxy: _proxyAddress\r\n        }));\r\n        emit AddedTradingProxy(msg.sender, _name, _proxyAddress, tradingProxies.length - 1);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for disable trading proxy by index\r\n    * @param _index The uint256 of trading proxy index.\r\n    * @return length of trading proxies.\r\n    */\r\n    function disableTradingProxy(\r\n        uint256 _index\r\n    )\r\n        public\r\n        onlyOwner\r\n        onlyTradingProxyEnabled(_index)\r\n    {\r\n        tradingProxies[_index].enable = false;\r\n        emit DisabledTradingProxy(msg.sender, tradingProxies[_index].name, tradingProxies[_index].proxy, _index);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for enale trading proxy by index\r\n    * @param _index The uint256 of trading proxy index.\r\n    * @return length of trading proxies.\r\n    */\r\n    function enableTradingProxy(\r\n        uint256 _index\r\n    )\r\n        public\r\n        onlyOwner\r\n        onlyTradingProxyDisabled(_index)\r\n    {\r\n        tradingProxies[_index].enable = true;\r\n        emit EnabledTradingProxy(msg.sender, tradingProxies[_index].name, tradingProxies[_index].proxy, _index);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for get amount of trading proxy\r\n    * @return Amount of trading proxies.\r\n    */\r\n    function getProxyCount() public view returns (uint256) {\r\n        return tradingProxies.length;\r\n    }\r\n\r\n    /**\r\n    * @dev Function for get enable status of trading proxy\r\n    * @param _index The uint256 of trading proxy index.\r\n    * @return enable status of trading proxy.\r\n    */\r\n    function isTradingProxyEnable(uint256 _index) public view returns (bool) {\r\n        return tradingProxies[_index].enable;\r\n    }\r\n}\r\n\r\n/*\r\n* Fee collection by partner reference\r\n*/\r\ncontract Partnership is ProxyManagement {\r\n    using SafeMath for uint256;\r\n\r\n    struct Partner {\r\n      address wallet;       // To receive fee on the KULAP Dex network\r\n      uint16 fee;           // fee in bps\r\n      bytes16 name;         // Partner reference\r\n    }\r\n\r\n    mapping(uint256 => Partner) public partners;\r\n\r\n    constructor() public {\r\n        Partner memory partner = Partner(msg.sender, 0, \"KULAP\");\r\n        partners[0] = partner;\r\n    }\r\n\r\n    function updatePartner(uint256 index, address wallet, uint16 fee, bytes16 name)\r\n        external\r\n        onlyOwner\r\n    {\r\n        Partner memory partner = Partner(wallet, fee, name);\r\n        partners[index] = partner;\r\n    }\r\n\r\n    function amountWithFee(uint256 amount, uint256 partnerIndex)\r\n        internal\r\n        view\r\n        returns(uint256 remainingAmount)\r\n    {\r\n        Partner storage partner = partners[partnerIndex];\r\n        if (partner.fee == 0) {\r\n            return amount;\r\n        }\r\n        uint256 fee = amount.mul(partner.fee).div(10000);\r\n        return amount.sub(fee);\r\n    }\r\n\r\n    function collectFee(uint256 partnerIndex, uint256 amount, ERC20 token)\r\n        internal\r\n        returns(uint256 remainingAmount)\r\n    {\r\n        Partner storage partner = partners[partnerIndex];\r\n        if (partner.fee == 0) {\r\n            return amount;\r\n        }\r\n        uint256 fee = amount.mul(partner.fee).div(10000);\r\n        require(fee < amount, \"fee exceeds return amount!\");\r\n        token.transfer(partner.wallet, fee);\r\n        return amount.sub(fee);\r\n    }\r\n}\r\n\r\ncontract KULAPDex is IKULAPDex, Partnership, ReentrancyGuard {\r\n    event Trade(\r\n        address indexed srcAsset, // Source\r\n        uint256         srcAmount,\r\n        address indexed destAsset, // Destination\r\n        uint256         destAmount,\r\n        address indexed trader, // User\r\n        uint256         fee // System fee\r\n    );\r\n\r\n    using SafeMath for uint256;\r\n    ERC20 public etherERC20 = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade between Ether to token by tradingProxyIndex\r\n    * @param tradingProxyIndex index of trading proxy\r\n    * @param srcAmount amount of source tokens\r\n    * @param dest Destination token\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function _tradeEtherToToken(\r\n        uint256 tradingProxyIndex,\r\n        uint256 srcAmount,\r\n        ERC20 dest\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        // Load trading proxy\r\n        IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\r\n        // Trade to proxy\r\n        uint256 destAmount = tradingProxy.trade.value(srcAmount)(\r\n            etherERC20,\r\n            dest,\r\n            srcAmount\r\n        );\r\n        return destAmount;\r\n    }\r\n\r\n    // Receive ETH in case of trade Token -> ETH, will get ETH back from trading proxy\r\n    function () external payable {}\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade between token to Ether by tradingProxyIndex\r\n    * @param tradingProxyIndex index of trading proxy\r\n    * @param src Source token\r\n    * @param srcAmount amount of source tokens\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function _tradeTokenToEther(\r\n        uint256 tradingProxyIndex,\r\n        ERC20 src,\r\n        uint256 srcAmount\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        // Load trading proxy\r\n        IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\r\n        // Approve to TradingProxy\r\n        src.approve(address(tradingProxy), srcAmount);\r\n        // Trande to proxy\r\n        uint256 destAmount = tradingProxy.trade(\r\n            src,\r\n            etherERC20,\r\n            srcAmount\r\n        );\r\n        return destAmount;\r\n    }\r\n\r\n    /**\r\n    * @dev makes a trade between token to token by tradingProxyIndex\r\n    * @param tradingProxyIndex index of trading proxy\r\n    * @param src Source token\r\n    * @param srcAmount amount of source tokens\r\n    * @param dest Destination token\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function _tradeTokenToToken(\r\n        uint256 tradingProxyIndex,\r\n        ERC20 src,\r\n        uint256 srcAmount,\r\n        ERC20 dest\r\n    )\r\n        private\r\n        returns(uint256)\r\n    {\r\n        // Load trading proxy\r\n        IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\r\n        // Approve to TradingProxy\r\n        src.approve(address(tradingProxy), srcAmount);\r\n        // Trande to proxy\r\n        uint256 destAmount = tradingProxy.trade(\r\n            src,\r\n            dest,\r\n            srcAmount\r\n        );\r\n        return destAmount;\r\n    }\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade between src and dest token by tradingProxyIndex\r\n    * Ex1: trade 0.5 ETH -> DAI\r\n    * 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\r\n    * Ex2: trade 30 DAI -> ETH\r\n    * 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\r\n    * @param _tradingProxyIndex index of trading proxy\r\n    * @param _src Source token\r\n    * @param _srcAmount amount of source tokens\r\n    * @param _dest Destination token\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function _trade(\r\n        uint256             _tradingProxyIndex,\r\n        ERC20               _src,\r\n        uint256             _srcAmount,\r\n        ERC20               _dest\r\n    )\r\n        private\r\n        onlyTradingProxyEnabled(_tradingProxyIndex)\r\n        returns(uint256)\r\n    {\r\n        // Destination amount\r\n        uint256 destAmount;\r\n        // Record src/dest asset for later consistency check.\r\n        uint256 srcAmountBefore;\r\n        uint256 destAmountBefore;\r\n\r\n        if (etherERC20 == _src) { // Source\r\n            srcAmountBefore = address(this).balance;\r\n        } else {\r\n            srcAmountBefore = _src.balanceOf(address(this));\r\n        }\r\n        if (etherERC20 == _dest) { // Dest\r\n            destAmountBefore = address(this).balance;\r\n        } else {\r\n            destAmountBefore = _dest.balanceOf(address(this));\r\n        }\r\n        if (etherERC20 == _src) { // Trade ETH -> Token\r\n            destAmount = _tradeEtherToToken(_tradingProxyIndex, _srcAmount, _dest);\r\n        } else if (etherERC20 == _dest) { // Trade Token -> ETH\r\n            destAmount = _tradeTokenToEther(_tradingProxyIndex, _src, _srcAmount);\r\n        } else { // Trade Token -> Token\r\n            destAmount = _tradeTokenToToken(_tradingProxyIndex, _src, _srcAmount, _dest);\r\n        }\r\n\r\n        // Recheck if src/dest amount correct\r\n        if (etherERC20 == _src) { // Source\r\n            require(address(this).balance == srcAmountBefore.sub(_srcAmount), \"source amount mismatch after trade\");\r\n        } else {\r\n            require(_src.balanceOf(address(this)) == srcAmountBefore.sub(_srcAmount), \"source amount mismatch after trade\");\r\n        }\r\n        if (etherERC20 == _dest) { // Dest\r\n            require(address(this).balance == destAmountBefore.add(destAmount), \"destination amount mismatch after trade\");\r\n        } else {\r\n            require(_dest.balanceOf(address(this)) == destAmountBefore.add(destAmount), \"destination amount mismatch after trade\");\r\n        }\r\n        return destAmount;\r\n    }\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade between src and dest token by tradingProxyIndex\r\n    * Ex1: trade 0.5 ETH -> DAI\r\n    * 0, \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"500000000000000000\", \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"21003850000000000000\"\r\n    * Ex2: trade 30 DAI -> ETH\r\n    * 0, \"0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817\", \"30000000000000000000\", \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"740825000000000000\"\r\n    * @param tradingProxyIndex index of trading proxy\r\n    * @param src Source token\r\n    * @param srcAmount amount of source tokens\r\n    * @param dest Destination token\r\n    * @param minDestAmount minimun destination amount\r\n    * @param partnerIndex index of partnership for revenue sharing\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function trade(\r\n        uint256   tradingProxyIndex,\r\n        ERC20     src,\r\n        uint256   srcAmount,\r\n        ERC20     dest,\r\n        uint256   minDestAmount,\r\n        uint256   partnerIndex\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        returns(uint256)\r\n    {\r\n        uint256 destAmount;\r\n        // Prepare source's asset\r\n        if (etherERC20 != src) {\r\n            src.transferFrom(msg.sender, address(this), srcAmount); // Transfer token to this address\r\n        }\r\n        // Trade with proxy\r\n        destAmount = _trade(tradingProxyIndex, src, srcAmount, dest);\r\n        // Throw exception if destination amount doesn't meet user requirement.\r\n        require(destAmount >= minDestAmount, \"destination amount is too low.\");\r\n        if (etherERC20 == dest) {\r\n            (bool success, ) = msg.sender.call.value(destAmount)(\"\"); // Send back ether to sender\r\n            require(success, \"Transfer ether back to caller failed.\");\r\n        } else { // Send back token to sender\r\n            // Some ERC20 Smart contract not return Bool, so we can't use require(dest.transfer(x, y)); here\r\n            dest.transfer(msg.sender, destAmount);\r\n        }\r\n\r\n        // Collect fee\r\n        uint256 remainingAmount = collectFee(partnerIndex, destAmount, dest);\r\n\r\n        emit Trade(address(src), srcAmount, address(dest), remainingAmount, msg.sender, 0);\r\n        return remainingAmount;\r\n    }\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade with multiple routes ex. UNI -> ETH -> DAI\r\n    * Ex: trade 50 UNI -> ETH -> DAI\r\n    * Step1: trade 50 UNI -> ETH\r\n    * Step2: trade xx ETH -> DAI\r\n    * srcAmount: 50 * 1e18\r\n    * routes: [0, 1]\r\n    * srcTokens: [0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE]\r\n    * destTokens: [0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, 0x6B175474E89094C44Da98b954EedeAC495271d0F]\r\n    * @param srcAmount amount of source tokens\r\n    * @param minDestAmount minimun destination amount\r\n    * @param routes Trading paths\r\n    * @param srcTokens all source of token pairs\r\n    * @param destTokens all destination of token pairs\r\n    * @param partnerIndex index of partnership for revenue sharing\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function tradeRoutes(\r\n        uint256   srcAmount,\r\n        uint256   minDestAmount,\r\n        uint256[] calldata routes,\r\n        ERC20[]   calldata srcTokens,\r\n        ERC20[]   calldata destTokens,\r\n        uint256   partnerIndex\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        returns(uint256)\r\n    {\r\n        require(routes.length > 0, \"routes can not be empty\");\r\n        require(routes.length == srcTokens.length && routes.length == destTokens.length, \"Parameter value lengths mismatch\");\r\n\r\n        uint256 remainingAmount;\r\n        {\r\n          uint256 destAmount;\r\n          if (etherERC20 != srcTokens[0]) {\r\n              srcTokens[0].transferFrom(msg.sender, address(this), srcAmount); // Transfer token to This address\r\n          }\r\n          uint256 pathSrcAmount = srcAmount;\r\n          for (uint i = 0; i < routes.length; i++) {\r\n              uint256 tradingProxyIndex = routes[i];\r\n              ERC20 pathSrc = srcTokens[i];\r\n              ERC20 pathDest = destTokens[i];\r\n              destAmount = _trade(tradingProxyIndex, pathSrc, pathSrcAmount, pathDest);\r\n              pathSrcAmount = destAmount;\r\n          }\r\n          // Throw exception if destination amount doesn't meet user requirement.\r\n          require(destAmount >= minDestAmount, \"destination amount is too low.\");\r\n          if (etherERC20 == destTokens[destTokens.length - 1]) { // Trade Any -> ETH\r\n              // Send back ether to sender\r\n              (bool success,) = msg.sender.call.value(destAmount)(\"\");\r\n              require(success, \"Transfer ether back to caller failed.\");\r\n          } else { // Trade Any -> Token\r\n              // Send back token to sender\r\n              // Some ERC20 Smart contract not return Bool, so we can't use require(dest.transfer(x, y)) here\r\n              destTokens[destTokens.length - 1].transfer(msg.sender, destAmount);\r\n          }\r\n\r\n          // Collect fee\r\n          remainingAmount = collectFee(partnerIndex, destAmount, destTokens[destTokens.length - 1]);\r\n        }\r\n\r\n        emit Trade(address(srcTokens[0]), srcAmount, address(destTokens[destTokens.length - 1]), remainingAmount, msg.sender, 0);\r\n        return remainingAmount;\r\n    }\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev makes a trade with split volumes to multiple-routes ex. UNI -> ETH (5%, 15% and 80%)\r\n    * @param routes Trading paths\r\n    * @param src Source token\r\n    * @param srcAmounts amount of source tokens\r\n    * @param dest Destination token\r\n    * @param minDestAmount minimun destination amount\r\n    * @param partnerIndex index of partnership for revenue sharing\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function splitTrades(\r\n        uint256[] calldata routes,\r\n        ERC20     src,\r\n        uint256[] calldata srcAmounts,\r\n        ERC20     dest,\r\n        uint256   minDestAmount,\r\n        uint256   partnerIndex\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        returns(uint256)\r\n    {\r\n        require(routes.length > 0, \"routes can not be empty\");\r\n        require(routes.length == srcAmounts.length, \"routes and srcAmounts lengths mismatch\");\r\n        uint256 srcAmount = srcAmounts[0];\r\n        uint256 destAmount = 0;\r\n        // Prepare source's asset\r\n        if (etherERC20 != src) {\r\n            src.transferFrom(msg.sender, address(this), srcAmount); // Transfer token to this address\r\n        }\r\n        // Trade with proxies\r\n        for (uint i = 0; i < routes.length; i++) {\r\n            uint256 tradingProxyIndex = routes[i];\r\n            uint256 amount = srcAmounts[i];\r\n            destAmount = destAmount.add(_trade(tradingProxyIndex, src, amount, dest));\r\n        }\r\n        // Throw exception if destination amount doesn't meet user requirement.\r\n        require(destAmount >= minDestAmount, \"destination amount is too low.\");\r\n        if (etherERC20 == dest) {\r\n            (bool success, ) = msg.sender.call.value(destAmount)(\"\"); // Send back ether to sender\r\n            require(success, \"Transfer ether back to caller failed.\");\r\n        } else { // Send back token to sender\r\n            // Some ERC20 Smart contract not return Bool, so we can't use require(dest.transfer(x, y)); here\r\n            dest.transfer(msg.sender, destAmount);\r\n        }\r\n\r\n        // Collect fee\r\n        uint256 remainingAmount = collectFee(partnerIndex, destAmount, dest);\r\n\r\n        emit Trade(address(src), srcAmount, address(dest), remainingAmount, msg.sender, 0);\r\n        return remainingAmount;\r\n    }\r\n\r\n    /**\r\n    * @notice use token address 0xeee...eee for ether\r\n    * @dev get amount of destination token for given source token amount\r\n    * @param tradingProxyIndex index of trading proxy\r\n    * @param src Source token\r\n    * @param dest Destination token\r\n    * @param srcAmount amount of source tokens\r\n    * @return amount of actual destination tokens\r\n    */\r\n    function getDestinationReturnAmount(\r\n        uint256 tradingProxyIndex,\r\n        ERC20   src,\r\n        ERC20   dest,\r\n        uint256 srcAmount,\r\n        uint256 partnerIndex\r\n    )\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // Load trading proxy\r\n        IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\r\n        uint256 destAmount = tradingProxy.getDestinationReturnAmount(src, dest, srcAmount);\r\n        return amountWithFee(destAmount, partnerIndex);\r\n    }\r\n\r\n    function getDestinationReturnAmountForSplitTrades(\r\n        uint256[] calldata routes,\r\n        ERC20     src,\r\n        uint256[] calldata srcAmounts,\r\n        ERC20     dest,\r\n        uint256   partnerIndex\r\n    )\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(routes.length > 0, \"routes can not be empty\");\r\n        require(routes.length == srcAmounts.length, \"routes and srcAmounts lengths mismatch\");\r\n        uint256 destAmount = 0;\r\n        \r\n        for (uint i = 0; i < routes.length; i++) {\r\n            uint256 tradingProxyIndex = routes[i];\r\n            uint256 amount = srcAmounts[i];\r\n            // Load trading proxy\r\n            IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\r\n            destAmount = destAmount.add(tradingProxy.getDestinationReturnAmount(src, dest, amount));\r\n        }\r\n        return amountWithFee(destAmount, partnerIndex);\r\n    }\r\n\r\n    function getDestinationReturnAmountForTradeRoutes(\r\n        ERC20     src,\r\n        uint256   srcAmount,\r\n        ERC20     dest,\r\n        address[] calldata _tradingPaths,\r\n        uint256   partnerIndex\r\n    )\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        src;\r\n        dest;\r\n        uint256 destAmount;\r\n        uint256 pathSrcAmount = srcAmount;\r\n        for (uint i = 0; i < _tradingPaths.length; i += 3) {\r\n            uint256 tradingProxyIndex = uint256(_tradingPaths[i]);\r\n            ERC20 pathSrc = ERC20(_tradingPaths[i+1]);\r\n            ERC20 pathDest = ERC20(_tradingPaths[i+2]);\r\n\r\n            // Load trading proxy\r\n            IKULAPTradingProxy tradingProxy = tradingProxies[tradingProxyIndex].proxy;\r\n            destAmount = tradingProxy.getDestinationReturnAmount(pathSrc, pathDest, pathSrcAmount);\r\n            pathSrcAmount = destAmount;\r\n        }\r\n        return amountWithFee(destAmount, partnerIndex);\r\n    }\r\n\r\n    // In case of expected and unexpected event that have some token amounts remain in this contract, owner can call to collect them.\r\n    function collectRemainingToken(\r\n        ERC20 token,\r\n        uint256 amount\r\n    )\r\n      public\r\n      onlyOwner\r\n    {\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    // In case of expected and unexpected event that have some ether amounts remain in this contract, owner can call to collect them.\r\n    function collectRemainingEther(\r\n        uint256 amount\r\n    )\r\n      public\r\n      onlyOwner\r\n    {\r\n        (bool success, ) = msg.sender.call.value(amount)(\"\"); // Send back ether to sender\r\n        require(success, \"Transfer ether back to caller failed.\");\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"contract IKULAPTradingProxy\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AddedTradingProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disabledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"contract IKULAPTradingProxy\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"DisabledTradingProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enabledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contract IKULAPTradingProxy\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"EnabledTradingProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"contract IKULAPTradingProxy\",\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"addTradingProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectRemainingEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectRemainingToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"disableTradingProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"enableTradingProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherERC20\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingProxyIndex\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"}],\"name\":\"getDestinationReturnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"routes\",\"type\":\"uint256[]\"},{\"internalType\":\"contract ERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"srcAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"contract ERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"}],\"name\":\"getDestinationReturnAmountForSplitTrades\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tradingPaths\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"}],\"name\":\"getDestinationReturnAmountForTradeRoutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProxyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isTradingProxyEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"bytes16\",\"name\":\"name\",\"type\":\"bytes16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"routes\",\"type\":\"uint256[]\"},{\"internalType\":\"contract ERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"srcAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"contract ERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"}],\"name\":\"splitTrades\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingProxyIndex\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"routes\",\"type\":\"uint256[]\"},{\"internalType\":\"contract ERC20[]\",\"name\":\"srcTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract ERC20[]\",\"name\":\"destTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"partnerIndex\",\"type\":\"uint256\"}],\"name\":\"tradeRoutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradingProxies\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"contract IKULAPTradingProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"bytes16\",\"name\":\"name\",\"type\":\"bytes16\"}],\"name\":\"updatePartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KULAPDex","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7ce385bdea0c736789aa9e920130a41e4ff389f6613d76e3b65135fcd5d8eeaa"}]}