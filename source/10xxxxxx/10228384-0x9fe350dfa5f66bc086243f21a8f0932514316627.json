{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-05-18\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-01-23\r\n*/\r\n\r\n// File: github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a); // dev: overflow\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a); // dev: underflow\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b); // dev: overflow\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0); // dev: divide by zero\r\n        c = a / b;\r\n    }\r\n}\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/IRelayHub.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface for `RelayHub`, the core contract of the GSN. Users should not need to interact with this contract\r\n * directly.\r\n *\r\n * See the https://github.com/OpenZeppelin/openzeppelin-gsn-helpers[OpenZeppelin GSN helpers] for more information on\r\n * how to deploy an instance of `RelayHub` on your local test network.\r\n */\r\ninterface IRelayHub {\r\n    // Relay management\r\n\r\n    /**\r\n     * @dev Adds stake to a relay and sets its `unstakeDelay`. If the relay does not exist, it is created, and the caller\r\n     * of this function becomes its owner. If the relay already exists, only the owner can call this function. A relay\r\n     * cannot be its own owner.\r\n     *\r\n     * All Ether in this function call will be added to the relay's stake.\r\n     * Its unstake delay will be assigned to `unstakeDelay`, but the new value must be greater or equal to the current one.\r\n     *\r\n     * Emits a {Staked} event.\r\n     */\r\n    function stake(address relayaddr, uint256 unstakeDelay) external payable;\r\n\r\n    /**\r\n     * @dev Emitted when a relay's stake or unstakeDelay are increased\r\n     */\r\n    event Staked(address indexed relay, uint256 stake, uint256 unstakeDelay);\r\n\r\n    /**\r\n     * @dev Registers the caller as a relay.\r\n     * The relay must be staked for, and not be a contract (i.e. this function must be called directly from an EOA).\r\n     *\r\n     * This function can be called multiple times, emitting new {RelayAdded} events. Note that the received\r\n     * `transactionFee` is not enforced by {relayCall}.\r\n     *\r\n     * Emits a {RelayAdded} event.\r\n     */\r\n    function registerRelay(uint256 transactionFee, string calldata url) external;\r\n\r\n    /**\r\n     * @dev Emitted when a relay is registered or re-registerd. Looking at these events (and filtering out\r\n     * {RelayRemoved} events) lets a client discover the list of available relays.\r\n     */\r\n    event RelayAdded(address indexed relay, address indexed owner, uint256 transactionFee, uint256 stake, uint256 unstakeDelay, string url);\r\n\r\n    /**\r\n     * @dev Removes (deregisters) a relay. Unregistered (but staked for) relays can also be removed.\r\n     *\r\n     * Can only be called by the owner of the relay. After the relay's `unstakeDelay` has elapsed, {unstake} will be\r\n     * callable.\r\n     *\r\n     * Emits a {RelayRemoved} event.\r\n     */\r\n    function removeRelayByOwner(address relay) external;\r\n\r\n    /**\r\n     * @dev Emitted when a relay is removed (deregistered). `unstakeTime` is the time when unstake will be callable.\r\n     */\r\n    event RelayRemoved(address indexed relay, uint256 unstakeTime);\r\n\r\n    /** Deletes the relay from the system, and gives back its stake to the owner.\r\n     *\r\n     * Can only be called by the relay owner, after `unstakeDelay` has elapsed since {removeRelayByOwner} was called.\r\n     *\r\n     * Emits an {Unstaked} event.\r\n     */\r\n    function unstake(address relay) external;\r\n\r\n    /**\r\n     * @dev Emitted when a relay is unstaked for, including the returned stake.\r\n     */\r\n    event Unstaked(address indexed relay, uint256 stake);\r\n\r\n    // States a relay can be in\r\n    enum RelayState {\r\n        Unknown, // The relay is unknown to the system: it has never been staked for\r\n        Staked, // The relay has been staked for, but it is not yet active\r\n        Registered, // The relay has registered itself, and is active (can relay calls)\r\n        Removed    // The relay has been removed by its owner and can no longer relay calls. It must wait for its unstakeDelay to elapse before it can unstake\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a relay's status. Note that relays can be deleted when unstaked or penalized, causing this function\r\n     * to return an empty entry.\r\n     */\r\n    function getRelay(address relay) external view returns (uint256 totalStake, uint256 unstakeDelay, uint256 unstakeTime, address payable owner, RelayState state);\r\n\r\n    // Balance management\r\n\r\n    /**\r\n     * @dev Deposits Ether for a contract, so that it can receive (and pay for) relayed transactions.\r\n     *\r\n     * Unused balance can only be withdrawn by the contract itself, by calling {withdraw}.\r\n     *\r\n     * Emits a {Deposited} event.\r\n     */\r\n    function depositFor(address target) external payable;\r\n\r\n    /**\r\n     * @dev Emitted when {depositFor} is called, including the amount and account that was funded.\r\n     */\r\n    event Deposited(address indexed recipient, address indexed from, uint256 amount);\r\n\r\n    /**\r\n     * @dev Returns an account's deposits. These can be either a contracts's funds, or a relay owner's revenue.\r\n     */\r\n    function balanceOf(address target) external view returns (uint256);\r\n\r\n    /**\r\n     * Withdraws from an account's balance, sending it back to it. Relay owners call this to retrieve their revenue, and\r\n     * contracts can use it to reduce their funding.\r\n     *\r\n     * Emits a {Withdrawn} event.\r\n     */\r\n    function withdraw(uint256 amount, address payable dest) external;\r\n\r\n    /**\r\n     * @dev Emitted when an account withdraws funds from `RelayHub`.\r\n     */\r\n    event Withdrawn(address indexed account, address indexed dest, uint256 amount);\r\n\r\n    // Relaying\r\n\r\n    /**\r\n     * @dev Checks if the `RelayHub` will accept a relayed operation.\r\n     * Multiple things must be true for this to happen:\r\n     *  - all arguments must be signed for by the sender (`from`)\r\n     *  - the sender's nonce must be the current one\r\n     *  - the recipient must accept this transaction (via {acceptRelayedCall})\r\n     *\r\n     * Returns a `PreconditionCheck` value (`OK` when the transaction can be relayed), or a recipient-specific error\r\n     * code if it returns one in {acceptRelayedCall}.\r\n     */\r\n    function canRelay(\r\n        address relay,\r\n        address from,\r\n        address to,\r\n        bytes calldata encodedFunction,\r\n        uint256 transactionFee,\r\n        uint256 gasPrice,\r\n        uint256 gasLimit,\r\n        uint256 nonce,\r\n        bytes calldata signature,\r\n        bytes calldata approvalData\r\n    ) external view returns (uint256 status, bytes memory recipientContext);\r\n\r\n    // Preconditions for relaying, checked by canRelay and returned as the corresponding numeric values.\r\n    enum PreconditionCheck {\r\n        OK,                         // All checks passed, the call can be relayed\r\n        WrongSignature,             // The transaction to relay is not signed by requested sender\r\n        WrongNonce,                 // The provided nonce has already been used by the sender\r\n        AcceptRelayedCallReverted,  // The recipient rejected this call via acceptRelayedCall\r\n        InvalidRecipientStatusCode  // The recipient returned an invalid (reserved) status code\r\n    }\r\n\r\n    /**\r\n     * @dev Relays a transaction.\r\n     *\r\n     * For this to succeed, multiple conditions must be met:\r\n     *  - {canRelay} must `return PreconditionCheck.OK`\r\n     *  - the sender must be a registered relay\r\n     *  - the transaction's gas price must be larger or equal to the one that was requested by the sender\r\n     *  - the transaction must have enough gas to not run out of gas if all internal transactions (calls to the\r\n     * recipient) use all gas available to them\r\n     *  - the recipient must have enough balance to pay the relay for the worst-case scenario (i.e. when all gas is\r\n     * spent)\r\n     *\r\n     * If all conditions are met, the call will be relayed and the recipient charged. {preRelayedCall}, the encoded\r\n     * function and {postRelayedCall} will be called in that order.\r\n     *\r\n     * Parameters:\r\n     *  - `from`: the client originating the request\r\n     *  - `to`: the target {IRelayRecipient} contract\r\n     *  - `encodedFunction`: the function call to relay, including data\r\n     *  - `transactionFee`: fee (%) the relay takes over actual gas cost\r\n     *  - `gasPrice`: gas price the client is willing to pay\r\n     *  - `gasLimit`: gas to forward when calling the encoded function\r\n     *  - `nonce`: client's nonce\r\n     *  - `signature`: client's signature over all previous params, plus the relay and RelayHub addresses\r\n     *  - `approvalData`: dapp-specific data forwared to {acceptRelayedCall}. This value is *not* verified by the\r\n     * `RelayHub`, but it still can be used for e.g. a signature.\r\n     *\r\n     * Emits a {TransactionRelayed} event.\r\n     */\r\n    function relayCall(\r\n        address from,\r\n        address to,\r\n        bytes calldata encodedFunction,\r\n        uint256 transactionFee,\r\n        uint256 gasPrice,\r\n        uint256 gasLimit,\r\n        uint256 nonce,\r\n        bytes calldata signature,\r\n        bytes calldata approvalData\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted when an attempt to relay a call failed.\r\n     *\r\n     * This can happen due to incorrect {relayCall} arguments, or the recipient not accepting the relayed call. The\r\n     * actual relayed call was not executed, and the recipient not charged.\r\n     *\r\n     * The `reason` parameter contains an error code: values 1-10 correspond to `PreconditionCheck` entries, and values\r\n     * over 10 are custom recipient error codes returned from {acceptRelayedCall}.\r\n     */\r\n    event CanRelayFailed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint256 reason);\r\n\r\n    /**\r\n     * @dev Emitted when a transaction is relayed. \r\n     * Useful when monitoring a relay's operation and relayed calls to a contract\r\n     *\r\n     * Note that the actual encoded function might be reverted: this is indicated in the `status` parameter.\r\n     *\r\n     * `charge` is the Ether value deducted from the recipient's balance, paid to the relay's owner.\r\n     */\r\n    event TransactionRelayed(address indexed relay, address indexed from, address indexed to, bytes4 selector, RelayCallStatus status, uint256 charge);\r\n\r\n    // Reason error codes for the TransactionRelayed event\r\n    enum RelayCallStatus {\r\n        OK,                      // The transaction was successfully relayed and execution successful - never included in the event\r\n        RelayedCallFailed,       // The transaction was relayed, but the relayed call failed\r\n        PreRelayedFailed,        // The transaction was not relayed due to preRelatedCall reverting\r\n        PostRelayedFailed,       // The transaction was relayed and reverted due to postRelatedCall reverting\r\n        RecipientBalanceChanged  // The transaction was relayed and reverted due to the recipient's balance changing\r\n    }\r\n\r\n    /**\r\n     * @dev Returns how much gas should be forwarded to a call to {relayCall}, in order to relay a transaction that will\r\n     * spend up to `relayedCallStipend` gas.\r\n     */\r\n    function requiredGas(uint256 relayedCallStipend) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the maximum recipient charge, given the amount of gas forwarded, gas price and relay fee.\r\n     */\r\n    function maxPossibleCharge(uint256 relayedCallStipend, uint256 gasPrice, uint256 transactionFee) external view returns (uint256);\r\n\r\n     // Relay penalization. \r\n     // Any account can penalize relays, removing them from the system immediately, and rewarding the\r\n    // reporter with half of the relay's stake. The other half is burned so that, even if the relay penalizes itself, it\r\n    // still loses half of its stake.\r\n\r\n    /**\r\n     * @dev Penalize a relay that signed two transactions using the same nonce (making only the first one valid) and\r\n     * different data (gas price, gas limit, etc. may be different).\r\n     *\r\n     * The (unsigned) transaction data and signature for both transactions must be provided.\r\n     */\r\n    function penalizeRepeatedNonce(bytes calldata unsignedTx1, bytes calldata signature1, bytes calldata unsignedTx2, bytes calldata signature2) external;\r\n\r\n    /**\r\n     * @dev Penalize a relay that sent a transaction that didn't target `RelayHub`'s {registerRelay} or {relayCall}.\r\n     */\r\n    function penalizeIllegalTransaction(bytes calldata unsignedTx, bytes calldata signature) external;\r\n\r\n    /**\r\n     * @dev Emitted when a relay is penalized.\r\n     */\r\n    event Penalized(address indexed relay, address sender, uint256 amount);\r\n\r\n    /**\r\n     * @dev Returns an account's nonce in `RelayHub`.\r\n     */\r\n    function getNonce(address from) external view returns (uint256);\r\n}\r\n\r\n\r\n// File: github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/IRelayRecipient.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Base interface for a contract that will be called via the GSN from {IRelayHub}.\r\n *\r\n * TIP: You don't need to write an implementation yourself! Inherit from {GSNRecipient} instead.\r\n */\r\ninterface IRelayRecipient {\r\n    /**\r\n     * @dev Returns the address of the {IRelayHub} instance this recipient interacts with.\r\n     */\r\n    function getHubAddr() external view returns (address);\r\n\r\n    /**\r\n     * @dev Called by {IRelayHub} to validate if this recipient accepts being charged for a relayed call. Note that the\r\n     * recipient will be charged regardless of the execution result of the relayed call (i.e. if it reverts or not).\r\n     *\r\n     * The relay request was originated by `from` and will be served by `relay`. `encodedFunction` is the relayed call\r\n     * calldata, so its first four bytes are the function selector. The relayed call will be forwarded `gasLimit` gas,\r\n     * and the transaction executed with a gas price of at least `gasPrice`. `relay`'s fee is `transactionFee`, and the\r\n     * recipient will be charged at most `maxPossibleCharge` (in wei). `nonce` is the sender's (`from`) nonce for\r\n     * replay attack protection in {IRelayHub}, and `approvalData` is a optional parameter that can be used to hold a signature\r\n     * over all or some of the previous values.\r\n     *\r\n     * Returns a tuple, where the first value is used to indicate approval (0) or rejection (custom non-zero error code,\r\n     * values 1 to 10 are reserved) and the second one is data to be passed to the other {IRelayRecipient} functions.\r\n     *\r\n     * {acceptRelayedCall} is called with 50k gas: if it runs out during execution, the request will be considered\r\n     * rejected. A regular revert will also trigger a rejection.\r\n     */\r\n    function acceptRelayedCall(\r\n        address relay,\r\n        address from,\r\n        bytes calldata encodedFunction,\r\n        uint256 transactionFee,\r\n        uint256 gasPrice,\r\n        uint256 gasLimit,\r\n        uint256 nonce,\r\n        bytes calldata approvalData,\r\n        uint256 maxPossibleCharge\r\n    )\r\n        external\r\n        view\r\n        returns (uint256, bytes memory);\r\n\r\n    /**\r\n     * @dev Called by {IRelayHub} on approved relay call requests, before the relayed call is executed. This allows to e.g.\r\n     * pre-charge the sender of the transaction.\r\n     *\r\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}.\r\n     *\r\n     * Returns a value to be passed to {postRelayedCall}.\r\n     *\r\n     * {preRelayedCall} is called with 100k gas: if it runs out during exection or otherwise reverts, the relayed call\r\n     * will not be executed, but the recipient will still be charged for the transaction's cost.\r\n     */\r\n    function preRelayedCall(bytes calldata context) external returns (bytes32);\r\n\r\n    /**\r\n     * @dev Called by {IRelayHub} on approved relay call requests, after the relayed call is executed. This allows to e.g.\r\n     * charge the user for the relayed call costs, return any overcharges from {preRelayedCall}, or perform\r\n     * contract-specific bookkeeping.\r\n     *\r\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}. `success` is the execution status of\r\n     * the relayed call. `actualCharge` is an estimate of how much the recipient will be charged for the transaction,\r\n     * not including any gas used by {postRelayedCall} itself. `preRetVal` is {preRelayedCall}'s return value.\r\n     *\r\n     *\r\n     * {postRelayedCall} is called with 100k gas: if it runs out during execution or otherwise reverts, the relayed call\r\n     * and the call to {preRelayedCall} will be reverted retroactively, but the recipient will still be charged for the\r\n     * transaction's cost.\r\n     */\r\n    function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external;\r\n}\r\n\r\n// File: github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/GSNRecipient.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Base GSN recipient contract: includes the {IRelayRecipient} interface\r\n * and enables GSN support on all contracts in the inheritance tree.\r\n *\r\n * TIP: This contract is abstract. The functions {IRelayRecipient-acceptRelayedCall},\r\n *  {_preRelayedCall}, and {_postRelayedCall} are not implemented and must be\r\n * provided by derived contracts. See the\r\n * xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategies] for more\r\n * information on how to use the pre-built {GSNRecipientSignature} and\r\n * {GSNRecipientERC20Fee}, or how to write your own.\r\n */\r\ncontract GSNRecipient is IRelayRecipient, Context {\r\n    // Default RelayHub address, deployed on mainnet and all testnets at the same address\r\n    address private _relayHub = 0xD216153c06E857cD7f72665E0aF1d7D82172F494;\r\n\r\n    uint256 constant private RELAYED_CALL_ACCEPTED = 0;\r\n    uint256 constant private RELAYED_CALL_REJECTED = 11;\r\n\r\n    // How much gas is forwarded to postRelayedCall\r\n    uint256 constant internal POST_RELAYED_CALL_MAX_GAS = 100000;\r\n\r\n    /**\r\n     * @dev Emitted when a contract changes its {IRelayHub} contract to a new one.\r\n     */\r\n    event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub);\r\n\r\n    /**\r\n     * @dev Returns the address of the {IRelayHub} contract for this recipient.\r\n     */\r\n    function getHubAddr() public view returns (address) {\r\n        return _relayHub;\r\n    }\r\n\r\n    /**\r\n     * @dev Switches to a new {IRelayHub} instance. This method is added for future-proofing: there's no reason to not\r\n     * use the default instance.\r\n     *\r\n     * IMPORTANT: After upgrading, the {GSNRecipient} will no longer be able to receive relayed calls from the old\r\n     * {IRelayHub} instance. Additionally, all funds should be previously withdrawn via {_withdrawDeposits}.\r\n     */\r\n    function _upgradeRelayHub(address newRelayHub) internal {\r\n        address currentRelayHub = _relayHub;\r\n        require(newRelayHub != address(0), \"GSNRecipient: new RelayHub is the zero address\");\r\n        require(newRelayHub != currentRelayHub, \"GSNRecipient: new RelayHub is the current one\");\r\n\r\n        emit RelayHubChanged(currentRelayHub, newRelayHub);\r\n\r\n        _relayHub = newRelayHub;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the version string of the {IRelayHub} for which this recipient implementation was built. If\r\n     * {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.\r\n     */\r\n    // This function is view for future-proofing, it may require reading from\r\n    // storage in the future.\r\n    function relayHubVersion() public view returns (string memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return \"1.0.0\";\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws the recipient's deposits in `RelayHub`.\r\n     *\r\n     * Derived contracts should expose this in an external interface with proper access control.\r\n     */\r\n    function _withdrawDeposits(uint256 amount, address payable payee) internal {\r\n        IRelayHub(_relayHub).withdraw(amount, payee);\r\n    }\r\n\r\n    // Overrides for Context's functions: when called from RelayHub, sender and\r\n    // data require some pre-processing: the actual sender is stored at the end\r\n    // of the call data, which in turns means it needs to be removed from it\r\n    // when handling said data.\r\n\r\n    /**\r\n     * @dev Replacement for msg.sender. Returns the actual sender of a transaction: msg.sender for regular transactions,\r\n     * and the end-user for GSN relayed calls (where msg.sender is actually `RelayHub`).\r\n     *\r\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.sender`, and use {_msgSender} instead.\r\n     */\r\n    function _msgSender() internal view returns (address payable) {\r\n        if (msg.sender != _relayHub) {\r\n            return msg.sender;\r\n        } else {\r\n            return _getRelayedCallSender();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for msg.data. Returns the actual calldata of a transaction: msg.data for regular transactions,\r\n     * and a reduced version for GSN relayed calls (where msg.data contains additional information).\r\n     *\r\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.data`, and use {_msgData} instead.\r\n     */\r\n    function _msgData() internal view returns (bytes memory) {\r\n        if (msg.sender != _relayHub) {\r\n            return msg.data;\r\n        } else {\r\n            return _getRelayedCallData();\r\n        }\r\n    }\r\n\r\n    // Base implementations for pre and post relayedCall: only RelayHub can invoke them, and data is forwarded to the\r\n    // internal hook.\r\n\r\n    /**\r\n     * @dev See `IRelayRecipient.preRelayedCall`.\r\n     *\r\n     * This function should not be overriden directly, use `_preRelayedCall` instead.\r\n     *\r\n     * * Requirements:\r\n     *\r\n     * - the caller must be the `RelayHub` contract.\r\n     */\r\n    function preRelayedCall(bytes calldata context) external returns (bytes32) {\r\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\r\n        return _preRelayedCall(context);\r\n    }\r\n\r\n    /**\r\n     * @dev See `IRelayRecipient.preRelayedCall`.\r\n     *\r\n     * Called by `GSNRecipient.preRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\r\n     * must implement this function with any relayed-call preprocessing they may wish to do.\r\n     *\r\n     */\r\n    function _preRelayedCall(bytes memory context) internal returns (bytes32);\r\n\r\n    /**\r\n     * @dev See `IRelayRecipient.postRelayedCall`.\r\n     *\r\n     * This function should not be overriden directly, use `_postRelayedCall` instead.\r\n     *\r\n     * * Requirements:\r\n     *\r\n     * - the caller must be the `RelayHub` contract.\r\n     */\r\n    function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external {\r\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\r\n        _postRelayedCall(context, success, actualCharge, preRetVal);\r\n    }\r\n\r\n    /**\r\n     * @dev See `IRelayRecipient.postRelayedCall`.\r\n     *\r\n     * Called by `GSNRecipient.postRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\r\n     * must implement this function with any relayed-call postprocessing they may wish to do.\r\n     *\r\n     */\r\n    function _postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) internal;\r\n\r\n    /**\r\n     * @dev Return this in acceptRelayedCall to proceed with the execution of a relayed call. Note that this contract\r\n     * will be charged a fee by RelayHub\r\n     */\r\n    function _approveRelayedCall() internal pure returns (uint256, bytes memory) {\r\n        return _approveRelayedCall(\"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See `GSNRecipient._approveRelayedCall`.\r\n     *\r\n     * This overload forwards `context` to _preRelayedCall and _postRelayedCall.\r\n     */\r\n    function _approveRelayedCall(bytes memory context) internal pure returns (uint256, bytes memory) {\r\n        return (RELAYED_CALL_ACCEPTED, context);\r\n    }\r\n\r\n    /**\r\n     * @dev Return this in acceptRelayedCall to impede execution of a relayed call. No fees will be charged.\r\n     */\r\n    function _rejectRelayedCall(uint256 errorCode) internal pure returns (uint256, bytes memory) {\r\n        return (RELAYED_CALL_REJECTED + errorCode, \"\");\r\n    }\r\n\r\n    /*\r\n     * @dev Calculates how much RelayHub will charge a recipient for using `gas` at a `gasPrice`, given a relayer's\r\n     * `serviceFee`.\r\n     */\r\n    function _computeCharge(uint256 gas, uint256 gasPrice, uint256 serviceFee) internal pure returns (uint256) {\r\n        // The fee is expressed as a percentage. E.g. a value of 40 stands for a 40% fee, so the recipient will be\r\n        // charged for 1.4 times the spent amount.\r\n        return (gas * gasPrice * (100 + serviceFee)) / 100;\r\n    }\r\n\r\n    function _getRelayedCallSender() private pure returns (address payable result) {\r\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\r\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\r\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\r\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\r\n        // bytes. This can always be done due to the 32-byte prefix.\r\n\r\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\r\n        // easiest/most-efficient way to perform this operation.\r\n\r\n        // These fields are not accessible from assembly\r\n        bytes memory array = msg.data;\r\n        uint256 index = msg.data.length;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function _getRelayedCallData() private pure returns (bytes memory) {\r\n        // RelayHub appends the sender address at the end of the calldata, so in order to retrieve the actual msg.data,\r\n        // we must strip the last 20 bytes (length of an address type) from it.\r\n\r\n        uint256 actualDataLength = msg.data.length - 20;\r\n        bytes memory actualData = new bytes(actualDataLength);\r\n\r\n        for (uint256 i = 0; i < actualDataLength; ++i) {\r\n            actualData[i] = msg.data[i];\r\n        }\r\n\r\n        return actualData;\r\n    }\r\n}\r\n\r\n// File: browser/dex-adapter-simple.sol\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\ninterface IGateway {\r\n    function mint(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\r\n    function burn(bytes calldata _to, uint256 _amount) external returns (uint256);\r\n}\r\n\r\ninterface IGatewayRegistry {\r\n    function getGatewayBySymbol(string calldata _tokenSymbol) external view returns (IGateway);\r\n    function getGatewayByToken(address  _tokenAddress) external view returns (IGateway);\r\n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (IERC20);\r\n}\r\n\r\ninterface IUniswapExchange {\r\n    function tokenToEthTransferOutput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function tokenAddress() external view returns (address);\r\n}\r\n\r\ninterface ICurveExchange {\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\r\n\r\n    function get_dy(int128, int128 j, uint256 dx) external view returns (uint256);\r\n\r\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit) external returns (uint256 amount);\r\n\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\r\n\r\n    function remove_liquidity(\r\n        uint256 _amount,\r\n        uint256[2] calldata min_amounts\r\n    ) external;\r\n\r\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;\r\n\r\n    function remove_liquidity_one_coin(uint256 _token_amounts, int128 i, uint256 min_amount) external;\r\n}\r\n\r\ncontract CurveExchangeAdapter is GSNRecipient {\r\n    using SafeMath for uint256;\r\n    \r\n    IERC20 RENBTC;\r\n    IERC20 WBTC;\r\n    IERC20 curveToken;\r\n\r\n    ICurveExchange public exchange;  \r\n    IGatewayRegistry public registry;\r\n\r\n    event SwapReceived(uint256 mintedAmount, uint256 wbtcAmount);\r\n    event DepositMintedCurve(uint256 mintedAmount, uint256 curveAmount);\r\n    event ReceiveRen(uint256 renAmount);\r\n    event Burn(uint256 burnAmount);\r\n\r\n    constructor(ICurveExchange _exchange, IGatewayRegistry _registry, IERC20 _wbtc) public {\r\n        exchange = _exchange;\r\n        registry = _registry;\r\n        RENBTC = registry.getTokenBySymbol(\"BTC\");\r\n        WBTC = _wbtc;\r\n        address curveTokenAddress = 0x49849C98ae39Fff122806C06791Fa73784FB3675;\r\n        curveToken = IERC20(curveTokenAddress);\r\n        \r\n        // Approve exchange.\r\n        require(RENBTC.approve(address(exchange), uint256(-1)));\r\n        require(WBTC.approve(address(exchange), uint256(-1)));\r\n    }\r\n    \r\n    // GSN Support\r\n    function acceptRelayedCall(\r\n        address,\r\n        address,\r\n        bytes calldata,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata,\r\n        uint256\r\n    ) external view returns (uint256, bytes memory) {\r\n        return _approveRelayedCall();\r\n    }\r\n    \r\n    function _preRelayedCall(bytes memory context) internal returns (bytes32) {\r\n    }\r\n    \r\n    function _postRelayedCall(bytes memory context, bool, uint256 actualCharge, bytes32) internal {\r\n    }\r\n    \r\n    function mintThenSwap(\r\n        uint256 _minExchangeRate,\r\n        uint256 _newMinExchangeRate,\r\n        uint256 _slippage,\r\n        address payable _wbtcDestination,\r\n        uint256 _amount,\r\n        bytes32 _nHash,\r\n        bytes calldata _sig\r\n    ) external {\r\n        // Mint renBTC tokens\r\n        bytes32 pHash = keccak256(abi.encode(_minExchangeRate, _slippage, _wbtcDestination, _msgSender()));\r\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\r\n        \r\n        // Get price\r\n        uint256 dy = exchange.get_dy(0, 1, mintedAmount);\r\n        uint256 rate = dy.mul(1e8).div(mintedAmount);\r\n        _slippage = uint256(1e4).sub(_slippage);\r\n        uint256 min_dy = mintedAmount.mul(rate).mul(_slippage).div(1e8).div(1e4);\r\n        \r\n        // Price is OK\r\n        if (rate >= _newMinExchangeRate) {\r\n            uint256 startWbtcBalance = WBTC.balanceOf(address(this));\r\n            exchange.exchange(0, 1, mintedAmount, min_dy);\r\n\r\n            uint256 endWbtcBalance = WBTC.balanceOf(address(this));\r\n            uint256 wbtcBought = endWbtcBalance.sub(startWbtcBalance);\r\n        \r\n            //Send proceeds to the User\r\n            require(WBTC.transfer(_wbtcDestination, wbtcBought));\r\n            emit SwapReceived(mintedAmount, wbtcBought);\r\n        } else {\r\n            //Send renBTC to the User instead\r\n            require(RENBTC.transfer(_wbtcDestination, mintedAmount));\r\n            emit ReceiveRen(mintedAmount);\r\n        }\r\n    }\r\n\r\n    function mintThenDeposit(\r\n        address payable _wbtcDestination, \r\n        uint256 _amount, \r\n        uint256[2] calldata _amounts, \r\n        uint256 _min_mint_amount, \r\n        uint256 _new_min_mint_amount, \r\n        bytes32 _nHash, \r\n        bytes calldata _sig\r\n    ) external {\r\n        // Mint renBTC tokens\r\n        bytes32 pHash = keccak256(abi.encode(_wbtcDestination, _amounts, _min_mint_amount, _msgSender()));\r\n        //use actual _amount the user sent\r\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\r\n\r\n        //set renBTC to actual minted amount in case the user sent less BTC to Ren\r\n        uint256[2] memory receivedAmounts = _amounts;\r\n        receivedAmounts[0] = mintedAmount;\r\n        uint256 calc_token_amount = exchange.calc_token_amount(_amounts, true);\r\n        if(calc_token_amount >= _new_min_mint_amount) {\r\n            require(WBTC.transferFrom(msg.sender, address(this), receivedAmounts[1]));\r\n            uint256 curveBalanceBefore = curveToken.balanceOf(address(this));\r\n            exchange.add_liquidity(receivedAmounts, 0);\r\n            uint256 curveBalanceAfter = curveToken.balanceOf(address(this));\r\n            uint256 curveAmount = curveBalanceAfter.sub(curveBalanceBefore);\r\n            require(curveAmount >= _new_min_mint_amount);\r\n            require(curveToken.transfer(msg.sender, curveAmount));\r\n            emit DepositMintedCurve(mintedAmount, curveAmount);\r\n        }\r\n        else {\r\n            require(RENBTC.transfer(_wbtcDestination, mintedAmount));\r\n            emit ReceiveRen(mintedAmount);\r\n        }\r\n    }\r\n\r\n    function mintNoSwap(\r\n        uint256 _minExchangeRate,\r\n        uint256 _newMinExchangeRate,\r\n        uint256 _slippage,\r\n        address payable _wbtcDestination,\r\n        uint256 _amount,\r\n        bytes32 _nHash,\r\n        bytes calldata _sig\r\n    ) external {\r\n        bytes32 pHash = keccak256(abi.encode(_minExchangeRate, _slippage, _wbtcDestination, _msgSender()));\r\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\r\n        \r\n        require(RENBTC.transfer(_wbtcDestination, mintedAmount));\r\n        emit ReceiveRen(mintedAmount);\r\n    }\r\n\r\n    function mintNoDeposit(\r\n        address payable _wbtcDestination, \r\n        uint256 _amount, \r\n        uint256[2] calldata _amounts, \r\n        uint256 _min_mint_amount, \r\n        uint256 _new_min_mint_amount, \r\n        bytes32 _nHash, \r\n        bytes calldata _sig\r\n    ) external {\r\n         // Mint renBTC tokens\r\n        bytes32 pHash = keccak256(abi.encode(_wbtcDestination, _amounts, _min_mint_amount, _msgSender()));\r\n        //use actual _amount the user sent\r\n        uint256 mintedAmount = registry.getGatewayBySymbol(\"BTC\").mint(pHash, _amount, _nHash, _sig);\r\n\r\n        require(RENBTC.transfer(_wbtcDestination, mintedAmount));\r\n        emit ReceiveRen(mintedAmount);\r\n    }\r\n\r\n    function removeLiquidityThenBurn(bytes calldata _btcDestination, uint256 amount, uint256[2] calldata min_amounts) external {\r\n        uint256 startRenbtcBalance = RENBTC.balanceOf(address(this));\r\n        uint256 startWbtcBalance = WBTC.balanceOf(address(this));\r\n        require(curveToken.transferFrom(msg.sender, address(this), amount));\r\n        exchange.remove_liquidity(amount, min_amounts);\r\n        uint256 endRenbtcBalance = RENBTC.balanceOf(address(this));\r\n        uint256 endWbtcBalance = WBTC.balanceOf(address(this));\r\n        uint256 wbtcWithdrawn = endWbtcBalance.sub(startWbtcBalance);\r\n        require(WBTC.transfer(msg.sender, wbtcWithdrawn));\r\n        uint256 renbtcWithdrawn = endRenbtcBalance.sub(startRenbtcBalance);\r\n\r\n        // Burn and send proceeds to the User\r\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, renbtcWithdrawn);\r\n        emit Burn(burnAmount);\r\n    }\r\n\r\n    function removeLiquidityImbalanceThenBurn(bytes calldata _btcDestination, uint256[2] calldata amounts, uint256 max_burn_amount) external {\r\n        uint256 startRenbtcBalance = RENBTC.balanceOf(address(this));\r\n        uint256 startWbtcBalance = WBTC.balanceOf(address(this));\r\n        uint256 _tokens = curveToken.balanceOf(msg.sender);\r\n        if(_tokens > max_burn_amount) { \r\n            _tokens = max_burn_amount;\r\n        }\r\n        require(curveToken.transferFrom(msg.sender, address(this), _tokens));\r\n        exchange.remove_liquidity_imbalance(amounts, max_burn_amount.mul(101).div(100));\r\n        _tokens = curveToken.balanceOf(address(this));\r\n        require(curveToken.transfer(msg.sender, _tokens));\r\n        uint256 endRenbtcBalance = RENBTC.balanceOf(address(this));\r\n        uint256 endWbtcBalance = WBTC.balanceOf(address(this));\r\n        uint256 renbtcWithdrawn = endRenbtcBalance.sub(startRenbtcBalance);\r\n        uint256 wbtcWithdrawn = endWbtcBalance.sub(startWbtcBalance);\r\n        require(WBTC.transfer(msg.sender, wbtcWithdrawn));\r\n\r\n        // Burn and send proceeds to the User\r\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, renbtcWithdrawn);\r\n        emit Burn(burnAmount);\r\n    }\r\n\r\n    //always removing in renBTC, else use normal method\r\n    function removeLiquidityOneCoinThenBurn(bytes calldata _btcDestination, uint256 _token_amounts, uint256 min_amount) external {\r\n        uint256 startRenbtcBalance = RENBTC.balanceOf(address(this));\r\n        require(curveToken.transferFrom(msg.sender, address(this), _token_amounts));\r\n        exchange.remove_liquidity_one_coin(_token_amounts, 0, min_amount);\r\n        uint256 endRenbtcBalance = RENBTC.balanceOf(address(this));\r\n        uint256 renbtcWithdrawn = endRenbtcBalance.sub(startRenbtcBalance);\r\n\r\n        // Burn and send proceeds to the User\r\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, renbtcWithdrawn);\r\n        emit Burn(burnAmount);\r\n    }\r\n    \r\n    function swapThenBurn(bytes calldata _btcDestination, uint256 _amount, uint256 _minRenbtcAmount) external {\r\n        require(WBTC.transferFrom(msg.sender, address(this), _amount));\r\n        uint256 startRenbtcBalance = RENBTC.balanceOf(address(this));\r\n        exchange.exchange(1, 0, _amount, _minRenbtcAmount);\r\n        uint256 endRenbtcBalance = RENBTC.balanceOf(address(this));\r\n        uint256 renbtcBought = endRenbtcBalance.sub(startRenbtcBalance);\r\n        \r\n        // Burn and send proceeds to the User\r\n        uint256 burnAmount = registry.getGatewayBySymbol(\"BTC\").burn(_btcDestination, renbtcBought);\r\n        emit Burn(burnAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ICurveExchange\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"contract IGatewayRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wbtc\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curveAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMintedCurve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"renAmount\",\"type\":\"uint256\"}],\"name\":\"ReceiveRen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRelayHub\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRelayHub\",\"type\":\"address\"}],\"name\":\"RelayHubChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wbtcAmount\",\"type\":\"uint256\"}],\"name\":\"SwapReceived\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptRelayedCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract ICurveExchange\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHubAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wbtcDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"mintNoDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMinExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_wbtcDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"mintNoSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wbtcDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"mintThenDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMinExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_wbtcDestination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"mintThenSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"actualCharge\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"preRetVal\",\"type\":\"bytes32\"}],\"name\":\"postRelayedCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"preRelayedCall\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IGatewayRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"relayHubVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_btcDestination\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"max_burn_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalanceThenBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_btcDestination\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_token_amounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoinThenBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_btcDestination\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"min_amounts\",\"type\":\"uint256[2]\"}],\"name\":\"removeLiquidityThenBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_btcDestination\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRenbtcAmount\",\"type\":\"uint256\"}],\"name\":\"swapThenBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CurveExchangeAdapter","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000093054188d876f558f4a66b2ef1d97d16edf0895b000000000000000000000000e80d347df1209a76dd9d2319d62912ba98c54ddd0000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ac8974db0e84f30c06cd18403ba1910efee4e836266c75e5b4e9c29de1390c95"}]}