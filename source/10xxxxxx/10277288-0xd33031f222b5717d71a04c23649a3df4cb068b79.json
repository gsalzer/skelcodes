{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ncontract Token {\r\n    mapping (address => uint256) public balanceOf;\r\n    function transfer(address _to, uint256 _value) public;\r\n    function transferFrom(address _from, address _to, uint256 _value) public;\r\n    function approve(address _spender, uint256 _value) public;\r\n    function approveContract(address _spender, uint256 _value) public;\r\n    function createTokens(address _user, uint _tokens) external;\r\n}\r\n\r\ncontract Staking  {\r\n\r\n    address owner;\r\n    address token;\r\n    bool iniziali = false;\r\n    uint256 public minimalToken = 100000000000000000000;\r\n\r\n    struct stakingStruct {\r\n        bool isExist;\r\n        bool status;\r\n        uint256 tokens;\r\n        uint256 profit;\r\n        uint start;\r\n        uint finish;\r\n    }\r\n    \r\n    mapping(address => uint) public stakingCount;\r\n    mapping(address => mapping (uint => stakingStruct)) public stakings;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner{\r\n        require(owner == msg.sender, \"Only Owner\");\r\n        _;\r\n    }\r\n\r\n    function setAddrToken(address _addr) external onlyOwner {\r\n        token = _addr;\r\n    }\r\n\r\n    function calculate(address _user, uint _id) public view returns (uint256) {\r\n        uint _seconds = ((now - stakings[_user][_id].start) / 86400);\r\n        uint256 _days = uint256(_seconds);\r\n        uint256 _profit = (stakings[_user][_id].tokens * 260000000000000000 / 100000000000000000000) * _days;\r\n        if(_profit > 0){\r\n            return _profit;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function depositToken(uint256 amount) public {\r\n        require(amount >= minimalToken, \"Please enter a valid amount of tokens.\");\r\n        require(Token(token).balanceOf(msg.sender) >= amount, \"You don't have the amount of tokens.\");\r\n        Token(token).approveContract(address(this), amount);\r\n        Token(token).transferFrom(msg.sender, address(this), amount);\r\n        stakingStruct memory staking_struct;\r\n        staking_struct = stakingStruct({\r\n            isExist: true,\r\n            status: true,\r\n            tokens: amount,\r\n            profit: 0,\r\n            start: now,            \r\n            finish: 0\r\n        });\r\n        stakings[msg.sender][stakingCount[msg.sender]] = staking_struct;\r\n        stakingCount[msg.sender]++;\r\n        emit eventDeposit(msg.sender, amount, now);\r\n    }\r\n\r\n    function withdrawToken(uint _id) public {\r\n        require(stakings[msg.sender][_id].isExist, \"Staking not exists.\");\r\n        require(stakings[msg.sender][_id].status, \"It was already withdrawn.\");\r\n        uint256 _profit = calculate(msg.sender, _id);\r\n        require(_profit > 0, \"The profit is wrong.\");\r\n        Token(token).createTokens(msg.sender, (_profit/600));\r\n        Token(token).transfer(msg.sender, stakings[msg.sender][_id].tokens);\r\n        stakings[msg.sender][_id].status = false;\r\n        stakings[msg.sender][_id].profit = _profit;\r\n        stakings[msg.sender][_id].finish = now;\r\n        emit eventWithdraw(msg.sender, _id, stakings[msg.sender][_id].tokens, stakings[msg.sender][_id].profit, now);\r\n    }\r\n\r\n    event eventDeposit(address indexed _user, uint256 _tokens, uint256 _time);\r\n    event eventWithdraw(address indexed _user, uint indexed _id, uint256 _tokens, uint256 _profit, uint256 _time);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakings\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"calculate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddrToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"eventDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"eventWithdraw\",\"type\":\"event\"}]","ContractName":"Staking","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2632d8d3fda85ba2c7d4391b8cad1179ac4ab295336b72d77a643adb38a3b409"}]}