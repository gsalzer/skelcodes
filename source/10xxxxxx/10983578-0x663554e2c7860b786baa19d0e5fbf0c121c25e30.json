{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n    function want(address) external view returns (address);\r\n    function balanceOf(address) external view returns (uint);\r\n    function withdraw(address, uint) external;\r\n    function earn(address, uint) external;\r\n}\r\n\r\ninterface ICurveFi {\r\n    function get_virtual_price() external view returns (uint);\r\n    function add_liquidity(\r\n        uint256[4] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external;\r\n    function remove_liquidity_imbalance(\r\n        uint256[4] calldata amounts,\r\n        uint256 max_burn_amount\r\n    ) external;\r\n    function remove_liquidity(\r\n        uint256 _amount,\r\n        uint256[4] calldata amounts\r\n    ) external;\r\n    function exchange(\r\n        int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\r\n    ) external;\r\n}\r\n\r\ninterface Gauge {\r\n    function deposit(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface Mintr {\r\n    function mint(address) external;\r\n}\r\ninterface Uni {\r\n    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\r\n}\r\n\r\ninterface Strategy {\r\n    function want() external view returns (address);\r\n    function deposit() external;\r\n    function withdraw(address) external;\r\n    function withdraw(uint) external;\r\n    function skim() external;\r\n    function withdrawAll() external returns (uint);\r\n    function balanceOf() external view returns (uint);\r\n}\r\n\r\ninterface Vault {\r\n    function token() external view returns (address);\r\n    function claimInsurance() external;\r\n    function getPricePerFullShare() external view returns (uint);\r\n    function deposit(uint) external;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface yERC20 {\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw(uint256 _amount) external;\r\n}\r\n\r\ninterface IConvertor {\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n\r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n\r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n\r\n*/\r\n\r\ncontract StrategyStableUSD {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    enum TokenIndex {DAI, USDC, USDT}\r\n\r\n    address public governance;\r\n    address public controller;\r\n\r\n    address public yVault;\r\n    address public curve = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\r\n    address public ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\r\n    address public ycrvVault;\r\n\r\n    address public want;\r\n    address constant public crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n\r\n    TokenIndex public tokenIndex;\r\n    IConvertor public zap = IConvertor(0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3);\r\n\r\n    constructor(address _controller, TokenIndex _tokenIndex, address _ycrvVault) public {\r\n        governance = msg.sender;\r\n        controller = _controller;\r\n\r\n        tokenIndex = _tokenIndex;\r\n        ycrvVault = _ycrvVault;\r\n\r\n        if (tokenIndex == TokenIndex.DAI) {\r\n            want = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n            yVault = 0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01;\r\n        } else if (tokenIndex == TokenIndex.USDC) {\r\n            want = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n            yVault = 0xd6aD7a6750A7593E092a9B218d66C0A814a3436e;\r\n        } else if (tokenIndex == TokenIndex.USDT) {\r\n            want = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n            yVault = 0x83f798e925BcD4017Eb265844FDDAbb448f1707D;\r\n        } else {\r\n            revert('!tokenIndex');\r\n        }\r\n    }\r\n\r\n    function getName() external pure returns (string memory) {\r\n        return \"StrategyStableUSD\";\r\n    }\r\n\r\n    function deposit() public {\r\n        uint256 _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance > 0) {\r\n            IERC20(want).safeApprove(yVault, 0);\r\n            IERC20(want).safeApprove(yVault, _balance);\r\n            yERC20(yVault).deposit(_balance);\r\n        }\r\n\r\n        uint256 yBalance = IERC20(yVault).balanceOf(address(this));\r\n        if (yBalance > 0) {\r\n            IERC20(yVault).safeApprove(curve, 0);\r\n            IERC20(yVault).safeApprove(curve, yBalance);\r\n\r\n            uint256[4] memory amounts = [uint256(0), uint256(0), uint256(0), uint256(0)];\r\n            amounts[uint256(tokenIndex)] = yBalance;\r\n\r\n            ICurveFi(curve).add_liquidity(\r\n                amounts, 0\r\n            );\r\n        }\r\n\r\n        uint256 ycrvBalance = IERC20(ycrv).balanceOf(address(this));\r\n        if (ycrvBalance > 0) {\r\n            IERC20(ycrv).safeApprove(ycrvVault, 0);\r\n            IERC20(ycrv).safeApprove(ycrvVault, ycrvBalance);\r\n            // deposits the entire balance and also asks the vault to invest it (public function)\r\n            Vault(ycrvVault).deposit(ycrvBalance);\r\n        }\r\n    }\r\n\r\n    function balanceOf() external view returns (uint) {\r\n        uint256 shares = IERC20(ycrvVault).balanceOf(address(this));\r\n        if (shares == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 price = Vault(ycrvVault).getPricePerFullShare();\r\n        // the price is in yCRV units, because this is a yCRV vault\r\n        // the multiplication doubles the number of decimals for shares, so we need to divide\r\n        // the precision is always 10 ** 18 as the yCRV vault has 18 decimals\r\n        uint256 precision = 1e18;\r\n        uint256 ycrvBalance = shares.mul(price).div(precision);\r\n        // now we can convert the balance to the token amount\r\n        uint256 ycrvValue = underlyingValueFromYCrv(ycrvBalance);\r\n        return ycrvValue.add(IERC20(want).balanceOf(address(this)));\r\n    }\r\n\r\n    function withdraw(IERC20 _asset) external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        require(crv != address(_asset), \"crv\");\r\n        require(ycrv != address(_asset), \"ycrv\");\r\n\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    function withdraw(uint _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _withdrawSome(_amount.sub(_balance));\r\n            _amount = Math.min(_amount, IERC20(want).balanceOf(address(this)));\r\n        }\r\n\r\n        address _vault = Controller(controller).vaults(address(this));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        IERC20(want).safeTransfer(_vault, _amount);\r\n    }\r\n\r\n    function withdrawAll() external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint256 shares = IERC20(ycrvVault).balanceOf(address(this));\r\n        Vault(ycrvVault).withdraw(shares);\r\n\r\n        yCurveToUnderlying(uint256(~0));\r\n        balance = IERC20(want).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            address vault = Controller(controller).vaults(address(this));\r\n            require(vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n            IERC20(want).safeTransfer(vault, balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Returns the value of yCRV in y-token (e.g., yCRV -> yDai) accounting for slippage and fees.\r\n    */\r\n    function underlyingValueFromYCrv(uint256 ycrvBalance) public view returns (uint256) {\r\n        return zap.calc_withdraw_one_coin(ycrvBalance, int128(tokenIndex));\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal returns (uint) {\r\n        uint shares = IERC20(ycrvVault).balanceOf(address(this));\r\n        Vault(ycrvVault).withdraw(shares);\r\n        yCurveToUnderlying(_amount);\r\n\r\n        uint remains = IERC20(ycrv).balanceOf(address(this));\r\n        if (remains > 0) {\r\n            IERC20(ycrv).safeApprove(ycrvVault, 0);\r\n            IERC20(ycrv).safeApprove(ycrvVault, remains);\r\n            Vault(ycrvVault).deposit(remains);\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n    * Uses the Curve protocol to convert the yCRV back into the underlying asset. If it cannot acquire\r\n    * the limit amount, it will acquire the maximum it can.\r\n    */\r\n    function yCurveToUnderlying(uint256 underlyingLimit) internal {\r\n        uint256 ycrvBalance = IERC20(ycrv).balanceOf(address(this));\r\n\r\n        // this is the maximum number of y-tokens we can get for our yCRV\r\n        uint256 yTokenMaximumAmount = yTokenValueFromYCrv(ycrvBalance);\r\n        if (yTokenMaximumAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        // ensure that we will not overflow in the conversion\r\n        uint256 yTokenDesiredAmount = underlyingLimit == uint256(~0) ?\r\n        yTokenMaximumAmount : yTokenValueFromUnderlying(underlyingLimit);\r\n\r\n        uint256[4] memory yTokenAmounts = wrapCoinAmount(\r\n            Math.min(yTokenMaximumAmount, yTokenDesiredAmount));\r\n        uint256 yUnderlyingBalanceBefore = IERC20(yVault).balanceOf(address(this));\r\n        IERC20(ycrv).safeApprove(curve, 0);\r\n        IERC20(ycrv).safeApprove(curve, ycrvBalance);\r\n        ICurveFi(curve).remove_liquidity_imbalance(\r\n            yTokenAmounts, ycrvBalance\r\n        );\r\n        // now we have yUnderlying asset\r\n        uint256 yUnderlyingBalanceAfter = IERC20(yVault).balanceOf(address(this));\r\n        if (yUnderlyingBalanceAfter > yUnderlyingBalanceBefore) {\r\n            // we received new yUnderlying tokens for yCRV\r\n            yERC20(yVault).withdraw(yUnderlyingBalanceAfter.sub(yUnderlyingBalanceBefore));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Returns the value of yCRV in underlying token accounting for slippage and fees.\r\n    */\r\n    function yTokenValueFromYCrv(uint256 ycrvBalance) public view returns (uint256) {\r\n        return underlyingValueFromYCrv(ycrvBalance) // this is in DAI, we will convert to yDAI\r\n        .mul(10 ** 18)\r\n        .div(Vault(yVault).getPricePerFullShare()); // function getPricePerFullShare() has 18 decimals for all tokens\r\n    }\r\n\r\n    /**\r\n    * Returns the value of the underlying token in yToken\r\n    */\r\n    function yTokenValueFromUnderlying(uint256 amountUnderlying) public view returns (uint256) {\r\n        // 1 yToken = this much underlying, 10 ** 18 precision for all tokens\r\n        return amountUnderlying\r\n        .mul(1e18)\r\n        .div(Vault(yVault).getPricePerFullShare());\r\n    }\r\n\r\n    /**\r\n    * Wraps the coin amount in the array for interacting with the Curve protocol\r\n    */\r\n    function wrapCoinAmount(uint256 amount) internal view returns (uint256[4] memory) {\r\n        uint256[4] memory amounts = [uint256(0), uint256(0), uint256(0), uint256(0)];\r\n        amounts[uint56(tokenIndex)] = amount;\r\n        return amounts;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"enum StrategyStableUSD.TokenIndex\",\"name\":\"_tokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_ycrvVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIndex\",\"outputs\":[{\"internalType\":\"enum StrategyStableUSD.TokenIndex\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ycrvBalance\",\"type\":\"uint256\"}],\"name\":\"underlyingValueFromYCrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"yTokenValueFromUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ycrvBalance\",\"type\":\"uint256\"}],\"name\":\"yTokenValueFromYCrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ycrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ycrvVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"contract IConvertor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyStableUSD","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000d944765701051440178220e01df5f5638f39a903000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006d18de7cae3c40419105c3f72461f4fbc40bfbb","EVMVersion":"petersburg","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4c33b9a506fcaf4c20b5c9396e6187aefa440a0cc1ae30d55c3bd20f56514efe"}]}