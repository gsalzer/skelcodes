{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n \r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\ncontract PivvrStable is ERC20 {\r\n  using SafeMath for uint256;\r\n \r\n  mapping (address => uint256) private balances;\r\n  mapping (address => mapping (address => uint256)) private allowed;\r\n  string public constant name  = \"PivvrStable\";\r\n  string public constant symbol = \"PS\";\r\n  uint8 public constant decimals = 18;\r\n \r\n  ERC20 public PDS;\r\n \r\n  address public minter;\r\n  uint256 public floorPrice = 0.001 ether;\r\n \r\n  uint256 _totalSupply = 0;\r\n \r\n  constructor(address pds_token_addr) public {\r\n    minter = msg.sender;\r\n    PDS = ERC20(pds_token_addr);\r\n  }\r\n \r\n  function mint(uint256 amount) external payable {\r\n    require(msg.sender == minter);\r\n \r\n    // Tranfer ETH, so that that every stablecoin is backed by ETH based on the floor price.\r\n    require(msg.value == amount * floorPrice / 10**18);\r\n \r\n    // Transfer PDS, accounting for the 0.2% burn so that every stablecoin is backed by 1 PDS token.\r\n    require(PDS.transferFrom(msg.sender, address(this), amount * 100000 / 99799));\r\n \r\n    _totalSupply = _totalSupply.add(amount);\r\n    balances[msg.sender] = balances[msg.sender].add(amount);\r\n    emit Transfer(address(0), msg.sender, amount);\r\n  }\r\n \r\n  function redeemForETH(uint256 amount) public {\r\n    require(amount != 0);\r\n    require(amount <= balances[msg.sender]);\r\n \r\n    _totalSupply = _totalSupply.sub(amount);\r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    emit Transfer(msg.sender, address(0), amount);\r\n \r\n    msg.sender.transfer(amount * floorPrice / 10**18);\r\n  }\r\n \r\n  function redeemForPDS(uint256 amount) public {\r\n    require(amount != 0);\r\n    require(amount <= balances[msg.sender]);\r\n \r\n    _totalSupply = _totalSupply.sub(amount);\r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    emit Transfer(msg.sender, address(0), amount);\r\n \r\n    PDS.transfer(msg.sender, amount);\r\n  }\r\n \r\n  function redeemAllForETH() external {\r\n    redeemForETH(balanceOf(msg.sender));\r\n  }\r\n \r\n  function redeemAllForPDS() external {\r\n    redeemForPDS(balanceOf(msg.sender));\r\n  }\r\n \r\n  function retrieveExcessFunds() external {\r\n    // When someone redeems a stablecoin, they pick to receive either ETH or PDS.\r\n    // This leaves extra funds in the contract, allow the minter to retrieve them.\r\n    require(msg.sender == minter);\r\n \r\n    uint256 excessETH = address(this).balance.sub(totalSupply() * floorPrice / 10**18);\r\n    uint256 excessPDS = PDS.balanceOf(address(this)).sub(totalSupply());\r\n     \r\n    if (excessETH > 0)\r\n      msg.sender.transfer(excessETH);\r\n    if (excessPDS > 0)\r\n      PDS.transfer(msg.sender, excessPDS);\r\n  }\r\n \r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n \r\n  function balanceOf(address player) public view returns (uint256) {\r\n    return balances[player];\r\n  }\r\n \r\n  function allowance(address player, address spender) public view returns (uint256) {\r\n    return allowed[player][spender];\r\n  }\r\n \r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= balances[msg.sender]);\r\n    require(to != address(0));\r\n \r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n \r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n \r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n \r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n \r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= balances[from]);\r\n    require(value <= allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n   \r\n    balances[from] = balances[from].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n   \r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n   \r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n \r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\r\n    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n \r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedValue);\r\n    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n}\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n \r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveExcessFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemForPDS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemAllForETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemAllForPDS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemForETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"floorPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PDS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"pds_token_addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PivvrStable","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f7a6acd437edc08320ab17644bb5963753a4e6d8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d69ab773743d949efb727b74cc61ea87843605dd1e6c660f1027fbce3e93dcf9"}]}