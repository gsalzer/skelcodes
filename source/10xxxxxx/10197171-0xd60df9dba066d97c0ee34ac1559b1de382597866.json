{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-06-02\r\n*/\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IRouter {\r\n    function f(uint id, bytes32 k) external view returns (address);\r\n    function defaultDataContract(uint id) external view returns (address);\r\n    function bondNr() external view returns (uint);\r\n    function setBondNr(uint _bondNr) external;\r\n\r\n    function setDefaultContract(uint id, address data) external;\r\n    function addField(uint id, bytes32 field, address data) external;\r\n}\r\n\r\nenum BondStage {\r\n        //无意义状态\r\n        DefaultStage,\r\n        //评级\r\n        RiskRating,\r\n        RiskRatingFail,\r\n        //募资\r\n        CrowdFunding,\r\n        CrowdFundingSuccess,\r\n        CrowdFundingFail,\r\n        UnRepay,//待还款\r\n        RepaySuccess,\r\n        Overdue,\r\n        //由清算导致的债务结清\r\n        DebtClosed\r\n    }\r\n\r\n//状态标签\r\nenum IssuerStage {\r\n        DefaultStage,\r\n\t\tUnWithdrawCrowd,\r\n        WithdrawCrowdSuccess,\r\n\t\tUnWithdrawPawn,\r\n        WithdrawPawnSuccess       \r\n    }\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-04-03\r\n*/\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    // function toPayable(address account) internal pure returns (address payable) {\r\n    //     return address(uint160(account));\r\n    // }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    // function sendValue(address payable recipient, uint256 amount) internal {\r\n    //     require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    //     // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    //     (bool success, ) = recipient.call.value(amount)(\"\");\r\n    //     require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    // }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    // function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    //     uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    //     callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    // }\r\n\r\n    // function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n    //     uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n    //     callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    // }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    // function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    //     _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    //     return true;\r\n    // }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    // function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n    //     _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n    //     return true;\r\n    // }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        // _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        // _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        // _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    // function _burnFrom(address account, uint256 amount) internal virtual {\r\n    //     _burn(account, amount);\r\n    //     _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    // }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\r\n     */\r\n    // function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: ../../../../tmp/openzeppelin-contracts/contracts/token/ERC20/ERC20Burnable.sol\r\n// pragma solidity ^0.6.0;\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    // function burnFrom(address account, uint256 amount) public virtual {\r\n    //     _burnFrom(account, amount);\r\n    // }\r\n}\r\n\r\ninterface IBondData {\r\n    struct what {\r\n        address proposal;\r\n        uint256 weight;\r\n    }\r\n\r\n    struct prwhat {\r\n        address who;\r\n        address proposal;\r\n        uint256 reason;\r\n    }\r\n\r\n    struct Balance {\r\n        //发行者：\r\n        //amountGive: 质押的token数量，项目方代币\r\n        //amountGet: 募集的token数量，USDT，USDC\r\n\r\n        //投资者：\r\n        //amountGive: 投资的token数量，USDT，USDC\r\n        //amountGet: 债券凭证数量\r\n        uint256 amountGive;\r\n        uint256 amountGet;\r\n    }\r\n\r\n    function issuer() external view returns (address);\r\n\r\n    function collateralToken() external view returns (address);\r\n\r\n    function crowdToken() external view returns (address);\r\n\r\n    function getBorrowAmountGive() external view returns (uint256);\r\n\r\n\r\n\r\n    function getSupplyAmount(address who) external view returns (uint256);\r\n\r\n\r\n    function par() external view returns (uint256);\r\n\r\n    function mintBond(address who, uint256 amount) external;\r\n\r\n    function burnBond(address who, uint256 amount) external;\r\n\r\n\r\n    function transferableAmount() external view returns (uint256);\r\n\r\n    function debt() external view returns (uint256);\r\n\r\n    function actualBondIssuance() external view returns (uint256);\r\n\r\n    function couponRate() external view returns (uint256);\r\n\r\n    function depositMultiple() external view returns (uint256);\r\n\r\n    function discount() external view returns (uint256);\r\n\r\n\r\n    function voteExpired() external view returns (uint256);\r\n\r\n\r\n    function investExpired() external view returns (uint256);\r\n\r\n    function totalBondIssuance() external view returns (uint256);\r\n\r\n    function maturity() external view returns (uint256);\r\n\r\n    function config() external view returns (address);\r\n\r\n    function weightOf(address who) external view returns (uint256);\r\n\r\n    function totalWeight() external view returns (uint256);\r\n\r\n    function bondExpired() external view returns (uint256);\r\n\r\n    function interestBearingPeriod() external;\r\n\r\n\r\n    function bondStage() external view returns (uint256);\r\n\r\n    function issuerStage() external view returns (uint256);\r\n\r\n    function issueFee() external view returns (uint256);\r\n\r\n\r\n    function totalInterest() external view returns (uint256);\r\n\r\n    function gracePeriod() external view returns (uint256);\r\n\r\n    function liability() external view returns (uint256);\r\n\r\n    function remainInvestAmount() external view returns (uint256);\r\n\r\n    function supplyMap(address) external view returns (Balance memory);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function setPar(uint256) external;\r\n\r\n    function liquidateLine() external view returns (uint256);\r\n\r\n    function setBondParam(bytes32 k, uint256 v) external;\r\n\r\n    function setBondParamAddress(bytes32 k, address v) external;\r\n\r\n    function minIssueRatio() external view returns (uint256);\r\n\r\n    function partialLiquidateAmount() external view returns (uint256);\r\n\r\n    function votes(address who) external view returns (what memory);\r\n\r\n    function setVotes(address who, address proposal, uint256 amount) external;\r\n\r\n    function weights(address proposal) external view returns (uint256);\r\n\r\n    function setBondParamMapping(bytes32 name, address k, uint256 v) external;\r\n\r\n    function top() external view returns (address);\r\n\r\n\r\n    function voteLedger(address who) external view returns (uint256);\r\n\r\n    function totalWeights() external view returns (uint256);\r\n\r\n\r\n    function setPr(address who, address proposal, uint256 reason) external;\r\n\r\n    function pr() external view returns (prwhat memory);\r\n\r\n    function fee() external view returns (uint256);\r\n\r\n    function profits(address who) external view returns (uint256);\r\n\r\n\r\n\r\n    function totalProfits() external view returns (uint256);\r\n\r\n    function originLiability() external view returns (uint256);\r\n\r\n    function liquidating() external view returns (bool);\r\n    function setLiquidating(bool _liquidating) external;\r\n\r\n    function sysProfit() external view returns (uint256);\r\n    function totalFee() external view returns (uint256);\r\n}\r\n\r\n/*\r\n * Copyright (c) The Force Protocol Development Team\r\n */\r\ninterface ICoreUtils {\r\n    function d(uint256 id) external view returns (address);\r\n\r\n    function bondData(uint256 id) external view returns (IBondData);\r\n\r\n    //principal + interest = principal * (1 + couponRate);\r\n    function calcPrincipalAndInterest(uint256 principal, uint256 couponRate)\r\n        external\r\n        pure\r\n        returns (uint256);\r\n\r\n    //可转出金额,募集到的总资金减去给所有投票人的手续费\r\n    function transferableAmount(uint256 id) external view returns (uint256);\r\n\r\n    //总的募集资金量\r\n    function debt(uint256 id) external view returns (uint256);\r\n\r\n    //总的募集资金量\r\n    function totalInterest(uint256 id) external view returns (uint256);\r\n\r\n    function debtPlusTotalInterest(uint256 id) external view returns (uint256);\r\n\r\n    //可投资的剩余份数\r\n    function remainInvestAmount(uint256 id) external view returns (uint256);\r\n\r\n        function calcMinCollateralTokenAmount(uint256 id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function pawnBalanceInUsd(uint256 id) external view returns (uint256);\r\n\r\n    function disCountPawnBalanceInUsd(uint256 id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function crowdBalanceInUsd(uint256 id) external view returns (uint256);\r\n\r\n    //资不抵债判断，资不抵债时，为true，否则为false\r\n    function isInsolvency(uint256 id) external view returns (bool);\r\n\r\n    //获取质押的代币价格\r\n    function pawnPrice(uint256 id) external view returns (uint256);\r\n\r\n    //获取募资的代币价格\r\n    function crowdPrice(uint256 id) external view returns (uint256);\r\n\r\n    //要清算的质押物数量\r\n    //X = (AC*price - PCR*PD)/(price*(1-PCR*Discount))\r\n    //X = (PCR*PD - AC*price)/(price*(PCR*Discount-1))\r\n    function X(uint256 id) external view returns (uint256 res);\r\n    //清算额，减少的债务\r\n    //X*price(collater)*Discount/price(crowd)\r\n    function Y(uint256 id) external view returns (uint256 res);\r\n\r\n    //到期后，由系统债务算出需要清算的抵押物数量\r\n    function calcLiquidatePawnAmount(uint256 id) external view returns (uint256);\r\n    function calcLiquidatePawnAmount(uint256 id, uint256 liability) external view returns (uint256);\r\n\r\n    function investPrincipalWithInterest(uint256 id, address who)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n        //bond:\r\n    function convert2BondAmount(address b, address t, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    //bond:\r\n    function convert2GiveAmount(uint256 id, uint256 bondAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    \r\n    function isUnsafe(uint256 id) external view returns (bool unsafe);\r\n    function isDepositMultipleUnsafe(uint256 id) external view returns (bool unsafe);\r\n    function getLiquidateAmount(uint id, uint y1) external view returns (uint256, uint256);\r\n    function precision(uint256 id) external view returns (uint256);\r\n    function isDebtOpen(uint256 id) external view returns (bool);\r\n    function isMinIssuanceCheckOK(uint256 id) external view returns (bool ok);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20Detailed {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\ninterface IOracle {\r\n    function get(address t) external view returns (uint, bool);\r\n}\r\n\r\ninterface IConfig {\r\n    function voteDuration() external view returns (uint256);\r\n\r\n    function investDuration() external view returns (uint256);\r\n\r\n    function discount(address token) external view returns (uint256);\r\n    function depositMultiple(address token) external view returns (uint256);\r\n    function liquidateLine(address token) external view returns (uint256);\r\n\r\n    function gracePeriod() external view returns (uint256);\r\n    function partialLiquidateAmount(address token) external view returns (uint256);\r\n    function gov() external view returns(address);\r\n    function ratingFeeRatio() external view returns (uint256);\r\n}\r\n\r\ninterface IACL {\r\n    function accessible(address from, address to, bytes4 sig)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ncontract Core {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    address public ACL;\r\n    address public router;\r\n    address public config;\r\n    address public oracle;\r\n    ICoreUtils public coreUtils;\r\n    address public nameGen;\r\n\r\n    modifier auth {\r\n        IACL _ACL = IACL(ACL);\r\n        require(_ACL.accessible(msg.sender, address(this), msg.sig), \"core: access unauthorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _ACL,\r\n        address _router,\r\n        address _config,\r\n        address _coreUtils,\r\n        address _oracle,\r\n\t    address _nameGen\r\n    ) public {\r\n        ACL = _ACL;\r\n        router = _router;\r\n        config = _config;\r\n        coreUtils = ICoreUtils(_coreUtils);\r\n        oracle = _oracle;\r\n\t    nameGen = _nameGen;\r\n    }\r\n\r\n    function setCoreParamAddress(bytes32 k, address v) external auth {\r\n        if (k == bytes32(\"router\")) {\r\n            router = v;\r\n            return;\r\n        }\r\n        if (k == bytes32(\"config\")) {\r\n            config = v;\r\n            return;\r\n        }\r\n        if (k == bytes32(\"coreUtils\")) {\r\n            coreUtils = ICoreUtils(v);\r\n            return;\r\n        }\r\n        if (k == bytes32(\"oracle\")) {\r\n            oracle = v;\r\n            return;\r\n        }\r\n        revert(\"setCoreParamAddress: invalid k\");\r\n    }\r\n\r\n    function setACL(\r\n        address _ACL) external {\r\n        require(msg.sender == ACL, \"require ACL\");\r\n        ACL = _ACL;\r\n    }\r\n\r\n    function d(uint256 id) public view returns (address) {\r\n        return IRouter(router).defaultDataContract(id);\r\n    }\r\n\r\n    function bondData(uint256 id) public view returns (IBondData) {\r\n        return IBondData(d(id));\r\n    }\r\n\r\n    event MonitorEvent(address indexed who, address indexed bond, bytes32 indexed funcName, bytes);\r\n\r\n    function MonitorEventCallback(address who, address bond, bytes32 funcName, bytes calldata payload) external auth {\r\n        emit MonitorEvent(who, bond, funcName, payload);\r\n    }\r\n\r\n    function initialDepositCb(uint256 id, uint256 amount) external auth {\r\n        IBondData b = bondData(id);\r\n        b.setBondParam(\"depositMultiple\", IConfig(config).depositMultiple(b.collateralToken()));\r\n\r\n        require(amount >= ICoreUtils(coreUtils).calcMinCollateralTokenAmount(id), \"invalid deposit amount\");\r\n\r\n        b.setBondParam(\"bondStage\", uint256(BondStage.RiskRating));\r\n        b.setBondParamAddress(\"gov\", IConfig(config).gov());\r\n\r\n        uint256 voteDuration = IConfig(config).voteDuration(); //s\r\n        b.setBondParam(\"voteExpired\", now + voteDuration);\r\n        b.setBondParam(\"gracePeriod\", IConfig(config).gracePeriod());\r\n\r\n        b.setBondParam(\"discount\", IConfig(config).discount(b.collateralToken()));\r\n        b.setBondParam(\"liquidateLine\", IConfig(config).liquidateLine(b.collateralToken()));\r\n        b.setBondParam(\"partialLiquidateAmount\", IConfig(config).partialLiquidateAmount(b.crowdToken()));\r\n\r\n\r\n        b.setBondParam(\"borrowAmountGive\", b.getBorrowAmountGive().add(amount));\r\n               \r\n\r\n    }\r\n\r\n    //发债方追加资金, amount为需要转入的token数\r\n    function depositCb(address who, uint256 id, uint256 amount)\r\n        external\r\n        auth\r\n        returns (bool)\r\n    {\r\n        require(d(id) != address(0) && bondData(id).issuer() == who, \"invalid address or issuer\");\r\n\r\n        IBondData b = bondData(id);\r\n        // //充值amount token到合约中，充值之前需要approve\r\n        // safeTransferFrom(b.collateralToken(), msg.sender, address(this), address(this), amount);\r\n\r\n        b.setBondParam(\"borrowAmountGive\",b.getBorrowAmountGive().add(amount));\r\n\r\n        return true;\r\n    }\r\n\r\n    //投资债券接口\r\n    //id: 发行的债券id，唯一标志债券\r\n    //amount： 投资的数量\r\n    function investCb(address who, uint256 id, uint256 amount)\r\n        external\r\n        auth\r\n        returns (bool)\r\n    {\r\n        IBondData b = bondData(id);\r\n        require(d(id) != address(0) \r\n            && who != b.issuer() \r\n            && now <= b.investExpired()\r\n            && b.bondStage() == uint(BondStage.CrowdFunding), \"forbidden self invest, or invest is expired\");\r\n        uint256 bondAmount = coreUtils.convert2BondAmount(address(b), b.crowdToken(), amount);\r\n        //投资不能超过剩余可投份数\r\n        require(\r\n            bondAmount > 0 && bondAmount <= coreUtils.remainInvestAmount(id),\r\n            \"invalid bondAmount\"\r\n        );\r\n        b.mintBond(who, bondAmount);\r\n\r\n        // //充值amount token到合约中，充值之前需要approve\r\n        // safeTransferFrom(give, msg.sender, address(this), address(this), amount);\r\n\r\n        require(coreUtils.remainInvestAmount(id) >= 0, \"bond overflow\");\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    //停止融资, 开始计息\r\n    function interestBearingPeriod(uint256 id) external {\r\n        IBondData b = bondData(id);\r\n\r\n        //设置众筹状态, 调用的前置条件必须满足债券投票完成并且通过.\r\n        //@auth 仅允许 @Core 合约调用.\r\n        require(d(id) != address(0)\r\n            && b.bondStage() == uint256(BondStage.CrowdFunding)\r\n            && (now > b.investExpired() || coreUtils.remainInvestAmount(id) == 0), \"already closed invest\");\r\n        //计算融资进度.\r\n        if (coreUtils.isMinIssuanceCheckOK(id)) {\r\n            uint sysDebt = coreUtils.debtPlusTotalInterest(id);\r\n            b.setBondParam(\"liability\", sysDebt);\r\n            b.setBondParam(\"originLiability\", sysDebt);\r\n\r\n            uint256 _1 = 1 ether;\r\n            uint256 crowdUsdxLeverage = coreUtils.crowdBalanceInUsd(id)\r\n                .mul(b.depositMultiple())\r\n                .mul(b.liquidateLine())\r\n                .div(1e36);\r\n\r\n            //CCR < 0.7 * 4\r\n            //pawnUsd/crowdUsd < 0.7*4\r\n            bool unsafe = coreUtils.pawnBalanceInUsd(id) < crowdUsdxLeverage;\r\n            if (unsafe) {\r\n                b.setBondParam(\"bondStage\", uint256(BondStage.CrowdFundingFail));\r\n                b.setBondParam(\"issuerStage\", uint256(IssuerStage.UnWithdrawPawn));\r\n            } else {\r\n                b.setBondParam(\"bondExpired\", now + b.maturity());\r\n\r\n                b.setBondParam(\"bondStage\", uint256(BondStage.CrowdFundingSuccess));\r\n                b.setBondParam(\"issuerStage\", uint256(IssuerStage.UnWithdrawCrowd));\r\n\r\n                //根据当前融资额度获取投票手续费.\r\n                uint256 totalFee = b.totalFee();\r\n                uint256 voteFee = totalFee.mul(IConfig(config).ratingFeeRatio()).div(_1);\r\n                b.setBondParam(\"fee\", voteFee);\r\n                b.setBondParam(\"sysProfit\", totalFee.sub(voteFee));\r\n            }\r\n        } else {\r\n            b.setBondParam(\"bondStage\", uint256(BondStage.CrowdFundingFail));\r\n            b.setBondParam(\"issuerStage\", uint256(IssuerStage.UnWithdrawPawn));\r\n        }\r\n\r\n        emit MonitorEvent(msg.sender, address(b), \"interestBearingPeriod\", abi.encodePacked());\r\n    }\r\n\r\n    //转出募集到的资金,只有债券发行者可以转出资金\r\n    function txOutCrowdCb(address who, uint256 id) external auth returns (uint) {\r\n        IBondData b = IBondData(bondData(id));\r\n        require(d(id) != address(0) && b.issuerStage() == uint(IssuerStage.UnWithdrawCrowd) && b.issuer() == who, \"only txout crowd once or require issuer\");\r\n\r\n\r\n        uint256 balance = coreUtils.transferableAmount(id);\r\n        // safeTransferFrom(crowd, address(this), address(this), msg.sender, balance);\r\n\r\n        b.setBondParam(\"issuerStage\", uint256(IssuerStage.WithdrawCrowdSuccess));\r\n        b.setBondParam(\"bondStage\", uint256(BondStage.UnRepay));\r\n\r\n        return balance;\r\n    }\r\n\r\n    function overdueCb(uint256 id) external auth {\r\n        IBondData b = IBondData(bondData(id));\r\n        require(now >= b.bondExpired().add(b.gracePeriod()) \r\n            && (b.bondStage() == uint(BondStage.UnRepay) || b.bondStage() == uint(BondStage.CrowdFundingSuccess) ), \"invalid overdue call state\");\r\n        b.setBondParam(\"bondStage\", uint256(BondStage.Overdue));\r\n        emit MonitorEvent(msg.sender, address(b), \"overdue\", abi.encodePacked());\r\n    }\r\n\r\n    //发债方还款\r\n    //id: 发行的债券id，唯一标志债券\r\n    //get: 募集的token地址\r\n    //amount: 还款数量\r\n    function repayCb(address who, uint256 id) external auth returns (uint) {\r\n        require(d(id) != address(0) && bondData(id).issuer() == who, \"invalid address or issuer\");\r\n        IBondData b = bondData(id);\r\n        //募资成功，起息后即可还款,只有未还款或者逾期中可以还款，债务被关闭或者抵押物被清算完，不用还款\r\n        require(\r\n            b.bondStage() == uint(BondStage.UnRepay) || b.bondStage() == uint(BondStage.Overdue),\r\n            \"invalid state\"\r\n        );\r\n\r\n        //充值repayAmount token到合约中，充值之前需要approve\r\n        //使用amountGet进行计算\r\n        uint256 repayAmount = b.liability();\r\n        b.setBondParam(\"liability\", 0);\r\n\r\n        //safeTransferFrom(crowd, msg.sender, address(this), address(this), repayAmount);\r\n\r\n        b.setBondParam(\"bondStage\", uint256(BondStage.RepaySuccess));\r\n        b.setBondParam(\"issuerStage\", uint256(IssuerStage.UnWithdrawPawn));\r\n\r\n        //清算一部分后,正常还款，需要设置清算中为false\r\n        if (b.liquidating()) {\r\n            b.setLiquidating(false);\r\n        }\r\n\r\n        return repayAmount;\r\n    }\r\n\r\n    //发债方取回质押token,在发债方已还清贷款的情况下，可以取回质押品\r\n    //id: 发行的债券id，唯一标志债券\r\n    //pawn: 抵押的token地址\r\n    //amount: 取回数量\r\n    function withdrawPawnCb(address who, uint256 id) external auth returns (uint) {\r\n        IBondData b = bondData(id);\r\n        require(d(id) != address(0) \r\n            && b.issuer() == who\r\n            && b.issuerStage() == uint256(IssuerStage.UnWithdrawPawn), \"invalid issuer, txout state or address\");\r\n\r\n        b.setBondParam(\"issuerStage\", uint256(IssuerStage.WithdrawPawnSuccess));\r\n        uint256 borrowGive = b.getBorrowAmountGive();\r\n        //刚好结清债务和抵押物均为0（b.issuerStage() == uint256(IssuerStage.DebtClosed)）时，不能取回抵押物\r\n        require(borrowGive > 0, \"invalid give amount\");\r\n        b.setBondParam(\"borrowAmountGive\", 0);//更新抵押品数量为0\r\n\r\n        return borrowGive;\r\n    }\r\n\r\n    //募资失败，投资人凭借\"债券\"取回本金\r\n    function withdrawPrincipalCb(address who, uint256 id)\r\n        external\r\n        auth\r\n        returns (uint256)\r\n    {\r\n        IBondData b = bondData(id);\r\n\r\n        //募资完成, 但是未募资成功.\r\n        require(d(id) != address(0) && \r\n            b.bondStage() == uint(BondStage.CrowdFundingFail),\r\n            \"must crowdfunding failure\"\r\n        );\r\n\r\n        (uint256 supplyGive) = b.getSupplyAmount(who);\r\n        //safeTransferFrom(give, address(this), address(this), msg.sender, supplyGive);\r\n\r\n        uint256 bondAmount = coreUtils.convert2BondAmount(\r\n            address(b),\r\n            b.crowdToken(),\r\n            supplyGive\r\n        );\r\n        b.burnBond(who, bondAmount);\r\n\r\n\r\n        return supplyGive;\r\n    }\r\n\r\n    //债券到期, 投资人取回本金和收益\r\n    function withdrawPrincipalAndInterestCb(address who, uint256 id)\r\n        external\r\n        auth\r\n        returns (uint256)\r\n    {\r\n        IBondData b = bondData(id);\r\n        //募资成功，并且债券到期\r\n        require(d(id) != address(0) && (\r\n            b.bondStage() == uint(BondStage.RepaySuccess)\r\n            || b.bondStage() == uint(BondStage.DebtClosed)),\r\n            \"unrepay or unliquidate\"\r\n        );\r\n\r\n\r\n        (uint256 supplyGive) = b.getSupplyAmount(who);\r\n        uint256 bondAmount = coreUtils.convert2BondAmount(\r\n            address(b),\r\n            b.crowdToken(),\r\n            supplyGive\r\n        );\r\n\r\n        uint256 actualRepay = coreUtils.investPrincipalWithInterest(id, who);\r\n\r\n        //safeTransferFrom(give, address(this), address(this), msg.sender, actualRepay);\r\n\r\n        b.burnBond(who, bondAmount);\r\n\r\n\r\n        return actualRepay;\r\n    }\r\n\r\n    function abs(uint256 a, uint256 b) internal pure returns (uint c) {\r\n        c = a >= b ? a.sub(b) : b.sub(a);\r\n    }\r\n\r\n    function liquidateInternal(address who, uint256 id, uint y1, uint x1) internal returns (uint256, uint256, uint256, uint256) {\r\n        IBondData b = bondData(id);\r\n        require(b.issuer() != who, \"can't self-liquidate\");\r\n\r\n        //当前已经处于清算中状态\r\n        if (b.liquidating()) {\r\n            bool depositMultipleUnsafe = coreUtils.isDepositMultipleUnsafe(id);\r\n            require(depositMultipleUnsafe, \"in depositMultiple safe state\");\r\n        } else {\r\n            require(coreUtils.isUnsafe(id), \"in safe state\");\r\n\r\n            //设置为清算中状态\r\n            b.setLiquidating(true);\r\n        }\r\n\r\n        uint256 balance = IERC20(b.crowdToken()).balanceOf(who);\r\n        uint256 y = coreUtils.Y(id);\r\n        uint256 x = coreUtils.X(id);\r\n\r\n        require(balance >= y1 && y1 <= y, \"insufficient y1 or balance\");\r\n\r\n        if (y1 == b.liability() || abs(y1, b.liability()) <= uint256(1) \r\n        || x1 == b.getBorrowAmountGive() \r\n        || abs(x1, b.getBorrowAmountGive()) <= coreUtils.precision(id)) {\r\n            b.setBondParam(\"bondStage\", uint(BondStage.DebtClosed));\r\n            b.setLiquidating(false);\r\n        }\r\n\r\n        if (y1 == b.liability() || abs(y1, b.liability()) <= uint256(1)) {\r\n            if (!(x1 == b.getBorrowAmountGive() || abs(x1, b.getBorrowAmountGive()) <= coreUtils.precision(id))) {\r\n                b.setBondParam(\"issuerStage\", uint(IssuerStage.UnWithdrawPawn));\r\n            }\r\n        }\r\n\r\n        //对债务误差为1的处理\r\n        if (abs(y1, b.liability()) <= uint256(1)) {\r\n            b.setBondParam(\"liability\", 0);\r\n        } else {\r\n            b.setBondParam(\"liability\", b.liability().sub(y1));\r\n        }\r\n\r\n        if (abs(x1, b.getBorrowAmountGive()) <= coreUtils.precision(id)) {\r\n            b.setBondParam(\"borrowAmountGive\", 0);\r\n        } else {\r\n            b.setBondParam(\"borrowAmountGive\", b.getBorrowAmountGive().sub(x1));\r\n        }\r\n\r\n\r\n        if (!coreUtils.isDepositMultipleUnsafe(id)) {\r\n            b.setLiquidating(false);\r\n        }\r\n\r\n        if (coreUtils.isDebtOpen(id)) {\r\n            b.setBondParam(\"sysProfit\", b.sysProfit().add(b.fee()));\r\n            b.setBondParam(\"fee\", 0);\r\n        }\r\n\r\n        return (y1, x1, y, x);\r\n    }\r\n\r\n    //分批清算债券接口\r\n    //id: 债券发行id，同上\r\n    function liquidateCb(address who, uint256 id, uint256 y1)\r\n        external\r\n        auth\r\n        returns (uint256, uint256, uint256, uint256)\r\n    {\r\n        (uint y, uint x) = coreUtils.getLiquidateAmount(id, y1);\r\n\r\n        return liquidateInternal(who, id, y, x);\r\n    }\r\n\r\n    //取回系统盈利\r\n    function withdrawSysProfitCb(address who, uint256 id) external auth returns (uint256) {\r\n        IBondData b = bondData(id);\r\n        uint256 _sysProfit = b.sysProfit();\r\n        require(_sysProfit > 0, \"no withdrawable sysProfit\");\r\n        b.setBondParam(\"sysProfit\", 0);\r\n        return _sysProfit;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ACL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coreUtils\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nameGen\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bond\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"funcName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"MonitorEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bond\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"funcName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"MonitorEventCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"bondData\",\"outputs\":[{\"internalType\":\"contract IBondData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreUtils\",\"outputs\":[{\"internalType\":\"contract ICoreUtils\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"d\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initialDepositCb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"interestBearingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"investCb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"}],\"name\":\"liquidateCb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameGen\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"overdueCb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"repayCb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ACL\",\"type\":\"address\"}],\"name\":\"setACL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"k\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"}],\"name\":\"setCoreParamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"txOutCrowdCb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawPawnCb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawPrincipalAndInterestCb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawPrincipalCb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawSysProfitCb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Core","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000063ad95a0fdc69269960a257c7e9bfa3629ac4dd000000000000000000000000fcef47934bec27b78f8c061d9a78cdaf0b19600100000000000000000000000076f4a2add5c81a739727a2bcaa1343f046d44d310000000000000000000000003e45d6bef4243ff1e4ccc4505f69893e61c095c900000000000000000000000053345f3b9fcb873783ffa5c8f043233afd4991a60000000000000000000000001721460a888e7a6698909e61bd65f07865064f01","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8c279c303712f78dc0ce70dc774bf6fb0fb4ac7b81dbee523d15e0b6595dae60"}]}