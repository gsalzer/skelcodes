{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2Router2 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function removeLiquidityWithPermit(\r\n      address tokenA,\r\n      address tokenB,\r\n      uint256 liquidity,\r\n      uint256 amountAMin,\r\n      uint256 amountBMin,\r\n      address to,\r\n      uint256 deadline,\r\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\n// Migrate from pair to pair\r\n// Due to stack limit had to drop parameters to, deadline and approveMax\r\n// Assumes approveMax for permit, no deadline support, sends SLP tokens to msg.sender\r\ncontract SushiRoll {\r\n    function roll(\r\n        address fromRouter,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        uint8 v, bytes32 r, bytes32 s\r\n    ) public {\r\n        // Unpool to this contract\r\n        (uint256 amountA, uint256 amountB) = IUniswapV2Router2(fromRouter).removeLiquidityWithPermit(\r\n            tokenA, tokenB,\r\n            liquidity,\r\n            amountAMin, amountBMin,\r\n            address(this),\r\n            now + 1,\r\n            true,\r\n            v, r, s);\r\n\r\n        // Approve max is ok because it's only to this contract and this contract has no other functionality\r\n        // Also some ERC20 tokens will fail when approving a set amount twice, such as USDT. Must approve 0 first. This circumvests that issue.\r\n        IERC20(tokenA).approve(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F, uint256(-1));\r\n        IERC20(tokenB).approve(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F, uint256(-1));            \r\n        \r\n        // Pool into sushiswap\r\n        (uint256 pooledAmountA, uint256 pooledAmountB, ) = IUniswapV2Router2(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F).addLiquidity(\r\n            tokenA, tokenB,\r\n            amountA, amountB,\r\n            amountAMin, amountBMin,\r\n            address(msg.sender),\r\n            now + 1);\r\n            \r\n        // Send remaining token balances to msg.sender\r\n        // No safeMath used because pooledAmount must be <= amount\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        (bool success, bytes memory data) = tokenA.call(abi.encodeWithSelector(0xa9059cbb, msg.sender, amountA - pooledAmountA));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SushiRoll: TokenA Transfer failed\");\r\n        \r\n        // solium-disable-next-line security/no-low-level-calls\r\n        (success, data) = tokenB.call(abi.encodeWithSelector(0xa9059cbb, msg.sender, amountB - pooledAmountB));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SushiRoll: TokenB Transfer failed\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"roll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SushiRoll","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}