{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n}\r\n\r\n\r\ninterface IYFKA {\r\n    function mint(address to, uint256 amount) external;\r\n    function transferOwnership(address newOwner) external;\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n}\r\n\r\ninterface IYFKAController {\r\n    function getEmissionRate() external view returns (uint256);\r\n}\r\n\r\ncontract Stake is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    IERC20 public YFKA = IERC20(0x4086692D53262b2Be0b13909D804F0491FF6Ec3e);\r\n    IERC20 public POOL = IERC20(0x34d0448A79F853d6E1f7ac117368C87BB7bEeA6B); // UNISWAP LP\r\n    IYFKAController public CONTROLLER; // YFKA Controller\r\n    \r\n    mapping(address => uint256) lastWithdraw;\r\n    mapping(address => uint256) stakes;\r\n    mapping(address => uint256) emissions;\r\n    \r\n    uint256 public blocks_per_year = 2372500;\r\n    uint precision = 1000000;\r\n    \r\n    // constructor(address _pool, address _controller) public {\r\n    //     POOL = IERC20(_pool);\r\n    //     CONTROLLER = IYFKAController(_controller);\r\n    // }\r\n    \r\n    function setController(address _addr) public onlyOwner {\r\n        CONTROLLER = IYFKAController(_addr);\r\n    }\r\n    \r\n    function setPool(address _addr) public onlyOwner {\r\n        POOL = IERC20(_addr);\r\n    }\r\n    \r\n    function blockDelta() public view returns(uint256) {\r\n        if (lastWithdraw[msg.sender] == 0) {\r\n            return 0;\r\n        }\r\n        return block.number.sub(lastWithdraw[msg.sender]);\r\n    }\r\n    \r\n    function stake(uint256 amount) internal {\r\n        amount = amount.sub(10**3);\r\n\r\n        mint();\r\n        \r\n        POOL.transferFrom(msg.sender, address(this), amount);\r\n        stakes[msg.sender] = stakes[msg.sender].add(amount);\r\n    }\r\n    \r\n    function unstake(uint256 amount) internal {\r\n        amount = amount.sub(10**3);\r\n        \r\n        mint();\r\n        resetPersonalRate();\r\n\r\n        stakes[msg.sender] = stakes[msg.sender].sub(amount);\r\n\r\n        POOL.transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function redeem() public {\r\n        mint();\r\n        resetPersonalRate();\r\n    }\r\n    \r\n    function mint() internal {\r\n        // MINT IT\r\n        lastWithdraw[msg.sender] = block.number;\r\n    }\r\n    \r\n    function resetPersonalRate() internal {\r\n        emissions[msg.sender] = CONTROLLER.getEmissionRate();\r\n    }\r\n    \r\n    function totalYFKAStaked() public view returns(uint256) {\r\n        uint256 stakedLPTokens = POOL.balanceOf(address(this));\r\n        uint256 totalLPTokens = POOL.totalSupply();\r\n        \r\n        uint256 totalYFKAInLP = YFKA.balanceOf(address(POOL));\r\n    }\r\n    \r\n    function personalYFKAStaked() public view returns(uint256) {\r\n        uint percentOfLPStaked = stakes[msg.sender].mul(precision).div(POOL.totalSupply());\r\n        uint256 _yfkaStake = YFKA.balanceOf(address(POOL)).mul(percentOfLPStaked).div(precision);\r\n\r\n        return _yfkaStake;\r\n    }\r\n    \r\n    function currentReward() public view returns(uint256) {\r\n        return personalYFKAStaked().mul(emissions[msg.sender]).mul(blockDelta()).div(blocks_per_year);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLER\",\"outputs\":[{\"internalType\":\"contract IYFKAController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YFKA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocks_per_year\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalYFKAStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalYFKAStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Stake","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://45153f43877da216204cd11f694aa51ac7b2a543bb88f0d30dc6f11d35d41a34"}]}