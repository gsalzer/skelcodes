{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\r\n    external returns (bytes4);\r\n}\r\n\r\n// File: contracts/ERC721Holder.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\ncontract ERC721Holder is IERC721Receiver {\r\n\r\n    // Equal to: bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")).\r\n    bytes4 internal constant NEW_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Equal to: bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"));\r\n    bytes4 internal constant OLD_ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n    /**\r\n     * @dev implements old onERC721Received interface\r\n     */\r\n    function onERC721Received(address, uint256, bytes memory) public pure returns (bytes4) {\r\n        return OLD_ERC721_RECEIVED;\r\n    }\r\n\r\n    /**\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     *  after a {IERC721-safeTransferFrom}.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    )\r\n        public virtual override returns (bytes4)\r\n    {\r\n        return NEW_ERC721_RECEIVED;\r\n    }\r\n}\r\n\r\n// File: contracts/ConverterManager.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\ncontract ConverterManager is Ownable {\r\n\r\n    event SetConverter(address indexed converter);\r\n\r\n    // configured fee converter\r\n    address public converterAddress;\r\n\r\n    /**\r\n     * @param _converter address of collected fees burner implementation\r\n     */\r\n    function setConverter(address _converter) public virtual onlyOwner {\r\n        converterAddress = _converter;\r\n        emit SetConverter(_converter);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/ITransferableRegistry.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\ninterface ITransferableRegistry is IERC721 {\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n}\r\n\r\n// File: contracts/dex/IConverter.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\ninterface IConverter {\r\n    function getTrader() external view returns (address);\r\n    function calcNeededTokensForEther(IERC20 _dstToken, uint256 _etherAmount) external view returns (uint256);\r\n    function swapEtherToToken(IERC20 _dstToken) external payable returns (uint256);\r\n    function swapTokenToEther(IERC20 _srcToken, uint256 _srcAmount, uint256 _maxDstAmount)\r\n        external returns (uint256 dstAmount, uint256 srcRemainder);\r\n}\r\n\r\n// File: contracts/BuyAdapter.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BuyAdapter is\r\n    Ownable,\r\n    ReentrancyGuard,\r\n    ERC721Holder,\r\n    ConverterManager\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event ExecutedOrder(\r\n        address indexed registry,\r\n        uint256 indexed tokenId,\r\n        address indexed marketplace,\r\n        uint256 orderValue,\r\n        uint256 orderFees\r\n    );\r\n\r\n    event ExecutedOrder(\r\n        address indexed marketplace,\r\n        uint256 orderValue,\r\n        uint256 orderFees,\r\n        bytes marketplaceData\r\n    );\r\n\r\n    event MarketplaceAllowance(address indexed marketplace, bool value);\r\n    event FeesCollectorChange(address indexed collector);\r\n    event AdapterFeeChange(uint256 previousFee, uint256 newFee);\r\n\r\n    // Allowed tranfer type enum\r\n    enum TransferType { safeTransferFrom, transferFrom, transfer }\r\n\r\n    // Order execution fee in a 0 - 1000000 basis\r\n    uint256 public adapterTransactionFee;\r\n\r\n    // Max allowed fee for the adapter\r\n    uint256 public constant ADAPTER_FEE_MAX = 150000; // 15%\r\n    uint256 public constant ADAPTER_FEE_PRECISION = 1000000;\r\n\r\n    // MarketFeesCollector address\r\n    address payable public adapterFeesCollector;\r\n\r\n    /**\r\n     * @dev constructor\r\n     * @param _converter address for the IConverter\r\n     * @param _collector address for the Fee Collector contract\r\n     * @param _adapderFee initial adapter fee\r\n     */\r\n    constructor(\r\n        address _converter,\r\n        address payable _collector,\r\n        uint256 _adapderFee\r\n    )\r\n        Ownable() public\r\n    {\r\n        setConverter(_converter);\r\n        setFeesCollector(_collector);\r\n\r\n        setAdapterFee(_adapderFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets fees collector for the adapter\r\n     * @param _collector Address for the fees collector\r\n     */\r\n    function setFeesCollector(address payable _collector) public onlyOwner {\r\n        adapterFeesCollector = _collector;\r\n        emit FeesCollectorChange(_collector);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the adapter fees taken from every relayed order\r\n     * @param _transactionFee in a 0 - ADAPTER_FEE_MAX basis\r\n     */\r\n    function setAdapterFee(uint256 _transactionFee) public onlyOwner {\r\n        require(\r\n            ADAPTER_FEE_MAX >= _transactionFee,\r\n            \"BuyAdapter: Invalid transaction fee\"\r\n        );\r\n        emit AdapterFeeChange(adapterTransactionFee, _transactionFee);\r\n        adapterTransactionFee = _transactionFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Relays buy marketplace order. Uses the IConverter to\r\n     *  swap erc20 tokens to ethers and call _buy() with the exact ether amount\r\n     * @param _registry NFT registry address\r\n     * @param _tokenId listed asset Id.\r\n     * @param _marketplace marketplace listing the asset.\r\n     * @param _encodedCallData forwarded to _marketplace.\r\n     * @param _orderAmount (excluding fees) in ethers for the markeplace order\r\n     * @param _paymentToken ERC20 address of the token used to pay\r\n     * @param _maxPaymentTokenAmount max ERC20 token to use. Prevent high splippage.\r\n     * @param _transferType choice for calling the ERC721 registry\r\n     * @param _beneficiary where to send the ERC721 token\r\n     */\r\n    function buy(\r\n        ITransferableRegistry _registry,\r\n        uint256 _tokenId,\r\n        address _marketplace,\r\n        bytes memory _encodedCallData,\r\n        uint256 _orderAmount,\r\n        IERC20 _paymentToken,\r\n        uint256 _maxPaymentTokenAmount,\r\n        TransferType _transferType,\r\n        address _beneficiary\r\n    )\r\n        public nonReentrant\r\n    {\r\n        IConverter converter = IConverter(converterAddress);\r\n\r\n        // Calc total needed for this order + adapter fees\r\n        uint256 orderFees = _calcOrderFees(_orderAmount);\r\n        uint256 totalOrderAmount = _orderAmount.add(orderFees);\r\n\r\n        // Get amount of srcTokens needed for the exchange\r\n        uint256 paymentTokenAmount = converter.calcNeededTokensForEther(\r\n            _paymentToken,\r\n            totalOrderAmount\r\n        );\r\n\r\n        require(\r\n            paymentTokenAmount > 0,\r\n            \"BuyAdapter: paymentTokenAmount invalid\"\r\n        );\r\n\r\n        require(\r\n            paymentTokenAmount <= _maxPaymentTokenAmount,\r\n            \"BuyAdapter: paymentTokenAmount > _maxPaymentTokenAmount\"\r\n        );\r\n\r\n        // Get Tokens from sender\r\n        _paymentToken.safeTransferFrom(\r\n            msg.sender, address(this), paymentTokenAmount\r\n        );\r\n\r\n        // allow converter for this paymentTokenAmount transfer\r\n        _paymentToken.safeApprove(converterAddress, paymentTokenAmount);\r\n\r\n        // Get ethers from converter\r\n        (uint256 convertedEth, uint256 remainderTokenAmount) = converter.swapTokenToEther(\r\n            _paymentToken,\r\n            paymentTokenAmount,\r\n            totalOrderAmount\r\n        );\r\n\r\n        require(\r\n            convertedEth == totalOrderAmount,\r\n            \"BuyAdapter: invalid ether amount after conversion\"\r\n        );\r\n\r\n        if (remainderTokenAmount > 0) {\r\n            _paymentToken.safeTransfer(msg.sender, remainderTokenAmount);\r\n        }\r\n\r\n        _buy(\r\n            _registry,\r\n            _tokenId,\r\n            _marketplace,\r\n            _encodedCallData,\r\n            _orderAmount,\r\n            orderFees,\r\n            _transferType,\r\n            _beneficiary\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Relays buy marketplace order taking the configured fees\r\n     *  from message value.\r\n     * @param _registry NFT registry address\r\n     * @param _tokenId listed asset Id.\r\n     * @param _marketplace marketplace listing the asset.\r\n     * @param _encodedCallData forwarded to the _marketplace.\r\n     * @param _orderAmount (excluding fees) in ethers for the markeplace order\r\n     * @param _transferType choice for calling the ERC721 registry\r\n     * @param _beneficiary where to send the ERC721 token\r\n     */\r\n    function buy(\r\n        ITransferableRegistry _registry,\r\n        uint256 _tokenId,\r\n        address _marketplace,\r\n        bytes memory _encodedCallData,\r\n        uint256 _orderAmount,\r\n        TransferType _transferType,\r\n        address _beneficiary\r\n    )\r\n        public payable nonReentrant\r\n    {\r\n        // Calc total needed for this order + adapter fees\r\n        uint256 orderFees = _calcOrderFees(_orderAmount);\r\n        uint256 totalOrderAmount = _orderAmount.add(orderFees);\r\n\r\n        // Check the order + fees\r\n        require(\r\n            msg.value == totalOrderAmount,\r\n            \"BuyAdapter: invalid msg.value != (order + fees)\"\r\n        );\r\n\r\n        _buy(\r\n            _registry,\r\n            _tokenId,\r\n            _marketplace,\r\n            _encodedCallData,\r\n            _orderAmount,\r\n            orderFees,\r\n            _transferType,\r\n            _beneficiary\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Relays buy marketplace order taking the configured fees\r\n     *  from message value.\r\n     *  Notice that this method won't check what was bought. The calldata must have\r\n     *  the desire beneficiry.\r\n     * @param _marketplace marketplace listing the asset.\r\n     * @param _encodedCallData forwarded to the _marketplace.\r\n     * @param _orderAmount (excluding fees) in ethers for the markeplace order\r\n     */\r\n    function buy(\r\n        address _marketplace,\r\n        bytes memory _encodedCallData,\r\n        uint256 _orderAmount\r\n    )\r\n        public payable nonReentrant\r\n    {\r\n        // Calc total needed for this order + adapter fees\r\n        uint256 orderFees = _calcOrderFees(_orderAmount);\r\n        uint256 totalOrderAmount = _orderAmount.add(orderFees);\r\n\r\n        // Check the order + fees\r\n        require(\r\n            msg.value == totalOrderAmount,\r\n            \"BuyAdapter: invalid msg.value != (order + fees)\"\r\n        );\r\n\r\n        _buy(\r\n            _marketplace,\r\n            _encodedCallData,\r\n            _orderAmount,\r\n            orderFees\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Relays buy marketplace order. Uses the IConverter to\r\n     *  swap erc20 tokens to ethers and call _buy() with the exact ether amount.\r\n     *  Notice that this method won't check what was bought. The calldata must have\r\n     *  the desire beneficiry.\r\n     * @param _marketplace marketplace listing the asset.\r\n     * @param _encodedCallData forwarded to _marketplace.\r\n     * @param _orderAmount (excluding fees) in ethers for the markeplace order\r\n     * @param _paymentToken ERC20 address of the token used to pay\r\n     * @param _maxPaymentTokenAmount max ERC20 token to use. Prevent high splippage.\r\n     */\r\n    function buy(\r\n        address _marketplace,\r\n        bytes memory _encodedCallData,\r\n        uint256 _orderAmount,\r\n        IERC20 _paymentToken,\r\n        uint256 _maxPaymentTokenAmount\r\n    )\r\n        public nonReentrant\r\n    {\r\n        IConverter converter = IConverter(converterAddress);\r\n\r\n        // Calc total needed for this order + adapter fees\r\n        uint256 orderFees = _calcOrderFees(_orderAmount);\r\n        uint256 totalOrderAmount = _orderAmount.add(orderFees);\r\n\r\n        // Get amount of srcTokens needed for the exchange\r\n        uint256 paymentTokenAmount = converter.calcNeededTokensForEther(\r\n            _paymentToken,\r\n            totalOrderAmount\r\n        );\r\n\r\n        require(\r\n            paymentTokenAmount > 0,\r\n            \"BuyAdapter: paymentTokenAmount invalid\"\r\n        );\r\n\r\n        require(\r\n            paymentTokenAmount <= _maxPaymentTokenAmount,\r\n            \"BuyAdapter: paymentTokenAmount > _maxPaymentTokenAmount\"\r\n        );\r\n\r\n        // Get Tokens from sender\r\n        _paymentToken.safeTransferFrom(\r\n            msg.sender, address(this), paymentTokenAmount\r\n        );\r\n\r\n        // allow converter for this paymentTokenAmount transfer\r\n        _paymentToken.safeApprove(converterAddress, paymentTokenAmount);\r\n\r\n        // Get ethers from converter\r\n        (uint256 convertedEth, uint256 remainderTokenAmount) = converter.swapTokenToEther(\r\n            _paymentToken,\r\n            paymentTokenAmount,\r\n            totalOrderAmount\r\n        );\r\n\r\n        require(\r\n            convertedEth == totalOrderAmount,\r\n            \"BuyAdapter: invalid ether amount after conversion\"\r\n        );\r\n\r\n        if (remainderTokenAmount > 0) {\r\n            _paymentToken.safeTransfer(msg.sender, remainderTokenAmount);\r\n        }\r\n\r\n        _buy(\r\n            _marketplace,\r\n            _encodedCallData,\r\n            _orderAmount,\r\n            orderFees\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal call relays the order to a _marketplace.\r\n     * @param _registry NFT registry address\r\n     * @param _tokenId listed asset Id.\r\n     * @param _marketplace marketplace listing the asset.\r\n     * @param _encodedCallData forwarded to _marketplace.\r\n     * @param _orderAmount (excluding fees) in ethers for the markeplace order\r\n     * @param _feesAmount in ethers for the order\r\n     * @param _transferType choice for calling the ERC721 registry\r\n     * @param _beneficiary where to send the ERC721 token\r\n     */\r\n    function _buy(\r\n        ITransferableRegistry _registry,\r\n        uint256 _tokenId,\r\n        address _marketplace,\r\n        bytes memory _encodedCallData,\r\n        uint256 _orderAmount,\r\n        uint256 _feesAmount,\r\n        TransferType _transferType,\r\n        address _beneficiary\r\n    )\r\n        private\r\n    {\r\n        require(_orderAmount > 0, \"BuyAdapter: invalid order value\");\r\n        require(adapterFeesCollector != address(0), \"BuyAdapter: fees Collector must be set\");\r\n\r\n        // Save contract balance before call to marketplace\r\n        uint256 preCallBalance = address(this).balance;\r\n\r\n        // execute buy order in destination marketplace\r\n        (bool success, ) = _marketplace.call{ value: _orderAmount }(\r\n            _encodedCallData\r\n        );\r\n\r\n        require(\r\n            success,\r\n            \"BuyAdapter: marketplace failed to execute buy order\"\r\n        );\r\n\r\n        require(\r\n            address(this).balance == preCallBalance.sub(_orderAmount),\r\n            \"BuyAdapter: postcall balance mismatch\"\r\n        );\r\n\r\n        require(\r\n            _registry.ownerOf(_tokenId) == address(this),\r\n            \"BuyAdapter: tokenId not transfered\"\r\n        );\r\n\r\n        // Send balance to Collector. Reverts on failure\r\n        require(\r\n            adapterFeesCollector.send(address(this).balance),\r\n            \"BuyAdapter: error sending fees to collector\"\r\n        );\r\n\r\n        // Transfer tokenId to caller\r\n        _transferItem(\r\n            _registry,\r\n            _tokenId,\r\n            _transferType,\r\n            _beneficiary\r\n        );\r\n\r\n        // Log succesful executed order\r\n        emit ExecutedOrder(\r\n            address(_registry),\r\n            _tokenId,\r\n            _marketplace,\r\n            _orderAmount,\r\n            _feesAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal call relays the order to a _marketplace.\r\n     *  Notice that this method won't check what was bought. The calldata must have\r\n     *  the desire beneficiry.\r\n     * @param _marketplace marketplace listing the asset.\r\n     * @param _encodedCallData forwarded to _marketplace.\r\n     * @param _orderAmount (excluding fees) in ethers for the markeplace order\r\n     * @param _feesAmount in ethers for the order\r\n     */\r\n    function _buy(\r\n        address _marketplace,\r\n        bytes memory _encodedCallData,\r\n        uint256 _orderAmount,\r\n        uint256 _feesAmount\r\n    )\r\n        private\r\n    {\r\n        require(_orderAmount > 0, \"BuyAdapter: invalid order value\");\r\n        require(adapterFeesCollector != address(0), \"BuyAdapter: fees Collector must be set\");\r\n\r\n        // Save contract balance before call to marketplace\r\n        uint256 preCallBalance = address(this).balance;\r\n\r\n        // execute buy order in destination marketplace\r\n        (bool success, ) = _marketplace.call{ value: _orderAmount }(\r\n            _encodedCallData\r\n        );\r\n\r\n        require(\r\n            success,\r\n            \"BuyAdapter: marketplace failed to execute buy order\"\r\n        );\r\n\r\n        require(\r\n            address(this).balance == preCallBalance.sub(_orderAmount),\r\n            \"BuyAdapter: postcall balance mismatch\"\r\n        );\r\n\r\n        // Send balance to Collector. Reverts on failure\r\n        require(\r\n            adapterFeesCollector.send(address(this).balance),\r\n            \"BuyAdapter: error sending fees to collector\"\r\n        );\r\n\r\n        // Log succesful executed order\r\n        emit ExecutedOrder(\r\n            _marketplace,\r\n            _orderAmount,\r\n            _feesAmount,\r\n            _encodedCallData\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the NFT to the final owner\r\n     * @param _registry NFT registry address\r\n     * @param _tokenId listed token Id.\r\n     * @param _transferType choice for calling the ERC721 registry\r\n     * @param _beneficiary where to send the ERC721 token\r\n     */\r\n    function _transferItem(\r\n        ITransferableRegistry _registry,\r\n        uint256 _tokenId,\r\n        TransferType _transferType,\r\n        address _beneficiary\r\n    )\r\n        private\r\n    {\r\n        require(_beneficiary != address(this), \"BuyAdapter: invalid beneficiary\");\r\n\r\n        if (_transferType == TransferType.safeTransferFrom) {\r\n            _registry.safeTransferFrom(address(this), _beneficiary, _tokenId);\r\n\r\n        } else if (_transferType == TransferType.transferFrom) {\r\n            _registry.transferFrom(\r\n                address(this),\r\n                _beneficiary,\r\n                _tokenId\r\n            );\r\n\r\n        } else if (_transferType == TransferType.transfer) {\r\n            _registry.transfer(\r\n                _beneficiary,\r\n                _tokenId\r\n            );\r\n\r\n        } else {\r\n            revert('BuyAdapter: Unsopported transferType');\r\n        }\r\n\r\n        require(\r\n            _registry.ownerOf(_tokenId) == _beneficiary,\r\n            \"BuyAdapter: error with asset transfer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param _orderAmount item value as in the NFT marketplace\r\n     * @return adapter fees from total order value\r\n     */\r\n    function _calcOrderFees(uint256 _orderAmount) private view returns (uint256) {\r\n        return _orderAmount\r\n            .mul(adapterTransactionFee)\r\n            .div(ADAPTER_FEE_PRECISION);\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender != tx.origin, \"BuyAdapter: sender invalid\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_adapderFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"AdapterFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderFees\",\"type\":\"uint256\"}],\"name\":\"ExecutedOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"marketplaceData\",\"type\":\"bytes\"}],\"name\":\"ExecutedOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"FeesCollectorChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"MarketplaceAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"}],\"name\":\"SetConverter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADAPTER_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADAPTER_FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adapterFeesCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adapterTransactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransferableRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_orderAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum BuyAdapter.TransferType\",\"name\":\"_transferType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransferableRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_orderAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPaymentTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum BuyAdapter.TransferType\",\"name\":\"_transferType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_orderAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPaymentTokenAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_orderAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionFee\",\"type\":\"uint256\"}],\"name\":\"setAdapterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setFeesCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BuyAdapter","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002859581da59bd4e16a866dd06b461b76d8e489a400000000000000000000000093a7c46443901c2ea2fc1263a4d076f470695d3a0000000000000000000000000000000000000000000000000000000000002710","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ef4c536021024d97109b527ce9eec19b40e488e9250cbcb4b962d337e5a5c38f"}]}