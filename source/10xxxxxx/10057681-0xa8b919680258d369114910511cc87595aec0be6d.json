{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-05-13\r\n*/\r\n/*\r\n * source        https://github.com/lukso-network/rICO-smart-contracts\r\n * @name       LUKSO Token\r\n * @author      Micky Socaci <micky@binarzone.com>, Fabian Vogelsteller <@frozeman>\r\n * @license     Apachae 2.0\r\n */\r\n\r\n/**\r\n * @dev Implementation of the `IERC777` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n *\r\n * Support for ERC20 is included in this contract, as specified by the EIP: both\r\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\r\n * Both `IERC777.Sent` and `IERC20.Transfer` events are emitted on token\r\n * movements.\r\n *\r\n * Additionally, the `granularity` value is hard-coded to `1`, meaning that there\r\n * are no special restrictions in the amount of tokens that created, moved, or\r\n * destroyed. This makes integration with ERC20 applications seamless.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IERC777 {\r\n    \r\n    function name() external view returns (string memory);\r\n\r\n    \r\n    function symbol() external view returns (string memory);\r\n\r\n    \r\n    function granularity() external view returns (uint256);\r\n\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    \r\n    function send(address recipient, uint256 amount, bytes calldata data) external;\r\n\r\n    \r\n    function burn(uint256 amount, bytes calldata data) external;\r\n\r\n    \r\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n\r\n    \r\n    function authorizeOperator(address operator) external;\r\n\r\n    \r\n    function revokeOperator(address operator) external;\r\n\r\n    \r\n    function defaultOperators() external view returns (address[] memory);\r\n\r\n    \r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    \r\n    function operatorBurn(\r\n        address account,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\ninterface IERC777Recipient {\r\n    \r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\ninterface IERC777Sender {\r\n    \r\n    function tokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        \r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    \r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n}\r\n\r\ninterface IERC1820Registry {\r\n    \r\n    function setManager(address account, address newManager) external;\r\n\r\n    \r\n    function getManager(address account) external view returns (address);\r\n\r\n    \r\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\r\n\r\n    \r\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\r\n\r\n    \r\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\r\n\r\n    \r\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\r\n\r\n    \r\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    \r\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\r\n\r\n    event ManagerChanged(address indexed account, address indexed newManager);\r\n}\r\n\r\ncontract ERC777 is IERC777, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    \r\n    \r\n\r\n    \r\n    bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\r\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\r\n\r\n    \r\n    bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\r\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\r\n\r\n    \r\n    address[] private _defaultOperatorsArray;\r\n\r\n    \r\n    mapping(address => bool) private _defaultOperators;\r\n\r\n    \r\n    mapping(address => mapping(address => bool)) private _operators;\r\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\r\n\r\n    \r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    \r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address[] memory defaultOperators\r\n    ) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        _defaultOperatorsArray = defaultOperators;\r\n        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\r\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\r\n        }\r\n\r\n        \r\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\r\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\r\n    }\r\n\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    \r\n    function granularity() public view returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    \r\n    function balanceOf(address tokenHolder) public view returns (uint256) {\r\n        return _balances[tokenHolder];\r\n    }\r\n\r\n    \r\n    function send(address recipient, uint256 amount, bytes calldata data) external {\r\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\r\n    }\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\r\n\r\n        address from = msg.sender;\r\n\r\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\r\n\r\n        _move(from, from, recipient, amount, \"\", \"\");\r\n\r\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function burn(uint256 amount, bytes calldata data) external {\r\n        _burn(msg.sender, msg.sender, amount, data, \"\");\r\n    }\r\n\r\n    \r\n    function isOperatorFor(\r\n        address operator,\r\n        address tokenHolder\r\n    ) public view returns (bool) {\r\n        return operator == tokenHolder ||\r\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\r\n            _operators[tokenHolder][operator];\r\n    }\r\n\r\n    \r\n    function authorizeOperator(address operator) external {\r\n        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\r\n\r\n        if (_defaultOperators[operator]) {\r\n            delete _revokedDefaultOperators[msg.sender][operator];\r\n        } else {\r\n            _operators[msg.sender][operator] = true;\r\n        }\r\n\r\n        emit AuthorizedOperator(operator, msg.sender);\r\n    }\r\n\r\n    \r\n    function revokeOperator(address operator) external {\r\n        require(operator != msg.sender, \"ERC777: revoking self as operator\");\r\n\r\n        if (_defaultOperators[operator]) {\r\n            _revokedDefaultOperators[msg.sender][operator] = true;\r\n        } else {\r\n            delete _operators[msg.sender][operator];\r\n        }\r\n\r\n        emit RevokedOperator(operator, msg.sender);\r\n    }\r\n\r\n    \r\n    function defaultOperators() public view returns (address[] memory) {\r\n        return _defaultOperatorsArray;\r\n    }\r\n\r\n    \r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    )\r\n    external\r\n    {\r\n        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\r\n        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\r\n    }\r\n\r\n    \r\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {\r\n        require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\r\n        _burn(msg.sender, account, amount, data, operatorData);\r\n    }\r\n\r\n    \r\n    function allowance(address holder, address spender) public view returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    \r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        address holder = msg.sender;\r\n        _approve(holder, spender, value);\r\n        return true;\r\n    }\r\n\r\n   \r\n    function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\r\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\r\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\r\n\r\n        address spender = msg.sender;\r\n\r\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\r\n\r\n        _move(spender, holder, recipient, amount, \"\", \"\");\r\n        _approve(holder, spender, _allowances[holder][spender].sub(amount));\r\n\r\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function _mint(\r\n        address operator,\r\n        address account,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n    internal\r\n    {\r\n        require(account != address(0), \"ERC777: mint to the zero address\");\r\n\r\n        \r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n\r\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\r\n\r\n        emit Minted(operator, account, amount, userData, operatorData);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    \r\n    function _send(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    )\r\n        private\r\n    {\r\n        require(from != address(0), \"ERC777: send from the zero address\");\r\n        require(to != address(0), \"ERC777: send to the zero address\");\r\n\r\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\r\n\r\n        _move(operator, from, to, amount, userData, operatorData);\r\n\r\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\r\n    }\r\n\r\n    \r\n    function _burn(\r\n        address operator,\r\n        address from,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        bytes memory operatorData\r\n    )\r\n        internal\r\n    {\r\n        require(from != address(0), \"ERC777: burn from the zero address\");\r\n\r\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\r\n\r\n        \r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[from] = _balances[from].sub(amount);\r\n\r\n        emit Burned(operator, from, amount, data, operatorData);\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    function _move(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n        internal\r\n    {\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Sent(operator, from, to, amount, userData, operatorData);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(address holder, address spender, uint256 value) private {\r\n        \r\n        \r\n        \r\n        require(spender != address(0), \"ERC777: approve to the zero address\");\r\n\r\n        _allowances[holder][spender] = value;\r\n        emit Approval(holder, spender, value);\r\n    }\r\n\r\n    \r\n    function _callTokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n        private\r\n    {\r\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\r\n        if (implementer != address(0)) {\r\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\r\n        }\r\n    }\r\n\r\n    \r\n    function _callTokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    )\r\n        private\r\n    {\r\n        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\r\n        if (implementer != address(0)) {\r\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\r\n        } else if (requireReceptionAck) {\r\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface ReversibleICO {\r\n    function getParticipantReservedTokens(address) external view returns (uint256);\r\n}\r\n\r\ncontract ReversibleICOToken is ERC777 {\r\n\r\n    ReversibleICO public rICO;\r\n\r\n    bool public frozen; \r\n    bool public initialized; \r\n    \r\n    \r\n    address public deployingAddress;\r\n    address public tokenGenesisAddress; \r\n    address public migrationAddress; \r\n    address public freezerAddress; \r\n    address public rescuerAddress; \r\n\r\n    \r\n    event SetRICOaddress(address indexed rICOAddress);\r\n    event SetMigrationAddress(address indexed migrationAddress);\r\n    event Frozen(address indexed freezerAddress);\r\n    event Unfrozen(address indexed freezerAddress);\r\n    event RemovedFreezer(address indexed freezerAddress);\r\n    event ChangedRICO(address indexed rICOAddress, address indexed rescuerAddress);\r\n\r\n\r\n    \r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address[] memory _defaultOperators\r\n    )\r\n    ERC777(name, symbol, _defaultOperators)\r\n    public\r\n    {\r\n        deployingAddress = msg.sender;\r\n    }\r\n\r\n    \r\n    function init(\r\n        address _ricoAddress,\r\n        address _freezerAddress,\r\n        address _rescuerAddress,\r\n        address _tokenGenesisAddress,\r\n        uint256 _initialSupply\r\n    )\r\n    public\r\n    isNotInitialized\r\n    onlyDeployingAddress\r\n    {\r\n        require(_freezerAddress != address(0), \"_freezerAddress cannot be 0x\");\r\n        require(_rescuerAddress != address(0), \"_rescuerAddress cannot be 0x\");\r\n        require(_tokenGenesisAddress != address(0), \"_tokenGenesisAddress cannot be 0x\");\r\n\r\n        tokenGenesisAddress = _tokenGenesisAddress;\r\n        freezerAddress = _freezerAddress;\r\n        rescuerAddress = _rescuerAddress;\r\n\r\n        _mint(_tokenGenesisAddress, _tokenGenesisAddress, _initialSupply, \"\", \"\");\r\n\r\n        if(_ricoAddress != address(0)) {\r\n            rICO = ReversibleICO(_ricoAddress);\r\n            emit SetRICOaddress(_ricoAddress);\r\n        }\r\n\r\n        initialized = true;\r\n    }\r\n\r\n    function setRICOaddress(address _ricoAddress)\r\n    public\r\n    onlyTokenGenesisAddress\r\n    {\r\n        require(address(rICO) == address(0), \"rICO address already set!\");\r\n        require(_ricoAddress != address(0), \"rICO address cannot be 0x.\");\r\n\r\n        rICO = ReversibleICO(_ricoAddress);\r\n        emit SetRICOaddress(_ricoAddress);\r\n    }\r\n\r\n    \r\n    function setMigrationAddress(address _migrationAddress)\r\n    public\r\n    onlyTokenGenesisAddress\r\n    {\r\n        migrationAddress = _migrationAddress;\r\n        emit SetMigrationAddress(migrationAddress);\r\n    }\r\n\r\n\r\n    \r\n    function removeFreezer()\r\n    public\r\n    onlyFreezerAddress\r\n    isNotFrozen\r\n    {\r\n        freezerAddress = address(0);\r\n        emit RemovedFreezer(freezerAddress);\r\n    }\r\n\r\n    function freeze() public onlyFreezerAddress {\r\n        frozen = true;\r\n        emit Frozen(freezerAddress);\r\n    }\r\n\r\n    function unfreeze() public onlyFreezerAddress {\r\n        frozen = false;\r\n        emit Unfrozen(freezerAddress);\r\n    }\r\n\r\n    \r\n    function changeRICO(address _newRicoAddress)\r\n    public\r\n    onlyRescuerAddress\r\n    isFrozen\r\n    {\r\n        rICO = ReversibleICO(_newRicoAddress);\r\n        emit ChangedRICO(_newRicoAddress, rescuerAddress);\r\n    }\r\n\r\n    \r\n    function getLockedBalance(address _owner) public view returns(uint256) {\r\n        \r\n        if(address(rICO) != address(0)) {\r\n            return rICO.getParticipantReservedTokens(_owner);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getUnlockedBalance(address _owner) public view returns(uint256) {\r\n        uint256 balance = balanceOf(_owner);\r\n\r\n        \r\n        if(address(rICO) != address(0)) {\r\n            uint256 locked = rICO.getParticipantReservedTokens(_owner);\r\n\r\n            if(balance > 0 && locked > 0) {\r\n                if(balance >= locked) {\r\n                    return balance.sub(locked);\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n\r\n    \r\n\r\n    \r\n    \r\n    function _move(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes memory _userData,\r\n        bytes memory _operatorData\r\n    )\r\n    internal\r\n    isNotFrozen\r\n    isInitialized\r\n    {\r\n\r\n        \r\n        if(\r\n            _to == address(rICO) ||\r\n            _to == migrationAddress\r\n        ) {\r\n            \r\n            require(_amount <= balanceOf(_from), \"Sending failed: Insufficient funds\");\r\n\r\n        } else {\r\n            \r\n            require(_amount <= getUnlockedBalance(_from), \"Sending failed: Insufficient funds\");\r\n        }\r\n\r\n        ERC777._move(_operator, _from, _to, _amount, _userData, _operatorData);\r\n    }\r\n\r\n    \r\n    function _burn(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _amount,\r\n        bytes memory _data,\r\n        bytes memory _operatorData\r\n    )\r\n    internal\r\n    isNotFrozen\r\n    isInitialized\r\n    {\r\n        require(_amount <= getUnlockedBalance(_from), \"Burning failed: Insufficient funds\");\r\n        ERC777._burn(_operator, _from, _amount, _data, _operatorData);\r\n    }\r\n\r\n\r\n    \r\n    \r\n    modifier onlyDeployingAddress() {\r\n        require(msg.sender == deployingAddress, \"Only the deployer can call this method.\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier onlyTokenGenesisAddress() {\r\n        require(msg.sender == tokenGenesisAddress, \"Only the tokenGenesisAddress can call this method.\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier onlyFreezerAddress() {\r\n        require(msg.sender == freezerAddress, \"Only the freezer address can call this method.\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier onlyRescuerAddress() {\r\n        require(msg.sender == rescuerAddress, \"Only the rescuer address can call this method.\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier isInitialized() {\r\n        require(initialized == true, \"Contract must be initialized.\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier isNotInitialized() {\r\n        require(initialized == false, \"Contract is already initialized.\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier isFrozen() {\r\n        require(frozen == true, \"Token contract not frozen.\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier isNotFrozen() {\r\n        require(frozen == false, \"Token contract is frozen!\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_defaultOperators\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rICOAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rescuerAddress\",\"type\":\"address\"}],\"name\":\"ChangedRICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"freezerAddress\",\"type\":\"address\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"freezerAddress\",\"type\":\"address\"}],\"name\":\"RemovedFreezer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"migrationAddress\",\"type\":\"address\"}],\"name\":\"SetMigrationAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rICOAddress\",\"type\":\"address\"}],\"name\":\"SetRICOaddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"freezerAddress\",\"type\":\"address\"}],\"name\":\"Unfrozen\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRicoAddress\",\"type\":\"address\"}],\"name\":\"changeRICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUnlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ricoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_freezerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rescuerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenGenesisAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rICO\",\"outputs\":[{\"internalType\":\"contract ReversibleICO\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rescuerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrationAddress\",\"type\":\"address\"}],\"name\":\"setMigrationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ricoAddress\",\"type\":\"address\"}],\"name\":\"setRICOaddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenGenesisAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ReversibleICOToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000b4c554b534f20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c595865000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"petersburg","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d264781ae6c4a6e9d25258d9eb091fd7aa7204acae70391159fef6ba59e816f7"}]}