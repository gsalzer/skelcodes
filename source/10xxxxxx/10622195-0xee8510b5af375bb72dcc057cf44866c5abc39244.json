{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\ninterface Deployer {\r\n    function execute(uint salt) external payable returns (address);\r\n}\r\n\r\ncontract Team3DPresale {\r\n\r\n    // Token data\r\n    mapping (address => uint256) public balances;\r\n    string public constant name  = \"Team3DPresale\";\r\n    string public constant symbol = \"T3DPre\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Presale data\r\n    uint public totalTokensSold;\r\n    uint public totalEthSpent;\r\n    address[] public keys;\r\n    mapping (address => bool) helper;\r\n    mapping (address => bool) public userExists;\r\n    mapping (address => uint) public teamFund;\r\n    mapping (address => bool) public whiteListed;\r\n    mapping (address => uint) public ethSpent;\r\n    uint public constant maxAmount = 5 ether;\r\n    uint public constant maxTotalAmount = 400 ether;\r\n    uint public constant tokensPerEth = 43750; // 17.5m tokens/400 eth; 43750 tokens/1 eth; 0.000022857 eth/1 token\r\n    uint public constant totalSaleSupply = 17500000 * (10 ** 18); // 17.5m = 35% of total supply.\r\n    uint public constant totalTeamSupply = 15000000 * (10 ** 18); // 15m = 30% for team/marketing/project\r\n    uint public initialTokens = totalSaleSupply + totalTeamSupply; // 65% distributed initially, remaining 35% added to liq later\r\n    bool public whitelistOnly = true;\r\n\r\n    address payable owner;\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner || helper[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        balances[owner] = totalTeamSupply;\r\n        emit Transfer(address(0), owner, totalTeamSupply);\r\n    }\r\n\r\n\r\n    function () external payable {\r\n        purchase();\r\n    }\r\n\r\n\r\n    function purchase() public payable {\r\n        require(msg.value <= maxAmount);\r\n        require(ethSpent[msg.sender] + msg.value <= maxAmount);\r\n        require(totalEthSpent <= maxTotalAmount);\r\n        require(!whitelistOnly || whiteListed[msg.sender], \"Not a whitelisted address\");\r\n\r\n        uint _tokenAmount = msg.value * tokensPerEth;\r\n\r\n        // Global data\r\n        totalEthSpent += msg.value;\r\n        totalTokensSold += _tokenAmount;\r\n\r\n        // User data\r\n        ethSpent[msg.sender] += msg.value;\r\n        balances[msg.sender] += _tokenAmount;\r\n\r\n        if (!userExists[msg.sender]) {\r\n            userExists[msg.sender] = true;\r\n            keys.push(msg.sender);\r\n        }\r\n\r\n        emit Transfer(address(0), msg.sender, _tokenAmount);\r\n    }\r\n\r\n\r\n    function addToWhitelist(address _addr) public onlyOwner {\r\n        whiteListed[_addr] = true;\r\n    }\r\n\r\n\r\n    function bulkAddToWhitelist(address[] calldata _addrs) external onlyOwner {\r\n        for (uint i=0; i < _addrs.length; i++) {\r\n            addToWhitelist(_addrs[i]);\r\n        }\r\n    }\r\n\r\n\r\n    function assignTeamTokens(address _addr, uint _amount) external onlyOwner {\r\n        require(balanceOf(owner) - _amount >= 0, \"Underflow\");\r\n        \r\n        balances[owner] -= _amount;\r\n        balances[_addr] += _amount;\r\n        teamFund[_addr] += _amount;\r\n\r\n        if (!userExists[_addr]) {\r\n            userExists[_addr] = true;\r\n            keys.push(_addr);\r\n        }\r\n\r\n        emit Transfer(address(owner), _addr, _amount);\r\n    }\r\n\r\n\r\n    function removeTeamTokens(address _addr, uint _amount) external onlyOwner {\r\n        require(_amount <= teamFund[_addr]);\r\n\r\n        balances[owner] += _amount;\r\n        balances[_addr] -= _amount;\r\n        teamFund[_addr] -= _amount;\r\n\r\n        emit Transfer(_addr, address(owner), _amount);\r\n    }\r\n\r\n\r\n    function deployMainToken(address _deployerAddr, uint _salt) external onlyOwner {\r\n        \r\n        // Collect dust if exact amount is not reached\r\n        if (getRemainingTokens() > 0) { clearRemainingTokens(); }\r\n        \r\n        // In case someone tries to send eth with selfdestruct \r\n        if (address(this).balance > maxTotalAmount) {\r\n            uint _amount = address(this).balance - maxTotalAmount;\r\n            owner.transfer(_amount);\r\n        }\r\n\r\n        // Deploy liquidity and lock tokens\r\n        Deployer(_deployerAddr).execute.value(address(this).balance)(_salt);\r\n    }\r\n\r\n\r\n    function toggleWhitelist() external onlyOwner {\r\n        whitelistOnly = !whitelistOnly;\r\n    }\r\n\r\n\r\n    function refund(address payable _addr) public onlyOwner {\r\n        require(balances[_addr] - teamFund[_addr] > 0, \"User has no purchased balance\");\r\n\r\n        uint _userBal = balances[_addr] - teamFund[_addr]; // Only refund purchased tokens\r\n        uint _ethRefund = _userBal / tokensPerEth;\r\n\r\n        // Global data\r\n        totalEthSpent -= _ethRefund;\r\n        totalTokensSold -= _userBal;\r\n\r\n        // User data\r\n        ethSpent[_addr] = 0;\r\n        balances[_addr] = teamFund[_addr];  // Will be zero if they have no teamFund tokens\r\n\r\n        _addr.transfer(_ethRefund);\r\n\r\n        emit Transfer(_addr, address(0), _userBal);\r\n    }\r\n\r\n\r\n    function batchRefund(address payable[] calldata _addrs) external onlyOwner {\r\n        for (uint i=0; i < _addrs.length; i++) {\r\n            refund(_addrs[i]);\r\n        }\r\n    }\r\n\r\n\r\n    // Use this to collect any dust before deploy\r\n    function clearRemainingTokens() internal {\r\n        uint _remainingTokens = getRemainingTokens();\r\n        totalTokensSold += _remainingTokens;\r\n        balances[owner] += _remainingTokens;\r\n\r\n        emit Transfer(address(0), owner, _remainingTokens);\r\n    }\r\n\r\n\r\n    function addHelper(address _addr, bool _val) public onlyOwner {\r\n        helper[_addr] = _val;\r\n    }\r\n\r\n\r\n    function totalSupply() public view returns(uint) {\r\n        return initialTokens;\r\n    }\r\n\r\n\r\n    function balanceOf(address _addr) public view returns(uint) {\r\n        return balances[_addr];\r\n    }\r\n\r\n\r\n    function getRemainingTokens() public view returns(uint) {\r\n        return totalSaleSupply - totalTokensSold;\r\n    }\r\n\r\n\r\n    function getTotalPresaleBuyers() public view returns(uint) {\r\n        return keys.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"addHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"assignTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"batchRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"bulkAddToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"deployMainToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalPresaleBuyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSaleSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTeamSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Team3DPresale","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3e95a3d0a6175fa04001094a464059d05472794d9b1ab24165d11811daf32609"}]}