{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.15;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n}\r\n\r\n\r\ncontract HexDex {\r\n    /*=================================\r\n  =            MODIFIERS            =\r\n  =================================*/\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    // only people with profits\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n\r\n    /*==============================\r\n  =            EVENTS            =\r\n  ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        bytes32 customerName,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        bool isReinvest\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        bytes32 customerName,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        bytes32 customerName,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    // ERC20\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\r\n    /*=====================================\r\n  =            CONFIGURABLES            =\r\n  =====================================*/\r\n    string public name = \"HexDex\";\r\n    string public symbol = \"H3D\";\r\n    uint8 public constant decimals = 8;\r\n    uint8 internal constant dividendFee_ = 10; // 10%\r\n    uint256 internal constant HEX_CENT = 1e6;\r\n    uint256 internal constant HEX = 1e8;\r\n    uint256 internal constant tokenPriceInitial_ = 1 * HEX;\r\n    uint256 internal constant tokenPriceIncremental_ = 10 * HEX_CENT;\r\n    uint256 internal constant magnitude = 2**64;\r\n    address internal constant tokenAddress = address(\r\n        0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\r\n    );\r\n\r\n    uint256 internal cubeStartTime = now;\r\n\r\n    // admin for premine lock\r\n    address internal administrator;\r\n\r\n    // ambassadors\r\n    uint256 ambassadorLimit = HEX * 20000; // 20k hex per ambassador\r\n    uint256 devLimit = HEX * 100000;\r\n    mapping(address => bool) public ambassadors; // who the ambassadors are\r\n    mapping(address => bool) public dev;\r\n\r\n    address[33] ambassadorList = [\r\n        0xc951D3463EbBa4e9Ec8dDfe1f42bc5895C46eC8f,\r\n        0xe8f49490d2b172870b3B225e9fcD39b5D68b2e9E,\r\n        0x5161e1380cd661D7d993c8a3b3E57b059Ad8d7A4,\r\n        0x4Ca9046dcd4C8712450250208D7eD6fCEbAf75a5,\r\n        0xC697BE0b5b82284391A878B226e2f9AfC6B94710,\r\n        0x5cB87df0834cd82297C63eF075421401995914ae,\r\n        0x53F403421110BA93086BCFB40e80C7346035aDF6,\r\n        0x11ba6C4732B1a7f30deA51C23b8ED4c1F88dCD57,\r\n        0xb7032661C1DA18A52830A5e97bdE5569ed3c2A5F,\r\n        0x73c371F85246797e4f7f68F7F46b9261EBa2F853,\r\n        0xffc1eD0C150890c163D940146565df6064588d3e,\r\n        0x5DD516f5dC0E68C5A37D20284Dabd754e35AfF1c,\r\n        0x554fdECe1B1319075d7Bf2F5137076C21A202249,\r\n        0xcF7b442C41795e874b223D4ADeED8cda87A23d00,\r\n        0x87cb806192eC699398511c7aB44b3595C051D13C,\r\n        0x1c2c72269ce1aD29933F090547b4102a9c398f34,\r\n        0x9b411116f92504562EDCf3a1b14Ae226Bc1489Fc,\r\n        0x2E7E5DE7D87A29B16284092B19891c80B0F43eCa,\r\n        0xada8694dd1B511E72F467e7242E7123088aED064,\r\n        0x5269BF8720946b5c38FBf361a947bA9D30C91313,\r\n        0x21e0111e60D5449BdBa67ee6c014B5384644a714,\r\n        0xB96d8107D613b6b593b4531Fc353B282af7fbeF5,\r\n        0x71A4b5895A077806E8cd9F85a5253A9DEbd593fD,\r\n        0x73018870D10173ae6F71Cac3047ED3b6d175F274,\r\n        0x8E2Efa9eD16f07d9B153D295d35025FD677BaE99,\r\n        0x112b3496AAD76CD34a29C335266A968D65fBa10a,\r\n        0x9D7a76fD386eDEB3A871c3A096Ca875aDc1a55b7,\r\n        0x05227e4FA98a6415ef1927E902dc781AA7eD518a,\r\n        0x18600fE707D883c1FD16f002A09241D630270233,\r\n        0x8ec43a855007c61Ce75406DB8b2079207F7d597a,\r\n        0x09a054B60bd3B908791B55eEE81b515B93831E99,\r\n        0x982D72A38A2CB0ed8F2fae5B22C122f1C9c89a13,\r\n        0xa683C1b815997a7Fa38f6178c84675FC4c79AC2B\r\n    ];\r\n\r\n    address[10] devList = [\r\n        0x818F1B08E38376E9635C5bE156B8786317e833b3,\r\n        0xa765a22C97c38c8Ce50FEA453cE92723C7637AA2,\r\n        0xEe54D208f62368B4efFe176CB548A317dcAe963F,\r\n        0x43678bB266e75F50Fbe5927128Ab51930b447eaB,\r\n        0x5138240E96360ad64010C27eB0c685A8b2eDE4F2,\r\n        0x39E00115d71313fD5983DE3Cf2b5820dd3Cc4447,\r\n        0xcFAa3449DFfB82Bf5B37e42FbCf43170c6C8e4AD,\r\n        0x90D20d17Cc9e07020bB490c5e34f486286d3Eeb2,\r\n        0x074F21a36217d7615d0202faA926aEFEBB5a9999,\r\n        0xAA7A7C2DECB180f68F11E975e6D92B5Dc06083A6\r\n    ];\r\n\r\n    uint256 numAmbassadorsDeposited;\r\n\r\n    function depositPremine() public {\r\n        require(ambassadors[msg.sender]); // require them to be an ambassador\r\n        ambassadors[msg.sender] = false; // make them not an ambassador after this transaction! so they can't buy in twice\r\n        ERC20 Hex = ERC20(tokenAddress);\r\n\r\n        // you must deposit EXACTLY 20k\r\n        Hex.transferFrom(msg.sender, address(this), ambassadorLimit);\r\n        numAmbassadorsDeposited++;\r\n    }\r\n\r\n    uint256 numDevDeposited;\r\n\r\n    function depositDevPremine() public {\r\n        require(dev[msg.sender]);\r\n        dev[msg.sender] = false;\r\n        ERC20 Hex = ERC20(tokenAddress);\r\n\r\n        Hex.transferFrom(msg.sender, address(this), devLimit);\r\n        numDevDeposited++;\r\n    }\r\n\r\n    function executePremineBuy() public onlyAdmin() {\r\n        require(now < cubeStartTime);\r\n        ERC20 Hex = ERC20(tokenAddress);\r\n\r\n        // first buy in with 1 hex so that we don't black hole a bunch of stuff\r\n        Hex.transferFrom(msg.sender, address(this), 1 * HEX);\r\n        purchaseTokens(1 * HEX, address(0x0), false);\r\n\r\n        // then buy in the full amount with the amount of hex in the contract minus 1\r\n        purchaseTokens(\r\n            Hex.balanceOf(address(this)) - (1 * HEX),\r\n            address(0x0),\r\n            false\r\n        );\r\n\r\n        // now that we have a bunch of tokens, transfer them out to each ambassador fairly!\r\n        uint256 premineTokenShare = tokenSupply_ /\r\n            (numAmbassadorsDeposited + (numDevDeposited * 5));\r\n\r\n        for (uint256 i = 0; i < 33; i++) {\r\n            // if this call returns false, it means the person is NO LONGER an ambassador - which means they HAVE deposited\r\n            // which means we SHOULD give them their token share!\r\n            if (ambassadors[ambassadorList[i]] == false) {\r\n                transfer(ambassadorList[i], premineTokenShare);\r\n            }\r\n        }\r\n\r\n        for (uint256 j = 0; j < 10; j++) {\r\n            // if this call returns false, it means the person is NO LONGER an ambassador - which means they HAVE deposited\r\n            // which means we SHOULD give them their token share!\r\n            if (dev[devList[j]] == false) {\r\n                transfer(devList[j], premineTokenShare * 5);\r\n            }\r\n        }\r\n    }\r\n\r\n    function restart() public onlyAdmin() {\r\n        require(now < cubeStartTime);\r\n        // Only called if something goes wrong during premine\r\n        ERC20 Hex = ERC20(tokenAddress);\r\n        Hex.transfer(administrator, Hex.balanceOf(address(this)));\r\n    }\r\n\r\n    // username interface\r\n    UsernameInterface private username;\r\n\r\n    /*================================\r\n  =            DATASETS            =\r\n  ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => bool) internal approvedDistributors;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n\r\n    /*=======================================\r\n  =            PUBLIC FUNCTIONS            =\r\n  =======================================*/\r\n    /*\r\n     * -- APPLICATION ENTRY POINTS --\r\n     */\r\n    constructor(address usernameAddress, uint256 when_start) public {\r\n        ambassadors[0xc951D3463EbBa4e9Ec8dDfe1f42bc5895C46eC8f] = true;\r\n        ambassadors[0xe8f49490d2b172870b3B225e9fcD39b5D68b2e9E] = true;\r\n        ambassadors[0x5161e1380cd661D7d993c8a3b3E57b059Ad8d7A4] = true;\r\n        ambassadors[0x4Ca9046dcd4C8712450250208D7eD6fCEbAf75a5] = true;\r\n        ambassadors[0xC697BE0b5b82284391A878B226e2f9AfC6B94710] = true;\r\n        ambassadors[0x5cB87df0834cd82297C63eF075421401995914ae] = true;\r\n        ambassadors[0x53F403421110BA93086BCFB40e80C7346035aDF6] = true;\r\n        ambassadors[0x11ba6C4732B1a7f30deA51C23b8ED4c1F88dCD57] = true;\r\n        ambassadors[0xb7032661C1DA18A52830A5e97bdE5569ed3c2A5F] = true;\r\n        ambassadors[0x73c371F85246797e4f7f68F7F46b9261EBa2F853] = true;\r\n        ambassadors[0xffc1eD0C150890c163D940146565df6064588d3e] = true;\r\n        ambassadors[0x5DD516f5dC0E68C5A37D20284Dabd754e35AfF1c] = true;\r\n        ambassadors[0x554fdECe1B1319075d7Bf2F5137076C21A202249] = true;\r\n        ambassadors[0xcF7b442C41795e874b223D4ADeED8cda87A23d00] = true;\r\n        ambassadors[0x87cb806192eC699398511c7aB44b3595C051D13C] = true;\r\n        ambassadors[0x1c2c72269ce1aD29933F090547b4102a9c398f34] = true;\r\n        ambassadors[0x9b411116f92504562EDCf3a1b14Ae226Bc1489Fc] = true;\r\n        ambassadors[0x2E7E5DE7D87A29B16284092B19891c80B0F43eCa] = true;\r\n        ambassadors[0xada8694dd1B511E72F467e7242E7123088aED064] = true;\r\n        ambassadors[0x5269BF8720946b5c38FBf361a947bA9D30C91313] = true;\r\n        ambassadors[0x21e0111e60D5449BdBa67ee6c014B5384644a714] = true;\r\n        ambassadors[0xB96d8107D613b6b593b4531Fc353B282af7fbeF5] = true;\r\n        ambassadors[0x71A4b5895A077806E8cd9F85a5253A9DEbd593fD] = true;\r\n        ambassadors[0x73018870D10173ae6F71Cac3047ED3b6d175F274] = true;\r\n        ambassadors[0x8E2Efa9eD16f07d9B153D295d35025FD677BaE99] = true;\r\n        ambassadors[0x112b3496AAD76CD34a29C335266A968D65fBa10a] = true;\r\n        ambassadors[0x9D7a76fD386eDEB3A871c3A096Ca875aDc1a55b7] = true;\r\n        ambassadors[0x05227e4FA98a6415ef1927E902dc781AA7eD518a] = true;\r\n        ambassadors[0x18600fE707D883c1FD16f002A09241D630270233] = true;\r\n        ambassadors[0x8ec43a855007c61Ce75406DB8b2079207F7d597a] = true;\r\n        ambassadors[0x09a054B60bd3B908791B55eEE81b515B93831E99] = true;\r\n        ambassadors[0x982D72A38A2CB0ed8F2fae5B22C122f1C9c89a13] = true;\r\n        ambassadors[0xa683C1b815997a7Fa38f6178c84675FC4c79AC2B] = true;\r\n\r\n        dev[0x818F1B08E38376E9635C5bE156B8786317e833b3] = true;\r\n        dev[0xa765a22C97c38c8Ce50FEA453cE92723C7637AA2] = true;\r\n        dev[0xEe54D208f62368B4efFe176CB548A317dcAe963F] = true;\r\n        dev[0x43678bB266e75F50Fbe5927128Ab51930b447eaB] = true;\r\n        dev[0x5138240E96360ad64010C27eB0c685A8b2eDE4F2] = true;\r\n        dev[0x39E00115d71313fD5983DE3Cf2b5820dd3Cc4447] = true;\r\n        dev[0xcFAa3449DFfB82Bf5B37e42FbCf43170c6C8e4AD] = true;\r\n        dev[0x90D20d17Cc9e07020bB490c5e34f486286d3Eeb2] = true;\r\n        dev[0x074F21a36217d7615d0202faA926aEFEBB5a9999] = true;\r\n        dev[0xAA7A7C2DECB180f68F11E975e6D92B5Dc06083A6] = true;\r\n\r\n        username = UsernameInterface(usernameAddress);\r\n        cubeStartTime = when_start;\r\n        administrator = msg.sender;\r\n    }\r\n\r\n    function startTime() public view returns (uint256 _startTime) {\r\n        _startTime = cubeStartTime;\r\n    }\r\n\r\n    function approveDistributor(address newDistributor) public onlyAdmin() {\r\n        approvedDistributors[newDistributor] = true;\r\n    }\r\n\r\n    /**\r\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\r\n     */\r\n    function buy(address _referredBy, uint256 amount) public returns (uint256) {\r\n        ERC20 Hex = ERC20(tokenAddress);\r\n        Hex.transferFrom(msg.sender, address(this), amount);\r\n        purchaseTokens(amount, _referredBy, false);\r\n    }\r\n\r\n    /**\r\n     * refuse to receive any tokens directly sent\r\n     *\r\n     */\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    function distribute(uint256 amount) external payable {\r\n        require(approvedDistributors[msg.sender] == true);\r\n        ERC20 Hex = ERC20(tokenAddress);\r\n        Hex.transferFrom(msg.sender, address(this), amount);\r\n        profitPerShare_ = SafeMath.add(\r\n            profitPerShare_,\r\n            (amount * magnitude) / tokenSupply_\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest() public onlyStronghands() {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n\r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n\r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        purchaseTokens(_dividends, address(0x0), true);\r\n    }\r\n\r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit() public {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) sell(_tokens);\r\n\r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw() public onlyStronghands() {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n\r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\r\n\r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n\r\n        // lambo delivery service\r\n        ERC20 Hex = ERC20(tokenAddress);\r\n        Hex.transfer(_customerAddress, _dividends);\r\n\r\n        // fire event\r\n        emit onWithdraw(\r\n            _customerAddress,\r\n            username.getNameByAddress(msg.sender),\r\n            _dividends\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens) public onlyBagholders() {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _tokens\r\n        );\r\n\r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256)(\r\n            profitPerShare_ * _tokens + (_taxedEthereum * magnitude)\r\n        );\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(\r\n                profitPerShare_,\r\n                (_dividends * magnitude) / tokenSupply_\r\n            );\r\n        }\r\n\r\n        // fire event\r\n        emit onTokenSell(\r\n            _customerAddress,\r\n            username.getNameByAddress(msg.sender),\r\n            _tokens,\r\n            _taxedEthereum\r\n        );\r\n    }\r\n\r\n    /**\r\n     * To heck with the transfer fee\r\n     * Who needs it\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        public\r\n        onlyBagholders()\r\n        returns (bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested tokens\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        // withdraw all outstanding dividends first\r\n        if (myDividends(true) > 0) withdraw();\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(\r\n            tokenBalanceLedger_[_customerAddress],\r\n            _amountOfTokens\r\n        );\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(\r\n            tokenBalanceLedger_[_toAddress],\r\n            _amountOfTokens\r\n        );\r\n\r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256)(\r\n            profitPerShare_ * _amountOfTokens\r\n        );\r\n        payoutsTo_[_toAddress] += (int256)(profitPerShare_ * _amountOfTokens);\r\n\r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n\r\n        // ERC20\r\n        return true;\r\n    }\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the number of aambassadors deposited.\r\n     */\r\n    function numAmbassadorsDep() public view returns (uint256) {\r\n        return numAmbassadorsDeposited;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the number of developers deposited.\r\n     */\r\n    function numDevDep() public view returns (uint256) {\r\n        return numDevDeposited;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate.\r\n     */\r\n    function myDividends(bool _includeReferralBonus)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return\r\n            _includeReferralBonus\r\n                ? dividendsOf(_customerAddress) +\r\n                    referralBalance_[_customerAddress]\r\n                : dividendsOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            (uint256)(\r\n                (int256)(\r\n                    profitPerShare_ * tokenBalanceLedger_[_customerAddress]\r\n                ) - payoutsTo_[_customerAddress]\r\n            ) / magnitude;\r\n    }\r\n\r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function sellPrice() public view returns (uint256) {\r\n        // our calculation relies on the token supply, so we need supply.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e8);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function buyPrice() public view returns (uint256) {\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e8);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n\r\n    /*==========================================\r\n  =            INTERNAL FUNCTIONS            =\r\n  ==========================================*/\r\n    function purchaseTokens(\r\n        uint256 _incomingEthereum,\r\n        address _referredBy,\r\n        bool isReinvest\r\n    ) internal returns (uint256) {\r\n        if (now < startTime()) {\r\n            require(msg.sender == administrator);\r\n        }\r\n\r\n        // data setup\r\n        uint256 _undividedDividends = SafeMath.div(\r\n            _incomingEthereum,\r\n            dividendFee_\r\n        );\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedEthereum = SafeMath.sub(\r\n            _incomingEthereum,\r\n            _undividedDividends\r\n        );\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(\r\n            _amountOfTokens > 0 &&\r\n                (SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_)\r\n        );\r\n\r\n        // is the user referred by a masternode?\r\n        if (\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n            // no cheating!\r\n            _referredBy != msg.sender\r\n        ) {\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(\r\n                referralBalance_[_referredBy],\r\n                _referralBonus\r\n            );\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        // we can't give people infinite ethereum\r\n        if (tokenSupply_ > 0) {\r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));\r\n\r\n            // calculate the amount of tokens the customer receives over his purchase\r\n            _fee =\r\n                _fee -\r\n                (_fee -\r\n                    (_amountOfTokens *\r\n                        ((_dividends * magnitude) / (tokenSupply_))));\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[msg.sender] = SafeMath.add(\r\n            tokenBalanceLedger_[msg.sender],\r\n            _amountOfTokens\r\n        );\r\n\r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        //really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256)(\r\n            (profitPerShare_ * _amountOfTokens) - _fee\r\n        );\r\n        payoutsTo_[msg.sender] += _updatedPayouts;\r\n\r\n        // fire event\r\n        emit onTokenPurchase(\r\n            msg.sender,\r\n            username.getNameByAddress(msg.sender),\r\n            _incomingEthereum,\r\n            _amountOfTokens,\r\n            _referredBy,\r\n            isReinvest\r\n        );\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e8;\r\n        uint256 _tokensReceived = ((\r\n            SafeMath.sub(\r\n                (\r\n                    sqrt(\r\n                        (_tokenPriceInitial**2) +\r\n                            (2 *\r\n                                (tokenPriceIncremental_ * 1e8) *\r\n                                (_ethereum * 1e8)) +\r\n                            (((tokenPriceIncremental_)**2) *\r\n                                (tokenSupply_**2)) +\r\n                            (2 *\r\n                                (tokenPriceIncremental_) *\r\n                                _tokenPriceInitial *\r\n                                tokenSupply_)\r\n                    )\r\n                ),\r\n                _tokenPriceInitial\r\n            )\r\n        ) / (tokenPriceIncremental_)) - (tokenSupply_);\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    /**\r\n     * Calculate token sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 tokens_ = (_tokens + 1e8);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e8);\r\n        uint256 _etherReceived = (SafeMath.sub(\r\n            (((tokenPriceInitial_ +\r\n                (tokenPriceIncremental_ * (_tokenSupply / 1e8))) -\r\n                tokenPriceIncremental_) * (tokens_ - 1e8)),\r\n            (tokenPriceIncremental_ * ((tokens_**2 - tokens_) / 1e8)) / 2\r\n        ) / 1e8);\r\n        return _etherReceived;\r\n    }\r\n\r\n    //This is where all your gas goes apparently\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface UsernameInterface {\r\n    function getNameByAddress(address _addr) external view returns (bytes32);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usernameAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"when_start\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"customerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReinvest\",\"type\":\"bool\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"customerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"customerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ambassadors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"approveDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositDevPremine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositPremine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executePremineBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numAmbassadorsDep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numDevDep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HexDex","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000036948b2b95e9bc965a96a511bbe124ef218f8447000000000000000000000000000000000000000000000000000000005edbd9a0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://49a571730e1d39d951adbf2d9b472eb4a42600fb8d8becec1c29f2159952bdea"}]}