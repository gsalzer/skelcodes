{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/util/DeployerRole.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\nabstract contract DeployerRole {\r\n    address internal immutable _deployer;\r\n\r\n    modifier onlyDeployer() {\r\n        require(\r\n            _isDeployer(msg.sender),\r\n            \"only deployer is allowed to call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _deployer = msg.sender;\r\n    }\r\n\r\n    function _isDeployer(address account) internal view returns (bool) {\r\n        return account == _deployer;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SignedSafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Multiplies two signed integers, reverts on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two signed integers, reverts on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two signed integers, reverts on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/SafeCast.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: contracts/math/UseSafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice ((a - 1) / b) + 1 = (a + b -1) / b\r\n * for example a.add(10**18 -1).div(10**18) = a.sub(1).div(10**18) + 1\r\n */\r\n\r\nlibrary SafeMathDivRoundUp {\r\n    using SafeMath for uint256;\r\n\r\n    function divRoundUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        require(b > 0, errorMessage);\r\n        return ((a - 1) / b) + 1;\r\n    }\r\n\r\n    function divRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return divRoundUp(a, b, \"SafeMathDivRoundUp: modulo by zero\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title UseSafeMath\r\n * @dev One can use SafeMath for not only uint256 but also uin64 or uint16,\r\n * and also can use SafeCast for uint256.\r\n * For example:\r\n *   uint64 a = 1;\r\n *   uint64 b = 2;\r\n *   a = a.add(b).toUint64() // `a` become 3 as uint64\r\n * In additionally, one can use SignedSafeMath and SafeCast.toUint256(int256) for int256.\r\n * In the case of the operation to the uint64 value, one need to cast the value into int256 in\r\n * advance to use `sub` as SignedSafeMath.sub not SafeMath.sub.\r\n * For example:\r\n *   int256 a = 1;\r\n *   uint64 b = 2;\r\n *   int256 c = 3;\r\n *   a = a.add(int256(b).sub(c)); // `a` become 0 as int256\r\n *   b = a.toUint256().toUint64(); // `b` become 0 as uint64\r\n */\r\nabstract contract UseSafeMath {\r\n    using SafeMath for uint256;\r\n    using SafeMathDivRoundUp for uint256;\r\n    using SafeMath for uint64;\r\n    using SafeMathDivRoundUp for uint64;\r\n    using SafeMath for uint16;\r\n    using SignedSafeMath for int256;\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n}\r\n\r\n// File: contracts/oracle/OracleInterface.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n// Oracle referenced by OracleProxy must implement this interface.\r\ninterface OracleInterface {\r\n    // Returns if oracle is running.\r\n    function alive() external view returns (bool);\r\n\r\n    // Returns latest id.\r\n    // The first id is 1 and 0 value is invalid as id.\r\n    // Each price values and theirs timestamps are identified by id.\r\n    // Ids are assigned incrementally to values.\r\n    function latestId() external returns (uint256);\r\n\r\n    // Returns latest price value.\r\n    // decimal 8\r\n    function latestPrice() external returns (uint256);\r\n\r\n    // Returns timestamp of latest price.\r\n    function latestTimestamp() external returns (uint256);\r\n\r\n    // Returns price of id.\r\n    function getPrice(uint256 id) external returns (uint256);\r\n\r\n    // Returns timestamp of id.\r\n    function getTimestamp(uint256 id) external returns (uint256);\r\n\r\n    function getVolatility() external returns (uint256);\r\n}\r\n\r\n// File: contracts/oracle/UseOracle.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\nabstract contract UseOracle {\r\n    OracleInterface internal _oracleContract;\r\n\r\n    constructor(address contractAddress) public {\r\n        require(\r\n            contractAddress != address(0),\r\n            \"contract should be non-zero address\"\r\n        );\r\n        _oracleContract = OracleInterface(contractAddress);\r\n    }\r\n\r\n    /// @notice Get the latest USD/ETH price and historical volatility using oracle.\r\n    /// @return rateETH2USDE8 (10^-8 USD/ETH)\r\n    /// @return volatilityE8 (10^-8)\r\n    function _getOracleData()\r\n        internal\r\n        returns (uint256 rateETH2USDE8, uint256 volatilityE8)\r\n    {\r\n        rateETH2USDE8 = _oracleContract.latestPrice();\r\n        volatilityE8 = _oracleContract.getVolatility();\r\n\r\n        return (rateETH2USDE8, volatilityE8);\r\n    }\r\n\r\n    /// @notice Get the price of the oracle data with a minimum timestamp that does more than input value\r\n    /// when you know the ID you are looking for.\r\n    /// @param timestamp is the timestamp that you want to get price.\r\n    /// @param hintID is the ID of the oracle data you are looking for.\r\n    /// @return rateETH2USDE8 (10^-8 USD/ETH)\r\n    function _getPriceOn(uint256 timestamp, uint256 hintID)\r\n        internal\r\n        returns (uint256 rateETH2USDE8)\r\n    {\r\n        uint256 latestID = _oracleContract.latestId();\r\n        require(\r\n            latestID != 0,\r\n            \"system error: the ID of oracle data should not be zero\"\r\n        );\r\n\r\n        require(hintID != 0, \"the hint ID must not be zero\");\r\n        uint256 id = hintID;\r\n        if (hintID > latestID) {\r\n            id = latestID;\r\n        }\r\n\r\n        require(\r\n            _oracleContract.getTimestamp(id) > timestamp,\r\n            \"there is no price data after maturity\"\r\n        );\r\n\r\n        id--;\r\n        while (id != 0) {\r\n            if (_oracleContract.getTimestamp(id) <= timestamp) {\r\n                break;\r\n            }\r\n            id--;\r\n        }\r\n\r\n        return _oracleContract.getPrice(id + 1);\r\n    }\r\n}\r\n\r\n// File: contracts/BondMakerInterface.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface BondMakerInterface {\r\n    event LogNewBond(\r\n        bytes32 indexed bondID,\r\n        address bondTokenAddress,\r\n        uint64 stableStrikePrice,\r\n        bytes32 fnMapID\r\n    );\r\n\r\n    event LogNewBondGroup(uint256 indexed bondGroupID);\r\n\r\n    event LogIssueNewBonds(\r\n        uint256 indexed bondGroupID,\r\n        address indexed issuer,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogReverseBondToETH(\r\n        uint256 indexed bondGroupID,\r\n        address indexed owner,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogExchangeEquivalentBonds(\r\n        address indexed owner,\r\n        uint256 indexed inputBondGroupID,\r\n        uint256 indexed outputBondGroupID,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogTransferETH(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    function registerNewBond(uint256 maturity, bytes calldata fnMap)\r\n        external\r\n        returns (\r\n            bytes32 bondID,\r\n            address bondTokenAddress,\r\n            uint64 solidStrikePrice,\r\n            bytes32 fnMapID\r\n        );\r\n\r\n    function registerNewBondGroup(\r\n        bytes32[] calldata bondIDList,\r\n        uint256 maturity\r\n    ) external returns (uint256 bondGroupID);\r\n\r\n    function issueNewBonds(uint256 bondGroupID)\r\n        external\r\n        payable\r\n        returns (uint256 amount);\r\n\r\n    function reverseBondToETH(uint256 bondGroupID, uint256 amount)\r\n        external\r\n        returns (bool success);\r\n\r\n    function exchangeEquivalentBonds(\r\n        uint256 inputBondGroupID,\r\n        uint256 outputBondGroupID,\r\n        uint256 amount,\r\n        bytes32[] calldata exceptionBonds\r\n    ) external returns (bool);\r\n\r\n    function liquidateBond(uint256 bondGroupID, uint256 oracleHintID) external;\r\n\r\n    function getBond(bytes32 bondID)\r\n        external\r\n        view\r\n        returns (\r\n            address bondAddress,\r\n            uint256 maturity,\r\n            uint64 solidStrikePrice,\r\n            bytes32 fnMapID\r\n        );\r\n\r\n    function getFnMap(bytes32 fnMapID)\r\n        external\r\n        view\r\n        returns (bytes memory fnMap);\r\n\r\n    function getBondGroup(uint256 bondGroupID)\r\n        external\r\n        view\r\n        returns (bytes32[] memory bondIDs, uint256 maturity);\r\n\r\n    function generateBondID(uint256 maturity, bytes calldata functionHash)\r\n        external\r\n        pure\r\n        returns (bytes32 bondID);\r\n}\r\n\r\n// File: contracts/UseBondMaker.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\nabstract contract UseBondMaker {\r\n    BondMakerInterface internal immutable _bondMakerContract;\r\n\r\n    constructor(address contractAddress) public {\r\n        require(\r\n            contractAddress != address(0),\r\n            \"contract should be non-zero address\"\r\n        );\r\n        _bondMakerContract = BondMakerInterface(payable(contractAddress));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/StableCoinInterface.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\ninterface StableCoinInterface is IERC20 {\r\n    event LogIsAcceptableSBT(bytes32 indexed bondID, bool isAcceptable);\r\n\r\n    event LogMintIDOL(\r\n        bytes32 indexed bondID,\r\n        address indexed owner,\r\n        bytes32 poolID,\r\n        uint256 obtainIDOLAmount,\r\n        uint256 poolIDOLAmount\r\n    );\r\n\r\n    event LogBurnIDOL(\r\n        bytes32 indexed bondID, // poolID?\r\n        address indexed owner,\r\n        uint256 burnIDOLAmount,\r\n        uint256 unlockSBTAmount\r\n    );\r\n\r\n    event LogReturnLockedPool(\r\n        bytes32 indexed poolID,\r\n        address indexed owner,\r\n        uint64 backIDOLAmount\r\n    );\r\n\r\n    event LogLambda(\r\n        bytes32 indexed poolID,\r\n        uint64 settledAverageAuctionPrice,\r\n        uint256 totalSupply,\r\n        uint256 lockedSBTValue\r\n    );\r\n\r\n    function getPoolInfo(bytes32 poolID)\r\n        external\r\n        view\r\n        returns (\r\n            uint64 lockedSBTTotal,\r\n            uint64 unlockedSBTTotal,\r\n            uint64 lockedPoolIDOLTotal,\r\n            uint64 burnedIDOLTotal,\r\n            uint64 soldSBTTotalInAuction,\r\n            uint64 paidIDOLTotalInAuction,\r\n            uint64 settledAverageAuctionPrice,\r\n            bool isAllAmountSoldInAuction\r\n        );\r\n\r\n    function solidValueTotal() external view returns (uint256 solidValue);\r\n\r\n    function isAcceptableSBT(bytes32 bondID) external returns (bool ok);\r\n\r\n    function mint(\r\n        bytes32 bondID,\r\n        address recipient,\r\n        uint64 lockAmount\r\n    )\r\n        external\r\n        returns (\r\n            bytes32 poolID,\r\n            uint64 obtainIDOLAmount,\r\n            uint64 poolIDOLAmount\r\n        );\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    function unlockSBT(bytes32 bondID, uint64 burnAmount)\r\n        external\r\n        returns (uint64 rewardSBT);\r\n\r\n    function startAuctionOnMaturity(bytes32 bondID) external;\r\n\r\n    function startAuctionByMarket(bytes32 bondID) external;\r\n\r\n    function setSettledAverageAuctionPrice(\r\n        bytes32 bondID,\r\n        uint64 totalPaidIDOL,\r\n        uint64 SBTAmount,\r\n        bool isLast\r\n    ) external;\r\n\r\n    function calcSBT2IDOL(uint256 solidBondAmount)\r\n        external\r\n        view\r\n        returns (uint256 IDOLAmount);\r\n\r\n    function returnLockedPool(bytes32[] calldata poolIDs)\r\n        external\r\n        returns (uint64 IDOLAmount);\r\n\r\n    function generatePoolID(bytes32 bondID, uint64 count)\r\n        external\r\n        pure\r\n        returns (bytes32 poolID);\r\n\r\n    function getCurrentPoolID(bytes32 bondID)\r\n        external\r\n        view\r\n        returns (bytes32 poolID);\r\n\r\n    function getLockedPool(address user, bytes32 poolID)\r\n        external\r\n        view\r\n        returns (uint64, uint64);\r\n}\r\n\r\n// File: contracts/UseStableCoin.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\nabstract contract UseStableCoin {\r\n    StableCoinInterface internal immutable _IDOLContract;\r\n\r\n    constructor(address contractAddress) public {\r\n        require(\r\n            contractAddress != address(0),\r\n            \"contract should be non-zero address\"\r\n        );\r\n        _IDOLContract = StableCoinInterface(contractAddress);\r\n    }\r\n\r\n    function _transferIDOLFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        _IDOLContract.transferFrom(from, to, amount);\r\n    }\r\n\r\n    function _transferIDOL(address to, uint256 amount) internal {\r\n        _IDOLContract.transfer(to, amount);\r\n    }\r\n\r\n    function _transferIDOL(\r\n        address to,\r\n        uint256 amount,\r\n        string memory errorMessage\r\n    ) internal {\r\n        require(_IDOLContract.balanceOf(address(this)) >= amount, errorMessage);\r\n        _IDOLContract.transfer(to, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/fairswap/LBTExchangeFactoryInterface.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface LBTExchangeFactoryInterface {\r\n    /**\r\n     * @notice Launches new exchange\r\n     * @param bondGroupId ID of bondgroup which target LBT belongs to\r\n     * @param place The place of target bond in the bondGroup\r\n     * @param IDOLAmount Initial liquidity of iDOL\r\n     * @param LBTAmount Initial liquidity of LBT\r\n     * @dev Get strikeprice and maturity from bond maker contract\r\n     **/\r\n    function launchExchange(\r\n        uint256 bondGroupId,\r\n        uint256 place,\r\n        uint256 IDOLAmount,\r\n        uint256 LBTAmount\r\n    ) external returns (address);\r\n\r\n    /**\r\n     * @notice Gets exchange address from Address of LBT\r\n     * @param tokenAddress Address of LBT\r\n     **/\r\n    function addressToExchangeLookup(address tokenAddress)\r\n        external\r\n        view\r\n        returns (address exchange);\r\n\r\n    /**\r\n     * @notice Gets exchange address from BondID of LBT\r\n     * @param bondID\r\n     **/\r\n    function bondIDToExchangeLookup(bytes32 bondID)\r\n        external\r\n        view\r\n        returns (address exchange);\r\n\r\n    /**\r\n     * @dev Initial supply of share token is equal to amount of iDOL\r\n     * @dev If there is no share token, user can reinitialize exchange\r\n     * @param token Address of LBT\r\n     * @param IDOLAmount Amount of idol to be provided\r\n     * @param LBTAmount Amount of LBT to be provided\r\n     **/\r\n    function initializeExchange(\r\n        address token,\r\n        uint256 IDOLAmount,\r\n        uint256 LBTAmount\r\n    ) external;\r\n}\r\n\r\n// File: contracts/WrapperInterface.sol\r\n\r\npragma solidity 0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface WrapperInterface {\r\n    event LogRegisterBondAndBondGroup(\r\n        uint256 indexed bondGroupID,\r\n        bytes32[] bondIDs\r\n    );\r\n    event LogIssueIDOL(\r\n        bytes32 indexed bondID,\r\n        address indexed sender,\r\n        bytes32 poolID,\r\n        uint256 amount\r\n    );\r\n\r\n    event LogIssueLBT(\r\n        bytes32 indexed bondID,\r\n        address indexed sender,\r\n        uint256 amount\r\n    );\r\n\r\n    function registerBondAndBondGroup(bytes[] calldata fnMaps, uint256 maturity)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @notice swap (SBT -> LBT)\r\n     * @param solidBondID is a solid bond ID\r\n     * @param liquidBondID is a liquid bond ID\r\n     * @param timeout (uniswap)\r\n     * @param isLimit (uniswap)\r\n     */\r\n    function swapSBT2LBT(\r\n        bytes32 solidBondID,\r\n        bytes32 liquidBondID,\r\n        uint256 SBTAmount,\r\n        uint256 timeout,\r\n        bool isLimit\r\n    ) external;\r\n\r\n    /**\r\n     * @notice ETH -> LBT & iDOL\r\n     * @param bondGroupID is a bond group ID\r\n     * @return poolID is a pool ID\r\n     * @return liquidBondAmount is LBT amount obtained\r\n     * @return IDOLAmount is iDOL amount obtained\r\n     */\r\n    function issueLBTAndIDOL(uint256 bondGroupID)\r\n        external\r\n        payable\r\n        returns (\r\n            bytes32 poolID,\r\n            uint256 liquidBondAmount,\r\n            uint256 IDOLAmount\r\n        );\r\n\r\n    /**\r\n     * @notice ETH -> iDOL\r\n     * @param bondGroupID is a bond group ID\r\n     * @param timeout (uniswap)\r\n     * @param isLimit (uniswap)\r\n     */\r\n    function issueIDOLOnly(\r\n        uint256 bondGroupID,\r\n        uint256 timeout,\r\n        bool isLimit\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice ETH -> LBT\r\n     * @param bondGroupID is a bond group ID\r\n     * @param liquidBondID is a liquid bond ID\r\n     * @param timeout (uniswap)\r\n     * @param isLimit (uniswap)\r\n     */\r\n    function issueLBTOnly(\r\n        uint256 bondGroupID,\r\n        bytes32 liquidBondID,\r\n        uint256 timeout,\r\n        bool isLimit\r\n    ) external payable;\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/util/TransferETHInterface.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface TransferETHInterface {\r\n    receive() external payable;\r\n\r\n    event LogTransferETH(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/bondToken/BondTokenInterface.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\ninterface BondTokenInterface is TransferETHInterface, IERC20 {\r\n    event LogExpire(\r\n        uint128 rateNumerator,\r\n        uint128 rateDenominator,\r\n        bool firstTime\r\n    );\r\n\r\n    function mint(address account, uint256 amount)\r\n        external\r\n        returns (bool success);\r\n\r\n    function expire(uint128 rateNumerator, uint128 rateDenominator)\r\n        external\r\n        returns (bool firstTime);\r\n\r\n    function burn(uint256 amount) external returns (bool success);\r\n\r\n    function burnAll() external returns (uint256 amount);\r\n\r\n    function isMinter(address account) external view returns (bool minter);\r\n\r\n    function getRate()\r\n        external\r\n        view\r\n        returns (uint128 rateNumerator, uint128 rateDenominator);\r\n}\r\n\r\n// File: contracts/fairswap/Libraries/Enums.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\nenum Token {TOKEN0, TOKEN1}\r\n\r\n// FLEX_0_1 => Swap TOKEN0 to TOKEN1, slippage is tolerate to 5%\r\n// FLEX_1_0 => Swap TOKEN1 to TOKEN0, slippage is tolerate to 5%\r\n// STRICT_0_1 => Swap TOKEN0 to TOKEN1, slippage is limited in 0.1%\r\n// STRICT_1_0 => Swap TOKEN1 to TOKEN0, slippage is limited in 0.1%\r\nenum OrderType {FLEX_0_1, FLEX_1_0, STRICT_0_1, STRICT_1_0}\r\n\r\n\r\nlibrary TokenLibrary {\r\n    function another(Token self) internal pure returns (Token) {\r\n        if (self == Token.TOKEN0) {\r\n            return Token.TOKEN1;\r\n        } else {\r\n            return Token.TOKEN0;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary OrderTypeLibrary {\r\n    function inToken(OrderType self) internal pure returns (Token) {\r\n        if (self == OrderType.FLEX_0_1 || self == OrderType.STRICT_0_1) {\r\n            return Token.TOKEN0;\r\n        } else {\r\n            return Token.TOKEN1;\r\n        }\r\n    }\r\n\r\n    function isFlex(OrderType self) internal pure returns (bool) {\r\n        return self == OrderType.FLEX_0_1 || self == OrderType.FLEX_1_0;\r\n    }\r\n\r\n    function isStrict(OrderType self) internal pure returns (bool) {\r\n        return !isFlex(self);\r\n    }\r\n\r\n    function next(OrderType self) internal pure returns (OrderType) {\r\n        return OrderType((uint256(self) + 1) % 4);\r\n    }\r\n\r\n    function isBuy(OrderType self) internal pure returns (bool) {\r\n        return (self == OrderType.FLEX_0_1 || self == OrderType.STRICT_0_1);\r\n    }\r\n}\r\n\r\n// File: contracts/fairswap/BoxExchangeInterface.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface BoxExchangeInterface {\r\n    event AcceptOrders(\r\n        address indexed recipient,\r\n        bool indexed isBuy, // if true, this order is exchange from TOKEN0 to TOKEN1\r\n        uint32 indexed boxNumber,\r\n        bool isLimit, // if true, this order is STRICT order\r\n        uint256 tokenIn\r\n    );\r\n\r\n    event MoveLiquidity(\r\n        address indexed liquidityProvider,\r\n        bool indexed isAdd, // if true, this order is addtion of liquidity\r\n        uint256 movedToken0Amount,\r\n        uint256 movedToken1Amount,\r\n        uint256 sharesMoved // Amount of share that is minted or burned\r\n    );\r\n\r\n    event Execution(\r\n        bool indexed isBuy, // if true, this order is exchange from TOKEN0 to TOKEN1\r\n        uint32 indexed boxNumber,\r\n        address indexed recipient,\r\n        uint256 orderAmount, // Amount of token that is transferred when this order is added\r\n        uint256 refundAmount, // In the same token as orderAmount\r\n        uint256 outAmount // In the other token than orderAmount\r\n    );\r\n\r\n    event UpdateReserve(uint128 reserve0, uint128 reserve1, uint256 totalShare);\r\n\r\n    event PayMarketFee(uint256 amount0, uint256 amount1);\r\n\r\n    event ExecutionSummary(\r\n        uint32 indexed boxNumber,\r\n        uint8 partiallyRefundOrderType,\r\n        uint256 rate,\r\n        uint256 partiallyRefundRate,\r\n        uint256 totalInAmountFLEX_0_1,\r\n        uint256 totalInAmountFLEX_1_0,\r\n        uint256 totalInAmountSTRICT_0_1,\r\n        uint256 totalInAmountSTRICT_1_0\r\n    );\r\n\r\n    function marketFeePool0() external view returns (uint128);\r\n\r\n    function marketFeePool1() external view returns (uint128);\r\n\r\n    /**\r\n     * @notice Shows how many boxes and orders exist before the specific order\r\n     * @dev If this order does not exist, return (false, 0, 0)\r\n     * @dev If this order is already executed, return (true, 0, 0)\r\n     * @param recipient Recipient of this order\r\n     * @param boxNumber Box ID where the order exists\r\n     * @param isExecuted If true, the order is already executed\r\n     * @param boxCount Counter of boxes before this order. If current executing box number is the same as boxNumber, return 1 (i.e. indexing starts from 1)\r\n     * @param orderCount Counter of orders before this order. If this order is on n-th top of the queue, return n (i.e. indexing starts from 1)\r\n     **/\r\n    function whenToExecute(\r\n        address recipient,\r\n        uint256 boxNumber,\r\n        bool isBuy,\r\n        bool isLimit\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool isExecuted,\r\n            uint256 boxCount,\r\n            uint256 orderCount\r\n        );\r\n\r\n    /**\r\n     * @notice Returns summary of current exchange status\r\n     * @param boxNumber Current open box ID\r\n     * @param _reserve0 Current reserve of TOKEN0\r\n     * @param _reserve1 Current reserve of TOKEN1\r\n     * @param totalShare Total Supply of share token\r\n     * @param latestSpreadRate Spread Rate in latest OrderBox\r\n     * @param token0PerShareE18 Amount of TOKEN0 per 1 share token and has 18 decimal\r\n     * @param token1PerShareE18 Amount of TOKEN1 per 1 share token and has 18 decimal\r\n     **/\r\n    function getExchangeData()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 boxNumber,\r\n            uint256 _reserve0,\r\n            uint256 _reserve1,\r\n            uint256 totalShare,\r\n            uint256 latestSpreadRate,\r\n            uint256 token0PerShareE18,\r\n            uint256 token1PerShareE18\r\n        );\r\n\r\n    /**\r\n     * @notice Gets summary of Current box information (Total order amount of each OrderTypes)\r\n     * @param executionStatusNumber Status of execution of this box\r\n     * @param boxNumber ID of target box.\r\n     **/\r\n    function getBoxSummary(uint256 boxNumber)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 executionStatusNumber,\r\n            uint256 flexToken0InAmount,\r\n            uint256 strictToken0InAmount,\r\n            uint256 flexToken1InAmount,\r\n            uint256 strictToken1InAmount\r\n        );\r\n\r\n    /**\r\n     * @notice Gets amount of order in current open box\r\n     * @param account Target Address\r\n     * @param orderType OrderType of target order\r\n     * @return Amount of target order\r\n     **/\r\n    function getOrderAmount(address account, OrderType orderType)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @param IDOLAmount Amount of initial liquidity of iDOL to be provided\r\n     * @param settlementTokenAmount Amount of initial liquidity of the other token to be provided\r\n     * @param initialShare Initial amount of share token\r\n     **/\r\n    function initializeExchange(\r\n        uint256 IDOLAmount,\r\n        uint256 settlementTokenAmount,\r\n        uint256 initialShare\r\n    ) external;\r\n\r\n    /**\r\n     * @param timeout Revert if nextBoxNumber exceeds `timeout`\r\n     * @param recipient Recipient of swapped token. If `recipient` == address(0), recipient is msg.sender\r\n     * @param IDOLAmount Amount of token that should be approved before executing this function\r\n     * @param isLimit Whether the order restricts a large slippage\r\n     * @dev if isLimit is true and reserve0/reserve1 * 1.001 >  `rate`, the order will be executed, otherwise token will be refunded\r\n     * @dev if isLimit is false and reserve0/reserve1 * 1.05 > `rate`, the order will be executed, otherwise token will be refunded\r\n     **/\r\n    function orderBaseToSettlement(\r\n        uint256 timeout,\r\n        address recipient,\r\n        uint256 IDOLAmount,\r\n        bool isLimit\r\n    ) external;\r\n\r\n    /**\r\n     * @param timeout Revert if nextBoxNumber exceeds `timeout`\r\n     * @param recipient Recipient of swapped token. If `recipient` == address(0), recipient is msg.sender\r\n     * @param settlementTokenAmount Amount of token that should be approved before executing this function\r\n     * @param isLimit Whether the order restricts a large slippage\r\n     * @dev if isLimit is true and reserve0/reserve1 * 0.999 > `rate`, the order will be executed, otherwise token will be refunded\r\n     * @dev if isLimit is false and reserve0/reserve1 * 0.95 > `rate`, the order will be executed, otherwise token will be refunded\r\n     **/\r\n    function orderSettlementToBase(\r\n        uint256 timeout,\r\n        address recipient,\r\n        uint256 settlementTokenAmount,\r\n        bool isLimit\r\n    ) external;\r\n\r\n    /**\r\n     * @notice LP provides liquidity and receives share token\r\n     * @param timeout Revert if nextBoxNumber exceeds `timeout`\r\n     * @param IDOLAmount Amount of iDOL to be provided. The amount of the other token required is calculated based on this amount\r\n     * @param minShares Minimum amount of share token LP will receive. If amount of share token is less than `minShares`, revert the transaction\r\n     **/\r\n    function addLiquidity(\r\n        uint256 timeout,\r\n        uint256 IDOLAmount,\r\n        uint256 settlementTokenAmount,\r\n        uint256 minShares\r\n    ) external;\r\n\r\n    /**\r\n     * @notice LP burns share token and receives iDOL and the other token\r\n     * @param timeout Revert if nextBoxNumber exceeds `timeout`\r\n     * @param minBaseTokens Minimum amount of iDOL LP will receive. If amount of iDOL is less than `minBaseTokens`, revert the transaction\r\n     * @param minSettlementTokens Minimum amount of the other token LP will get. If amount is less than `minSettlementTokens`, revert the transaction\r\n     * @param sharesBurned Amount of share token to be burned\r\n     **/\r\n    function removeLiquidity(\r\n        uint256 timeout,\r\n        uint256 minBaseTokens,\r\n        uint256 minSettlementTokens,\r\n        uint256 sharesBurned\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Executes orders that are unexecuted\r\n     * @param maxOrderNum Max number of orders to be executed\r\n     **/\r\n    function executeUnexecutedBox(uint8 maxOrderNum) external;\r\n\r\n    function sendMarketFeeToLien() external;\r\n}\r\n\r\n// File: contracts/Wrapper.sol\r\n\r\n// solium-disable security/no-low-level-calls\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract Wrapper is\r\n    DeployerRole,\r\n    UseSafeMath,\r\n    UseOracle,\r\n    UseBondMaker,\r\n    UseStableCoin,\r\n    WrapperInterface\r\n{\r\n    LBTExchangeFactoryInterface internal _exchangeLBTAndIDOLFactoryContract;\r\n\r\n    constructor(\r\n        address oracleAddress,\r\n        address bondMakerAddress,\r\n        address IDOLAddress,\r\n        address exchangeLBTAndIDOLFactoryAddress\r\n    )\r\n        public\r\n        UseOracle(oracleAddress)\r\n        UseBondMaker(bondMakerAddress)\r\n        UseStableCoin(IDOLAddress)\r\n    {\r\n        _setExchangeLBTAndIDOLFactory(exchangeLBTAndIDOLFactoryAddress);\r\n    }\r\n\r\n    function setExchangeLBTAndIDOLFactory(address contractAddress)\r\n        public\r\n        onlyDeployer\r\n    {\r\n        require(\r\n            address(_exchangeLBTAndIDOLFactoryContract) == address(0),\r\n            \"contract has already given\"\r\n        );\r\n        require(\r\n            contractAddress != address(0),\r\n            \"contract should be non-zero address\"\r\n        );\r\n        _setExchangeLBTAndIDOLFactory(contractAddress);\r\n    }\r\n\r\n    function _setExchangeLBTAndIDOLFactory(address contractAddress) internal {\r\n        _exchangeLBTAndIDOLFactoryContract = LBTExchangeFactoryInterface(\r\n            contractAddress\r\n        );\r\n    }\r\n\r\n    function exchangeLBTAndIDOLFactoryAddress() public view returns (address) {\r\n        return address(_exchangeLBTAndIDOLFactoryContract);\r\n    }\r\n\r\n    function registerBondAndBondGroup(bytes[] memory fnMaps, uint256 maturity)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        bytes32[] memory bondIDs = new bytes32[](fnMaps.length);\r\n        for (uint256 j = 0; j < fnMaps.length; j++) {\r\n            bytes32 bondID = _bondMakerContract.generateBondID(\r\n                maturity,\r\n                fnMaps[j]\r\n            );\r\n            (address bondAddress, , , ) = _bondMakerContract.getBond(bondID);\r\n            if (bondAddress == address(0)) {\r\n                (bytes32 returnedBondID, , , ) = _bondMakerContract\r\n                    .registerNewBond(maturity, fnMaps[j]);\r\n                require(\r\n                    returnedBondID == bondID,\r\n                    \"system error: bondID was not generated as expected\"\r\n                );\r\n            }\r\n            bondIDs[j] = bondID;\r\n        }\r\n\r\n        uint256 bondGroupID = _bondMakerContract.registerNewBondGroup(\r\n            bondIDs,\r\n            maturity\r\n        );\r\n        emit LogRegisterBondAndBondGroup(bondGroupID, bondIDs);\r\n    }\r\n\r\n    /**\r\n     * @param solidBondID is a solid bond ID\r\n     * @param SBTAmount is solid bond token amount\r\n     * @return poolID is a pool ID\r\n     * @return IDOLAmount is iDOL amount obtained\r\n     */\r\n    function _swapSBT2IDOL(\r\n        bytes32 solidBondID,\r\n        address SBTAddress,\r\n        uint256 SBTAmount\r\n    ) internal returns (bytes32 poolID, uint256 IDOLAmount) {\r\n        // 1. approve\r\n        ERC20(SBTAddress).approve(address(_IDOLContract), SBTAmount);\r\n\r\n        // 2. mint (SBT -> iDOL)\r\n        (poolID, IDOLAmount, ) = _IDOLContract.mint(\r\n            solidBondID,\r\n            msg.sender,\r\n            SBTAmount.toUint64()\r\n        );\r\n\r\n        emit LogIssueIDOL(solidBondID, msg.sender, poolID, IDOLAmount);\r\n        return (poolID, IDOLAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice swap (LBT -> iDOL)\r\n     * @param LBTAddress is liquid bond token contract address\r\n     * @param LBTAmount is liquid bond amount\r\n     * @param timeout (uniswap)\r\n     * @param isLimit (uniswap)\r\n     */\r\n    function _swapLBT2IDOL(\r\n        address LBTAddress,\r\n        uint256 LBTAmount,\r\n        uint256 timeout,\r\n        bool isLimit\r\n    ) internal {\r\n        address _boxExchangeAddress = _exchangeLBTAndIDOLFactoryContract\r\n            .addressToExchangeLookup(LBTAddress);\r\n        // 1. approve\r\n        ERC20(LBTAddress).approve(_boxExchangeAddress, LBTAmount);\r\n\r\n        // 2. order(exchange)\r\n        BoxExchangeInterface exchange = BoxExchangeInterface(\r\n            _boxExchangeAddress\r\n        );\r\n        exchange.orderSettlementToBase(timeout, msg.sender, LBTAmount, isLimit);\r\n    }\r\n\r\n    /**\r\n     * @notice swap (iDOL -> LBT)\r\n     * @param LBTAddress is liquid bond token contract address\r\n     * @param IDOLAmount is iDOL amount\r\n     * @param timeout (uniswap)\r\n     * @param isLimit (uniswap)\r\n     */\r\n    function _swapIDOL2LBT(\r\n        address LBTAddress,\r\n        uint256 IDOLAmount,\r\n        uint256 timeout,\r\n        bool isLimit\r\n    ) internal {\r\n        address _boxExchangeAddress = _exchangeLBTAndIDOLFactoryContract\r\n            .addressToExchangeLookup(LBTAddress);\r\n\r\n        // 1. approve\r\n        _IDOLContract.transferFrom(msg.sender, address(this), IDOLAmount);\r\n        _IDOLContract.approve(_boxExchangeAddress, IDOLAmount);\r\n\r\n        // 2. order(exchange)\r\n        BoxExchangeInterface exchange = BoxExchangeInterface(\r\n            _boxExchangeAddress\r\n        );\r\n        exchange.orderBaseToSettlement(\r\n            timeout,\r\n            msg.sender,\r\n            IDOLAmount,\r\n            isLimit\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice swap (SBT -> LBT)\r\n     * @param solidBondID is a solid bond ID\r\n     * @param liquidBondID is a liquid bond ID\r\n     * @param timeout (uniswap)\r\n     * @param isLimit (uniswap)\r\n     */\r\n    function swapSBT2LBT(\r\n        bytes32 solidBondID,\r\n        bytes32 liquidBondID,\r\n        uint256 SBTAmount,\r\n        uint256 timeout,\r\n        bool isLimit\r\n    ) public override {\r\n        (address SBTAddress, , , ) = _bondMakerContract.getBond(solidBondID);\r\n\r\n        // uses: SBT\r\n        _usesERC20(SBTAddress, SBTAmount);\r\n\r\n        // 1. SBT -> LBT(exchange)\r\n        _swapSBT2LBT(\r\n            solidBondID,\r\n            SBTAddress,\r\n            liquidBondID,\r\n            SBTAmount,\r\n            timeout,\r\n            isLimit\r\n        );\r\n    }\r\n\r\n    function _swapSBT2LBT(\r\n        bytes32 solidBondID,\r\n        address SBTAddress,\r\n        bytes32 liquidBondID,\r\n        uint256 SBTAmount,\r\n        uint256 timeout,\r\n        bool isLimit\r\n    ) internal {\r\n        // 1. swap SBT -> IDOL)\r\n        (, uint256 IDOLAmount) = _swapSBT2IDOL(\r\n            solidBondID,\r\n            SBTAddress,\r\n            SBTAmount\r\n        );\r\n\r\n        // 2. swap IDOL -> LBT(exchange)\r\n        (address LBTAddress, , , ) = _bondMakerContract.getBond(liquidBondID);\r\n        _swapIDOL2LBT(LBTAddress, IDOLAmount, timeout, isLimit);\r\n    }\r\n\r\n    /**\r\n     * @notice find a solid bond in given bond group\r\n     * @param bondGroupID is a bond group ID\r\n     */\r\n    function _findSBTAndLBTBondGroup(uint256 bondGroupID)\r\n        internal\r\n        view\r\n        returns (bytes32 solidBondID, bytes32[] memory liquidBondIDs)\r\n    {\r\n        (bytes32[] memory bondIDs, ) = _bondMakerContract.getBondGroup(\r\n            bondGroupID\r\n        );\r\n        bytes32 solidID = bytes32(0);\r\n        bytes32[] memory liquidIDs = new bytes32[](bondIDs.length - 1);\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < bondIDs.length; i++) {\r\n            (, , uint256 solidStrikePrice, ) = _bondMakerContract.getBond(\r\n                bondIDs[i]\r\n            );\r\n            if (solidStrikePrice != 0) {\r\n                // A solid bond is found.\r\n                solidID = bondIDs[i];\r\n            } else {\r\n                liquidIDs[j++] = bondIDs[i];\r\n            }\r\n        }\r\n        return (solidID, liquidIDs);\r\n    }\r\n\r\n    function _usesERC20(address erc20Address, uint256 amount) internal {\r\n        ERC20 erc20Contract = ERC20(erc20Address);\r\n        erc20Contract.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function _reductionERC20(address erc20Address, uint256 amount) internal {\r\n        ERC20 erc20Contract = ERC20(erc20Address);\r\n        erc20Contract.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function _findBondAddressListInBondGroup(uint256 bondGroupID)\r\n        internal\r\n        view\r\n        returns (address[] memory bondAddressList)\r\n    {\r\n        (bytes32[] memory bondIDs, ) = _bondMakerContract.getBondGroup(\r\n            bondGroupID\r\n        );\r\n        address[] memory bondAddreses = new address[](bondIDs.length);\r\n        for (uint256 i = 0; i < bondIDs.length; i++) {\r\n            (address bondTokenAddress, , , ) = _bondMakerContract.getBond(\r\n                bondIDs[i]\r\n            );\r\n            bondAddreses[i] = bondTokenAddress;\r\n        }\r\n        return bondAddreses;\r\n    }\r\n\r\n    /**\r\n     * @notice ETH -> LBT & iDOL\r\n     * @param bondGroupID is a bond group ID\r\n     * @return poolID is a pool ID\r\n     * @return IDOLAmount is iDOL amount obtained\r\n     */\r\n    function issueLBTAndIDOL(uint256 bondGroupID)\r\n        public\r\n        override\r\n        payable\r\n        returns (\r\n            bytes32,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (\r\n            bytes32 solidBondID,\r\n            bytes32[] memory liquidBondIDs\r\n        ) = _findSBTAndLBTBondGroup(bondGroupID); // find SBT & LBT\r\n        require(\r\n            solidBondID != bytes32(0),\r\n            \"solid bond is not found in given bond group\"\r\n        );\r\n\r\n        // 1. ETH -> SBT & LBTs\r\n        uint256 bondAmount = _bondMakerContract.issueNewBonds{value: msg.value}(\r\n            bondGroupID\r\n        );\r\n\r\n        // 2. SBT -> IDOL\r\n        (address SBTAddress, , , ) = _bondMakerContract.getBond(solidBondID);\r\n        (bytes32 poolID, uint256 IDOLAmount) = _swapSBT2IDOL(\r\n            solidBondID,\r\n            SBTAddress,\r\n            bondAmount\r\n        );\r\n\r\n        // 3. IDOL reduction.\r\n        //_reductionERC20(address(_IDOLContract), IDOLAmount);\r\n\r\n        // 4. LBTs reduction.\r\n        for (uint256 i = 0; i < liquidBondIDs.length; i++) {\r\n            (address liquidAddress, , , ) = _bondMakerContract.getBond(\r\n                liquidBondIDs[i]\r\n            );\r\n            _reductionERC20(liquidAddress, bondAmount);\r\n            LogIssueLBT(liquidBondIDs[i], msg.sender, bondAmount);\r\n        }\r\n        return (poolID, bondAmount, IDOLAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice ETH -> iDOL\r\n     * @param bondGroupID is a bond group ID\r\n     * @param timeout (uniswap)\r\n     * @param isLimit (uniswap)\r\n     */\r\n    function issueIDOLOnly(\r\n        uint256 bondGroupID,\r\n        uint256 timeout,\r\n        bool isLimit\r\n    ) public override payable {\r\n        // 0. uses: ETH\r\n        (\r\n            bytes32 solidBondID,\r\n            bytes32[] memory liquidBondIDs\r\n        ) = _findSBTAndLBTBondGroup(bondGroupID); // find SBT & LBT\r\n        require(\r\n            solidBondID != bytes32(0),\r\n            \"solid bond is not found in given bond group\"\r\n        );\r\n\r\n        // 1. ETH -> SBT & LBTs\r\n        uint256 bondAmount = _bondMakerContract.issueNewBonds{value: msg.value}(\r\n            bondGroupID\r\n        );\r\n\r\n        // 2. SBT -> IDOL\r\n        (address SBTAddress, , , ) = _bondMakerContract.getBond(solidBondID);\r\n        _swapSBT2IDOL(solidBondID, SBTAddress, bondAmount);\r\n\r\n        // 3. IDOL reduction.\r\n        //_reductionERC20(address(_IDOLContract), IDOLAmount);\r\n\r\n        // 4. LBTs -> IDOL(+exchange)\r\n        for (uint256 i = 0; i < liquidBondIDs.length; i++) {\r\n            (address liquidAddress, , , ) = _bondMakerContract.getBond(\r\n                liquidBondIDs[i]\r\n            );\r\n            // LBT -> IDOL(+exchange)\r\n            _swapLBT2IDOL(liquidAddress, bondAmount, timeout, isLimit);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice ETH -> LBT\r\n     * @param bondGroupID is a bond group ID\r\n     * @param liquidBondID is a liquid bond ID\r\n     * @param timeout (uniswap)\r\n     * @param isLimit (uniswap)\r\n     */\r\n    function issueLBTOnly(\r\n        uint256 bondGroupID,\r\n        bytes32 liquidBondID,\r\n        uint256 timeout,\r\n        bool isLimit\r\n    ) public override payable {\r\n        (\r\n            bytes32 solidBondID,\r\n            bytes32[] memory liquidBondIDs\r\n        ) = _findSBTAndLBTBondGroup(bondGroupID); // find SBT & LBT\r\n        require(\r\n            solidBondID != bytes32(0),\r\n            \"solid bond is not found in given bond group\"\r\n        );\r\n\r\n        // 1. ETH -> SBT & LBTs\r\n        uint256 bondAmount = _bondMakerContract.issueNewBonds{value: msg.value}(\r\n            bondGroupID\r\n        );\r\n\r\n        // 2. SBT -> IDOL\r\n        (address SBTAddress, , , ) = _bondMakerContract.getBond(solidBondID);\r\n        (, uint256 IDOLAmount) = _swapSBT2IDOL(\r\n            solidBondID,\r\n            SBTAddress,\r\n            bondAmount\r\n        );\r\n\r\n        // 3. IDOL -> LBT(+exchange)\r\n        (address LBTAddress, , , ) = _bondMakerContract.getBond(liquidBondID);\r\n        _swapIDOL2LBT(LBTAddress, IDOLAmount, timeout, isLimit);\r\n\r\n        // 4. LBTs reduction\r\n        for (uint256 i = 0; i < liquidBondIDs.length; i++) {\r\n            (address liquidAddress, , , ) = _bondMakerContract.getBond(\r\n                liquidBondIDs[i]\r\n            );\r\n            _reductionERC20(liquidAddress, bondAmount);\r\n            LogIssueLBT(liquidBondIDs[i], msg.sender, bondAmount);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondMakerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"IDOLAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeLBTAndIDOLFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogIssueIDOL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bondID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogIssueLBT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"bondIDs\",\"type\":\"bytes32[]\"}],\"name\":\"LogRegisterBondAndBondGroup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"exchangeLBTAndIDOLFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLimit\",\"type\":\"bool\"}],\"name\":\"issueIDOLOnly\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"}],\"name\":\"issueLBTAndIDOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondGroupID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"liquidBondID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLimit\",\"type\":\"bool\"}],\"name\":\"issueLBTOnly\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"fnMaps\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"registerBondAndBondGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setExchangeLBTAndIDOLFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"solidBondID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"liquidBondID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"SBTAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLimit\",\"type\":\"bool\"}],\"name\":\"swapSBT2LBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Wrapper","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"000000000000000000000000120a078fdc516a1a98bbecb9e961f8741ac7ac8200000000000000000000000001784ee895107564096279f4da016e2fab636edb0000000000000000000000007c73cc13b6054de69489a8a1d15ad254a7641c070000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8dd6f680af5213043ee33bf42d0ee14644c59ed2affdfa3001b546a012e09cb7"}]}