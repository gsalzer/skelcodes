{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\n\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n\ncontract PriceChainLink {\n  address public owner;\n\tAggregatorV3Interface public priceFeed;\n\n\tmodifier onlyOwner() {\n    require(msg.sender == owner, \"Must be owner!\");\n    _;\n  }\n\n  constructor (address _priceFeed) public {\n\t\towner = msg.sender;\n\t\tpriceFeed = AggregatorV3Interface(_priceFeed);\n\t}\n\n\tfunction setController(address _priceFeed) public onlyOwner {\n\t\tpriceFeed = AggregatorV3Interface(_priceFeed);\n\t}\n\n\tfunction lastPrice() public view returns (uint256 price) {\n\t\t(, int answer,,uint timeStamp,) = priceFeed.latestRoundData();\n\t\tuint256 decimals = priceFeed.decimals() >= 2 ? uint256(priceFeed.decimals()) - 2 : 0; // -2 to get price with 2 decimals, ex. 357.39\n\t\t// If the round is not complete yet, timestamp is 0\n\t\trequire(timeStamp > 0, \"Round not complete\");\n\t\treturn uint256(answer) / (10 ** decimals);\n\t}\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PriceChainLink","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}