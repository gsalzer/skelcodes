{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-08-31\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not authorized operation\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Address shouldn't be zero\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Simple ERC20 Token example, with mintable token creation only during the deployement of the token contract */\r\n\r\ncontract TokenContract is Ownable{\r\n  using SafeMath for uint256;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n  address public tokenOwner;\r\n  address private ico;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  mapping(address => bool) public vestedlist;\r\n\r\n  event SetICO(address indexed _ico);\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event UnlockToken();\r\n  event LockToken();\r\n  event Burn();\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event addedToVestedlist(address indexed _vestedAddress);\r\n  event removedFromVestedlist(address indexed _vestedAddress);\r\n\r\n  \r\n  bool public mintingFinished = false;\r\n  bool public locked = true;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n  \r\n  modifier canTransfer() {\r\n    require(!locked || msg.sender == owner || msg.sender == ico);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyAuthorized() {\r\n    require(msg.sender == owner || msg.sender == ico);\r\n    _;\r\n  }\r\n\r\n\r\n  constructor(string memory _name, string memory  _symbol, uint8 _decimals) public {\r\n    require (_decimals != 0);\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    totalSupply = 0;\r\n    balances[msg.sender] = totalSupply;\r\n    emit Transfer(address(0), msg.sender, totalSupply);\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) public onlyAuthorized canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(this), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyAuthorized canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\r\n    require(_to != address(0));\r\n\trequire (!isVestedlisted(msg.sender));\r\n    require(_value <= balances[msg.sender]);\r\n    require (msg.sender != address(this));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function burn(address _who, uint256 _value) onlyAuthorized public returns (bool){\r\n    require(_who != address(0));\r\n    \r\n    totalSupply = totalSupply.sub(_value);\r\n    balances[_who] = balances[_who].sub(_value);\r\n    emit Burn();\r\n    emit Transfer(_who, address(0), _value);\r\n    return true;\r\n  }\r\n  \r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFromERC20Contract(address _to, uint256 _value) public onlyOwner returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[address(this)]);\r\n    balances[address(this)] = balances[address(this)].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(address(this), _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function unlockToken() public onlyAuthorized returns (bool) {\r\n    locked = false;\r\n    emit UnlockToken();\r\n    return true;\r\n  }\r\n\r\n  function lockToken() public onlyAuthorized returns (bool) {\r\n    locked = true;\r\n    emit LockToken();\r\n    return true;\r\n  }\r\n  \r\n  function setICO(address _icocontract) public onlyOwner returns (bool) {\r\n    require(_icocontract != address(0));\r\n    ico = _icocontract;\r\n    emit SetICO(_icocontract);\r\n    return true;\r\n  }\r\n\r\n    /**\r\n     * @dev Adds list of addresses to Vestedlist. Not overloaded due to limitations with truffle testing.\r\n     * @param _vestedAddress Addresses to be added to the Vestedlist\r\n     */\r\n    function addToVestedlist(address[] memory _vestedAddress) public onlyOwner {\r\n        for (uint256 i = 0; i < _vestedAddress.length; i++) {\r\n            if (vestedlist[_vestedAddress[i]]) continue;\r\n            vestedlist[_vestedAddress[i]] = true;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Removes single address from Vestedlist.\r\n     * @param _vestedAddress Address to be removed to the Vestedlist\r\n     */\r\n    function removeFromVestedlist(address[] memory _vestedAddress) public onlyOwner {\r\n        for (uint256 i = 0; i < _vestedAddress.length; i++) {\r\n            if (!vestedlist[_vestedAddress[i]]) continue;\r\n            vestedlist[_vestedAddress[i]] = false;\r\n        }\r\n    }\r\n\r\n\r\n    function isVestedlisted(address _vestedAddress) internal view returns (bool) {\r\n      return (vestedlist[_vestedAddress]);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title PullPayment\r\n * @dev Base contract supporting async send for pull payments. Inherit from this\r\n * contract and use asyncSend instead of send.\r\n */\r\ncontract PullPayment {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public payments;\r\n\r\n    uint256 public totalPayments;\r\n\r\n    /**\r\n    * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n    * @param dest The destination address of the funds.\r\n    * @param amount The amount to transfer.\r\n    */\r\n    function asyncSend(address dest, uint256 amount) internal{\r\n        payments[dest] = payments[dest].add(amount);\r\n        totalPayments = totalPayments.add(amount);\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw accumulated balance, called by payee.\r\n    */\r\n    function withdrawPayments() internal{\r\n        address payable payee = msg.sender;\r\n        uint256 payment = payments[payee];\r\n\r\n        require(payment != 0);\r\n        require(address(this).balance >= payment);\r\n\r\n        totalPayments = totalPayments.sub(payment);\r\n        payments[payee] = 0;\r\n\r\n        assert(payee.send(payment));\r\n    }\r\n}\r\n\r\n/**\r\n * @title ICO\r\n * @dev ICO is a base contract for managing a public token sale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for a public sale. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of public token sales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\n\r\ncontract ICO is PullPayment, Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  TokenContract public token;\r\n\r\n  // Address where funds are collected\r\n  address payable public wallet;\r\n\r\n  // Address to receive project tokens\r\n  address public projectOwner;\r\n\r\n  // Refund period if the ICO failed\r\n  uint256 public refundPeriod;\r\n\r\n  // How many token units a buyer gets per ETH/wei during Pre sale. The ETH price is fixed at 400$ during Pre sale.\r\n  uint256 public Presalerate = 0.00025 ether;   //  1 DCASH Token = 0.10 $ = 0.00025 Ether\r\n\r\n  // How many token units a buyer gets per ETH/wei during ICO. The ETH price is fixed at 400$ during the ICO to guarantee the 30 % discount rate with the presale rate\r\n  uint256 public Icorate = 0.000325 ether;    //  1 DCASH Token = 0.13 $ = 0.000325 Ether\r\n \r\n  // Amount of ETH/Wei raised during the ICO period\r\n  uint256 public EthRaisedIco;\r\n\r\n  // Amount of ETH/wei raised during the Pre sale\r\n  uint256 public EthRaisedpresale;\r\n\r\n  // Token amount distributed during the ICO period\r\n  uint256 public tokenDistributed;\r\n\r\n  // Token amount distributed during the Pre sale\r\n  uint256 public tokenDistributedpresale;\r\n\r\n  // investors part according to the whitepaper 60 % (50% ICO + 10% PreSale) \r\n  uint256 public investors = 60;\r\n  \r\n  // Min purchase size of incoming ETH during pre sale period fixed at 2 ETH valued at 800 $ \r\n  uint256 public constant MIN_PURCHASE_Presale = 2 ether;\r\n\r\n  // Minimum purchase size of incoming ETH during ICO at 1$\r\n  uint256 public constant MIN_PURCHASE_ICO = 0.0025 ether;\r\n\r\n  // Hardcap cap in Ether raised during Pre sale fixed at $ 200 000 for ETH valued at 440$ \r\n  uint256 public PresaleSalemaxCap1 = 500 ether;\r\n\r\n  // Softcap funding goal during ICO in Ether raised fixed at $ 200 000 for ETH valued at 400$.\r\n  uint256 public ICOminCap = 500 ether;\r\n\r\n  // Hardcap goal in Ether during ICO in Ether raised fixed at $ 13 000 000 for ETH valued at 400$\r\n  uint256 public ICOmaxCap = 32500 ether;\r\n\r\n  // presale start/end\r\n  bool public presale = true;    // State of the ongoing sales Pre sale \r\n  \r\n  // ICO start/end\r\n  bool public ico = false;         // State of the ongoing sales ICO period\r\n\r\n  // Balances in incoming Ether\r\n  mapping(address => uint256) balances;\r\n  \r\n  // Bool to check that the Presalesale period is launch only one time\r\n  bool public statepresale = false;\r\n  \r\n  // Bool to check that the ico is launch only one time\r\n  bool public stateico = true;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event NewContract(address indexed _from, address indexed _contract, string _type);\r\n\r\n  /**\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the ERC20 Token\r\n   * @param _project Address where the Token of the project will be sent\r\n   */\r\n  constructor(address payable _wallet, address _token, address _project) public {\r\n    require(_wallet != address(0) && _token != address(0) && _project != address(0));\r\n    wallet = _wallet;\r\n    token = TokenContract(_token);    \r\n    projectOwner = _project;\r\n\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // ICO external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  receive() external payable {\r\n     if (presale) {\r\n      buypresaleTokens(msg.sender);\r\n    }\r\n\r\n    if (ico) {\r\n      buyICOTokens(msg.sender);\r\n    }\r\n  }\r\n\r\n  function buypresaleTokens (address _beneficiary) internal {\r\n    require(_beneficiary != address(0) , \"Failed the wallet is not allowed\");  \r\n    require(msg.value >= MIN_PURCHASE_Presale, \"Failed the amount is not respecting the minimum deposit of Presale \");\r\n    // Check that if investors sends more than the MIN_PURCHASE_Presale\r\n    uint256 weiAmount = msg.value;\r\n\t// According to the whitepaper the backers who invested on Presale Sale have not possibilities to be refunded. Their ETH Balance is updated to zero value.\r\n\tbalances[msg.sender] = 0;\r\n    // calculate token amount to be created\r\n    uint256 tokensTocreate = _getTokenpresaleAmount(weiAmount);\r\n    _getRemainingTokenStock(_beneficiary, tokensTocreate);\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokensTocreate);\r\n\r\n    // update state\r\n    EthRaisedpresale = EthRaisedpresale.add(weiAmount);\r\n    tokenDistributedpresale = tokenDistributedpresale.add(tokensTocreate);\r\n\r\n    // If Presale Sale softcap is reached then the ether on the ICO contract are send to project wallet\r\n    if (EthRaisedpresale <= PresaleSalemaxCap1) {\r\n      wallet.transfer(address(this).balance);\r\n    } else {\r\n      //If PresaleSalemaxCap1 is reached then the presale is closed\r\n      if (EthRaisedpresale >= PresaleSalemaxCap1) {\r\n        presale = false;\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyICOTokens(address _beneficiary) internal {\r\n\trequire(_beneficiary != address(0) , \"Failed the wallet is not allowed\");  \r\n    require(msg.value >= MIN_PURCHASE_ICO, \"Failed the amount is not respecting the minimum deposit of ICO\");\r\n    // Check that if investors sends more than the MIN_PURCHASE_ICO\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokensTocreate = _getTokenAmount(weiAmount);\r\n\r\n    // Look if there is token on the contract if he is not create the amount of token\r\n    _getRemainingTokenStock(_beneficiary, tokensTocreate);\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokensTocreate);\r\n\r\n    // update state\r\n    EthRaisedIco = EthRaisedIco.add(weiAmount);\r\n\r\n    // Creation of the token and transfer to beneficiary\r\n    tokenDistributed = tokenDistributed.add(tokensTocreate);\r\n\r\n    // Update the balance of benificiary\r\n    balances[_beneficiary] = balances[_beneficiary].add(weiAmount);\r\n\r\n    uint256 totalEthRaised = EthRaisedIco.add(EthRaisedpresale);\r\n\r\n    // If ICOminCap is reached then the ether on the ICO contract are send to project wallet\r\n    if (totalEthRaised >= ICOminCap && totalEthRaised <= ICOmaxCap) {\r\n      wallet.transfer(address(this).balance);\r\n    }\r\n\r\n    //If ICOmaxCap is reached then the ICO close\r\n    if (totalEthRaised >= ICOmaxCap) {\r\n      ico = false;\r\n    }\r\n  }\r\n\r\n  /* ADMINISTRATIVE FUNCTIONS */\r\n\r\n  // Update the ETH ICO rate  \r\n  function updateETHIcoRate(uint256 _EtherAmount) public onlyOwner {\r\n    Icorate = (_EtherAmount).mul(1 wei);\r\n  }\r\n  \r\n    // Update the ETH PreSale rate  \r\n  function updateETHPresaleRate(uint256 _EtherAmount) public onlyOwner {\r\n    Presalerate = (_EtherAmount).mul(1 wei);\r\n  }\r\n\r\n    // Update the ETH ICO MAX CAP  \r\n  function updateICOMaxcap(uint256 _EtherAmount) public onlyOwner {\r\n    ICOmaxCap = (_EtherAmount).mul(1 wei);\r\n  }\r\n\r\n  // start presale\r\n  function startpresale() public onlyOwner {\r\n    require(statepresale && !ico,\"Failed the Presale was already started or another sale is ongoing\");\r\n    presale = true;\r\n    statepresale = false;\r\n    token.lockToken();\r\n  }\r\n\r\n  // close Presale\r\n  function closepresale() public onlyOwner {\r\n    require(presale && !ico, \"Failed it was already closed\");\r\n    presale = false;\r\n  }\r\n \r\n // start ICO\r\n  function startICO() public onlyOwner {\r\n\r\n    // bool to see if the ico has already been launched and  presale is not in progress\r\n    require(stateico && !presale, \"Failed the ICO was already started or another salae is ongoing\");\r\n\r\n    refundPeriod = now.add(2764800);\r\n      // 32 days in seconds ==> 32*24*3600\r\n\r\n    ico = true;\r\n    token.lockToken();\r\n\r\n    // Put the bool to False to block the start of this function again\r\n    stateico = false;\r\n  }\r\n\r\n  // close ICO\r\n  function closeICO() public onlyOwner {\r\n    require(!presale && ico,\"Failed it was already closed\");\r\n    ico = false;\r\n  }\r\n\r\n  /* When ICO MIN_CAP is not reach the smart contract will be credited to make refund possible by backers\r\n   * 1) backer call the \"refund\" function of the ICO contract\r\n   * 2) backer call the \"reimburse\" function of the ICO contract to get a refund in ETH\r\n   */\r\n  function refund() public {\r\n    require(_refundPeriod());\r\n    require(balances[msg.sender] > 0);\r\n\r\n    uint256 ethToSend = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    asyncSend(msg.sender, ethToSend);\r\n  }\r\n\r\n  function reimburse() public {\r\n    require(_refundPeriod());\r\n    withdrawPayments();\r\n    EthRaisedIco = address(this).balance;\r\n  }\r\n\r\n  // Function to pay out if the ICO is successful\r\n  function WithdrawFunds() public onlyOwner {\r\n    require(!ico && !presale, \"Failed a sales is ongoing\");\r\n    require(now > refundPeriod.add(7776000) || _isSuccessful(), \"Failed the refund period is not finished\");\r\n    //  90 days in seconds ==> 2*30*24*3600\r\n    if (_isSuccessful()) {\r\n      uint256 _tokensProjectToSend = _getTokenAmountToDistribute(100 - investors);\r\n      _getRemainingTokenStock(projectOwner, _tokensProjectToSend);\r\n      token.unlockToken();\r\n    } else {\r\n      wallet.transfer(EthRaisedIco);\r\n    }\r\n    \r\n    // burn in case that there is some not distributed tokens on the contract\r\n    if (token.balanceOf(address(this)) > 0) {\r\n      uint256 totalDistributedToken = tokenDistributed;\r\n      token.burn(address(this),totalDistributedToken);\r\n    }\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n\r\n  // Calcul the amount of token the benifiaciary will get by buying during Presale \r\n  function _getTokenpresaleAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n    uint256 _amountToSend = _weiAmount.div(Presalerate).mul(10 ** 10);\r\n    return _amountToSend;\r\n  }\r\n  \r\n  // Calcul the amount of token the benifiaciary will get by buying during Sale\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n    uint256 _amountToSend = _weiAmount.div(Icorate).mul(10 ** 10);\r\n    return _amountToSend;\r\n  }\r\n\r\n  // Calcul the token amount to distribute in the forwardFunds for the project (team, bounty ...)\r\n  function _getTokenAmountToDistribute(uint _part) internal view returns (uint256) {\r\n    uint256 _delivredTokens = tokenDistributed.add(tokenDistributedpresale);\r\n    return (_part.mul(_delivredTokens).div(investors));\r\n\r\n  }\r\n\r\n  // verify the remaining token stock & deliver tokens to the beneficiary\r\n  function _getRemainingTokenStock(address _beneficiary, uint256 _tokenAmount) internal {\r\n    if (token.balanceOf(address(this)) >= _tokenAmount) {\r\n      require(token.transfer(_beneficiary, _tokenAmount));\r\n    }\r\n    else {\r\n      if (token.balanceOf(address(this)) == 0) {\r\n        require(token.mint(_beneficiary, _tokenAmount));\r\n      }\r\n      else {\r\n        uint256 remainingTokenTocreate = _tokenAmount.sub(token.balanceOf(address(this)));\r\n        require(token.transfer(_beneficiary, token.balanceOf(address(this))));\r\n        require(token.mint(_beneficiary, remainingTokenTocreate));\r\n      }\r\n    }\r\n  }\r\n\r\n  // Function to check the refund period\r\n  function _refundPeriod() internal view returns (bool){\r\n    require(!_isSuccessful(),\"Failed refund period is not opened\");\r\n    return ((!ico && !stateico) || (now > refundPeriod));\r\n  }\r\n\r\n  // check if the ico is successful\r\n  function _isSuccessful() internal view returns (bool){\r\n    return (EthRaisedIco.add(EthRaisedpresale) >= ICOminCap);\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"NewContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EthRaisedIco\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EthRaisedpresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICOmaxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICOminCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Icorate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PURCHASE_ICO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PURCHASE_Presale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PresaleSalemaxCap1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Presalerate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closepresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reimburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startpresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateico\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statepresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract TokenContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDistributedpresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_EtherAmount\",\"type\":\"uint256\"}],\"name\":\"updateETHIcoRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_EtherAmount\",\"type\":\"uint256\"}],\"name\":\"updateETHPresaleRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_EtherAmount\",\"type\":\"uint256\"}],\"name\":\"updateICOMaxcap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ICO","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dded117f6d7197912bdf8158bc161694cef19fc5000000000000000000000000cf8f32e032f432b02393636b2092a6bef975fbf900000000000000000000000013bf02ec805b4dab043fe003224c518874006ba1","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f018810e0fd774f859bae9730f51529a368c8daaebc7280b9733b8bcc6a1fa9a"}]}