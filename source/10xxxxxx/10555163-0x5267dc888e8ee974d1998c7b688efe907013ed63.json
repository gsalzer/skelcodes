{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract DeFi {    \r\n    address EthereumNodes; \r\n\t\r\n    constructor() public { \r\n        EthereumNodes = msg.sender;\r\n    }\r\n    modifier restricted() {\r\n        require(msg.sender == EthereumNodes);\r\n        _;\r\n    } \r\n\t\r\n}\r\n\r\ncontract Database is DeFi {\r\n\t\r\naddress public ethbox = 0xBB508Db887e15be26366D09C7fa8074FE891b430;\r\n\t\r\n   uint256 public idnumber;\r\n   uint256 public nominal;\r\n   uint256 public totalleft;\r\n   uint256 public totalright;\r\n   \r\n   uint256 private userside;\r\n   \r\n   mapping(uint256 => address) \t\tpublic user_address;\r\n   mapping(uint256 => uint256) \t\tpublic user_balance;\r\n   mapping(uint256 => uint256) \t\tpublic user_side;\r\n   mapping(uint256 => uint256) \t\tpublic user_sidenumber;\r\n   \r\n   mapping(uint256 => address) \t\tpublic leftaddress;\r\n   mapping(uint256 => address) \t\tpublic rightaddress;\r\n   \r\n       constructor() public {     \t \t\r\n        idnumber \t\t\t\t= 0;\r\n\t\tnominal \t\t\t\t= 0.01 ether;\r\n\t\t\r\n    }\r\n   \r\n   \r\n   function () public payable {\r\n\t   \r\n\tif(msg.value == nominal)   {   \r\n\t\tuint256 user_id\t\t\t= add(idnumber, 1);\r\n\r\n\r\n\t\tuser_address[user_id] \t= msg.sender;\r\n\t\tuser_balance[user_id]\t= msg.value;\t\t\r\n\t\r\n\t\tif (userside == 0 ) { // 0 = Left 1 = Right\r\n\t\tuser_side[user_id] \t\t\t= 0;\r\n\t\tuint256 user_left\t\t\t= add(totalleft, 1);\r\n\t\t\r\n\t\tleftaddress[user_left]\t\t= msg.sender;\r\n\t\tuser_sidenumber[user_id] \t= user_left;\t\t\r\n\t\t\r\n\t\ttotalleft++;\r\n\t\tuserside = 1;\r\n\t\t\r\n\t\t} else { \t\r\n\t\tuser_side[user_id] \t\t\t= 1;\r\n\t\tuint256 user_right\t\t\t= add(totalright, 1);\r\n\t\t\r\n\t\trightaddress[user_right]\t= msg.sender;\r\n\t\tuser_sidenumber[user_id] \t= user_right;\t\r\n\t\t\r\n\t\tuserside = 0; \r\n\t\ttotalright++;\r\n\t\t}\r\n\t\t\r\n\t\tidnumber++;\t\r\n\t\t\r\n\t\tethbox.transfer(msg.value);\r\n\t\t}\t\r\n\t\telse { revert(); }\r\n    }\r\n\t\r\n\t\tfunction change(uint256 amount) public restricted {\r\n\t\t\tuint256 nominalupdate = amount;\r\n\t\t\tnominal \t= nominalupdate;\r\n\t\t}\r\n\t\t\r\n\t\tfunction changeethbox(address newaddress) public restricted {\r\n\t\t\taddress ethboxupdate = newaddress;\r\n\t\t\tethbox \t= ethboxupdate;\r\n\t\t}\r\n\t\t\r\n\t\tfunction reset0() public restricted {\r\n\t\t\t\r\n\t\t\tfor(uint256 i = 1; i < add(1, totalleft); i++) {   \r\n\t\t\tleftaddress[i]\t= 0x0000000000000000000000000000000000000000;\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\ttotalleft\t= 0;\r\n\t\t\t\r\n\t\t\tfor(uint256 x = 1; x < add(1, totalright); x++) {   \r\n\t\t\trightaddress[x]\t= 0x0000000000000000000000000000000000000000;\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\ttotalright\t= 0;\r\n\t\t\t\r\n\t\t\tfor(uint256 y = 1; y < add(1, idnumber); y++) {   \r\n\t\t\tuser_address[y] \t\t\t= 0x0000000000000000000000000000000000000000;\r\n\t\t\tuser_balance[y]\t\t\t\t= 0;\r\n\t\t\tuser_side[y] \t\t\t\t= 0;\r\n\t\t\tuser_sidenumber[y] \t\t\t= 0;\t\r\n\t\t\t} \r\n\t\t\r\n\t\t\tidnumber\t= 0;\r\n\t\t\tuserside\t= 0;\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\t/*==============================\r\n    =      SAFE MATH FUNCTIONS     =\r\n    ==============================*/  \t\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b; \r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); \r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leftaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethbox\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_sidenumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset0\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_side\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"change\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newaddress\",\"type\":\"address\"}],\"name\":\"changeethbox\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rightaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalright\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"idnumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalleft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Database","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://685e3ece8365cd47566e2fcc9795e9cd9509df05248b00efcfe5e7ac80f48c12"}]}