{"status":"1","message":"OK","result":[{"SourceCode":"{\"Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @title Initializable\\r\\n *\\r\\n * @dev Helper contract to support initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n */\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract when upgrade EVEN times.\\r\\n   */\\r\\n  modifier initializerEven() {\\r\\n    require(initializing || isConstructor() || initialized, \\\"Contract instance has already been initialized EVEN times\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = false;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    address self = address(this);\\r\\n    uint256 cs;\\r\\n    assembly { cs := extcodesize(self) }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\\r\\n\\r\\n\\r\\ncontract Governable is Initializable {\\r\\n    address public governor;\\r\\n\\r\\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\\r\\n\\r\\n    /**\\r\\n     * @dev Contract initializer.\\r\\n     * called once by the factory at time of deployment\\r\\n     */\\r\\n    function initialize(address governor_) virtual public initializer {\\r\\n        governor = governor_;\\r\\n        emit GovernorshipTransferred(address(0), governor);\\r\\n    }\\r\\n\\r\\n    modifier governance() {\\r\\n        require(msg.sender == governor);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current governor to relinquish control of the contract.\\r\\n     * @notice Renouncing to governorship will leave the contract without an governor.\\r\\n     * It will not be possible to call the functions with the `governance`\\r\\n     * modifier anymore.\\r\\n     */\\r\\n    function renounceGovernorship() public governance {\\r\\n        emit GovernorshipTransferred(governor, address(0));\\r\\n        governor = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\\r\\n     * @param newGovernor The address to transfer governorship to.\\r\\n     */\\r\\n    function transferGovernorship(address newGovernor) public governance {\\r\\n        _transferGovernorship(newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers control of the contract to a newGovernor.\\r\\n     * @param newGovernor The address to transfer governorship to.\\r\\n     */\\r\\n    function _transferGovernorship(address newGovernor) internal {\\r\\n        require(newGovernor != address(0));\\r\\n        emit GovernorshipTransferred(governor, newGovernor);\\r\\n        governor = newGovernor;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract Configurable is Governable {\\r\\n\\r\\n    mapping (bytes32 =\\u003e uint) internal config;\\r\\n    \\r\\n    function getConfig(bytes32 key) public view returns (uint) {\\r\\n        return config[key];\\r\\n    }\\r\\n    function getConfig(bytes32 key, uint index) public view returns (uint) {\\r\\n        return config[bytes32(uint(key) ^ index)];\\r\\n    }\\r\\n    function getConfig(bytes32 key, address addr) public view returns (uint) {\\r\\n        return config[bytes32(uint(key) ^ uint(addr))];\\r\\n    }\\r\\n\\r\\n    function _setConfig(bytes32 key, uint value) internal {\\r\\n        if(config[key] != value)\\r\\n            config[key] = value;\\r\\n    }\\r\\n    function _setConfig(bytes32 key, uint index, uint value) internal {\\r\\n        _setConfig(bytes32(uint(key) ^ index), value);\\r\\n    }\\r\\n    function _setConfig(bytes32 key, address addr, uint value) internal {\\r\\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\\r\\n    }\\r\\n    \\r\\n    function setConfig(bytes32 key, uint value) external governance {\\r\\n        _setConfig(key, value);\\r\\n    }\\r\\n    function setConfig(bytes32 key, uint index, uint value) external governance {\\r\\n        _setConfig(bytes32(uint(key) ^ index), value);\\r\\n    }\\r\\n    function setConfig(bytes32 key, address addr, uint value) external governance {\\r\\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\\r\\n    }\\r\\n}\\r\\n\"},\"SMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n//pragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./SToken.sol\\\";\\r\\nimport \\\"./Governable.sol\\\";\\r\\n\\r\\nimport \\\"./TransferHelper.sol\\\";\\r\\n\\r\\n\\r\\ninterface Minter {\\r\\n    event Minted(address indexed recipient, address reward_contract, uint minted);\\r\\n\\r\\n    function token() external view returns (address);\\r\\n    function controller() external view returns (address);\\r\\n    function minted(address, address) external view returns (uint);\\r\\n    function allowed_to_mint_for(address, address) external view returns (bool);\\r\\n    \\r\\n    function mint(address gauge) external;\\r\\n    function mint_many(address[8] calldata gauges) external;\\r\\n    function mint_for(address gauge, address _for) external;\\r\\n    function toggle_approve_mint(address minting_user) external;\\r\\n}\\r\\n\\r\\ninterface LiquidityGauge {\\r\\n    event Deposit(address indexed provider, uint value);\\r\\n    event Withdraw(address indexed provider, uint value);\\r\\n    event UpdateLiquidityLimit(address user, uint original_balance, uint original_supply, uint working_balance, uint working_supply);\\r\\n\\r\\n    function user_checkpoint (address addr) external returns (bool);\\r\\n    function claimable_tokens(address addr) external view returns (uint);\\r\\n    function claimable_reward(address addr) external view returns (uint);\\r\\n    function integrate_checkpoint()         external view returns (uint);\\r\\n\\r\\n    function kick(address addr) external;\\r\\n    function set_approve_deposit(address addr, bool can_deposit) external;\\r\\n    function deposit(uint _value) external;\\r\\n    function deposit(uint _value, address addr) external;\\r\\n    function withdraw(uint _value) external;\\r\\n    function withdraw(uint _value, bool claim_rewards) external;\\r\\n    function claim_rewards() external;\\r\\n    function claim_rewards(address addr) external;\\r\\n\\r\\n    function minter()                       external view returns (address);\\r\\n    function crv_token()                    external view returns (address);\\r\\n    function lp_token()                     external view returns (address);\\r\\n    function controller()                   external view returns (address);\\r\\n    function voting_escrow()                external view returns (address);\\r\\n    function balanceOf(address)             external view returns (uint);\\r\\n    function totalSupply()                  external view returns (uint);\\r\\n    function future_epoch_time()            external view returns (uint);\\r\\n    function approved_to_deposit(address, address)   external view returns (bool);\\r\\n    function working_balances(address)      external view returns (uint);\\r\\n    function working_supply()               external view returns (uint);\\r\\n    function period()                       external view returns (int128);\\r\\n    function period_timestamp(uint)         external view returns (uint);\\r\\n    function integrate_inv_supply(uint)     external view returns (uint);\\r\\n    function integrate_inv_supply_of(address) external view returns (uint);\\r\\n    function integrate_checkpoint_of(address) external view returns (uint);\\r\\n    function integrate_fraction(address)    external view returns (uint);\\r\\n    function inflation_rate()               external view returns (uint);\\r\\n    function reward_contract()              external view returns (address);\\r\\n    function rewarded_token()               external view returns (address);\\r\\n    function reward_integral()              external view returns (uint);\\r\\n    function reward_integral_for(address)   external view returns (uint);\\r\\n    function rewards_for(address)           external view returns (uint);\\r\\n    function claimed_rewards_for(address)   external view returns (uint);\\r\\n}\\r\\n\\r\\ncontract SSimpleGauge is LiquidityGauge, Configurable {\\r\\n    using SafeMath for uint;\\r\\n    using TransferHelper for address;\\r\\n\\r\\n    address override public minter;\\r\\n    address override public crv_token;\\r\\n    address override public lp_token;\\r\\n    address override public controller;\\r\\n    address override public voting_escrow;\\r\\n    mapping(address =\\u003e uint) override public balanceOf;\\r\\n    uint override public totalSupply;\\r\\n    uint override public future_epoch_time;\\r\\n    \\r\\n    // caller -\\u003e recipient -\\u003e can deposit?\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) override public approved_to_deposit;\\r\\n    \\r\\n    mapping(address =\\u003e uint) override public working_balances;\\r\\n    uint override public working_supply;\\r\\n    \\r\\n    // The goal is to be able to calculate ∫(rate * balance / totalSupply dt) from 0 till checkpoint\\r\\n    // All values are kept in units of being multiplied by 1e18\\r\\n    int128 override public period;\\r\\n    uint256[100000000000000000000000000000] override public period_timestamp;\\r\\n    \\r\\n    // 1e18 * ∫(rate(t) / totalSupply(t) dt) from 0 till checkpoint\\r\\n    uint256[100000000000000000000000000000] override public integrate_inv_supply;  // bump epoch when rate() changes\\r\\n    \\r\\n    // 1e18 * ∫(rate(t) / totalSupply(t) dt) from (last_action) till checkpoint\\r\\n    mapping(address =\\u003e uint) override public integrate_inv_supply_of;\\r\\n    mapping(address =\\u003e uint) override public integrate_checkpoint_of;\\r\\n    \\r\\n    // ∫(balance * rate(t) / totalSupply(t) dt) from 0 till checkpoint\\r\\n    // Units: rate * t = already number of coins per address to issue\\r\\n    mapping(address =\\u003e uint) override public integrate_fraction;\\r\\n    \\r\\n    uint override public inflation_rate;\\r\\n    \\r\\n    // For tracking external rewards\\r\\n    address override public reward_contract;\\r\\n    address override public rewarded_token;\\r\\n    \\r\\n    uint override public reward_integral;\\r\\n    mapping(address =\\u003e uint) override public reward_integral_for;\\r\\n    mapping(address =\\u003e uint) override public rewards_for;\\r\\n    mapping(address =\\u003e uint) override public claimed_rewards_for;\\r\\n    \\r\\n\\r\\n\\tuint public span;\\r\\n\\tuint public end;\\r\\n\\r\\n\\tfunction initialize(address governor, address _minter, address _lp_token) public initializer {\\r\\n\\t    super.initialize(governor);\\r\\n\\t    \\r\\n\\t    minter      = _minter;\\r\\n\\t    crv_token   = Minter(_minter).token();\\r\\n\\t    lp_token    = _lp_token;\\r\\n\\t    IERC20(lp_token).totalSupply();          // just check\\r\\n\\t}\\r\\n    \\r\\n    function setSpan(uint _span, bool isLinear) virtual external governance {\\r\\n        span = _span;\\r\\n        if(isLinear)\\r\\n            end = now + _span;\\r\\n        else\\r\\n            end = 0;\\r\\n    }\\r\\n    \\r\\n    function kick(address addr) virtual override external {\\r\\n        _checkpoint(addr, true);\\r\\n    }\\r\\n    \\r\\n    function set_approve_deposit(address addr, bool can_deposit) virtual override external {\\r\\n        approved_to_deposit[addr][msg.sender] = can_deposit;\\r\\n    }\\r\\n    \\r\\n    function deposit(uint amount) virtual override external {\\r\\n        deposit(amount, msg.sender);\\r\\n    }\\r\\n    function deposit(uint amount, address addr) virtual override public {\\r\\n        require(addr == msg.sender || approved_to_deposit[msg.sender][addr], \\u0027Not approved\\u0027);\\r\\n\\r\\n        _checkpoint(addr, true);\\r\\n        \\r\\n        _deposit(addr, amount);\\r\\n        \\r\\n        balanceOf[addr] = balanceOf[addr].add(amount);\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        \\r\\n        emit Deposit(addr, amount);\\r\\n    }\\r\\n    function _deposit(address addr, uint amount) virtual internal {\\r\\n        lp_token.safeTransferFrom(addr, address(this), amount);\\r\\n    }\\r\\n    \\r\\n    function withdraw() virtual  external {\\r\\n        withdraw(balanceOf[msg.sender], true);\\r\\n    }\\r\\n    function withdraw(uint amount) virtual override external {\\r\\n        withdraw(amount, true);\\r\\n    }\\r\\n    function withdraw(uint amount, bool claim_rewards) virtual override public {\\r\\n        _checkpoint(msg.sender, claim_rewards);\\r\\n        \\r\\n        totalSupply = totalSupply.sub(amount);\\r\\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\\r\\n        \\r\\n        _withdraw(msg.sender, amount);\\r\\n        \\r\\n        emit Withdraw(msg.sender, amount);\\r\\n    }\\r\\n    function _withdraw(address to, uint amount) virtual internal {\\r\\n        lp_token.safeTransfer(to, amount);\\r\\n    }\\r\\n    \\r\\n    function claimable_reward(address) virtual override public view returns (uint) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function claim_rewards() virtual override public {\\r\\n        return claim_rewards(msg.sender);\\r\\n    }\\r\\n    function claim_rewards(address) virtual override public {\\r\\n        return;\\r\\n    }\\r\\n    function _checkpoint_rewards(address, bool) virtual internal {\\r\\n        return;\\r\\n    }\\r\\n    \\r\\n    function claimable_tokens(address addr) virtual override public view returns (uint amount) {\\r\\n        if(span == 0 || totalSupply == 0)\\r\\n            return 0;\\r\\n        \\r\\n        amount = SMinter(minter).quotas(address(this));\\r\\n        amount = amount.mul(balanceOf[addr]).div(totalSupply);\\r\\n        \\r\\n        uint lasttime = integrate_checkpoint_of[addr];\\r\\n        if(end == 0) {                                                         // isNonLinear, endless\\r\\n            if(now.sub(lasttime) \\u003c span)\\r\\n                amount = amount.mul(now.sub(lasttime)).div(span);\\r\\n        }else if(now \\u003c end)\\r\\n            amount = amount.mul(now.sub(lasttime)).div(end.sub(lasttime));\\r\\n        else if(lasttime \\u003e= end)\\r\\n            amount = 0;\\r\\n    }\\r\\n    \\r\\n    function _checkpoint(address addr, uint amount) virtual internal {\\r\\n        if(amount \\u003e 0) {\\r\\n            integrate_fraction[addr] = integrate_fraction[addr].add(amount);\\r\\n            \\r\\n            address teamAddr = address(config[\\u0027teamAddr\\u0027]);\\r\\n            uint teamRatio = config[\\u0027teamRatio\\u0027];\\r\\n            if(teamAddr != address(0) \\u0026\\u0026 teamRatio != 0)\\r\\n                integrate_fraction[teamAddr] = integrate_fraction[teamAddr].add(amount.mul(teamRatio).div(1 ether));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkpoint(address addr, bool _claim_rewards) virtual internal {\\r\\n        uint amount = claimable_tokens(addr);\\r\\n        _checkpoint(addr, amount);\\r\\n        _checkpoint_rewards(addr, _claim_rewards);\\r\\n    \\r\\n        integrate_checkpoint_of[addr] = now;\\r\\n    }\\r\\n    \\r\\n    function user_checkpoint(address addr) virtual override external returns (bool) {\\r\\n        _checkpoint(addr, true);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function integrate_checkpoint() override external view returns (uint) {\\r\\n        return now;\\r\\n    }\\r\\n} \\r\\n\\r\\ncontract SExactGauge is LiquidityGauge, Configurable {\\r\\n    using SafeMath for uint;\\r\\n    using TransferHelper for address;\\r\\n    \\r\\n    bytes32 internal constant _devAddr_         = \\u0027devAddr\\u0027;\\r\\n    bytes32 internal constant _devRatio_        = \\u0027devRatio\\u0027;\\r\\n    bytes32 internal constant _ecoAddr_         = \\u0027ecoAddr\\u0027;\\r\\n    bytes32 internal constant _ecoRatio_        = \\u0027ecoRatio\\u0027;\\r\\n    \\r\\n    address override public minter;\\r\\n    address override public crv_token;\\r\\n    address override public lp_token;\\r\\n    address override public controller;\\r\\n    address override public voting_escrow;\\r\\n    mapping(address =\\u003e uint) override public balanceOf;\\r\\n    uint override public totalSupply;\\r\\n    uint override public future_epoch_time;\\r\\n    \\r\\n    // caller -\\u003e recipient -\\u003e can deposit?\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) override public approved_to_deposit;\\r\\n    \\r\\n    mapping(address =\\u003e uint) override public working_balances;\\r\\n    uint override public working_supply;\\r\\n    \\r\\n    // The goal is to be able to calculate ∫(rate * balance / totalSupply dt) from 0 till checkpoint\\r\\n    // All values are kept in units of being multiplied by 1e18\\r\\n    int128 override public period;\\r\\n    uint256[100000000000000000000000000000] override public period_timestamp;\\r\\n    \\r\\n    // 1e18 * ∫(rate(t) / totalSupply(t) dt) from 0 till checkpoint\\r\\n    uint256[100000000000000000000000000000] override public integrate_inv_supply;  // bump epoch when rate() changes\\r\\n    \\r\\n    // 1e18 * ∫(rate(t) / totalSupply(t) dt) from (last_action) till checkpoint\\r\\n    mapping(address =\\u003e uint) override public integrate_inv_supply_of;\\r\\n    mapping(address =\\u003e uint) override public integrate_checkpoint_of;\\r\\n    \\r\\n    // ∫(balance * rate(t) / totalSupply(t) dt) from 0 till checkpoint\\r\\n    // Units: rate * t = already number of coins per address to issue\\r\\n    mapping(address =\\u003e uint) override public integrate_fraction;\\r\\n    \\r\\n    uint override public inflation_rate;\\r\\n    \\r\\n    // For tracking external rewards\\r\\n    address override public reward_contract;\\r\\n    address override public rewarded_token;\\r\\n    \\r\\n    uint override public reward_integral;\\r\\n    mapping(address =\\u003e uint) override public reward_integral_for;\\r\\n    mapping(address =\\u003e uint) internal rewards_for_;            // obsolete\\r\\n    mapping(address =\\u003e uint) internal claimed_rewards_for_;    // obsoleted\\r\\n\\r\\n\\tuint public span;\\r\\n\\tuint public end;\\r\\n\\tmapping(address =\\u003e uint) public sumMiningPerOf;\\r\\n\\tuint public sumMiningPer;\\r\\n\\tuint public bufReward;\\r\\n\\tuint public lasttime;\\r\\n\\t\\r\\n\\tfunction initialize(address governor, address _minter, address _lp_token) public initializer {\\r\\n\\t    super.initialize(governor);\\r\\n\\t    \\r\\n\\t    minter      = _minter;\\r\\n\\t    crv_token   = Minter(_minter).token();\\r\\n\\t    lp_token    = _lp_token;\\r\\n\\t    IERC20(lp_token).totalSupply();                 // just check\\r\\n\\t}\\r\\n    \\r\\n    function setSpan(uint _span, bool isLinear) virtual external governance {\\r\\n        span = _span;\\r\\n        if(isLinear)\\r\\n            end = now + _span;\\r\\n        else\\r\\n            end = 0;\\r\\n        lasttime = now;\\r\\n    }\\r\\n    \\r\\n    function kick(address addr) virtual override external {\\r\\n        _checkpoint(addr, true);\\r\\n    }\\r\\n    \\r\\n    function set_approve_deposit(address addr, bool can_deposit) virtual override external {\\r\\n        approved_to_deposit[addr][msg.sender] = can_deposit;\\r\\n    }\\r\\n    \\r\\n    function deposit(uint amount) virtual override external {\\r\\n        deposit(amount, msg.sender);\\r\\n    }\\r\\n    function deposit(uint amount, address addr) virtual override public {\\r\\n        require(addr == msg.sender || approved_to_deposit[msg.sender][addr], \\u0027Not approved\\u0027);\\r\\n\\r\\n        _checkpoint(addr, true);\\r\\n        \\r\\n        _deposit(addr, amount);\\r\\n\\r\\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        \\r\\n        emit Deposit(msg.sender, amount);\\r\\n    }\\r\\n    function _deposit(address addr, uint amount) virtual internal {\\r\\n        lp_token.safeTransferFrom(addr, address(this), amount);\\r\\n    }\\r\\n    \\r\\n    function withdraw() virtual external {\\r\\n        withdraw(balanceOf[msg.sender], true);\\r\\n    }\\r\\n    function withdraw(uint amount) virtual override external {\\r\\n        withdraw(amount, true);\\r\\n    }\\r\\n    function withdraw(uint amount, bool _claim_rewards) virtual override public {\\r\\n        _checkpoint(msg.sender, _claim_rewards);\\r\\n        \\r\\n        totalSupply = totalSupply.sub(amount);\\r\\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\\r\\n        \\r\\n        _withdraw(msg.sender, amount);\\r\\n        \\r\\n        emit Withdraw(msg.sender, amount);\\r\\n    }\\r\\n    function _withdraw(address to, uint amount) virtual internal {\\r\\n        lp_token.safeTransfer(to, amount);\\r\\n    }\\r\\n    \\r\\n    function claimable_reward(address addr) virtual override public view returns (uint) {\\r\\n        addr;\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function claim_rewards() virtual override public {\\r\\n        return claim_rewards(msg.sender);\\r\\n    }\\r\\n    function claim_rewards(address) virtual override public {\\r\\n        return;\\r\\n    }\\r\\n    function _checkpoint_rewards(address, bool) virtual internal {\\r\\n        return;\\r\\n    }\\r\\n    \\r\\n    function claimable_tokens(address addr) virtual override public view returns (uint) {\\r\\n        return _claimable_tokens(addr, claimableDelta(), sumMiningPer, sumMiningPerOf[addr]);\\r\\n    }\\r\\n    function _claimable_tokens(address addr, uint delta, uint sumPer, uint lastSumPer) virtual internal view returns (uint amount) {\\r\\n        if(span == 0 || totalSupply == 0)\\r\\n            return 0;\\r\\n        \\r\\n        amount = sumPer.sub(lastSumPer);\\r\\n        amount = amount.add(delta.mul(1 ether).div(totalSupply));\\r\\n        amount = amount.mul(balanceOf[addr]).div(1 ether);\\r\\n    }\\r\\n    function claimableDelta() virtual internal view returns(uint amount) {\\r\\n        amount = SMinter(minter).quotas(address(this)).sub(bufReward);\\r\\n\\r\\n        if(end == 0) {                                                         // isNonLinear, endless\\r\\n            if(now.sub(lasttime) \\u003c span)\\r\\n                amount = amount.mul(now.sub(lasttime)).div(span);\\r\\n        }else if(now \\u003c end)\\r\\n            amount = amount.mul(now.sub(lasttime)).div(end.sub(lasttime));\\r\\n        else if(lasttime \\u003e= end)\\r\\n            amount = 0;\\r\\n    }\\r\\n\\r\\n    function _checkpoint(address addr, uint amount) virtual internal {\\r\\n        if(amount \\u003e 0) {\\r\\n            integrate_fraction[addr] = integrate_fraction[addr].add(amount);\\r\\n            \\r\\n            addr = address(config[_devAddr_]);\\r\\n            uint ratio = config[_devRatio_];\\r\\n            if(addr != address(0) \\u0026\\u0026 ratio != 0)\\r\\n                integrate_fraction[addr] = integrate_fraction[addr].add(amount.mul(ratio).div(1 ether));\\r\\n\\r\\n            addr = address(config[_ecoAddr_]);\\r\\n            ratio = config[_ecoRatio_];\\r\\n            if(addr != address(0) \\u0026\\u0026 ratio != 0)\\r\\n                integrate_fraction[addr] = integrate_fraction[addr].add(amount.mul(ratio).div(1 ether));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _checkpoint(address addr, bool _claim_rewards) virtual internal {\\r\\n        if(span == 0 || totalSupply == 0)\\r\\n            return;\\r\\n        \\r\\n        uint delta = claimableDelta();\\r\\n        uint amount = _claimable_tokens(addr, delta, sumMiningPer, sumMiningPerOf[addr]);\\r\\n        \\r\\n        if(delta != amount)\\r\\n            bufReward = bufReward.add(delta).sub(amount);\\r\\n        if(delta \\u003e 0)\\r\\n            sumMiningPer = sumMiningPer.add(delta.mul(1 ether).div(totalSupply));\\r\\n        if(sumMiningPerOf[addr] != sumMiningPer)\\r\\n            sumMiningPerOf[addr] = sumMiningPer;\\r\\n        lasttime = now;\\r\\n\\r\\n        _checkpoint(addr, amount);\\r\\n        _checkpoint_rewards(addr, _claim_rewards);\\r\\n    }\\r\\n\\r\\n    function user_checkpoint(address addr) virtual override external returns (bool) {\\r\\n        _checkpoint(addr, true);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function integrate_checkpoint() override external view returns (uint) {\\r\\n        return lasttime;\\r\\n    }\\r\\n    \\r\\n    function rewards_for(address) virtual override external view returns (uint) {\\r\\n        return 0;\\r\\n    }\\r\\n    \\r\\n    function claimed_rewards_for(address) virtual override external view returns (uint) {\\r\\n        return 0;\\r\\n    }\\r\\n} \\r\\n\\r\\n\\r\\ncontract SNestGauge is SExactGauge {\\r\\n\\taddress[] public rewards;\\r\\n\\tmapping(address =\\u003e mapping(address =\\u003euint)) public sumRewardPerOf;      // recipient =\\u003e rewarded_token =\\u003e can sumRewardPerOf\\r\\n\\tmapping(address =\\u003e uint) public sumRewardPer;                           // rewarded_token =\\u003e can sumRewardPerOf\\r\\n\\r\\n\\tfunction initialize(address governor, address _minter, address _lp_token, address _nestGauge, address[] memory _moreRewards) public initializer {\\r\\n\\t    super.initialize(governor, _minter, _lp_token);\\r\\n\\t    \\r\\n\\t    reward_contract = _nestGauge;\\r\\n\\t    rewarded_token  = LiquidityGauge(_nestGauge).crv_token();\\r\\n\\t    rewards         = _moreRewards;\\r\\n\\t    rewards.push(rewarded_token);\\r\\n\\t    address rewarded_token2 = LiquidityGauge(_nestGauge).rewarded_token();\\r\\n\\t    if(rewarded_token2 != address(0))\\r\\n    \\t    rewards.push(rewarded_token2);\\r\\n\\t    \\r\\n\\t    LiquidityGauge(_nestGauge).integrate_checkpoint();      // just check\\r\\n\\t    for(uint i=0; i\\u003c_moreRewards.length; i++)\\r\\n\\t        IERC20(_moreRewards[i]).totalSupply();              // just check\\r\\n\\t}\\r\\n    \\r\\n    function _deposit(address from, uint amount) virtual override internal {\\r\\n        super._deposit(from, amount);                           // lp_token.safeTransferFrom(from, address(this), amount);\\r\\n        lp_token.safeApprove(reward_contract, amount);\\r\\n        LiquidityGauge(reward_contract).deposit(amount);\\r\\n    }\\r\\n\\r\\n    function _withdraw(address to, uint amount) virtual override internal {\\r\\n        LiquidityGauge(reward_contract).withdraw(amount);\\r\\n        super._withdraw(to, amount);                            // lp_token.safeTransfer(to, amount);\\r\\n    }\\r\\n    \\r\\n    function claim_rewards(address to) virtual override public {\\r\\n        if(span == 0 || totalSupply == 0)\\r\\n            return;\\r\\n        \\r\\n        uint[] memory bals = new uint[](rewards.length);\\r\\n        for(uint i=0; i\\u003cbals.length; i++)\\r\\n            bals[i] = IERC20(rewards[i]).balanceOf(address(this));\\r\\n            \\r\\n        Minter(LiquidityGauge(reward_contract).minter()).mint(reward_contract);\\r\\n        LiquidityGauge(reward_contract).claim_rewards();\\r\\n        \\r\\n        for(uint i=0; i\\u003cbals.length; i++) {\\r\\n            uint delta = IERC20(rewards[i]).balanceOf(address(this)).sub(bals[i]);\\r\\n            uint amount = _claimable_tokens(msg.sender, delta, sumRewardPer[rewards[i]], sumRewardPerOf[msg.sender][rewards[i]]);\\r\\n        \\r\\n            if(delta \\u003e 0)\\r\\n                sumRewardPer[rewards[i]] = sumRewardPer[rewards[i]].add(delta.mul(1 ether).div(totalSupply));\\r\\n            if(sumRewardPerOf[msg.sender][rewards[i]] != sumRewardPer[rewards[i]])\\r\\n                sumRewardPerOf[msg.sender][rewards[i]] = sumRewardPer[rewards[i]];\\r\\n            \\r\\n            if(amount \\u003e 0)\\r\\n                rewards[i].safeTransfer(to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimable_reward(address addr) virtual override public view returns (uint) {\\r\\n        //uint delta = LiquidityGauge(reward_contract).claimable_tokens(address(this));     // Error: Mutable call in static context\\r\\n        uint delta = LiquidityGauge(reward_contract).integrate_fraction(address(this)).sub(Minter(LiquidityGauge(reward_contract).minter()).minted(address(this), reward_contract));\\r\\n        return _claimable_tokens(addr, delta, sumRewardPer[rewarded_token], sumRewardPerOf[addr][rewarded_token]);\\r\\n    }\\r\\n    \\r\\n    function claimable_reward2(address addr) virtual public view returns (uint) {\\r\\n        uint delta = LiquidityGauge(reward_contract).claimable_reward(address(this));\\r\\n        address reward2 = LiquidityGauge(reward_contract).rewarded_token();\\r\\n        return _claimable_tokens(addr, delta, sumRewardPer[reward2], sumRewardPerOf[addr][reward2]);\\r\\n    }    \\r\\n\\r\\n    function claimable_reward(address addr, address reward) virtual public view returns (uint) {\\r\\n        return _claimable_tokens(addr, 0, sumRewardPer[reward], sumRewardPerOf[addr][reward]);\\r\\n    }\\r\\n    \\r\\n    function claimed_rewards_for(address addr, address reward) virtual public view returns (uint) {\\r\\n        return _claimable_tokens(addr, 0, sumRewardPerOf[addr][reward], 0);\\r\\n    }\\r\\n    function claimed_rewards_for(address addr) virtual override public view returns (uint) {\\r\\n        return claimed_rewards_for(addr, rewarded_token);\\r\\n    }\\r\\n    function claimed_rewards_for2(address addr) virtual public view returns (uint) {\\r\\n        return claimed_rewards_for(addr, LiquidityGauge(reward_contract).rewarded_token());\\r\\n    }\\r\\n    \\r\\n    function rewards_for(address addr, address reward) virtual public view returns (uint) {\\r\\n        return _claimable_tokens(addr, 0, sumRewardPer[reward], 0);\\r\\n    }\\r\\n    function rewards_for(address addr) virtual override public view returns (uint) {\\r\\n        return rewards_for(addr, rewarded_token);\\r\\n    }\\r\\n    function rewards_for2(address addr) virtual public view returns (uint) {\\r\\n        return rewards_for(addr, LiquidityGauge(reward_contract).rewarded_token());\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract SMinter is Minter, Configurable {\\r\\n    using SafeMath for uint;\\r\\n    using Address for address payable;\\r\\n    using TransferHelper for address;\\r\\n    \\r\\n\\tbytes32 internal constant _allowContract_   = \\u0027allowContract\\u0027;\\r\\n\\tbytes32 internal constant _allowlist_       = \\u0027allowlist\\u0027;\\r\\n\\tbytes32 internal constant _blocklist_       = \\u0027blocklist\\u0027;\\r\\n\\r\\n    address override public token;\\r\\n    address override public controller;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) override public minted;                    // user =\\u003e reward_contract =\\u003e value\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) override public allowed_to_mint_for;       // minter =\\u003e user =\\u003e can mint?\\r\\n    mapping(address =\\u003e uint) public quotas;                                                 // reward_contract =\\u003e quota;\\r\\n\\r\\n    function initialize(address governor, address token_) public initializer {\\r\\n        super.initialize(governor);\\r\\n        token = token_;\\r\\n    }\\r\\n    \\r\\n    function setGaugeQuota(address gauge, uint quota) public governance {\\r\\n       quotas[gauge] = quota;\\r\\n    }\\r\\n    \\r\\n    function mint(address gauge) virtual override public {\\r\\n        mint_for(gauge, msg.sender);   \\r\\n    }\\r\\n    \\r\\n    function mint_many(address[8] calldata gauges) virtual override external {\\r\\n        for(uint i=0; i\\u003cgauges.length; i++)\\r\\n            mint(gauges[i]);\\r\\n    }\\r\\n    \\r\\n    function mint_for(address gauge, address _for) virtual override public {\\r\\n        require(_for == msg.sender || allowed_to_mint_for[msg.sender][_for], \\u0027Not approved\\u0027);\\r\\n        require(quotas[gauge] \\u003e 0, \\u0027No quota\\u0027);\\r\\n        \\r\\n        require(getConfig(_blocklist_, msg.sender) == 0, \\u0027In blocklist\\u0027);\\r\\n        bool isContract = msg.sender.isContract();\\r\\n        require(!isContract || config[_allowContract_] != 0 || getConfig(_allowlist_, msg.sender) != 0, \\u0027No allowContract\\u0027);\\r\\n\\r\\n        LiquidityGauge(gauge).user_checkpoint(_for);\\r\\n        uint total_mint = LiquidityGauge(gauge).integrate_fraction(_for);\\r\\n        uint to_mint = total_mint.sub(minted[_for][gauge]);\\r\\n    \\r\\n        if(to_mint != 0) {\\r\\n            quotas[gauge] = quotas[gauge].sub(to_mint);\\r\\n            token.safeTransfer(_for, to_mint);\\r\\n            minted[_for][gauge] = total_mint;\\r\\n    \\r\\n            emit Minted(_for, gauge, total_mint);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function toggle_approve_mint(address minting_user) virtual override external {\\r\\n        allowed_to_mint_for[minting_user][msg.sender] = !allowed_to_mint_for[minting_user][msg.sender];\\r\\n    }\\r\\n}\\r\\n\\r\\n/*\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: APPROVE_FAILED\\u0027);\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FAILED\\u0027);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FROM_FAILED\\u0027);\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, \\u0027TransferHelper: ETH_TRANSFER_FAILED\\u0027);\\r\\n    }\\r\\n}\\r\\n*/\\r\\n\"},\"SToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n    \\r\\n\\tfunction sqrt(uint x)public pure returns(uint y) {\\r\\n        uint z = (x + 1) / 2;\\r\\n        y = x;\\r\\n        while (z \\u003c y) {\\r\\n            y = z;\\r\\n            z = (x / z + z) / 2;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping (address =\\u003e uint256) public _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) internal _allowances;\\r\\n\\r\\n    uint256 public _totalSupply;\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n    uint8 internal _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory name, string memory symbol) public {\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\ncontract SfgToken is ERC20 {\\r\\n\\r\\n\\tconstructor(address SfgFarm) ERC20(\\\"Stable Finance Governance Token\\\", \\\"SFG\\\") public {\\r\\n\\t\\tuint8 decimals = 18;\\r\\n\\t\\t_setupDecimals(decimals);\\r\\n\\t\\t\\r\\n\\t\\t_mint(SfgFarm,  21000000 * 10 ** uint256(decimals));       // 100%, 21000000\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract SfyToken is ERC20 {\\r\\n\\r\\n\\tconstructor(address SfyFarm) ERC20(\\\"Stable Finance Yield Token\\\", \\\"SFY\\\") public {\\r\\n\\t\\tuint8 decimals = 18;\\r\\n\\t\\t_setupDecimals(decimals);\\r\\n\\t\\t\\r\\n\\t\\t_mint(SfyFarm,  21000000 * 10 ** uint256(decimals));       // 100%, 21000000\\r\\n\\t}\\r\\n}\\r\\n\"},\"TransferHelper.sol\":{\"content\":\"pragma solidity ^0.6.0;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: APPROVE_FAILED\\u0027);\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FAILED\\u0027);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FROM_FAILED\\u0027);\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, \\u0027TransferHelper: ETH_TRANSFER_FAILED\\u0027);\\r\\n    }\\r\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"original_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"original_supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"working_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"working_supply\",\"type\":\"uint256\"}],\"name\":\"UpdateLiquidityLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved_to_deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claim_rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimable_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimable_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed_rewards_for\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_epoch_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflation_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"integrate_checkpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"integrate_checkpoint_of\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"integrate_fraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"integrate_inv_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"integrate_inv_supply_of\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"kick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lasttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"period_timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward_contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward_integral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward_integral_for\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarded_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards_for\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_span\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLinear\",\"type\":\"bool\"}],\"name\":\"setSpan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"can_deposit\",\"type\":\"bool\"}],\"name\":\"set_approve_deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"span\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumMiningPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sumMiningPerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"user_checkpoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voting_escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_claim_rewards\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"working_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"working_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SExactGauge","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85a474763576b02ab44aa1bfe6d4510f69d04facda02ef4ab7c7c5ade0396ba2"}]}