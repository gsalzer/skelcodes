{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 <0.7.0;\r\n\r\ncontract EtherGlobeToken {\r\n\r\n    address public owner;\r\n    string  public name = \"Ether Globe Decentralised Token\";\r\n    string  public symbol = \"EGDT\";\r\n    string  public standard = \"EGDT Token v1.0\";\r\n    uint256 public totalSupply;\r\n    uint256  public decimals = 18;\r\n    uint256 public  decimalFactor = 10 ** uint256(decimals);\r\n     uint256 public  TOTAL_COIN_MINT = 2500000000 * decimalFactor;\r\n     \r\n\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    constructor(uint256 _initialSupply) public {\r\n        owner=msg.sender;\r\n        balanceOf[msg.sender] = _initialSupply;\r\n        totalSupply = _initialSupply;\r\n    }\r\n  function mint(address _to, uint256 _value) public returns (bool success) {\r\n       require(msg.sender==owner,\"Only Owner Can Mint\");\r\n        totalSupply +=_value;\r\n        if(totalSupply<=TOTAL_COIN_MINT){\r\n             balanceOf[msg.sender] += _value;\r\n        require(balanceOf[msg.sender] >= _value);\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        emit Transfer(msg.sender, _to, _value); \r\n\r\n        }\r\n       \r\n\r\n        return true;\r\n    }\r\n  \r\n\r\n    function transfer( address _to, uint256 _value) public returns (bool success) {\r\n         \r\n        require(_value <= balanceOf[msg.sender]);\r\n      \r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n      \r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract EtherGlobe {\r\n    \r\n    EtherGlobeToken public token;\r\n    \r\n    struct UserAccount {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        uint totalTokens;\r\n         \r\n        mapping(uint256 => bool) activeX3Levels;\r\n        mapping(uint256 => bool) activeX6Levels;\r\n        \r\n        mapping(uint256 => X3) x3Matrix;\r\n        mapping(uint256 => X4) x6Matrix;\r\n    }\r\n    \r\n    struct X3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct X4{\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n        address closedPart;\r\n    }\r\n\r\n    uint256 public constant LAST_LEVEL = 12;\r\n    uint256  public decimals = 18;\r\n    uint256 public  decimalFactor = 10 ** uint256(decimals);\r\n    uint256 tokenReward = 100 * decimalFactor;\r\n    uint256 ownerReward = 625000000 * decimalFactor;\r\n    \r\n    mapping(address => UserAccount) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint => address) public userIds;\r\n\r\n    uint public lastUserId = 2;\r\n    address public owner;\r\n    mapping(uint256 => uint) public levelPrice;\r\n\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Recycle(address indexed user, address indexed currentReferrer, address indexed caller, uint256 matrix, uint256 level);\r\n    event UpgradeLevel(address indexed user, address indexed referrer, uint256 matrix, uint256 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint256 matrix, uint256 level, uint256 place);\r\n    event UserActiveLevels(address indexed user, uint8 indexed matrix, uint256 indexed level);\r\n    event IncomeReceived(address indexed user,address indexed from,uint256 value,uint256 matrix, uint256 level);\r\n    event TokenMinted(address indexed receiver, uint indexed totalTokens, uint256 value, uint256 supply);\r\n    \r\n    constructor(address ownerAddress) public {\r\n        levelPrice[1] = 0.05 ether;\r\n        for (uint256 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n           owner = ownerAddress;\r\n           token = new EtherGlobeToken(0);\r\n      UserAccount memory user;\r\n          user= UserAccount({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0),\r\n            totalTokens: uint(0)\r\n        });   \r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n        for (uint256 j = 1; j <= LAST_LEVEL; j++) {\r\n            users[ownerAddress].activeX3Levels[j] = true;\r\n            emit UserActiveLevels(owner, 1, j);\r\n            users[ownerAddress].activeX6Levels[j] = true;\r\n            emit UserActiveLevels(owner, 2, j);\r\n        }\r\n        userIds[1] = ownerAddress;\r\n        \r\n        token.mint(owner, ownerReward);\r\n        \r\n    }\r\n    \r\n    function regUserExt(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n        token.mint(msg.sender, tokenReward);\r\n        users[msg.sender].totalTokens += tokenReward;\r\n        emit TokenMinted(msg.sender, ((users[msg.sender].totalTokens) / decimalFactor), tokenReward, (token.totalSupply() / decimalFactor));\r\n    }\r\n    \r\n    function buyNewLevel(uint256 matrix, uint256 level) external payable {\r\n        uint256 buyNewLevelReward = (50 * (2 ** (level - 1))) * decimalFactor;\r\n        require(msg.value == levelPrice[level] ,\"invalid price\");\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n     \r\n       \r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n       \r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeX3Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].x3Matrix[level-1].blocked) {\r\n                users[msg.sender].x3Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeX3Referrer = nextFreeX3Referrer(msg.sender, level);\r\n            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\r\n            users[msg.sender].activeX3Levels[level] = true;\r\n            emit UserActiveLevels(msg.sender, 1, level);\r\n            newX3Referrer(msg.sender, freeX3Referrer, level);\r\n            \r\n            emit UpgradeLevel(msg.sender, freeX3Referrer, 1, level);\r\n\r\n        } else {\r\n            require(!users[msg.sender].activeX6Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].x6Matrix[level-1].blocked) {\r\n                users[msg.sender].x6Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeX6Referrer = nextFreeX4Referrer(msg.sender, level);\r\n            \r\n            users[msg.sender].activeX6Levels[level] = true;\r\n            emit UserActiveLevels(msg.sender, 2, level);\r\n            newX4Referrer(msg.sender, freeX6Referrer, level);\r\n            \r\n            emit UpgradeLevel(msg.sender, freeX6Referrer, 2, level);\r\n        }\r\n        \r\n        token.mint(msg.sender, buyNewLevelReward);\r\n        users[msg.sender].totalTokens += buyNewLevelReward;\r\n        emit TokenMinted(msg.sender, ((users[msg.sender].totalTokens) / decimalFactor), buyNewLevelReward, (token.totalSupply() / decimalFactor));\r\n    }\r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == (levelPrice[1] * 2), \"Invalid Cost\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n    \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cc\");\r\n        \r\n        UserAccount memory user = UserAccount({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: uint(0),\r\n            totalTokens: uint(0)\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        \r\n        users[userAddress].referrer = referrerAddress;\r\n        \r\n        users[userAddress].activeX3Levels[1] = true;\r\n        emit UserActiveLevels(userAddress, 1, 1);\r\n        users[userAddress].activeX6Levels[1] = true;\r\n        emit UserActiveLevels(userAddress, 2, 1);\r\n        \r\n        \r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n        \r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeX3Referrer = nextFreeX3Referrer(userAddress, 1);\r\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\r\n        newX3Referrer(userAddress, freeX3Referrer, 1);\r\n\r\n        newX4Referrer(userAddress, nextFreeX4Referrer(userAddress, 1), 1);\r\n        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n    \r\n    function newX3Referrer(address userAddress, address referrerAddress, uint256 level) private {\r\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint256(users[referrerAddress].x3Matrix[level].referrals.length));\r\n            return sendRewards(referrerAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        \r\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeX3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x3Matrix[level].blocked = true;\r\n        }\r\n\r\n        if (referrerAddress != owner) {\r\n\r\n            address freeReferrerAddress = nextFreeX3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            \r\n            users[referrerAddress].x3Matrix[level].reinvestCount++;\r\n            emit Recycle(referrerAddress, freeReferrerAddress, userAddress, 1, level);\r\n            newX3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendRewards(owner, userAddress, 1, level);\r\n            users[owner].x3Matrix[level].reinvestCount++;\r\n            emit Recycle(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n\r\n    function newX4Referrer(address userAddress, address referrerAddress, uint256 level) private {\r\n        require(users[referrerAddress].activeX6Levels[level], \"500\");\r\n        \r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint256(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length));\r\n            \r\n            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendRewards(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;            \r\n            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress); \r\n            \r\n            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (len == 2 && users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return newX4ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x6Matrix[level].closedPart)) {\r\n\r\n                newX4(userAddress, referrerAddress, level, true);\r\n                return newX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].x6Matrix[level].closedPart) {\r\n            newX4(userAddress, referrerAddress, level, true);\r\n                return newX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                newX4(userAddress, referrerAddress, level, false);\r\n                return newX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            newX4(userAddress, referrerAddress, level, false);\r\n            return newX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            newX4(userAddress, referrerAddress, level, true);\r\n            return newX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\r\n            newX4(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            newX4(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        newX4ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function newX4(address userAddress, address referrerAddress, uint256 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint256(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint256(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint256(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint256(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function newX4ReferrerSecondLevel(address userAddress, address referrerAddress, uint256 level) private {\r\n        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendRewards(referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\r\n        \r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress ||\r\n                x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n            } else if (x6.length == 1) {\r\n                if (x6[0] == referrerAddress) {\r\n                    users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        \r\n        users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeX6Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x6Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].reinvestCount++;\r\n        \r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = nextFreeX4Referrer(referrerAddress, level);\r\n\r\n            emit Recycle(referrerAddress, freeReferrerAddress, userAddress, 2, level);\r\n            newX4Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Recycle(owner, address(0), userAddress, 2, level);\r\n            sendRewards(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function nextFreeX3Referrer(address userAddress, uint256 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    \r\n    function nextFreeX4Referrer(address userAddress, uint256 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX6Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function usersX3Matrix(address userAddress, uint256 level) public view returns(address, address[] memory, bool, bool) {\r\n        return (users[userAddress].x3Matrix[level].currentReferrer,\r\n                users[userAddress].x3Matrix[level].referrals,\r\n                users[userAddress].x3Matrix[level].blocked,\r\n                users[userAddress].activeX3Levels[level]);\r\n    }\r\n\r\n    function usersX4Matrix(address userAddress, uint256 level) public view returns(address, address[] memory, address[] memory, bool, bool, address) {\r\n        return (users[userAddress].x6Matrix[level].currentReferrer,\r\n                users[userAddress].x6Matrix[level].firstLevelReferrals,\r\n                users[userAddress].x6Matrix[level].secondLevelReferrals,\r\n                users[userAddress].x6Matrix[level].blocked,\r\n                users[userAddress].activeX6Levels[level],\r\n                users[userAddress].x6Matrix[level].closedPart);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function getRewardReceiver(address userAddress, address _from, uint256 matrix, uint256 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].x3Matrix[level].blocked) {\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].x6Matrix[level].blocked) {\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x6Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendRewards(address userAddress, address _from, uint256 matrix, uint256 level) private {\r\n        (address receiver, bool isExtraDividends) = getRewardReceiver(userAddress, _from, matrix, level);\r\n        \r\n       \r\n        if (!address(uint160(receiver)).send(levelPrice[level])) {\r\n            emit  IncomeReceived(receiver,_from,address(this).balance, matrix,level);\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n         emit  IncomeReceived(receiver,_from,levelPrice[level],matrix,level);\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"nextFreeX4Referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"usersX3Matrix\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"usersX4Matrix\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"nextFreeX3Referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"matrix\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"regUserExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"Recycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"UpgradeLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"place\",\"type\":\"uint256\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"UserActiveLevels\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"IncomeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"}]","ContractName":"EtherGlobe","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b03a7689549c4e72902122d5ff6158d438f5123","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://abdcfff6be55ffb2cb61b4ae45e09a0a92c5f8fdb3083a6064866a8f9d692ce6"}]}