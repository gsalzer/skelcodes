{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\n\r\n// SPDX-License-Identifier: MIT\r\ninterface ERC20Interface {\r\n    function totalSupply() \r\n\t\texternal \r\n\t\tview \r\n\t\treturns (uint);\r\n\r\n    function balanceOf(address tokenOwner) \r\n\t\texternal \r\n\t\tview \r\n\t\treturns (uint balance);\r\n    \r\n\tfunction allowance\r\n\t\t(address tokenOwner, address spender) \r\n\t\texternal \r\n\t\tview \r\n\t\treturns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) \t\t\t\texternal \r\n\t\treturns (bool success);\r\n    \r\n\tfunction approve(address spender, uint tokens) \t\texternal \r\n\t\treturns (bool success);\r\n\r\n    function transferFrom \r\n\t\t(address from, address to, uint tokens) \t\t\t\texternal \r\n\t\treturns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    \r\n    \r\n}\r\n\r\n///Contract that vests 200K GRO then payout after every month for the next 24 months. \r\ncontract GrowthLockContract {\r\n    \r\n    address private owner; \r\n    address private safe;\r\n    address private mike;\r\n    address private ghost;\r\n    address private dev; \r\n    uint256 public time; \r\n    uint private constant devAmount = 4166.66 * 1 ether;\r\n    uint private constant managementAmount = 1388.88 * 1 ether;\r\n    \r\n    //2629743 = 30 days. \r\n    uint public constant locktime = 2629743; \r\n    \r\n    //0x09e64c2B61a5f1690Ee6fbeD9baf5D6990F8dFd0 is Growth Token address\r\n    ERC20Interface private constant token = ERC20Interface(0x09e64c2B61a5f1690Ee6fbeD9baf5D6990F8dFd0);\r\n    \r\n    \r\n    constructor () {\r\n        owner = msg.sender;\r\n        \r\n        time = block.timestamp; \r\n        \r\n        \r\n        mike = 0x70F5FB6BE943162545a496eD120495B05dC5ce07;\r\n        ghost = 0x6811101D884557Eba52DF3Ea0417A3036D5b9FCd;\r\n        safe = 0xC4faC8CA576B9c8B971fA36916aEE062d84b4901;\r\n        dev = 0xB0632a01ee778E09625BcE2a257e221b49E79696;\r\n        \r\n\r\n  \r\n    }\r\n    \r\n    //Modifier to prevent everyone except owner from using contract.  \r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"Unauthorized to call. \");\r\n        _;\r\n    }\r\n    \r\n    //Admin can deposit the initial vested amount.  You can only use this function once.  \r\n    function depositToken(uint amount) public onlyOwner {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        \r\n        require(token.transferFrom(msg.sender, address(this), amount) == true, \"Inefficient balance or Unauthorized to pay. \");\r\n\r\n    }\r\n    \r\n    \r\n    //Admin pays dev and management team.\r\n    function payToken() public onlyOwner {\r\n        //check if it's past the next payperiod.  \r\n        require(block.timestamp >= (time + locktime), \"Period not reached yet. \");\r\n\r\n        \r\n        //Sends dev payment. \r\n        require(token.transfer(dev, devAmount) == true, \"You don't have enough in balance. \");\r\n        \r\n        //sends management payments.\r\n        require(token.transfer(safe, managementAmount) == true, \"You don't have enough in balance. \");\r\n        require(token.transfer(mike, managementAmount) == true, \"You don't have enough in balance. \");\r\n        require(token.transfer(ghost, managementAmount) == true, \"You don't have enough in balance. \");\r\n        \r\n        time += locktime; \r\n        \r\n    }\r\n    \r\n    \r\n    //Used to check contract balance. \r\n    function getBalance() view public returns (uint) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    ///Updates the owner of the contract\r\n    function updateOwner(address newOwner) public onlyOwner {\r\n\r\n        owner = newOwner; \r\n    }\r\n    \r\n    //Used incase management teams lost their wallet and needs to updated.  \r\n    function updateManagement(address _mike, address _ghost, address _safe, address _dev) public onlyOwner {\r\n\r\n        mike = _mike;\r\n        ghost = _ghost;\r\n        safe = _safe;\r\n        dev = _dev;\r\n    }\r\n    \r\n    //Check who owner is. \r\n    function getOwner() view public returns (address) {\r\n        return owner; \r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locktime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ghost\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"updateManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GrowthLockContract","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7be7aab06df9eea6ee52941d5a089f2daa3fa716cbffcaa4f8025405372d76cf"}]}