{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n */\r\ncontract Pausable is Context {\r\n    event Paused(address account);\r\n    event Shutdown(address account);\r\n    event Unpaused(address account);\r\n    event Open(address account);\r\n\r\n    bool public paused;\r\n    bool public stopEverything;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n    modifier whenPaused() {\r\n        require(paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotShutdown() {\r\n        require(!stopEverything, \"Pausable: shutdown\");\r\n        _;\r\n    }\r\n\r\n    modifier whenShutdown() {\r\n        require(stopEverything, \"Pausable: not shutdown\");\r\n        _;\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused whenNotShutdown {\r\n        paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    function _shutdown() internal virtual whenNotShutdown {\r\n        stopEverything = true;\r\n        paused = true;\r\n        emit Shutdown(_msgSender());\r\n    }\r\n\r\n    function _open() internal virtual whenShutdown {\r\n        stopEverything = false;\r\n        emit Open(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/PoolShareToken.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n/* solhint-disable no-empty-blocks */\r\nabstract contract PoolShareToken is ERC20, ReentrancyGuard, Pausable {\r\n    IERC20 public token;\r\n    uint256 internal constant MAX_UINT_VALUE = uint256(-1);\r\n\r\n    event Deposit(address indexed owner, uint256 shares, uint256 amount);\r\n    event Withdraw(address indexed owner, uint256 shares, uint256 amount);\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _token\r\n    ) public ERC20(name, symbol) {\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev Receives ERC20 token amount and grants new tokens to the sender\r\n     * depending on the value of each contract's share.\r\n     */\r\n    function deposit(uint256 amount) external virtual nonReentrant whenNotPaused {\r\n        _deposit(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns tokens and retuns deposited tokens or ETH value for those.\r\n     */\r\n    function withdraw(uint256 shares) external virtual nonReentrant whenNotShutdown {\r\n        _withdraw(shares);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns tokens and retuns the collateral value of those.\r\n     */\r\n    function withdrawByFeeCollector(uint256 shares) external virtual nonReentrant whenNotShutdown {\r\n        require(shares != 0, \"Withdraw must be greater than 0\");\r\n        require(_msgSender() == _getFeeCollector(), \"Not a fee collector.\");\r\n        uint256 amount = convertFrom18(shares.mul(convertTo18(totalValue())).div(totalSupply()));\r\n        _beforeBurning(amount);\r\n        _burn(_msgSender(), shares);\r\n        _afterBurning(amount);\r\n        emit Withdraw(_msgSender(), shares, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate and returns price per share of the pool.\r\n     */\r\n    function getPricePerShare() external view returns (uint256) {\r\n        return totalValue().mul(1e18).div(totalSupply());\r\n    }\r\n\r\n    /**\r\n     * @dev Convert to 18 decimals from token defined decimals. Default no conversion.\r\n     */\r\n    function convertTo18(uint256 amount) public virtual pure returns (uint256) {\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Convert from 18 decimals to token defined decimals. Default no conversion.\r\n     */\r\n    function convertFrom18(uint256 amount) public virtual pure returns (uint256) {\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored in the pool.\r\n     */\r\n    function tokensHere() public virtual view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns sum of value locked in other contract and value stored in the pool.\r\n     */\r\n    function totalValue() public virtual view returns (uint256) {\r\n        return tokensHere();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called just before burning tokens. To be used i.e. if\r\n     * collateral is stored in a different contract and needs to be withdrawn.\r\n     */\r\n    function _beforeBurning(uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called just after burning tokens. To be used i.e. if\r\n     * collateral stored in a different/this contract needs to be transferred.\r\n     */\r\n    function _afterBurning(uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called just before minting new tokens. To be used i.e.\r\n     * if the deposited amount is to be transferred to a different contract.\r\n     */\r\n    function _beforeMinting(uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called just after minting new tokens. To be used i.e.\r\n     * if the minted token/share is to be transferred to a different contract.\r\n     */\r\n    function _afterMinting(uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Get withdraw fee for this pool\r\n     */\r\n    function _getFee() internal virtual view returns (uint256) {}\r\n\r\n    /**\r\n     * @dev Get fee collector address\r\n     */\r\n    function _getFeeCollector() internal virtual view returns (address) {}\r\n\r\n    /**\r\n     * @dev Calculate share based on share price and given amount.\r\n     */\r\n    function _calculateShares(uint256 amount) internal returns (uint256) {\r\n        require(amount != 0, \"Deposit must be greater than 0\");\r\n\r\n        uint256 _totalSupply = totalSupply();\r\n        uint256 _totalValue = convertTo18(totalValue()).sub(msg.value);\r\n        uint256 shares = (_totalSupply == 0 || _totalValue == 0)\r\n            ? amount\r\n            : amount.mul(_totalSupply).div(_totalValue);\r\n        return shares;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit incoming token and mint pool token i.e. shares.\r\n     */\r\n    function _deposit(uint256 amount) internal whenNotPaused {\r\n        uint256 shares = _calculateShares(convertTo18(amount));\r\n        _beforeMinting(amount);\r\n        _mint(_msgSender(), shares);\r\n        _afterMinting(amount);\r\n        emit Deposit(_msgSender(), shares, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Handle fee calculation and fee transfer to fee collector.\r\n     */\r\n    function _handleFee(uint256 shares) internal returns (uint256 _sharesAfterFee) {\r\n        if (_getFee() != 0) {\r\n            uint256 _fee = shares.mul(_getFee()).div(1e18);\r\n            _sharesAfterFee = shares.sub(_fee);\r\n            _transfer(_msgSender(), _getFeeCollector(), _fee);\r\n        } else {\r\n            _sharesAfterFee = shares;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Burns tokens and retuns the collateral value, after fee, of those.\r\n     */\r\n    function _withdraw(uint256 shares) internal whenNotShutdown {\r\n        require(shares != 0, \"Withdraw must be greater than 0\");\r\n        uint256 sharesAfterFee = _handleFee(shares);\r\n        uint256 amount = convertFrom18(\r\n            sharesAfterFee.mul(convertTo18(totalValue())).div(totalSupply())\r\n        );\r\n        _beforeBurning(amount);\r\n        _burn(_msgSender(), sharesAfterFee);\r\n        _afterBurning(amount);\r\n        emit Withdraw(_msgSender(), shares, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/Owned.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n// Requried one small change in openzeppelin version of ownable, so imported\r\n// source code here. Notice line 26 for change.\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    /**\r\n     * @dev Changed _owner from 'private' to 'internal'\r\n     */\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module extends Ownable and provide a way for safe transfer ownership.\r\n * New owner has to call acceptOwnership in order to complete ownership trasnfer.\r\n */\r\ncontract Owned is Ownable {\r\n    address private _newOwner;\r\n\r\n    /**\r\n     * @dev Initiate transfer ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner. Current owner will still be owner until\r\n     * new owner accept ownership.\r\n     * @param newOwner new owner address\r\n     */\r\n    function transferOwnership(address newOwner) public override onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows new owner to accept ownership of the contract.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == _newOwner, \"Caller is not the new owner\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n        _newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/vesper/ICollateralManager.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICollateralManager {\r\n    function addGemJoin(address[] calldata gemJoins) external;\r\n\r\n    function borrow(uint256 vaultNum, uint256 amount) external;\r\n\r\n    function debtToken() external view returns (address);\r\n\r\n    function depositCollateral(uint256 vaultNum, uint256 amount) external;\r\n\r\n    function getVaultBalance(uint256 vaultNum) external view returns (uint256 collateralLocked);\r\n\r\n    function getVaultDebt(uint256 vaultNum) external view returns (uint256 daiDebt);\r\n\r\n    function getVaultInfo(uint256 vaultNum)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 daiDebt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        );\r\n\r\n    function isEmpty(uint256 vaultNum) external view returns (bool);\r\n\r\n    function payback(uint256 vaultNum, uint256 amount) external;\r\n\r\n    function registerVault(uint256 vaultNum, bytes32 collateralType) external;\r\n\r\n    function vaultOwner(uint256 vaultNum) external returns (address owner);\r\n\r\n    function whatWouldWithdrawDo(uint256 vaultNum, uint256 amount)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 daiDebt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        );\r\n\r\n    function withdrawCollateral(uint256 vaultNum, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IVPool.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IVPool is IERC20 {\r\n    function approveToken(address spender) external;\r\n\r\n    function totalValue() external view returns (uint256);\r\n\r\n    function sweepErc20(address erc20) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function deregisterCollateralManager(address cm) external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function registerCollateralManager(address cm) external;\r\n\r\n    function resetApproval(address spender) external;\r\n\r\n    function token() external view returns (address);\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdrawETH(uint256 shares) external;\r\n}\r\n\r\n// File: contracts/Controller.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract Controller is Owned {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) public fee;\r\n    mapping(address => uint256) public rebalanceFriction;\r\n    mapping(address => address) public poolStrategy;\r\n    mapping(address => address) public poolCollateralManager;\r\n    mapping(address => address) public feeCollector;\r\n    mapping(address => uint256) public highWater;\r\n    mapping(address => uint256) public lowWater;\r\n    mapping(address => bool) public isPool;\r\n    address[] public pools;\r\n    mapping(address => address) public collateralToken;\r\n    address public builderVault;\r\n    uint256 public builderFee = 5e16;\r\n    uint256 internal constant WAT = 10**16;\r\n    address public constant AAVE_ADDRESSES_PROVIDER = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\r\n    address public uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address public mcdManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public mcdDaiJoin = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address public mcdSpot = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address public mcdJug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n\r\n    function addPool(address _pool) external onlyOwner {\r\n        require(_pool != address(0), \"invalid-pool\");\r\n        IERC20 pool = IERC20(_pool);\r\n        require(pool.totalSupply() == 0, \"Zero supply required\");\r\n        require(!isPool[_pool], \"already approved\");\r\n        isPool[_pool] = true;\r\n        collateralToken[_pool] = IVPool(_pool).token();\r\n        pools.push(_pool);\r\n    }\r\n\r\n    function removePool(uint256 _index) external onlyOwner {\r\n        IERC20 pool = IERC20(pools[_index]);\r\n        require(pool.totalSupply() == 0, \"Zero supply required\");\r\n        isPool[pools[_index]] = false;\r\n        if (_index < pools.length - 1) {\r\n            pools[_index] = pools[pools.length - 1];\r\n        }\r\n        pools.pop();\r\n    }\r\n\r\n    function updateBalancingFactor(\r\n        address _pool,\r\n        uint256 _highWater,\r\n        uint256 _lowWater\r\n    ) public onlyOwner {\r\n        require(isPool[_pool], \"Pool not approved\");\r\n        require(_lowWater != 0, \"Value is zero\");\r\n        require(_highWater > _lowWater, \"highWater is smaller than lowWater\");\r\n        highWater[_pool] = _highWater.mul(WAT);\r\n        lowWater[_pool] = _lowWater.mul(WAT);\r\n    }\r\n\r\n    function updateFee(address _pool, uint256 _newFee) external onlyOwner {\r\n        require(isPool[_pool], \"Pool not approved\");\r\n        require(_newFee <= 1e18, \"fee limit reached\");\r\n        require(fee[_pool] != _newFee, \"same-pool-fee\");\r\n        require(feeCollector[_pool] != address(0), \"FeeCollector not set\");\r\n        fee[_pool] = _newFee;\r\n    }\r\n\r\n    function updateFeeCollector(address _pool, address _collector) external onlyOwner {\r\n        require(isPool[_pool], \"Pool not approved\");\r\n        require(_collector != address(0), \"invalid-collector\");\r\n        require(feeCollector[_pool] != _collector, \"same-collector\");\r\n        feeCollector[_pool] = _collector;\r\n    }\r\n\r\n    function updateRebalanceFriction(address _pool, uint256 _f) external onlyOwner {\r\n        require(isPool[_pool], \"Pool not approved\");\r\n        require(rebalanceFriction[_pool] != _f, \"same-friction\");\r\n        rebalanceFriction[_pool] = _f;\r\n    }\r\n\r\n    function updateBuilderTreasure(address _builder) external onlyOwner {\r\n        builderVault = _builder;\r\n    }\r\n\r\n    function updateBuilderFee(uint256 _builderFee) external onlyOwner {\r\n        require(builderFee != _builderFee, \"same-builderFee\");\r\n        require(_builderFee <= 1e18, \"builder-fee-above-100%\");\r\n        builderFee = _builderFee;\r\n    }\r\n\r\n    function updateMCDAddress(\r\n        address _mcdManager,\r\n        address _mcdDaiJoin,\r\n        address _mcdSpot,\r\n        address _mcdJug\r\n    ) external onlyOwner {\r\n        mcdManager = _mcdManager;\r\n        mcdDaiJoin = _mcdDaiJoin;\r\n        mcdSpot = _mcdSpot;\r\n        mcdJug = _mcdJug;\r\n    }\r\n\r\n    function updateMCDGemJoin(address _cm, address[] calldata gemJoins) external onlyOwner {\r\n        ICollateralManager(_cm).addGemJoin(gemJoins);\r\n    }\r\n\r\n    function updatePoolCM(address _pool, address _newCM) external onlyOwner {\r\n        require(isPool[_pool], \"Pool not approved\");\r\n        require(_newCM != address(0), \"invalid-cm-address\");\r\n        address cm = poolCollateralManager[_pool];\r\n        require(cm != _newCM, \"same-cm\");\r\n\r\n        IVPool vpool = IVPool(_pool);\r\n        if (cm != address(0)) {\r\n            vpool.resetApproval(cm);\r\n            vpool.deregisterCollateralManager(cm);\r\n        }\r\n        poolCollateralManager[_pool] = _newCM;\r\n        vpool.registerCollateralManager(_newCM);\r\n        vpool.approveToken(_newCM);\r\n    }\r\n\r\n    function updatePoolStrategy(address _pool, address _newStrategy) external onlyOwner {\r\n        require(isPool[_pool], \"Pool not approved\");\r\n        require(_newStrategy != address(0), \"invalid-strategy-address\");\r\n        address strategy = poolStrategy[_pool];\r\n        require(strategy != _newStrategy, \"same-pool-strategy\");\r\n\r\n        IVPool vpool = IVPool(_pool);\r\n        if (strategy != address(0)) {\r\n            vpool.resetApproval(strategy);\r\n        }\r\n        poolStrategy[_pool] = _newStrategy;\r\n        vpool.approveToken(_newStrategy);\r\n    }\r\n\r\n    function updateUniswapRouter(address _uniswapRouter) external onlyOwner {\r\n        uniswapRouter = _uniswapRouter;\r\n    }\r\n\r\n    function aaveProvider() external pure returns (address) {\r\n        return AAVE_ADDRESSES_PROVIDER;\r\n    }\r\n\r\n    function getPoolCount() external view returns (uint256) {\r\n        return pools.length;\r\n    }\r\n\r\n    function getPools() external view returns (address[] memory) {\r\n        return pools;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IStrategyManager.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface StrategyManager {\r\n    function balanceOf(address pool) external view returns (uint256);\r\n\r\n    function isEmpty() external view returns (bool);\r\n\r\n    function isUnderwater(uint256 vaultNum) external view returns (bool);\r\n\r\n    function paybackDebt(uint256 vaultNum, uint256 amount) external;\r\n\r\n    function rebalanceCollateral(uint256 vaulNum) external;\r\n\r\n    function rebalanceEarned(uint256 vaultNum) external;\r\n\r\n    function token() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/uniswap/IUniswapV2Router01.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/interfaces/uniswap/IUniswapV2Router02.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/VTokenBase.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ManagerInterface {\r\n    function vat() external view returns (address);\r\n\r\n    function open(bytes32, address) external returns (uint256);\r\n\r\n    function cdpAllow(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\ninterface VatInterface {\r\n    function hope(address) external;\r\n\r\n    function nope(address) external;\r\n}\r\n\r\nabstract contract VTokenBase is PoolShareToken, Owned {\r\n    uint256 public vaultNum;\r\n    bytes32 public immutable collateralType;\r\n    uint256 internal constant WAT = 10**16;\r\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    Controller public controller;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        bytes32 _collateralType,\r\n        address _token,\r\n        address _controller\r\n    ) public PoolShareToken(name, symbol, _token) {\r\n        require(_controller != address(0), \"Controller address is zero\");\r\n        collateralType = _collateralType;\r\n        controller = Controller(_controller);\r\n        vaultNum = createVault(_collateralType);\r\n    }\r\n\r\n    function approveToken(address spender) external virtual {\r\n        if (spender == controller.poolStrategy(address(this))) {\r\n            IERC20(token).approve(spender, MAX_UINT_VALUE);\r\n            IERC20(StrategyManager(spender).token()).approve(spender, MAX_UINT_VALUE);\r\n        } else if (spender == controller.poolCollateralManager(address(this))) {\r\n            IERC20(token).approve(spender, MAX_UINT_VALUE);\r\n            IERC20(ICollateralManager(spender).debtToken()).approve(spender, MAX_UINT_VALUE);\r\n        }\r\n    }\r\n\r\n    function deposit(uint256 amount) external override nonReentrant whenNotPaused {\r\n        require(_msgSender() == owner() || totalSupply() < 4e18, \"Test limit reached\");\r\n        _deposit(amount);\r\n    }\r\n\r\n    function resetApproval(address spender) external virtual {\r\n        require(_msgSender() == address(controller), \"Not a controller\");\r\n        if (spender == controller.poolStrategy(address(this))) {\r\n            IERC20(token).approve(spender, 0);\r\n            IERC20(StrategyManager(spender).token()).approve(spender, 0);\r\n        } else if (spender == controller.poolCollateralManager(address(this))) {\r\n            IERC20(token).approve(spender, 0);\r\n            IERC20(ICollateralManager(spender).debtToken()).approve(spender, 0);\r\n        }\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function shutdown() external onlyOwner {\r\n        _shutdown();\r\n    }\r\n\r\n    function open() external onlyOwner {\r\n        _open();\r\n    }\r\n\r\n    function deregisterCollateralManager(address _cm) external {\r\n        require(_msgSender() == address(controller), \"Not a controller\");\r\n        ManagerInterface manager = ManagerInterface(controller.mcdManager());\r\n        //nope and cpdAllow false on vat for collateralManager's address\r\n        VatInterface(manager.vat()).nope(_cm);\r\n        manager.cdpAllow(vaultNum, _cm, 0);\r\n    }\r\n\r\n    function registerCollateralManager(address _cm) external {\r\n        require(_msgSender() == address(controller), \"Not a controller\");\r\n        ManagerInterface manager = ManagerInterface(controller.mcdManager());\r\n        //hope and cpdAllow on vat for collateralManager's address\r\n        VatInterface(manager.vat()).hope(_cm);\r\n        manager.cdpAllow(vaultNum, _cm, 1);\r\n\r\n        //Register vault with collateral Manager\r\n        ICollateralManager(_cm).registerVault(vaultNum, collateralType);\r\n    }\r\n\r\n    function withdrawAll() external onlyOwner {\r\n        StrategyManager sm = StrategyManager(controller.poolStrategy(address(this)));\r\n        ICollateralManager cm = ICollateralManager(controller.poolCollateralManager(address(this)));\r\n        sm.rebalanceEarned(vaultNum);\r\n        uint256 earnBalance = sm.balanceOf(address(this));\r\n        sm.paybackDebt(vaultNum, earnBalance);\r\n        require(poolDebt() == 0, \"Debt should be 0\");\r\n        cm.withdrawCollateral(vaultNum, tokenLocked());\r\n    }\r\n\r\n    function rebalance() external {\r\n        require(\r\n            !stopEverything || (_msgSender() == owner()),\r\n            \"Contract has shutdown and is only callable by owner\"\r\n        );\r\n        StrategyManager sm = StrategyManager(controller.poolStrategy(address(this)));\r\n        ICollateralManager cm = ICollateralManager(controller.poolCollateralManager(address(this)));\r\n        sm.rebalanceEarned(vaultNum);\r\n        _depositCollateral(cm);\r\n        sm.rebalanceCollateral(vaultNum);\r\n    }\r\n\r\n    function rebalanceCollateral() external {\r\n        require(\r\n            !stopEverything || (_msgSender() == owner()),\r\n            \"Contract has shutdown and is only callable by owner\"\r\n        );\r\n        ICollateralManager cm = ICollateralManager(controller.poolCollateralManager(address(this)));\r\n        StrategyManager sm = StrategyManager(controller.poolStrategy(address(this)));\r\n        _depositCollateral(cm);\r\n        sm.rebalanceCollateral(vaultNum);\r\n    }\r\n\r\n    function rebalanceEarned() external {\r\n        require(\r\n            !stopEverything || (_msgSender() == owner()),\r\n            \"Contract has shutdown and is only callable by owner\"\r\n        );\r\n        StrategyManager sm = StrategyManager(controller.poolStrategy(address(this)));\r\n        sm.rebalanceEarned(vaultNum);\r\n    }\r\n\r\n    /**\r\n     * @dev If pool is underwater this function will get is back to water surface.\r\n     */\r\n    //TODO: what if Maker doesn't allow required collateral withdrawl?\r\n    function resurface() external {\r\n        require(\r\n            !stopEverything || (_msgSender() == owner()),\r\n            \"Contract has shutdown and is only callable by owner\"\r\n        );\r\n        ICollateralManager cm = ICollateralManager(controller.poolCollateralManager(address(this)));\r\n        address debtToken = cm.debtToken();\r\n        StrategyManager sm = StrategyManager(controller.poolStrategy(address(this)));\r\n        uint256 earnBalance = sm.balanceOf(address(this));\r\n        uint256 debt = cm.getVaultDebt(vaultNum);\r\n        require(debt > earnBalance, \"Pool is above water\");\r\n        uint256 shortAmount = debt.sub(earnBalance);\r\n\r\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\r\n        address[] memory path;\r\n        if (address(token) == WETH) {\r\n            path = new address[](2);\r\n            path[0] = address(token);\r\n            path[1] = debtToken;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = address(token);\r\n            path[1] = WETH;\r\n            path[2] = debtToken;\r\n        }\r\n        uint256 tokenNeeded = uniswapRouter.getAmountsIn(shortAmount, path)[0];\r\n\r\n        uint256 balanceHere = tokensHere();\r\n        if (balanceHere < tokenNeeded) {\r\n            cm.withdrawCollateral(vaultNum, tokenNeeded.sub(balanceHere));\r\n        }\r\n\r\n        token.approve(address(uniswapRouter), tokenNeeded);\r\n        uniswapRouter.swapExactTokensForTokens(tokenNeeded, 1, path, address(this), now + 30);\r\n        uint256 debtTokenBalance = IERC20(debtToken).balanceOf(address(this));\r\n        cm.payback(vaultNum, debtTokenBalance);\r\n    }\r\n\r\n    function isUnderwater() external view returns (bool) {\r\n        StrategyManager sm = StrategyManager(controller.poolStrategy(address(this)));\r\n        return sm.isUnderwater(vaultNum);\r\n    }\r\n\r\n    function tokenLocked() public view returns (uint256) {\r\n        ICollateralManager cm = ICollateralManager(controller.poolCollateralManager(address(this)));\r\n        return convertFrom18(cm.getVaultBalance(vaultNum));\r\n    }\r\n\r\n    function poolDebt() public view returns (uint256) {\r\n        ICollateralManager cm = ICollateralManager(controller.poolCollateralManager(address(this)));\r\n        return cm.getVaultDebt(vaultNum);\r\n    }\r\n\r\n    function totalValue() public override view returns (uint256) {\r\n        return tokenLocked().add(tokensHere());\r\n    }\r\n\r\n    function _getFee() internal override view returns (uint256) {\r\n        return controller.fee(address(this));\r\n    }\r\n\r\n    function _getFeeCollector() internal override view returns (address) {\r\n        return controller.feeCollector(address(this));\r\n    }\r\n\r\n    function _depositCollateral(ICollateralManager cm) internal {\r\n        uint256 balance = tokensHere();\r\n        if (balance != 0) {\r\n            cm.depositCollateral(vaultNum, balance);\r\n        }\r\n    }\r\n\r\n    function _withdrawCollateral(uint256 amount) internal {\r\n        ICollateralManager cm = ICollateralManager(controller.poolCollateralManager(address(this)));\r\n        StrategyManager sm = StrategyManager(controller.poolStrategy(address(this)));\r\n        require(!sm.isUnderwater(vaultNum), \"Pool is underwater\");\r\n\r\n        uint256 balanceHere = tokensHere();\r\n        if (balanceHere < amount) {\r\n            uint256 amountNeeded = amount.sub(balanceHere);\r\n            (\r\n                uint256 collateralLocked,\r\n                uint256 debt,\r\n                uint256 collateralUsdRate,\r\n                uint256 collateralRatio,\r\n                uint256 minimumDebt\r\n            ) = cm.whatWouldWithdrawDo(vaultNum, amountNeeded);\r\n            if (debt != 0 && collateralRatio < controller.lowWater(address(this))) {\r\n                // If this withdraw results in Low Water scenario.\r\n                uint256 maxDebt = collateralLocked.mul(collateralUsdRate).div(\r\n                    controller.highWater(address(this))\r\n                );\r\n                if (maxDebt < minimumDebt) {\r\n                    // This is Dusting scenario\r\n                    sm.paybackDebt(vaultNum, debt);\r\n                } else if (maxDebt < debt) {\r\n                    sm.paybackDebt(vaultNum, debt.sub(maxDebt));\r\n                }\r\n            }\r\n            cm.withdrawCollateral(vaultNum, amountNeeded);\r\n        }\r\n    }\r\n\r\n    function createVault(bytes32 _collateralType) internal returns (uint256 vaultId) {\r\n        ManagerInterface manager = ManagerInterface(controller.mcdManager());\r\n        vaultId = manager.open(_collateralType, address(this));\r\n        manager.cdpAllow(vaultId, address(this), 1);\r\n    }\r\n\r\n    function _sweepErc20(address from) internal {\r\n        ICollateralManager cm = ICollateralManager(controller.poolCollateralManager(address(this)));\r\n        StrategyManager sm = StrategyManager(controller.poolStrategy(address(this)));\r\n        require(\r\n            from != address(token) &&\r\n                from != address(this) &&\r\n                from != cm.debtToken() &&\r\n                from != sm.token(),\r\n            \"Not allowed to sweep\"\r\n        );\r\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(controller.uniswapRouter());\r\n        IERC20 fromToken = IERC20(from);\r\n        uint256 amt = fromToken.balanceOf(address(this));\r\n        fromToken.approve(address(uniswapRouter), amt);\r\n        address[] memory path;\r\n        if (address(token) == WETH) {\r\n            path = new address[](2);\r\n            path[0] = from;\r\n            path[1] = address(token);\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = from;\r\n            path[1] = WETH;\r\n            path[2] = address(token);\r\n        }\r\n        uniswapRouter.swapExactTokensForTokens(amt, 1, path, address(this), now + 30);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IToken.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface TokenLike {\r\n    function approve(address, uint256) external;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function transfer(address, uint256) external;\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\n// File: contracts/VETH.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract VETH is VTokenBase {\r\n    TokenLike public weth;\r\n    bool internal lockEth;\r\n\r\n    constructor(address _controller)\r\n        public\r\n        VTokenBase(\r\n            \"VETH Pool\",\r\n            \"VETH\",\r\n            \"ETH-A\",\r\n            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\r\n            _controller\r\n        )\r\n    {\r\n        weth = TokenLike(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    }\r\n\r\n    /**\r\n     * @dev Handle incoming ETH to the contract address.\r\n     */\r\n    receive() external payable {\r\n        if (!lockEth) {\r\n            deposit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Burns tokens/shares and retuns the ETH value, after fee, of those.\r\n     */\r\n    function withdrawETH(uint256 shares) external whenNotShutdown nonReentrant {\r\n        require(shares != 0, \"Withdraw must be greater than 0\");\r\n        uint256 sharesAfterFee = _handleFee(shares);\r\n        uint256 amount = sharesAfterFee.mul(totalValue()).div(totalSupply());\r\n        _burn(_msgSender(), sharesAfterFee);\r\n\r\n        _withdrawCollateral(amount);\r\n\r\n        // Unwrap WETH to ETH\r\n        lockEth = true;\r\n        weth.withdraw(amount);\r\n        lockEth = false;\r\n        _msgSender().transfer(amount);\r\n\r\n        emit Withdraw(_msgSender(), shares, amount);\r\n    }\r\n\r\n    function sweepErc20(address erc20) external {\r\n        _sweepErc20(erc20);\r\n    }\r\n\r\n    /**\r\n     * @dev Receives ETH and grants new tokens/shares to the sender depending\r\n     * on the value of pool's share.\r\n     */\r\n    function deposit() public payable whenNotPaused nonReentrant {\r\n        // Wraps ETH in WETH\r\n        weth.deposit{value: msg.value}();\r\n        uint256 shares = _calculateShares(msg.value);\r\n        _mint(_msgSender(), shares);\r\n    }\r\n\r\n    function _afterBurning(uint256 amount) internal override {\r\n        _withdrawCollateral(amount);\r\n        weth.transfer(_msgSender(), amount);\r\n    }\r\n\r\n    function _beforeMinting(uint256 amount) internal override {\r\n        weth.transferFrom(_msgSender(), address(this), amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract Controller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertTo18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cm\",\"type\":\"address\"}],\"name\":\"deregisterCollateralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnderwater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cm\",\"type\":\"address\"}],\"name\":\"registerCollateralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"resetApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resurface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEverything\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"sweepErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdrawByFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"VETH","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cb0fa55347a13873e0e513fa84e0b8c5836d9779","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://81c02fd7d3b0fa161c6251ca1c4a9542588d46053af73b88c8ed1daef00a76dc"}]}