{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/strategies/curve/interfaces/Gauge.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface Gauge {\r\n    function deposit(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function withdraw(uint) external;\r\n    function user_checkpoint(address) external;\r\n}\r\n\r\ninterface VotingEscrow {\r\n    function create_lock(uint256 v, uint256 time) external;\r\n    function increase_amount(uint256 _value) external;\r\n    function increase_unlock_time(uint256 _unlock_time) external;\r\n    function withdraw() external;\r\n}\r\n\r\ninterface Mintr {\r\n    function mint(address) external;\r\n}\r\n\r\n// File: contracts/strategies/curve/interfaces/ICurveFi.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface ICurveFi {\r\n  function get_virtual_price() external view returns (uint);\r\n  function add_liquidity(\r\n    uint256[4] calldata amounts,\r\n    uint256 min_mint_amount\r\n  ) external;\r\n  function remove_liquidity_imbalance(\r\n    uint256[4] calldata amounts,\r\n    uint256 max_burn_amount\r\n  ) external;\r\n  function remove_liquidity(\r\n    uint256 _amount,\r\n    uint256[4] calldata amounts\r\n  ) external;\r\n  function exchange(\r\n    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\r\n  ) external;\r\n  function calc_token_amount(\r\n    uint256[4] calldata amounts,\r\n    bool deposit\r\n  ) external view returns(uint);\r\n}\r\n\r\n// File: contracts/strategies/curve/interfaces/yVault.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface yERC20 {\r\n  function deposit(uint256 _amount) external;\r\n  function withdraw(uint256 _amount) external;\r\n  function getPricePerFullShare() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/strategies/curve/interfaces/IPriceConvertor.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IPriceConvertor {\r\n  function yCrvToUnderlying(uint256 _token_amount, uint256 i) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/hardworkInterface/IVault.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IVault {\r\n\r\n    function underlyingBalanceInVault() external view returns (uint256);\r\n    function underlyingBalanceWithInvestment() external view returns (uint256);\r\n\r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function strategy() external view returns (address);\r\n\r\n    function setStrategy(address _strategy) external;\r\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\r\n\r\n    function deposit(uint256 amountWei) external;\r\n    function depositFor(uint256 amountWei, address holder) external;\r\n\r\n    function withdrawAll() external;\r\n    function withdraw(uint256 numberOfShares) external;\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\r\n\r\n    // hard work should be callable only by the controller (by the hard worker) or by governance\r\n    function doHardWork() external;\r\n    function rebalance() external;\r\n}\r\n\r\n// File: contracts/hardworkInterface/IController.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IController {\r\n    // [Grey list]\r\n    // An EOA can safely interact with the system no matter what.\r\n    // If you're using Metamask, you're using an EOA.\r\n    // Only smart contracts may be affected by this grey list.\r\n    //\r\n    // This contract will not be able to ban any EOA from the system\r\n    // even if an EOA is being added to the greyList, he/she will still be able\r\n    // to interact with the whole system as if nothing happened.\r\n    // Only smart contracts will be affected by being added to the greyList.\r\n    // This grey list is only used in Vault.sol, see the code there for reference\r\n    function greyList(address _target) external view returns(bool);\r\n\r\n    function addVaultAndStrategy(address _vault, address _strategy) external;\r\n    function doHardWork(address _vault) external;\r\n    function hasVault(address _vault) external returns(bool);\r\n\r\n    function salvage(address _token, uint256 amount) external;\r\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\r\n\r\n    function notifyFee(address _underlying, uint256 fee) external;\r\n    function profitSharingNumerator() external view returns (uint256);\r\n    function profitSharingDenominator() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/hardworkInterface/IStrategy.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IStrategy {\r\n    \r\n    function unsalvagableTokens(address tokens) external view returns (bool);\r\n    \r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function vault() external view returns (address);\r\n\r\n    function withdrawAllToVault() external;\r\n    function withdrawToVault(uint256 amount) external;\r\n\r\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\r\n\r\n    // should only be called by controller\r\n    function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n    function doHardWork() external;\r\n    function depositArbCheck() external view returns(bool);\r\n}\r\n\r\n// File: contracts/Storage.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Storage {\r\n\r\n  address public governance;\r\n  address public controller;\r\n\r\n  constructor() public {\r\n    governance = msg.sender;\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setGovernance(address _governance) public onlyGovernance {\r\n    require(_governance != address(0), \"new governance shouldn't be empty\");\r\n    governance = _governance;\r\n  }\r\n\r\n  function setController(address _controller) public onlyGovernance {\r\n    require(_controller != address(0), \"new controller shouldn't be empty\");\r\n    controller = _controller;\r\n  }\r\n\r\n  function isGovernance(address account) public view returns (bool) {\r\n    return account == governance;\r\n  }\r\n\r\n  function isController(address account) public view returns (bool) {\r\n    return account == controller;\r\n  }\r\n}\r\n\r\n// File: contracts/Governable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ncontract Governable {\r\n\r\n  Storage public store;\r\n\r\n  constructor(address _store) public {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    store = Storage(_store);\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(store.isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setStorage(address _store) public onlyGovernance {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    store = Storage(_store);\r\n  }\r\n\r\n  function governance() public view returns (address) {\r\n    return store.governance();\r\n  }\r\n}\r\n\r\n// File: contracts/Controllable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ncontract Controllable is Governable {\r\n\r\n  constructor(address _storage) Governable(_storage) public {\r\n  }\r\n\r\n  modifier onlyController() {\r\n    require(store.isController(msg.sender), \"Not a controller\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyControllerOrGovernance(){\r\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\r\n      \"The caller must be controller or governance\");\r\n    _;\r\n  }\r\n\r\n  function controller() public view returns (address) {\r\n    return store.controller();\r\n  }\r\n}\r\n\r\n// File: contracts/strategies/curve/CRVStrategyStable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* The goal of this strategy is to take a stable asset (DAI, USDC, USDT), turn it into ycrv using\r\n* the curve mechanisms, and supply ycrv into the ycrv vault. The ycrv vault will likely not have\r\n* a reward token distribution pool to avoid double dipping. All the calls to functions from this\r\n* strategy will be routed to the controller which should then call the respective methods on the\r\n* ycrv vault. This strategy will not be liquidating any yield crops (CRV), because the strategy\r\n* of the ycrv vault will do that for us.\r\n*/\r\ncontract CRVStrategyStable is IStrategy, Controllable {\r\n\r\n  enum TokenIndex {DAI, USDC, USDT, TUSD}\r\n\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  // underlying asset\r\n  address public underlying;\r\n\r\n  // the matching enum record used to determine the index\r\n  TokenIndex tokenIndex;\r\n\r\n  // our vault holding the underlying asset\r\n  address public vault;\r\n\r\n  // the y-vault (yield tokens from Curve) corresponding to our asset\r\n  address public yVault;\r\n\r\n  // our vault for depositing the yCRV tokens\r\n  address public ycrvVault;\r\n\r\n  // the address of yCRV token\r\n  address public ycrv;\r\n\r\n  // the address of the Curve protocol\r\n  address public curve;\r\n\r\n  // the address of the IPriceConvertor\r\n  address public convertor;\r\n\r\n  // these tokens cannot be claimed by the governance\r\n  mapping(address => bool) public unsalvagableTokens;\r\n\r\n  uint256 public curvePriceCheckpoint;\r\n  uint256 public ycrvUnit;\r\n  uint256 public arbTolerance = 3;\r\n\r\n  modifier restricted() {\r\n    require(msg.sender == vault || msg.sender == controller()\r\n      || msg.sender == governance(),\r\n      \"The sender has to be the controller, governance, or vault\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _underlying,\r\n    address _vault,\r\n    address _ycrvVault,\r\n    address _yVault,\r\n    uint256 _tokenIndex,\r\n    address _ycrv,\r\n    address _curveProtocol,\r\n    address _convertor\r\n  )\r\n  Controllable(_storage) public {\r\n    vault = _vault;\r\n    ycrvVault = _ycrvVault;\r\n    underlying = _underlying;\r\n    tokenIndex = TokenIndex(_tokenIndex);\r\n    yVault = _yVault;\r\n    ycrv = _ycrv;\r\n    curve = _curveProtocol;\r\n    convertor = _convertor;\r\n\r\n    // set these tokens to be not salvageable\r\n    unsalvagableTokens[underlying] = true;\r\n    unsalvagableTokens[yVault] = true;\r\n    unsalvagableTokens[ycrv] = true;\r\n    unsalvagableTokens[ycrvVault] = true;\r\n\r\n    ycrvUnit = 10 ** 18;\r\n    // starting with a stable price, the mainnet will override this value\r\n    curvePriceCheckpoint = ycrvUnit;\r\n  }\r\n\r\n  function depositArbCheck() public view returns(bool) {\r\n    uint256 currentPrice = underlyingValueFromYCrv(ycrvUnit);\r\n    if (currentPrice < curvePriceCheckpoint) {\r\n      return currentPrice.mul(100).div(curvePriceCheckpoint) > 100 - arbTolerance;\r\n    } else {\r\n      return currentPrice.mul(100).div(curvePriceCheckpoint) < 100 + arbTolerance;\r\n    }\r\n  }\r\n\r\n  function setArbTolerance(uint256 tolerance) external onlyGovernance {\r\n    require(tolerance <= 100, \"at most 100\");\r\n    arbTolerance = tolerance;\r\n  }\r\n\r\n  /**\r\n  * Uses the Curve protocol to convert the underlying asset into yAsset and then to yCRV.\r\n  */\r\n  function yCurveFromUnderlying() internal {\r\n    // convert underlying asset to yAsset\r\n    uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));\r\n    if (underlyingBalance > 0) {\r\n      IERC20(underlying).safeApprove(yVault, 0);\r\n      IERC20(underlying).safeApprove(yVault, underlyingBalance);\r\n      yERC20(yVault).deposit(underlyingBalance);\r\n    }\r\n    // convert yAsset to yCRV\r\n    uint256 yBalance = IERC20(yVault).balanceOf(address(this));\r\n    if (yBalance > 0) {\r\n      IERC20(yVault).safeApprove(curve, 0);\r\n      IERC20(yVault).safeApprove(curve, yBalance);\r\n      // we can accept 0 as minimum because this is called only by a trusted role\r\n      uint256 minimum = 0;\r\n      uint256[4] memory coinAmounts = wrapCoinAmount(yBalance);\r\n      ICurveFi(curve).add_liquidity(\r\n        coinAmounts, minimum\r\n      );\r\n    }\r\n    // now we have yCRV\r\n  }\r\n\r\n  /**\r\n  * Uses the Curve protocol to convert the yCRV back into the underlying asset. If it cannot acquire\r\n  * the limit amount, it will acquire the maximum it can.\r\n  */\r\n  function yCurveToUnderlying(uint256 underlyingLimit) internal {\r\n    uint256 ycrvBalance = IERC20(ycrv).balanceOf(address(this));\r\n\r\n    // this is the maximum number of y-tokens we can get for our yCRV\r\n    uint256 yTokenMaximumAmount = yTokenValueFromYCrv(ycrvBalance);\r\n    if (yTokenMaximumAmount == 0) {\r\n      return;\r\n    }\r\n\r\n    // ensure that we will not overflow in the conversion\r\n    uint256 yTokenDesiredAmount = underlyingLimit == uint256(~0) ?\r\n      yTokenMaximumAmount : yTokenValueFromUnderlying(underlyingLimit);\r\n\r\n    uint256[4] memory yTokenAmounts = wrapCoinAmount(\r\n      Math.min(yTokenMaximumAmount, yTokenDesiredAmount));\r\n    uint256 yUnderlyingBalanceBefore = IERC20(yVault).balanceOf(address(this));\r\n    IERC20(ycrv).safeApprove(curve, 0);\r\n    IERC20(ycrv).safeApprove(curve, ycrvBalance);\r\n    ICurveFi(curve).remove_liquidity_imbalance(\r\n      yTokenAmounts, ycrvBalance\r\n    );\r\n    // now we have yUnderlying asset\r\n    uint256 yUnderlyingBalanceAfter = IERC20(yVault).balanceOf(address(this));\r\n    if (yUnderlyingBalanceAfter > yUnderlyingBalanceBefore) {\r\n      // we received new yUnderlying tokens for yCRV\r\n      yERC20(yVault).withdraw(yUnderlyingBalanceAfter.sub(yUnderlyingBalanceBefore));\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Withdraws an underlying asset from the strategy to the vault in the specified amount by asking\r\n  * the yCRV vault for yCRV (currently all of it), and then removing imbalanced liquidity from\r\n  * the Curve protocol. The rest is deposited back to the yCRV vault. If the amount requested cannot\r\n  * be obtained, the method will get as much as we have.\r\n  */\r\n  function withdrawToVault(uint256 amountUnderlying) external restricted {\r\n    // todo: If we want to be more accurate, we need to calculate how much yCRV we will need here\r\n    uint256 shares = IERC20(ycrvVault).balanceOf(address(this));\r\n    IVault(ycrvVault).withdraw(shares);\r\n    yCurveToUnderlying(amountUnderlying);\r\n    // we can transfer the asset to the vault\r\n    uint256 actualBalance = IERC20(underlying).balanceOf(address(this));\r\n    if (actualBalance > 0) {\r\n      IERC20(underlying).safeTransfer(vault, Math.min(amountUnderlying, actualBalance));\r\n    }\r\n\r\n    // invest back the rest\r\n    investAllUnderlying();\r\n  }\r\n\r\n  /**\r\n  * Withdraws all assets from the vault. We ask the yCRV vault to give us our entire yCRV balance\r\n  * and then convert it to the underlying asset using the Curve protocol.\r\n  */\r\n  function withdrawAllToVault() external restricted {\r\n    uint256 shares = IERC20(ycrvVault).balanceOf(address(this));\r\n    IVault(ycrvVault).withdraw(shares);\r\n    // withdraw everything until there is only dust left\r\n    yCurveToUnderlying(uint256(~0));\r\n    uint256 actualBalance = IERC20(underlying).balanceOf(address(this));\r\n    if (actualBalance > 0) {\r\n      IERC20(underlying).safeTransfer(vault, actualBalance);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Invests all underlying assets into our yCRV vault.\r\n  */\r\n  function investAllUnderlying() internal {\r\n    // convert the entire balance not yet invested into yCRV first\r\n    yCurveFromUnderlying();\r\n\r\n    // then deposit into the yCRV vault\r\n    uint256 ycrvBalance = IERC20(ycrv).balanceOf(address(this));\r\n    if (ycrvBalance > 0) {\r\n      IERC20(ycrv).safeApprove(ycrvVault, 0);\r\n      IERC20(ycrv).safeApprove(ycrvVault, ycrvBalance);\r\n      // deposits the entire balance and also asks the vault to invest it (public function)\r\n      IVault(ycrvVault).deposit(ycrvBalance);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * The hard work only invests all underlying assets, and then tells the controller to call hard\r\n  * work on the yCRV vault.\r\n  */\r\n  function doHardWork() public restricted {\r\n    investAllUnderlying();\r\n    curvePriceCheckpoint = underlyingValueFromYCrv(ycrvUnit);\r\n  }\r\n\r\n  /**\r\n  * Salvages a token. We cannot salvage the shares in the yCRV pool, yCRV tokens, or underlying\r\n  * assets.\r\n  */\r\n  function salvage(address recipient, address token, uint256 amount) public onlyGovernance {\r\n    // To make sure that governance cannot come in and take away the coins\r\n    require(!unsalvagableTokens[token], \"token is defined as not salvageable\");\r\n    IERC20(token).safeTransfer(recipient, amount);\r\n  }\r\n\r\n  /**\r\n  * Returns the underlying invested balance. This is the amount of yCRV that we are entitled to\r\n  * from the yCRV vault (based on the number of shares we currently have), converted to the\r\n  * underlying assets by the Curve protocol, plus the current balance of the underlying assets.\r\n  */\r\n  function investedUnderlyingBalance() public view returns (uint256) {\r\n    uint256 shares = IERC20(ycrvVault).balanceOf(address(this));\r\n    uint256 price = IVault(ycrvVault).getPricePerFullShare();\r\n    // the price is in yCRV units, because this is a yCRV vault\r\n    // the multiplication doubles the number of decimals for shares, so we need to divide\r\n    // the precision is always 10 ** 18 as the yCRV vault has 18 decimals\r\n    uint256 precision = 10 ** 18;\r\n    uint256 ycrvBalance = shares.mul(price).div(precision);\r\n    // now we can convert the balance to the token amount\r\n    uint256 ycrvValue = underlyingValueFromYCrv(ycrvBalance);\r\n    return ycrvValue.add(IERC20(underlying).balanceOf(address(this)));\r\n  }\r\n\r\n  /**\r\n  * Returns the value of yCRV in underlying token accounting for slippage and fees.\r\n  */\r\n  function yTokenValueFromYCrv(uint256 ycrvBalance) public view returns (uint256) {\r\n    return underlyingValueFromYCrv(ycrvBalance) // this is in DAI, we will convert to yDAI\r\n    .mul(10 ** 18)\r\n    .div(yERC20(yVault).getPricePerFullShare()); // function getPricePerFullShare() has 18 decimals for all tokens\r\n  }\r\n\r\n  /**\r\n  * Returns the value of yCRV in y-token (e.g., yCRV -> yDai) accounting for slippage and fees.\r\n  */\r\n  function underlyingValueFromYCrv(uint256 ycrvBalance) public view returns (uint256) {\r\n    return IPriceConvertor(convertor).yCrvToUnderlying(ycrvBalance, uint256(tokenIndex));\r\n  }\r\n\r\n  /**\r\n  * Returns the value of the underlying token in yToken\r\n  */\r\n  function yTokenValueFromUnderlying(uint256 amountUnderlying) public view returns (uint256) {\r\n    // 1 yToken = this much underlying, 10 ** 18 precision for all tokens\r\n    return amountUnderlying\r\n      .mul(10 ** 18)\r\n      .div(yERC20(yVault).getPricePerFullShare());\r\n  }\r\n\r\n  /**\r\n  * Wraps the coin amount in the array for interacting with the Curve protocol\r\n  */\r\n  function wrapCoinAmount(uint256 amount) internal view returns (uint256[4] memory) {\r\n    uint256[4] memory amounts = [uint256(0), uint256(0), uint256(0), uint256(0)];\r\n    amounts[uint56(tokenIndex)] = amount;\r\n    return amounts;\r\n  }\r\n\r\n  /**\r\n  * Replaces the price convertor\r\n  */\r\n  function setConvertor(address _convertor) public onlyGovernance {\r\n    // different price conversion from yCurve to yToken can help in emergency recovery situation\r\n    // or if there is a bug discovered in the price computation\r\n    convertor = _convertor;\r\n  }\r\n}\r\n\r\n// File: contracts/strategies/curve/PriceConvertor.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ninterface IConvertor {\r\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\r\n}\r\n\r\ncontract PriceConvertor is IPriceConvertor {\r\n\r\n  IConvertor public zap = IConvertor(0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3);\r\n\r\n  function yCrvToUnderlying(uint256 _token_amount, uint256 i) public view returns (uint256) {\r\n    // this returning the DAI amount, not yDAI\r\n    return zap.calc_withdraw_one_coin(_token_amount, int128(i));\r\n  }\r\n}\r\n\r\ncontract MockPriceConvertor is IPriceConvertor {\r\n  function yCrvToUnderlying(uint256 _token_amount, uint256 /* i */) public view returns (uint256) {\r\n    // counting 1:1\r\n    return _token_amount;\r\n  }\r\n}\r\n\r\n// File: contracts/strategies/curve/CRVStrategyStableMainnet.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n/**\r\n* Adds the mainnet addresses to the CRVStrategyStable\r\n*/\r\ncontract CRVStrategyStableMainnet is CRVStrategyStable {\r\n\r\n  // token addresses\r\n  // y-addresses are taken from: https://docs.yearn.finance/yearn.finance/yearn-1\r\n  address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n  address constant public ydai = address(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\r\n  address constant public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n  address constant public yusdc = address(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e);\r\n  address constant public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n  address constant public yusdt = address(0x83f798e925BcD4017Eb265844FDDAbb448f1707D);\r\n  address constant public tusd = address(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n  address constant public ytusd = address(0x73a052500105205d34Daf004eAb301916DA8190f);\r\n\r\n  // pre-defined constant mapping: underlying -> y-token\r\n  mapping(address => address) public yVaults;\r\n\r\n  // yDAIyUSDCyUSDTyTUSD\r\n  address constant public __ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\r\n\r\n  // protocols\r\n  address constant public __curve = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _underlying,\r\n    address _vault,\r\n    address _ycrvVault\r\n  )\r\n  CRVStrategyStable(_storage, _underlying, _vault, _ycrvVault, address(0), 0,\r\n    __ycrv,\r\n    __curve,\r\n    address(0)\r\n  )\r\n  public {\r\n    yVaults[dai] = ydai;\r\n    yVaults[usdc] = yusdc;\r\n    yVaults[usdt] = yusdt;\r\n    yVaults[tusd] = ytusd; \r\n    yVault = yVaults[underlying];\r\n    require(yVault != address(0), \"underlying not supported: yVault is not defined\");\r\n    if (_underlying == dai) {\r\n      tokenIndex = TokenIndex.DAI;\r\n    } else if (_underlying == usdc) {\r\n      tokenIndex = TokenIndex.USDC;\r\n    } else if (_underlying == usdt) {\r\n      tokenIndex = TokenIndex.USDT;\r\n    } else if (_underlying == tusd) {\r\n      tokenIndex = TokenIndex.TUSD;\r\n    } else {\r\n      revert(\"What is this asset?\");\r\n    }\r\n    convertor = address(new PriceConvertor());\r\n    curvePriceCheckpoint = underlyingValueFromYCrv(ycrvUnit);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ycrvVault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"__curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__ycrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"convertor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curvePriceCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositArbCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tolerance\",\"type\":\"uint256\"}],\"name\":\"setArbTolerance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_convertor\",\"type\":\"address\"}],\"name\":\"setConvertor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ycrvBalance\",\"type\":\"uint256\"}],\"name\":\"underlyingValueFromYCrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unsalvagableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"yTokenValueFromUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ycrvBalance\",\"type\":\"uint256\"}],\"name\":\"yTokenValueFromYCrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ycrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ycrvUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ycrvVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ydai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ytusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yusdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yusdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CRVStrategyStableMainnet","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"150","ConstructorArguments":"000000000000000000000000c95cbe4ca30055c787cb784be99d6a8494d0d1970000000000000000000000000000000000085d4780b73119b644ae5ecd22b3760000000000000000000000007674622c63bee7f46e86a4a5a18976693d54441b000000000000000000000000f2b223eb3d2b382ead8d85f3c1b7ef87c1d35f3a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f0f07aa462d0f8056118c6206dd811a14bd154e24f8037bed038fec76ca3f916"}]}