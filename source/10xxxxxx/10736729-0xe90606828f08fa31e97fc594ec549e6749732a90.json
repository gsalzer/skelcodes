{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract EEEMoney{\r\n    // SafeMath\r\n    using SafeMath for uint;\r\n    \r\n    // User struct\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint totalEarnedETH;\r\n        uint previousShare;\r\n        uint sharesHoldings;\r\n        uint directShare;\r\n        uint referralShare;\r\n        uint poolHoldings;\r\n        uint created;\r\n        address[] referral;\r\n    }\r\n    \r\n    // Public variables\r\n    address public ownerWallet;\r\n    address public splitOverWallet;\r\n    uint public poolMoney;\r\n    uint public qualifiedPoolHolding = 0.5 ether;\r\n    uint public invest = 0.25 ether;\r\n    uint public feePercentage = 0.0125 ether; \r\n    uint public currUserID = 0;\r\n    uint public qualify = 86400;\r\n    bool public lockStatus;\r\n    \r\n    // Mapping\r\n    mapping(address => UserStruct) public users;\r\n    mapping(address => uint) public userMoney;\r\n    mapping (uint => address) public userList;\r\n    \r\n    // Events\r\n    event regEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event poolMoneyEvent(address indexed _user, uint _money, uint _time);\r\n    event splitOverEvent(address indexed _user, uint _shareAmount, uint _userShares, uint _money, uint _time);\r\n    event userInversement(address indexed _user, uint _noOfShares, uint _amount, uint _time, uint investType);\r\n    event userWalletTransferEvent(address indexed _user, uint _amount, uint _percentage, uint _gasFee, uint _time);\r\n    event ownerWalletTransferEvent(address indexed _user, uint _percentage, uint _gasFee, uint _time);\r\n    \r\n    // On Deploy\r\n    constructor(address _splitOverWallet)public{\r\n        ownerWallet = msg.sender;\r\n        splitOverWallet = _splitOverWallet;\r\n        \r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n        \r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            totalEarnedETH: 0,\r\n            previousShare: 0,\r\n            sharesHoldings: 1000,\r\n            directShare: 0,\r\n            referralShare: 0,\r\n            poolHoldings: 0,\r\n            created:now.add(qualify),\r\n            referral: new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n    }\r\n    \r\n    /**\r\n     * @dev Fallback\r\n     */ \r\n    function () external payable {\r\n        revert(\"Invalid Transaction\");\r\n    }\r\n    \r\n    /**\r\n     * @dev To register the User\r\n     * @param _referrerID id of user/referrer \r\n     */\r\n    function regUser(uint _referrerID) public payable returns(bool){\r\n        require(\r\n            lockStatus == false,\r\n            \"Contract is locked\"\r\n        );\r\n        require(\r\n            !users[msg.sender].isExist,\r\n            \"User exist\"\r\n        );\r\n        require(\r\n            _referrerID > 0 && _referrerID <= currUserID,\r\n            \"Incorrect referrer Id\"\r\n        );\r\n        require(\r\n            msg.value == invest,\r\n            \"Incorrect Value\"\r\n        );\r\n        \r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            totalEarnedETH: 0,\r\n            previousShare: 0,\r\n            sharesHoldings: 1,\r\n            directShare: 0,\r\n            referralShare: 0,\r\n            poolHoldings: 0,\r\n            created:now.add(qualify),\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n        \r\n        users[userList[_referrerID]].sharesHoldings = users[userList[_referrerID]].sharesHoldings.add(1);\r\n        users[userList[_referrerID]].referralShare = users[userList[_referrerID]].referralShare.add(1);\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n    \r\n        uint _value = invest.div(2);\r\n        \r\n        require(\r\n            address(uint160(userList[_referrerID])).send(_value),\r\n            \"Transaction failed\"\r\n        );\r\n        users[userList[_referrerID]].totalEarnedETH = users[userList[_referrerID]].totalEarnedETH.add(_value);\r\n        \r\n        poolMoney = poolMoney.add(_value);\r\n        \r\n        emit poolMoneyEvent( msg.sender, _value, now);\r\n        emit regEvent(msg.sender, userList[_referrerID], now);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev To invest on shares\r\n     * @param _noOfShares No of shares \r\n     */\r\n    function investOnShare(uint _noOfShares) public payable returns(bool){\r\n        require(\r\n            lockStatus == false,\r\n            \"Contract is locked\"\r\n        );\r\n        require(\r\n            users[msg.sender].isExist,\r\n            \"User not exist\"\r\n        );\r\n        require(\r\n            msg.value == invest.mul(_noOfShares),\r\n            \"Incorrect Value\"\r\n        );\r\n        \r\n        uint _value = (msg.value).div(2);\r\n        address _referer = userList[users[msg.sender].referrerID];\r\n        require(\r\n            address(uint160(_referer)).send(_value),\r\n            \"Transaction failed\"\r\n        ); \r\n        \r\n        users[_referer].totalEarnedETH = users[_referer].totalEarnedETH.add(_value);\r\n        \r\n        users[msg.sender].directShare = users[msg.sender].directShare.add(_noOfShares);\r\n        users[msg.sender].sharesHoldings = users[msg.sender].sharesHoldings.add(_noOfShares);\r\n        \r\n        poolMoney = poolMoney.add(_value);\r\n        \r\n        emit poolMoneyEvent( msg.sender, _value, now);\r\n        emit userInversement( msg.sender, _noOfShares, msg.value, now, 1);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev To splitOver pool money\r\n     * @param _gasFee Gas fee \r\n     */\r\n    function splitOver(uint _gasFee) public returns(bool){\r\n        require(\r\n           splitOverWallet == msg.sender,\r\n            \"Invalid splitOverWallet\"\r\n        );\r\n        require(\r\n            poolMoney > 0,\r\n            \"pool money is zero\"\r\n        );\r\n        uint _totalShare = getQualfiedUsers(1, 0);\r\n        uint shareAmount = poolMoney.div(_totalShare);\r\n        \r\n        sendSplitShares( 1, shareAmount, _gasFee);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Contract balance withdraw\r\n     * @param _toUser  receiver addrress\r\n     * @param _amount  withdraw amount\r\n     */ \r\n    function failSafe(address payable _toUser, uint _amount) public returns (bool) {\r\n        require(msg.sender == ownerWallet, \"Only Owner Wallet\");\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev To lock/unlock the contract\r\n     * @param _lockStatus  status in bool\r\n     */\r\n    function contractLock(bool _lockStatus) public returns (bool) {\r\n        require(msg.sender == ownerWallet, \"Invalid ownerWallet\");\r\n\r\n        lockStatus = _lockStatus;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev To get qualified user\r\n     * @param _userIndex  User ID \r\n     * @param _totalShare  Users total share\r\n     */ \r\n    function getQualfiedUsers(uint _userIndex, uint _totalShare) public view returns(uint){\r\n        address _userAddress = userList[_userIndex];\r\n        if((users[_userAddress].sharesHoldings > users[_userAddress].previousShare) && (users[_userAddress].created < now)){\r\n           _totalShare = _totalShare.add((users[_userAddress].sharesHoldings.sub(users[_userAddress].previousShare)));\r\n           \r\n        }\r\n        _userIndex++;\r\n        if(_userIndex <= currUserID){\r\n           return this.getQualfiedUsers(_userIndex, _totalShare);\r\n        }\r\n        else{\r\n            return _totalShare;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev To view the referrals\r\n     * @param _user  User address\r\n     */ \r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n    \r\n    function getTotalEarnedEther() public view returns(uint) {\r\n        uint totalEth;\r\n        \r\n        for( uint _userIndex=1;_userIndex<= currUserID;_userIndex++) {\r\n            totalEth = totalEth.add(users[userList[_userIndex]].totalEarnedETH);\r\n        }\r\n        \r\n        return totalEth;\r\n    }\r\n    \r\n    function sendSplitShares(uint _userIndex, uint _shareAmount, uint _gasFee) internal {\r\n        \r\n        address _userAddress = userList[_userIndex];\r\n        if((users[_userAddress].sharesHoldings > users[_userAddress].previousShare) && (users[_userAddress].created < now)){\r\n            uint _shares = users[_userAddress].sharesHoldings.sub(users[_userAddress].previousShare);\r\n            uint _userShareAmount = _shareAmount.mul(_shares);\r\n            \r\n            poolMoney = poolMoney.sub(_userShareAmount);\r\n            users[_userAddress].poolHoldings = users[_userAddress].poolHoldings.add(_userShareAmount);\r\n            users[_userAddress].previousShare = users[_userAddress].sharesHoldings;\r\n            \r\n            if(users[_userAddress].poolHoldings >= qualifiedPoolHolding){\r\n                // re-Inversement\r\n                reInvest(_userAddress, _gasFee);\r\n            }\r\n            \r\n            \r\n            emit splitOverEvent( _userAddress, _shareAmount, _shares, _userShareAmount, now);\r\n            \r\n            \r\n        }\r\n        _userIndex++;\r\n        if(_userIndex <= currUserID){\r\n            sendSplitShares(_userIndex, _shareAmount, _gasFee);\r\n        }\r\n        \r\n    }\r\n    \r\n    function reInvest(address _userAddress, uint _gasFee) internal returns(bool) {\r\n        \r\n        uint _totalInvestingShare = users[_userAddress].poolHoldings.div(qualifiedPoolHolding);\r\n        uint _referervalue = invest.div(2);\r\n        uint _value = (_referervalue.mul(_totalInvestingShare));\r\n        \r\n        address _referer = userList[users[_userAddress].referrerID];\r\n\r\n        uint adminFee = feePercentage.mul(2);\r\n        uint gasFee = _gasFee.mul(2);\r\n        \r\n        if(_referer == address(0))\r\n            _referer = userList[1];\r\n        \r\n        require(\r\n            address(uint160(_referer)).send(_value),\r\n            \"re-inverset referer 50 percentage failed\"\r\n        );\r\n        \r\n        users[_referer].totalEarnedETH = users[_referer].totalEarnedETH.add(_value);\r\n        \r\n        users[_userAddress].directShare = users[_userAddress].directShare.add(_totalInvestingShare);\r\n        users[_userAddress].sharesHoldings = users[_userAddress].sharesHoldings.add(_totalInvestingShare);\r\n        \r\n        poolMoney = poolMoney.add(_value);\r\n        \r\n        // wallet\r\n        uint _walletAmount = invest.mul(_totalInvestingShare);\r\n        _walletAmount = _walletAmount.sub(adminFee.add(gasFee));\r\n        \r\n        require(\r\n            address(uint160(_userAddress)).send(_walletAmount) &&\r\n            address(uint160(ownerWallet)).send(adminFee.add(gasFee)),\r\n            \"user wallet transfer failed\"\r\n        );  \r\n        \r\n        users[_userAddress].poolHoldings = users[_userAddress].poolHoldings.sub(qualifiedPoolHolding.mul(_totalInvestingShare));\r\n        \r\n        emit userInversement( _userAddress, _totalInvestingShare, invest.mul(_totalInvestingShare), now, 2);\r\n        emit poolMoneyEvent( _userAddress, _value, now);\r\n        emit userWalletTransferEvent(_userAddress, _walletAmount, adminFee, gasFee, now);\r\n        emit ownerWalletTransferEvent(_userAddress, adminFee, gasFee, now);\r\n        \r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_splitOverWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ownerWalletTransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"poolMoneyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_money\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"splitOverEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_noOfShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investType\",\"type\":\"uint256\"}],\"name\":\"userInversement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"userWalletTransferEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalShare\",\"type\":\"uint256\"}],\"name\":\"getQualfiedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalEarnedEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noOfShares\",\"type\":\"uint256\"}],\"name\":\"investOnShare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"qualifiedPoolHolding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"qualify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"splitOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"splitOverWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMoney\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnedETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesHoldings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolHoldings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EEEMoney","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000979330f7aafd4e757066a70c4dbfaac8423cf8b0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d1dbcc1dcd411c135aaa6beee7a40e718aad3108c9706a506c3825149aad1faa"}]}