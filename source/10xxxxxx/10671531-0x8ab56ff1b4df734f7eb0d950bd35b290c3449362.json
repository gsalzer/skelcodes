{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  //event MintFinished();\r\n\r\n  //bool public mintingFinished = false;\r\n\r\n  /*\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n  */\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) internal returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   \r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  */\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Contracts that should not own Ether\r\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\r\n * in the contract, it will allow the owner to reclaim this ether.\r\n * @notice Ether can still be send to this contract by:\r\n * calling functions labeled `payable`\r\n * `selfdestruct(contract_address)`\r\n * mining directly to the contract address\r\n*/\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  function HasNoEther() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    assert(owner.send(this.balance));\r\n  }\r\n}\r\n\r\n\r\n///* Remix format\r\n//import \"./MintableToken.sol\";\r\n//import \"./HasNoEther.sol\";\r\n\r\n\r\ncontract fmlink is MintableToken, HasNoEther \r\n{\r\n    // Using libraries \r\n    using SafeMath for uint;\r\n\r\n    //////////////////////////////////////////////////\r\n    /// State Variables for the fmlink token contract\r\n    //////////////////////////////////////////////////\r\n    \r\n    //////////////////////\r\n    // ERC20 token state\r\n    //////////////////////\r\n    \r\n    /**\r\n    These state vars are handled in the OpenZeppelin libraries;\r\n    we display them here for the developer's information.\r\n    ***\r\n    // ERC20Basic - Store account balances\r\n    mapping (address => uint256) public balances;\r\n\r\n    // StandardToken - Owner of account approves transfer of an amount to another account\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    // \r\n    uint256 public totalSupply;\r\n    */\r\n    \r\n    //////////////////////\r\n    // Human token state\r\n    //////////////////////\r\n    string public constant name = \"fmlink.finance\";\r\n    string public constant symbol = \"fmlink\";\r\n    uint8 public constant  decimals = 18;\r\n\r\n    ///////////////////////////////////////////////////////////\r\n    // State vars for custom staking and budget functionality\r\n    ///////////////////////////////////////////////////////////\r\n\r\n    // Owner last minted time\r\n    uint public ownerTimeLastMinted;\r\n    // Owner minted tokens per second\r\n    uint public ownerMintRate;\r\n\r\n    /// Stake minting\r\n    // Minted tokens per second for all stakers\r\n    uint private globalMintRate;\r\n    // Total tokens currently staked\r\n    uint public totalfmlinkStaked; \r\n\r\n    // struct that will hold user stake\r\n    struct TokenStakeData {\r\n        uint initialStakeBalance;\r\n        uint initialStakeTime;\r\n        uint initialStakePercentage;\r\n        address stakeSplitAddress;\r\n    }\r\n    \r\n    // Track all tokens staked\r\n    mapping (address => TokenStakeData) public stakeBalances;\r\n\r\n    // Fire a loggable event when tokens are staked\r\n    event Stake(address indexed staker, address indexed stakeSplitAddress, uint256 value);\r\n\r\n    // Fire a loggable event when staked tokens are vested\r\n    event Vest(address indexed vester, address indexed stakeSplitAddress, uint256 stakedAmount, uint256 stakingGains);\r\n\r\n    //////////////////////////////////////////////////\r\n    /// Begin fmlink token functionality\r\n    //////////////////////////////////////////////////\r\n\r\n    /// @dev fmlink token constructor\r\n    function fmlink() public\r\n    {\r\n        // Define owner\r\n        owner = msg.sender;\r\n        // Define initial owner supply. (ether here is used only to get the decimals right)\r\n        uint _initOwnerSupply = 15000 ether;\r\n        // One-time bulk mint given to owner\r\n        bool _success = mint(msg.sender, _initOwnerSupply);\r\n        // Abort if initial minting failed for whatever reason\r\n        require(_success);\r\n\r\n        ////////////////////////////////////\r\n        // Set up state minting variables\r\n        ////////////////////////////////////\r\n\r\n        // Set last minted to current block.timestamp ('now')\r\n        ownerTimeLastMinted = now;\r\n        \r\n        // 4100 minted tokens per day, 86400 seconds in a day\r\n        ownerMintRate = calculateFraction(4100, 86400, decimals);\r\n        \r\n        // 5,000,000 targeted minted tokens per year via staking; 31,536,000 seconds per year\r\n        globalMintRate = calculateFraction(5000000, 31536000, decimals);\r\n    }\r\n\r\n    /// @dev staking function which allows users to stake an amount of tokens to gain interest for up to 10 days \r\n    function stakefmlink(uint _stakeAmount) external\r\n    {\r\n        // Require that tokens are staked successfully\r\n        require(stakeTokens(_stakeAmount));\r\n    }\r\n\r\n    /// @dev staking function which allows users to split the interest earned with another address\r\n    function stakefmlinkSplit(uint _stakeAmount, address _stakeSplitAddress) external\r\n    {\r\n        // Require that a fmlink split actually be split with an address\r\n        require(_stakeSplitAddress > 0);\r\n        // Store split address into stake mapping\r\n        stakeBalances[msg.sender].stakeSplitAddress = _stakeSplitAddress;\r\n        // Require that tokens are staked successfully\r\n        require(stakeTokens(_stakeAmount));\r\n\r\n    }\r\n\r\n    /// @dev allows users to reclaim any staked tokens\r\n    /// @return bool on success\r\n    function claimfmlink() external returns (bool success)\r\n    {\r\n        /// Sanity checks: \r\n        // require that there was some amount vested\r\n        require(stakeBalances[msg.sender].initialStakeBalance > 0);\r\n        // require that time has elapsed\r\n        require(now > stakeBalances[msg.sender].initialStakeTime);\r\n\r\n        // Calculate the time elapsed since the tokens were originally staked\r\n        uint _timePassedSinceStake = now.sub(stakeBalances[msg.sender].initialStakeTime);\r\n\r\n        // Calculate tokens to mint\r\n        uint _tokensToMint = calculateStakeGains(_timePassedSinceStake);\r\n\r\n        // Add the original stake back to the user's balance\r\n        balances[msg.sender] += stakeBalances[msg.sender].initialStakeBalance;\r\n        \r\n        // Subtract stake balance from totalfmlinkStaked\r\n        totalfmlinkStaked -= stakeBalances[msg.sender].initialStakeBalance;\r\n        \r\n        // Mint the new tokens; the new tokens are added to the user's balance\r\n        if (stakeBalances[msg.sender].stakeSplitAddress > 0) \r\n        {\r\n            // Splitting stake, so mint half to sender and half to stakeSplitAddress\r\n            mint(msg.sender, _tokensToMint.div(2));\r\n            mint(stakeBalances[msg.sender].stakeSplitAddress, _tokensToMint.div(2));\r\n        } else {\r\n            // Not spliting stake; mint all new tokens and give them to msg.sender \r\n            mint(msg.sender, _tokensToMint);\r\n        }\r\n        \r\n        // Fire an event to tell the world of the newly vested tokens\r\n        Vest(msg.sender, stakeBalances[msg.sender].stakeSplitAddress, stakeBalances[msg.sender].initialStakeBalance, _tokensToMint);\r\n\r\n        // Clear out stored data from mapping\r\n        stakeBalances[msg.sender].initialStakeBalance = 0;\r\n        stakeBalances[msg.sender].initialStakeTime = 0;\r\n        stakeBalances[msg.sender].initialStakePercentage = 0;\r\n        stakeBalances[msg.sender].stakeSplitAddress = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows user to check their staked balance\r\n    function getStakedBalance() view external returns (uint stakedBalance) \r\n    {\r\n        return stakeBalances[msg.sender].initialStakeBalance;\r\n    }\r\n\r\n    /// @dev allows contract owner to claim their mint\r\n    function ownerClaim() external onlyOwner\r\n    {\r\n        // Sanity check: ensure that we didn't travel back in time\r\n        require(now > ownerTimeLastMinted);\r\n        \r\n        uint _timePassedSinceLastMint;\r\n        uint _tokenMintCount;\r\n        bool _mintingSuccess;\r\n\r\n        // Calculate the number of seconds that have passed since the owner last took a claim\r\n        _timePassedSinceLastMint = now.sub(ownerTimeLastMinted);\r\n\r\n        // Sanity check: ensure that some time has passed since the owner last claimed\r\n        assert(_timePassedSinceLastMint > 0);\r\n\r\n        // Determine the token mint amount, determined from the number of seconds passed and the ownerMintRate\r\n        _tokenMintCount = calculateMintTotal(_timePassedSinceLastMint, ownerMintRate);\r\n\r\n        // Mint the owner's tokens; this also increases totalSupply\r\n        _mintingSuccess = mint(msg.sender, _tokenMintCount);\r\n\r\n        // Sanity check: ensure that the minting was successful\r\n        require(_mintingSuccess);\r\n        \r\n        // New minting was a success! Set last time minted to current block.timestamp (now)\r\n        ownerTimeLastMinted = now;\r\n    }\r\n\r\n    /// @dev stake function reduces the user's total available balance. totalSupply is unaffected\r\n    /// @param _value determines how many tokens a user wants to stake\r\n    function stakeTokens(uint256 _value) private returns (bool success)\r\n    {\r\n        /// Sanity Checks:\r\n        // You can only stake as many tokens as you have\r\n        require(_value <= balances[msg.sender]);\r\n        // You can only stake tokens if you have not already staked tokens\r\n        require(stakeBalances[msg.sender].initialStakeBalance == 0);\r\n\r\n        // Subtract stake amount from regular token balance\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n        // Add stake amount to staked balance\r\n        stakeBalances[msg.sender].initialStakeBalance = _value;\r\n\r\n        // Increment the global staked tokens value\r\n        totalfmlinkStaked += _value;\r\n\r\n        /// Determine percentage of global stake\r\n        stakeBalances[msg.sender].initialStakePercentage = calculateFraction(_value, totalfmlinkStaked, decimals);\r\n        \r\n        // Save the time that the stake started\r\n        stakeBalances[msg.sender].initialStakeTime = now;\r\n\r\n        // Fire an event to tell the world of the newly staked tokens\r\n        Stake(msg.sender, stakeBalances[msg.sender].stakeSplitAddress, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Helper function to claimStake that modularizes the minting via staking calculation \r\n    function calculateStakeGains(uint _timePassedSinceStake) view private returns (uint mintTotal)\r\n    {\r\n        // Store seconds in a day (need it in variable to use SafeMath)\r\n        uint _secondsPerDay = 86400;\r\n        uint _finalStakePercentage;     // store our stake percentage at the time of stake claim\r\n        uint _stakePercentageAverage;   // store our calculated average minting rate ((initial+final) / 2)\r\n        uint _finalMintRate;            // store our calculated final mint rate (in fmlink-per-second)\r\n        uint _tokensToMint = 0;         // store number of new tokens to be minted\r\n        \r\n        // Determine the amount to be newly minted upon vesting, if any\r\n        if (_timePassedSinceStake > _secondsPerDay) {\r\n            \r\n            /// We've passed the minimum staking time; calculate minting rate average ((initialRate + finalRate) / 2)\r\n            \r\n            // First, calculate our final stake percentage based upon the total amount of fmlink staked\r\n            _finalStakePercentage = calculateFraction(stakeBalances[msg.sender].initialStakeBalance, totalfmlinkStaked, decimals);\r\n\r\n            // Second, calculate average of initial and final stake percentage\r\n            _stakePercentageAverage = calculateFraction((stakeBalances[msg.sender].initialStakePercentage.add(_finalStakePercentage)), 2, 0);\r\n\r\n            // Finally, calculate our final mint rate (in fmlink-per-second)\r\n            _finalMintRate = globalMintRate.mul(_stakePercentageAverage); \r\n            _finalMintRate = _finalMintRate.div(1 ether);\r\n            \r\n            // Tokens were staked for enough time to mint new tokens; determine how many\r\n            if (_timePassedSinceStake > _secondsPerDay.mul(10)) {\r\n                // Tokens were staked for the maximum amount of time (10 days)\r\n                _tokensToMint = calculateMintTotal(_secondsPerDay.mul(10), _finalMintRate);\r\n            } else {\r\n                // Tokens were staked for a mintable amount of time, but less than the 10-day max\r\n                _tokensToMint = calculateMintTotal(_timePassedSinceStake, _finalMintRate);\r\n            }\r\n        } \r\n        \r\n        // Return the amount of new tokens to be minted\r\n        return _tokensToMint;\r\n\r\n    }\r\n\r\n    /// @dev calculateFraction allows us to better handle the Solidity ugliness of not having decimals as a native type \r\n    /// @param _numerator is the top part of the fraction we are calculating\r\n    /// @param _denominator is the bottom part of the fraction we are calculating\r\n    /// @param _precision tells the function how many significant digits to calculate out to\r\n    /// @return quotient returns the result of our fraction calculation\r\n    function calculateFraction(uint _numerator, uint _denominator, uint _precision) pure private returns(uint quotient) \r\n    {\r\n        // Take passed value and expand it to the required precision\r\n        _numerator = _numerator.mul(10 ** (_precision + 1));\r\n        // handle last-digit rounding\r\n        uint _quotient = ((_numerator.div(_denominator)) + 5) / 10;\r\n        return (_quotient);\r\n    }\r\n\r\n    /// @dev Determines mint total based upon how many seconds have passed\r\n    /// @param _timeInSeconds takes the time that has elapsed since the last minting\r\n    /// @return uint with the calculated number of new tokens to mint\r\n    function calculateMintTotal(uint _timeInSeconds, uint _mintRate) pure private returns(uint mintAmount)\r\n    {\r\n        // Calculates the amount of tokens to mint based upon the number of seconds passed\r\n        return(_timeInSeconds.mul(_mintRate));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalfmlinkStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeBalances\",\"outputs\":[{\"name\":\"initialStakeBalance\",\"type\":\"uint256\"},{\"name\":\"initialStakeTime\",\"type\":\"uint256\"},{\"name\":\"initialStakePercentage\",\"type\":\"uint256\"},{\"name\":\"stakeSplitAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimfmlink\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stakefmlink\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakedBalance\",\"outputs\":[{\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"name\":\"_stakeSplitAddress\",\"type\":\"address\"}],\"name\":\"stakefmlinkSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerMintRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTimeLastMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"stakeSplitAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vester\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"stakeSplitAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakingGains\",\"type\":\"uint256\"}],\"name\":\"Vest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"fmlink","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://7a08c7c06726991bee2099ccd950de8c001f1a81eb024cfc09f7d2a55be20dfe"}]}