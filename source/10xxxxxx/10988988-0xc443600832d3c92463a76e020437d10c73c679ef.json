{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ISparkleTimestamp.sol\r\n\r\n\r\n/// SWC-103:  Floating Pragma\r\npragma solidity 0.6.12;\r\n\r\n// import \"../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\";\r\n// import \"../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\";\r\n// import \"../node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\";\r\n// import \"../node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @dev Sparkle Timestamp Contract\r\n * @author SparkleMobile Inc. (c) 2019-2020\r\n */\r\ninterface ISparkleTimestamp {\r\n\r\n  /**\r\n   * @dev Add new reward timestamp for address\r\n   * @param _rewardAddress being added to timestamp collection\r\n   */\r\n  function addTimestamp(address _rewardAddress)\r\n  external\r\n  returns(bool);\r\n\r\n  /**\r\n   * @dev Reset timestamp maturity for loyalty address\r\n   * @param _rewardAddress to have reward period reset\r\n   */\r\n  function resetTimestamp(address _rewardAddress)\r\n  external\r\n  returns(bool);\r\n\r\n  /**\r\n   * @dev Zero/delete existing loyalty timestamp entry\r\n   * @param _rewardAddress being requested for timestamp deletion\r\n   * @notice Test(s) not passed\r\n   */\r\n  function deleteTimestamp(address _rewardAddress)\r\n  external\r\n  returns(bool);\r\n\r\n  /**\r\n   * @dev Get address confirmation for loyalty address\r\n   * @param _rewardAddress being queried for address information\r\n   */\r\n  function getAddress(address _rewardAddress)\r\n  external\r\n  returns(address);\r\n\r\n  /**\r\n   * @dev Get timestamp of initial joined timestamp for loyalty address\r\n   * @param _rewardAddress being queried for timestamp information\r\n   */\r\n  function getJoinedTimestamp(address _rewardAddress)\r\n  external\r\n  returns(uint256);\r\n\r\n  /**\r\n   * @dev Get timestamp of last deposit for loyalty address\r\n   * @param _rewardAddress being queried for timestamp information\r\n   */\r\n  function getDepositTimestamp(address _rewardAddress)\r\n  external\r\n  returns(uint256);\r\n\r\n  /**\r\n   * @dev Get timestamp of reward maturity for loyalty address\r\n   * @param _rewardAddress being queried for timestamp information\r\n   */\r\n  function getRewardTimestamp(address _rewardAddress)\r\n  external\r\n  returns(uint256);\r\n\r\n  /**\r\n   * @dev Determine if address specified has a timestamp record\r\n   * @param _rewardAddress being queried for timestamp existance\r\n   */\r\n  function hasTimestamp(address _rewardAddress)\r\n  external\r\n  returns(bool);\r\n\r\n  /**\r\n   * @dev Calculate time remaining in seconds until this address' reward matures\r\n   * @param _rewardAddress to query remaining time before reward matures\r\n   */\r\n  function getTimeRemaining(address _rewardAddress)\r\n  external\r\n  returns(uint256, bool, uint256);\r\n\r\n  /**\r\n   * @dev Determine if reward is mature for  address\r\n   * @param _rewardAddress Address requesting addition in to loyalty timestamp collection\r\n   */\r\n  function isRewardReady(address _rewardAddress)\r\n  external\r\n  returns(bool);\r\n\r\n  /**\r\n   * @dev Change the stored loyalty controller contract address\r\n   * @param _newAddress of new loyalty controller contract address\r\n   */\r\n  function setContractAddress(address _newAddress)\r\n  external;\r\n\r\n  /**\r\n   * @dev Return the stored authorized controller address\r\n   * @return Address of loyalty controller contract\r\n   */\r\n  function getContractAddress()\r\n  external\r\n  returns(address);\r\n\r\n  /**\r\n   * @dev Change the stored loyalty time period\r\n   * @param _newTimePeriod of new reward period (in seconds)\r\n   */\r\n  function setTimePeriod(uint256 _newTimePeriod)\r\n  external;\r\n\r\n  /**\r\n   * @dev Return the current loyalty timer period\r\n   * @return Current stored value of loyalty time period\r\n   */\r\n  function getTimePeriod()\r\n  external\r\n  returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Event signal: Reset timestamp\r\n\t */\r\n  event ResetTimestamp(address _rewardAddress);\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty contract address waws changed\r\n\t */\r\n\tevent ContractAddressChanged(address indexed _previousAddress, address indexed _newAddress);\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty reward time period was changed\r\n\t */\r\n\tevent TimePeriodChanged( uint256 indexed _previousTimePeriod, uint256 indexed _newTimePeriod);\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty reward timestamp was added\r\n\t */\r\n\tevent TimestampAdded( address indexed _newTimestampAddress );\r\n\r\n\t/**\r\n\t * @dev Event signal: Loyalty reward timestamp was removed\r\n\t */\r\n\tevent TimestampDeleted( address indexed _newTimestampAddress );\r\n\r\n  /**\r\n   * @dev Event signal: Timestamp for address was reset\r\n   */\r\n  event TimestampReset(address _rewardAddress);\r\n\r\n}\r\n\r\n// File: contracts/ISparkleRewardTiers.sol\r\n\r\n\r\n/// SWC-103:  Floating Pragma\r\npragma solidity 0.6.12;\r\n\r\n// import '../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol';\r\n// import '../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol';\r\n// import '../node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol';\r\n// import '../node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol';\r\n\r\n/**\r\n  * @title A contract for managing reward tiers\r\n  * @author SparkleLoyalty Inc. (c) 2019-2020\r\n  */\r\n// interface ISparkleRewardTiers is Ownable, Pausable, ReentrancyGuard {\r\ninterface ISparkleRewardTiers {\r\n\r\n  /**\r\n    * @dev Add a new reward tier to the contract for future proofing\r\n    * @param _index of the new reward tier to add\r\n    * @param _rate of the added reward tier\r\n    * @param _price of the added reward tier\r\n    * @param _enabled status of the added reward tier\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function addTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\r\n  external\r\n  // view\r\n  // onlyOwner\r\n  // whenNotPaused\r\n  // nonReentrant\r\n  returns(bool);\r\n\r\n  /**\r\n    * @dev Update an existing reward tier with new values\r\n    * @param _index of reward tier to update\r\n    * @param _rate of the reward tier\r\n    * @param _price of the reward tier\r\n    * @param _enabled status of the reward tier\r\n    * @return (bool) indicating success/failure\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function updateTier(uint256 _index, uint256 _rate, uint256 _price, bool _enabled)\r\n  external\r\n  // view\r\n  // onlyOwner\r\n  // whenNotPaused\r\n  // nonReentrant\r\n  returns(bool);\r\n\r\n  /**\r\n    * @dev Remove an existing reward tier from list of tiers\r\n    * @param _index of reward tier to remove\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function deleteTier(uint256 _index)\r\n  external\r\n  // view\r\n  // onlyOwner\r\n  // whenNotPaused\r\n  // nonReentrant\r\n  returns(bool);\r\n\r\n  /**\r\n    * @dev Get the rate value of specified tier\r\n    * @param _index of tier to query\r\n    * @return specified reward tier rate\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function getRate(uint256 _index)\r\n  external\r\n  // view\r\n  // whenNotPaused\r\n  returns(uint256);\r\n\r\n  /**\r\n    * @dev Get price of tier\r\n    * @param _index of tier to query\r\n    * @return uint256 indicating tier price\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function getPrice(uint256 _index)\r\n  external\r\n  // view\r\n  // whenNotPaused\r\n  returns(uint256);\r\n\r\n  /**\r\n    * @dev Get the enabled status of tier\r\n    * @param _index of tier to query\r\n    * @return bool indicating status of tier\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function getEnabled(uint256 _index)\r\n  external\r\n  // view\r\n  // whenNotPaused\r\n  returns(bool);\r\n\r\n  /**\r\n    * @dev Withdraw ether that has been sent directly to the contract\r\n    * @return bool indicating withdraw success\r\n    * @notice Test(s) Need rewrite\r\n    */\r\n  function withdrawEth()\r\n  external\r\n  // onlyOwner\r\n  // whenNotPaused\r\n  // nonReentrant\r\n  returns(bool);\r\n\r\n  /**\r\n    * @dev Event triggered when a reward tier is deleted\r\n    * @param _index of tier to deleted\r\n    */\r\n  event TierDeleted(uint256 _index);\r\n\r\n  /**\r\n    * @dev Event triggered when a reward tier is updated\r\n    * @param _index of the updated tier\r\n    * @param _rate of updated tier\r\n    * @param _price of updated tier\r\n    * @param _enabled status of updated tier\r\n    */\r\n  event TierUpdated(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\r\n\r\n  /**\r\n    * @dev Event triggered when a new reward tier is added\r\n    * @param _index of the tier added\r\n    * @param _rate of added tier\r\n    * @param _price of added tier\r\n    * @param _enabled status of added tier\r\n    */\r\n  event TierAdded(uint256 _index, uint256 _rate, uint256 _price, bool _enabled);\r\n\r\n}\r\n\r\n// File: contracts/SparkleLoyalty.sol\r\n\r\n\r\n/// SWC-103:  Floating Pragma\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Sparkle Loyalty Rewards\r\n  * @author SparkleMobile Inc.\r\n  */\r\ncontract SparkleLoyalty is Ownable, Pausable, ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev Ensure math safety through SafeMath\r\n   */\r\n  using SafeMath for uint256;\r\n\r\n  // Gas to send with certain transations that may cost more in the future due to chain growth\r\n  uint256 private gasToSendWithTX = 25317;\r\n  // Base rate APR (5%) factored to 365.2422 gregorian days\r\n  uint256 private baseRate = 0.00041069 * 10e7; // A full year is 365.2422 gregorian days (5%)\r\n\r\n  // Account data structure\r\n  struct Account {\r\n    address _address; // Loyalty reward address\r\n    uint256 _balance; // Total tokens deposited\r\n    uint256 _collected; // Total tokens collected\r\n    uint256 _claimed; // Total succesfull reward claims\r\n    uint256 _joined; // Total times address has joined\r\n    uint256 _tier; // Tier index of reward tier\r\n    bool _isLocked; // Is the account locked\r\n  }\r\n\r\n  // tokenAddress of erc20 token address\r\n  address private tokenAddress;\r\n\r\n  // timestampAddress of time stamp contract address\r\n  address private timestampAddress;\r\n\r\n  // treasuryAddress of token treeasury address\r\n  address private treasuryAddress;\r\n\r\n  // collectionAddress to receive eth payed for tier upgrades\r\n  address private collectionAddress;\r\n\r\n  // rewardTiersAddress to resolve reward tier specifications\r\n  address private tiersAddress;\r\n\r\n  // minProofRequired to deposit of rewards to be eligibile\r\n  uint256 private minRequired;\r\n\r\n  // maxProofAllowed for deposit to be eligibile\r\n  uint256 private maxAllowed;\r\n\r\n  // totalTokensClaimed of all rewards awarded\r\n  uint256 private totalTokensClaimed;\r\n\r\n  // totalTimesClaimed of all successfully claimed rewards\r\n  uint256 private totalTimesClaimed;\r\n\r\n  // totalActiveAccounts count of all currently active addresses\r\n  uint256 private totalActiveAccounts;\r\n\r\n  // Accounts mapping of user loyalty records\r\n  mapping(address => Account) private accounts;\r\n\r\n  /**\r\n   * @dev Sparkle Loyalty Rewards Program contract .cTor\r\n   * @param _tokenAddress of token used for proof of loyalty rewards\r\n   * @param _treasuryAddress of proof of loyalty token reward distribution\r\n   * @param _collectionAddress of ethereum account to collect tier upgrade eth\r\n   * @param _tiersAddress of the proof of loyalty tier rewards support contract\r\n   * @param _timestampAddress of the proof of loyalty timestamp support contract\r\n  */\r\n  constructor(address _tokenAddress, address _treasuryAddress, address _collectionAddress, address _tiersAddress, address _timestampAddress)\r\n  public\r\n  Ownable()\r\n  Pausable()\r\n  ReentrancyGuard()\r\n  {\r\n    // Initialize contract internal addresse(s) from params\r\n    tokenAddress = _tokenAddress;\r\n    treasuryAddress = _treasuryAddress;\r\n    collectionAddress = _collectionAddress;\r\n    tiersAddress = _tiersAddress;\r\n    timestampAddress = _timestampAddress;\r\n\r\n    // Initialize minimum/maximum allowed deposit limits\r\n    minRequired = uint256(1000).mul(10e7);\r\n    maxAllowed = uint256(250000).mul(10e7);\r\n  }\r\n\r\n  /**\r\n   * @dev Deposit additional tokens to a reward address loyalty balance\r\n   * @param _depositAmount of tokens to deposit into  a reward address balance\r\n   * @return bool indicating the success of the deposit operation (true == success)\r\n   */\r\n  function depositLoyalty(uint _depositAmount)\r\n  public\r\n  whenNotPaused\r\n  nonReentrant\r\n  returns (bool)\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}1');\r\n    // Validate specified value meets minimum requirements\r\n    require(_depositAmount >= minRequired, 'Minimum required');\r\n\r\n    // Determine if caller has approved enough allowance for this deposit\r\n    if(IERC20(tokenAddress).allowance(msg.sender, address(this)) < _depositAmount) {\r\n      // No, rever informing that deposit amount exceeded allownce amount\r\n      revert('Exceeds allowance');\r\n    }\r\n\r\n    // Obtain a storage instsance of callers account record\r\n    Account storage loyaltyAccount = accounts[msg.sender];\r\n\r\n    // Determine if there is an upper deposit cap\r\n    if(maxAllowed > 0) {\r\n      // Yes, determine if the deposit amount + current balance exceed max deposit cap\r\n      if(loyaltyAccount._balance.add(_depositAmount) > maxAllowed || _depositAmount > maxAllowed) {\r\n        // Yes, revert informing that the maximum deposit cap has been exceeded\r\n        revert('Exceeds cap');\r\n      }\r\n\r\n    }\r\n\r\n    // Determine if the tier selected is enabled\r\n    if(!ISparkleRewardTiers(tiersAddress).getEnabled(loyaltyAccount._tier)) {\r\n      // No, then this tier cannot be selected\r\n      revert('Invalid tier');\r\n    }\r\n\r\n    // Determine of transfer from caller has succeeded\r\n    if(IERC20(tokenAddress).transferFrom(msg.sender, address(this), _depositAmount)) {\r\n      // Yes, thend determine if the specified address has a timestamp record\r\n      if(ISparkleTimestamp(timestampAddress).hasTimestamp(msg.sender)) {\r\n        // Yes, update callers account balance by deposit amount\r\n        loyaltyAccount._balance = loyaltyAccount._balance.add(_depositAmount);\r\n        // Reset the callers reward timestamp\r\n        _resetTimestamp(msg.sender);\r\n        //\r\n        emit DepositLoyaltyEvent(msg.sender, _depositAmount, true);\r\n        // Return success\r\n        return true;\r\n      }\r\n\r\n      // Determine if a timestamp has been added for caller\r\n      if(!ISparkleTimestamp(timestampAddress).addTimestamp(msg.sender)) {\r\n        // No, revert indicating there was some kind of error\r\n        revert('No timestamp created');\r\n      }\r\n\r\n      // Prepare loyalty account record\r\n      loyaltyAccount._address = address(msg.sender);\r\n      loyaltyAccount._balance = _depositAmount;\r\n      loyaltyAccount._joined = loyaltyAccount._joined.add(1);\r\n      // Update global account counter\r\n      totalActiveAccounts = totalActiveAccounts.add(1);\r\n      //\r\n      emit DepositLoyaltyEvent(msg.sender, _depositAmount, false);\r\n      // Return success\r\n      return true;\r\n    }\r\n\r\n    // Return failure\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @dev Claim Sparkle Loyalty reward\r\n   */\r\n  function claimLoyaltyReward()\r\n  public\r\n  whenNotPaused\r\n  nonReentrant\r\n  returns(bool)\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}');\r\n    // Validate caller has a timestamp and it has matured\r\n    require(ISparkleTimestamp(timestampAddress).hasTimestamp(msg.sender), 'No record');\r\n    require(ISparkleTimestamp(timestampAddress).isRewardReady(msg.sender), 'Not mature');\r\n\r\n    // Obtain the current state of the callers timestamp\r\n    (uint256 timeRemaining, bool isReady, uint256 rewardDate) = ISparkleTimestamp(timestampAddress).getTimeRemaining(msg.sender);\r\n    // Determine if the callers reward has matured\r\n    if(isReady) {\r\n      // Value not used but throw unused var warning (cleanup)\r\n      rewardDate = 0;\r\n      // Yes, then obtain a storage instance of callers account record\r\n      Account storage loyaltyAccount = accounts[msg.sender];\r\n      // Obtain values required for caculations\r\n      uint256 dayCount = (timeRemaining.div(ISparkleTimestamp(timestampAddress).getTimePeriod())).add(1);\r\n      uint256 tokenBalance = loyaltyAccount._balance.add(loyaltyAccount._collected);\r\n      uint256 rewardRate = ISparkleRewardTiers(tiersAddress).getRate(loyaltyAccount._tier);\r\n      uint256 rewardTotal = baseRate.mul(tokenBalance).mul(rewardRate).mul(dayCount).div(10e7).div(10e7);\r\n      // Increment collected by reward total\r\n      loyaltyAccount._collected = loyaltyAccount._collected.add(rewardTotal);\r\n      // Increment total number of times a reward has been claimed\r\n      loyaltyAccount._claimed = loyaltyAccount._claimed.add(1);\r\n      // Incrememtn total number of times rewards have been collected by all\r\n      totalTimesClaimed = totalTimesClaimed.add(1);\r\n      // Increment total number of tokens claimed\r\n      totalTokensClaimed += rewardTotal;\r\n      // Reset the callers timestamp record\r\n      _resetTimestamp(msg.sender);\r\n      // Emit event log to the block chain for future web3 use\r\n      emit RewardClaimedEvent(msg.sender, rewardTotal);\r\n      // Return success\r\n      return true;\r\n    }\r\n\r\n    // Revert opposed to returning boolean (May or may not return a txreceipt)\r\n    revert('Failed claim');\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw the current deposit balance + any earned loyalty rewards\r\n   */\r\n  function withdrawLoyalty()\r\n  public\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}');\r\n    // validate that caller has a loyalty timestamp\r\n    require(ISparkleTimestamp(timestampAddress).hasTimestamp(msg.sender), 'No timestamp2');\r\n\r\n    // Determine if the account has been locked\r\n    if(accounts[msg.sender]._isLocked) {\r\n      // Yes, revert informing that this loyalty account has been locked\r\n      revert('Locked');\r\n    }\r\n\r\n    // Obtain values needed from account record before zeroing\r\n    uint256 joinCount = accounts[msg.sender]._joined;\r\n    uint256 collected = accounts[msg.sender]._collected;\r\n    uint256 deposit = accounts[msg.sender]._balance;\r\n    bool isLocked = accounts[msg.sender]._isLocked;\r\n    // Zero out the callers account record\r\n    Account storage account = accounts[msg.sender];\r\n    account._address = address(0x0);\r\n    account._balance = 0x0;\r\n    account._collected = 0x0;\r\n    account._joined = joinCount;\r\n    account._claimed = 0x0;\r\n    account._tier = 0x0;\r\n    // Preserve account lock even after withdraw (account always locked)\r\n    account._isLocked = isLocked;\r\n    // Decement the total number of active accounts\r\n    totalActiveAccounts = totalActiveAccounts.sub(1);\r\n\r\n    // Delete the callers timestamp record\r\n    _deleteTimestamp(msg.sender);\r\n\r\n    // Determine if transfer from treasury address is a success\r\n    if(!IERC20(tokenAddress).transferFrom(treasuryAddress, msg.sender, collected)) {\r\n      // No, revert indicating that the transfer and wisthdraw has failed\r\n      revert('Withdraw failed');\r\n    }\r\n\r\n    // Determine if transfer from contract address is a sucess\r\n    if(!IERC20(tokenAddress).transfer(msg.sender, deposit)) {\r\n      // No, revert indicating that the treansfer and withdraw has failed\r\n      revert('Withdraw failed');\r\n    }\r\n\r\n    // Emit event log to the block chain for future web3 use\r\n    emit LoyaltyWithdrawnEvent(msg.sender, deposit.add(collected));\r\n  }\r\n\r\n  function returnLoyaltyDeposit(address _rewardAddress)\r\n  public\r\n  whenNotPaused\r\n  onlyOwner\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}');\r\n    // validate that caller has a loyalty timestamp\r\n    require(ISparkleTimestamp(timestampAddress).hasTimestamp(_rewardAddress), 'No timestamp2');\r\n    // Validate that reward address is locked\r\n    require(accounts[_rewardAddress]._isLocked, 'Lock account first');\r\n    uint256 deposit = accounts[_rewardAddress]._balance;\r\n    Account storage account = accounts[_rewardAddress];\r\n    account._balance = 0x0;\r\n    // Determine if transfer from contract address is a sucess\r\n    if(!IERC20(tokenAddress).transfer(_rewardAddress, deposit)) {\r\n      // No, revert indicating that the treansfer and withdraw has failed\r\n      revert('Withdraw failed');\r\n    }\r\n\r\n    // Emit event log to the block chain for future web3 use\r\n    emit LoyaltyDepositWithdrawnEvent(_rewardAddress, deposit);\r\n  }\r\n\r\n  function returnLoyaltyCollected(address _rewardAddress)\r\n  public\r\n  whenNotPaused\r\n  onlyOwner\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}');\r\n    // validate that caller has a loyalty timestamp\r\n    require(ISparkleTimestamp(timestampAddress).hasTimestamp(_rewardAddress), 'No timestamp2b');\r\n    // Validate that reward address is locked\r\n    require(accounts[_rewardAddress]._isLocked, 'Lock account first');\r\n    uint256 collected = accounts[_rewardAddress]._collected;\r\n    Account storage account = accounts[_rewardAddress];\r\n    account._collected = 0x0;\r\n    // Determine if transfer from treasury address is a success\r\n    if(!IERC20(tokenAddress).transferFrom(treasuryAddress, _rewardAddress, collected)) {\r\n      // No, revert indicating that the transfer and wisthdraw has failed\r\n      revert('Withdraw failed');\r\n    }\r\n\r\n    // Emit event log to the block chain for future web3 use\r\n    emit LoyaltyCollectedWithdrawnEvent(_rewardAddress, collected);\r\n  }\r\n\r\n  function removeLoyaltyAccount(address _rewardAddress)\r\n  public\r\n  whenNotPaused\r\n  onlyOwner\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}');\r\n    // validate that caller has a loyalty timestamp\r\n    require(ISparkleTimestamp(timestampAddress).hasTimestamp(_rewardAddress), 'No timestamp2b');\r\n    // Validate that reward address is locked\r\n    require(accounts[_rewardAddress]._isLocked, 'Lock account first');\r\n    uint256 joinCount = accounts[_rewardAddress]._joined;\r\n    Account storage account = accounts[_rewardAddress];\r\n    account._address = address(0x0);\r\n    account._balance = 0x0;\r\n    account._collected = 0x0;\r\n    account._joined = joinCount;\r\n    account._claimed = 0x0;\r\n    account._tier = 0x0;\r\n    account._isLocked = false;\r\n    // Decement the total number of active accounts\r\n    totalActiveAccounts = totalActiveAccounts.sub(1);\r\n\r\n    // Delete the callers timestamp record\r\n    _deleteTimestamp(_rewardAddress);\r\n\r\n    emit LoyaltyAccountRemovedEvent(_rewardAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the locked status of the specified address\r\n   * @param _loyaltyAddress of account\r\n   * @return (bool) indicating locked status\r\n   */\r\n  function isLocked(address _loyaltyAddress)\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns (bool)\r\n  {\r\n    return accounts[_loyaltyAddress]._isLocked;\r\n  }\r\n\r\n  function lockAccount(address _rewardAddress, bool _value)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {from}');\r\n    require(_rewardAddress != address(0x0), 'Invalid {reward}');\r\n    // Validate specified address has timestamp\r\n    require(ISparkleTimestamp(timestampAddress).hasTimestamp(_rewardAddress), 'No timstamp');\r\n    // Set the specified address' locked status\r\n    accounts[_rewardAddress]._isLocked = _value;\r\n    // Emit event log to the block chain for future web3 use\r\n    emit LockedAccountEvent(_rewardAddress, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the storage address value of the specified address\r\n   * @param _loyaltyAddress of account\r\n   * @return (address) indicating the address stored calls account record\r\n   */\r\n  function getLoyaltyAddress(address _loyaltyAddress)\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(address)\r\n  {\r\n    return accounts[_loyaltyAddress]._address;\r\n  }\r\n\r\n  /**\r\n   * @dev Get the deposit balance value of specified address\r\n   * @param _loyaltyAddress of account\r\n   * @return (uint256) indicating the balance value\r\n   */\r\n  function getDepositBalance(address _loyaltyAddress)\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    return accounts[_loyaltyAddress]._balance;\r\n  }\r\n\r\n  /**\r\n   * @dev Get the tokens collected by the specified address\r\n   * @param _loyaltyAddress of account\r\n   * @return (uint256) indicating the tokens collected\r\n   */\r\n  function getTokensCollected(address _loyaltyAddress)\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    return accounts[_loyaltyAddress]._collected;\r\n  }\r\n\r\n  /**\r\n   * @dev Get the total balance (deposit + collected) of tokens\r\n   * @param _loyaltyAddress of account\r\n   * @return (uint256) indicating total balance\r\n   */\r\n  function getTotalBalance(address _loyaltyAddress)\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    return accounts[_loyaltyAddress]._balance.add(accounts[_loyaltyAddress]._collected);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the times loyalty has been claimed\r\n   * @param _loyaltyAddress of account\r\n   * @return (uint256) indicating total time claimed\r\n   */\r\n  function getTimesClaimed(address _loyaltyAddress)\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    return accounts[_loyaltyAddress]._claimed;\r\n  }\r\n\r\n  /**\r\n   * @dev Get total number of times joined\r\n   * @param _loyaltyAddress of account\r\n   * @return (uint256)\r\n   */\r\n  function getTimesJoined(address _loyaltyAddress)\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    return accounts[_loyaltyAddress]._joined;\r\n  }\r\n\r\n  /**\r\n   * @dev Get time remaining before reward maturity\r\n   * @param _loyaltyAddress of account\r\n   * @return (uint256, bool) Indicating time remaining/past and boolean indicating maturity\r\n   */\r\n  function getTimeRemaining(address _loyaltyAddress)\r\n  public\r\n  whenNotPaused\r\n  returns (uint256, bool, uint256)\r\n  {\r\n    (uint256 remaining, bool status, uint256 deposit) = ISparkleTimestamp(timestampAddress).getTimeRemaining(_loyaltyAddress);\r\n    return (remaining, status, deposit);\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw any ether that has been sent directly to the contract\r\n   * @param _loyaltyAddress of account\r\n   * @return Total number of tokens that have been claimed by users\r\n   * @notice Test(s) Not written\r\n   */\r\n  function getRewardTier(address _loyaltyAddress)\r\n  public\r\n  view whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    return accounts[_loyaltyAddress]._tier;\r\n  }\r\n\r\n  /**\r\n   * @dev Select reward tier for msg.sender\r\n   * @param _tierSelected id of the reward tier interested in purchasing\r\n   * @return (bool) indicating failure/success\r\n   */\r\n  function selectRewardTier(uint256 _tierSelected)\r\n  public\r\n  payable\r\n  whenNotPaused\r\n  nonReentrant\r\n  returns(bool)\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {From}');\r\n    // Validate specified address has a timestamp\r\n    require(accounts[msg.sender]._address == address(msg.sender), 'No timestamp3');\r\n    // Validate tier selection\r\n    require(accounts[msg.sender]._tier != _tierSelected, 'Already selected');\r\n    // Validate that ether was sent with the call\r\n    require(msg.value > 0, 'No ether');\r\n\r\n    // Determine if the specified rate is > than existing rate\r\n    if(ISparkleRewardTiers(tiersAddress).getRate(accounts[msg.sender]._tier) >= ISparkleRewardTiers(tiersAddress).getRate(_tierSelected)) {\r\n      // No, revert indicating failure\r\n      revert('Invalid tier');\r\n    }\r\n\r\n    // Determine if ether transfer for tier upgrade has completed successfully\r\n    (bool success, ) = address(collectionAddress).call{value: ISparkleRewardTiers(tiersAddress).getPrice(_tierSelected), gas: gasToSendWithTX}('');\r\n    require(success, 'Rate unchanged');\r\n\r\n    // Update callers rate with the new selected rate\r\n    accounts[msg.sender]._tier = _tierSelected;\r\n    emit TierSelectedEvent(msg.sender, _tierSelected);\r\n    // Return success\r\n    return true;\r\n  }\r\n\r\n  function getRewardTiersAddress()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(address)\r\n  {\r\n    return tiersAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Set tier collectionm address\r\n   * @param _newAddress of new collection address\r\n   * @notice Test(s) not written\r\n   */\r\n  function setRewardTiersAddress(address _newAddress)\r\n  public\r\n  whenNotPaused\r\n  onlyOwner\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {From}');\r\n    // Validate specified address is valid\r\n    require(_newAddress != address(0), 'Invalid {reward}');\r\n    // Set tier rewards contract address\r\n    tiersAddress = _newAddress;\r\n    emit TiersAddressChanged(_newAddress);\r\n  }\r\n\r\n  function getCollectionAddress()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(address)\r\n  {\r\n    return collectionAddress;\r\n  }\r\n\r\n  /** @notice Test(s) passed\r\n   * @dev Set tier collectionm address\r\n   * @param _newAddress of new collection address\r\n   */\r\n  function setCollectionAddress(address _newAddress)\r\n  public\r\n  whenNotPaused\r\n  onlyOwner\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {From}');\r\n    // Validate specified address is valid\r\n    require(_newAddress != address(0), 'Invalid {collection}');\r\n    // Set tier collection address\r\n    collectionAddress = _newAddress;\r\n    emit CollectionAddressChanged(_newAddress);\r\n  }\r\n\r\n  function getTreasuryAddress()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(address)\r\n  {\r\n    return treasuryAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Set treasury address\r\n   * @param _newAddress of the treasury address\r\n   * @notice Test(s) passed\r\n   */\r\n  function setTreasuryAddress(address _newAddress)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), \"Invalid {from}\");\r\n    // Validate specified address\r\n    require(_newAddress != address(0), \"Invalid {treasury}\");\r\n    // Set current treasury contract address\r\n    treasuryAddress = _newAddress;\r\n    emit TreasuryAddressChanged(_newAddress);\r\n  }\r\n\r\n  function getTimestampAddress()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(address)\r\n  {\r\n    return timestampAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the timestamp address\r\n   * @param _newAddress of timestamp address\r\n   * @notice Test(s) passed\r\n   */\r\n  function setTimestampAddress(address _newAddress)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), \"Invalid {from}\");\r\n    // Set current timestamp contract address\r\n    timestampAddress = _newAddress;\r\n    emit TimestampAddressChanged(_newAddress);\r\n  }\r\n\r\n  function getTokenAddress()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(address)\r\n  {\r\n    return tokenAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the loyalty token address\r\n   * @param _newAddress of the new token address\r\n   * @notice Test(s) passed\r\n   */\r\n  function setTokenAddress(address _newAddress)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), \"Invalid {from}\");\r\n    // Set current token contract address\r\n    tokenAddress = _newAddress;\r\n    emit TokenAddressChangedEvent(_newAddress);\r\n  }\r\n\r\n  function getSentGasAmount()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    return gasToSendWithTX;\r\n  }\r\n\r\n  function setSentGasAmount(uint256 _amount)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}');\r\n    // Set the current minimum deposit allowed\r\n    gasToSendWithTX = _amount;\r\n    emit GasSentChanged(_amount);\r\n  }\r\n\r\n  function getBaseRate()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    return baseRate;\r\n  }\r\n\r\n  function setBaseRate(uint256 _newRate)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}');\r\n    // Set the current minimum deposit allowed\r\n    baseRate = _newRate;\r\n    emit BaseRateChanged(_newRate);\r\n  }\r\n\r\n  /**\r\n   * @dev Set the minimum Proof Of Loyalty amount allowed for deposit\r\n   * @param _minProof amount for new minimum accepted loyalty reward deposit\r\n   * @notice _minProof value is multiplied internally by 10e7. Do not multiply before calling!\r\n   */\r\n  function setMinProof(uint256 _minProof)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}');\r\n    // Validate specified minimum is not lower than 1000 tokens\r\n    require(_minProof >= 1000, 'Invalid amount');\r\n    // Set the current minimum deposit allowed\r\n    minRequired = _minProof.mul(10e7);\r\n    emit MinProofChanged(minRequired);\r\n  }\r\n\r\n  event MinProofChanged(uint256);\r\n  /**\r\n   * @dev Get the minimum Proof Of Loyalty amount allowed for deposit\r\n   * @return Amount of tokens required for Proof Of Loyalty Rewards\r\n   * @notice Test(s) passed\r\n   */\r\n  function getMinProof()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    // Return indicating minimum deposit allowed\r\n    return minRequired;\r\n  }\r\n\r\n  /**\r\n   * @dev Set the maximum Proof Of Loyalty amount allowed for deposit\r\n   * @param _maxProof amount for new maximum loyalty reward deposit\r\n   * @notice _maxProof value is multiplied internally by 10e7. Do not multiply before calling!\r\n   * @notice Smallest maximum value is 1000 + _minProof amount. (Ex: If _minProof == 1000 then smallest _maxProof possible is 2000)\r\n   */\r\n  function setMaxProof(uint256 _maxProof)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0), 'Invalid {from}');\r\n    require(_maxProof >= 2000, 'Invalid amount');\r\n    // Set allow maximum deposit\r\n    maxAllowed = _maxProof.mul(10e7);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the maximum Proof Of Loyalty amount allowed for deposit\r\n   * @return Maximum amount of tokens allowed for Proof Of Loyalty deposit\r\n   * @notice Test(s) passed\r\n   */\r\n  function getMaxProof()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    // Return indicating current allowed maximum deposit\r\n    return maxAllowed;\r\n  }\r\n\r\n  /**\r\n   * @dev Get the total number of tokens claimed by all users\r\n   * @return Total number of tokens that have been claimed by users\r\n   * @notice Test(s) Not written\r\n   */\r\n  function getTotalTokensClaimed()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    // Return indicating total number of tokens that have been claimed by all\r\n    return totalTokensClaimed;\r\n  }\r\n\r\n  /**\r\n   * @dev Get total number of times rewards have been claimed for all users\r\n   * @return Total number of times rewards have been claimed\r\n   */\r\n  function getTotalTimesClaimed()\r\n  public\r\n  view\r\n  whenNotPaused\r\n  returns(uint256)\r\n  {\r\n    // Return indicating total number of tokens that have been claimed by all\r\n    return totalTimesClaimed;\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw any ether that has been sent directly to the contract\r\n   */\r\n  function withdrawEth(address _toAddress)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {from}');\r\n    // Validate specified address\r\n    require(_toAddress != address(0x0), 'Invalid {to}');\r\n    // Validate there is ether to withdraw\r\n    require(address(this).balance > 0, 'No ether');\r\n    // Determine if ether transfer of stored ether has completed successfully\r\n    // require(address(_toAddress).call.value(address(this).balance).gas(gasToSendWithTX)(), 'Withdraw failed');\r\n    (bool success, ) = address(_toAddress).call{value:address(this).balance, gas: gasToSendWithTX}('');\r\n    require(success, 'Withdraw failed');\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw any ether that has been sent directly to the contract\r\n   * @param _toAddress to receive any stored token balance\r\n   */\r\n  function withdrawTokens(address _toAddress)\r\n  public\r\n  onlyOwner\r\n  whenNotPaused\r\n  nonReentrant\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {from}');\r\n    // Validate specified address\r\n    require(_toAddress != address(0), \"Invalid {to}\");\r\n    // Validate there are tokens to withdraw\r\n    uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\r\n    require(balance != 0, \"No tokens\");\r\n\r\n    // Validate the transfer of tokens completed successfully\r\n    if(IERC20(tokenAddress).transfer(_toAddress, balance)) {\r\n      emit TokensWithdrawn(_toAddress, balance);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Override loyalty account tier by contract owner\r\n   * @param _loyaltyAccount loyalty account address to tier override\r\n   * @param _tierSelected reward tier to override current tier value\r\n   * @return (bool) indicating success status\r\n   */\r\n  function overrideRewardTier(address _loyaltyAccount, uint256 _tierSelected)\r\n  public\r\n  whenNotPaused\r\n  onlyOwner\r\n  nonReentrant\r\n  returns(bool)\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {from}');\r\n    require(_loyaltyAccount != address(0x0), 'Invalid {account}');\r\n    // Validate specified address has a timestamp\r\n    require(accounts[_loyaltyAccount]._address == address(_loyaltyAccount), 'No timestamp4');\r\n    // Update the specified loyalty address tier reward index\r\n    accounts[_loyaltyAccount]._tier = _tierSelected;\r\n    emit RewardTierChanged(_loyaltyAccount, _tierSelected);\r\n  }\r\n\r\n  /**\r\n   * @dev Reset the specified loyalty account timestamp\r\n   * @param _rewardAddress of the loyalty account to perfornm a reset\r\n   */\r\n  function _resetTimestamp(address _rewardAddress)\r\n  internal\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {from}');\r\n    // Validate specified address\r\n    require(_rewardAddress != address(0), \"Invalid {reward}\");\r\n    // Reset callers timestamp for specified address\r\n    require(ISparkleTimestamp(timestampAddress).resetTimestamp(_rewardAddress), 'Reset failed');\r\n    emit ResetTimestampEvent(_rewardAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Delete the specified loyalty account timestamp\r\n   * @param _rewardAddress of the loyalty account to perfornm the delete\r\n   */\r\n  function _deleteTimestamp(address _rewardAddress)\r\n  internal\r\n  {\r\n    // Validate calling address (msg.sender)\r\n    require(msg.sender != address(0x0), 'Invalid {from}16');\r\n    // Validate specified address\r\n    require(_rewardAddress != address(0), \"Invalid {reward}\");\r\n    // Delete callers timestamp for specified address\r\n    require(ISparkleTimestamp(timestampAddress).deleteTimestamp(_rewardAddress), 'Delete failed');\r\n    emit DeleteTimestampEvent(_rewardAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Event signal: Treasury address updated\r\n   */\r\n  event TreasuryAddressChanged(address);\r\n\r\n  /**\r\n   * @dev Event signal: Timestamp address updated\r\n   */\r\n  event TimestampAddressChanged(address);\r\n\r\n  /**\r\n   * @dev Event signal: Token address updated\r\n   */\r\n  event TokenAddressChangedEvent(address);\r\n\r\n  /**\r\n   * @dev Event signal: Timestamp reset\r\n   */\r\n  event ResetTimestampEvent(address _rewardAddress);\r\n\r\n  /**\r\n   * @dev Event signal: Timestamp deleted\r\n   */\r\n  event DeleteTimestampEvent(address _rewardAddress);\r\n\r\n  /**\r\n   * @dev Event signal: Loyalty deposited event\r\n   */\r\n  event DepositLoyaltyEvent(address, uint256, bool);\r\n\r\n  /**\r\n   * @dev Event signal: Reward claimed successfully for address\r\n   */\r\n  event RewardClaimedEvent(address, uint256);\r\n\r\n  /**\r\n   * @dev Event signal: Loyalty withdrawn\r\n   */\r\n  event LoyaltyWithdrawnEvent(address, uint256);\r\n\r\n  /**\r\n   * @dev Event signal: Account locked/unlocked\r\n   */\r\n  event LockedAccountEvent(address _rewardAddress, bool _locked);\r\n\r\n  /**\r\n   * @dev Event signal: Loyalty deposit balance withdrawn\r\n   */\r\n  event LoyaltyDepositWithdrawnEvent(address, uint256);\r\n\r\n  /**\r\n   * @dev Event signal: Loyalty collected balance withdrawn\r\n   */\r\n  event LoyaltyCollectedWithdrawnEvent(address, uint256);\r\n\r\n  /**\r\n   * @dev Event signal: Loyalty account removed\r\n   */\r\n  event LoyaltyAccountRemovedEvent(address);\r\n\r\n  /**\r\n   * @dev Event signal: Gas sent with call.value amount updated\r\n   */\r\n  event GasSentChanged(uint256);\r\n  /**\r\n   * @dev Event signal: Reward tiers address updated\r\n   */\r\n  event TierSelectedEvent(address, uint256);\r\n\r\n  /**\r\n   * @dev Event signal: Reward tiers address updated\r\n   */\r\n  event TiersAddressChanged(address);\r\n\r\n   /**\r\n   * @dev Event signal: Reward tier has been updated\r\n   */\r\n  event RewardTierChanged(address, uint256);\r\n\r\n /**\r\n   * @dev Event signal: Collection address updated\r\n   */\r\n  event CollectionAddressChanged(address);\r\n\r\n  /**\r\n   * @dev Event signal: All stored tokens have been removed\r\n   */\r\n  event TokensWithdrawn(address, uint256);\r\n\r\n  /**\r\n   * @dev Event signal: Apr base rate has been changed\r\n   */\r\n  event BaseRateChanged(uint256);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tiersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timestampAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BaseRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CollectionAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"DeleteTimestampEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"DepositLoyaltyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GasSentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"LockedAccountEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LoyaltyAccountRemovedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LoyaltyCollectedWithdrawnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LoyaltyDepositWithdrawnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LoyaltyWithdrawnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MinProofChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"ResetTimestampEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RewardClaimedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RewardTierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TierSelectedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TiersAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TimestampAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenAddressChangedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TreasuryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimLoyaltyReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"depositLoyalty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyaltyAddress\",\"type\":\"address\"}],\"name\":\"getDepositBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyaltyAddress\",\"type\":\"address\"}],\"name\":\"getLoyaltyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyaltyAddress\",\"type\":\"address\"}],\"name\":\"getRewardTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTiersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSentGasAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyaltyAddress\",\"type\":\"address\"}],\"name\":\"getTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyaltyAddress\",\"type\":\"address\"}],\"name\":\"getTimesClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyaltyAddress\",\"type\":\"address\"}],\"name\":\"getTimesJoined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestampAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyaltyAddress\",\"type\":\"address\"}],\"name\":\"getTokensCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyaltyAddress\",\"type\":\"address\"}],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTimesClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyaltyAddress\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"lockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyaltyAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierSelected\",\"type\":\"uint256\"}],\"name\":\"overrideRewardTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"removeLoyaltyAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"returnLoyaltyCollected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"returnLoyaltyDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierSelected\",\"type\":\"uint256\"}],\"name\":\"selectRewardTier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setBaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setCollectionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxProof\",\"type\":\"uint256\"}],\"name\":\"setMaxProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minProof\",\"type\":\"uint256\"}],\"name\":\"setMinProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setRewardTiersAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSentGasAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setTimestampAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SparkleLoyalty","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004b7ad3a56810032782afce12d7d27122bdb96eff000000000000000000000000a90c682f511b384706e592a8cad9121f1c17de86000000000000000000000000bea52413e26c38b51cbcb0d3661a25f2097f85740000000000000000000000004b6a789e3405b28cd72015c539b17894b9d552780000000000000000000000005e6ebe978793203af381e9e0efd31318794fd419","EVMVersion":"petersburg","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://59d9eca2c3d6b8a920d27b51191e885875a1cfcf1e3f440786712cee1deb12ca"}]}