{"status":"1","message":"OK","result":[{"SourceCode":"{\"Ecocelium_Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n\\r\\n███████╗░█████╗░░█████╗░░█████╗░███████╗██╗░░░░░██╗██╗░░░██╗███╗░░░███╗\\r\\n██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██║░░░░░██║██║░░░██║████╗░████║\\r\\n█████╗░░██║░░╚═╝██║░░██║██║░░╚═╝█████╗░░██║░░░░░██║██║░░░██║██╔████╔██║\\r\\n██╔══╝░░██║░░██╗██║░░██║██║░░██╗██╔══╝░░██║░░░░░██║██║░░░██║██║╚██╔╝██║\\r\\n███████╗╚█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗██║╚██████╔╝██║░╚═╝░██║\\r\\n╚══════╝░╚════╝░░╚════╝░░╚════╝░╚══════╝╚══════╝╚═╝░╚═════╝░╚═╝░░░░░╚═╝\\r\\n\\r\\nBrought to you by Kryptual Team */\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\nimport \\\"./EcoSub.sol\\\";\\r\\n\\r\\ncontract Ecocelium is Initializable{\\r\\n\\r\\n    address public owner;\\r\\n    IAbacusOracle abacus;\\r\\n    EcoceliumTokenManager ETM;\\r\\n    EcoceliumSub ES;\\r\\n    EcoceliumSub1 ES1;\\r\\n    string public ECO;\\r\\n    \\r\\n    function initialize(address _owner,address ETMaddress,address AbacusAddress,address ESaddress, address ES1address, string memory _ECO)public payable initializer {\\r\\n        owner = _owner;\\r\\n        ETM = EcoceliumTokenManager(ETMaddress);\\r\\n        abacus = IAbacusOracle(AbacusAddress);//0x323f81D9F57d2c3d5555b14d90651aCDc03F9d52\\r\\n        ES = EcoceliumSub(ESaddress);\\r\\n        ES1 = EcoceliumSub1(ES1address);\\r\\n        ES.initializeAddress(ETMaddress,AbacusAddress,ES1address);\\r\\n        ECO = _ECO;\\r\\n    }\\r\\n    \\r\\n    function changeETMaddress(address ETMaddress) public{\\r\\n        require(msg.sender == owner,\\\"not owner\\\");\\r\\n        ETM = EcoceliumTokenManager(ETMaddress);\\r\\n    }    \\r\\n    function changeAbacusaddress(address Abacusaddress) public{\\r\\n        require(msg.sender == owner,\\\"not owner\\\");\\r\\n        abacus = IAbacusOracle(Abacusaddress);\\r\\n    }   \\r\\n    \\r\\n    function changeESaddress(address ESaddress) public{\\r\\n        require(msg.sender == owner,\\\"not owner\\\");\\r\\n        ES = EcoceliumSub(ESaddress);\\r\\n    }\\r\\n    \\r\\n     function changeES1address(address ES1address) public{\\r\\n        require(msg.sender == owner,\\\"not owner\\\");\\r\\n        ES1 = EcoceliumSub1(ES1address);\\r\\n    }\\r\\n    \\r\\n    function changeOwner(address _owner) public{\\r\\n        require(msg.sender==owner);\\r\\n        owner = _owner;\\r\\n    }\\r\\n    \\r\\n     /*===========Main functions============\\r\\n    -------------------------------------*/   \\r\\n\\r\\n    function Deposit(string memory rtoken, uint _amount) external {\\r\\n        address _msgSender = msg.sender;\\r\\n        address _contractAddress = address(this);\\r\\n        string memory wtoken = ETM.getWrapped(rtoken);\\r\\n        uint amount = _deposit(rtoken, _amount, _msgSender, _contractAddress, wtoken);\\r\\n        ES.zeroDepositorPush(_msgSender, wtoken, _amount);\\r\\n        wERC20(ETM.getwTokenAddress(ETM.getWrapped(rtoken))).mint(_msgSender, amount);\\r\\n        wERC20(ETM.getwTokenAddress(ETM.getWrapped(rtoken))).lock(_msgSender, amount);\\r\\n    }\\r\\n    \\r\\n    function _deposit(string memory rtoken,uint _amount, address msgSender, address _contractAddress, string memory wtoken) internal returns(uint) {\\r\\n        require(ETM.getrTokenAddress(rtoken) != address(0) \\u0026\\u0026 ETM.getwTokenAddress(wtoken) != address(0),\\\"not supported\\\");\\r\\n        (wERC20 wToken,ERC20Basic rToken)=(wERC20(ETM.getwTokenAddress(wtoken)),ERC20Basic(ETM.getrTokenAddress(rtoken))); \\r\\n        uint amount = _amount*(10**uint(wToken.decimals()));\\r\\n        require(rToken.allowance(msgSender,_contractAddress) \\u003e= amount,\\\"set allowance\\\");\\r\\n        rToken.transferFrom(msgSender,_contractAddress,amount);\\r\\n        ES1.emitSwap(msgSender,rtoken,wtoken,_amount);\\r\\n        return amount;\\r\\n    }\\r\\n    \\r\\n    function depositAndOrder(address userAddress,string memory rtoken ,uint _amount,uint _duration,uint _yield) external {\\r\\n        require(msg.sender == userAddress);\\r\\n        _deposit(rtoken, _amount, userAddress, address(this), ETM.getWrapped(rtoken));\\r\\n        ES.createOrder(userAddress, ETM.getWrapped(rtoken), _amount, _duration, _yield, address(this));\\r\\n    }\\r\\n    \\r\\n    function createOrder(address userAddress,string memory _tokenSymbol ,uint _amount,uint _duration,uint _yield) public {\\r\\n        require(msg.sender == userAddress);\\r\\n        string memory wtoken = ETM.getWrapped(_tokenSymbol);\\r\\n        if(ES.getUserDepositsbyToken(userAddress, wtoken)  \\u003e _amount )  {  \\r\\n            ES.zeroDepositorPop(userAddress, wtoken , _amount);\\r\\n            ES.createOrder(userAddress, wtoken, _amount, _duration, _yield, address(this));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getAggEcoBalance(address userAddress) public view returns(uint) {\\r\\n        return wERC20(ETM.getwTokenAddress(ES1.WRAP_ECO_SYMBOL())).balanceOf(userAddress) + ES.getECOEarnings(userAddress);\\r\\n    }\\r\\n    \\r\\n    function _borrowOrder(uint64 _orderId, uint _amount, uint _duration) public {\\r\\n        ES.borrow(_orderId,_amount,_duration,msg.sender,address(this));\\r\\n    }\\r\\n    \\r\\n    function payDueOrder(uint64 _orderId,uint _duration) external{\\r\\n        ES.payDue(_orderId,_duration,msg.sender);\\r\\n    }\\r\\n    \\r\\n    function clearBorrow(string memory rtoken, uint _amount) external{\\r\\n        address msgSender = msg.sender;\\r\\n        address _contractAddress = address(this);\\r\\n        string memory wtoken = ETM.getWrapped(rtoken);\\r\\n        require(ETM.getrTokenAddress(rtoken) != address(0) \\u0026\\u0026 ETM.getwTokenAddress(wtoken) != address(0),\\\"not supported\\\");\\r\\n        (wERC20 wToken,ERC20Basic rToken)=(wERC20(ETM.getwTokenAddress(wtoken)),ERC20Basic(ETM.getrTokenAddress(rtoken)));\\r\\n        uint amount = _amount*(10**uint(wToken.decimals()));\\r\\n        require(rToken.allowance(msgSender,_contractAddress) \\u003e= amount,\\\"set allowance\\\");\\r\\n        rToken.transferFrom(msgSender,_contractAddress,amount);\\r\\n        uint dues = ES.zeroBorrowPop(msgSender, wtoken, _amount);\\r\\n        ERC20Basic(ETM.getrTokenAddress(ECO)).transferFrom(msgSender, _contractAddress, dues);\\r\\n    }\\r\\n    \\r\\n    function Borrow(uint _amount, string memory _tokenSymbol) public {\\r\\n        ES.borrowZero(_amount, ETM.getWrapped(_tokenSymbol) ,msg.sender,address(this));\\r\\n    }\\r\\n    \\r\\n    function SwapWrapToWrap(string memory token1,string memory token2, uint token1amount)  external returns(uint) {\\r\\n        address msgSender = msg.sender;\\r\\n        (uint token1price,uint token2price) = (fetchTokenPrice(token1),fetchTokenPrice(token2));\\r\\n        uint token2amount = (token1amount*token1price*(100-ES1.swapFee()))/token2price/100;\\r\\n        (wERC20 Token1,wERC20 Token2) = (wERC20(ETM.getwTokenAddress(token1)),wERC20(ETM.getwTokenAddress(token2)));\\r\\n        ES1.unlockDeposit(msgSender, token1amount, token1);\\r\\n        Token1.burnFrom(msgSender,token1amount*(10**uint(Token1.decimals())));\\r\\n        ES.zeroDepositorPop(msgSender,token1,token1amount);\\r\\n        Token2.mint(msgSender,token2amount*(10**uint(Token2.decimals())));\\r\\n        Token2.lock(msgSender, token2amount*(10**uint(Token2.decimals())));\\r\\n        ES1.setOwnerFeeVault(token1, token1price*ES1.swapFee()/100);\\r\\n        ES.zeroDepositorPush(msgSender, token2,token2amount);\\r\\n        ES1.emitSwap(msgSender,token1,token2,token2amount);\\r\\n        return token2amount;\\r\\n    }\\r\\n    \\r\\n    function orderExpired(uint64 _orderId) external {\\r\\n        ES.orderExpired(_orderId);\\r\\n    }    \\r\\n\\r\\n    function dueCheck(uint64 _orderId,address borrower,uint month) external {\\r\\n        ES.dueCheck(_orderId,borrower,month,address(this));\\r\\n    }\\r\\n    \\r\\n    function cancelOrder(uint64 _orderId) public{\\r\\n        ES.cancelOrder(_orderId);\\r\\n    }\\r\\n    \\r\\n    receive() external payable {  }\\r\\n\\r\\n    /*==============Helpers============\\r\\n    ---------------------------------*/    \\r\\n    \\r\\n    function orderMonthlyDue(uint64 _orderId, address _borrower,uint _duration) public view returns(uint){\\r\\n        return ES.orderMonthlyDue(_orderId,_borrower,_duration);\\r\\n    }\\r\\n    \\r\\n    function updateFees(uint _swapFee,uint _tradeFee,uint _rewardFee) public{\\r\\n        require(msg.sender == owner);\\r\\n        ES1.updateFees(_swapFee,_tradeFee,_rewardFee);\\r\\n    }\\r\\n\\r\\n    function setCSDpercent(uint percent) public {\\r\\n        require(msg.sender == owner);        \\r\\n        ES1.setCSDpercent(percent);\\r\\n    }\\r\\n    \\r\\n    function setWRAP_ECO_SYMBOL(string memory _symbol) internal {\\r\\n        require(msg.sender == owner);\\r\\n        ECO = _symbol;\\r\\n        ES1.setWRAP_ECO_SYMBOL(_symbol);\\r\\n    }\\r\\n    \\r\\n    function getOrderIds() public view returns(uint [] memory){\\r\\n        return ES.getOrderIds();\\r\\n    }\\r\\n    \\r\\n    // function getOrder( uint64 investmentId) public view returns(uint time, uint duration, uint amount,  uint yield, string memory token, Status isActive){\\r\\n    //     return (Orders[investmentId].time,Orders[investmentId].duration,Orders[investmentId].amount,Orders[investmentId].yield,Orders[investmentId].token,Orders[investmentId].status);\\r\\n    // }\\r\\n    \\r\\n    /*function getUserBorrowedOrders(address userAddress) public view returns(uint64 [] memory borrowedOrders){\\r\\n        return ES.getUserBorrowedOrders(userAddress);\\r\\n    } */\\r\\n    \\r\\n    /*function getBorrowersOfOrder(uint64 _orderId) public view returns(address[] memory borrowers){\\r\\n        return ES.getBorrowersOfOrder(_orderId);\\r\\n    }\\r\\n    \\r\\n    function getBorrowDetails(uint64 _orderId,address borrower) public view returns(uint amount,uint duration,uint dated,uint _duesPaid ){\\r\\n        (amount,duration,dated,_duesPaid)=ES.getBorrowDetails(_orderId,borrower);\\r\\n        return (amount,duration,dated,_duesPaid);\\r\\n    } */\\r\\n    \\r\\n    function fetchTokenPrice(string memory _tokenSymbol) public view returns(uint64){\\r\\n        return ES.fetchTokenPrice(_tokenSymbol);\\r\\n    }\\r\\n    \\r\\n    /*function isWithdrawEligible(address _msgSender, string memory _token, uint _amount) public view returns (bool) {\\r\\n        require(msg.sender == owner);        \\r\\n        //to be written\\r\\n        uint tokenUsdValue = _amount*fetchTokenPrice(_token)/(10**8);\\r\\n        uint buypower = ES.getbuyPower(_msgSender);\\r\\n        if((buypower*(100+ES1.CDSpercent())/100) \\u003e tokenUsdValue )\\r\\n            return true;\\r\\n    }*/\\r\\n    \\r\\n    function Withdraw(string memory to, uint _amount) external {\\r\\n        address msgSender = msg.sender;\\r\\n        string memory from = ETM.getWrapped(to);\\r\\n        require(ETM.getwTokenAddress(from) != address(0) \\u0026\\u0026 ETM.getrTokenAddress(to) != address(0),\\\"not supported\\\");\\r\\n        require(!ES1.isUserLocked(msgSender), \\\"Your Address is Locked Pay Dues\\\");\\r\\n        //require(isWithdrawEligible(msgSender, to, _amount) , \\\"Not Eligible for Withdraw\\\");\\r\\n        require(((ES.getbuyPower(msgSender)*(100+ES1.CDSpercent())/100) \\u003e (_amount*fetchTokenPrice(to)/(10**8)) ), \\\"Not Eligible for Withdraw\\\");\\r\\n        wERC20 wToken = wERC20(ETM.getwTokenAddress(to));\\r\\n        uint amount = _amount*(10**uint(wToken.decimals()));\\r\\n        uint amountLeft;\\r\\n        if(keccak256(abi.encodePacked(to)) == keccak256(abi.encodePacked(ES1.WRAP_ECO_SYMBOL()))) {\\r\\n            require(wToken.balanceOf(msgSender) + ES.getECOEarnings(msgSender) \\u003e= amount,\\\"Insufficient Balance\\\");\\r\\n            if(wToken.balanceOf(msgSender)\\u003e=amount) {\\r\\n                _withdraw(msgSender, from, amount, to, _amount);\\r\\n            } else {\\r\\n                if(wToken.balanceOf(msgSender)\\u003camount)    \\r\\n                    amountLeft = amount - wToken.balanceOf(msgSender);\\r\\n                    _withdraw(msgSender, from, wToken.balanceOf(msgSender), to, (wToken.balanceOf(msgSender)/(10**uint(wToken.decimals()))));\\r\\n                    ES.redeemEcoEarning(msgSender,amountLeft);\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            //uint locked = ES.getUserLockedAmount(from, msgSender);\\r\\n            require(wToken.balanceOf(msgSender) \\u003e= amount,\\\"Insufficient Balance\\\");\\r\\n            _withdraw(msgSender, from, amount, to, _amount);\\r\\n        }\\r\\n        ES1.emitSwap(msgSender,from,to,_amount);\\r\\n    }\\r\\n    \\r\\n    function _withdraw(address msgSender, string memory from, uint amount, string memory to, uint _amount ) internal {\\r\\n                \\r\\n        (wERC20 wToken,ERC20Basic rToken) = (wERC20(ETM.getwTokenAddress(to)),ERC20Basic(ETM.getrTokenAddress(from)));         \\r\\n        ES1.unlockDeposit(msgSender,amount, from);\\r\\n        wToken.burnFrom(msgSender,amount);\\r\\n        ES1.setOwnerFeeVault(to,(amount*ES1.swapFee())/100);\\r\\n        ES.zeroDepositorPop(msgSender,from,_amount);\\r\\n        uint newAmount = amount - (amount*ES1.swapFee())/100;\\r\\n        rToken.transfer(msgSender,newAmount);\\r\\n    }\\r\\n}\\r\\n    \"},\"EcoSub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/*SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\n███████╗░█████╗░░█████╗░░█████╗░███████╗██╗░░░░░██╗██╗░░░██╗███╗░░░███╗\\r\\n██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██║░░░░░██║██║░░░██║████╗░████║\\r\\n█████╗░░██║░░╚═╝██║░░██║██║░░╚═╝█████╗░░██║░░░░░██║██║░░░██║██╔████╔██║\\r\\n██╔══╝░░██║░░██╗██║░░██║██║░░██╗██╔══╝░░██║░░░░░██║██║░░░██║██║╚██╔╝██║\\r\\n███████╗╚█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗██║╚██████╔╝██║░╚═╝░██║\\r\\n╚══════╝░╚════╝░░╚════╝░░╚════╝░╚══════╝╚══════╝╚═╝░╚═════╝░╚═╝░░░░░╚═╝\\r\\n\\r\\nBrought to you by Kryptual Team */\\r\\npragma solidity ^0.6.0;\\r\\nimport \\\"./EcoSub2.sol\\\";\\r\\n\\r\\n\\r\\ncontract EcoceliumSub is Initializable { \\r\\n\\r\\n    IAbacusOracle abacus;\\r\\n    EcoceliumTokenManager ETM;\\r\\n    EcoceliumSub1 ES1;\\r\\n    enum Status {OPEN,CLOSED}\\r\\n    /*============Mappings=============\\r\\n    ----------------------------------*/\\r\\n    mapping (address =\\u003e User) public users;\\r\\n    uint [] public orderIds;\\r\\n    mapping (string =\\u003e uint) public YieldForTokens;\\r\\n    mapping (uint64 =\\u003e Order) public Orders;\\r\\n    mapping (string =\\u003e uint ) public borrowCollection;\\r\\n    \\r\\n    /*=========Structs================\\r\\n    --------------------------------*/    \\r\\n    \\r\\n    struct Order{\\r\\n        address creator;\\r\\n        address [] borrowers;\\r\\n        uint time;\\r\\n        uint expiryDate;\\r\\n        uint duration;\\r\\n        uint amount;\\r\\n        uint amountLeft;\\r\\n        uint yield;\\r\\n        uint earnings;\\r\\n        mapping (address =\\u003e BorrowatOrder) borrows;\\r\\n        string token;\\r\\n        Status status;\\r\\n    }\\r\\n    \\r\\n    struct BorrowatOrder{\\r\\n        uint64 orderId;\\r\\n        uint amount;\\r\\n        uint duration;\\r\\n        uint dated;\\r\\n        uint duesPaid;\\r\\n    }\\r\\n    \\r\\n    struct freeStorage{\\r\\n        uint amount;\\r\\n        uint time;\\r\\n        string wtoken;\\r\\n        uint usdvalue;\\r\\n    }\\r\\n    \\r\\n    struct User{\\r\\n        uint ecoWithdrawls;\\r\\n        uint totalDeposit;\\r\\n        uint totalBorrowed;\\r\\n        freeStorage [] myDeposits;\\r\\n        freeStorage [] myBorrows;\\r\\n        mapping(string =\\u003e uint) deposits;\\r\\n        mapping(string =\\u003e uint) borrows;\\r\\n        uint64 [] borrowedOrders;\\r\\n        uint64 [] createdOrders;\\r\\n        mapping(string =\\u003e uint) tokenYield;\\r\\n    }\\r\\n    \\r\\n    function initializeAddress(address ETMaddress,address AbacusAddress, address ES1address) external {\\r\\n            ETM = EcoceliumTokenManager(ETMaddress);\\r\\n            abacus = IAbacusOracle(AbacusAddress); \\r\\n            ES1 = EcoceliumSub1(ES1address);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*============Main Functions===============\\r\\n    ---------------------------------*/\\r\\n   \\r\\n    function zeroDepositorPush(address userAddress, string memory _tokenSymbol, uint _amount) external {\\r\\n        if(ES1.friendlyaddress(msg.sender)){\\r\\n            uint tokenUsdValue = _amount*fetchTokenPrice(_tokenSymbol)/(10**8);\\r\\n            users[userAddress].totalDeposit += tokenUsdValue;\\r\\n            freeStorage memory newDeposit = freeStorage({     amount: _amount,\\r\\n                                                        time: now,\\r\\n                                                        wtoken: _tokenSymbol,\\r\\n                                                        usdvalue: tokenUsdValue   });\\r\\n            users[userAddress].myDeposits.push(newDeposit);\\r\\n            users[userAddress].deposits[_tokenSymbol] += _amount;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /*function getUsersOrders(address userAddress) public view returns(uint64 [] memory){\\r\\n        return users[userAddress].createdOrders;\\r\\n    }*/\\r\\n    \\r\\n    function getUserDepositsbyToken(address userAddress, string memory wtoken) public view returns(uint) {\\r\\n        return users[userAddress].deposits[wtoken];\\r\\n    }\\r\\n    \\r\\n    function getbuyPower(address userAddress) public view returns (uint){\\r\\n        uint buyPower;\\r\\n        if(!ES1.isRegistrar(userAddress)) {\\r\\n            if(ES1.isUserLocked(userAddress)) { return 0; }\\r\\n            buyPower += users[userAddress].totalDeposit - ((users[userAddress].totalDeposit*ES1.CDSpercent())/100);\\r\\n            buyPower -= users[userAddress].totalBorrowed;\\r\\n        } else {    buyPower = (10**20);        }\\r\\n        return buyPower;\\r\\n    }\\r\\n\\r\\n    function createOrder(address userAddress,string memory _tokenSymbol ,uint _amount,uint _duration,uint _yield,address _contractAddress) external{\\r\\n        //_order(userAddress,_tokenSymbol,_amount,_duration,_yield,_contractAddress);\\r\\n        if(ES1.friendlyaddress(msg.sender)){\\r\\n        wERC20 token = wERC20(ETM.getwTokenAddress(_tokenSymbol));\\r\\n        // uint amount = _amount*(10**uint(token.decimals()));\\r\\n        require(token.availableAmount(userAddress)\\u003e= (_amount*(10**uint(token.decimals()))),\\\"insufficient balance\\\");\\r\\n        (uint64 _orderId,uint newAmount,uint fee) = _ordersub(_amount*(10**uint(token.decimals())),userAddress,_duration,_tokenSymbol);\\r\\n        address [] memory _borrowers;\\r\\n        Orders[_orderId] = Order({       \\r\\n                                            creator : userAddress,\\r\\n                                            borrowers : _borrowers,\\r\\n                                            time : now,\\r\\n                                            duration : _duration,\\r\\n                                            amount : newAmount,\\r\\n                                            amountLeft : newAmount,    \\r\\n                                            token : _tokenSymbol,\\r\\n                                            yield : _yield,\\r\\n                                            earnings : 0,\\r\\n                                            status : Status.OPEN,\\r\\n                                            expiryDate : now + _duration*(30 days)\\r\\n        });\\r\\n        token.burnFrom(userAddress,fee);\\r\\n        token.lock(userAddress,newAmount);\\r\\n        ES1.setOwnerFeeVault(_tokenSymbol, fee);\\r\\n        orderIds.push(_orderId);\\r\\n        users[userAddress].totalDeposit += _amount*fetchTokenPrice(_tokenSymbol)/(10**8);\\r\\n        users[userAddress].createdOrders.push(_orderId);\\r\\n        scheduleExpiry(_orderId, _contractAddress);\\r\\n        ES1.emitOrderCreated(userAddress,_duration,_yield,newAmount,_tokenSymbol); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ordersub(uint amount,address userAddress,uint _duration,string memory _tokenSymbol) internal view returns (uint64, uint, uint){\\r\\n        uint newAmount = amount - (amount*ES1.tradeFee())/100;\\r\\n        uint fee = (amount*ES1.tradeFee())/100;\\r\\n        uint64 _orderId = uint64(uint(keccak256(abi.encodePacked(userAddress,_tokenSymbol,_duration,now))));\\r\\n        return (_orderId,newAmount,fee);\\r\\n    }\\r\\n    \\r\\n    /*function getTokenByOrderID(uint64 _orderId) public view returns (uint, string memory) {\\r\\n        return (Orders[_orderId].earnings,Orders[_orderId].token);\\r\\n    }*/\\r\\n    \\r\\n    function borrow(uint64 _orderId,uint _amount,uint _duration,address msgSender,address _contractAddress) external {\\r\\n        if((ES1.friendlyaddress(msg.sender)) \\u0026\\u0026 Orders[_orderId].creator != address(0)) {\\r\\n            if((Orders[_orderId].expiryDate -  now \\u003e _duration*(30 days) \\u0026\\u0026 _duration\\u003e0 \\u0026\\u0026 _duration%1 == 0 \\u0026\\u0026 Orders[_orderId].status == Status.OPEN)){\\r\\n                uint usdValue = _amount*fetchTokenPrice(Orders[_orderId].token)/(10**8);\\r\\n                if((getbuyPower(msgSender) \\u003e= usdValue \\u0026\\u0026 Orders[_orderId].amountLeft \\u003e= _amount)){\\r\\n                    wERC20 token = wERC20(ETM.getwTokenAddress(Orders[_orderId].token));\\r\\n                    uint amount = _amount*(10**uint(token.decimals()));\\r\\n                    token.release(Orders[_orderId].creator,amount);\\r\\n                    token.burnFrom(Orders[_orderId].creator,amount);\\r\\n                    token.mint(msgSender,_amount);\\r\\n                    Orders[_orderId].amountLeft -=  _amount;\\r\\n                    users[msgSender].borrowedOrders.push(_orderId);\\r\\n                    users[msgSender].totalBorrowed += usdValue;\\r\\n                    Orders[_orderId].borrowers.push(msgSender);\\r\\n                    Orders[_orderId].borrows[msgSender] =  BorrowatOrder({\\r\\n                                                                orderId : _orderId,\\r\\n                                                                amount : _amount,\\r\\n                                                                duration : _duration,\\r\\n                                                                dated : now,\\r\\n                                                                duesPaid : 0\\r\\n                                                            }); \\r\\n                    scheduleCheck(_orderId,msgSender,1,_contractAddress);\\r\\n                    if(Orders[_orderId].amountLeft == 0){\\r\\n                        Orders[_orderId].status = Status.CLOSED;    }       \\r\\n                    ES1.emitBorrowed(_orderId,msgSender,_amount,_duration);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function payDue(uint64 _orderId,uint _duration,address msgSender) public{\\r\\n        if((ES1.friendlyaddress(msg.sender) \\u0026\\u0026 (Orders[_orderId].borrows[msgSender].duesPaid \\u003c= Orders[_orderId].borrows[msgSender].duration ))){\\r\\n        wERC20 ecoToken = wERC20(ETM.getwTokenAddress(ES1.WRAP_ECO_SYMBOL()));\\r\\n        uint due = orderMonthlyDue(_orderId,msgSender,_duration)*(10**uint(ecoToken.decimals()));\\r\\n        uint fee = (due*ES1.rewardFee())/100;\\r\\n        ecoToken.burnFrom(msgSender,due);\\r\\n        ES1.setOwnerFeeVault(ES1.WRAP_ECO_SYMBOL(), fee);\\r\\n        ecoToken.mint(Orders[_orderId].creator,due-fee);\\r\\n        users[Orders[_orderId].creator].tokenYield[Orders[_orderId].token] += due - fee;\\r\\n        Orders[_orderId].borrows[msgSender].duesPaid += 1;\\r\\n        Orders[_orderId].earnings += due - fee;\\r\\n        YieldForTokens[Orders[_orderId].token] += due;\\r\\n        if(Orders[_orderId].borrows[msgSender].duesPaid == Orders[_orderId].borrows[msgSender].duration) {\\r\\n            ES1.setUserLocked(msgSender,false);\\r\\n        }\\r\\n        ES1.emitDuePaid(_orderId,msgSender,orderMonthlyDue(_orderId,msgSender,_duration));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function orderExpired(uint64 _orderId) external {\\r\\n        if(ES1.friendlyaddress(msg.sender) \\u0026\\u0026 (Orders[_orderId].expiryDate \\u003c= now)){\\r\\n            wERC20(ETM.getwTokenAddress(Orders[_orderId].token)).release(Orders[_orderId].creator,Orders[_orderId].amountLeft);\\r\\n            users[Orders[_orderId].creator].totalDeposit -= Orders[_orderId].amount*fetchTokenPrice(Orders[_orderId].token)/(10**8);\\r\\n            Orders[_orderId].status = Status.CLOSED;\\r\\n        }\\r\\n    }    \\r\\n\\r\\n    function scheduleExpiry(uint64 _orderId,address _contractAddress) internal{\\r\\n        uint time = Orders[_orderId].expiryDate - Orders[_orderId].time;\\r\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\u0027orderExpired(uint256)\\u0027)),_orderId);\\r\\n        uint callCost = 300000*1e9 + abacus.callFee();\\r\\n        abacus.scheduleFunc{value:callCost}(_contractAddress, time ,data , abacus.callFee() ,300000 , 1e9 );\\r\\n    }    \\r\\n    \\r\\n    function scheduleCheck(uint _orderId,address borrower,uint month,address _contractAddress) internal{\\r\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\u0027dueCheck(uint256,address,uint256)\\u0027)),_orderId,borrower,month, _contractAddress);\\r\\n        uint callCost = 300000*1e9 + abacus.callFee();\\r\\n        abacus.scheduleFunc{value:callCost}(_contractAddress, 30 days ,data , abacus.callFee() ,300000 , 1e9 );\\r\\n    } \\r\\n    \\r\\n    function cancelOrder(uint64 _orderId) external{\\r\\n        if(ES1.friendlyaddress(msg.sender) \\u0026\\u0026 Orders[_orderId].amount == Orders[_orderId].amountLeft){\\r\\n            wERC20(ETM.getwTokenAddress(Orders[_orderId].token)).release(Orders[_orderId].creator,Orders[_orderId].amountLeft);\\r\\n            Orders[_orderId].status = Status.CLOSED;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function dueCheck(uint64 _orderId,address borrower,uint month, address _contractAddress) public {\\r\\n        if(ES1.friendlyaddress(msg.sender) \\u0026\\u0026 (now \\u003e= Orders[_orderId].time * Orders[_orderId].borrows[borrower].duesPaid + 30 days)){\\r\\n            if(Orders[_orderId].borrows[borrower].duesPaid \\u003c month \\u0026\\u0026 !ES1.isRegistrar(borrower) \\u0026\\u0026 !ES1.isUserLocked(borrower)){\\r\\n                wERC20 ecoToken = wERC20(ETM.getwTokenAddress(ES1.WRAP_ECO_SYMBOL()));\\r\\n                uint due = orderMonthlyDue(_orderId,borrower,1)*(10**uint(ecoToken.decimals()));\\r\\n                uint fee = (due*ES1.rewardFee())/100;\\r\\n                ES1.setUserLocked(borrower, true);\\r\\n                ecoToken.mint(Orders[_orderId].creator,due-fee);\\r\\n                ES1.setOwnerFeeVault(Orders[_orderId].token, fee);\\r\\n                ecoToken.mint(Orders[_orderId].creator,due-fee);\\r\\n                users[Orders[_orderId].creator].tokenYield[Orders[_orderId].token] += due - fee;\\r\\n                Orders[_orderId].earnings += due -fee;    \\r\\n                YieldForTokens[Orders[_orderId].token] += due;\\r\\n                ES1.emitDuePaid(_orderId,borrower,orderMonthlyDue(_orderId,borrower,1));\\r\\n            }\\r\\n            if(Orders[_orderId].borrows[borrower].duesPaid != Orders[_orderId].borrows[borrower].duration){\\r\\n                scheduleCheck(_orderId,borrower,1,_contractAddress);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function orderMonthlyDue(uint64 _orderId, address _borrower,uint _duration) public view returns(uint){\\r\\n        if (Orders[_orderId].creator != address(0)) {\\r\\n            (uint ecoPrice,uint tokenPrice ) = (fetchTokenPrice(ES1.WRAP_ECO_SYMBOL()), fetchTokenPrice(Orders[_orderId].token));\\r\\n            uint principle = (Orders[_orderId].borrows[_borrower].amount*_duration)/Orders[_orderId].borrows[_borrower].duration;\\r\\n            uint tokendue = principle +  (principle*Orders[_orderId].yield*_duration)/(100*Orders[_orderId].borrows[_borrower].duration);\\r\\n            return (tokendue*tokenPrice)/ecoPrice;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function borrowZero(uint _amount, string memory token, address userAddress, address _contractAddress) public {\\r\\n        uint usdValue = _amount*fetchTokenPrice(token)/(10**8);\\r\\n        require(getbuyPower(userAddress) \\u003e= usdValue,\\\"power insufficient\\\"); \\r\\n        require(!ES1.isUserLocked(userAddress) \\u0026\\u0026 ES1.friendlyaddress(msg.sender), \\\"UserLocked Pay Dues\\\");\\r\\n        //users[userAddress].buyingPower -= usdValue;\\r\\n        users[userAddress].borrows[token] += _amount;\\r\\n        freeStorage memory newBorrow = freeStorage({  amount: _amount,\\r\\n                                                    time: now,\\r\\n                                                    wtoken: token,\\r\\n                                                    usdvalue: usdValue   });\\r\\n        users[userAddress].myBorrows.push(newBorrow);\\r\\n        uint amount = _amount*(10**uint(wERC20(ETM.getwTokenAddress(token)).decimals()));\\r\\n        wERC20(ETM.getwTokenAddress(token)).mint(userAddress,amount);\\r\\n        if(!ES1.isRegistrar(userAddress)){\\r\\n            scheduleCheck(0,userAddress,1,_contractAddress);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function zeroDepositorPop(address userAddress, string memory _tokenSymbol, uint _amount) public {\\r\\n        require(ES1.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        if(users[userAddress].deposits[_tokenSymbol]\\u003e0) {\\r\\n            uint tokenUsdValue = _amount*fetchTokenPrice(_tokenSymbol)/(10**8);\\r\\n            users[userAddress].deposits[_tokenSymbol] -= _amount;\\r\\n            users[userAddress].totalDeposit -= tokenUsdValue;\\r\\n            uint amountLeft= _amount;\\r\\n            uint counter = users[userAddress].myDeposits.length;\\r\\n            for( uint i= counter-1; amountLeft \\u003e0 ; i--){\\r\\n                if (users[userAddress].myDeposits[i].amount \\u003c amountLeft){   \\r\\n                    amountLeft -= users[userAddress].myDeposits[i].amount;\\r\\n                    issueReward(userAddress, _tokenSymbol, users[userAddress].myDeposits[i].time, users[userAddress].myDeposits[i].amount*fetchTokenPrice(_tokenSymbol)/(10**8));\\r\\n                    users[userAddress].myDeposits.pop(); \\r\\n                } else {\\r\\n                    users[userAddress].myDeposits[i].amount -= amountLeft;\\r\\n                    issueReward(userAddress, _tokenSymbol, users[userAddress].myDeposits[i].time, amountLeft*fetchTokenPrice(_tokenSymbol)/(10**8));\\r\\n                    amountLeft = 0;\\r\\n                }\\r\\n            }    \\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function zeroBorrowPop(address userAddress, string memory _tokenSymbol, uint _amount) public returns (uint) {\\r\\n        require(ES1.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        if(users[userAddress].borrows[_tokenSymbol]\\u003e0) {\\r\\n            uint tokenUsdValue = _amount*fetchTokenPrice(_tokenSymbol)/(10**8);\\r\\n            users[userAddress].borrows[_tokenSymbol] -= _amount;\\r\\n            users[userAddress].totalBorrowed -= tokenUsdValue;\\r\\n            uint amountLeft= _amount;\\r\\n            uint dues;\\r\\n            uint counter = users[userAddress].myBorrows.length;\\r\\n            for( uint i= counter-1; amountLeft \\u003e0 ; i--){\\r\\n                if (users[userAddress].myBorrows[i].amount \\u003c amountLeft){\\r\\n                    uint a = users[userAddress].myBorrows[i].amount;\\r\\n                    amountLeft -= a;\\r\\n                    dues+= calculateECOEarning(a*fetchTokenPrice(_tokenSymbol)/(10**8), _tokenSymbol, users[userAddress].myBorrows[i].time);\\r\\n                    users[userAddress].myBorrows.pop(); \\r\\n                } else {\\r\\n                    users[userAddress].myDeposits[i].amount -= amountLeft;\\r\\n                    dues += calculateECOEarning(amountLeft*fetchTokenPrice(_tokenSymbol)/(10**8), _tokenSymbol, users[userAddress].myBorrows[i].time);\\r\\n                    amountLeft = 0;\\r\\n                }\\r\\n            } \\r\\n            ES1.setOwnerFeeVault(_tokenSymbol, (dues*ES1.rewardFee()/100));\\r\\n            return (dues*(ES1.rewardFee()+100)/100);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function issueReward(address userAddress, string memory _tokenSymbol, uint time, uint tokenUsdValue) internal {\\r\\n        wERC20 ecoToken = wERC20(ETM.getwTokenAddress(ES1.WRAP_ECO_SYMBOL()));\\r\\n        uint reward = calculateECOEarning(tokenUsdValue, _tokenSymbol, time);\\r\\n        ecoToken.mint(userAddress, reward);\\r\\n    }\\r\\n    \\r\\n    function calculateECOEarning(uint usdvalue, string memory _tokenSymbol, uint time) private view returns (uint){\\r\\n        uint _amount = usdvalue*fetchTokenPrice(ES1.WRAP_ECO_SYMBOL());\\r\\n        uint reward = (_amount * ES1.slabRateDeposit(_tokenSymbol) * (time - now))/3155695200; //decimal from Abacus is setoff by decimal from Eco\\r\\n        return reward;\\r\\n    }\\r\\n    \\r\\n    function getECOEarnings(address userAddress) public view returns (uint){\\r\\n        uint ecobalance;\\r\\n        for(uint i=1; i\\u003cusers[userAddress].myDeposits.length \\u0026\\u0026 i\\u003cusers[userAddress].myBorrows.length; i++) {\\r\\n            ecobalance += calculateECOEarning(users[userAddress].myDeposits[i].usdvalue, users[userAddress].myDeposits[i].wtoken, users[userAddress].myDeposits[i].time);\\r\\n            ecobalance -= calculateECOEarning(users[userAddress].myBorrows[i].usdvalue, users[userAddress].myBorrows[i].wtoken, users[userAddress].myBorrows[i].time);\\r\\n        }\\r\\n        return ecobalance - users[userAddress].ecoWithdrawls;\\r\\n    }\\r\\n    \\r\\n    function redeemEcoEarning(address userAddress, uint amount) external {\\r\\n        require(ES1.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        users[userAddress].ecoWithdrawls += amount;\\r\\n    }\\r\\n    \\r\\n     /*==============Helpers============\\r\\n    ---------------------------------*/    \\r\\n \\r\\n \\r\\n    function getOrderIds() public view returns(uint [] memory){\\r\\n        return orderIds;\\r\\n    }\\r\\n    \\r\\n    /*function getUserBorrowedOrders(address userAddress) public view returns(uint64 [] memory borrowedOrders){\\r\\n        return users[userAddress].borrowedOrders;\\r\\n    }*/\\r\\n    \\r\\n    function fetchTokenPrice(string memory _tokenSymbol) public view returns(uint64){ //Put any Token Wrapped or Direct\\r\\n            return abacus.getJobResponse(ETM.getFetchId(_tokenSymbol))[0];\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"},\"EcoSub2.sol\":{\"content\":\"/*SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\n███████╗░█████╗░░█████╗░░█████╗░███████╗██╗░░░░░██╗██╗░░░██╗███╗░░░███╗\\r\\n██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██║░░░░░██║██║░░░██║████╗░████║\\r\\n█████╗░░██║░░╚═╝██║░░██║██║░░╚═╝█████╗░░██║░░░░░██║██║░░░██║██╔████╔██║\\r\\n██╔══╝░░██║░░██╗██║░░██║██║░░██╗██╔══╝░░██║░░░░░██║██║░░░██║██║╚██╔╝██║\\r\\n███████╗╚█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗██║╚██████╔╝██║░╚═╝░██║\\r\\n╚══════╝░╚════╝░░╚════╝░░╚════╝░╚══════╝╚══════╝╚═╝░╚═════╝░╚═╝░░░░░╚═╝\\r\\n\\r\\nBrought to you by Kryptual Team */\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\nimport \\\"./helpers.sol\\\";\\r\\n\\r\\ncontract IAbacusOracle{\\r\\n    uint public callFee;\\r\\n    function getJobResponse(uint64 _jobId) public view returns(uint64[] memory _values){    }\\r\\n    function scheduleFunc(address to ,uint callTime, bytes memory data , uint fee , uint gaslimit ,uint gasprice)public payable{}\\r\\n}\\r\\n\\r\\n\\r\\ncontract EcoceliumTokenManager is Initializable{\\r\\n    \\r\\n    address public owner;\\r\\n    address public EcoceliumAddress;\\r\\n    address [] public TokenAddresses;\\r\\n    mapping (string =\\u003e address) rTokens;    \\r\\n    mapping (string =\\u003e string)  rTokensTowToken;\\r\\n    mapping (string =\\u003e TokenConfig)  wTokens;\\r\\n    \\r\\n    struct TokenConfig{\\r\\n        address tokenAddress;\\r\\n        uint64 fetchId;\\r\\n    }\\r\\n    \\r\\n    function initialize(address _owner) public initializer{\\r\\n        owner = _owner;\\r\\n    }\\r\\n    event WrapTokenCreated(\\r\\n        address TokenAddress,\\r\\n        string  TokenName,\\r\\n        string  TokenSymbol,\\r\\n        uint    Decimals\\r\\n        );\\r\\n        \\r\\n    function updateEcoceliumAddress(address ecoAddress) public {\\r\\n        require(msg.sender == owner);\\r\\n        EcoceliumAddress = ecoAddress;\\r\\n        for(uint i = 0;i\\u003cTokenAddresses.length;i++){\\r\\n            wERC20(TokenAddresses[i]).changeAdmin(ecoAddress);\\r\\n            \\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function addToken(address tokenAddress) public {\\r\\n        require(msg.sender == owner);\\r\\n        \\r\\n        ERC20Basic token = ERC20Basic(tokenAddress);\\r\\n        require(getrTokenAddress(token.symbol())== address(0),\\\"token exist\\\");\\r\\n        rTokens[token.symbol()] = tokenAddress;  \\r\\n        TokenAddresses.push(tokenAddress);\\r\\n    } \\r\\n\\r\\n    function createWrapToken(string memory name,string memory symbol,uint64 _fetchId,string memory wrapOf) public  returns(address TokenAddress){\\r\\n        require(msg.sender == owner);\\r\\n        require(EcoceliumAddress != address(0),\\\"update Ecocelium Address\\\");\\r\\n        ERC20Basic rToken = ERC20Basic(getrTokenAddress(wrapOf));\\r\\n        require(getrTokenAddress(wrapOf) != address(0),\\\"counterpart not supported\\\");\\r\\n\\r\\n        wERC20  token = new wERC20(name,symbol,uint8(rToken.decimals()),EcoceliumAddress,address(this));        \\r\\n        // token.initialize(name,symbol,uint8(rToken.decimals()),EcoceliumAddress,address(this));\\r\\n        rTokensTowToken[wrapOf] = symbol;\\r\\n        TokenAddresses.push(address(token));\\r\\n        wTokens[symbol] = TokenConfig({\\r\\n                                        tokenAddress:address(token),\\r\\n                                        fetchId : _fetchId\\r\\n                                    });\\r\\n        emit WrapTokenCreated(address(token),name,symbol,token.decimals());                            \\r\\n        return address(token);\\r\\n    } \\r\\n    function changeOwner(address _owner) public{\\r\\n        require(owner == msg.sender);\\r\\n        owner =_owner;\\r\\n    }    \\r\\n    function getwTokenAddress(string memory symbol) public view returns(address){\\r\\n        return wTokens[symbol].tokenAddress;\\r\\n    }\\r\\n    \\r\\n    function getFetchId(string memory symbol ) public view returns(uint64){\\r\\n        return wTokens[symbol].fetchId;\\r\\n    }\\r\\n    \\r\\n    function getrTokenAddress(string memory symbol) public view returns(address){\\r\\n        return rTokens[symbol];\\r\\n    }\\r\\n    \\r\\n    function getTokenAddresses() public view returns(address[] memory){\\r\\n        return TokenAddresses;\\r\\n    }\\r\\n    \\r\\n    function getWrapped(string memory symbol) public view returns(string memory){\\r\\n        return rTokensTowToken[symbol];\\r\\n    }\\r\\n    \\r\\n    function getTokenID(string memory symbol) public view returns(uint){\\r\\n        for(uint i=0; i\\u003c TokenAddresses.length; i++) {\\r\\n            if(TokenAddresses[i] == wTokens[symbol].tokenAddress) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract EcoceliumSub1 is Initializable {\\r\\n\\r\\n    address public owner;\\r\\n    EcoceliumTokenManager ETM;\\r\\n    string public WRAP_ECO_SYMBOL;\\r\\n    uint public swapFee;\\r\\n    uint public rewardFee;\\r\\n    uint public tradeFee;\\r\\n    uint public CDSpercent;\\r\\n    string [] rtokenlist;\\r\\n    string [] wtokenlist;\\r\\n    mapping (string =\\u003e uint) public rcurrencyID;\\r\\n    mapping (string =\\u003e uint) public wcurrencyID;\\r\\n    mapping (address =\\u003e bool)  public isRegistrar;\\r\\n    mapping (address =\\u003e bool) public isUserLocked;\\r\\n    mapping (string =\\u003e uint ) public ownerFeeVault;\\r\\n    mapping (string =\\u003e uint) public slabRateDeposit;\\r\\n    mapping (address =\\u003e bool) public friendlyaddress;\\r\\n    \\r\\n    event OrderCreated(\\r\\n        address userAddress,\\r\\n        uint duration,\\r\\n        uint yield,\\r\\n        uint amount,\\r\\n        string token\\r\\n        );\\r\\n        \\r\\n    event Swap(\\r\\n        address userAddress,\\r\\n        string from,\\r\\n        string to,\\r\\n        uint amount\\r\\n        );\\r\\n        \\r\\n    event Borrowed(\\r\\n        uint64 orderId,\\r\\n        address borrower,\\r\\n        uint amount,\\r\\n        uint duration\\r\\n        );\\r\\n        \\r\\n    event Deposit(\\r\\n         address userAddress,\\r\\n         string token,\\r\\n         uint tokenAmount,\\r\\n         uint collateralValue\\r\\n         );\\r\\n         \\r\\n    event DuePaid(\\r\\n        uint64 orderId,\\r\\n        address borrower,\\r\\n        uint amount\\r\\n        );\\r\\n        \\r\\n    function initializeAddress(address _owner) public initializer {\\r\\n        owner = _owner;\\r\\n\\tfriendlyaddress[_owner] = true;\\r\\n    }\\r\\n       \\r\\n    function addCurrency(string memory rtoken) public{\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        if(rcurrencyID[rtoken] != 0) {\\r\\n            rtokenlist.push(rtoken);\\r\\n            rcurrencyID[rtoken] = rtokenlist.length+1;\\r\\n            wtokenlist.push(ETM.getWrapped(rtoken));\\r\\n            wcurrencyID[ETM.getWrapped(rtoken)] = wtokenlist.length+1;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function changeOwner(address _owner) public{\\r\\n        (msg.sender == owner,\\\"not owner\\\");\\r\\n        owner = _owner;\\r\\n    }\\r\\n    \\r\\n    function setSlabRate(string memory WToken, uint rate) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        slabRateDeposit[WToken] = rate;\\r\\n    }\\r\\n    \\r\\n    function setUserLocked(address userAddress, bool value) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        isUserLocked[userAddress] = value;\\r\\n    }\\r\\n    \\r\\n    function setFriendlyAddress(address Address) public {\\r\\n        (msg.sender == owner,\\\"not owner\\\");\\r\\n        friendlyaddress[Address] = true;\\r\\n    }\\r\\n    \\r\\n    function addRegistrar(address _registrar) public{\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        isRegistrar[_registrar] = true;\\r\\n    }\\r\\n    \\r\\n    function setOwnerFeeVault(string memory add,uint value) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        ownerFeeVault[add] += value; \\r\\n    }\\r\\n       \\r\\n    function emitOrderCreated(address userAddress, uint _duration, uint _yield, uint newAmount,string  memory _tokenSymbol) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit OrderCreated(userAddress,_duration,_yield,newAmount,_tokenSymbol);        \\r\\n    }\\r\\n    \\r\\n    function emitSwap(address msgSender, string memory from, string memory to,uint _amount) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit Swap(msgSender,from,to,_amount);\\r\\n    }\\r\\n    \\r\\n    function emitBorrowed(uint64 _orderId, address msgSender, uint _amount,uint _duration) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit Borrowed(_orderId,msgSender,_amount,_duration);\\r\\n    }\\r\\n    \\r\\n    function emitDeposit(address msgSender, string memory _tokenSymbol, uint amount, uint tokenUsdValue) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit Deposit(msgSender,_tokenSymbol,amount,tokenUsdValue);\\r\\n    }\\r\\n    \\r\\n    function emitDuePaid(uint64 _orderId, address msgSender, uint due) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit DuePaid(_orderId,msgSender,due);\\r\\n    }\\r\\n    \\r\\n    function setWRAP_ECO_SYMBOL(string memory _symbol) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        WRAP_ECO_SYMBOL = _symbol;\\r\\n    }\\r\\n    \\r\\n    function updateFees(uint _swapFee,uint _tradeFee,uint _rewardFee) public{\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        (swapFee,tradeFee,rewardFee) = (_swapFee,_tradeFee,_rewardFee);\\r\\n    }\\r\\n    \\r\\n    function setCSDpercent(uint percent) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        CDSpercent = percent;\\r\\n    }\\r\\n    \\r\\n    function unlockDeposit(address _userAddress, uint amount, string memory WToken) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        wERC20 wtoken = wERC20(ETM.getwTokenAddress(WToken));\\r\\n        wtoken.release(_userAddress,amount);\\r\\n    }\\r\\n        \\r\\n}\\r\\n\\r\\n\"},\"helpers.sol\":{\"content\":\"/*SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\n███████╗░█████╗░░█████╗░░█████╗░███████╗██╗░░░░░██╗██╗░░░██╗███╗░░░███╗\\r\\n██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██║░░░░░██║██║░░░██║████╗░████║\\r\\n█████╗░░██║░░╚═╝██║░░██║██║░░╚═╝█████╗░░██║░░░░░██║██║░░░██║██╔████╔██║\\r\\n██╔══╝░░██║░░██╗██║░░██║██║░░██╗██╔══╝░░██║░░░░░██║██║░░░██║██║╚██╔╝██║\\r\\n███████╗╚█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗██║╚██████╔╝██║░╚═╝░██║\\r\\n╚══════╝░╚════╝░░╚════╝░░╚════╝░╚══════╝╚══════╝╚═╝░╚═════╝░╚═╝░░░░░╚═╝\\r\\n\\r\\nBrought to you by Kryptual Team */\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n    \\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    address self = address(this);\\r\\n    uint256 cs;\\r\\n    assembly { cs := extcodesize(self) }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract AccessControl is Context {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using Address for address;\\r\\n\\r\\n    struct RoleData {\\r\\n        EnumerableSet.AddressSet members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping (bytes32 =\\u003e RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\r\\n        return _roles[role].members.contains(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of accounts that have `role`. Can be used\\r\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n     */\\r\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\r\\n        return _roles[role].members.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n     *\\r\\n     * Role bearers are not sorted in any particular way, and their ordering may\\r\\n     * change at any point.\\r\\n     *\\r\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n     * you perform all queries on the same block. See the following\\r\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n     * for more information.\\r\\n     */\\r\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\r\\n        return _roles[role].members.at(index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual {\\r\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\r\\n\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual {\\r\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n    }\\r\\n\\r\\n    function _grantRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.add(account)) {\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revokeRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.remove(account)) {\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract ERC20Basic {\\r\\n    uint public _totalSupply;\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint public decimals;\\r\\n    function totalSupply() public view  returns (uint){}\\r\\n    function balanceOf(address who) public view returns (uint){}\\r\\n    function transfer(address to, uint value) public {}\\r\\n    function transferFrom(address _from, address _to, uint _value) public{}\\r\\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {}\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e uint256) public  lockedAmount;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory name, string memory symbol,uint8 decimals) public {\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _decimals = decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function availableAmount(address owner) public view returns(uint256){\\r\\n        return balanceOf(owner).sub(lockedAmount[owner]);\\r\\n    }\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount \\u003c= availableAmount(sender),\\\"ERC20 : amount exceeds available amount\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        require(amount \\u003c= availableAmount(account),\\\"ERC20 : burn exceeds available amount\\\");\\r\\n        \\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        require(amount \\u003c= availableAmount(owner),\\\"ERC20 : approve amount exceeds available amount\\\");\\r\\n        \\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n    \\r\\n    function _lock(address owner,uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: lock for zero address\\\");\\r\\n        require(amount \\u003c= availableAmount(owner),\\\"ERC20: lock value more tha available amount\\\");\\r\\n        \\r\\n        lockedAmount[owner] = lockedAmount[owner].add(amount);\\r\\n    }\\r\\n    function _release(address owner,uint256 amount) internal virtual{\\r\\n        require(owner != address(0), \\\"ERC20: release for zero address\\\");\\r\\n        require(amount \\u003c= lockedAmount[owner],\\\"ERC20 : release value more then locked value\\\");\\r\\n        \\r\\n        lockedAmount[owner] = lockedAmount[owner].sub(amount);\\r\\n    }\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint256(_at(set._inner, index)));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused, \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(_paused, \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract ERC20Pausable is ERC20, Pausable {\\r\\n    /**\\r\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the contract must not be paused.\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract wERC20 is Context, AccessControl, ERC20, ERC20Pausable {\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n    bytes32 public constant ETMOWNER_ROLE = keccak256(\\\"ETM_ROLE\\\");\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\r\\n     * account that deploys the contract.\\r\\n     *\\r\\n     * See {ERC20-constructor}.\\r\\n     */\\r\\n    constructor(string memory name, string memory symbol,uint8 decimals,address admin,address etmOwner) public ERC20(name, symbol,decimals) {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n        _setupRole(ETMOWNER_ROLE, etmOwner);\\r\\n        _setupRole(MINTER_ROLE, admin);\\r\\n        _setupRole(PAUSER_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` new tokens for `to`.\\r\\n     *\\r\\n     * See {ERC20-_mint}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `MINTER_ROLE`.\\r\\n     */\\r\\n    function mint(address to, uint256 amount) public virtual {\\r\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n    \\r\\n    function burnFrom(address _from,uint256 amount) public virtual{\\r\\n     require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have admin role to burn\\\");\\r\\n     _burn(_from,amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Pauses all token transfers.\\r\\n     *\\r\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `PAUSER_ROLE`.\\r\\n     */\\r\\n    function pause() public virtual {\\r\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\r\\n        _pause();\\r\\n    }\\r\\n    function changeAdmin(address admin) public virtual{\\r\\n        require(hasRole(ETMOWNER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have admin role\\\");\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n        _setupRole(MINTER_ROLE, admin);\\r\\n        _setupRole(PAUSER_ROLE, admin);        \\r\\n    }\\r\\n    /**\\r\\n     * @dev Unpauses all token transfers.\\r\\n     *\\r\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `PAUSER_ROLE`.\\r\\n     */\\r\\n    function unpause() public virtual {\\r\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    function lock(address account , uint256 amount) public virtual{\\r\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have admin role to lock\\\");\\r\\n        _lock(account,amount);\\r\\n    }\\r\\n    \\r\\n    function release(address account , uint256 amount) public virtual{\\r\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have admin role to release\\\");\\r\\n        _release(account,amount);\\r\\n    }\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Decimals\",\"type\":\"uint256\"}],\"name\":\"WrapTokenCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EcoceliumAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_fetchId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"wrapOf\",\"type\":\"string\"}],\"name\":\"createWrapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getFetchId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getWrapped\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getrTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getwTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ecoAddress\",\"type\":\"address\"}],\"name\":\"updateEcoceliumAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EcoceliumTokenManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6538adde8fa3931ebb5a95928ae08a60e149bb136d070d3e7d67e6216346c3d5"}]}