{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/eth/interface/IBalancerPool.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IBalancerPool {\r\n  function isPublicSwap()\r\n  external view\r\n  returns (bool);\r\n\r\n  function getCurrentTokens()\r\n  external\r\n  view\r\n  returns (IERC20[] memory tokens);\r\n\r\n  function calcOutGivenIn(\r\n    uint tokenBalanceIn,\r\n    uint tokenWeightIn,\r\n    uint tokenBalanceOut,\r\n    uint tokenWeightOut,\r\n    uint tokenAmountIn,\r\n    uint swapFee\r\n  )\r\n  external\r\n  pure\r\n  returns (uint tokenAmountOut);\r\n\r\n  function swapExactAmountIn(\r\n    IERC20 tokenIn,\r\n    uint tokenAmountIn,\r\n    IERC20 tokenOut,\r\n    uint minAmountOut,\r\n    uint maxPrice\r\n  )\r\n  external\r\n  returns (uint tokenAmountOut, uint spotPriceAfter);\r\n\r\n  function getColor()\r\n  external view\r\n  returns (bytes32);\r\n\r\n  function getBalance(IERC20 token)\r\n  external\r\n  view\r\n  returns (uint);\r\n\r\n  function getSwapFee()\r\n  external\r\n  view\r\n  returns (uint);\r\n\r\n  function getDenormalizedWeight(IERC20 token)\r\n  external\r\n  view\r\n  returns (uint);\r\n}\r\n\r\n// File: contracts/eth/BalancerRoute.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract BalancerRoute is Ownable {\r\n  // token => pool\r\n  mapping(address => IBalancerPool[]) _balancerPools;\r\n  // pool => tokens\r\n  mapping(address => IERC20[]) _balancerPoolTokens;\r\n  // pool => token => bool\r\n  mapping(address => mapping(address => bool)) public poolTokenEnabled;\r\n\r\n  function _cleanPool(IBalancerPool pool)\r\n  internal\r\n  {\r\n    IERC20[] memory oldTokens = _balancerPoolTokens[address(pool)];\r\n\r\n    if (oldTokens.length == 0) return;\r\n\r\n    for (uint256 i = 0; i < oldTokens.length; i++) {\r\n      address oldToken = address(oldTokens[i]);\r\n      poolTokenEnabled[address(pool)][oldToken] = false;\r\n\r\n      IBalancerPool[] storage currentPools = _balancerPools[oldToken];\r\n      for (uint256 j = 0; j < currentPools.length; j++) {\r\n        if (currentPools[j] == pool) {\r\n          currentPools[j] = currentPools[currentPools.length - 1];\r\n          currentPools.length--;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    delete _balancerPoolTokens[address(pool)];\r\n  }\r\n\r\n  function getPools(IERC20 token)\r\n  public\r\n  view\r\n  returns (IBalancerPool[] memory pools)\r\n  {\r\n    return _balancerPools[address(token)];\r\n  }\r\n\r\n  function getPoolTokens(IBalancerPool pool)\r\n  public\r\n  view\r\n  returns (IERC20[] memory tokens)\r\n  {\r\n    return _balancerPoolTokens[address(pool)];\r\n  }\r\n\r\n  function addPool(IBalancerPool pool)\r\n  public\r\n  onlyOwner\r\n  {\r\n    require(pool.getColor() == bytes32(\"BRONZE\"), 'Invalid color');\r\n    require(pool.isPublicSwap(), 'Must be public');\r\n\r\n    IERC20[] memory tokens = pool.getCurrentTokens();\r\n    require(tokens.length > 1, 'Invalid token size');\r\n\r\n    _cleanPool(pool);\r\n\r\n    _balancerPoolTokens[address(pool)] = tokens;\r\n    for (uint256 i = 0; i < tokens.length; i++) {\r\n      address token = address(tokens[i]);\r\n      IBalancerPool[] storage currentPools = _balancerPools[token];\r\n      // require(currentPools.length <= 50, 'Too many pools');\r\n\r\n      poolTokenEnabled[address(pool)][token] = true;\r\n      currentPools.push(pool);\r\n    }\r\n  }\r\n\r\n  function addPools(IBalancerPool[] memory pools)\r\n  public\r\n  {\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      addPool(pools[i]);\r\n    }\r\n  }\r\n\r\n  function removePool(IBalancerPool pool)\r\n  public\r\n  onlyOwner\r\n  {\r\n    _cleanPool(pool);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IBalancerPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"contract IBalancerPool[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IBalancerPool[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"addPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IBalancerPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IBalancerPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolTokenEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BalancerRoute","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://35b336dd602051a334f57e54dab0ce5b8716139b183d59277a18aaa69434a81a"}]}