{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    function transfer(address, uint256) public returns (bool) {}\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public returns (bool) {}\r\n\r\n    function getSppIdFromHash(bytes32) public returns (uint256) {}\r\n\r\n    function setLastPaidAt(bytes32) public returns (bool) {}\r\n\r\n    function setRemainingToBeFulfilled(bytes32, uint256)\r\n        public\r\n        returns (bool)\r\n    {}\r\n\r\n    function getRemainingToBeFulfilledByHash(bytes32)\r\n        public\r\n        returns (uint256)\r\n    {}\r\n\r\n    function setcurrentTokenStats(\r\n        bytes32,\r\n        uint256,\r\n        uint256\r\n    ) public returns (bool) {}\r\n\r\n    uint256 public decimals;\r\n    string public name;\r\n}\r\n\r\ncontract TradeEngine {\r\n    using SafeMath for uint256;\r\n\r\n    address public admin;\r\n    address public bnsAddress;\r\n    address public feeAccount;\r\n    address private potentialAdmin;\r\n    uint256 public fee;\r\n    address public usdt;\r\n    uint256 public flag = 0;\r\n    uint256 public discount = 2500000000;\r\n    uint256 public discountLockTill;\r\n\r\n    mapping(address => mapping(address => uint256)) public tokens;\r\n    mapping(address => mapping(bytes32 => bool)) public orders;\r\n    mapping(address => mapping(bytes32 => uint256)) public orderFills;\r\n    mapping(address => uint256) public rateToken;\r\n    mapping(address => bool) public dontTakeFeeInBns;\r\n\r\n    event Order(\r\n        address indexed tokenGet,\r\n        uint256 amountGet,\r\n        address indexed tokenGive,\r\n        uint256 amountGive,\r\n        uint256 expires,\r\n        uint256 nonce,\r\n        address indexed user\r\n    );\r\n    event Cancel(\r\n        address indexed tokenGet,\r\n        uint256 amountGet,\r\n        address indexed tokenGive,\r\n        uint256 amountGive,\r\n        uint256 expires,\r\n        uint256 nonce,\r\n        address indexed user\r\n    );\r\n    event Trade(\r\n        address indexed tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        address indexed get,\r\n        address indexed give\r\n    );\r\n    event Deposit(\r\n        address indexed token,\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 balance\r\n    );\r\n    event Withdraw(\r\n        address indexed token,\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 balance\r\n    );\r\n    event DeductFee(\r\n        address indexed payer,\r\n        address indexed token,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n        discountLockTill = now + (365 * 86400);\r\n    }\r\n\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n    modifier _ownerOnly() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    bool public scLock = false;\r\n\r\n    modifier _ifNotLocked() {\r\n        require(scLock == false);\r\n        _;\r\n    }\r\n\r\n    function setLock() public _ownerOnly {\r\n        scLock = !scLock;\r\n    }\r\n\r\n    function changeAdmin(address admin_) public {\r\n        if (msg.sender != admin) revert();\r\n        potentialAdmin = admin_;\r\n    }\r\n\r\n    function becomeAdmin() public {\r\n        if (potentialAdmin == msg.sender) admin = msg.sender;\r\n    }\r\n\r\n    function deposit() public payable {\r\n        tokens[0][msg.sender] = SafeMath.add(tokens[0][msg.sender], msg.value);\r\n        emit Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\r\n    }\r\n\r\n    function withdraw(uint256 amount) public {\r\n        if (tokens[0][msg.sender] < amount) revert();\r\n        tokens[0][msg.sender] = SafeMath.sub(tokens[0][msg.sender], amount);\r\n        if (!msg.sender.call.value(amount)()) revert();\r\n        emit Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);\r\n    }\r\n\r\n    function depositToken(address token, uint256 amount) public {\r\n        //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n        if (token == 0) revert();\r\n        if (!Token(token).transferFrom(msg.sender, this, amount)) revert();\r\n        tokens[token][msg.sender] = SafeMath.add(\r\n            tokens[token][msg.sender],\r\n            amount\r\n        );\r\n        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n\r\n    function withdrawToken(address token, uint256 amount) public {\r\n        if (token == 0) revert();\r\n        if (tokens[token][msg.sender] < amount) revert();\r\n        tokens[token][msg.sender] = SafeMath.sub(\r\n            tokens[token][msg.sender],\r\n            amount\r\n        );\r\n        if (!Token(token).transfer(msg.sender, amount)) revert();\r\n        emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\r\n    }\r\n\r\n    function balanceOf(address token, address user)\r\n        public\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        return tokens[token][user];\r\n    }\r\n\r\n    function order(\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        uint256 expires,\r\n        uint256 nonce\r\n    ) public _ifNotLocked {\r\n        bytes32 hash = sha256(\r\n            abi.encodePacked(\r\n                this,\r\n                tokenGet,\r\n                amountGet,\r\n                tokenGive,\r\n                amountGive,\r\n                expires,\r\n                nonce\r\n            )\r\n        );\r\n        orders[msg.sender][hash] = true;\r\n        emit Order(\r\n            tokenGet,\r\n            amountGet,\r\n            tokenGive,\r\n            amountGive,\r\n            expires,\r\n            nonce,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function orderBNS(\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        uint256 expires,\r\n        uint256 nonce,\r\n        address customerAddress\r\n    ) public returns (bool success) {\r\n        if (msg.sender != bnsAddress) {\r\n            return false;\r\n        }\r\n        bytes32 hash = sha256(\r\n            abi.encodePacked(\r\n                this,\r\n                tokenGet,\r\n                amountGet,\r\n                tokenGive,\r\n                amountGive,\r\n                expires,\r\n                nonce\r\n            )\r\n        );\r\n        orders[customerAddress][hash] = true;\r\n        emit Order(\r\n            tokenGet,\r\n            amountGet,\r\n            tokenGive,\r\n            amountGive,\r\n            expires,\r\n            nonce,\r\n            customerAddress\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function trade(\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        uint256 expires,\r\n        uint256 nonce,\r\n        address user,\r\n        uint256 amount\r\n    ) public _ifNotLocked {\r\n        bytes32 hash = sha256(\r\n            abi.encodePacked(\r\n                this,\r\n                tokenGet,\r\n                amountGet,\r\n                tokenGive,\r\n                amountGive,\r\n                expires,\r\n                nonce\r\n            )\r\n        );\r\n        if (\r\n            !(orders[user][hash] &&\r\n                block.number <= expires &&\r\n                SafeMath.add(orderFills[user][hash], amount) <= amountGet)\r\n        ) revert();\r\n        tradeBalances(\r\n            tokenGet,\r\n            amountGet,\r\n            tokenGive,\r\n            amountGive,\r\n            user,\r\n            amount,\r\n            hash\r\n        );\r\n        orderFills[user][hash] = SafeMath.add(orderFills[user][hash], amount);\r\n        emit Trade(\r\n            tokenGet,\r\n            amount,\r\n            tokenGive,\r\n            (amountGive * amount) / amountGet,\r\n            user,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function tradeBalances(\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        address user,\r\n        uint256 amount,\r\n        bytes32 hash\r\n    ) private {\r\n        uint256 satisfied = SafeMath.div(\r\n            SafeMath.mul(amountGive, amount),\r\n            amountGet\r\n        );\r\n        uint256 feeTokenGet = (amount * fee) / 10000;\r\n        uint256 feeTokenGive = (satisfied * fee) / 10000;\r\n        flag = 0;\r\n\r\n        tokens[tokenGet][msg.sender] = SafeMath.sub(\r\n            tokens[tokenGet][msg.sender],\r\n            amount\r\n        );\r\n        tokens[tokenGet][user] = SafeMath.add(tokens[tokenGet][user], amount);\r\n\r\n        require(\r\n            TradeEngine(this).deductFee(user, tokenGet, feeTokenGet),\r\n            \"unable to charge fee 1\"\r\n        );\r\n\r\n        if (Token(bnsAddress).getSppIdFromHash(hash) != 0) {\r\n            if (flag == 1) {\r\n                require(\r\n                    Token(bnsAddress).setcurrentTokenStats(\r\n                        hash,\r\n                        amount,\r\n                        satisfied\r\n                    ),\r\n                    \"fail7\"\r\n                );\r\n                flag = 0;\r\n            } else {\r\n                require(\r\n                    Token(bnsAddress).setcurrentTokenStats(\r\n                        hash,\r\n                        amount - feeTokenGet,\r\n                        satisfied\r\n                    ),\r\n                    \"fail8\"\r\n                );\r\n            }\r\n        }\r\n\r\n        tokens[tokenGive][user] = SafeMath.sub(\r\n            tokens[tokenGive][user],\r\n            satisfied\r\n        );\r\n        tokens[tokenGive][msg.sender] = SafeMath.add(\r\n            tokens[tokenGive][msg.sender],\r\n            satisfied\r\n        );\r\n\r\n        require(\r\n            TradeEngine(this).deductFee(msg.sender, tokenGive, feeTokenGive),\r\n            \"unable to charge fee 2\"\r\n        );\r\n        flag = 0;\r\n\r\n        if (Token(bnsAddress).getSppIdFromHash(hash) != 0) {\r\n            if (\r\n                Token(bnsAddress).getRemainingToBeFulfilledByHash(hash) ==\r\n                satisfied\r\n            ) {\r\n                require(Token(bnsAddress).setLastPaidAt(hash), \"fail1\");\r\n                // require(Token(bnsAddress).setOnGoing(hash),\"fail2\");\r\n                require(\r\n                    Token(bnsAddress).setRemainingToBeFulfilled(\r\n                        hash,\r\n                        satisfied\r\n                    ),\r\n                    \"fail3\"\r\n                );\r\n            } else {\r\n                require(\r\n                    Token(bnsAddress).setRemainingToBeFulfilled(\r\n                        hash,\r\n                        satisfied\r\n                    ),\r\n                    \"fail4\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function testTrade(\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        uint256 expires,\r\n        uint256 nonce,\r\n        address user,\r\n        uint256 amount,\r\n        address sender\r\n    ) public view returns (bool) {\r\n        if (\r\n            !(block.number <= expires &&\r\n                tokens[tokenGet][sender] >= amount &&\r\n                availableVolume(\r\n                    tokenGet,\r\n                    amountGet,\r\n                    tokenGive,\r\n                    amountGive,\r\n                    expires,\r\n                    nonce,\r\n                    user\r\n                ) >=\r\n                amount)\r\n        ) return false;\r\n        return true;\r\n    }\r\n\r\n    function availableVolume(\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        uint256 expires,\r\n        uint256 nonce,\r\n        address user\r\n    ) public view returns (uint256) {\r\n        bytes32 hash = sha256(\r\n            abi.encodePacked(\r\n                this,\r\n                tokenGet,\r\n                amountGet,\r\n                tokenGive,\r\n                amountGive,\r\n                expires,\r\n                nonce\r\n            )\r\n        );\r\n        if (!(orders[user][hash] && block.number <= expires)) return 0;\r\n        uint256 available1 = SafeMath.sub(amountGet, orderFills[user][hash]);\r\n        uint256 available2 = SafeMath.mul(tokens[tokenGive][user], amountGet) /\r\n            amountGive;\r\n        if (available1 < available2) return available1;\r\n        return available2;\r\n    }\r\n\r\n    function amountFilled(\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        uint256 expires,\r\n        uint256 nonce,\r\n        address user\r\n    ) public view returns (uint256) {\r\n        bytes32 hash = sha256(\r\n            abi.encodePacked(\r\n                this,\r\n                tokenGet,\r\n                amountGet,\r\n                tokenGive,\r\n                amountGive,\r\n                expires,\r\n                nonce\r\n            )\r\n        );\r\n        return orderFills[user][hash];\r\n    }\r\n\r\n    function cancelOrder(\r\n        address tokenGet,\r\n        uint256 amountGet,\r\n        address tokenGive,\r\n        uint256 amountGive,\r\n        uint256 expires,\r\n        uint256 nonce\r\n    ) public {\r\n        bytes32 hash = sha256(\r\n            abi.encodePacked(\r\n                this,\r\n                tokenGet,\r\n                amountGet,\r\n                tokenGive,\r\n                amountGive,\r\n                expires,\r\n                nonce\r\n            )\r\n        );\r\n        if (!orders[msg.sender][hash]) revert();\r\n        orderFills[msg.sender][hash] = amountGet;\r\n        orders[msg.sender][hash] = false;\r\n        // if(Token(bnsAddress).getSppIdFromHash(hash)!=0) require(Token(bnsAddress).setOnGoing(hash),\"fail6\");\r\n        emit Cancel(\r\n            tokenGet,\r\n            amountGet,\r\n            tokenGive,\r\n            amountGive,\r\n            expires,\r\n            nonce,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function _deduct(\r\n        address _payer,\r\n        address _token,\r\n        uint256 _amount\r\n    ) internal {\r\n        tokens[_token][_payer] = tokens[_token][_payer].sub(_amount);\r\n        tokens[_token][feeAccount] = tokens[_token][feeAccount].add(_amount);\r\n        emit DeductFee(_payer, _token, _amount);\r\n    }\r\n\r\n    function deductFee(\r\n        address payer,\r\n        address token,\r\n        uint256 amount\r\n    ) public returns (bool res) {\r\n        require(\r\n            (msg.sender == address(this) || msg.sender == bnsAddress),\r\n            \"this can only be called by bnsAddress or this contract\"\r\n        );\r\n\r\n        if (dontTakeFeeInBns[payer] == true) {\r\n            _deduct(payer, token, amount);\r\n            return true;\r\n        }\r\n\r\n        uint256 eqvltBNS;\r\n        uint256 feeBNS;\r\n\r\n        eqvltBNS = SafeMath.div(\r\n            SafeMath.div(\r\n                SafeMath.mul(\r\n                    SafeMath.mul(amount, rateToken[token]),\r\n                    10**Token(bnsAddress).decimals()\r\n                ),\r\n                10**Token(token).decimals()\r\n            ),\r\n            rateToken[bnsAddress]\r\n        );\r\n\r\n        feeBNS = ((eqvltBNS * (100 - (discount / 100000000))) / 100);\r\n        if (tokens[bnsAddress][payer] >= feeBNS) {\r\n            flag = 1;\r\n            _deduct(payer, bnsAddress, feeBNS);\r\n            return true;\r\n        } else {\r\n            _deduct(payer, token, amount);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function setAddresses(address usdt1, address feeAccount1)\r\n        public\r\n        _ownerOnly\r\n    {\r\n        usdt = usdt1;\r\n        feeAccount = feeAccount1;\r\n    }\r\n\r\n    function setDiscount() public _ownerOnly {\r\n        require(\r\n            now >= discountLockTill,\r\n            \"too early to change discount rate...\"\r\n        );\r\n        discount = SafeMath.div(discount, 2);\r\n        discountLockTill = SafeMath.add(discountLockTill, (365 * 86400));\r\n    }\r\n\r\n    function toggleTakingBnsAsFee() public {\r\n        dontTakeFeeInBns[msg.sender] = !dontTakeFeeInBns[msg.sender];\r\n    }\r\n\r\n    function setRateToken(address[] token, uint256[] rate) public _ownerOnly {\r\n        for (uint256 i = 0; i < token.length; i++) {\r\n            rateToken[token[i]] = rate[i];\r\n        }\r\n    }\r\n\r\n    function setbnsAddress(address _add) public _ownerOnly {\r\n        bnsAddress = _add;\r\n    }\r\n\r\n    function setFeePercent(uint256 fee1) public _ownerOnly {\r\n        require((fee1 <= 50), \"cant be more than 50\");\r\n        fee = fee1;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setbnsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"testTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"amountFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountLockTill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"availableVolume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee1\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flag\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payer\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deductFee\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleTakingBnsAsFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"usdt1\",\"type\":\"address\"},{\"name\":\"feeAccount1\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dontTakeFeeInBns\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address[]\"},{\"name\":\"rate\",\"type\":\"uint256[]\"}],\"name\":\"setRateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenGet\",\"type\":\"address\"},{\"name\":\"amountGet\",\"type\":\"uint256\"},{\"name\":\"tokenGive\",\"type\":\"address\"},{\"name\":\"amountGive\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"customerAddress\",\"type\":\"address\"}],\"name\":\"orderBNS\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rateToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bnsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"get\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"give\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeductFee\",\"type\":\"event\"}]","ContractName":"TradeEngine","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8da24c658121d53f4c4c0031c3d0f160e69e81f999e9767894a23c283fa586d8"}]}