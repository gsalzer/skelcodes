{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface ITokensTypeStorage {\r\n  function isRegistred(address _address) external view returns(bool);\r\n\r\n  function getType(address _address) external view returns(bytes32);\r\n\r\n  function isPermittedAddress(address _address) external view returns(bool);\r\n\r\n  function owner() external view returns(address);\r\n\r\n  function addNewTokenType(address _token, string calldata _type) external;\r\n\r\n  function setTokenTypeAsOwner(address _token, string calldata _type) external;\r\n}\r\ninterface UniswapFactoryInterface {\r\n    // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external;\r\n}\r\ninterface UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n\r\n    // ERC20 comaptibility for liquidity tokens\r\n    function name() external view returns(bytes32);\r\n    function symbol() external view returns(bytes32);\r\n    function decimals() external view returns(uint256);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\ninterface IBancorFormula {\r\n    function calculatePurchaseReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _depositAmount) external view returns (uint256);\r\n    function calculateSaleReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _sellAmount) external view returns (uint256);\r\n    function calculateCrossReserveReturn(uint256 _fromReserveBalance, uint32 _fromReserveRatio, uint256 _toReserveBalance, uint32 _toReserveRatio, uint256 _amount) external view returns (uint256);\r\n    function calculateFundCost(uint256 _supply, uint256 _reserveBalance, uint32 _totalRatio, uint256 _amount) external view returns (uint256);\r\n    function calculateLiquidateReturn(uint256 _supply, uint256 _reserveBalance, uint32 _totalRatio, uint256 _amount) external view returns (uint256);\r\n}\r\ninterface IGetBancorAddressFromRegistry {\r\n  function getBancorContractAddresByName(string calldata _name) external view returns (address result);\r\n}\r\ninterface IGetRatioForBancorAssets {\r\n  function getRatio(address _from, address _to, uint256 _amount) external view returns(uint256 result);\r\n}\r\n\r\n\r\ninterface BancorConverterInterface {\r\n  function connectorTokens(uint index) external view returns(IERC20);\r\n  function fund(uint256 _amount) external;\r\n  function liquidate(uint256 _amount) external;\r\n  function getConnectorBalance(IERC20 _connectorToken) external view returns (uint256);\r\n}\r\n\r\n\r\n/*\r\n* This contract allow buy/sell pool for Bancor and Uniswap assets\r\n* and provide ratio and addition info for pool assets\r\n*/\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface SmartTokenInterface is IERC20 {\r\n  function disableTransfers(bool _disable) external;\r\n  function issue(address _to, uint256 _amount) external;\r\n  function destroy(address _from, uint256 _amount) external;\r\n  function owner() external view returns (address);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PoolPortal {\r\n  using SafeMath for uint256;\r\n\r\n  IGetRatioForBancorAssets public bancorRatio;\r\n  IGetBancorAddressFromRegistry public bancorRegistry;\r\n  UniswapFactoryInterface public uniswapFactory;\r\n\r\n  address public BancorEtherToken;\r\n\r\n  // CoTrader platform recognize ETH by this address\r\n  IERC20 constant private ETH_TOKEN_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n  // Enum\r\n  // NOTE: You can add a new type at the end, but do not change this order\r\n  enum PortalType { Bancor, Uniswap }\r\n\r\n  // events\r\n  event BuyPool(address poolToken, uint256 amount, address trader);\r\n  event SellPool(address poolToken, uint256 amount, address trader);\r\n\r\n  // Contract for handle tokens types\r\n  ITokensTypeStorage public tokensTypes;\r\n\r\n  /**\r\n  * @dev contructor\r\n  *\r\n  * @param _bancorRegistryWrapper  address of GetBancorAddressFromRegistry\r\n  * @param _bancorRatio            address of GetRatioForBancorAssets\r\n  * @param _bancorEtherToken       address of Bancor ETH wrapper\r\n  * @param _uniswapFactory         address of Uniswap factory contract\r\n  * @param _tokensTypes            address of the ITokensTypeStorage\r\n  */\r\n  constructor(\r\n    address _bancorRegistryWrapper,\r\n    address _bancorRatio,\r\n    address _bancorEtherToken,\r\n    address _uniswapFactory,\r\n    address _tokensTypes\r\n\r\n  )\r\n  public\r\n  {\r\n    bancorRegistry = IGetBancorAddressFromRegistry(_bancorRegistryWrapper);\r\n    bancorRatio = IGetRatioForBancorAssets(_bancorRatio);\r\n    BancorEtherToken = _bancorEtherToken;\r\n    uniswapFactory = UniswapFactoryInterface(_uniswapFactory);\r\n    tokensTypes = ITokensTypeStorage(_tokensTypes);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev buy Bancor or Uniswap pool\r\n  *\r\n  * @param _amount     amount of pool token\r\n  * @param _type       pool type\r\n  * @param _poolToken  pool token address\r\n  */\r\n  function buyPool\r\n  (\r\n    uint256 _amount,\r\n    uint _type,\r\n    IERC20 _poolToken\r\n  )\r\n  external\r\n  payable\r\n  {\r\n    if(_type == uint(PortalType.Bancor)){\r\n      buyBancorPool(_poolToken, _amount);\r\n    }\r\n    else if (_type == uint(PortalType.Uniswap)){\r\n      require(_amount == msg.value, \"Not enough ETH\");\r\n      buyUniswapPool(address(_poolToken), _amount);\r\n    }\r\n    else{\r\n      // unknown portal type\r\n      revert();\r\n    }\r\n\r\n    emit BuyPool(address(_poolToken), _amount, msg.sender);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buy pool in Bancor network\r\n  *\r\n  * @param _poolToken        address of bancor converter\r\n  * @param _amount           amount of bancor relay\r\n  */\r\n  function buyBancorPool(IERC20 _poolToken, uint256 _amount) private {\r\n    // get Bancor converter\r\n    address converterAddress = getBacorConverterAddressByRelay(address(_poolToken));\r\n    // calculate connectors amount for buy certain pool amount\r\n    (uint256 bancorAmount,\r\n     uint256 connectorAmount) = getBancorConnectorsAmountByRelayAmount(_amount, _poolToken);\r\n    // get converter as contract\r\n    BancorConverterInterface converter = BancorConverterInterface(converterAddress);\r\n    // approve bancor and coonector amount to converter\r\n    // get connectors\r\n    (IERC20 bancorConnector,\r\n    IERC20 ercConnector) = getBancorConnectorsByRelay(address(_poolToken));\r\n    // reset approve (some ERC20 not allow do new approve if already approved)\r\n    bancorConnector.approve(converterAddress, 0);\r\n    ercConnector.approve(converterAddress, 0);\r\n    // transfer from fund and approve to converter\r\n    _transferFromSenderAndApproveTo(bancorConnector, bancorAmount, converterAddress);\r\n    _transferFromSenderAndApproveTo(ercConnector, connectorAmount, converterAddress);\r\n    // buy relay from converter\r\n    converter.fund(_amount);\r\n\r\n    require(_amount > 0, \"BNT pool recieved amount can not be zerro\");\r\n\r\n    // transfer relay back to smart fund\r\n    _poolToken.transfer(msg.sender, _amount);\r\n\r\n    // transfer connectors back if a small amount remains\r\n    uint256 bancorRemains = bancorConnector.balanceOf(address(this));\r\n    if(bancorRemains > 0)\r\n       bancorConnector.transfer(msg.sender, bancorRemains);\r\n\r\n    uint256 ercRemains = ercConnector.balanceOf(address(this));\r\n    if(ercRemains > 0)\r\n        ercConnector.transfer(msg.sender, ercRemains);\r\n\r\n    setTokenType(address(_poolToken), \"BANCOR_ASSET\");\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buy pool in Uniswap network\r\n  *\r\n  * @param _poolToken        address of Uniswap exchange\r\n  * @param _ethAmount        ETH amount (in wei)\r\n  */\r\n  function buyUniswapPool(address _poolToken, uint256 _ethAmount)\r\n  private\r\n  returns(uint256 poolAmount)\r\n  {\r\n    // get token address\r\n    address tokenAddress = uniswapFactory.getToken(_poolToken);\r\n    // check if such a pool exist\r\n    if(tokenAddress != address(0x0000000000000000000000000000000000000000)){\r\n      // get tokens amd approve to exchange\r\n      uint256 erc20Amount = getUniswapTokenAmountByETH(tokenAddress, _ethAmount);\r\n      _transferFromSenderAndApproveTo(IERC20(tokenAddress), erc20Amount, _poolToken);\r\n      // get exchange contract\r\n      UniswapExchangeInterface exchange = UniswapExchangeInterface(_poolToken);\r\n      // set deadline\r\n      uint256 deadline = now + 15 minutes;\r\n      // buy pool\r\n      poolAmount = exchange.addLiquidity.value(_ethAmount)(\r\n        1,\r\n        erc20Amount,\r\n        deadline);\r\n      // reset approve (some ERC20 not allow do new approve if already approved)\r\n      IERC20(tokenAddress).approve(_poolToken, 0);\r\n\r\n      require(poolAmount > 0, \"UNI pool recieved amount can not be zerro\");\r\n\r\n      // transfer pool token back to smart fund\r\n      IERC20(_poolToken).transfer(msg.sender, poolAmount);\r\n      // transfer ERC20 remains\r\n      uint256 remainsERC = IERC20(tokenAddress).balanceOf(address(this));\r\n      if(remainsERC > 0)\r\n          IERC20(tokenAddress).transfer(msg.sender, remainsERC);\r\n\r\n      setTokenType(_poolToken, \"UNISWAP_POOL\");\r\n    }else{\r\n      // throw if such pool not Exist in Uniswap network\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev return token amount by ETH input ratio\r\n  *\r\n  * @param _token     address of ERC20 token\r\n  * @param _amount    ETH amount (in wei)\r\n  */\r\n  function getUniswapTokenAmountByETH(address _token, uint256 _amount)\r\n    public\r\n    view\r\n    returns(uint256)\r\n  {\r\n    UniswapExchangeInterface exchange = UniswapExchangeInterface(\r\n      uniswapFactory.getExchange(_token));\r\n    return exchange.getTokenToEthOutputPrice(_amount);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev sell Bancor or Uniswap pool\r\n  *\r\n  * @param _amount     amount of pool token\r\n  * @param _type       pool type\r\n  * @param _poolToken  pool token address\r\n  */\r\n  function sellPool\r\n  (\r\n    uint256 _amount,\r\n    uint _type,\r\n    IERC20 _poolToken\r\n  )\r\n  external\r\n  payable\r\n  {\r\n    if(_type == uint(PortalType.Bancor)){\r\n      sellPoolViaBancor(_poolToken, _amount);\r\n    }\r\n    else if (_type == uint(PortalType.Uniswap)){\r\n      sellPoolViaUniswap(_poolToken, _amount);\r\n    }\r\n    else{\r\n      // unknown portal type\r\n      revert();\r\n    }\r\n\r\n    emit SellPool(address(_poolToken), _amount, msg.sender);\r\n  }\r\n\r\n  /**\r\n  * @dev helper for sell pool in Bancor network\r\n  *\r\n  * @param _poolToken        address of bancor relay\r\n  * @param _amount           amount of bancor relay\r\n  */\r\n  function sellPoolViaBancor(IERC20 _poolToken, uint256 _amount) private {\r\n    // transfer pool from fund\r\n    _poolToken.transferFrom(msg.sender, address(this), _amount);\r\n    // get Bancor Converter address\r\n    address converterAddress = getBacorConverterAddressByRelay(address(_poolToken));\r\n    // liquidate relay\r\n    BancorConverterInterface(converterAddress).liquidate(_amount);\r\n    // get connectors\r\n    (IERC20 bancorConnector,\r\n    IERC20 ercConnector) = getBancorConnectorsByRelay(address(_poolToken));\r\n    // transfer connectors back to fund\r\n    bancorConnector.transfer(msg.sender, bancorConnector.balanceOf(address(this)));\r\n    ercConnector.transfer(msg.sender, ercConnector.balanceOf(address(this)));\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for sell pool in Uniswap network\r\n  *\r\n  * @param _poolToken        address of uniswap exchane\r\n  * @param _amount           amount of uniswap pool\r\n  */\r\n  function sellPoolViaUniswap(IERC20 _poolToken, uint256 _amount) private {\r\n    address tokenAddress = uniswapFactory.getToken(address(_poolToken));\r\n    // check if such a pool exist\r\n    if(tokenAddress != address(0x0000000000000000000000000000000000000000)){\r\n      UniswapExchangeInterface exchange = UniswapExchangeInterface(address(_poolToken));\r\n      // approve pool token\r\n      _transferFromSenderAndApproveTo(IERC20(_poolToken), _amount, address(_poolToken));\r\n      // get min returns\r\n      (uint256 minEthAmount,\r\n        uint256 minErcAmount) = getUniswapConnectorsAmountByPoolAmount(\r\n          _amount,\r\n          address(_poolToken));\r\n      // set deadline\r\n      uint256 deadline = now + 15 minutes;\r\n      // liquidate\r\n      (uint256 eth_amount,\r\n       uint256 token_amount) = exchange.removeLiquidity(\r\n         _amount,\r\n         minEthAmount,\r\n         minErcAmount,\r\n         deadline);\r\n      // transfer assets back to smart fund\r\n      msg.sender.transfer(eth_amount);\r\n      IERC20(tokenAddress).transfer(msg.sender, token_amount);\r\n    }else{\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev helper for get bancor converter by bancor relay addrses\r\n  *\r\n  * @param _relay       address of bancor relay\r\n  */\r\n  function getBacorConverterAddressByRelay(address _relay)\r\n    public\r\n    view\r\n    returns(address converter)\r\n  {\r\n    converter = SmartTokenInterface(_relay).owner();\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get Bancor ERC20 connectors addresses\r\n  *\r\n  * @param _relay       address of bancor relay\r\n  */\r\n  function getBancorConnectorsByRelay(address _relay)\r\n    public\r\n    view\r\n    returns(\r\n    IERC20 BNTConnector,\r\n    IERC20 ERCConnector\r\n    )\r\n  {\r\n    address converterAddress = getBacorConverterAddressByRelay(_relay);\r\n    BancorConverterInterface converter = BancorConverterInterface(converterAddress);\r\n    BNTConnector = converter.connectorTokens(0);\r\n    ERCConnector = converter.connectorTokens(1);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev return ERC20 address from Uniswap exchange address\r\n  *\r\n  * @param _exchange       address of uniswap exchane\r\n  */\r\n  function getTokenByUniswapExchange(address _exchange)\r\n    external\r\n    view\r\n    returns(address)\r\n  {\r\n    return uniswapFactory.getToken(_exchange);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get amounts for both Uniswap connectors for input amount of pool\r\n  *\r\n  * @param _amount         relay amount\r\n  * @param _exchange       address of uniswap exchane\r\n  */\r\n  function getUniswapConnectorsAmountByPoolAmount(\r\n    uint256 _amount,\r\n    address _exchange\r\n  )\r\n    public\r\n    view\r\n    returns(uint256 ethAmount, uint256 ercAmount)\r\n  {\r\n    IERC20 token = IERC20(uniswapFactory.getToken(_exchange));\r\n    // total_liquidity exchange.totalSupply\r\n    uint256 totalLiquidity = UniswapExchangeInterface(_exchange).totalSupply();\r\n    // ethAmount = amount * exchane.eth.balance / total_liquidity\r\n    ethAmount = _amount.mul(_exchange.balance).div(totalLiquidity);\r\n    // ercAmount = amount * token.balanceOf(exchane) / total_liquidity\r\n    ercAmount = _amount.mul(token.balanceOf(_exchange)).div(totalLiquidity);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get amount for both Bancor connectors for input amount of pool\r\n  *\r\n  * @param _amount      relay amount\r\n  * @param _relay       address of bancor relay\r\n  */\r\n  function getBancorConnectorsAmountByRelayAmount\r\n  (\r\n    uint256 _amount,\r\n    IERC20 _relay\r\n  )\r\n    public\r\n    view\r\n    returns(uint256 bancorAmount, uint256 connectorAmount)\r\n  {\r\n    // get converter contract\r\n    BancorConverterInterface converter = BancorConverterInterface(\r\n      SmartTokenInterface(address(_relay)).owner());\r\n    // calculate BNT and second connector amount\r\n    // get connectors\r\n    IERC20 bancorConnector = converter.connectorTokens(0);\r\n    IERC20 ercConnector = converter.connectorTokens(1);\r\n    // get connectors balance\r\n    uint256 bntBalance = converter.getConnectorBalance(bancorConnector);\r\n    uint256 ercBalance = converter.getConnectorBalance(ercConnector);\r\n    // get bancor formula contract\r\n    IBancorFormula bancorFormula = IBancorFormula(\r\n      bancorRegistry.getBancorContractAddresByName(\"BancorFormula\"));\r\n    // calculate input\r\n    bancorAmount = bancorFormula.calculateFundCost(\r\n      _relay.totalSupply(),\r\n      bntBalance,\r\n      1000000,\r\n       _amount);\r\n    connectorAmount = bancorFormula.calculateFundCost(\r\n      _relay.totalSupply(),\r\n      ercBalance,\r\n      1000000,\r\n       _amount);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get ratio between assets in bancor newtork\r\n  *\r\n  * @param _from      token or relay address\r\n  * @param _to        token or relay address\r\n  * @param _amount    amount from\r\n  */\r\n  function getBancorRatio(address _from, address _to, uint256 _amount)\r\n  external\r\n  view\r\n  returns(uint256)\r\n  {\r\n    // Change ETH to Bancor ETH wrapper\r\n    address fromAddress = IERC20(_from) == ETH_TOKEN_ADDRESS ? BancorEtherToken : _from;\r\n    address toAddress = IERC20(_to) == ETH_TOKEN_ADDRESS ? BancorEtherToken : _to;\r\n    // return Bancor ratio\r\n    return bancorRatio.getRatio(fromAddress, toAddress, _amount);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Transfers tokens to this contract and approves them to another address\r\n  *\r\n  * @param _source          Token to transfer and approve\r\n  * @param _sourceAmount    The amount to transfer and approve (in _source token)\r\n  * @param _to              Address to approve to\r\n  */\r\n  function _transferFromSenderAndApproveTo(IERC20 _source, uint256 _sourceAmount, address _to) private {\r\n    require(_source.transferFrom(msg.sender, address(this), _sourceAmount));\r\n\r\n    _source.approve(_to, _sourceAmount);\r\n  }\r\n\r\n  // Pool portal can mark each pool token as UNISWAP or BANCOR\r\n  function setTokenType(address _token, string memory _type) private {\r\n    // no need add type, if token alredy registred\r\n    if(tokensTypes.isRegistred(_token))\r\n      return;\r\n\r\n    tokensTypes.addNewTokenType(_token,  _type);\r\n  }\r\n\r\n  // fallback payable function to receive ether from other contract addresses\r\n  fallback() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bancorRegistryWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bancorRatio\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bancorEtherToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokensTypes\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"BuyPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"SellPool\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BancorEtherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bancorRatio\",\"outputs\":[{\"internalType\":\"contract IGetRatioForBancorAssets\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bancorRegistry\",\"outputs\":[{\"internalType\":\"contract IGetBancorAddressFromRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"buyPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"getBacorConverterAddressByRelay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"getBancorConnectorsAmountByRelayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bancorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"connectorAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"getBancorConnectorsByRelay\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"BNTConnector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"ERCConnector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBancorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"getTokenByUniswapExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"getUniswapConnectorsAmountByPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ercAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUniswapTokenAmountByETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"sellPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensTypes\",\"outputs\":[{\"internalType\":\"contract ITokensTypeStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract UniswapFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PoolPortal","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000178c68aefdcae5c9818e43addf6a2b66df534ed50000000000000000000000003079a42efbd0027318baa0dd81d002c0929b502c000000000000000000000000c0829421c1d260bd3cb3e0f06cfe2d52db2ce315000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d9500000000000000000000000037ff4bc9a425f37d3af95662c9d88a88d05f3417","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://43561f537cbb5533f65f52aafc9a133728db825e119c949a8d09984ee78255cf"}]}