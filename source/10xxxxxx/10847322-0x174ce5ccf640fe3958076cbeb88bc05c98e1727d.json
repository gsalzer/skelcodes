{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.14;\r\n\r\n\r\ncontract PV_Interface {\r\n    function getUserStatusReferrers(address _user, uint _now) public view returns (bool);\r\n}\r\n\r\ncontract Fund {\r\n\r\n    address public owner;\r\n    address public developers;\r\n    address public payments;\r\n    address public pv;\r\n    address game;\r\n    uint public priceAction = 50000000000000000;\r\n    uint public finishedCount = 100;\r\n    uint public lastRound;\r\n    uint public earnings;\r\n    bool check;\r\n\r\n    struct RoundStruct {\r\n        bool isExist;\r\n        bool turn;\r\n        uint id;\r\n        uint start;\r\n        uint finish;\r\n        uint totalParticipants;\r\n        uint amount;\r\n    }\r\n    mapping(uint => RoundStruct) public Rounds;\r\n    mapping(uint => mapping (uint => address)) public RoundsParticipants;\r\n\r\n\r\n    modifier onlyOwner{\r\n        require(owner == msg.sender, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setAddrDevelopers(address _addr) external onlyOwner {\r\n        developers = _addr;\r\n    }\r\n\r\n    function setAddrpv(address _addr) external onlyOwner {\r\n        pv = _addr;\r\n    }\r\n\r\n    function setAddrPayments(address _addr) external onlyOwner {\r\n        payments = _addr;\r\n    }\r\n\r\n    function setAddrGame(address _addr) external onlyOwner {\r\n        game = _addr;\r\n    }\r\n\r\n    function setCheck(bool _check) external onlyOwner {\r\n        check = _check;\r\n    }\r\n\r\n    \r\n\r\n    function () external payable {}\r\n\r\n    function checkTurns() public view returns(uint){\r\n        uint x = 0;\r\n        for(uint i = 0; i<=Rounds[lastRound].totalParticipants; i++){\r\n            if( RoundsParticipants[lastRound][i] == msg.sender ){\r\n                x++;\r\n            }\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function Game(uint _turns) external payable {\r\n        if(game != msg.sender){ require((_turns * priceAction) == msg.value, \"The quantity sent is not correct\"); }\r\n        require(Rounds[lastRound].turn == false, \"The voting is over\");\r\n        if(game != msg.sender){ require(_turns <= 5, \"You can only vote 5 turns\"); }\r\n        if(game != msg.sender){ require((checkTurns() + _turns) <= 5, \"You can only vote 5 turns\"); }\r\n        require((_turns + Rounds[lastRound].totalParticipants) <= finishedCount, \"Only 100 total turns\");\r\n        if(game != msg.sender){ require(PV_Interface(pv).getUserStatusReferrers(msg.sender, now) == true, \"Registered users only\"); }\r\n        if( Rounds[lastRound].isExist == false ){\r\n            RoundStruct memory round_struct;\r\n            round_struct = RoundStruct({\r\n                isExist: true,\r\n                turn: false,\r\n                id: lastRound,\r\n                start: now,\r\n                finish: 0,\r\n                totalParticipants: 0,\r\n                amount: 0\r\n            });\r\n            Rounds[lastRound] = round_struct;\r\n        }\r\n        for(uint i = 1; i<=_turns; i++){\r\n            RoundsParticipants[lastRound][Rounds[lastRound].totalParticipants] = msg.sender;\r\n            Rounds[lastRound].totalParticipants++;\r\n        }\r\n        emit eventGame(msg.sender, _turns, lastRound);\r\n        if( Rounds[lastRound].totalParticipants >= (finishedCount) ){\r\n            Rounds[lastRound].turn = true;\r\n            finishTurns();\r\n        }\r\n    }\r\n\r\n    function finishGame() external onlyOwner {\r\n        finishTurns();\r\n    }\r\n\r\n    function finishTurns() private {\r\n        require(Rounds[lastRound].turn == true, \"The voting is over\");\r\n        if( Rounds[lastRound].totalParticipants >= (finishedCount) ){\r\n            finishedGame();\r\n            Rounds[lastRound].finish = now;\r\n            lastRound++;\r\n        }\r\n    }\r\n\r\n    function randomness(uint nonce) public view returns (uint) {\r\n        return uint(uint(keccak256(abi.encode(block.timestamp, block.difficulty, nonce)))%(Rounds[lastRound].totalParticipants+1));\r\n    }\r\n\r\n    function getPercentage(uint x) private pure returns (uint){\r\n        if(x == 1){return 12;}\r\n        else if(x == 2){return 12;}\r\n        else if(x == 3){return 5;}\r\n        else if(x == 4){return 5;}\r\n        else if(x == 5){return 5;}\r\n        else if(x == 6){return 5;}\r\n        else if(x == 7){return 5;}\r\n        else if(x == 8){return 5;}\r\n        else {return 4;}\r\n    }\r\n\r\n    function sendEth(address _user, uint _amount, uint _x) private {\r\n        if( _amount > 0 && _user != address(0)){\r\n            address(uint160(_user)).transfer(_amount);\r\n            emit eventWinner(_user, lastRound, _amount, _x);\r\n        }\r\n    }\r\n\r\n    function sendBalanceDeveloper() private {\r\n        if( address(this).balance > 0){\r\n            address(uint160(developers)).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function sendBalancePayments() private {\r\n        if( address(this).balance > 0){\r\n            uint amount = address(this).balance * 10 / 100;\r\n            address(uint160(payments)).transfer(amount);\r\n        }\r\n    }\r\n\r\n    function finishedGame() private {\r\n        uint count = 0;\r\n        uint x = 1;\r\n        uint balance = address(this).balance;\r\n        earnings += balance;\r\n        Rounds[lastRound].amount = balance;\r\n        sendBalancePayments();\r\n        while(x <= 7){\r\n            count++;\r\n            address _userCheck = RoundsParticipants[lastRound][randomness(count)];\r\n            if(check){ _userCheck = game; }\r\n            uint percentage = getPercentage(x);\r\n            uint amount = balance * percentage / 100;\r\n            sendEth(_userCheck, amount, x);\r\n            x++;\r\n        }\r\n        sendBalanceDeveloper();\r\n    }\r\n\r\n    function withdraw(address _addr) external onlyOwner {\r\n        address(uint160(_addr)).transfer(address(this).balance);\r\n    }\r\n\r\n    event eventWinner(address indexed _user, uint indexed _game, uint _amount, uint indexed _level);\r\n    event eventGame(address indexed _user, uint _turns, uint indexed _game);\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_turns\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"eventGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"eventWinner\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_turns\",\"type\":\"uint256\"}],\"name\":\"Game\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Rounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"turn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RoundsParticipants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkTurns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"randomness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddrDevelopers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddrGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddrPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddrpv\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_check\",\"type\":\"bool\"}],\"name\":\"setCheck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Fund","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d976aceac11380faf25a7807e65aa59cc6fa241bd687838a011a80a340adcffb"}]}