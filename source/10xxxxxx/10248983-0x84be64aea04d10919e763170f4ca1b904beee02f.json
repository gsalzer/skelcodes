{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n* ==========================================================\r\n*\r\n* The Friends Tree\r\n* Why can't we be friends?\r\n* \r\n* Website  : https://frndstree.io\r\n* Telegram : https://t.me/thefriendstree_official\r\n*\r\n* ==========================================================\r\n**/\r\n\r\npragma solidity >=0.5.12 <0.7.0;\r\n\r\ncontract TheFriendsTree {\r\n\r\n    struct Tree {\r\n        uint256 id;\r\n        uint256 referrerCount;\r\n        uint256 referrerId;\r\n        uint256 earnedFromRef;\r\n        uint256 earnedFromPayplan;\r\n        uint256 lastslottime;\r\n        address[] referrals;\r\n    }\r\n    \r\n    struct PayPlan {\r\n        uint256 id;\r\n        uint256 referrerId;\r\n        uint256 reinvestCount;\r\n    }\r\n    \r\n    struct Slots {\r\n        uint256 id;\r\n        address userAddress;\r\n        uint256 referrerId;\r\n        uint256 slottime;\r\n        uint8 eventsCount;\r\n    }\r\n        \r\n    modifier validReferrerId(uint256 _referrerId) {\r\n        require((_referrerId > 0) && (_referrerId < newTreeId), \"Invalid referrer ID\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == ownerWallet,\r\n            \"Only owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    modifier isEligibleBuy {\r\n        require((now - entrance[msg.sender].lastslottime) > 60, \"Allowed to buy slot once per minute!\");\r\n        _;\r\n    }\r\n\r\n    event RegisterTreeEvent(uint256 _userid, address indexed _user, address indexed _referrerAddress, uint256 _amount, uint256 _time);\r\n    event RegisterPayPlanEvent(uint256 _userid, address indexed _user, address indexed _referrerAddress, uint256 _amount, uint256 _time);\r\n    event ReinvestSlotEvent(uint256 _userid, address indexed _user, address indexed _referrerAddress, uint256 _amount, uint256 _time);\r\n\r\n    event PayDirectRefBonusEvent(uint256 amount, address indexed _sponsorAddress, address indexed _fromAddress, uint256 _time);\r\n    event PaySponsorBonusEvent(uint256 amount, address indexed _sponsorAddress, address indexed _fromAddress, uint256 _time);    \r\n    event PayPlanRefPaymentEvent(uint256 amount, address indexed _from, address indexed _to, uint256 _time);\r\n    event TreeRefPaymentEvent(uint256 amount, address indexed _sponsorAddress, address indexed _fromAddress, uint256 _level, uint256 _time);\r\n\r\n\r\n    mapping(address => Tree) public entrance;\r\n    mapping(address => PayPlan) public treePayPlan;\r\n    mapping(uint256 => Slots) public slots;\r\n\r\n    mapping(uint256 => address) private idToAddress;\r\n    mapping (uint8 => uint8) public uplineAmount;\r\n    \r\n    uint256 public newTreeId = 1;\r\n    uint256 public newTreeIdPayPlan = 1;\r\n\r\n    uint256 public newSlotId = 1;\r\n    uint256 public activeSlot = 1;\r\n    \r\n    address public owner;\r\n    address payable ownerWallet;\r\n    \r\n    constructor(address _ownerAddress) public {\r\n        \r\n        uplineAmount[1] = 10;\r\n        uplineAmount[2] = 10;\r\n        uplineAmount[3] = 10;\r\n        uplineAmount[4] = 10;\r\n        uplineAmount[5] = 10;\r\n        uplineAmount[6] = 10;\r\n        uplineAmount[7] = 10;\r\n        uplineAmount[8] = 10;\r\n        uplineAmount[9] = 10;\r\n        uplineAmount[10] = 10;\r\n        \r\n        owner = _ownerAddress;\r\n        ownerWallet = msg.sender;\r\n        \r\n        Tree memory user = Tree({\r\n            id: newTreeId,\r\n            referrerCount: uint256(0),\r\n            referrerId: uint256(0),\r\n            earnedFromRef: uint256(0),\r\n            earnedFromPayplan: uint256(0),\r\n            lastslottime: now,\r\n            referrals: new address[](0)\r\n        });\r\n        \r\n        entrance[_ownerAddress] = user;\r\n        idToAddress[newTreeId] = _ownerAddress;\r\n        \r\n        newTreeId++;\r\n        \r\n        //////\r\n        \r\n        PayPlan memory payPlanUser = PayPlan({\r\n            id: newSlotId,\r\n            referrerId: uint256(0),\r\n            reinvestCount: uint256(0)\r\n        });\r\n        \r\n        treePayPlan[_ownerAddress] = payPlanUser;\r\n        \r\n        Slots memory newSlot = Slots({\r\n            id: newSlotId,\r\n            userAddress: _ownerAddress,\r\n            referrerId: uint256(0),\r\n            slottime: now,\r\n            eventsCount: uint8(0)\r\n        });\r\n        \r\n        slots[newSlotId] = newSlot;\r\n        newTreeIdPayPlan++;\r\n        newSlotId++;\r\n        \r\n    }\r\n    \r\n    function joinTree(uint256 _referrerId) \r\n      public \r\n      payable \r\n      validReferrerId(_referrerId) \r\n    {\r\n        \r\n        require(msg.value == 0.15 ether, \"Joining amount is 0.15 ETH\");\r\n        require(!isTreeExists(msg.sender), \"Already registered in a Tree\");\r\n\r\n        address _userAddress = msg.sender;\r\n        address sponsorAddress = idToAddress[_referrerId];\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n               \r\n        entrance[_userAddress] = Tree({\r\n            id: newTreeId,\r\n            referrerCount: uint256(0),\r\n            referrerId: _referrerId,\r\n            earnedFromRef: uint256(0),\r\n            earnedFromPayplan: uint256(0),\r\n            lastslottime: now,\r\n            referrals: new address[](0)\r\n        });\r\n        idToAddress[newTreeId] = _userAddress;\r\n\r\n        emit RegisterTreeEvent(newTreeId, msg.sender, sponsorAddress, msg.value, now);\r\n        \r\n        newTreeId++;\r\n        \r\n        entrance[sponsorAddress].referrals.push(_userAddress);\r\n        entrance[sponsorAddress].referrerCount++;\r\n        \r\n        if ( isTreeExists(sponsorAddress) ) {\r\n            payDirectRefBonus(sponsorAddress);\r\n            entrance[sponsorAddress].earnedFromRef += 0.05 ether;\r\n        } else {\r\n            payDirectRefBonus(idToAddress[1]);\r\n            entrance[idToAddress[1]].earnedFromRef += 0.05 ether;\r\n        }\r\n\r\n        uint256 amountToDistribute = 0.1 ether;\r\n\r\n        sponsorAddress = idToAddress[entrance[sponsorAddress].referrerId];\r\n\r\n        for (uint8 i = 1; i <= 10; i++) {\r\n            \r\n            if ( isTreeExists(sponsorAddress) ) {\r\n\r\n                uint256 paid = payRefTree(sponsorAddress, i);\r\n                amountToDistribute -= paid;\r\n                entrance[sponsorAddress].earnedFromRef += paid;\r\n                address _nextSponsorAddress = idToAddress[entrance[sponsorAddress].referrerId];\r\n                sponsorAddress = _nextSponsorAddress;\r\n            }\r\n            \r\n        }\r\n        \r\n        if (amountToDistribute > 0) {\r\n            payDirectReferral(idToAddress[1], amountToDistribute);\r\n            entrance[idToAddress[1]].earnedFromRef += amountToDistribute;\r\n        }\r\n        \r\n    }\r\n    \r\n    function JoinPayPlan() \r\n      public \r\n      payable \r\n      isEligibleBuy()\r\n    {\r\n        require(msg.value == 1 ether, \"Participation fee in Pay Plan is 1 ETH\");\r\n        require(isTreeExists(msg.sender), \"Not registered in Tree\");\r\n\r\n        uint256 eventCount = slots[activeSlot].eventsCount;\r\n        uint256 newEventCount = eventCount + 1;\r\n\r\n        if (newEventCount == 3) {\r\n            require(reinvestSlot(\r\n                slots[activeSlot].userAddress, \r\n                slots[activeSlot].id, \r\n                idToAddress[entrance[slots[activeSlot].userAddress].referrerId]\r\n            ));\r\n            slots[activeSlot].eventsCount++;\r\n        }\r\n        \r\n        uint256 _referrerId = entrance[msg.sender].referrerId;\r\n\r\n        PayPlan memory payPlanUser = PayPlan({\r\n            id: newSlotId,\r\n            referrerId: _referrerId,\r\n            reinvestCount: uint256(0)\r\n        });\r\n        treePayPlan[msg.sender] = payPlanUser;\r\n        \r\n        Slots memory _newSlot = Slots({\r\n            id: newSlotId,\r\n            userAddress: msg.sender,\r\n            referrerId: _referrerId,\r\n            slottime: now,\r\n            eventsCount: uint8(0)\r\n        });\r\n\r\n        entrance[msg.sender].lastslottime = now;\r\n        \r\n        slots[newSlotId] = _newSlot;\r\n        newTreeIdPayPlan++;\r\n        \r\n        emit RegisterPayPlanEvent(newSlotId, msg.sender, idToAddress[_referrerId], msg.value, now);\r\n        \r\n        if (_referrerId > 0) {\r\n            paySponsorBonus(idToAddress[_referrerId]);\r\n            entrance[idToAddress[_referrerId]].earnedFromRef += 0.5 ether;\r\n        }\r\n        else{\r\n            paySponsorBonus(idToAddress[1]);\r\n            entrance[idToAddress[1]].earnedFromRef += 0.5 ether;\r\n        }\r\n\r\n        newSlotId++;\r\n\r\n        if (eventCount < 2) {\r\n            \r\n            if(eventCount == 0) {\r\n                payUpline(slots[activeSlot].userAddress);\r\n                entrance[slots[activeSlot].userAddress].earnedFromPayplan += msg.value/2;\r\n            }\r\n            if(eventCount == 1) {\r\n                if (slots[activeSlot].referrerId > 0) {\r\n                    payUpline(idToAddress[slots[activeSlot].referrerId]);\r\n                    entrance[idToAddress[slots[activeSlot].referrerId]].earnedFromRef += msg.value/2;\r\n                }\r\n                else {\r\n                    payUpline(idToAddress[1]);\r\n                    entrance[idToAddress[1]].earnedFromRef += msg.value/2;\r\n                }\r\n            }\r\n\r\n            slots[activeSlot].eventsCount++;\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    function reinvestSlot(address _userAddress, uint256 _userId, address _sponsorAddress) private returns (bool _isReinvested) {\r\n\r\n        uint256 _referrerId = entrance[_userAddress].referrerId;\r\n\r\n        Slots memory _reinvestslot = Slots({\r\n            id: _userId,\r\n            userAddress: _userAddress,\r\n            referrerId: _referrerId,\r\n            slottime: now,\r\n            eventsCount: uint8(0)\r\n        });\r\n        \r\n        treePayPlan[slots[activeSlot].userAddress].reinvestCount++;        \r\n        slots[newSlotId] = _reinvestslot;\r\n        emit ReinvestSlotEvent(newSlotId, _userAddress, _sponsorAddress, msg.value, now);\r\n        newSlotId++;\r\n\r\n        slots[activeSlot].eventsCount = 3;\r\n        uint256 _nextActiveSlot = activeSlot+1;\r\n\r\n        payUpline(slots[_nextActiveSlot].userAddress);\r\n        entrance[slots[_nextActiveSlot].userAddress].earnedFromPayplan += msg.value/2;\r\n        activeSlot++;\r\n\r\n        _isReinvested = true;\r\n\r\n        return _isReinvested;\r\n\r\n    }\r\n\r\n    function payUpline(address _sponsorAddress) private returns (uint distributeAmount) {        \r\n        distributeAmount = 0.5 ether;\r\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            emit PayPlanRefPaymentEvent(distributeAmount, msg.sender, _sponsorAddress, now);\r\n        }        \r\n        return distributeAmount;\r\n    }    \r\n\r\n    function paySponsorBonus(address _sponsorAddress) private {\r\n        uint256 distributeAmount = 0.5 ether;\r\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            emit PaySponsorBonusEvent(distributeAmount, _sponsorAddress, msg.sender, now);\r\n        }\r\n    }\r\n    \r\n    // Pays to Ref LEvels from Tree\r\n    function payRefTree(address _sponsorAddress, uint8 _refLevel) private returns (uint256 distributeAmount) {        \r\n        require( _refLevel <= 10);\r\n        distributeAmount = 0.1 ether / 100 * uplineAmount[_refLevel];\r\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            emit TreeRefPaymentEvent(distributeAmount, _sponsorAddress, msg.sender, _refLevel, now);\r\n        }        \r\n        return distributeAmount;\r\n    }\r\n\r\n    // Pay direct ref bonus from Tree\r\n    function payDirectRefBonus(address _sponsorAddress) private {\r\n        uint256 distributeAmount = 0.05 ether;\r\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            emit PayDirectRefBonusEvent(distributeAmount, _sponsorAddress, msg.sender, now);\r\n        }\r\n    }\r\n    \r\n    // Pay to ID 1 from Tree\r\n    function payDirectReferral(address _sponsorAddress, uint256 payAmount) private returns (uint256 distributeAmount) {        \r\n        distributeAmount = payAmount;\r\n        if (address(uint160(_sponsorAddress)).send(distributeAmount)) {\r\n            emit PayDirectRefBonusEvent(distributeAmount, _sponsorAddress, msg.sender, now);\r\n        }        \r\n        return distributeAmount;        \r\n    }\r\n    \r\n    function isTreeExists(address _userAddress) public view returns (bool) {\r\n        return (entrance[_userAddress].id != 0);\r\n    }\r\n    \r\n    function getTreeReferrals(address _userAddress)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n      {\r\n        return entrance[_userAddress].referrals;\r\n      }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sponsorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"PayDirectRefBonusEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"PayPlanRefPaymentEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sponsorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"PaySponsorBonusEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"RegisterPayPlanEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"RegisterTreeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"ReinvestSlotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sponsorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"TreeRefPaymentEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"JoinPayPlan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entrance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedFromRef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnedFromPayplan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastslottime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getTreeReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isTreeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"}],\"name\":\"joinTree\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSlotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newTreeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newTreeIdPayPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slottime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"eventsCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"treePayPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"uplineAmount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TheFriendsTree","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d9605bdbeef8186fb480eecf313ea640ddaaeb2c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f371d1a4f706584ce6eef9ec66f1bb860b811e8a36cd0e9ac9e1252596408d53"}]}