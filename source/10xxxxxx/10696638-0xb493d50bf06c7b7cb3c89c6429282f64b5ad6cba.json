{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Verification for Global Golden Chain\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.26 <0.7.0;\r\n\r\ncontract GlobalGoldenChain{\r\n    string  public name = \"GlobalGoldenChainToken\";\r\n    string  public symbol = \"GGCT\";\r\n    uint    public decimals = 18;\r\n    uint    public totalSupply = 1000000000 * (10 ** decimals);\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    event   Transfer(address indexed from, address indexed to, uint value);\r\n    event   Approval(address indexed owner, address indexed spender, uint value);\r\n    event   Burn(address indexed from, uint value);\r\n\r\n    struct user{\r\n        address ref;\r\n        bool is_user;\r\n        uint eth;\r\n        uint token;\r\n        uint conversion_date;\r\n    }\r\n    mapping(address=>user) users;\r\n    address[] investment_funds_addrs;\r\n    uint user_num;\r\n    uint total_eth;\r\n\r\n    constructor(address[] memory _investment_funds_addrs) public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        \r\n        for(uint i = 0; i < _investment_funds_addrs.length; i++){\r\n            user storage _user = users[_investment_funds_addrs[i]];\r\n            _user.is_user = true;\r\n            investment_funds_addrs.push(_investment_funds_addrs[i]);\r\n            user_num += 1;\r\n        }\r\n    }\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != address(0x0));\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function burn(uint _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    function burnFrom(address _from, uint _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n    function join_game(address ref)public payable{\r\n        uint amount = msg.value;\r\n        uint tickets = amount * 10;\r\n        require(amount >= 5 * (10 ** 17), \"Need less 0.5 ETH to join game\");\r\n        require(balanceOf[msg.sender] >= tickets, \"Need enough World Feast Tickets to join game\");\r\n        require(users[ref].is_user, \"The referrer is not exist\");\r\n        require(users[msg.sender].is_user == false, \"You are already joined the game\");\r\n\r\n        user storage _user = users[msg.sender];\r\n        uint token = amount * 3;\r\n        _user.ref = ref;\r\n        _user.is_user = true;\r\n        _user.token = token;\r\n        _user.conversion_date = block.timestamp;\r\n\r\n        uint investment_funds = amount * 4 / 100;\r\n        for(uint i = 0; i < investment_funds_addrs.length; i++){\r\n            address investment_funds_addr = investment_funds_addrs[i];\r\n            user storage _user_investment_funds = users[investment_funds_addr];\r\n            _user_investment_funds.eth += investment_funds;\r\n        }\r\n\r\n        address _ref = ref;\r\n        for(uint i = 0; i < 9; i++){\r\n            user storage _user_ref = users[_ref];\r\n            if(_user_ref.is_user){\r\n                uint ref_bonus_eth = calc_ref_bonus_eth(amount, i);\r\n                _user_ref.eth += ref_bonus_eth;\r\n            } else {\r\n                break;\r\n            }\r\n            _ref = _user_ref.ref;\r\n        }\r\n\r\n        burn(tickets);\r\n        total_eth += amount;\r\n        user_num += 1;\r\n    }\r\n    function play_game()public payable{\r\n        uint amount = msg.value;\r\n        uint tickets = amount * 10;\r\n        require(amount >= 5 * (10 ** 17), \"Need less 0.5 ETH to join game\");\r\n        require(balanceOf[msg.sender] >= tickets, \"Need enough World Feast Tickets to join game\");\r\n        require(users[msg.sender].is_user, \"You are not join the game\");\r\n\r\n        user storage _user = users[msg.sender];\r\n        uint token = amount * 3;\r\n        (uint new_token, uint hold_bonus_eth) = calc_hold_bonus_eth(_user.token, _user.conversion_date);\r\n        _user.eth += hold_bonus_eth;\r\n        _user.token = new_token + token;\r\n        _user.conversion_date = block.timestamp;\r\n\r\n        uint investment_funds = amount * 4 / 100;\r\n        for(uint i = 0; i < investment_funds_addrs.length; i++){\r\n            address investment_funds_addr = investment_funds_addrs[i];\r\n            user storage _user_investment_funds = users[investment_funds_addr];\r\n            _user_investment_funds.eth += investment_funds;\r\n        }\r\n\r\n        address _ref = _user.ref;\r\n        for(uint i = 0; i < 9; i++){\r\n            user storage _user_ref = users[_ref];\r\n            if(_user_ref.is_user){\r\n                uint ref_bonus_eth = calc_ref_bonus_eth(amount, i);\r\n                _user_ref.eth += ref_bonus_eth;\r\n            } else {\r\n                break;\r\n            }\r\n            _ref = _user_ref.ref;\r\n        }\r\n\r\n        burn(tickets);\r\n        total_eth += amount;\r\n    }\r\n    function play_game_by_balance() public {\r\n        require(users[msg.sender].is_user, \"You are not join the game\");\r\n\r\n        user storage _user = users[msg.sender];\r\n        uint eth = _user.eth;\r\n        (uint new_token, uint hold_bonus_eth) = calc_hold_bonus_eth(_user.token, _user.conversion_date);\r\n        eth += hold_bonus_eth;\r\n        require(eth > 0, \"Need enough eth balance to play game\");\r\n        _user.eth = 0;\r\n        _user.token = new_token + (eth * 3);\r\n        _user.conversion_date = block.timestamp;\r\n    }\r\n    function withdrow() public {\r\n        require(users[msg.sender].is_user, \"You are not join the game\");\r\n\r\n        user storage _user = users[msg.sender];\r\n        uint eth = _user.eth;\r\n        (uint new_token, uint hold_bonus_eth) = calc_hold_bonus_eth(_user.token, _user.conversion_date);\r\n        eth += hold_bonus_eth;\r\n        require(eth > 0, \"Need enough eth balance to withdrow\");\r\n        require(address(this).balance >= eth, \"Need enough contract eth balance to withdrow\");\r\n        _user.eth = 0;\r\n        _user.token = new_token;\r\n        _user.conversion_date = block.timestamp;\r\n\r\n        msg.sender.transfer(eth);\r\n    }\r\n    function query_account(address addr)public view returns(bool, uint, uint, uint, uint){\r\n        (uint new_token, uint hold_bonus_eth) = calc_hold_bonus_eth(users[addr].token, users[addr].conversion_date);\r\n        uint eth = users[addr].eth + hold_bonus_eth;\r\n        uint token = new_token;\r\n        return (users[addr].is_user, users[addr].conversion_date, balanceOf[addr], token, eth);\r\n    }\r\n    function query_summary()public view returns(uint, uint) {\r\n        return (total_eth, user_num);\r\n    }\r\n    function calc_ref_bonus_eth(uint amount, uint i) private pure returns(uint){\r\n        if(i == 0){ return amount * 9 / 100; }\r\n        if(i == 1){ return amount * 6 / 100; }\r\n        if(i == 2){ return amount * 5 / 100; }\r\n        if(i == 3){ return amount * 3 / 100; }\r\n        if(i == 4){ return amount * 2 / 100; }\r\n        if(i == 5){ return amount * 4 / 1000; }\r\n        if(i == 6){ return amount * 3 / 1000; }\r\n        if(i == 7){ return amount * 2 / 1000; }\r\n        if(i == 8){ return amount * 1 / 1000; }\r\n    }\r\n    function calc_hold_bonus_eth(uint token, uint conversion_date) private view returns(uint, uint) {\r\n        uint new_token = token;\r\n        uint hold_bonus_eth = 0;\r\n\r\n        if(token > 0 && conversion_date > 0 && block.timestamp > conversion_date){\r\n            uint hold_days = (block.timestamp - conversion_date) / 1 days;\r\n            for(uint i = 0; i < hold_days; i++){\r\n                uint day_bonus_eth = new_token * 1 / 100;\r\n                if(day_bonus_eth > 0){\r\n                    new_token -= day_bonus_eth;\r\n                    hold_bonus_eth += day_bonus_eth;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return (new_token, hold_bonus_eth);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_investment_funds_addrs\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"join_game\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"play_game\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"play_game_by_balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"query_account\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"query_summary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GlobalGoldenChain","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000553ef3223cf5f6baa4ca345228f48d8a575ea29400000000000000000000000002f9e997fede43d980bfdebe1ba4e2493f401b120000000000000000000000006c27edfc424cbce73d526428e469accf7eafc503000000000000000000000000317f653b5e4e606da786a70c7fe9284f5232f80100000000000000000000000025eefeb33872075dc4b01be9b95ade6d08872537000000000000000000000000d547198f5d7d81acd85141621807c706d4c5fa04","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d24a109b16eb792424aa82493744d260d65f1ea873e45111f5ed2b8577b9cbc0"}]}