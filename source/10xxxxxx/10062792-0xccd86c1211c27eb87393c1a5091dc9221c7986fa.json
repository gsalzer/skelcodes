{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/XFI.sol\r\n\r\n// File: contracts/XFI.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n// Safemath library \r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  \r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  \r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// ownable contract\r\ncontract Ownable {\r\n  address owner;\r\n\r\n   event transferOwn(address _owner, address newOwner);\r\n\r\n\t\tmodifier onlyOwner() {\r\n\t\t\trequire(isOwner(msg.sender), \"OwnerRole: caller does not have the Owner role\");\r\n\t\t\t_;\r\n\t\t}\r\n\r\n\t\tfunction isOwner(address account) public view returns (bool) {\r\n\t\t\treturn account == owner;\r\n\t\t}\r\n\r\n\t\tfunction getOwner() public view returns (address) {\r\n\t\t\treturn owner;\r\n\t\t}\r\n\r\n\t\t function transferOwnership(address newOwner) public onlyOwner returns (address) {\r\n\t         require( newOwner != address(0), \"new owner address is invalid\");\r\n\t\t\t emit transferOwn(owner, newOwner);\r\n\t         owner = newOwner;\r\n\t\t\t return owner;\r\n      }\r\n}\r\n\r\n\r\ncontract XFITOKEN is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    bool public freeTransfer = false;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    struct tlock {\r\n\t\tuint256 amount;\r\n\t\tuint256 validity;\r\n\t}\r\n    mapping(address => tlock) internal _locks;\r\n    \r\n event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Burn(address indexed _burner, uint256 _value);\r\n  event Lock(address indexed _of, uint256 _value, uint256 _time);\r\n  event Unlock(address indexed _of);\r\n    \r\n    string public _name;  \r\n    string public  _symbol;\r\n    uint8 public _decimals;\r\n    uint public _totalSupply ;\r\n    uint256 public _lockTime = 31536000;\r\n\r\n    mapping ( address => bool ) whitelistedContracts;\r\n\r\n    \r\n  constructor() public {\r\n\t\towner = msg.sender;\r\n\t\t_decimals = 18;\r\n\t\t_name = \"XFI\";\r\n\t\t_symbol = \"XFI\";\r\n\r\n\t\t_totalSupply = 1000000000 * 10**18; // 18 decimal places are allowed\r\n\t\tbalances[owner] = _totalSupply;\r\n\t}\r\n\r\n\r\n  \r\n\r\n  function setTokenName(string memory newName) public onlyOwner {\r\n        _name = newName;\r\n\r\n    }\r\n  function getTokenName() public view returns( string memory){\r\n    return _name;\r\n  }\r\n  function setTokenSymbol(string memory newTokenSymbol) public onlyOwner {\r\n        _symbol = newTokenSymbol;\r\n\r\n    }\r\n  function getTokenSymbol() public view returns( string memory){\r\n    return _symbol;\r\n  }\r\n \r\n  function decimals() public view returns ( uint8 ){\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() public view returns( uint256 ){\r\n    return _totalSupply;\r\n  }\r\n\t\r\n\r\n   modifier ownerOrEnabledTransfer() {\r\n        require(freeTransfer || msg.sender == owner || _isWhitelistedContract( msg.sender) , \"cannot transfer since freetransfer is false or sender not owner\");\r\n        _;\r\n    }\r\n    \r\n  // only payload size\r\n//   modifier onlyPayloadSize(uint size) {\r\n//         assert(msg.data.length == size + 4);\r\n//         _;\r\n//     }\r\n    \r\n  // enable the transfer by the owner\r\n  function enableTransfer() public onlyOwner {\r\n        freeTransfer = true;\r\n    }\r\n\r\n  // transfer lock \r\n  function transferLock(address _to, uint256 _value, uint256 _time) public returns (bool) {\r\n\t require(\r\n        balances[msg.sender]>= _value\r\n        && _value > 0\r\n        );\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n\t\t_lock(_to, _value, now.add(_time));\r\n\t\treturn true;\r\n\t}\r\n\r\n function lock(address _to, uint256 _value, uint256 _time) ownerOrEnabledTransfer public returns (bool) {\r\n\t\t_lock(_to, _value, now.add(_time));\r\n\t\treturn true;\r\n\t}\r\n\r\n  function _changeLockTimeDefault( uint256 _newlockTime ) public onlyOwner returns( bool ){\r\n    _lockTime = _newlockTime;\r\n    return true;\r\n  } \r\n\t\r\n    function unlock(address _of) public returns (bool)\r\n     {\r\n\t\t   _unlock(_of);\r\n\t\t   return true;\r\n       }\r\n       \r\n    function burn(uint256 _value) public onlyOwner returns (bool) {\r\n\t\t_burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction burnFrom(address _of, uint256 _value) public onlyOwner returns (bool) {\r\n\t\t_burn(_of, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction getLockedData(address _of) public view returns (uint256 validity, uint256 amount) {\r\n\t\treturn _getLockedData(_of);\r\n\t}\r\n\t\r\n\t\r\n\tfunction getLockValidity(address _of) public view returns (uint256 validity, uint256 amount) {\r\n\t\treturn _getLockedData(_of);\r\n\t}\r\n\t\r\n\r\n  function transfer(address _to, uint256 _value) ownerOrEnabledTransfer public returns (bool) {\r\n        require(\r\n        getTransferrableAmount(msg.sender)>= _value\r\n        && _value > 0\r\n        );\r\n        if( !freeTransfer && msg.sender == owner ){\r\n          require( _lockTime > 0 );\r\n          _lock(_to, _value, block.timestamp.add(_lockTime));\r\n        }\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  function getTransferrableAmount( address _of ) public view returns (uint256) {\r\n   uint amount = _getLockAmount(_of);\r\n    return balances[_of].sub(amount);\r\n  }\r\n\r\n \r\n  function balanceOf(address _owner) public view returns (uint256 bal) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n  function transferFrom(address _from, address _to, uint256 _value) ownerOrEnabledTransfer public returns (bool) {\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n    // Safe math functions will throw if value invalid\r\n    require( getTransferrableAmount( _from ) >= _value );\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n \r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  \tfunction _lock(address recipient, uint256 amount, uint256 validity) internal {\r\n\t\trequire(recipient != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(amount > 0, \"Amount can not be 0 or less\");\r\n\t\trequire(validity > 0, \"validity can not be 0\");\r\n        uint256 avalidity = _getLockValidity(recipient);\r\n\t\tif ( _locks[recipient].amount > 0 ) {\r\n\t\t    _locks[recipient].amount = _locks[recipient].amount.add(amount);\r\n\t\t\t//_addLockAmount(recipient, amount);\r\n\t\t} else {\r\n\t\t\t_locks[recipient] = tlock(amount, validity);\r\n\t\t}\r\n\t\temit Lock(recipient, amount, validity);\r\n\t}\r\n\r\n      function unlockOwner( address _of ) public onlyOwner {\r\n        _locks[_of].validity = now;\r\n        _locks[_of].amount = 0;\r\n      }\r\n\t\r\n\t\r\n\t  function _unlock(address _of) internal {\r\n\t\trequire(_locks[_of].validity > now, \"LockError: Unable to unlock\");\r\n\t\t_locks[_of].validity = now;\r\n\t\t_locks[_of].amount = 0;\r\n\t\temit Unlock(_of);\r\n\t}\r\n\r\n     function _burn(address _of, uint256 amount) internal {\r\n\t   require(amount <= balances[_of]);\r\n        _totalSupply -= amount;\r\n        balances[_of] -= amount;\r\n\t\temit Burn(_of, amount);\r\n\t}\r\n\t\r\n  // get the lock amount\r\n\tfunction _getLockAmount(address _of) public view returns (uint256) {\r\n\t\tif (_locks[_of].validity > now) return _locks[_of].amount;\r\n    return 0;\r\n\t}\r\n\r\n  // get the lock validity\r\n    function _getLockValidity(address _of) public view  returns (uint256) {\r\n\t\tif (_locks[_of].validity > 0) return _locks[_of].validity;\r\n    return 0;\r\n\t}\r\n\r\n\tfunction _getLockedData(address _of) public view returns (uint256 validity, uint256 amount) {\r\n\t\tif (_locks[_of].validity > now) return (_locks[_of].validity, _locks[_of].amount);\r\n\t\treturn (now, 0);\r\n\t}\r\n   \r\n   // extend the validity of lock of a user\r\n    function _extendLockValidity(address _of, uint256 _time) internal {\r\n\t\t_locks[_of].validity = _locks[_of].validity.add(_time);\r\n\t}\r\n\r\n  // function to add the lock amount\r\n  // will be callable only by the owner\r\n    function _addLockAmount(address _of, uint256 _amount) public onlyOwner returns (bool) {\r\n     require( balances[_of] >= _locks[_of].amount.add( _amount ));\r\n     _locks[_of].amount = _locks[_of].amount.add(_amount);\r\n     return true;\r\n\t}\r\n\r\n  // function to get the lock amount \r\n  // the amount should be less than the balance of the account \r\n  // this function should be callable by the owner only\r\n  // when lock amount is reduced , the rest tokens become transferrable\r\n\tfunction _reduceLockAmount(address _of, uint256 _amount) public onlyOwner returns (bool) {\r\n    require( balances[ _of ] >= _amount );\r\n\t\t_locks[_of].amount = _locks[_of].amount.sub(_amount);\r\n    return true;\r\n\t}\r\n\r\n\r\n  function _addWhitelistedContract( address _admin ) public onlyOwner returns (bool) {\r\n    whitelistedContracts[_admin] = true;\r\n    return true;\r\n  }\r\n\r\n  function _removeWhitelistedContract( address _admin ) public onlyOwner returns (bool) {\r\n    whitelistedContracts[_admin] = false;\r\n    return true;\r\n  }\r\n\r\n  function _isWhitelistedContract( address _admin ) public view returns (bool) {\r\n    return whitelistedContracts[_admin];\r\n  }\r\n  \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"unlockOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getLockedData\",\"outputs\":[{\"name\":\"validity\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"bal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"_getLockedData\",\"outputs\":[{\"name\":\"validity\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_reduceLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"_addWhitelistedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setTokenName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"_removeWhitelistedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenSymbol\",\"type\":\"string\"}],\"name\":\"setTokenSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"_isWhitelistedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_addLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getTransferrableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"_getLockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"transferLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"getLockValidity\",\"outputs\":[{\"name\":\"validity\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newlockTime\",\"type\":\"uint256\"}],\"name\":\"_changeLockTimeDefault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"_getLockValidity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwn\",\"type\":\"event\"}]","ContractName":"XFITOKEN","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3eeb1713cf293f17af28e781497e8a6a8cd5f4d26ccb6b7b82e840c8fa612780"}]}