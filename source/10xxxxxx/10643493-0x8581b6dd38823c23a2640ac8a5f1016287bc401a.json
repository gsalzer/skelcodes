{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        require(initialOwner != address(0));\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @dev Whitelisted accounts have been approved by to perform certain actions (e.g. participate in a\r\n * crowdsale).\r\n */\r\nabstract contract WhitelistedRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role internal _whitelisteds;\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender), \"Sender is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisteds(address[] memory accounts) public virtual onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _whitelisteds.add(accounts[i]);\r\n            emit WhitelistedAdded(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function removeWhitelisteds(address[] memory accounts) public virtual onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _whitelisteds.remove(accounts[i]);\r\n            emit WhitelistedRemoved(accounts[i]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\n interface IERC20 {\r\n     function transfer(address to, uint256 value) external returns (bool);\r\n     function approve(address spender, uint256 value) external returns (bool);\r\n     function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n     function totalSupply() external view returns (uint256);\r\n     function balanceOf(address who) external view returns (uint256);\r\n     function allowance(address owner, address spender) external view returns (uint256);\r\n     event Transfer(address indexed from, address indexed to, uint256 value);\r\n     event Approval(address indexed owner, address indexed spender, uint256 value);\r\n }\r\n\r\n/**\r\n * @title Staking contract\r\n */\r\ncontract Staking is WhitelistedRole {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n\r\n    uint256 constant public ONE_HUNDRED = 10000;\r\n    uint256 constant public ONE_DAY = 1 days;\r\n\r\n    uint256 _depositsBalance;\r\n\r\n    Parameters[] _stages;\r\n    struct Parameters {\r\n        uint256 minimum;\r\n        uint256 maximum;\r\n        uint256 minPercent;\r\n        uint256 maxPercent;\r\n        uint256 timestamp;\r\n        uint256 interval;\r\n    }\r\n\r\n    uint256 public yearSettingsLimit;\r\n\r\n    mapping (address => User) _users;\r\n    struct User {\r\n        uint256 deposit;\r\n        uint256 checkpoint;\r\n        uint256 lastStage;\r\n        uint256 reserved;\r\n    }\r\n\r\n    bool public finalized;\r\n\r\n    event Invested(address indexed user, uint256 amount);\r\n    event DividendsWithdrawn(address sender, address indexed user, uint256 amount);\r\n    event DividendsReserved(address sender, address indexed user, uint256 amount);\r\n    event DepositWithdrawn(address sender, address indexed user, uint256 amount, uint256 remaining);\r\n    event SetParameters(uint256 index, uint256 interval, uint256 minimum, uint256 maximum, uint256 minPercent, uint256 maxPercent);\r\n    event Donated(address indexed sender, address indexed from, uint256 amount);\r\n    event TheEnd(uint256 balance);\r\n\r\n    constructor(address digexTokenAddr, uint256 newMinimum, uint256 newMaximum, uint256 newMinPercent, uint256 newMaxPercent, uint256 settingsLimit) public Ownable(msg.sender) {\r\n        require(digexTokenAddr != address(0));\r\n\r\n        token = IERC20(digexTokenAddr);\r\n        setParameters(newMinimum, newMaximum, newMinPercent, newMaxPercent);\r\n        yearSettingsLimit = settingsLimit;\r\n    }\r\n\r\n    function receiveApproval(address from, uint256 amount, address tokenAddr, bytes calldata extraData) external {\r\n        require(tokenAddr == address(token));\r\n        if (extraData.length > 0) {\r\n            donate(from, amount);\r\n        } else {\r\n            invest(from, amount);\r\n        }\r\n    }\r\n\r\n    function invest(address from, uint256 amount) public {\r\n        User storage user = _users[from];\r\n\r\n        require(!finalized, \"Staking is finalized already\");\r\n        require(msg.sender == address(token) || msg.sender == from, \"You can send only your tokens\");\r\n        require(token.allowance(from, address(this)) >= amount, \"Approve this token amount first\");\r\n\r\n        token.transferFrom(from, address(this), amount);\r\n\r\n        if (user.deposit > 0) {\r\n            user.reserved = getDividends(from);\r\n        }\r\n\r\n        user.checkpoint = now;\r\n        user.lastStage = getCurrentStage();\r\n\r\n        user.deposit = user.deposit.add(amount);\r\n        _depositsBalance = _depositsBalance.add(amount);\r\n\r\n        emit Invested(from, amount);\r\n    }\r\n\r\n    fallback() external payable {\r\n        if (msg.value > 0) {\r\n            msg.sender.transfer(msg.value);\r\n        }\r\n\r\n        if (msg.data.length > 0) {\r\n            if (_bytesToAddress(bytes(msg.data)) == msg.sender) {\r\n                withdrawAll(msg.sender);\r\n            }\r\n        } else {\r\n            withdrawDividends(msg.sender);\r\n        }\r\n    }\r\n\r\n    function donate(address from, uint256 amount) public {\r\n        require(msg.sender == address(token) || msg.sender == from, \"You can send only your tokens\");\r\n        require(token.allowance(from, address(this)) >= amount, \"Approve this token amount first\");\r\n\r\n        token.transferFrom(from, address(this), amount);\r\n\r\n        emit Donated(msg.sender, from, amount);\r\n    }\r\n\r\n    function withdrawAll(address account) public {\r\n        require(msg.sender == account || msg.sender == _owner);\r\n\r\n        withdrawDeposit(account);\r\n        if (_users[account].reserved > 0) {\r\n            withdrawDividends(account);\r\n        }\r\n    }\r\n\r\n    function withdrawDeposit(address account) public {\r\n        require(msg.sender == account || msg.sender == _owner);\r\n\r\n        User storage user = _users[account];\r\n\r\n        uint256 deposit = user.deposit;\r\n        require(deposit > 0, \"Account has no deposit\");\r\n\r\n        if (user.checkpoint < now) {\r\n            user.reserved = getDividends(account);\r\n            user.checkpoint = now;\r\n            user.lastStage = getCurrentStage();\r\n        }\r\n\r\n        user.deposit = 0;\r\n        _depositsBalance = _depositsBalance.sub(deposit);\r\n\r\n        token.transfer(account, deposit);\r\n\r\n        emit DepositWithdrawn(msg.sender, account, deposit, user.reserved);\r\n    }\r\n\r\n    function withdrawDividends(address account) public {\r\n        require(msg.sender == account || msg.sender == _owner);\r\n\r\n        User storage user = _users[account];\r\n\r\n        uint256 payout = getDividends(account);\r\n\r\n        if (user.checkpoint < now) {\r\n            user.checkpoint = now;\r\n            user.lastStage = getCurrentStage();\r\n        }\r\n\r\n        if (user.reserved > 0) {\r\n            user.reserved = 0;\r\n        }\r\n\r\n        require(payout > 0, \"Account has no dividends\");\r\n\r\n        uint256 remaining = getTokenBalanceOf(address(this)).sub(_depositsBalance);\r\n\r\n        if (payout > remaining) {\r\n            user.reserved = user.reserved.add(payout - remaining);\r\n            payout = remaining;\r\n\r\n            emit DividendsReserved(msg.sender, account, user.reserved);\r\n        }\r\n\r\n        if (payout > 0) {\r\n            token.transfer(account, payout);\r\n\r\n            emit DividendsWithdrawn(msg.sender, account, payout);\r\n        }\r\n    }\r\n\r\n    function finilize() public onlyOwner {\r\n        Parameters memory current = _stages[getCurrentStage()];\r\n\r\n        require(current.minPercent == 0 && current.maxPercent == 0 && now - current.timestamp >= 180 * ONE_DAY, \"Only after 180 days of stopped state\");\r\n\r\n        uint256 balance = getTokenBalanceOf(address(this));\r\n        token.transfer(address(token), balance);\r\n\r\n        finalized = true;\r\n\r\n        emit TheEnd(balance);\r\n    }\r\n\r\n    function setParameters(uint256 newMinimum, uint256 newMaximum, uint256 newMinPercent, uint256 newMaxPercent) public onlyOwner {\r\n        require(newMaximum >= newMinimum && newMaxPercent >= newMinPercent, \"Maximum must be more or equal than minimum\");\r\n        require(newMaxPercent <= 50, \"maxPercent must be less or equal than 0.5\");\r\n\r\n        uint256 currentStage = getCurrentStage();\r\n        uint256 nextStage;\r\n        uint256 interval;\r\n\r\n        if (_stages.length > 0) {\r\n            Parameters storage current = _stages[currentStage];\r\n\r\n            require(newMinimum != current.minimum || newMaximum != current.maximum || newMinPercent != current.minPercent || newMaxPercent != current.maxPercent, \"Nothing changes\");\r\n\r\n            nextStage = currentStage+1;\r\n            if (nextStage >= yearSettingsLimit) {\r\n                require(now - _stages[nextStage - yearSettingsLimit].timestamp >= 365 * ONE_DAY, \"Year-settings-limit overflow\");\r\n            }\r\n\r\n            if (current.interval == 0) {\r\n                interval = now - current.timestamp;\r\n                current.interval = interval;\r\n            }\r\n        }\r\n\r\n        _stages.push(Parameters(newMinimum, newMaximum, newMinPercent, newMaxPercent, now, 0));\r\n\r\n        emit SetParameters(nextStage, interval, newMinimum, newMaximum, newMinPercent, newMaxPercent);\r\n    }\r\n\r\n    function addWhitelisteds(address[] memory accounts) public override onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n\r\n            if (_users[accounts[i]].checkpoint < now) {\r\n                _users[accounts[i]].reserved = getDividends(accounts[i]);\r\n                _users[accounts[i]].checkpoint = now;\r\n                _users[accounts[i]].lastStage = getCurrentStage();\r\n            }\r\n\r\n            _whitelisteds.add(accounts[i]);\r\n            emit WhitelistedAdded(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function removeWhitelisteds(address[] memory accounts) public override onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n\r\n            if (_users[accounts[i]].checkpoint < now) {\r\n                _users[accounts[i]].reserved = getDividends(accounts[i]);\r\n                _users[accounts[i]].checkpoint = now;\r\n                _users[accounts[i]].lastStage = getCurrentStage();\r\n            }\r\n\r\n            _whitelisteds.remove(accounts[i]);\r\n            emit WhitelistedRemoved(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\r\n        require(ERC20Token != address(token));\r\n\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    function getDeposit(address addr) public view returns(uint256) {\r\n        return _users[addr].deposit;\r\n    }\r\n\r\n    function getPercent(uint256 deposit, uint256 stage) public view returns(uint256) {\r\n        Parameters memory par = _stages[stage];\r\n\r\n        uint256 userPercent;\r\n\r\n        if (deposit < par.minimum) {\r\n            userPercent = 0;\r\n        } else if (deposit >= par.maximum) {\r\n            userPercent = par.minPercent;\r\n        } else {\r\n            uint256 amount = deposit.sub(par.minimum);\r\n            userPercent = par.maxPercent.sub(amount.mul(par.maxPercent.sub(par.minPercent)).div(par.maximum.sub(par.minimum)));\r\n        }\r\n\r\n        return userPercent;\r\n    }\r\n\r\n    function getUserPercent(address addr) public view returns(uint256) {\r\n        if (isWhitelisted(addr)) {\r\n            return _stages[getCurrentStage()].maxPercent;\r\n        } else {\r\n            return getPercent(getDeposit(addr), getCurrentStage());\r\n        }\r\n    }\r\n\r\n    function getDividends(address addr) public view returns(uint256) {\r\n        User storage user = _users[addr];\r\n\r\n        uint256 currentStage = getCurrentStage();\r\n        uint256 payout = user.reserved;\r\n        uint256 percent;\r\n        uint256 deposit = user.deposit;\r\n\r\n        if (user.lastStage == currentStage) {\r\n\r\n            if (isWhitelisted(addr)) {\r\n                percent = _stages[currentStage].maxPercent;\r\n            } else if (deposit > _stages[currentStage].maximum) {\r\n                deposit = _stages[currentStage].maximum;\r\n                percent = _stages[currentStage].minPercent;\r\n            } else {\r\n                percent = getUserPercent(addr);\r\n            }\r\n\r\n            payout += (deposit.mul(percent).div(ONE_HUNDRED)).mul(now.sub(user.checkpoint)).div(ONE_DAY);\r\n\r\n        } else {\r\n\r\n            uint256 i = currentStage.sub(user.lastStage);\r\n\r\n            while (true) {\r\n\r\n                if (isWhitelisted(addr)) {\r\n                    percent = _stages[currentStage-i].maxPercent;\r\n                } else if (deposit > _stages[currentStage].maximum) {\r\n                    deposit = _stages[currentStage-i].maximum;\r\n                    percent = _stages[currentStage-i].minPercent;\r\n                } else {\r\n                    percent = getPercent(deposit, currentStage-i);\r\n                }\r\n\r\n                if (currentStage-i == user.lastStage) {\r\n                    payout += (deposit.mul(percent).div(ONE_HUNDRED)).mul(_stages[user.lastStage+1].timestamp.sub(user.checkpoint)).div(ONE_DAY);\r\n                } else if (_stages[currentStage-i].interval != 0) {\r\n                    payout += (deposit.mul(percent).div(ONE_HUNDRED)).mul(_stages[currentStage-i].interval).div(ONE_DAY);\r\n                } else {\r\n                    payout += (deposit.mul(percent).div(ONE_HUNDRED)).mul(now.sub(_stages[currentStage].timestamp)).div(ONE_DAY);\r\n                    break;\r\n                }\r\n\r\n                i--;\r\n            }\r\n\r\n        }\r\n\r\n        return payout;\r\n    }\r\n\r\n    function getAvailable(address addr) public view returns(uint256) {\r\n        return getDeposit(addr).add(getDividends(addr));\r\n    }\r\n\r\n    function getCurrentStage() public view returns(uint256) {\r\n        if (_stages.length > 0) {\r\n            return _stages.length-1;\r\n        }\r\n    }\r\n\r\n    function getParameters(uint256 stage) public view returns(uint256 minimum, uint256 maximum, uint256 minPercent, uint256 maxPercent, uint256 timestamp, uint256 interval) {\r\n        Parameters memory par = _stages[stage];\r\n        return (par.minimum, par.maximum, par.minPercent, par.maxPercent, par.timestamp, par.interval);\r\n    }\r\n\r\n    function getCurrentParameters() public view returns(uint256 minimum, uint256 maximum, uint256 minPercent, uint256 maxPercent, uint256 timestamp, uint256 interval) {\r\n        return getParameters(getCurrentStage());\r\n    }\r\n\r\n    function getContractTokenBalance() public view returns(uint256 balance, uint256 deposits, uint256 dividends) {\r\n        balance = token.balanceOf(address(this));\r\n        deposits = _depositsBalance;\r\n        if (balance >= deposits) {\r\n            dividends = balance.sub(deposits);\r\n        }\r\n    }\r\n\r\n    function getTokenBalanceOf(address account) public view returns(uint256) {\r\n        return token.balanceOf(account);\r\n    }\r\n\r\n    function _bytesToAddress(bytes memory source) internal pure returns(address parsedAddr) {\r\n        assembly {\r\n            parsedAddr := mload(add(source,0x14))\r\n        }\r\n        return parsedAddr;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"digexTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settingsLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendsReserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPercent\",\"type\":\"uint256\"}],\"name\":\"SetParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TheEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addWhitelisteds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finilize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"getPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removeWhitelisteds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxPercent\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearSettingsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000763f8b4fb067190e739ed6acb12f40f2f3890840000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000002faf080000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000018","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bdc5c4f01c49653a1902ac4edea8a62686be9caf2b115c92d3ffad840be4082e"}]}