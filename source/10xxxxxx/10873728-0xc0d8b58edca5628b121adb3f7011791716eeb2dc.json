{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeDecimalMath {\r\n    using SafeMath for uint;\r\n\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    uint public constant UNIT = 10**uint(decimals);\r\n\r\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\r\n\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    function preciseUnit() external pure returns (uint) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\r\n        \r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    function _multiplyDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        \r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\r\n        \r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    function _divideDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n}\r\n\r\ncontract LnAdmin {\r\n    address public admin;\r\n    address public candidate;\r\n\r\n    constructor(address _admin) public {\r\n        require(_admin != address(0), \"admin address cannot be 0\");\r\n        admin = _admin;\r\n        emit AdminChanged(address(0), _admin);\r\n    }\r\n\r\n    function setCandidate(address _candidate) external onlyAdmin {\r\n        address old = candidate;\r\n        candidate = _candidate;\r\n        emit candidateChanged( old, candidate);\r\n    }\r\n\r\n    function becomeAdmin( ) external {\r\n        require( msg.sender == candidate, \"Only candidate can become admin\");\r\n        address old = admin;\r\n        admin = candidate;\r\n        emit AdminChanged( old, admin ); \r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require( (msg.sender == admin), \"Only the contract admin can perform this action\");\r\n        _;\r\n    }\r\n\r\n    event candidateChanged(address oldCandidate, address newCandidate );\r\n    event AdminChanged(address oldAdmin, address newAdmin);\r\n}\r\n\r\ncontract LnProxyBase is LnAdmin {\r\n    LnProxyImpl public target;\r\n\r\n    constructor(address _admin) public LnAdmin(_admin) {}\r\n\r\n    function setTarget(LnProxyImpl _target) external onlyAdmin {\r\n        target = _target;\r\n        emit TargetUpdated(_target);\r\n    }\r\n\r\n    function Log0( bytes calldata callData ) external onlyTarget {\r\n        uint size = callData.length;\r\n        bytes memory _callData = callData;\r\n        assembly {\r\n            log0(add(_callData, 32), size)\r\n        }\r\n    }\r\n\r\n    function Log1( bytes calldata callData, bytes32 topic1 ) external onlyTarget {\r\n        uint size = callData.length;\r\n        bytes memory _callData = callData;\r\n        assembly {\r\n            log1(add(_callData, 32), size, topic1 )\r\n        }\r\n    }\r\n\r\n    function Log2( bytes calldata callData, bytes32 topic1, bytes32 topic2 ) external onlyTarget {\r\n        uint size = callData.length;\r\n        bytes memory _callData = callData;\r\n        assembly {\r\n            log2(add(_callData, 32), size, topic1, topic2 )\r\n        }\r\n    }\r\n\r\n    function Log3( bytes calldata callData, bytes32 topic1, bytes32 topic2, bytes32 topic3 ) external onlyTarget {\r\n        uint size = callData.length;\r\n        bytes memory _callData = callData;\r\n        assembly {\r\n            log3(add(_callData, 32), size, topic1, topic2, topic3 )\r\n        }\r\n    }\r\n\r\n    function Log4( bytes calldata callData, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4 ) external onlyTarget {\r\n        uint size = callData.length;\r\n        bytes memory _callData = callData;\r\n        assembly {\r\n            log4(add(_callData, 32), size, topic1, topic2, topic3, topic4 )\r\n        }\r\n    }\r\n\r\n    //receive: It is executed on a call to the contract with empty calldata. This is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer()).\r\n    //fallback: can only rely on 2300 gas being available,\r\n    receive() external payable {\r\n        target.setMessageSender(msg.sender);\r\n\r\n        assembly {\r\n            let free_ptr := mload(0x40)\r\n            calldatacopy(free_ptr, 0, calldatasize())\r\n\r\n            let result := call(gas(), sload(target_slot), callvalue(), free_ptr, calldatasize(), 0, 0)\r\n            returndatacopy(free_ptr, 0, returndatasize())\r\n\r\n            if iszero(result) {\r\n                revert(free_ptr, returndatasize())\r\n            }\r\n            return(free_ptr, returndatasize())\r\n        }\r\n    }\r\n\r\n    modifier onlyTarget {\r\n        require(LnProxyImpl(msg.sender) == target, \"Must be proxy target\");\r\n        _;\r\n    }\r\n\r\n    event TargetUpdated(LnProxyImpl newTarget);\r\n}\r\n\r\n\r\nabstract contract LnProxyImpl is LnAdmin {\r\n    \r\n    LnProxyBase public proxy;\r\n    LnProxyBase public integrationProxy;\r\n\r\n    address public messageSender;\r\n\r\n    constructor(address payable _proxy) internal {\r\n        \r\n        require(admin != address(0), \"Admin must be set\");\r\n\r\n        proxy = LnProxyBase(_proxy);\r\n        emit ProxyUpdated(_proxy);\r\n    }\r\n\r\n    function setProxy(address payable _proxy) external onlyAdmin {\r\n        proxy = LnProxyBase(_proxy);\r\n        emit ProxyUpdated(_proxy);\r\n    }\r\n\r\n    function setIntegrationProxy(address payable _integrationProxy) external onlyAdmin {\r\n        integrationProxy = LnProxyBase(_integrationProxy);\r\n    }\r\n\r\n    function setMessageSender(address sender) external onlyProxy {\r\n        messageSender = sender;\r\n    }\r\n\r\n    modifier onlyProxy {\r\n        require(LnProxyBase(msg.sender) == proxy || LnProxyBase(msg.sender) == integrationProxy, \"Only the proxy can call\");\r\n        _;\r\n    }\r\n\r\n    modifier optionalProxy {\r\n        if (LnProxyBase(msg.sender) != proxy && LnProxyBase(msg.sender) != integrationProxy && messageSender != msg.sender) {\r\n            messageSender = msg.sender;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier optionalProxy_onlyAdmin {\r\n        if (LnProxyBase(msg.sender) != proxy && LnProxyBase(msg.sender) != integrationProxy && messageSender != msg.sender) {\r\n            messageSender = msg.sender;\r\n        }\r\n        require(messageSender == admin, \"only for admin\");\r\n        _;\r\n    }\r\n\r\n    event ProxyUpdated(address proxyAddress);\r\n}\r\n\r\ncontract LnErc20Handler is IERC20, LnAdmin, LnProxyImpl {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n\r\n    LnTokenStorage public tokenStorage;\r\n\r\n    string public override name;\r\n    string public override symbol;\r\n    uint public override totalSupply;\r\n    uint8 public override decimals;\r\n\r\n    constructor( address payable _proxy, LnTokenStorage _tokenStorage, string memory _name, \r\n        string memory _symbol, uint _totalSupply, uint8 _decimals, address _admin ) \r\n        public LnAdmin(_admin) LnProxyImpl(_proxy) {\r\n        \r\n        tokenStorage = _tokenStorage;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        totalSupply = _totalSupply;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint) {\r\n        return tokenStorage.allowance(owner, spender);\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint) {\r\n        return tokenStorage.balanceOf(account);\r\n    }\r\n\r\n    function setTokenStorage(LnTokenStorage _tokenStorage) external optionalProxy_onlyAdmin {\r\n        tokenStorage = _tokenStorage;\r\n        emitTokenStorageUpdated(address(tokenStorage));\r\n    }\r\n\r\n    function _internalTransfer( address from, address to, uint value ) internal returns (bool) {\r\n        \r\n        require(to != address(0) && to != address(this) && to != address(proxy), \"Cannot transfer to this address\");\r\n        _beforeTokenTransfer(from, to, value);\r\n\r\n        tokenStorage.setBalanceOf(from, tokenStorage.balanceOf(from).sub(value));\r\n        tokenStorage.setBalanceOf(to, tokenStorage.balanceOf(to).add(value));\r\n\r\n        emitTransfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transferByProxy(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) internal returns (bool) {\r\n        return _internalTransfer(from, to, value);\r\n    }\r\n\r\n    function _transferFromByProxy(\r\n        address sender,\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) internal returns (bool) {\r\n        \r\n        tokenStorage.setAllowance(from, sender, tokenStorage.allowance(from, sender).sub(value));\r\n        return _internalTransfer(from, to, value);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    // default transfer\r\n    function transfer(address to, uint value) external virtual override optionalProxy returns (bool) {\r\n        _transferByProxy(messageSender, to, value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    // default transferFrom\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external virtual override optionalProxy returns (bool) {\r\n        return _transferFromByProxy(messageSender, from, to, value);\r\n    }\r\n\r\n\r\n    function approve(address spender, uint value) public virtual override optionalProxy returns (bool) {\r\n        address sender = messageSender;\r\n\r\n        tokenStorage.setAllowance(sender, spender, value);\r\n        emitApproval(sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function addressToBytes32(address input) internal pure returns (bytes32) {\r\n        return bytes32(uint256(uint160(input)));\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    bytes32 internal constant TRANSFER_SIG = keccak256(\"Transfer(address,address,uint256)\");\r\n\r\n    function emitTransfer(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) internal {\r\n        proxy.Log3( abi.encode(value),  TRANSFER_SIG, addressToBytes32(from), addressToBytes32(to) );\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    bytes32 internal constant APPROVAL_SIG = keccak256(\"Approval(address,address,uint256)\");\r\n\r\n    function emitApproval(\r\n        address owner,\r\n        address spender,\r\n        uint value\r\n    ) internal {\r\n        proxy.Log3( abi.encode(value),  APPROVAL_SIG, addressToBytes32(owner), addressToBytes32(spender) );\r\n    }\r\n\r\n    event TokenStorageUpdated(address newTokenStorage);\r\n    bytes32 internal constant TOKENSTORAGE_UPDATED_SIG = keccak256(\"TokenStorageUpdated(address)\");\r\n\r\n    function emitTokenStorageUpdated(address newTokenStorage) internal {\r\n        proxy.Log1( abi.encode(newTokenStorage), TOKENSTORAGE_UPDATED_SIG );\r\n    }\r\n}\r\n\r\n\r\nabstract contract LnOperatorModifier is LnAdmin {\r\n    \r\n    address public operator;\r\n\r\n    constructor(address _operator) internal {\r\n        require(admin != address(0), \"admin must be set\");\r\n\r\n        operator = _operator;\r\n        emit OperatorUpdated(_operator);\r\n    }\r\n\r\n    function setOperator(address _opperator) external onlyAdmin {\r\n        operator = _opperator;\r\n        emit OperatorUpdated(_opperator);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, \"Only operator can perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OperatorUpdated(address operator);\r\n}\r\n\r\n\r\n\r\ncontract LnTokenStorage is LnAdmin, LnOperatorModifier {\r\n    \r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    constructor(address _admin, address _operator) public LnAdmin(_admin) LnOperatorModifier(_operator) {}\r\n\r\n    function setAllowance(address tokenOwner, address spender, uint value) external onlyOperator {\r\n        allowance[tokenOwner][spender] = value;\r\n    }\r\n\r\n    function setBalanceOf(address account, uint value) external onlyOperator {\r\n        balanceOf[account] = value;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract LinearFinance is LnErc20Handler {\r\n    \r\n    string public constant TOKEN_NAME = \"Linear Token\";\r\n    string public constant TOKEN_SYMBOL = \"LINA\";\r\n    uint8 public constant DECIMALS = 18;\r\n\r\n    constructor(\r\n        address payable _proxy,\r\n        LnTokenStorage _tokenStorage,\r\n        address _admin,\r\n        uint _totalSupply\r\n    )\r\n        public\r\n        LnErc20Handler(_proxy, _tokenStorage, TOKEN_NAME, TOKEN_SYMBOL, _totalSupply, DECIMALS, _admin)\r\n    {\r\n    }\r\n    \r\n    //\r\n    function _mint(address account, uint256 amount) private  {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        tokenStorage.setBalanceOf(account, tokenStorage.balanceOf(account).add(amount));\r\n        totalSupply = totalSupply.add(amount);\r\n\r\n        emitTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) external onlyAdmin {\r\n        _mint(account, amount);\r\n    }\r\n\r\n   function _burn(address account, uint256 amount) private {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        tokenStorage.setBalanceOf(account, tokenStorage.balanceOf(account).sub(amount));\r\n        totalSupply = totalSupply.sub(amount);\r\n        emitTransfer(account, address(0), amount);\r\n    }\r\n\r\n    //function burn(address account, uint256 amount) external onlyAdmin {\r\n    //    _burn(account, amount);\r\n    //}\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused, \"ERC20Pausable: token transfer while paused\");\r\n    }\r\n\r\n    ////////////////////////////////////////////////////// paused\r\n    bool public paused = false;\r\n    modifier notPaused {\r\n        require(!paused, \"This action cannot be performed while the contract is paused\");\r\n        _;\r\n    }\r\n    function setPaused(bool _paused) external onlyAdmin {\r\n        if (_paused == paused) {\r\n            return;\r\n        }\r\n        paused = _paused;\r\n        emit PauseChanged(paused);\r\n    }\r\n\r\n    //////////////////////////////////////////////////////\r\n    event PauseChanged(bool isPaused);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"contract LnTokenStorage\",\"name\":\"_tokenStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"ProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTokenStorage\",\"type\":\"address\"}],\"name\":\"TokenStorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCandidate\",\"type\":\"address\"}],\"name\":\"candidateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"becomeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"integrationProxy\",\"outputs\":[{\"internalType\":\"contract LnProxyBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract LnProxyBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"setCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_integrationProxy\",\"type\":\"address\"}],\"name\":\"setIntegrationProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"setMessageSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LnTokenStorage\",\"name\":\"_tokenStorage\",\"type\":\"address\"}],\"name\":\"setTokenStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStorage\",\"outputs\":[{\"internalType\":\"contract LnTokenStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LinearFinance","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003e9bc21c9b189c09df3ef1b824798658d5011937000000000000000000000000f1a16d778fe004c495df8d3c46d2abe71ecf6cfe00000000000000000000000074e5d6c26dfbeb647dfe36f44fee805bafefbfc00000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe165fd8cf87fcce88f44e833c03ad0f0465c11e8b7620c25921b6fea9605b7b"}]}