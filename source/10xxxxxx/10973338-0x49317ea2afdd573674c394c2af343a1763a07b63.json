{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n * Stack HODL Vault\r\n \r\n * Smart contract to decentralize 10% of Stack total supply reserved to reward top 10 HODLers on weekly basis\r\n\r\n * Official Website:\r\n   https://DexStack.Finance\r\n \r\n * Telelgram Group:\r\n   https://t.me/DexStackFinance\r\n   \r\n */\r\n \r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\nlibrary SafeMath \r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract StackHodlVault {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    ERC20 constant StackToken = ERC20(0xdFbcaCF4D31DA9089dC6d1Ee32CE4CCF4Ef0ac50);\r\n    \r\n    address owner = msg.sender;\r\n    uint256 public lastHodlTokenDistribution = now;\r\n    \r\n    uint256 public migrationLock;\r\n    address public migrationRecipient;\r\n    \r\n    \r\n// Function allows a weekly hardcap of 10% HODL token distribution.\r\n\r\n    function distributeHodlToken() external {\r\n        uint256 StackBalance = StackToken.balanceOf(address(this));\r\n        require(msg.sender == owner);\r\n        require(lastHodlTokenDistribution < now);\r\n        uint256 TenPercent = StackBalance.mul(10).div(100);\r\n        StackToken.transfer(owner, TenPercent);\r\n        lastHodlTokenDistribution = lastHodlTokenDistribution + 7 days;\r\n    } \r\n    \r\n\r\n// Function allows HODL token to be migrated, after 1 month lockup -preventing abuse.\r\n\r\n\r\n    function startMigration(address recipient) external {\r\n        require(msg.sender == owner);\r\n        migrationLock = now + 720 hours;\r\n        migrationRecipient = recipient;\r\n    }\r\n    \r\n    \r\n// Migrates HODL token to new location, assuming the 1 month lockup has passed -preventing abuse.\r\n\r\n\r\n    function processMigration() external {\r\n        require(msg.sender == owner);\r\n        require(migrationRecipient != address(0));\r\n        require(now > migrationLock);\r\n        \r\n        uint256 StackBalance = StackToken.balanceOf(address(this));\r\n        StackToken.transfer(migrationRecipient, StackBalance);\r\n    }  \r\n    \r\n}\r\n\r\n\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"inputs\":[],\"name\":\"distributeHodlToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHodlTokenDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"startMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StackHodlVault","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://882bc47a4a14d1103bf56d608e8a0cd8a75cd936434428402484775bede18e0b"}]}