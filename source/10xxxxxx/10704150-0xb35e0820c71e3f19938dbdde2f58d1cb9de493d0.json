{"status":"1","message":"OK","result":[{"SourceCode":"// File: browser/IUnipumpContest.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\ninterface IUnipumpContest\r\n{\r\n}\r\n// File: browser/IUnipumpStaking.sol\r\n\r\n\r\n\r\ninterface IUnipumpDrain\r\n{\r\n    function drain(address token) external;\r\n}\r\n// File: browser/IUnipumpEscrow.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpEscrow is IUnipumpDrain\r\n{\r\n    function start() external;\r\n    function available() external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: browser/UnipumpDrain.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpStaking\r\n{\r\n    event Stake(address indexed _staker, uint256 _amount, uint256 _epochCount);\r\n    event Reward(address indexed _staker, uint256 _reward);\r\n    event RewardPotIncrease(uint256 _amount);\r\n\r\n    function stakingRewardPot() external view returns (uint256);\r\n    function currentEpoch() external view returns (uint256);\r\n    function nextEpochTimestamp() external view returns (uint256);\r\n    function isActivated() external view returns (bool);\r\n    function secondsUntilCanActivate() external view returns (uint256);\r\n    function totalStaked() external view returns (uint256);\r\n    \r\n    function increaseRewardsPot() external;\r\n    function activate() external;\r\n    function claimRewardsAt(uint256 index) external;\r\n    function claimRewards() external;\r\n    function updateEpoch() external returns (bool);\r\n    function stakeForProfit(uint256 epochCount) external;\r\n}\r\n// File: browser/IUnipumpTradingGroup.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpTradingGroup\r\n{\r\n    function leader() external view returns (address);\r\n    function close() external;\r\n    function closeWithNonzeroTokenBalances() external;\r\n    function anyNonzeroTokenBalances() external view returns (bool);\r\n    function tokenList() external view returns (IUnipumpTokenList);\r\n    function maxSecondsRemaining() external view returns (uint256);\r\n    function group() external view returns (IUnipumpGroup);\r\n    function externalBalanceChanges(address token) external view returns (bool);\r\n\r\n    function startTime() external view returns (uint256);\r\n    function endTime() external view returns (uint256);\r\n    function maxEndTime() external view returns (uint256);\r\n\r\n    function startingWethBalance() external view returns (uint256);\r\n    function finalWethBalance() external view returns (uint256);\r\n    function leaderWethProfitPayout() external view returns (uint256);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) \r\n        external \r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) \r\n        external \r\n        returns (uint256[] memory amounts);\r\n        \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) \r\n        external;\r\n\r\n    function withdraw(address token) external;\r\n}\r\n// File: browser/IUnipumpTokenList.sol\r\n\r\n\r\n\r\n\r\ninterface IUnipumpTokenList\r\n{\r\n    function parentList() external view returns (IUnipumpTokenList);\r\n    function isLocked() external view returns (bool);\r\n    function tokens(uint256 index) external view returns (address);\r\n    function exists(address token) external view returns (bool);\r\n    function tokenCount() external view returns (uint256);\r\n\r\n    function lock() external;\r\n    function add(address token) external;\r\n    function addMany(address[] calldata _tokens) external;\r\n    function remove(address token) external;    \r\n}\r\n// File: browser/IUnipumpGroup.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpGroup \r\n{\r\n    function contribute() external payable;\r\n    function abort() external;\r\n    function startPumping() external;\r\n    function isActive() external view returns (bool);\r\n    function withdraw() external;\r\n    function leader() external view returns (address);\r\n    function tokenList() external view returns (IUnipumpTokenList);\r\n    function leaderUppCollateral() external view returns (uint256);\r\n    function requiredMemberUppFee() external view returns (uint256);\r\n    function minEthToJoin() external view returns (uint256);\r\n    function minEthToStart() external view returns (uint256);\r\n    function maxEthAcceptable() external view returns (uint256);\r\n    function maxRunTimeSeconds() external view returns (uint256);\r\n    function leaderProfitShareOutOf10000() external view returns (uint256);\r\n    function memberCount() external view returns (uint256);\r\n    function members(uint256 at) external view returns (address);\r\n    function contributions(address member) external view returns (uint256);\r\n    function totalContributions() external view returns (uint256);\r\n    function aborted() external view returns (bool);\r\n    function tradingGroup() external view returns (IUnipumpTradingGroup);\r\n}\r\n// File: browser/IUnipumpGroupFactory.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpGroupFactory \r\n{\r\n    function createGroup(\r\n        address leader,\r\n        IUnipumpTokenList unipumpTokenList,\r\n        uint256 uppCollateral,\r\n        uint256 requiredMemberUppFee,\r\n        uint256 minEthToJoin,\r\n        uint256 minEthToStart,\r\n        uint256 startTimeout,\r\n        uint256 maxEthAcceptable,\r\n        uint256 maxRunTimeSeconds,\r\n        uint256 leaderProfitShareOutOf10000\r\n    ) \r\n        external\r\n        returns (IUnipumpGroup unipumpGroup);\r\n}\r\n// File: browser/IUnipumpGroupManager.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipumpGroupManager\r\n{\r\n    function groupLeaders(uint256 at) external view returns (address);\r\n    function groupLeaderCount() external view returns (uint256);\r\n    function groups(uint256 at) external view returns (IUnipumpGroup);\r\n    function groupCount() external view returns (uint256);\r\n    function groupCountByLeader(address leader) external view returns (uint256);\r\n    function groupsByLeader(address leader, uint256 at) external view returns (IUnipumpGroup);\r\n\r\n    function createGroup(\r\n        IUnipumpTokenList tokenList,\r\n        uint256 uppCollateral,\r\n        uint256 requiredMemberUppFee,\r\n        uint256 minEthToJoin,\r\n        uint256 minEthToStart,\r\n        uint256 startTimeout,\r\n        uint256 maxEthAcceptable,\r\n        uint256 maxRunTimeSeconds,\r\n        uint256 leaderProfitShareOutOf10000\r\n    ) \r\n        external\r\n        returns (IUnipumpGroup group);\r\n}\r\n// File: browser/IUnipump.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUnipump is IERC20 {\r\n    event Sale(bool indexed _saleActive);\r\n    event LiquidityCrisis();\r\n\r\n    function WETH() external view returns (address);\r\n    \r\n    function groupManager() external view returns (IUnipumpGroupManager);\r\n    function escrow() external view returns (IUnipumpEscrow);\r\n    function staking() external view returns (IUnipumpStaking);\r\n    function contest() external view returns (IUnipumpContest);\r\n\r\n    function init(\r\n        IUnipumpEscrow _escrow,\r\n        IUnipumpStaking _staking) external;\r\n    function startUnipumpSale(uint256 _tokensPerEth, uint256 _maxSoldEth) external;\r\n    function start(\r\n        IUnipumpGroupManager _groupManager,\r\n        IUnipumpContest _contest) external;\r\n\r\n    function isSaleActive() external view returns (bool);\r\n    function tokensPerEth() external view returns (uint256);\r\n    function maxSoldEth() external view returns (uint256);\r\n    function soldEth() external view returns (uint256);\r\n    \r\n    function buy() external payable;\r\n    \r\n    function minSecondsUntilLiquidityCrisis() external view returns (uint256);\r\n    function createLiquidityCrisis() external payable;\r\n}\r\n// File: browser/openzeppelin/IERC20.sol\r\n\r\n\r\n\r\n\r\n\r\nabstract contract UnipumpDrain is IUnipumpDrain\r\n{\r\n    address payable immutable drainTarget;\r\n\r\n    constructor()\r\n    {\r\n        drainTarget = msg.sender;\r\n    }\r\n\r\n    function drain(address token)\r\n        public\r\n        override\r\n    {\r\n        uint256 amount;\r\n        if (token == address(0))\r\n        {\r\n            require (address(this).balance > 0, \"Nothing to send\");\r\n            amount = _drainAmount(token, address(this).balance);\r\n            require (amount > 0, \"Nothing allowed to send\");\r\n            (bool success,) = drainTarget.call{ value: amount }(\"\");\r\n            require (success, \"Transfer failed\");\r\n            return;\r\n        }\r\n        amount = IERC20(token).balanceOf(address(this));\r\n        require (amount > 0, \"Nothing to send\");\r\n        amount = _drainAmount(token, amount);\r\n        require (amount > 0, \"Nothing allowed to send\");\r\n        require (IERC20(token).transfer(drainTarget, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function _drainAmount(address token, uint256 available) internal virtual returns (uint256 amount);\r\n}\r\n// File: browser/IUnipumpDrain.sol\r\n\r\n\r\n\r\n// File: browser/UnipumpEscrow.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract UnipumpEscrow is IUnipumpEscrow, UnipumpDrain\r\n{\r\n    IUnipump immutable unipump;\r\n\r\n    uint256 lastWithdrawalTime;\r\n    uint256 maxWithdrawalPerSecond;\r\n    \r\n    constructor(\r\n        IUnipump _unipump\r\n    ) \r\n    {\r\n        require (address(_unipump) != address(0));\r\n        unipump = _unipump;\r\n    }\r\n\r\n    receive()\r\n        external\r\n        payable\r\n    {\r\n    }\r\n\r\n    function start() \r\n        public \r\n        override\r\n    {\r\n        require (msg.sender == address(unipump));\r\n        lastWithdrawalTime = block.timestamp;\r\n        maxWithdrawalPerSecond = unipump.balanceOf(address(this)) / 8640000; // 1% per day\r\n    }\r\n\r\n    function available()\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {     \r\n        uint256 last = lastWithdrawalTime;\r\n        if (last == 0) { return 0; }        \r\n        uint256 amount = unipump.balanceOf(address(this));\r\n        uint256 avail = (block.timestamp - last) * maxWithdrawalPerSecond;\r\n        return amount > avail ? avail : amount;        \r\n    }\r\n\r\n    function _drainAmount(\r\n        address token, \r\n        uint256 _available\r\n    ) \r\n        internal \r\n        override\r\n        returns (uint256 amount)\r\n    {\r\n        amount = _available;\r\n        if (token == address(unipump)) {\r\n            uint256 last = lastWithdrawalTime;\r\n            require (last > 0);\r\n            amount = (block.timestamp - last) * maxWithdrawalPerSecond;\r\n            lastWithdrawalTime = block.timestamp;\r\n            if (amount > _available) { amount = _available; }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUnipump\",\"name\":\"_unipump\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UnipumpEscrow","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ce25b4271cc4d937a7d9bf75b2068a7892b9961d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://552239f6a174171f6790d112ebaa3c55faed9e18f6f3ddaf2143035aea789c73"}]}