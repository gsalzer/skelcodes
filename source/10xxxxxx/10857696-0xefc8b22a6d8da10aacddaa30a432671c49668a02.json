{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\ncontract erc20 {\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract MultiWallet {\r\n    struct ThresholdJob {\r\n        Role roleType;\r\n        uint newThreshold;\r\n        bool executed;\r\n    }\r\n\r\n    struct ManageJob {\r\n        Role roleType;\r\n        ManageAction action;\r\n        address member;\r\n        bool executed;\r\n    }\r\n\r\n    struct TransferJob {\r\n        address payable to;\r\n        uint value;\r\n        bool executed;\r\n    }\r\n    \r\n    struct TransferErc20Job {\r\n        address asset;\r\n        address to;\r\n        uint value;\r\n        bool executed;\r\n    }\r\n\r\n    enum ManageAction{\r\n        Add,\r\n        Remove\r\n    }\r\n\r\n    enum Role {\r\n        Admin,\r\n        Signer,\r\n        Specialist\r\n    }\r\n\r\n    enum Job {\r\n        ManageMember,\r\n        Transfer,\r\n        TransferErc20,\r\n        ChangeThreshold\r\n    }\r\n\r\n    event EthTransfer(address indexed to,uint256 indexed value,bytes32 indexed jobId, string proof);\r\n    event Erc20Transfer(address indexed asset, address indexed to,uint256 indexed value, bytes32 jobId, string proof);\r\n\r\n    event ChangeMember(Role role, ManageAction action, address member);\r\n    event ChangeThreshold(Role role, uint newThreshold);\r\n\r\n    event Deposit(address from, uint256 value);\r\n\r\n    event Pause(bool pauseStatus);\r\n\r\n    event JobLog(bytes32 jobId);\r\n\r\n    mapping(uint => mapping(address => bool)) members;\r\n    mapping(uint => address[]) memberList;\r\n\r\n    mapping(uint => uint) memberThresholds;\r\n    mapping(uint => mapping(bytes32 => mapping(address => bool))) confirmations;\r\n\r\n    mapping(bytes32 => ThresholdJob) thJobs;\r\n    mapping(bytes32 => ManageJob) mJobs;\r\n    mapping(bytes32 => TransferJob) txJobs;\r\n    mapping(bytes32 => TransferErc20Job) erc20Jobs;\r\n\r\n    bool public isPaused;\r\n\r\n    constructor(address[] memory admins, address[] memory speicalists, address[] memory txsigners ) public {\r\n        require(admins.length >= 2);\r\n        require(speicalists.length >= 1);\r\n        require(txsigners.length >= 2);\r\n\r\n        uint temp = uint(Role.Admin);\r\n        memberThresholds[temp] = 2;\r\n        for(uint i = 0; i < admins.length; i++){\r\n            members[temp][admins[i]] = true;\r\n        }\r\n        memberList[temp] = admins;\r\n\r\n        temp = uint(Role.Specialist);\r\n        memberThresholds[temp] = 1;\r\n        for(uint i = 0; i < speicalists.length; i++){\r\n            members[temp][speicalists[i]] = true;\r\n        }\r\n        memberList[temp] = speicalists;\r\n\r\n        temp = uint(Role.Signer);\r\n        memberThresholds[temp] = 2;\r\n        for(uint i = 0; i < txsigners.length; i++){\r\n            members[temp][txsigners[i]] = true;\r\n        }\r\n        memberList[temp] = txsigners;\r\n    }\r\n\r\n    modifier onlyMember(Role roleType) {\r\n        require(members[uint(roleType)][msg.sender], \"invalid role\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnpaused(){\r\n        require(!isPaused, \"wallet is paused now\");\r\n        _;\r\n    }\r\n\r\n    function getMembers(Role roleType)\r\n    public\r\n    view\r\n    returns (address[] memory result)\r\n    {\r\n        result = memberList[uint(roleType)];\r\n    }\r\n\r\n    function getThreshold(Role roleType)\r\n    public\r\n    view\r\n    returns (uint result)\r\n    {\r\n        result = memberThresholds[uint(roleType)];\r\n    }\r\n\r\n    function addConfirmation(Job job, bytes32 jobId,  address addr)\r\n        internal\r\n    {\r\n        confirmations[uint(job)][jobId][addr] = true;\r\n    }\r\n\r\n    function checkConfirmation(Role roleType, Job job, bytes32 jobId)\r\n        public\r\n        view\r\n        returns (bool passed)\r\n    {\r\n        uint accumlate = 0;\r\n        address[] memory mList = memberList[uint(roleType)];\r\n        uint threshold = memberThresholds[uint(roleType)];\r\n        for(uint i = 0; i < mList.length; i++) {\r\n            if(confirmations[uint(job)][jobId][mList[i]]){\r\n                accumlate += 1;\r\n \r\n                if(accumlate >= threshold) {\r\n                    passed = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    function()\r\n        external\r\n        payable\r\n    {\r\n        if (msg.value > 0) {\r\n            emit Deposit(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    function ethTransfer(address payable to,uint256 value, bytes32 jobId, string memory proof)\r\n        public\r\n        onlyMember(Role.Signer)\r\n        onlyUnpaused\r\n    {\r\n        TransferJob memory oldJob = txJobs[jobId];\r\n        if(oldJob.to == address(0) && oldJob.value == 0) {\r\n            txJobs[jobId] = TransferJob ({\r\n                to: to,\r\n                value: value,\r\n                executed: false\r\n            });\r\n        }else {\r\n            require(keccak256(abi.encodePacked(\r\n                            to,\r\n                            value))==\r\n                    keccak256(abi.encodePacked(\r\n                            oldJob.to,\r\n                            oldJob.value)), \"not consistence\");\r\n\r\n            require(!oldJob.executed, \"executed already\");\r\n        }\r\n\r\n        addConfirmation(Job.Transfer, jobId, msg.sender);\r\n\r\n        emit EthTransfer(to, value, jobId, proof);\r\n\r\n        if (checkConfirmation(Role.Signer, Job.Transfer, jobId)){\r\n            txJobs[jobId].executed = true;\r\n\r\n            to.transfer(value);\r\n            emit JobLog(jobId);\r\n        }\r\n    }\r\n\r\n    function erc20Transfer(address asset,address to,uint256 value, bytes32 jobId, string memory proof)\r\n        public\r\n        onlyMember(Role.Signer)\r\n        onlyUnpaused\r\n    {\r\n        TransferErc20Job memory oldJob = erc20Jobs[jobId];\r\n        if (oldJob.asset == address(0)) {\r\n            erc20Jobs[jobId] = TransferErc20Job ({\r\n                asset: asset,\r\n                to: to,\r\n                value: value,\r\n                executed: false\r\n            });\r\n        } else {\r\n            require(keccak256(abi.encodePacked(\r\n                                asset,\r\n                                to,\r\n                                value))==\r\n                    keccak256(abi.encodePacked(\r\n                                oldJob.asset,\r\n                                oldJob.to,\r\n                                oldJob.value)), \"not consistence\");\r\n            require(!oldJob.executed, \"executed already\");\r\n        }\r\n\r\n        addConfirmation(Job.TransferErc20, jobId, msg.sender);\r\n\r\n        emit Erc20Transfer(asset, to, value, jobId, proof);\r\n\r\n        if (checkConfirmation(Role.Signer, Job.TransferErc20, jobId)){\r\n            erc20Jobs[jobId].executed = true;\r\n\r\n            erc20 erc20Asset = erc20(asset);\r\n            erc20Asset.transfer(to, value);\r\n            emit JobLog(jobId);\r\n        }\r\n    }\r\n\r\n    function changeMember(Role roleType, ManageAction action, address member, bytes32 jobId)\r\n        public\r\n        onlyMember(Role.Admin)\r\n    {\r\n        if (action == ManageAction.Add) {\r\n            require(!members[uint(roleType)][member], \"member already exists\");\r\n        }else if (action == ManageAction.Remove) {\r\n            require(members[uint(roleType)][member], \"member not exists\");\r\n            require(memberList[uint(roleType)].length > memberThresholds[uint(roleType)], \"member count will below threshold\");\r\n        }else {\r\n            require(false, \"unexpected action\");\r\n        }\r\n\r\n        ManageJob memory oldJob = mJobs[jobId];\r\n        if (oldJob.member == address(0)) {\r\n            mJobs[jobId] = ManageJob ({\r\n                roleType: roleType,\r\n                action: action,\r\n                member: member,\r\n                executed: false\r\n            });\r\n        } else {\r\n            require(keccak256(abi.encodePacked(\r\n                                roleType,\r\n                                action,\r\n                                member))==\r\n                    keccak256(abi.encodePacked(\r\n                                oldJob.roleType,\r\n                                oldJob.action,\r\n                                oldJob.member)), \"not consistence\");\r\n            require(!oldJob.executed, \"executed already\");\r\n        }\r\n\r\n        addConfirmation(Job.ManageMember, jobId, msg.sender);\r\n\r\n        emit ChangeMember(roleType, action, member);\r\n\r\n        if (checkConfirmation(Role.Admin, Job.ManageMember, jobId)){\r\n            mJobs[jobId].executed = true;\r\n\r\n            if (action == ManageAction.Add) {\r\n                members[uint(roleType)][member] = true;\r\n                memberList[uint(roleType)].push(member);\r\n            } else if (action == ManageAction.Remove) {\r\n                delete members[uint(roleType)][member];\r\n\r\n                uint len = memberList[uint(roleType)].length;\r\n                for(uint i = 0; i < len; i++ ) {\r\n                    if(memberList[uint(roleType)][i] == member) {\r\n                        memberList[uint(roleType)][i] = memberList[uint(roleType)][len - 1];\r\n                        memberList[uint(roleType)].length -= 1;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                require(false, \"unexpected action\");\r\n            }\r\n\r\n            emit JobLog(jobId);\r\n        }\r\n    }\r\n\r\n    function changeThreshold(Role roleType, uint threshold, bytes32 jobId)\r\n        public\r\n        onlyMember(Role.Admin)\r\n    {\r\n        require(threshold <= memberList[uint(roleType)].length, \"threshold too low\");\r\n\r\n        ThresholdJob memory  oldJob = thJobs[jobId];\r\n        if (oldJob.newThreshold == 0) {\r\n            thJobs[jobId] = ThresholdJob({\r\n                roleType: roleType,\r\n                newThreshold: threshold,\r\n                executed: false\r\n            });\r\n        } else {\r\n            require(threshold == oldJob.newThreshold && roleType == oldJob.roleType, \"not consistence\");\r\n            require(!oldJob.executed, \"executed already\");\r\n        }\r\n\r\n        addConfirmation(Job.ChangeThreshold, jobId, msg.sender);\r\n        emit ChangeThreshold(roleType, threshold);\r\n\r\n        if (checkConfirmation(Role.Admin, Job.ChangeThreshold, jobId)){\r\n            thJobs[jobId].executed = true;\r\n            memberThresholds[uint(roleType)] = threshold;\r\n\r\n            emit JobLog(jobId);\r\n        }\r\n    }\r\n\r\n    function pause(bool bPause)\r\n        public\r\n        onlyMember(Role.Specialist)\r\n    {\r\n        isPaused = bPause;\r\n        emit Pause(bPause);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bPause\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum MultiWallet.Role\",\"name\":\"roleType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum MultiWallet.Role\",\"name\":\"roleType\",\"type\":\"uint8\"},{\"internalType\":\"enum MultiWallet.Job\",\"name\":\"job\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"}],\"name\":\"checkConfirmation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"passed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum MultiWallet.Role\",\"name\":\"roleType\",\"type\":\"uint8\"}],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"result\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"ethTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum MultiWallet.Role\",\"name\":\"roleType\",\"type\":\"uint8\"}],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"erc20Transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum MultiWallet.Role\",\"name\":\"roleType\",\"type\":\"uint8\"},{\"internalType\":\"enum MultiWallet.ManageAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"}],\"name\":\"changeMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"speicalists\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"txsigners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"EthTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"Erc20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum MultiWallet.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum MultiWallet.ManageAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"ChangeMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum MultiWallet.Role\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ChangeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseStatus\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"jobId\",\"type\":\"bytes32\"}],\"name\":\"JobLog\",\"type\":\"event\"}]","ContractName":"MultiWallet","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e597f83558c3b4b9cd9df9bd4ef6901adf13e63e0000000000000000000000003504565d19a557de2f3b4552e344a3bfaa6010f2000000000000000000000000410bb2c24c370e4703f835bd27890f4c3225e8730000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e597f83558c3b4b9cd9df9bd4ef6901adf13e63e0000000000000000000000003504565d19a557de2f3b4552e344a3bfaa6010f2000000000000000000000000410bb2c24c370e4703f835bd27890f4c3225e87300000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ae9e141c4f426221c0bbc793b328a13cc47b8de000000000000000000000000df8bf705f423cb94d86047ce27625c05f262877d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://afb4ed645ca1affbf04f6ca23f2093a686fb921b7e57338e1dec4e833efbcf5f"}]}