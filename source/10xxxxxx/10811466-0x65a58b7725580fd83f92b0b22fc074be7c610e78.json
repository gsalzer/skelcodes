{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: src/IyDeposit.sol\r\n\r\n\r\n// pragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface IyDeposit {\r\n  function add_liquidity ( uint256[4] calldata uamounts, uint256 min_mint_amount ) external;\r\n  // Not using functions below, just uncomment what you wants to use\r\n//   function remove_liquidity ( uint256 _amount, uint256[4] calldata min_uamounts ) external;\r\n//   function remove_liquidity_imbalance ( uint256[4] calldata uamounts, uint256 max_burn_amount ) external;\r\n//   function calc_withdraw_one_coin ( uint256 _token_amount, int128 i ) external returns ( uint256 );\r\n//   function remove_liquidity_one_coin ( uint256 _token_amount, int128 i, uint256 min_uamount ) external;\r\n//   function remove_liquidity_one_coin ( uint256 _token_amount, int128 i, uint256 min_uamount, bool donate_dust ) external;\r\n//   function withdraw_donated_dust (  ) external;\r\n//   function coins ( int128 arg0 ) external returns ( address );\r\n//   function underlying_coins ( int128 arg0 ) external returns ( address );\r\n//   function curve() external returns ( address );\r\n//   function token() external returns ( address );\r\n}\r\n\r\n\r\n// Dependency file: src/IUSDT.sol\r\n\r\n\r\n// pragma solidity >=0.4.21 <0.7.0;\r\n\r\n// Because USDT is not so standard ERC20, we just use their code as interface\r\ninterface IUSDT {\r\n    function transfer(address _to, uint _value) external;\r\n    function transferFrom(address _from, address _to, uint _value) external;\r\n    function balanceOf(address who) external view returns (uint);\r\n    function approve(address _spender, uint _value) external;\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n}\r\n\r\n// Dependency file: src/IyyCrv.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IyyCrv {\r\n\r\n    function stake(uint256 _amount) external;\r\n    function unstake(uint256 _shares) external;\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Root file: src/UnitedMint.sol\r\n\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n// only use ABIEncoderV2 to return rich data, no worry\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"src/IyDeposit.sol\";\r\n// import \"src/IUSDT.sol\";\r\n// import \"src/IyyCrv.sol\";\r\n\r\n/**\r\n * UniMint - Crowdfunding USDT to print yyCrv.\r\n */\r\n\r\ncontract UnitedMint {\r\n    using SafeMath for uint256;\r\n\r\n    address constant public USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    address constant public yCrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\r\n    address constant public yyCrv = address(0x199ddb4BDF09f699d2Cf9CA10212Bd5E3B570aC2);\r\n    address constant public yDeposit = address(0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3);\r\n\r\n    mapping(address => uint256) _balance; // unminted USDT\r\n\r\n    function setBalance(address who, uint256 amount) internal {\r\n        _balance[who] = amount;\r\n    }\r\n\r\n    function balanceOf(address who) public view returns (uint256) {\r\n        return _balance[who];\r\n    }\r\n\r\n    uint256 public mintedUSDT; // USDT involved in minting yCRV\r\n\r\n    constructor() public {\r\n        IUSDT(USDT).approve(yDeposit, uint256(-1));\r\n        IERC20(yCrv).approve(yyCrv, uint256(-1));\r\n    }\r\n\r\n    function unminted_USDT() public view returns (uint256) {\r\n        return IERC20(USDT).balanceOf(address(this));\r\n    }\r\n\r\n    function minted_yCRV() public view returns (uint256) {\r\n        return IERC20(yCrv).balanceOf(address(this));\r\n    }\r\n\r\n    function minted_yyCRV() public view returns (uint256) {\r\n        return IERC20(yyCrv).balanceOf(address(this));\r\n    }\r\n\r\n    function get_yyCrvFromUsdt(uint256 amount) public view returns (uint256) {\r\n        return amount.mul(minted_yyCRV()).div(mintedUSDT);\r\n    }\r\n\r\n    function get_usdtFromYycrv(uint256 amount) public view returns (uint256) {\r\n        return amount.mul(mintedUSDT).div(minted_yyCRV());\r\n    }\r\n\r\n    event Deposit(address indexed who, uint usdt);\r\n    event Claim(address indexed who, uint usdt, uint yyCrv);\r\n    event Restore(address indexed who, uint yyCrv, uint usdt);\r\n\r\n    /**\r\n     * @dev Deposit usdt or claim yyCrv directly if balance of yyCrv is sufficient\r\n     */\r\n    function deposit(uint256 input) external {\r\n        require(input != 0, \"Empty usdt\");\r\n        IUSDT(USDT).transferFrom(msg.sender, address(this), input);\r\n        if (input > mintedUSDT) {\r\n            setBalance(msg.sender, balanceOf(msg.sender).add(input));\r\n            emit Deposit(msg.sender, input);\r\n        } else {\r\n            uint256 output = get_yyCrvFromUsdt(input);\r\n            mintedUSDT = mintedUSDT.sub(input);\r\n            IERC20(yyCrv).transfer(msg.sender, output);\r\n            emit Claim(msg.sender, input, output);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mint all unminted_USDT into yyCrv\r\n     */\r\n    function mint() public {\r\n        require(unminted_USDT() > 0, \"Empty usdt\");\r\n        mintedUSDT = mintedUSDT.add(unminted_USDT());\r\n        IyDeposit(yDeposit).add_liquidity([0, 0, unminted_USDT(), 0], 0);\r\n        IyyCrv(yyCrv).stake(minted_yCRV());\r\n    }\r\n\r\n    /**\r\n     * @dev Claim yyCrv back, if the balance is sufficient, execute mint()\r\n     */\r\n    function claim() public {\r\n        uint256 input = balanceOf(msg.sender);\r\n        require(input != 0, \"You don't have USDT balance to withdraw\");\r\n        uint256 r; // requirement yCrv\r\n        if (mintedUSDT == 0) {\r\n            mint();\r\n            r = get_yyCrvFromUsdt(input);\r\n        } else {\r\n            r = get_yyCrvFromUsdt(input);\r\n            if (r > minted_yyCRV()) mint();\r\n            r = get_yyCrvFromUsdt(input);\r\n        }\r\n        mintedUSDT = mintedUSDT.sub(input);        \r\n        IERC20(yyCrv).transfer(msg.sender, r);\r\n        setBalance(msg.sender, 0);\r\n        emit Claim(msg.sender, input, r);\r\n    }\r\n\r\n    /**\r\n     * @dev Try to claim unminted usdt by yyCrv if the balance is sufficient\r\n     */\r\n    function restore(uint input) external {\r\n        require(input != 0, \"Empty yyCrv\");\r\n        require(minted_yyCRV() != 0, \"No yyCrv price at this moment\");\r\n        uint output = get_yyCrvFromUsdt(unminted_USDT());\r\n        if (output < input) input = output;\r\n        output = get_usdtFromYycrv(input);\r\n        mintedUSDT = mintedUSDT.add(output);\r\n        IERC20(yyCrv).transferFrom(msg.sender, address(this), input);\r\n        IUSDT(USDT).transfer(msg.sender, output);\r\n        emit Restore(msg.sender, input, output);\r\n    }    \r\n\r\n    /**\r\n     * @dev Deposit usdt and claim yyCrv in any case\r\n     */\r\n    function depositAndClaim(uint256 input) external {\r\n        require(input != 0, \"Empty usdt\");\r\n        IUSDT(USDT).transferFrom(msg.sender, address(this), input);\r\n        if (input > mintedUSDT) {\r\n            mint();\r\n        }\r\n        uint256 output = get_yyCrvFromUsdt(input);\r\n        mintedUSDT = mintedUSDT.sub(input);\r\n        IERC20(yyCrv).transfer(msg.sender, output);\r\n        emit Claim(msg.sender, input, output);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yyCrv\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yyCrv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"}],\"name\":\"Restore\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"depositAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"get_usdtFromYycrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"get_yyCrvFromUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted_yCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted_yyCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"restore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unminted_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yyCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UnitedMint","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://344a311043872b8320891354ea926adc4d3ce44a749a1f1a69da69a2fad074b3"}]}