{"status":"1","message":"OK","result":[{"SourceCode":"// Henry Harder (2020) -- use at your peril\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract GST {\r\n\tfunction freeFromUpTo(address from, uint256 value) public returns (uint256 freed);\r\n}\r\n\r\ncontract Token {\r\n    function transfer(address _to, uint256 _value) public returns (bool ok);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool ok);\r\n    function balanceOf(address _wad) public returns (uint256 balance);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract GasWallet {\r\n    \r\n    event Spawned(address me);      // Emitted on construction\r\n    event UserChanged(address who); // User is changed to new address\r\n    \r\n    // Maximum ERC-20 allowance\r\n    uint256 public constant MAX_ALLOWANCE = (2 ** 256) - 1;\r\n    \r\n    // In emergencies, can be disabled and only the excape functions will work\r\n    bool public enabled = true;\r\n    \r\n    // Admin doesn't change\r\n    // Escaped funds go to admin\r\n    address payable constant admin = 0xBb4068bac37ef5975210fA0cf03C0984f2D1542c;\r\n    \r\n    // User can call authorized methods and can be changed by the user or the admin\r\n    address payable user = 0xA916B82Ff122591cC88AaC0D64cE30A8e3e16081;\r\n    \r\n    // Gas token (CHI) doesn't change\r\n    GST constant chi = GST(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n    \r\n    // Wallet to burn gas tokens from (defaults to self)\r\n    address public gasHolder;\r\n    \r\n    // Burn CHI gas tokens, if possible\r\n    modifier discount {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n        chi.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\r\n    }\r\n    \r\n    // Allow the user or the admin to call the function\r\n    modifier auth {\r\n        require(msg.sender == admin || msg.sender == user, \"auth\");\r\n        _;\r\n    }\r\n    \r\n    // Require the contract is enabled\r\n    modifier notDisabled {\r\n        require(enabled, \"notDisabled\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        gasHolder = address(this);\r\n        \r\n        emit Spawned(address(this));\r\n        emit UserChanged(user);\r\n    }\r\n    \r\n    // Burn gas tokens from the contract or abitrary wallet (allowance must be set)\r\n    function setGasHolder(address holder) public auth discount notDisabled {\r\n        gasHolder = holder;\r\n    }\r\n    \r\n    // Set an ERC-20 approval for who to spend amt of tkn.\r\n    // If amt is 0, an \"unlimited\" approval will be set.\r\n    // To remove an allowance, use revokeTokenApproval\r\n    function setTokenApproval(address tkn, address who, uint256 amt) public auth discount notDisabled {\r\n        if (amt == 0) {\r\n            amt = MAX_ALLOWANCE;\r\n        }\r\n        Token token = Token(tkn);\r\n        token.approve(who, amt);\r\n    }\r\n    \r\n    // Remove allowance for who to spend tkn from this\r\n    function revokeTokenApproval(address tkn, address who) public auth discount notDisabled {\r\n        Token token = Token(tkn);\r\n        token.approve(who, 0);\r\n    }\r\n    \r\n    // Change the user to a new address\r\n    function setUser(address payable who) public auth discount notDisabled {\r\n        emit UserChanged(who);\r\n        user = who;\r\n    }\r\n\r\n    // Send the full contracts balance of any ERC-20 token back to the admin    \r\n    function escapeToken(address tkn) public auth discount {\r\n        Token token = Token(tkn);\r\n        token.transfer(admin, token.balanceOf(address(this)));\r\n    }\r\n    \r\n    // Send the admin all ETH in the contract\r\n    function escapeEther() public auth discount {\r\n        admin.transfer(address(this).balance);\r\n    }\r\n    \r\n    // Disable further proxy transactions (cannot be re-enabled)\r\n    // Funds can still be escaped once disabled\r\n    function disable() public auth notDisabled {\r\n        enabled = false;\r\n    }\r\n    \r\n    // Deploy a contract (discount costs with CHI)\r\n    function deploy(bytes memory dta) public auth discount returns(address ctc) {\r\n        assembly {\r\n            ctc := create(0, add(dta, 32), mload(dta))\r\n        }\r\n    }\r\n    \r\n    // Execute a transaction from the gas wallet\r\n    // tgt: the target address to call\r\n    // val: the wei value to include with the transaction\r\n    // dat: calldata to include with the transaction\r\n    function execute(\r\n        address tgt,\r\n        uint256 val,\r\n        bytes memory dat\r\n    ) payable public auth discount notDisabled returns (bytes memory){\r\n         (bool ok, bytes memory ret) = tgt.call.value(val)(dat);\r\n        require(ok, \"tx_revert\");\r\n        return ret;\r\n    }\r\n    \r\n    // Allow the contract to receive ETH from anyone\r\n    function() payable external {}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"}],\"name\":\"Spawned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"UserChanged\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ALLOWANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dta\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ctc\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"escapeEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"}],\"name\":\"escapeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tgt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dat\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"revokeTokenApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"setGasHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setTokenApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GasWallet","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8937927335f8a58a50be7226c68a0952349adee7e57ba1e352a9435e1bb57674"}]}