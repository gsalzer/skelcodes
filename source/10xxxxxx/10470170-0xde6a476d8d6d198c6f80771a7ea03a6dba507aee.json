{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/loopring/impl/BrokerData.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\nlibrary BrokerData {\r\n\r\n  struct BrokerOrder {\r\n    address owner;\r\n    bytes32 orderHash;\r\n    uint fillAmountB;\r\n    uint requestedAmountS;\r\n    uint requestedFeeAmount;\r\n    address tokenRecipient;\r\n    bytes extraData;\r\n  }\r\n\r\n  /**\r\n   * The request wraps all broker orders that share the following overall fields. The perspective on these fields is\r\n   * the orders that are passed in. Meaning, `tokenB` is the token being RECEIVED by each owner and `tokenS` is the\r\n   * token being SPENT by each owner. Lastly, `totalRequestedFeeAmount` is the total `feeAmountS` for all brokered\r\n   * orders. If the fees are in `tokenB`, then this amount is always 0.\r\n   */\r\n  struct BrokerApprovalRequest {\r\n    BrokerOrder[] orders;\r\n    // The token output token for the broker at the end of #brokerRequestAllowance.\r\n    address tokenS;\r\n    // The token received by the broker at the start of #brokerRequestAllowance. This token must be internally traded\r\n    // for tokenS.\r\n    address tokenB;\r\n    address feeToken;\r\n    // The amount of tokens that the broker has at the start of the call to #brokerRequestAllowance. This amount needs\r\n    // to be traded within the brokering contract for #totalRequestedAmountS\r\n    uint totalFillAmountB;\r\n    // The amount of tokens that needs be outputted by #brokerRequestAllowance (and therefore traded for INTERNALLY\r\n    // within the contract)\r\n    uint totalRequestedAmountS;\r\n    uint totalRequestedFeeAmount;\r\n  }\r\n\r\n  struct BrokerInterceptorReport {\r\n    address owner;\r\n    address broker;\r\n    bytes32 orderHash;\r\n    address tokenB;\r\n    address tokenS;\r\n    address feeToken;\r\n    uint fillAmountB;\r\n    uint spentAmountS;\r\n    uint spentFeeAmount;\r\n    address tokenRecipient;\r\n    bytes extraData;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/loopring/iface/IBrokerDelegate.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IBrokerDelegate {\r\n\r\n  /*\r\n   * Loopring requests an allowance be set on a given token for a specified amount. Order details\r\n   * are provided (tokenS, totalAmountS, tokenB, totalAmountB, orderTokenRecipient, extraOrderData)\r\n   * to aid in any calculations or on-chain exchange of assets that may be required. The last 4\r\n   * parameters concern the actual token approval being requested of the broker.\r\n   *\r\n   * @returns Whether or not onOrderFillReport should be called for orders using this broker\r\n   */\r\n  function brokerRequestAllowance(BrokerData.BrokerApprovalRequest calldata request) external returns (bool);\r\n\r\n  /*\r\n   * After Loopring performs all of the transfers necessary to complete all the submitted\r\n   * rings it will call this function for every order's brokerInterceptor (if set) passing\r\n   * along the final fill counts for tokenB, tokenS and feeToken. This allows actions to be\r\n   * performed on a per-order basis after all tokenS/feeToken funds have left the order owner's\r\n   * possession and the tokenB funds have been transferred to the order owner's intended recipient\r\n   */\r\n  function onOrderFillReport(BrokerData.BrokerInterceptorReport calldata fillReport) external;\r\n\r\n  /*\r\n   * Get the available token balance controlled by the broker on behalf of an address (owner)\r\n   */\r\n  function brokerBalanceOf(address owner, address token) external view returns (uint);\r\n}\r\n\r\n// File: contracts/dolomite-direct/interfaces/IDepositContract.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\ninterface IDepositContract {\r\n\r\n    function perform(\r\n        address addr,\r\n        string calldata signature,\r\n        bytes calldata encodedParams,\r\n        uint value\r\n    ) external returns (bytes memory);\r\n\r\n}\r\n\r\n// File: contracts/dolomite-direct/lib/Types.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\nlibrary Types {\r\n\r\n    struct RequestFee {\r\n        address feeRecipient;\r\n        address feeToken;\r\n        uint feeAmount;\r\n    }\r\n\r\n    struct RequestSignature {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n    }\r\n\r\n    enum RequestType {Update, Transfer, Approve, Perform}\r\n\r\n    struct Request {\r\n        address owner;\r\n        address target;\r\n        RequestType requestType;\r\n        bytes payload;\r\n        uint nonce;\r\n        RequestFee fee;\r\n        RequestSignature signature;\r\n    }\r\n\r\n    struct TransferRequest {\r\n        address token;\r\n        address recipient;\r\n        uint amount;\r\n        bool unwrap;\r\n    }\r\n\r\n    struct UpdateRequest {\r\n        address version;\r\n        bytes additionalData;\r\n    }\r\n\r\n    struct ApproveRequest {\r\n        address operator;\r\n        bool canOperate;\r\n    }\r\n\r\n    struct PerformRequest {\r\n        address to;\r\n        string functionSignature;\r\n        bytes encodedParams;\r\n        uint value;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/dolomite-direct/lib/RequestImpl.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\nlibrary RequestImpl {\r\n\r\n    bytes constant personalPrefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n    function getSigner(Types.Request memory self) internal pure returns (address) {\r\n        bytes32 messageHash = keccak256(abi.encode(\r\n                self.owner,\r\n                self.target,\r\n                self.requestType,\r\n                self.payload,\r\n                self.nonce,\r\n                abi.encode(self.fee.feeRecipient, self.fee.feeToken, self.fee.feeAmount)\r\n            ));\r\n\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(personalPrefix, messageHash));\r\n        return ecrecover(prefixedHash, self.signature.v, self.signature.r, self.signature.s);\r\n    }\r\n\r\n    function decodeTransferRequest(Types.Request memory self)\r\n    internal\r\n    pure\r\n    returns (Types.TransferRequest memory){\r\n        require(self.requestType == Types.RequestType.Transfer, \"INVALID_REQUEST_TYPE\");\r\n\r\n        (\r\n        address token,\r\n        address recipient,\r\n        uint amount,\r\n        bool unwrap\r\n        ) = abi.decode(self.payload, (address, address, uint, bool));\r\n\r\n        return Types.TransferRequest({\r\n            token : token,\r\n            recipient : recipient,\r\n            amount : amount,\r\n            unwrap : unwrap\r\n            });\r\n    }\r\n\r\n    function decodeUpdateRequest(Types.Request memory self)\r\n    internal\r\n    pure\r\n    returns (Types.UpdateRequest memory updateRequest)\r\n    {\r\n        require(self.requestType == Types.RequestType.Update, \"INVALID_REQUEST_TYPE\");\r\n\r\n        (\r\n        updateRequest.version,\r\n        updateRequest.additionalData\r\n        ) = abi.decode(self.payload, (address, bytes));\r\n    }\r\n\r\n    function decodeApproveRequest(Types.Request memory self)\r\n    internal\r\n    pure\r\n    returns (Types.ApproveRequest memory approveRequest)\r\n    {\r\n        require(self.requestType == Types.RequestType.Approve, \"INVALID_REQUEST_TYPE\");\r\n\r\n        (\r\n        approveRequest.operator,\r\n        approveRequest.canOperate\r\n        ) = abi.decode(self.payload, (address, bool));\r\n    }\r\n\r\n    function decodePerformRequest(Types.Request memory self)\r\n    internal\r\n    pure\r\n    returns (Types.PerformRequest memory performRequest)\r\n    {\r\n        require(self.requestType == Types.RequestType.Perform, \"INVALID_REQUEST_TYPE\");\r\n\r\n        (\r\n        performRequest.to,\r\n        performRequest.functionSignature,\r\n        performRequest.encodedParams,\r\n        performRequest.value\r\n    ) = abi.decode(self.payload, (address, string, bytes, uint));\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/dolomite-direct/interfaces/IVersionable.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\ninterface IVersionable {\r\n\r\n  /*\r\n   * Is called by IDepositContractRegistry when this version\r\n   * is being upgraded to. Will call `versionEndUsage` on the\r\n   * old contract before calling this one\r\n   */\r\n  function versionBeginUsage(\r\n    address owner,\r\n    address payable depositAddress,\r\n    address oldVersion,\r\n    bytes calldata additionalData\r\n  ) external;\r\n\r\n  /*\r\n   * Is called by IDepositContractRegistry when this version is\r\n   * being upgraded from. IDepositContractRegistry will then call\r\n   * `versionBeginUsage` on the new contract\r\n   */\r\n  function versionEndUsage(\r\n    address owner,\r\n    address payable depositAddress,\r\n    address newVersion,\r\n    bytes calldata additionalData\r\n  ) external;\r\n\r\n}\r\n\r\n// File: contracts/dolomite-direct/interfaces/IDolomiteMarginTradingBroker.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\ninterface IDolomiteMarginTradingBroker {\r\n    function brokerMarginRequestApproval(address owner, address token, uint amount) external;\r\n\r\n    function brokerMarginGetTrader(address owner, bytes calldata orderData) external view returns (address);\r\n}\r\n\r\n// File: contracts/dolomite-direct/interfaces/IDepositContractRegistry.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\ninterface IDepositContractRegistry {\r\n\r\n    function depositAddressOf(address owner) external view returns (address payable);\r\n\r\n    function operatorOf(address owner, address operator) external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/dolomite-direct/lib/DepositContractImpl.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\nlibrary DepositContractImpl {\r\n\r\n    function wrapAndTransferToken(\r\n        IDepositContract self,\r\n        address token,\r\n        address recipient,\r\n        uint amount,\r\n        address wethAddress\r\n    ) internal {\r\n        if (token == wethAddress) {\r\n            uint etherBalance = address(self).balance;\r\n            if (etherBalance > 0) {\r\n                wrapEth(self, token, etherBalance);\r\n            }\r\n        }\r\n        transferToken(self, token, recipient, amount);\r\n    }\r\n\r\n    function transferToken(IDepositContract self, address token, address recipient, uint amount) internal {\r\n        self.perform(token, \"transfer(address,uint256)\", abi.encode(recipient, amount), 0);\r\n    }\r\n\r\n    function transferEth(IDepositContract self, address recipient, uint amount) internal {\r\n        self.perform(recipient, \"\", abi.encode(), amount);\r\n    }\r\n\r\n    function approveToken(IDepositContract self, address token, address broker, uint amount) internal {\r\n        self.perform(token, \"approve(address,uint256)\", abi.encode(broker, amount), 0);\r\n    }\r\n\r\n    function wrapEth(IDepositContract self, address wethToken, uint amount) internal {\r\n        self.perform(wethToken, \"deposit()\", abi.encode(), amount);\r\n    }\r\n\r\n    function unwrapWeth(IDepositContract self, address wethToken, uint amount) internal {\r\n        self.perform(wethToken, \"withdraw(uint256)\", abi.encode(amount), 0);\r\n    }\r\n\r\n    function setDydxOperator(IDepositContract self, address dydxContract, address operator) internal {\r\n        bytes memory encodedParams = abi.encode(\r\n            bytes32(0x0000000000000000000000000000000000000000000000000000000000000020),\r\n            bytes32(0x0000000000000000000000000000000000000000000000000000000000000001),\r\n            operator,\r\n            bytes32(0x0000000000000000000000000000000000000000000000000000000000000001)\r\n        );\r\n        self.perform(dydxContract, \"setOperators((address,bool)[])\", encodedParams, 0);\r\n    }\r\n}\r\n\r\n// File: contracts/dolomite-direct/Requestable.sol\r\n\r\ncontract Requestable {\r\n\r\n    using RequestImpl for Types.Request;\r\n\r\n    mapping(address => uint) nonces;\r\n\r\n    function validateRequest(Types.Request memory request) internal {\r\n        require(request.target == address(this), \"INVALID_TARGET\");\r\n        require(request.getSigner() == request.owner, \"INVALID_SIGNATURE\");\r\n        require(nonces[request.owner] + 1 == request.nonce, \"INVALID_NONCE\");\r\n\r\n        if (request.fee.feeAmount > 0) {\r\n            require(balanceOf(request.owner, request.fee.feeToken) >= request.fee.feeAmount, \"INSUFFICIENT_FEE_BALANCE\");\r\n        }\r\n\r\n        nonces[request.owner] += 1;\r\n    }\r\n\r\n    function completeRequest(Types.Request memory request) internal {\r\n        if (request.fee.feeAmount > 0) {\r\n            _payRequestFee(request.owner, request.fee.feeToken, request.fee.feeRecipient, request.fee.feeAmount);\r\n        }\r\n    }\r\n\r\n    function nonceOf(address owner) public view returns (uint) {\r\n        return nonces[owner];\r\n    }\r\n\r\n    // Abtract functions\r\n    function balanceOf(address owner, address token) public view returns (uint);\r\n    function _payRequestFee(address owner, address feeToken, address feeRecipient, uint feeAmount) internal;\r\n}\r\n\r\n// File: contracts/dolomite-direct/DolomiteDirectV1.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DolomiteDirectV1\r\n * @author Zack Rubenstein from Dolomite\r\n *\r\n * Interfaces with the IDepositContractRegistry and individual \r\n * IDepositContracts to enable smart-wallet functionality as well\r\n * as spot and margin trading on Dolomite (through Loopring & dYdX)\r\n */\r\ncontract DolomiteDirectV1 is Requestable, IVersionable, IDolomiteMarginTradingBroker {\r\n    using DepositContractImpl for IDepositContract;\r\n    using SafeMath for uint;\r\n\r\n    IDepositContractRegistry public registry;\r\n    address public loopringDelegate;\r\n    address public dolomiteMarginProtocolAddress;\r\n    address public dydxProtocolAddress;\r\n    address public wethTokenAddress;\r\n\r\n    constructor(\r\n        address _depositContractRegistry,\r\n        address _loopringDelegate,\r\n        address _dolomiteMarginProtocol,\r\n        address _dydxProtocolAddress,\r\n        address _wethTokenAddress\r\n    ) public {\r\n        registry = IDepositContractRegistry(_depositContractRegistry);\r\n        loopringDelegate = _loopringDelegate;\r\n        dolomiteMarginProtocolAddress = _dolomiteMarginProtocol;\r\n        dydxProtocolAddress = _dydxProtocolAddress;\r\n        wethTokenAddress = _wethTokenAddress;\r\n    }\r\n\r\n    /*\r\n     * Returns the available balance for an owner that this contract manages.\r\n     * If the token is WETH, it returns the sum of the ETH and WETH balance,\r\n     * as ETH is automatically wrapped upon transfers (unless the unwrap option is\r\n     * set to true in the transfer request)\r\n     */\r\n    function balanceOf(address owner, address token) public view returns (uint) {\r\n        address depositAddress = registry.depositAddressOf(owner);\r\n        uint tokenBalance = IERC20(token).balanceOf(depositAddress);\r\n        if (token == wethTokenAddress) tokenBalance = tokenBalance.add(depositAddress.balance);\r\n        return tokenBalance;\r\n    }\r\n\r\n    /*\r\n     * Send up a signed transfer request and the given amount tokens\r\n     * is transferred to the specified recipient.\r\n     */\r\n    function transfer(Types.Request memory request) public {\r\n        validateRequest(request);\r\n\r\n        Types.TransferRequest memory transferRequest = request.decodeTransferRequest();\r\n        address payable depositAddress = registry.depositAddressOf(request.owner);\r\n\r\n        _transfer(\r\n            transferRequest.token,\r\n            depositAddress,\r\n            transferRequest.recipient,\r\n            transferRequest.amount,\r\n            transferRequest.unwrap\r\n        );\r\n\r\n        completeRequest(request);\r\n    }\r\n\r\n    // =============================\r\n\r\n    function _transfer(address token, address payable depositAddress, address recipient, uint amount, bool unwrap) internal {\r\n        IDepositContract depositContract = IDepositContract(depositAddress);\r\n\r\n        if (token == wethTokenAddress && unwrap) {\r\n            if (depositAddress.balance < amount) {\r\n                depositContract.unwrapWeth(wethTokenAddress, amount.sub(depositAddress.balance));\r\n            }\r\n\r\n            depositContract.transferEth(recipient, amount);\r\n            return;\r\n        }\r\n\r\n        depositContract.wrapAndTransferToken(token, recipient, amount, wethTokenAddress);\r\n    }\r\n\r\n    // -----------------------------\r\n    // Loopring Broker Delegate\r\n\r\n    function brokerRequestAllowance(BrokerData.BrokerApprovalRequest memory request) public returns (bool) {\r\n        require(msg.sender == loopringDelegate);\r\n\r\n        BrokerData.BrokerOrder[] memory mergedOrders = new BrokerData.BrokerOrder[](request.orders.length);\r\n        uint numMergedOrders = 1;\r\n\r\n        mergedOrders[0] = request.orders[0];\r\n\r\n        if (request.orders.length > 1) {\r\n            for (uint i = 1; i < request.orders.length; i++) {\r\n                bool isDuplicate = false;\r\n\r\n                for (uint b = 0; b < numMergedOrders; b++) {\r\n                    if (request.orders[i].owner == mergedOrders[b].owner) {\r\n                        mergedOrders[b].requestedAmountS += request.orders[i].requestedAmountS;\r\n                        mergedOrders[b].requestedFeeAmount += request.orders[i].requestedFeeAmount;\r\n                        isDuplicate = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!isDuplicate) {\r\n                    mergedOrders[numMergedOrders] = request.orders[i];\r\n                    numMergedOrders += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (uint j = 0; j < numMergedOrders; j++) {\r\n            BrokerData.BrokerOrder memory order = mergedOrders[j];\r\n            address payable depositAddress = registry.depositAddressOf(order.owner);\r\n\r\n            _transfer(request.tokenS, depositAddress, address(this), order.requestedAmountS, false);\r\n            if (order.requestedFeeAmount > 0) _transfer(request.feeToken, depositAddress, address(this), order.requestedFeeAmount, false);\r\n        }\r\n\r\n        return false;\r\n        // Does not use onOrderFillReport\r\n    }\r\n\r\n    function onOrderFillReport(BrokerData.BrokerInterceptorReport memory fillReport) public {\r\n        // Do nothing\r\n    }\r\n\r\n    function brokerBalanceOf(address owner, address tokenAddress) public view returns (uint) {\r\n        return balanceOf(owner, tokenAddress);\r\n    }\r\n\r\n    // ----------------------------\r\n    // Dolomite Margin Trading Broker\r\n\r\n    function brokerMarginRequestApproval(address owner, address token, uint amount) public {\r\n        require(msg.sender == dolomiteMarginProtocolAddress || msg.sender == loopringDelegate, \"brokerMarginRequestApproval: INVALID_SENDER\");\r\n\r\n        address payable depositAddress = registry.depositAddressOf(owner);\r\n        _transfer(token, depositAddress, address(this), amount, false);\r\n    }\r\n\r\n    function brokerMarginGetTrader(address owner, bytes memory orderData) public view returns (address) {\r\n        return registry.depositAddressOf(owner);\r\n    }\r\n\r\n    // -----------------------------\r\n    // Requestable\r\n\r\n    function _payRequestFee(address owner, address feeToken, address feeRecipient, uint feeAmount) internal {\r\n        _transfer(feeToken, registry.depositAddressOf(owner), feeRecipient, feeAmount, false);\r\n    }\r\n\r\n    // -----------------------------\r\n    // Versionable\r\n\r\n    function versionBeginUsage(\r\n        address owner,\r\n        address payable depositAddress,\r\n        address oldVersion,\r\n        bytes calldata additionalData\r\n    ) external {\r\n        // Approve the DolomiteMarginProtocol as an operator for the deposit contract's dYdX account\r\n        IDepositContract(depositAddress).setDydxOperator(dydxProtocolAddress, dolomiteMarginProtocolAddress);\r\n    }\r\n\r\n    function versionEndUsage(\r\n        address owner,\r\n        address payable depositAddress,\r\n        address newVersion,\r\n        bytes calldata additionalData\r\n    ) external {/* do nothing */}\r\n\r\n\r\n    // =============================\r\n    // Administrative\r\n\r\n    /*\r\n     * Tokens are held in individual deposit contracts, the only time a trader's\r\n     * funds are held by this contract is when Loopring or dYdX requests a trader's\r\n     * tokens, and immediately upon this contract moving funds into itself, Loopring\r\n     * or dYdX will move the funds out and into themselves. Thus, we can open this\r\n     * function up for anyone to call to set or reset the approval for Loopring and\r\n     * dYdX for a given token. The reason these approvals are set globally and not\r\n     * on an as-needed (per fill) basis is to reduce gas costs.\r\n     */\r\n    function enableTrading(address token) public {\r\n        IERC20(token).approve(loopringDelegate, uint(- 1));\r\n        IERC20(token).approve(dolomiteMarginProtocolAddress, uint(- 1));\r\n    }\r\n\r\n    function enableTrading(address[] calldata tokens) external {\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            enableTrading(tokens[i]);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loopringDelegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dolomiteMarginProtocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dydxProtocolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"brokerBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"orderData\",\"type\":\"bytes\"}],\"name\":\"brokerMarginGetTrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"brokerMarginRequestApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fillAmountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmountS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct BrokerData.BrokerOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"tokenS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalFillAmountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRequestedAmountS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRequestedFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BrokerData.BrokerApprovalRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"brokerRequestAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dolomiteMarginProtocolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dydxProtocolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"enableTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"enableTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loopringDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fillAmountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentAmountS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct BrokerData.BrokerInterceptorReport\",\"name\":\"fillReport\",\"type\":\"tuple\"}],\"name\":\"onOrderFillReport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IDepositContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum Types.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.RequestFee\",\"name\":\"fee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Types.RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct Types.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"depositAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldVersion\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalData\",\"type\":\"bytes\"}],\"name\":\"versionBeginUsage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"depositAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newVersion\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalData\",\"type\":\"bytes\"}],\"name\":\"versionEndUsage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DolomiteDirectV1","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ca8efcc93bca0bd89ad9bfffd050483dd80fdf07000000000000000000000000e2466deb9536a69bf8131ecd0c267ee41dd1cda00000000000000000000000007f49ac8fdb38d24b686130e22579c7efe69b19c000000000000000000000000002c57952e2e406a9a9af2dff2c280c59df9a8b8b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ac56e1df7979f9d90d4a4d959f46933aee79d8481310f4a633ef40aa915e80e1"}]}