{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/modules/Governable.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\ncontract Governable {\r\n    address public governor;\r\n\r\n    event ChangeGovernor(address indexed _old, address indexed _new);\r\n\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == governor, 'Governable: FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    // called after deployment\r\n    function initGovernorAddress(address _governor) internal {\r\n        require(_governor != address(0), 'Governable: INPUT_ADDRESS_IS_ZERO');\r\n        governor = _governor;\r\n    }\r\n\r\n    function changeGovernor(address _new) public onlyGovernor {\r\n        _changeGovernor(_new);\r\n    }\r\n\r\n    function _changeGovernor(address _new) internal {\r\n        require(_new != address(0), 'Governable: INVALID_ADDRESS');\r\n        require(_new != governor, 'Governable: NO_CHANGE');\r\n        address old = governor;\r\n        governor = _new;\r\n        emit ChangeGovernor(old, _new);\r\n    }\r\n\r\n}\r\n\r\n// Dependency file: contracts/modules/Ownable.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\r\n        emit OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n// Dependency file: contracts/modules/TokenRegistry.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\n// import './Governable.sol';\r\n\r\n/**\r\n    Business Process\r\n    step 1. publishToken\r\n    step 2. addToken or removeToken\r\n */\r\n\r\ncontract TokenRegistry is Governable {\r\n    mapping (address => uint) public tokenStatus;\r\n    mapping (address => uint) public publishTime;\r\n    mapping(address => mapping(address => uint)) public pairStatus;\r\n    uint public tokenCount;\r\n    uint public pairCount;\r\n    address[] public tokenList;\r\n    uint public constant NONE = 0;\r\n    uint public constant REGISTERED = 1;\r\n    uint public constant PENDING = 2;\r\n    uint public constant OPENED = 3;\r\n    uint public constant CLOSED = 4;\r\n\r\n    event TokenStatusChanged(address indexed _token, uint _status, uint _block);\r\n    event PairStatusChanged(address indexed _tokenA, address indexed _tokenB, uint _status);\r\n\r\n    function registryToken(address _token) external onlyGovernor returns (bool) {\r\n        return _updateToken(_token, REGISTERED);\r\n    }\r\n\r\n    function publishToken(address _token) external onlyGovernor returns (bool) {\r\n        publishTime[_token] = block.number;\r\n        return _updateToken(_token, PENDING);\r\n    }\r\n\r\n    function updateToken(address _token, uint _status) external onlyGovernor returns (bool) {\r\n        return _updateToken(_token, _status);\r\n    }\r\n\r\n    function validTokens() external view returns (address[] memory) {\r\n        uint count;\r\n        for (uint i; i < tokenList.length; i++) {\r\n            if (tokenStatus[tokenList[i]] == PENDING || tokenStatus[tokenList[i]] == OPENED) {\r\n                count++;\r\n            }\r\n        }\r\n        address[] memory res = new address[](count);\r\n        uint index = 0;\r\n        for (uint i; i < tokenList.length; i++) {\r\n            if (tokenStatus[tokenList[i]] == PENDING || tokenStatus[tokenList[i]] == OPENED) {\r\n                res[index] = tokenList[i];\r\n                index++;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function iterateValidTokens(uint _start, uint _end) external view returns (address[] memory) {\r\n        require(_end <= tokenList.length, \"TokenRegistry: OVERFLOW\");\r\n        require(_start <= _end && _start >= 0 && _end >= 0, \"TokenRegistry: INVAID_PARAMTERS\");\r\n        uint count;\r\n        for (uint i = _start; i < _end; i++) {\r\n            if (tokenStatus[tokenList[i]] == PENDING || tokenStatus[tokenList[i]] == OPENED) {\r\n                count++;\r\n            }\r\n        }\r\n        address[] memory res = new address[](count);\r\n        uint index = 0;\r\n        for (uint i = _start; i < _end; i++) {\r\n            if (tokenStatus[tokenList[i]] == PENDING || tokenStatus[tokenList[i]] == OPENED) {\r\n                res[index] = tokenList[i];\r\n                index++;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function _updateToken(address _token, uint _status) internal returns (bool) {\r\n        require(_token != address(0), 'TokenRegistry: INVALID_TOKEN');\r\n        require(tokenStatus[_token] != _status, 'TokenRegistry: TOKEN_STATUS_NO_CHANGE');\r\n        if (tokenStatus[_token] == NONE) {\r\n            tokenCount++;\r\n            require(tokenCount <= uint(-1), 'TokenRegistry: OVERFLOW');\r\n            tokenList.push(_token);\r\n        }\r\n        tokenStatus[_token] = _status;\r\n        emit TokenStatusChanged(_token, _status, block.number);\r\n        return true;\r\n    }\r\n\r\n    function updatePair(address tokenA, address tokenB, uint _status) external onlyGovernor returns (bool) {\r\n        return _updatePair(tokenA, tokenB, _status);\r\n    }\r\n\r\n    function _updatePair(address tokenA, address tokenB, uint _status) internal returns (bool) {\r\n        require(pairStatus[tokenA][tokenB] != _status, 'TokenRegistry: PAIR_STATUS_NO_CHANGE');\r\n        pairStatus[tokenA][tokenB] = _status;\r\n        pairStatus[tokenB][tokenA] = _status;\r\n        emit PairStatusChanged(tokenA, tokenB, _status);\r\n        return true;\r\n    }\r\n\r\n    function _checkPair(address tokenA, address tokenB) internal view returns (bool) {\r\n        uint status = pairStatus[tokenA][tokenB];\r\n        if (status == CLOSED) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n// Dependency file: contracts/libraries/TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/libraries/ConfigNames.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\nlibrary ConfigNames {\r\n    bytes32 public constant PRODUCE_DGAS_RATE = bytes32('PRODUCE_DGAS_RATE');\r\n    bytes32 public constant SWAP_FEE_PERCENT = bytes32('SWAP_FEE_PERCENT');\r\n    bytes32 public constant LIST_DGAS_AMOUNT = bytes32('LIST_DGAS_AMOUNT');\r\n    bytes32 public constant UNSTAKE_DURATION = bytes32('UNSTAKE_DURATION');\r\n    bytes32 public constant REMOVE_LIQUIDITY_DURATION = bytes32('REMOVE_LIQUIDITY_DURATION');\r\n    bytes32 public constant TOKEN_TO_DGAS_PAIR_MIN_PERCENT = bytes32('TOKEN_TO_DGAS_PAIR_MIN_PERCENT');\r\n    bytes32 public constant LIST_TOKEN_FAILURE_BURN_PRECENT = bytes32('LIST_TOKEN_FAILURE_BURN_PRECENT');\r\n    bytes32 public constant LIST_TOKEN_SUCCESS_BURN_PRECENT = bytes32('LIST_TOKEN_SUCCESS_BURN_PRECENT');\r\n    bytes32 public constant PROPOSAL_DGAS_AMOUNT = bytes32('PROPOSAL_DGAS_AMOUNT');\r\n    bytes32 public constant VOTE_DURATION = bytes32('VOTE_DURATION');\r\n    bytes32 public constant VOTE_REWARD_PERCENT = bytes32('VOTE_REWARD_PERCENT');\r\n    bytes32 public constant PAIR_SWITCH = bytes32('PAIR_SWITCH');\r\n    bytes32 public constant TOKEN_PENGDING_SWITCH = bytes32('TOKEN_PENGDING_SWITCH');\r\n    bytes32 public constant TOKEN_PENGDING_TIME = bytes32('TOKEN_PENGDING_TIME');\r\n}\r\npragma solidity >=0.6.6;\r\n\r\n// import './libraries/ConfigNames.sol';\r\n// import './libraries/TransferHelper.sol';\r\n// import './modules/TokenRegistry.sol';\r\n// import './modules/Ownable.sol';\r\n\r\ncontract DemaxConfig is TokenRegistry, Ownable {\r\n    uint public version = 1;\r\n    event ConfigValueChanged(bytes32 _name, uint _old, uint _value);\r\n\r\n    struct Config {\r\n        uint minValue;\r\n        uint maxValue;\r\n        uint maxSpan;\r\n        uint value;\r\n        uint enable;  // 0:disable, 1: enable\r\n    }\r\n\r\n    mapping(bytes32 => Config) public configs;\r\n    address public dgas;                                // DGAS contract address\r\n    address public platform;                               \r\n    uint public constant PERCENT_DENOMINATOR = 10000;\r\n    uint public constant DGAS_DECIMAL = 10 ** 18;\r\n    address[] public defaultListTokens;\r\n    \r\n    modifier notZero(uint amount) {\r\n        require(amount > 0, \"DemaxConfig: ZERO AMOUNT\");\r\n        _;\r\n    }\r\n\r\n    constructor()  public {\r\n        _initConfig(ConfigNames.PRODUCE_DGAS_RATE, 1 * DGAS_DECIMAL, 300 * DGAS_DECIMAL, 50 * DGAS_DECIMAL, 100 * DGAS_DECIMAL);\r\n        _initConfig(ConfigNames.SWAP_FEE_PERCENT, 5,30,5,30);\r\n        _initConfig(ConfigNames.LIST_DGAS_AMOUNT, 0, 100000 * DGAS_DECIMAL, 1000 * DGAS_DECIMAL, 0  * DGAS_DECIMAL);\r\n        _initConfig(ConfigNames.UNSTAKE_DURATION, 6500, 6500*7, 6500, 6500);\r\n        _initConfig(ConfigNames.REMOVE_LIQUIDITY_DURATION, 0, 6500*7, 6500, 0);\r\n        _initConfig(ConfigNames.TOKEN_TO_DGAS_PAIR_MIN_PERCENT, 200, 500, 10, 200);\r\n        _initConfig(ConfigNames.LIST_TOKEN_FAILURE_BURN_PRECENT, 100, 5000, 500, 1000);\r\n        _initConfig(ConfigNames.LIST_TOKEN_SUCCESS_BURN_PRECENT, 1000, 5000, 500, 5000);\r\n        _initConfig(ConfigNames.PROPOSAL_DGAS_AMOUNT, 100 * DGAS_DECIMAL, 10000 * DGAS_DECIMAL, 100 * DGAS_DECIMAL, 0);\r\n        _initConfig(ConfigNames.VOTE_DURATION, 6500, 6500*7, 6500, 1);\r\n        _initConfig(ConfigNames.VOTE_REWARD_PERCENT, 0, 1000, 100, 500);\r\n        _initConfig(ConfigNames.PAIR_SWITCH, 0, 1, 1, 1);  // 0:off, 1:on\r\n        _initConfig(ConfigNames.TOKEN_PENGDING_SWITCH, 0, 1, 1, 1);  // 0:off, 1:on\r\n        _initConfig(ConfigNames.TOKEN_PENGDING_TIME, 0, 100*6500, 10*6500, 100*6500);\r\n    }\r\n\r\n    function _initConfig(bytes32 _name, uint _minValue, uint _maxValue, uint _maxSpan, uint _value) internal {\r\n        Config storage config = configs[_name];\r\n        config.minValue = _minValue;\r\n        config.maxValue = _maxValue;\r\n        config.maxSpan = _maxSpan;\r\n        config.value = _value;\r\n        config.enable = 1;\r\n    }\r\n\r\n    function initialize(\r\n        address _dgas,\r\n        address _governor,\r\n        address _platform,\r\n        address[] memory _listTokens) public onlyOwner {\r\n        require(_dgas != address(0), \"DemaxConfig: ZERO ADDRESS\");\r\n        dgas = _dgas;\r\n        platform = _platform;\r\n        for(uint i = 0 ; i < _listTokens.length; i++){\r\n            _updateToken(_listTokens[i], OPENED);\r\n            defaultListTokens.push(_listTokens[i]);\r\n        }\r\n        initGovernorAddress(_governor);\r\n    }\r\n\r\n    function modifyGovernor(address _new) public onlyOwner {\r\n        _changeGovernor(_new);\r\n    }\r\n\r\n    function getConfig(bytes32 _name) external view returns (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable) {\r\n        Config memory config = configs[_name];\r\n        minValue = config.minValue;\r\n        maxValue = config.maxValue;\r\n        maxSpan = config.maxSpan;\r\n        value = config.value;\r\n        enable = config.enable;\r\n    }\r\n    \r\n    function getConfigValue(bytes32 _name) public view returns (uint) {\r\n        return configs[_name].value;\r\n    }\r\n\r\n    function changeConfigValue(bytes32 _name, uint _value) external onlyGovernor returns (bool) {\r\n        Config storage config = configs[_name];\r\n        require(config.enable == 1, \"DemaxConfig: DISABLE\");\r\n        require(_value <= config.maxValue && _value >= config.minValue, \"DemaxConfig: OVERFLOW\");\r\n        uint old = config.value;\r\n        uint span = _value >= old ? (_value - old) : (old - _value);\r\n        require(span <= config.maxSpan, \"DemaxConfig: EXCEED MAX ADJUST SPAN\");\r\n        config.value = _value;\r\n        emit ConfigValueChanged(_name, old, _value);\r\n        return true;\r\n    }\r\n\r\n    function checkToken(address _token) public view returns(bool) {\r\n        if (tokenStatus[_token] == OPENED) {\r\n            return true;\r\n        } else if (tokenStatus[_token] == PENDING ) {\r\n            if (getConfigValue(ConfigNames.TOKEN_PENGDING_SWITCH) == 1 && block.number > publishTime[_token] + getConfigValue(ConfigNames.TOKEN_PENGDING_TIME)) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function checkPair(address tokenA, address tokenB) external view returns (bool) {\r\n        if (checkToken(tokenA) && checkToken(tokenB) && _checkPair(tokenA, tokenB)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getDefaultListTokens() external view returns (address[] memory) {\r\n        address[] memory res = new address[](defaultListTokens.length);\r\n        for (uint i; i < defaultListTokens.length; i++) {\r\n            res[i] = defaultListTokens[i];\r\n        }\r\n        return res;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ConfigValueChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"PairStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"TokenStatusChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOSED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DGAS_DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPENED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENDING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTERED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeConfigValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"checkPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"checkToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"configs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSpan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"defaultListTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dgas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSpan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getConfigValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultListTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dgas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_listTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"iterateValidTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"modifyGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publishTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"publishToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"registryToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"updatePair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"updateToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DemaxConfig","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://357c77538e961e84a547ba1115326dbe5cea230507b6547a97efb41bb7f84f73"}]}