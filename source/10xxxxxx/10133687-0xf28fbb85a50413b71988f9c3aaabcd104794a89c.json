{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public manager;\r\n    bool public active;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        manager = 0x8E968988807b41b317BbA732435723f25221E955;\r\n        active = (owner == manager);\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager, \"2002\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrManager() {\r\n        require(\r\n            (msg.sender == owner) || (msg.sender == manager),\r\n            \"2003\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function transferOwner(address newOwner) public onlyManager {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function transferManager(address _manager) public onlyManager {\r\n        manager = _manager;\r\n    }\r\n\r\n    function transferActive(bool _active) public onlyManager {\r\n      active = _active;\r\n    }\r\n\r\n    function kill() public onlyOwnerOrManager { \r\n        selfdestruct(address(uint160(manager)));\r\n    }\r\n}\r\n\r\ncontract Pultus is Ownable {\r\n    event registerEvent(\r\n        address indexed _user,\r\n        address indexed _referrer,\r\n        uint256 _userid,\r\n        uint256 _referrerid,\r\n        uint256 _time,\r\n        uint256 _expired\r\n    );\r\n    event buyEvent(\r\n        address indexed _user,\r\n        uint256 _userid,\r\n        uint256 _level,\r\n        uint256 _time,\r\n        uint256 _expired\r\n    );\r\n    event payMoneyEvent(\r\n        address indexed _payee,\r\n        uint256 _payeeid,\r\n        address indexed _drawee,\r\n        uint256 _draweeid,\r\n        uint256 _level,\r\n        uint256 _ether,\r\n        uint256 _time\r\n    );\r\n    event lostMoneyEvent(\r\n        address indexed _payee,\r\n        uint256 _payeeid,\r\n        address indexed _drawee,\r\n        uint256 _draweeid,\r\n        uint256 _level,\r\n        uint256 _ether,\r\n        uint256 _time\r\n    );\r\n\r\n    mapping(uint256 => uint256) public LEVEL_PRICE;\r\n    uint256 REFERRER_1_LEVEL_LIMIT = 3;\r\n    uint256 PERIOD_LENGTH = 365 days;\r\n    uint256 PRICE = 5 ether;\r\n    \r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint256 id;\r\n        uint256 referrerID; \r\n        address[] referral; \r\n        mapping(uint256 => uint256) levelExpired; \r\n        uint256 recommend;\r\n        uint256 amount;\r\n    }\r\n    \r\n    mapping(address => UserStruct) public users;\r\n    mapping(uint256 => address) public userList;\r\n    uint256 public currUserID = 0;\r\n    uint256 public tradingTotal = 0;\r\n    uint256 public etherTotal = 0;\r\n    uint256 public createTime = 0;\r\n    uint256 public seedIndex=0;\r\n\r\n    constructor(uint256 _days, uint256[] memory _level_price,uint256 _price) public {\r\n        require(_days > 0 && _days <= 3650, \"2004\");\r\n        require(_level_price.length == 8, \"2005\");\r\n        for (uint256 i = 1; i <= 8; i++) {\r\n            LEVEL_PRICE[i] = _level_price[i - 1];\r\n        }\r\n        PRICE = _price;\r\n        PERIOD_LENGTH = _days * 1 days;\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            referral: new address[](0),\r\n            recommend:0,\r\n            amount:0\r\n        });\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n        for (uint256 i = 1; i <= 8; i++) {\r\n            users[msg.sender].levelExpired[i] = 32503680000; \r\n        }\r\n        createTime=now;\r\n        active = (msg.sender==manager);\r\n    }\r\n\r\n    function() external payable {\r\n        if(active==false && PRICE==msg.value){\r\n          address(uint160(manager)).transfer(msg.value);\r\n          active = true;\r\n          return;\r\n        }\r\n        uint256 level = getLevel(msg.value);\r\n        require(level > 0, \"2006\");\r\n        if (users[msg.sender].isExist) {\r\n            buyLevel(level, msg.sender);\r\n        } else if (level == 1) {\r\n            uint256 refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n            if (users[referrer].isExist) {\r\n                refId = users[referrer].id;\r\n            } else {\r\n                revert(\"2009\");\r\n            }\r\n            registerLevel(refId, msg.sender);\r\n        } else {\r\n            revert(\"2008\");\r\n        }\r\n        tradingTotal++;\r\n    }\r\n\r\n    function registerLevel(uint256 _referrer, address _user)\r\n        public\r\n        payable\r\n    {\r\n        require(!users[_user].isExist, \"2010\");\r\n        require(\r\n            _referrer > 0 && _referrer <= currUserID,\r\n            \"2011\"\r\n        );\r\n        \r\n        users[userList[_referrer]].recommend +=1;\r\n        \r\n        if (\r\n            users[userList[_referrer]].referral.length >= REFERRER_1_LEVEL_LIMIT\r\n        ) {\r\n            _referrer = users[findFreeReferrer(userList[_referrer])].id;\r\n        }\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrer,\r\n            referral: new address[](0),\r\n            recommend:0,\r\n            amount:0\r\n        });\r\n        uint256 expired = now + PERIOD_LENGTH;\r\n       \r\n        users[_user] = userStruct;\r\n        userList[currUserID] = _user;\r\n        users[_user].levelExpired[1] = expired;\r\n        users[_user].levelExpired[2] = 0;\r\n        users[_user].levelExpired[3] = 0;\r\n        users[_user].levelExpired[4] = 0;\r\n        users[_user].levelExpired[5] = 0;\r\n        users[_user].levelExpired[6] = 0;\r\n        users[_user].levelExpired[7] = 0;\r\n        users[_user].levelExpired[8] = 0;\r\n        \r\n        users[userList[_referrer]].referral.push(_user);\r\n        \r\n        payForLevel(1, _user);\r\n\r\n        emit registerEvent(\r\n            _user,\r\n            userList[_referrer],\r\n            userStruct.id,\r\n            userStruct.referrerID,\r\n            now,\r\n            expired\r\n        );\r\n    }\r\n\r\n    function buyLevel(uint256 _level, address _user) public payable {\r\n        require(users[_user].isExist, \"2012\");\r\n        require(_level > 0 && _level <= 8, \"2013\");\r\n        uint256 expired = users[_user].levelExpired[_level];\r\n        if (expired < now) {\r\n            expired = now;\r\n        }\r\n        if (_level == 1) {\r\n            require(msg.value == LEVEL_PRICE[1], \"2008\");\r\n        } else {\r\n            require(msg.value == LEVEL_PRICE[_level], \"2008\");\r\n            for (uint256 l = _level - 1; l > 0; l--) {\r\n                require(users[_user].levelExpired[l] >= now,\"2014\");\r\n            }\r\n        }\r\n        expired += PERIOD_LENGTH;\r\n        users[_user].levelExpired[_level] = expired;\r\n        \r\n        payForLevel(_level, _user);\r\n        emit buyEvent(_user, users[_user].id, _level, now, expired);\r\n    }\r\n\r\n    function buyHelp(address _target)\r\n        external\r\n        payable\r\n    {\r\n        uint256 level = getLevel(msg.value);\r\n        require(level > 0, \"2008\");\r\n        if (users[_target].isExist) {\r\n            buyLevel(level, _target);\r\n        }else if (level == 1) {\r\n            uint256 refId = 0;\r\n            if (users[msg.sender].isExist) {\r\n                refId = users[msg.sender].id;\r\n            } else {\r\n                revert(\"2009\");\r\n            }\r\n            registerLevel(refId, _target);\r\n        }\r\n        tradingTotal++;\r\n    }\r\n\r\n    function payForLevel(uint256 _level, address _user) internal {\r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        if (_level == 1 || _level == 5) {\r\n            referer = userList[users[_user].referrerID];\r\n        } else if (_level == 2 || _level == 6) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        } else if (_level == 3 || _level == 7) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        } else if (_level == 4 || _level == 8) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        }\r\n        if (!users[referer].isExist) {\r\n            referer = userList[1];\r\n        }\r\n        uint256 amount = LEVEL_PRICE[_level];\r\n        if (users[referer].levelExpired[_level] >= now) {\r\n            users[referer].amount += amount;\r\n            if(active==false && referer==userList[1] && _level>1){\r\n              address(uint160(manager)).transfer(amount);\r\n            }else{\r\n              address(uint160(referer)).transfer(amount);\r\n            }\r\n            emit payMoneyEvent(\r\n                referer,\r\n                users[referer].id,\r\n                _user,\r\n                users[_user].id,\r\n                _level,\r\n                amount,\r\n                now\r\n            );\r\n        } else {\r\n            emit lostMoneyEvent(\r\n                referer,\r\n                users[referer].id,\r\n                _user,\r\n                users[_user].id,\r\n                _level,\r\n                amount,\r\n                now\r\n            );\r\n            payForLevel(_level, referer);\r\n        }\r\n        etherTotal += msg.value;\r\n    }\r\n\r\n    function findFreeReferrer(address _user)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        if (users[_user].referral.length < REFERRER_1_LEVEL_LIMIT) {\r\n            return _user;\r\n        }\r\n        uint256 sum = 0;\r\n        for(uint256 i = 0; i <= 4; i++) {\r\n          sum+=REFERRER_1_LEVEL_LIMIT ** i;\r\n        }\r\n        uint256 total=sum*REFERRER_1_LEVEL_LIMIT;\r\n        address[] memory referrals = new address[](total);\r\n        for(uint256 i = 0; i < REFERRER_1_LEVEL_LIMIT; i++) {\r\n          referrals[i] = users[_user].referral[i];\r\n        }\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for (uint256 i = 0; i < total; i++) {\r\n            if (users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {\r\n                if (i < sum-1) {\r\n                  for(uint256 j = 0; j < REFERRER_1_LEVEL_LIMIT; j++) {\r\n                    referrals[(i+1)*REFERRER_1_LEVEL_LIMIT+j] = users[referrals[i]].referral[j];\r\n                  }\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, \"2016\");\r\n        return freeReferrer;\r\n    }\r\n    \r\n    function appendSeed(address _referrer,uint256 sum) external payable onlyManager {\r\n        require(users[_referrer].isExist,\"2009\");\r\n        require(tradingTotal==0,\"Not allowed to add\");\r\n        SeedContract sc = SeedContract(0xBEBE40605260F8716A18B3C5007b9113Ec65CE61);\r\n        address[] memory _seeds = sc.getList();\r\n        uint256 limit=sum+seedIndex;\r\n        require(_seeds.length>=limit,\"Alternate address exceeded\");\r\n\r\n        uint256 refId = 0;\r\n        \r\n        for(uint256 i=seedIndex;i<limit;i++){\r\n            uint256 n=i/3;\r\n            if(n==0){\r\n                refId = users[_referrer].id;\r\n            }else{\r\n                refId=users[_seeds[n-1]].id;\r\n            }\r\n            address _user=_seeds[i];\r\n            UserStruct memory userStruct;\r\n            currUserID++;\r\n\r\n            userStruct = UserStruct({\r\n                isExist: true,\r\n                id: currUserID,\r\n                referrerID: refId,\r\n                referral: new address[](0),\r\n                recommend:0,\r\n                amount:0\r\n            });\r\n            users[_user] = userStruct;\r\n            userList[currUserID] = _user;\r\n            for(uint256 x=1;x<=8;x++){\r\n                users[_user].levelExpired[x]=0;\r\n            }\r\n            users[userList[refId]].referral.push(_user);\r\n        }\r\n        seedIndex=limit;\r\n    }\r\n\r\n    function viewUserById(uint256 userid) \r\n        public\r\n        view\r\n        returns (uint256 id,address useraddr, uint256 referrerid, address referrer,address[] memory referrals, uint256[] memory levels,  uint256 recommend, uint256 amount)\r\n    {\r\n        return viewUser(userList[userid]);\r\n    }\r\n\r\n    function viewUser(address _user)\r\n        public\r\n        view\r\n        returns (uint256 id,address useraddr, uint256 referrerid, address referrer,address[] memory referrals, uint256[] memory levels,  uint256 recommend, uint256 amount)\r\n    {\r\n        id = users[_user].id;\r\n        referrerid = users[_user].referrerID;\r\n        recommend = users[_user].recommend;\r\n        amount = users[_user].amount;\r\n        if (referrerid > 0) {\r\n            referrer = userList[referrerid];\r\n        } else {\r\n            referrer = address(0);\r\n        }\r\n        referrals = users[_user].referral;\r\n        levels = new uint256[](8);\r\n        for (uint256 i = 0; i < 8; i++) {\r\n            levels[i] = users[_user].levelExpired[i + 1];\r\n        }\r\n        return (id,_user, referrerid, referrer,referrals, levels, recommend, amount);\r\n    }\r\n\r\n    function viewExists(address _user)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[_user].isExist;\r\n    }\r\n\r\n    function viewExistsById(uint256 _user)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[userList[_user]].isExist;\r\n    }\r\n\r\n    function viewReferralsById(uint256 userid)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return viewReferrals(userList[userid]);\r\n    }\r\n\r\n    \r\n\r\n    function viewReferrals(address _user)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint256 _level)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[_user].levelExpired[_level];\r\n    }\r\n\r\n    function viewSummary()\r\n        public\r\n        view\r\n        returns (address,address,uint256,\r\n        uint256,uint256,bool,\r\n        uint256,uint256, uint256[8] memory,\r\n        uint256[8] memory,uint256)\r\n    {\r\n        uint256[8] memory prices = [uint(0),uint(0),uint(0),uint(0),uint(0),uint(0),uint(0),uint(0)];\r\n        for (uint256 k = 1; k <= 8; k++) {\r\n            prices[k-1] = LEVEL_PRICE[k];\r\n        }\r\n        uint256[8] memory levels = [uint(0),0,0,0,0,0,0,0];\r\n        for (uint256 i = 2; i <= currUserID; i++) {\r\n            if(users[userList[i]].levelExpired[8] > now){\r\n                levels[7]+=1;\r\n            }else if(users[userList[i]].levelExpired[7] > now){\r\n                levels[6]+=1;\r\n            }else if(users[userList[i]].levelExpired[6] > now){\r\n                levels[5]+=1;\r\n            }else if(users[userList[i]].levelExpired[5] > now){\r\n                levels[4]+=1;\r\n            }else if(users[userList[i]].levelExpired[4] > now){\r\n                levels[3]+=1;\r\n            }else if(users[userList[i]].levelExpired[3] > now){\r\n                levels[2]+=1;\r\n            }else if(users[userList[i]].levelExpired[2] > now){\r\n                levels[1]+=1;\r\n            }else if(users[userList[i]].levelExpired[1] > now){\r\n                levels[0]+=1;\r\n            }\r\n        }\r\n        return (\r\n            owner,manager,currUserID,tradingTotal,etherTotal,active,\r\n            PERIOD_LENGTH / 1 days,createTime,prices,levels,PRICE\r\n        );\r\n    }\r\n\r\n\r\n    function getLevel(uint256 value) internal view returns (uint256) {\r\n        uint256 level = 0;\r\n        for (uint256 i = 1; i <= 8; i++) {\r\n            if (LEVEL_PRICE[i] == value) {\r\n                level = i;\r\n                break;\r\n            }\r\n        }\r\n        return level;\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys)\r\n        private\r\n        pure\r\n        returns (address addr)\r\n    {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n    function test9() public view returns(uint256,uint256){\r\n        return (seedIndex,currUserID);\r\n    }\r\n}\r\n\r\ncontract SeedContract  {\r\n    function getList() public view returns(address[] memory);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_level_price\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expired\",\"type\":\"uint256\"}],\"name\":\"buyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payeeid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_drawee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_draweeid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ether\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payeeid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_drawee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_draweeid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ether\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"payMoneyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referrerid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expired\",\"type\":\"uint256\"}],\"name\":\"registerEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"appendSeed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"buyHelp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"registerLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"test9\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"transferActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recommend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"viewExistsById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"}],\"name\":\"viewReferralsById\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewSummary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"useraddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"levels\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"recommend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"}],\"name\":\"viewUserById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"useraddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"levels\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"recommend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Pultus","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000016d00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000063eb89da4ed000000000000000000000000000000000000000000000000000012bc29d8eec7000000000000000000000000000000000000000000000000000038347d8acc550000000000000000000000000000000000000000000000000000a89d78a064ff0000000000000000000000000000000000000000000000000001f9d869e12efd0000000000000000000000000000000000000000000000000005ed893da38cf70000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c493335fd251e9e88fc152c923b9985b583d57a5ea66948bf59a6f7cb279131c"}]}