{"status":"1","message":"OK","result":[{"SourceCode":"{\"AchieveInterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./AegisMath.sol\\\";\\n\\n/**\\n * @title Achieve InterestRateModel contract\\n * @author Aegis\\n */\\ncontract AchieveInterestRateModel is InterestRateModel {\\n    using AegisMath for uint;\\n\\n    address public owner;\\n    uint public constant blocksPerYear = 2102400;\\n    uint public baseRatePerBlock;\\n    uint public multiplierPerBlock;\\n    uint public achieveBaseRatePerBlock;\\n    uint public achieveBaseRateFlag;\\n    uint public achieveMultiplierPerBlock;\\n    uint public kink;\\n\\n    event ChargeInterestRateModel(uint _baseRatePerBlock, uint _multiplierPerBlock, uint _achieveBaseRatePerBlock, uint _achieveMultiplierPerBlock, uint _kink, address _owner);\\n\\n    constructor (uint _baseRatePerYear, uint _multiplierPerYear, uint _achieveBaseRatePerYear, uint _achieveBaseRateFlag, uint _achieveMultiplierPerYear, uint _kink, address _owner) public {\\n        owner = _owner;\\n        _setInterestRateModelInternal(_baseRatePerYear, _multiplierPerYear, _achieveBaseRatePerYear, _achieveBaseRateFlag, _achieveMultiplierPerYear, _kink);\\n    }\\n\\n    function updateJumpRateModel(uint _baseRatePerYear, uint _multiplierPerYear, uint _achieveBaseRatePerYear, uint _achieveBaseRateFlag, uint _achieveMultiplierPerYear, uint _kink) external {\\n        require(msg.sender == owner, \\\"AchieveInterestRateModel::updateJumpRateModel owner failure \\\");\\n        _setInterestRateModelInternal(_baseRatePerYear, _multiplierPerYear, _achieveBaseRatePerYear, _achieveBaseRateFlag, _achieveMultiplierPerYear, _kink);\\n    }\\n\\n    function _setInterestRateModelInternal(uint _baseRatePerYear, uint _multiplierPerYear, uint _achieveBaseRatePerYear, uint _achieveBaseRateFlag, uint _achieveMultiplierPerYear, uint _kink) internal {\\n        kink = _kink;\\n        baseRatePerBlock = _baseRatePerYear.div(blocksPerYear);\\n        multiplierPerBlock = _multiplierPerYear.div(blocksPerYear);\\n        achieveBaseRatePerBlock = _achieveBaseRatePerYear.div(blocksPerYear);\\n        achieveBaseRateFlag = _achieveBaseRateFlag;\\n        achieveMultiplierPerBlock = _achieveMultiplierPerYear.div(blocksPerYear);\\n        emit ChargeInterestRateModel(baseRatePerBlock, multiplierPerBlock, achieveBaseRatePerBlock, achieveMultiplierPerBlock, kink, msg.sender);\\n    }\\n\\n    function getBorrowRate(uint _cash, uint _borrows, uint _reserves) public view returns (uint) {\\n        uint util = utilizationRate(_cash, _borrows, _reserves);\\n        if (util \\u003c= kink) {\\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n        } else {\\n            if(achieveBaseRateFlag == 1) {\\n                return util.mul(achieveMultiplierPerBlock).div(1e18).add(achieveBaseRatePerBlock);\\n            }else if(achieveBaseRateFlag == 2) {\\n                return util.mul(achieveMultiplierPerBlock).div(1e18).sub(achieveBaseRatePerBlock);\\n            }\\n        }\\n    }\\n\\n    function getSupplyRate(uint _cash, uint _borrows, uint _reserves, uint _reserveFactorMantissa) public view returns (uint) {\\n        uint oneMinusReserveFactor = uint(1e18).sub(_reserveFactorMantissa);\\n        uint borrowRate = getBorrowRate(_cash, _borrows, _reserves);\\n        return utilizationRate(_cash, _borrows, _reserves).mul(borrowRate.mul(oneMinusReserveFactor)).div(1e18).div(1e18);\\n    }\\n\\n    function utilizationRate(uint _cash, uint _borrows, uint _reserves) public pure returns (uint) {\\n        if(0 == _borrows){\\n            return 0;\\n        }\\n        return _borrows.mul(1e18).div(_cash.add(_borrows).sub(_reserves));\\n    }\\n}\"},\"AegisMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Aegis safe math, derived from OpenZeppelin\\u0027s SafeMath library\\n * @author Aegis\\n */\\nlibrary AegisMath {\\n\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c \\u003e= _a, \\\"AegisMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return sub(_a, _b, \\\"AegisMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 _a, uint256 _b, string memory _errorMessage) internal pure returns (uint256) {\\n        require(_b \\u003c= _a, _errorMessage);\\n        uint256 c = _a - _b;\\n        return c;\\n    }\\n\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        if (_a == 0) {\\n            return 0;\\n        }\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, \\\"AegisMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return div(_a, _b, \\\"AegisMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 _a, uint256 _b, string memory _errorMessage) internal pure returns (uint256) {\\n        require(_b \\u003e 0, _errorMessage);\\n        uint256 c = _a / _b;\\n        return c;\\n    }\\n\\n    function mod(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return mod(_a, _b, \\\"AegisMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 _a, uint256 _b, string memory _errorMessage) internal pure returns (uint256) {\\n        require(_b != 0, _errorMessage);\\n        return _a % _b;\\n    }\\n}\"},\"InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Aegis InterestRateModel interface\\n * @author Aegis\\n */\\ncontract InterestRateModel {\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param _cash The total amount of cash the market has\\n      * @param _borrows The total amount of borrows the market has outstanding\\n      * @param _reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint _cash, uint _borrows, uint _reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param _cash The total amount of cash the market has\\n      * @param _borrows The total amount of borrows the market has outstanding\\n      * @param _reserves The total amnount of reserves the market has\\n      * @param _reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint _cash, uint _borrows, uint _reserves, uint _reserveFactorMantissa) external view returns (uint);\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_achieveBaseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_achieveBaseRateFlag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_achieveMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_kink\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseRatePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_multiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_achieveBaseRatePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_achieveMultiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_kink\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ChargeInterestRateModel\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"achieveBaseRateFlag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"achieveBaseRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"achieveMultiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_achieveBaseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_achieveBaseRateFlag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_achieveMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_kink\",\"type\":\"uint256\"}],\"name\":\"updateJumpRateModel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"AchieveInterestRateModel","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000006a94d74f43000000000000000000000000000000000000000000000000000001aa535d3d0c00000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000001032045124e180000000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000335c1af0aec656359777bcc3734c3533f3ba6b2a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0176a7605de3254da0f313fd8114cfabef326aa62215f11408d424ebb5242c28"}]}