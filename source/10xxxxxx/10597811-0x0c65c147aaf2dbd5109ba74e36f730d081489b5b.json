{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IUsdAggregatorV2.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Gets the USD value of a currency with 8 decimals.\r\n */\r\ninterface IUsdAggregatorV2 {\r\n\r\n    /**\r\n     * @return The USD value of a currency, with 8 decimals.\r\n     */\r\n    function latestAnswer() external view returns (uint);\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/interfaces/IUnderlyingTokenValuator.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IUnderlyingTokenValuator {\r\n\r\n    /**\r\n      * @dev Gets the tokens value in terms of USD.\r\n      *\r\n      * @return The value of the `amount` of `token`, as a number with 18 decimals\r\n      */\r\n    function getTokenValue(address token, uint amount) external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/utils/StringHelpers.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary StringHelpers {\r\n\r\n    function toString(address _address) public pure returns (string memory) {\r\n        bytes memory b = new bytes(20);\r\n        for (uint i = 0; i < 20; i++) {\r\n            b[i] = byte(uint8(uint(_address) / (2 ** (8 * (19 - i)))));\r\n        }\r\n        return string(b);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/protocol/impl/UnderlyingTokenValuatorImplV3.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract UnderlyingTokenValuatorImplV3 is IUnderlyingTokenValuator, Ownable {\r\n\r\n    using StringHelpers for address;\r\n    using SafeMath for uint;\r\n\r\n    event DaiUsdAggregatorChanged(address indexed oldAggregator, address indexed newAggregator);\r\n    event EthUsdAggregatorChanged(address indexed oldAggregator, address indexed newAggregator);\r\n    event UsdcEthAggregatorChanged(address indexed oldAggregator, address indexed newAggregator);\r\n\r\n    address public dai;\r\n    address public usdc;\r\n    address public weth;\r\n\r\n    IUsdAggregatorV2 public daiUsdAggregator;\r\n    IUsdAggregatorV2 public ethUsdAggregator;\r\n\r\n    IUsdAggregatorV2 public usdcEthAggregator;\r\n\r\n    uint public constant USD_AGGREGATOR_BASE = 100000000; // 1e8\r\n    uint public constant ETH_AGGREGATOR_BASE = 1e18;\r\n\r\n    constructor(\r\n        address _dai,\r\n        address _usdc,\r\n        address _weth,\r\n        address _daiUsdAggregator,\r\n        address _ethUsdAggregator,\r\n        address _usdcEthAggregator\r\n    ) public {\r\n        dai = _dai;\r\n        usdc = _usdc;\r\n        weth = _weth;\r\n\r\n        ethUsdAggregator = IUsdAggregatorV2(_ethUsdAggregator);\r\n\r\n        daiUsdAggregator = IUsdAggregatorV2(_daiUsdAggregator);\r\n        usdcEthAggregator = IUsdAggregatorV2(_usdcEthAggregator);\r\n    }\r\n\r\n    function setEthUsdAggregator(address _ethUsdAggregator) public onlyOwner {\r\n        address oldAggregator = address(ethUsdAggregator);\r\n        ethUsdAggregator = IUsdAggregatorV2(_ethUsdAggregator);\r\n\r\n        emit EthUsdAggregatorChanged(oldAggregator, _ethUsdAggregator);\r\n    }\r\n\r\n    function setDaiUsdAggregator(address _daiUsdAggregator) public onlyOwner {\r\n        address oldAggregator = address(daiUsdAggregator);\r\n        daiUsdAggregator = IUsdAggregatorV2(_daiUsdAggregator);\r\n\r\n        emit DaiUsdAggregatorChanged(oldAggregator, _daiUsdAggregator);\r\n    }\r\n\r\n    function setUsdcEthAggregator(address _usdcEthAggregator) public onlyOwner {\r\n        address oldAggregator = address(usdcEthAggregator);\r\n        usdcEthAggregator = IUsdAggregatorV2(_usdcEthAggregator);\r\n\r\n        emit UsdcEthAggregatorChanged(oldAggregator, _usdcEthAggregator);\r\n    }\r\n\r\n    function getTokenValue(address token, uint amount) public view returns (uint) {\r\n        if (token == weth) {\r\n            return amount.mul(ethUsdAggregator.latestAnswer()).div(USD_AGGREGATOR_BASE);\r\n        } else if (token == usdc) {\r\n            uint wethValueAmount = amount.mul(usdcEthAggregator.latestAnswer()).div(ETH_AGGREGATOR_BASE);\r\n            return getTokenValue(weth, wethValueAmount);\r\n        } else if (token == dai) {\r\n            return amount.mul(daiUsdAggregator.latestAnswer()).div(USD_AGGREGATOR_BASE);\r\n        } else {\r\n            revert(string(abi.encodePacked(\"Invalid token, found: \", token.toString())));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/protocol/impl/UnderlyingTokenValuatorImplV4.sol\r\n\r\n/*\r\n * Copyright 2020 DMM Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract UnderlyingTokenValuatorImplV4 is UnderlyingTokenValuatorImplV3 {\r\n\r\n    using SafeMath for uint;\r\n\r\n    event UsdtEthAggregatorChanged(address indexed oldAggregator, address indexed newAggregator);\r\n\r\n    address public usdt;\r\n\r\n    IUsdAggregatorV2 public usdtEthAggregator;\r\n\r\n    constructor(\r\n        address _dai,\r\n        address _usdc,\r\n        address _usdt,\r\n        address _weth,\r\n        address _daiUsdAggregator,\r\n        address _ethUsdAggregator,\r\n        address _usdcEthAggregator,\r\n        address _usdtEthAggregator\r\n    ) public UnderlyingTokenValuatorImplV3(\r\n        _dai, _usdc, _weth, _daiUsdAggregator, _ethUsdAggregator, _usdcEthAggregator\r\n    ) {\r\n        usdt = _usdt;\r\n        usdtEthAggregator = IUsdAggregatorV2(_usdtEthAggregator);\r\n    }\r\n\r\n    function setUsdtEthAggregator(address _usdtEthAggregator) public onlyOwner {\r\n        address oldAggregator = address(usdtEthAggregator);\r\n        usdtEthAggregator = IUsdAggregatorV2(_usdtEthAggregator);\r\n\r\n        emit UsdtEthAggregatorChanged(oldAggregator, _usdtEthAggregator);\r\n    }\r\n\r\n    function getTokenValue(address token, uint amount) public view returns (uint) {\r\n        if (token == usdt) {\r\n            uint wethValueAmount = amount.mul(usdtEthAggregator.latestAnswer()).div(ETH_AGGREGATOR_BASE);\r\n            return getTokenValue(weth, wethValueAmount);\r\n        } else {\r\n            return super.getTokenValue(token, amount);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiUsdAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethUsdAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcEthAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtEthAggregator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAggregator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAggregator\",\"type\":\"address\"}],\"name\":\"DaiUsdAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAggregator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAggregator\",\"type\":\"address\"}],\"name\":\"EthUsdAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAggregator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAggregator\",\"type\":\"address\"}],\"name\":\"UsdcEthAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAggregator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAggregator\",\"type\":\"address\"}],\"name\":\"UsdtEthAggregatorChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_AGGREGATOR_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USD_AGGREGATOR_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiUsdAggregator\",\"outputs\":[{\"internalType\":\"contract IUsdAggregatorV2\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethUsdAggregator\",\"outputs\":[{\"internalType\":\"contract IUsdAggregatorV2\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daiUsdAggregator\",\"type\":\"address\"}],\"name\":\"setDaiUsdAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethUsdAggregator\",\"type\":\"address\"}],\"name\":\"setEthUsdAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcEthAggregator\",\"type\":\"address\"}],\"name\":\"setUsdcEthAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtEthAggregator\",\"type\":\"address\"}],\"name\":\"setUsdtEthAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdcEthAggregator\",\"outputs\":[{\"internalType\":\"contract IUsdAggregatorV2\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtEthAggregator\",\"outputs\":[{\"internalType\":\"contract IUsdAggregatorV2\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UnderlyingTokenValuatorImplV4","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a7d38fbd325a6467894a13eefd977afe558bc1f0000000000000000000000000f79d6afbb6da890132f9d7c355e3015f15f3406f000000000000000000000000de54467873c3bcaa76421061036053e371721708000000000000000000000000a874fe207df445ff19e7482c746c4d3fd0cb9ace","EVMVersion":"istanbul","Library":"StringHelpers:50add802bbe45d06ac5d52bf3cdac40f8648cf95","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9628c451c56ea2b0d1f26bfe45a1bb6eb38130421aa1f2ce8a2cedb8eb958004"}]}