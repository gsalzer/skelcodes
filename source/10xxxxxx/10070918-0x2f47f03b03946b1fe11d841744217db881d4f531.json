{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.4;\r\n\r\n/**\r\n * @title Manage the owner for the BulkSender contract.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(this), _owner);\r\n    }\r\n\r\n    /**\r\n     * Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: the caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Sets the new address as the owner.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0), \"Ownable: the new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Sending bulk transactions from the whitelisted wallets.\r\n */\r\ncontract BulkSender is Ownable {\r\n\r\n    mapping(address => bool) whitelist;\r\n\r\n    /**\r\n     * Throws if called by any account other than the whitelisted address.\r\n     */\r\n    modifier onlyWhiteListed() {\r\n        require(whitelist[msg.sender], \"Whitelist: the caller is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Approves the address as the whitelisted address.\r\n     */\r\n    function approve(address addr) onlyOwner external {\r\n        whitelist[addr] = true;\r\n    }\r\n\r\n    /**\r\n     * Removes the whitelisted address from the whitelist.\r\n     */\r\n    function remove(address addr) onlyOwner external {\r\n        whitelist[addr] = false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the address is the whitelisted address.\r\n     */\r\n    function isWhiteListed(address addr) public view returns (bool) {\r\n        return whitelist[addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the list of addresses and the list of amounts to make bulk transactions.\r\n     * @param addresses - address[]\r\n     * @param amounts - uint256[]\r\n     */\r\n    function distribute(address[] calldata addresses, uint256[] calldata amounts) onlyWhiteListed external payable  {\r\n        require(addresses.length > 0, \"BulkSender: the length of addresses should be greater than zero\");\r\n        require(amounts.length == addresses.length, \"BulkSender: the length of addresses is not equal the length of amounts\");\r\n\r\n        for (uint256 i; i < addresses.length; i++) {\r\n            uint256 value = amounts[i];\r\n            require(value > 0, \"BulkSender: the value should be greater then zero\");\r\n            address payable _to = address(uint160(addresses[i]));\r\n            _to.transfer(value);\r\n        }\r\n\r\n        require(address(this).balance == 0, \"All received funds must be transfered\");\r\n    }\r\n\r\n    /**\r\n     * @dev This contract shouldn't accept payments.\r\n     */\r\n    receive() external payable {\r\n        revert(\"This contract shouldn't accept payments.\");\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BulkSender","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"OSL-3.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d0e3f84633188cfd0d17b1560a37f17d05afeaef35fc122a8670f9b1060cd0e7"}]}