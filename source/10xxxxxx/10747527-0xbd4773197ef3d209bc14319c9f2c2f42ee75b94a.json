{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n\r\n/**\r\n * @title GBT代币合约\r\n */\r\ncontract GBT {\r\n    /* 公共变量 */\r\n    string public name; //代币名称\r\n    string public symbol; //代币符号比如'$'\r\n    uint8 public decimals = 4;  //代币单位，展示的小数点后面多少个0,后面是是4个0\r\n    uint256 public totalSupply; //代币总量\r\n\r\n    /*记录所有余额的映射*/\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* 在区块链上创建一个事件，用以通知客户端*/\r\n    event Transfer(address indexed from, address indexed to, uint256 value);  //转帐通知事件\r\n    event Burn(address indexed from, uint256 value);  //减去用户余额事件\r\n\r\n\r\n    /* 初始化合约，并且把初始的所有代币都给这合约的创建者\r\n     * @param initialSupply 代币的总数\r\n     * @param tokenName 代币名称\r\n     * @param tokenSymbol 代币符号\r\n     */\r\n    constructor(\r\n       uint256 initialSupply, string tokenName, string tokenSymbol\r\n    ) public {\r\n         //初始化总量\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);    //带着小数的精度\r\n\r\n        //给指定帐户初始化代币总量，初始化用于奖励合约创建者\r\n        balanceOf[msg.sender] = totalSupply;\r\n\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n    }\r\n\r\n\r\n    /**\r\n     * 私有方法从一个帐户发送给另一个帐户代币\r\n     * @param  _from address 发送代币的地址\r\n     * @param  _to address 接受代币的地址\r\n     * @param  _value uint256 接受代币的数量\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n\r\n      //避免转帐的地址是0x0\r\n      require(_to != 0x0);\r\n\r\n      //检查发送者是否拥有足够余额\r\n      require(balanceOf[_from] >= _value);\r\n\r\n      //检查是否溢出\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n      //保存数据用于后面的判断\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n      //从发送者减掉发送额\r\n      balanceOf[_from] -= _value;\r\n\r\n      //给接收者加上相同的量\r\n      balanceOf[_to] += _value;\r\n\r\n      //通知任何监听该交易的客户端\r\n      emit  Transfer(_from, _to, _value);\r\n\r\n      //判断买、卖双方的数据是否和转换前一致\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n    }\r\n\r\n    /**\r\n     * 从主帐户合约调用者发送给别人代币\r\n     * @param  _to address 接受代币的地址\r\n     * @param  _value uint256 接受代币的数量\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * 从某个指定的帐户中，向另一个帐户发送代币\r\n     *\r\n     * 调用过程，会检查设置的允许最大交易额\r\n     *\r\n     * @param  _from address 发送者地址\r\n     * @param  _to address 接受者地址\r\n     * @param  _value uint256 要转移的代币数量\r\n     * @return success        是否交易成功\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        //检查发送者是否拥有足够余额\r\n        require(_value <= allowance[_from][msg.sender]);   // Check allowance\r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 设置帐户允许支付的最大金额\r\n     *\r\n     * 一般在智能合约的时候，避免支付过多，造成风险\r\n     *\r\n     * @param _spender 帐户地址\r\n     * @param _value 金额\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        //防止事务顺序依赖\r\n        require((_value == 0) || (allowance[msg.sender][_spender] == 0));\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 设置帐户允许支付的最大金额\r\n     *\r\n     * 一般在智能合约的时候，避免支付过多，造成风险，加入时间参数，可以在 tokenRecipient 中做其他操作\r\n     *\r\n     * @param _spender 帐户地址\r\n     * @param _value 金额\r\n     * @param _extraData 操作的时间\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 减少代币调用者的余额\r\n     *\r\n     * 操作以后是不可逆的\r\n     *\r\n     * @param _value 要删除的数量\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        //检查帐户余额是否大于要减去的值\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\r\n        //给指定帐户减去余额\r\n        balanceOf[msg.sender] -= _value;\r\n\r\n        //代币问题做相应扣除\r\n        totalSupply -= _value;\r\n\r\n        emit  Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 删除帐户的余额（含其他帐户）\r\n     *\r\n     * 删除以后是不可逆的\r\n     *\r\n     * @param _from 要操作的帐户地址\r\n     * @param _value 要减去的数量\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\r\n        //检查帐户余额是否大于要减去的值\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        //检查 其他帐户 的余额是否够使用\r\n        require(_value <= allowance[_from][msg.sender]);\r\n\r\n        //减掉代币\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        //更新总量\r\n        totalSupply -= _value;\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract QinWa01 is IERC20 {\r\n    address private addrA;\r\n    address private addrB;\r\n    address private addrC;\r\n    address private addrD;\r\n    address private addrToken;\r\n    \r\n    struct Permit {\r\n        bool addrAYes;\r\n        bool addrBYes;\r\n        bool addrCYes;\r\n        bool addrDYes;\r\n    }\r\n\r\n    mapping (address => mapping (uint => Permit)) private permits;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    uint public totalSupply = 2000000000000000000000000;\r\n    uint8 constant public decimals = 4;\r\n    string constant public name = \"DGBT\";\r\n    string constant public symbol = \"DGBT\";\r\n\r\n     function approve(address spender, uint256 value) external returns (bool){\r\n         return false;\r\n     }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool){\r\n        return false;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256){\r\n          GBT token = GBT(addrToken);\r\n          return token.totalSupply();\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256){\r\n        return 0;\r\n    }\r\n\r\n    constructor(address a, address b, address c, address d, address tokenAddress) public{\r\n        addrA = a;\r\n        addrB = b;\r\n        addrC = c;\r\n        addrD = d;\r\n        addrToken = tokenAddress;\r\n    }\r\n    function getAddrs() public view returns(address, address,address,address,address) {\r\n      return (addrA, addrB,addrC,addrD,addrToken);\r\n    }\r\n    \r\n    function  transfer(address to,  uint amount)  public returns (bool){\r\n        GBT token = GBT(addrToken);\r\n        require(token.balanceOf(this) >= amount);\r\n        if (msg.sender == addrA) {\r\n            permits[to][amount].addrAYes = true;\r\n        } else if (msg.sender == addrB) {\r\n            permits[to][amount].addrBYes = true;\r\n        }else if(msg.sender == addrC){\r\n            permits[to][amount].addrCYes = true;\r\n        }else if(msg.sender == addrD){\r\n            permits[to][amount].addrDYes = true;\r\n        } else {\r\n            require(false);\r\n        }\r\n\r\n        if ((permits[to][amount].addrAYes == true && permits[to][amount].addrBYes == true&& permits[to][amount].addrCYes == true)\r\n        ||(permits[to][amount].addrAYes == true && permits[to][amount].addrBYes == true&& permits[to][amount].addrDYes == true)\r\n        ||(permits[to][amount].addrAYes == true && permits[to][amount].addrCYes == true&& permits[to][amount].addrDYes == true)\r\n        ||(permits[to][amount].addrBYes == true && permits[to][amount].addrCYes == true&& permits[to][amount].addrDYes == true)){\r\n            token.transfer(to, amount);\r\n            permits[to][amount].addrAYes = false;\r\n            permits[to][amount].addrBYes = false;\r\n            permits[to][amount].addrCYes = false;\r\n            permits[to][amount].addrDYes = false;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        GBT token = GBT(addrToken);\r\n        if (_owner==addrA || _owner==addrB || _owner==addrC || _owner==addrD){\r\n            return token.balanceOf(this);\r\n        }\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"b\",\"type\":\"address\"},{\"name\":\"c\",\"type\":\"address\"},{\"name\":\"d\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"QinWa01","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e242d4a8b80604132d6b68ae0cff1455c49ee0de000000000000000000000000027319ee23d6b3c14c08195bfcce1165975f8d1f00000000000000000000000041b59f06096562b928076927c30e441caaba1a49000000000000000000000000aeaeba75bf02019e4f1b410dd7e0101c0b3d4b280000000000000000000000006ed91fee77b1ae58b2fab0a215922e912c39ad16","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b0eccfed8066d24469b8c204b11af11230b202555424e80e5c8c22daa15025b0"}]}