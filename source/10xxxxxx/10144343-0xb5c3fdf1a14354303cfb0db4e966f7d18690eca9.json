{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n      c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\ncontract EXCH {\r\n    function distributePool(uint256 _amount) public;\r\n}\r\n\r\ncontract TEWKEN {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function isMinter(address account) public view returns (bool);\r\n    function renounceMinter() public;\r\n    function mint(address account, uint256 amount) public returns (bool);\r\n    function cap() public view returns (uint256);\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external;\r\n    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external;\r\n    function stakeCount(address stakerAddr) external view returns (uint256);\r\n    function stakeLists(address owner, uint256 stakeIndex) external view returns (uint40, uint72, uint72, uint16, uint16, uint16, bool);\r\n    function currentDay() external view returns (uint256);\r\n}\r\n\r\ncontract TransitionContract {\r\n    using SafeMath for uint256;\r\n\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n\r\n    modifier onlyCustodian() {\r\n        require(msg.sender == custodianAddress);\r\n        _;\r\n    }\r\n\r\n    event onTransform(\r\n        address indexed customerAddress,\r\n        uint256 incomingHEX,\r\n        uint256 tokensMinted,\r\n        uint256 timestamp\r\n    );\r\n\r\n    uint256 public totalMintedTewken = 0;\r\n    uint256 public totalTransformHEX = 0;\r\n\r\n    address public owner;\r\n    address public custodianAddress;\r\n    address public approvedAddress1;\r\n    address public approvedAddress2;\r\n    address public stakingAddress;\r\n\r\n    EXCH infinihex;\r\n    EXCH stakinghex;\r\n    ERC20 erc20;\r\n    TEWKEN tewken;\r\n\r\n    constructor() public {\r\n        owner = address(0x583A013373A9e91fB64CBFFA999668bEdfdcf87C);\r\n        custodianAddress = address(0x20F9b4Cf601DC667C62A73c3FF8bAFEAee4C54d0);\r\n        infinihex = EXCH(address(0x112536829069dDF8868De6F8283eA7C3cD3E6743));\r\n        erc20 = ERC20(address(0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39));\r\n        tewken = TEWKEN(address(0xb1359e949c32f2Fb61A10215e4D9a2276B0956Ce));\r\n    }\r\n\r\n    function() payable external {\r\n        revert();\r\n    }\r\n\r\n    function checkAndTransferHEX(uint256 _amount) private {\r\n        require(erc20.transferFrom(msg.sender, address(this), _amount) == true, \"transfer must succeed\");\r\n    }\r\n\r\n    function transform(uint256 _amount) public returns (uint256) {\r\n        require(_amount >= 10000 && totalTransformHEX.add(_amount) <= 1000000000e8); // minimum 0.0001 hex to transform\r\n        checkAndTransferHEX(_amount);\r\n\r\n        uint256 _scaledToken = _amount.mul(1e10).div(952);\r\n        require (_scaledToken > 0 && tewken.isMinter(address(this)) && tewken.totalSupply().add(_scaledToken) <= tewken.cap());\r\n        tewken.mint(msg.sender, _scaledToken);\r\n\r\n        totalMintedTewken += _scaledToken;\r\n        totalTransformHEX += _amount;\r\n\r\n        uint256 _externalFee = _amount.mul(10).div(100);\r\n        erc20.approve(address(0x112536829069dDF8868De6F8283eA7C3cD3E6743), _externalFee);\r\n        infinihex.distributePool(_externalFee);\r\n\r\n        emit onTransform(msg.sender, _amount, _scaledToken, now);\r\n    }\r\n\r\n    function renounceMinter() onlyOwner public {\r\n        tewken.renounceMinter();\r\n    }\r\n\r\n    function approveAddress1(address _proposedAddress) onlyOwner public\r\n    {\r\n        approvedAddress1 = _proposedAddress;\r\n    }\r\n\r\n    function approveAddress2(address _proposedAddress) onlyCustodian public\r\n    {\r\n        approvedAddress2 = _proposedAddress;\r\n    }\r\n\r\n    function setStakingAddress() onlyOwner public\r\n    {\r\n        require(approvedAddress1 != address(0) && approvedAddress1 == approvedAddress2);\r\n        stakingAddress = approvedAddress1;\r\n        stakinghex = EXCH(stakingAddress);\r\n    }\r\n\r\n    function addRewards() onlyOwner public {\r\n        require(stakingAddress != address(0));\r\n        uint256 _balance = erc20.balanceOf(address(this));\r\n        erc20.approve(stakingAddress, _balance);\r\n        stakinghex.distributePool(_balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingHEX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTransform\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"addRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedAddress\",\"type\":\"address\"}],\"name\":\"approveAddress1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedAddress\",\"type\":\"address\"}],\"name\":\"approveAddress2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvedAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvedAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodianAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setStakingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMintedTewken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTransformHEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transform\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TransitionContract","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://315587ffab48447cad432483f411d7fcd2587cff7f5847d3819e8c9469090c3a"}]}