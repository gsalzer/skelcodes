{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary LibSet_bytes4 {\r\n\tstruct set\r\n\t{\r\n\t\tbytes4[] values;\r\n\t\tmapping(bytes4 => uint256) indexes;\r\n\t}\r\n\r\n\tfunction length(set storage _set)\r\n\tinternal view returns (uint256)\r\n\t{\r\n\t\treturn _set.values.length;\r\n\t}\r\n\r\n\tfunction at(set storage _set, uint256 _index)\r\n\tinternal view returns (bytes4 )\r\n\t{\r\n\t\treturn _set.values[_index - 1];\r\n\t}\r\n\r\n\tfunction indexOf(set storage _set, bytes4  _value)\r\n\tinternal view returns (uint256)\r\n\t{\r\n\t\treturn _set.indexes[_value];\r\n\t}\r\n\r\n\tfunction contains(set storage _set, bytes4  _value)\r\n\tinternal view returns (bool)\r\n\t{\r\n\t\treturn indexOf(_set, _value) != 0;\r\n\t}\r\n\r\n\tfunction content(set storage _set)\r\n\tinternal view returns (bytes4[] memory)\r\n\t{\r\n\t\treturn _set.values;\r\n\t}\r\n\r\n\tfunction add(set storage _set, bytes4  _value)\r\n\tinternal returns (bool)\r\n\t{\r\n\t\tif (contains(_set, _value))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t_set.values.push(_value);\r\n\t\t_set.indexes[_value] = _set.values.length;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction remove(set storage _set, bytes4  _value)\r\n\tinternal returns (bool)\r\n\t{\r\n\t\tif (!contains(_set, _value))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tuint256 i    = indexOf(_set, _value);\r\n\t\tuint256 last = length(_set);\r\n\r\n\t\tif (i != last)\r\n\t\t{\r\n\t\t\tbytes4  swapValue = _set.values[last - 1];\r\n\t\t\t_set.values[i - 1] = swapValue;\r\n\t\t\t_set.indexes[swapValue] = i;\r\n\t\t}\r\n\r\n\t\tdelete _set.indexes[_value];\r\n\t\t_set.values.pop();\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction clear(set storage _set)\r\n\tinternal returns (bool)\r\n\t{\r\n\t\tfor (uint256 i = _set.values.length; i > 0; --i)\r\n\t\t{\r\n\t\t\tdelete _set.indexes[_set.values[i-1]];\r\n\t\t}\r\n\t\t_set.values = new bytes4[](0);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nlibrary LibMap2_bytes4_address_bytes {\r\n\tusing LibSet_bytes4 for LibSet_bytes4.set;\r\n\r\n\tstruct map\r\n\t{\r\n\t\tLibSet_bytes4.set keyset;\r\n\t\tmapping(bytes4 => address) values1;\r\n\t\tmapping(bytes4 => bytes) values2;\r\n\t}\r\n\r\n\tfunction length(map storage _map)\r\n\tinternal view returns (uint256)\r\n\t{\r\n\t\treturn _map.keyset.length();\r\n\t}\r\n\r\n\tfunction value1(map storage _map, bytes4  _key)\r\n\tinternal view returns (address )\r\n\t{\r\n\t\treturn _map.values1[_key];\r\n\t}\r\n\r\n\tfunction value2(map storage _map, bytes4  _key)\r\n\tinternal view returns (bytes memory)\r\n\t{\r\n\t\treturn _map.values2[_key];\r\n\t}\r\n\r\n\tfunction keyAt(map storage _map, uint256 _index)\r\n\tinternal view returns (bytes4 )\r\n\t{\r\n\t\treturn _map.keyset.at(_index);\r\n\t}\r\n\r\n\tfunction at(map storage _map, uint256 _index)\r\n\tinternal view returns (bytes4 , address , bytes memory)\r\n\t{\r\n\t\tbytes4  key = keyAt(_map, _index);\r\n\t\treturn (key, value1(_map, key), value2(_map, key));\r\n\t}\r\n\r\n\tfunction indexOf(map storage _map, bytes4  _key)\r\n\tinternal view returns (uint256)\r\n\t{\r\n\t\treturn _map.keyset.indexOf(_key);\r\n\t}\r\n\r\n\tfunction contains(map storage _map, bytes4  _key)\r\n\tinternal view returns (bool)\r\n\t{\r\n\t\treturn _map.keyset.contains(_key);\r\n\t}\r\n\r\n\tfunction keys(map storage _map)\r\n\tinternal view returns (bytes4[] memory)\r\n\t{\r\n\t\treturn _map.keyset.content();\r\n\t}\r\n\r\n\tfunction set(\r\n\t\tmap storage _map,\r\n\t\tbytes4  _key,\r\n\t\taddress  _value1,\r\n\t\tbytes memory _value2)\r\n\tinternal returns (bool)\r\n\t{\r\n\t\t_map.keyset.add(_key);\r\n\t\t_map.values1[_key] = _value1;\r\n\t\t_map.values2[_key] = _value2;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction del(map storage _map, bytes4  _key)\r\n\tinternal returns (bool)\r\n\t{\r\n\t\t_map.keyset.remove(_key);\r\n\t\tdelete _map.values1[_key];\r\n\t\tdelete _map.values2[_key];\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction clear(map storage _map)\r\n\tinternal returns (bool)\r\n\t{\r\n\t\tfor (uint256 i = _map.keyset.length(); i > 0; --i)\r\n\t\t{\r\n\t\t\tbytes4  key = keyAt(_map, i);\r\n\t\t\tdelete _map.values1[key];\r\n\t\t\tdelete _map.values2[key];\r\n\t\t}\r\n\t\t_map.keyset.clear();\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract ERC1538Store is Ownable\r\n{\r\n\tusing LibMap2_bytes4_address_bytes for LibMap2_bytes4_address_bytes.map;\r\n\r\n\tLibMap2_bytes4_address_bytes.map internal m_funcs;\r\n}\r\n\r\ncontract ERC1538Module is ERC1538Store\r\n{\r\n\tconstructor()\r\n\tpublic\r\n\t{\r\n\t\trenounceOwnership();\r\n\t}\r\n}\r\n\r\ninterface AppInterface {\r\n\tfunction owner()          external view returns (address);\r\n\tfunction m_appName()      external view returns (string memory);\r\n\tfunction m_appType()      external view returns (string memory);\r\n\tfunction m_appMultiaddr() external view returns (bytes  memory);\r\n\tfunction m_appChecksum()  external view returns (bytes32);\r\n\tfunction m_appMREnclave() external view returns (bytes  memory);\r\n}\r\n\r\ninterface DatasetInterface {\r\n\tfunction owner()              external view returns (address);\r\n\tfunction m_datasetName()      external view returns (string memory);\r\n\tfunction m_datasetMultiaddr() external view returns (bytes  memory);\r\n\tfunction m_datasetChecksum()  external view returns (bytes32);\r\n}\r\n\r\ninterface WorkerpoolInterface {\r\n\tevent PolicyUpdate(\r\n\t\tuint256 oldWorkerStakeRatioPolicy,\r\n\t\tuint256 newWorkerStakeRatioPolicy,\r\n\t\tuint256 oldSchedulerRewardRatioPolicy,\r\n\t\tuint256 newSchedulerRewardRatioPolicy);\r\n\r\n\tfunction owner()                        external view returns (address);\r\n\tfunction m_workerpoolDescription()      external view returns (string memory);\r\n\tfunction m_workerStakeRatioPolicy()     external view returns (uint256);\r\n\tfunction m_schedulerRewardRatioPolicy() external view returns (uint256);\r\n\r\n\tfunction changePolicy(\r\n\t\tuint256 _newWorkerStakeRatioPolicy,\r\n\t\tuint256 _newSchedulerRewardRatioPolicy)\r\n\texternal;\r\n}\r\n\r\ninterface AppRegistryInterface {\r\n\tevent CreateApp(address indexed appOwner, address app);\r\n\r\n\tfunction isRegistered(address _entry                ) external view returns (bool);\r\n\tfunction viewEntry   (address _owner, uint256 _index) external view returns (address);\r\n\tfunction viewCount   (address _owner                ) external view returns (uint256);\r\n\r\n\tfunction createApp(\r\n\t\taddress          _appOwner,\r\n\t\tstring  calldata _appName,\r\n\t\tstring  calldata _appType,\r\n\t\tbytes   calldata _appMultiaddr,\r\n\t\tbytes32          _appChecksum,\r\n\t\tbytes   calldata _appMREnclave)\r\n\texternal returns (AppInterface);\r\n}\r\n\r\ninterface DatasetRegistryInterface {\r\n\tevent CreateDataset(address indexed datasetOwner, address dataset);\r\n\r\n\tfunction isRegistered(address _entry                ) external view returns (bool);\r\n\tfunction viewEntry   (address _owner, uint256 _index) external view returns (address);\r\n\tfunction viewCount   (address _owner                ) external view returns (uint256);\r\n\r\n\tfunction createDataset(\r\n\t\taddress          _datasetOwner,\r\n\t\tstring  calldata _datasetName,\r\n\t\tbytes   calldata _datasetMultiaddr,\r\n\t\tbytes32          _datasetChecksum)\r\n\texternal returns (DatasetInterface);\r\n}\r\n\r\ninterface WorkerpoolRegistryInterface {\r\n\tevent CreateWorkerpool(address indexed workerpoolOwner, address indexed workerpool, string workerpoolDescription);\r\n\r\n\tfunction isRegistered(address _entry                ) external view returns (bool);\r\n\tfunction viewEntry   (address _owner, uint256 _index) external view returns (address);\r\n\tfunction viewCount   (address _owner                ) external view returns (uint256);\r\n\r\n\tfunction createWorkerpool(\r\n\t\taddress          _workerpoolOwner,\r\n\t\tstring  calldata _workerpoolDescription)\r\n\texternal returns (WorkerpoolInterface);\r\n}\r\n\r\nlibrary IexecODBLibCore {\r\n\t/**\r\n\t* Tools\r\n\t*/\r\n\tstruct Account\r\n\t{\r\n\t\tuint256 stake;\r\n\t\tuint256 locked;\r\n\t}\r\n\tstruct Category\r\n\t{\r\n\t\tstring  name;\r\n\t\tstring  description;\r\n\t\tuint256 workClockTimeRef;\r\n\t}\r\n\r\n\t/**\r\n\t * Clerk - Deals\r\n\t */\r\n\tstruct Resource\r\n\t{\r\n\t\taddress pointer;\r\n\t\taddress owner;\r\n\t\tuint256 price;\r\n\t}\r\n\tstruct Deal\r\n\t{\r\n\t\t// Ressources\r\n\t\tResource app;\r\n\t\tResource dataset;\r\n\t\tResource workerpool;\r\n\t\tuint256 trust;\r\n\t\tuint256 category;\r\n\t\tbytes32 tag;\r\n\t\t// execution details\r\n\t\taddress requester;\r\n\t\taddress beneficiary;\r\n\t\taddress callback;\r\n\t\tstring  params;\r\n\t\t// execution settings\r\n\t\tuint256 startTime;\r\n\t\tuint256 botFirst;\r\n\t\tuint256 botSize;\r\n\t\t// consistency\r\n\t\tuint256 workerStake;\r\n\t\tuint256 schedulerRewardRatio;\r\n\t}\r\n\r\n\t/**\r\n\t * Tasks\r\n\t // TODO: rename Workorder → Task\r\n\t */\r\n\tenum TaskStatusEnum\r\n\t{\r\n\t\tUNSET,     // Work order not yet initialized (invalid address)\r\n\t\tACTIVE,    // Marketed → constributions are open\r\n\t\tREVEALING, // Starting consensus reveal\r\n\t\tCOMPLETED, // Concensus achieved\r\n\t\tFAILLED    // Failled consensus\r\n\t}\r\n\tstruct Task\r\n\t{\r\n\t\tTaskStatusEnum status;\r\n\t\tbytes32   dealid;\r\n\t\tuint256   idx;\r\n\t\tuint256   timeref;\r\n\t\tuint256   contributionDeadline;\r\n\t\tuint256   revealDeadline;\r\n\t\tuint256   finalDeadline;\r\n\t\tbytes32   consensusValue;\r\n\t\tuint256   revealCounter;\r\n\t\tuint256   winnerCounter;\r\n\t\taddress[] contributors;\r\n\t\tbytes32   resultDigest;\r\n\t\tbytes     results;\r\n\t}\r\n\r\n\t/**\r\n\t * Consensus\r\n\t */\r\n\tenum ContributionStatusEnum\r\n\t{\r\n\t\tUNSET,\r\n\t\tCONTRIBUTED,\r\n\t\tPROVED,\r\n\t\tREJECTED\r\n\t}\r\n\tstruct Contribution\r\n\t{\r\n\t\tContributionStatusEnum status;\r\n\t\tbytes32 resultHash;\r\n\t\tbytes32 resultSeal;\r\n\t\taddress enclaveChallenge;\r\n\t}\r\n\r\n}\r\n\r\nlibrary IexecODBLibOrders {\r\n\t// bytes32 public constant    EIP712DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n\t// bytes32 public constant        APPORDER_TYPEHASH = keccak256(\"AppOrder(address app,uint256 appprice,uint256 volume,bytes32 tag,address datasetrestrict,address workerpoolrestrict,address requesterrestrict,bytes32 salt)\");\r\n\t// bytes32 public constant    DATASETORDER_TYPEHASH = keccak256(\"DatasetOrder(address dataset,uint256 datasetprice,uint256 volume,bytes32 tag,address apprestrict,address workerpoolrestrict,address requesterrestrict,bytes32 salt)\");\r\n\t// bytes32 public constant WORKERPOOLORDER_TYPEHASH = keccak256(\"WorkerpoolOrder(address workerpool,uint256 workerpoolprice,uint256 volume,bytes32 tag,uint256 category,uint256 trust,address apprestrict,address datasetrestrict,address requesterrestrict,bytes32 salt)\");\r\n\t// bytes32 public constant    REQUESTORDER_TYPEHASH = keccak256(\"RequestOrder(address app,uint256 appmaxprice,address dataset,uint256 datasetmaxprice,address workerpool,uint256 workerpoolmaxprice,address requester,uint256 volume,bytes32 tag,uint256 category,uint256 trust,address beneficiary,address callback,string params,bytes32 salt)\");\r\n\tbytes32 public constant    EIP712DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\r\n\tbytes32 public constant        APPORDER_TYPEHASH = 0x60815a0eeec47dddf1615fe53b31d016c31444e01b9d796db365443a6445d008;\r\n\tbytes32 public constant    DATASETORDER_TYPEHASH = 0x6cfc932a5a3d22c4359295b9f433edff52b60703fa47690a04a83e40933dd47c;\r\n\tbytes32 public constant WORKERPOOLORDER_TYPEHASH = 0xaa3429fb281b34691803133d3d978a75bb77c617ed6bc9aa162b9b30920022bb;\r\n\tbytes32 public constant    REQUESTORDER_TYPEHASH = 0xf24e853034a3a450aba845a82914fbb564ad85accca6cf62be112a154520fae0;\r\n\r\n\tstruct EIP712Domain\r\n\t{\r\n\t\tstring  name;\r\n\t\tstring  version;\r\n\t\tuint256 chainId;\r\n\t\taddress verifyingContract;\r\n\t}\r\n\tstruct AppOrder\r\n\t{\r\n\t\taddress app;\r\n\t\tuint256 appprice;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\taddress datasetrestrict;\r\n\t\taddress workerpoolrestrict;\r\n\t\taddress requesterrestrict;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\tstruct DatasetOrder\r\n\t{\r\n\t\taddress dataset;\r\n\t\tuint256 datasetprice;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\taddress apprestrict;\r\n\t\taddress workerpoolrestrict;\r\n\t\taddress requesterrestrict;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\tstruct WorkerpoolOrder\r\n\t{\r\n\t\taddress workerpool;\r\n\t\tuint256 workerpoolprice;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\tuint256 category;\r\n\t\tuint256 trust;\r\n\t\taddress apprestrict;\r\n\t\taddress datasetrestrict;\r\n\t\taddress requesterrestrict;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\tstruct RequestOrder\r\n\t{\r\n\t\taddress app;\r\n\t\tuint256 appmaxprice;\r\n\t\taddress dataset;\r\n\t\tuint256 datasetmaxprice;\r\n\t\taddress workerpool;\r\n\t\tuint256 workerpoolmaxprice;\r\n\t\taddress requester;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\tuint256 category;\r\n\t\tuint256 trust;\r\n\t\taddress beneficiary;\r\n\t\taddress callback;\r\n\t\tstring  params;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\r\n\tfunction hash(EIP712Domain memory _domain)\r\n\tpublic pure returns (bytes32 domainhash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\t// return keccak256(abi.encode(\r\n\t\t// \tEIP712DOMAIN_TYPEHASH\r\n\t\t// , keccak256(bytes(_domain.name))\r\n\t\t// , keccak256(bytes(_domain.version))\r\n\t\t// , _domain.chainId\r\n\t\t// , _domain.verifyingContract\r\n\t\t// ));\r\n\r\n\t\t// Compute sub-hashes\r\n\t\tbytes32 typeHash    = EIP712DOMAIN_TYPEHASH;\r\n\t\tbytes32 nameHash    = keccak256(bytes(_domain.name));\r\n\t\tbytes32 versionHash = keccak256(bytes(_domain.version));\r\n\t\tassembly {\r\n\t\t\t// Back up select memory\r\n\t\t\tlet temp1 := mload(sub(_domain, 0x20))\r\n\t\t\tlet temp2 := mload(add(_domain, 0x00))\r\n\t\t\tlet temp3 := mload(add(_domain, 0x20))\r\n\t\t\t// Write typeHash and sub-hashes\r\n\t\t\tmstore(sub(_domain, 0x20),    typeHash)\r\n\t\t\tmstore(add(_domain, 0x00),    nameHash)\r\n\t\t\tmstore(add(_domain, 0x20), versionHash)\r\n\t\t\t// Compute hash\r\n\t\t\tdomainhash := keccak256(sub(_domain, 0x20), 0xA0) // 160 = 32 + 128\r\n\t\t\t// Restore memory\r\n\t\t\tmstore(sub(_domain, 0x20), temp1)\r\n\t\t\tmstore(add(_domain, 0x00), temp2)\r\n\t\t\tmstore(add(_domain, 0x20), temp3)\r\n\t\t}\r\n\t}\r\n\tfunction hash(AppOrder memory _apporder)\r\n\tpublic pure returns (bytes32 apphash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\t// return keccak256(abi.encode(\r\n\t\t// \tAPPORDER_TYPEHASH\r\n\t\t// , _apporder.app\r\n\t\t// , _apporder.appprice\r\n\t\t// , _apporder.volume\r\n\t\t// , _apporder.tag\r\n\t\t// , _apporder.datasetrestrict\r\n\t\t// , _apporder.workerpoolrestrict\r\n\t\t// , _apporder.requesterrestrict\r\n\t\t// , _apporder.salt\r\n\t\t// ));\r\n\r\n\t\t// Compute sub-hashes\r\n\t\tbytes32 typeHash = APPORDER_TYPEHASH;\r\n\t\tassembly {\r\n\t\t\t// Back up select memory\r\n\t\t\tlet temp1 := mload(sub(_apporder, 0x20))\r\n\t\t\t// Write typeHash and sub-hashes\r\n\t\t\tmstore(sub(_apporder, 0x20), typeHash)\r\n\t\t\t// Compute hash\r\n\t\t\tapphash := keccak256(sub(_apporder, 0x20), 0x120) // 288 = 32 + 256\r\n\t\t\t// Restore memory\r\n\t\t\tmstore(sub(_apporder, 0x20), temp1)\r\n\t\t}\r\n\t}\r\n\tfunction hash(DatasetOrder memory _datasetorder)\r\n\tpublic pure returns (bytes32 datasethash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\t// return keccak256(abi.encode(\r\n\t\t// \tDATASETORDER_TYPEHASH\r\n\t\t// , _datasetorder.dataset\r\n\t\t// , _datasetorder.datasetprice\r\n\t\t// , _datasetorder.volume\r\n\t\t// , _datasetorder.tag\r\n\t\t// , _datasetorder.apprestrict\r\n\t\t// , _datasetorder.workerpoolrestrict\r\n\t\t// , _datasetorder.requesterrestrict\r\n\t\t// , _datasetorder.salt\r\n\t\t// ));\r\n\r\n\t\t// Compute sub-hashes\r\n\t\tbytes32 typeHash = DATASETORDER_TYPEHASH;\r\n\t\tassembly {\r\n\t\t\t// Back up select memory\r\n\t\t\tlet temp1 := mload(sub(_datasetorder, 0x20))\r\n\t\t\t// Write typeHash and sub-hashes\r\n\t\t\tmstore(sub(_datasetorder, 0x20), typeHash)\r\n\t\t\t// Compute hash\r\n\t\t\tdatasethash := keccak256(sub(_datasetorder, 0x20), 0x120) // 288 = 32 + 256\r\n\t\t\t// Restore memory\r\n\t\t\tmstore(sub(_datasetorder, 0x20), temp1)\r\n\t\t}\r\n\t}\r\n\tfunction hash(WorkerpoolOrder memory _workerpoolorder)\r\n\tpublic pure returns (bytes32 workerpoolhash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\t// return keccak256(abi.encode(\r\n\t\t// \tWORKERPOOLORDER_TYPEHASH\r\n\t\t// , _workerpoolorder.workerpool\r\n\t\t// , _workerpoolorder.workerpoolprice\r\n\t\t// , _workerpoolorder.volume\r\n\t\t// , _workerpoolorder.tag\r\n\t\t// , _workerpoolorder.category\r\n\t\t// , _workerpoolorder.trust\r\n\t\t// , _workerpoolorder.apprestrict\r\n\t\t// , _workerpoolorder.datasetrestrict\r\n\t\t// , _workerpoolorder.requesterrestrict\r\n\t\t// , _workerpoolorder.salt\r\n\t\t// ));\r\n\r\n\t\t// Compute sub-hashes\r\n\t\tbytes32 typeHash = WORKERPOOLORDER_TYPEHASH;\r\n\t\tassembly {\r\n\t\t\t// Back up select memory\r\n\t\t\tlet temp1 := mload(sub(_workerpoolorder, 0x20))\r\n\t\t\t// Write typeHash and sub-hashes\r\n\t\t\tmstore(sub(_workerpoolorder, 0x20), typeHash)\r\n\t\t\t// Compute hash\r\n\t\t\tworkerpoolhash := keccak256(sub(_workerpoolorder, 0x20), 0x160) // 352 = 32 + 320\r\n\t\t\t// Restore memory\r\n\t\t\tmstore(sub(_workerpoolorder, 0x20), temp1)\r\n\t\t}\r\n\t}\r\n\tfunction hash(RequestOrder memory _requestorder)\r\n\tpublic pure returns (bytes32 requesthash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\t//return keccak256(abi.encodePacked(\r\n\t\t//\tabi.encode(\r\n\t\t//\t\tREQUESTORDER_TYPEHASH\r\n\t\t//\t, _requestorder.app\r\n\t\t//\t, _requestorder.appmaxprice\r\n\t\t//\t, _requestorder.dataset\r\n\t\t//\t, _requestorder.datasetmaxprice\r\n\t\t//\t, _requestorder.workerpool\r\n\t\t//\t, _requestorder.workerpoolmaxprice\r\n\t\t//\t, _requestorder.requester\r\n\t\t//\t, _requestorder.volume\r\n\t\t//\t, _requestorder.tag\r\n\t\t//\t, _requestorder.category\r\n\t\t//\t, _requestorder.trust\r\n\t\t//\t, _requestorder.beneficiary\r\n\t\t//\t, _requestorder.callback\r\n\t\t//\t, keccak256(bytes(_requestorder.params))\r\n\t\t//\t, _requestorder.salt\r\n\t\t//\t)\r\n\t\t//));\r\n\r\n\t\t// Compute sub-hashes\r\n\t\tbytes32 typeHash = REQUESTORDER_TYPEHASH;\r\n\t\tbytes32 paramsHash = keccak256(bytes(_requestorder.params));\r\n\t\tassembly {\r\n\t\t\t// Back up select memory\r\n\t\t\tlet temp1 := mload(sub(_requestorder, 0x020))\r\n\t\t\tlet temp2 := mload(add(_requestorder, 0x1A0))\r\n\t\t\t// Write typeHash and sub-hashes\r\n\t\t\tmstore(sub(_requestorder, 0x020), typeHash)\r\n\t\t\tmstore(add(_requestorder, 0x1A0), paramsHash)\r\n\t\t\t// Compute hash\r\n\t\t\trequesthash := keccak256(sub(_requestorder, 0x20), 0x200) // 512 = 32 + 480\r\n\t\t\t// Restore memory\r\n\t\t\tmstore(sub(_requestorder, 0x020), temp1)\r\n\t\t\tmstore(add(_requestorder, 0x1A0), temp2)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction toEthTypedStructHash(bytes32 _structHash, bytes32 _domainHash)\r\n\tpublic pure returns (bytes32 typedStructHash)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19\\x01\", _domainHash, _structHash));\r\n\t}\r\n}\r\n\r\ninterface IexecClerkInterface {\r\n\t/***************************************************************************\r\n\t *                                 ESCROW                                  *\r\n\t ***************************************************************************/\r\n\tevent Deposit   (address owner, uint256 amount);\r\n\tevent DepositFor(address owner, uint256 amount, address target);\r\n\tevent Withdraw  (address owner, uint256 amount);\r\n\tevent Reward    (address user,  uint256 amount, bytes32 ref);\r\n\tevent Seize     (address user,  uint256 amount, bytes32 ref);\r\n\tevent Lock      (address user,  uint256 amount);\r\n\tevent Unlock    (address user,  uint256 amount);\r\n\r\n\tfunction token()                                                                   external view returns (address);\r\n\tfunction viewAccount    (address _user)                                            external view returns (IexecODBLibCore.Account memory account);\r\n\tfunction deposit        (uint256 _amount)                                          external returns (bool);\r\n\tfunction depositFor     (uint256 _amount, address _target)                         external returns (bool);\r\n\tfunction depositForArray(uint256[] calldata _amounts, address[] calldata _targets) external returns (bool);\r\n\tfunction withdraw       (uint256 _amount)                                          external returns (bool);\r\n\r\n\t/***************************************************************************\r\n\t *                                  RELAY                                  *\r\n\t ***************************************************************************/\r\n\tevent BroadcastAppOrder       (IexecODBLibOrders.AppOrder        apporder       );\r\n\tevent BroadcastDatasetOrder   (IexecODBLibOrders.DatasetOrder    datasetorder   );\r\n\tevent BroadcastWorkerpoolOrder(IexecODBLibOrders.WorkerpoolOrder workerpoolorder);\r\n\tevent BroadcastRequestOrder   (IexecODBLibOrders.RequestOrder    requestorder   );\r\n\r\n\tfunction broadcastAppOrder       (IexecODBLibOrders.AppOrder        calldata _apporder       ) external;\r\n\tfunction broadcastDatasetOrder   (IexecODBLibOrders.DatasetOrder    calldata _datasetorder   ) external;\r\n\tfunction broadcastWorkerpoolOrder(IexecODBLibOrders.WorkerpoolOrder calldata _workerpoolorder) external;\r\n\tfunction broadcastRequestOrder   (IexecODBLibOrders.RequestOrder    calldata _requestorder   ) external;\r\n\r\n\t/***************************************************************************\r\n\t *                                IEXECHUB                                 *\r\n\t ***************************************************************************/\r\n\tevent OrdersMatched        (bytes32 dealid, bytes32 appHash, bytes32 datasetHash, bytes32 workerpoolHash, bytes32 requestHash, uint256 volume);\r\n\tevent ClosedAppOrder       (bytes32 appHash);\r\n\tevent ClosedDatasetOrder   (bytes32 datasetHash);\r\n\tevent ClosedWorkerpoolOrder(bytes32 workerpoolHash);\r\n\tevent ClosedRequestOrder   (bytes32 requestHash);\r\n\tevent SchedulerNotice      (address indexed workerpool, bytes32 dealid);\r\n\r\n\tfunction WORKERPOOL_STAKE_RATIO() external view returns (uint256);\r\n\tfunction KITTY_RATIO           () external view returns (uint256);\r\n\tfunction KITTY_MIN             () external view returns (uint256);\r\n\tfunction GROUPMEMBER_PURPOSE   () external view returns (uint256);\r\n\tfunction EIP712DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction iexechub              () external view returns (address);\r\n\r\n\tfunction viewRequestDeals(bytes32 _id) external view returns (bytes32[] memory requestdeals);\r\n\tfunction viewDeal        (bytes32 _id) external view returns (IexecODBLibCore.Deal memory deal);\r\n\tfunction viewConsumed    (bytes32 _id) external view returns (uint256 consumed);\r\n\tfunction viewPresigned   (bytes32 _id) external view returns (bool presigned);\r\n\r\n  function verifySignature(address _identity, bytes32 _hash, bytes calldata _signature) external view returns (bool);\r\n\r\n\tfunction signAppOrder       (IexecODBLibOrders.AppOrder        calldata _apporder       ) external returns (bool);\r\n\tfunction signDatasetOrder   (IexecODBLibOrders.DatasetOrder    calldata _datasetorder   ) external returns (bool);\r\n\tfunction signWorkerpoolOrder(IexecODBLibOrders.WorkerpoolOrder calldata _workerpoolorder) external returns (bool);\r\n\tfunction signRequestOrder   (IexecODBLibOrders.RequestOrder    calldata _requestorder   ) external returns (bool);\r\n\r\n\tfunction cancelAppOrder       (IexecODBLibOrders.AppOrder        calldata _apporder       ) external returns (bool);\r\n\tfunction cancelDatasetOrder   (IexecODBLibOrders.DatasetOrder    calldata _datasetorder   ) external returns (bool);\r\n\tfunction cancelWorkerpoolOrder(IexecODBLibOrders.WorkerpoolOrder calldata _workerpoolorder) external returns (bool);\r\n\tfunction cancelRequestOrder   (IexecODBLibOrders.RequestOrder    calldata _requestorder   ) external returns (bool);\r\n\r\n\tfunction matchOrders(\r\n\t\tIexecODBLibOrders.AppOrder        calldata _apporder,\r\n\t\tIexecODBLibOrders.DatasetOrder    calldata _datasetorder,\r\n\t\tIexecODBLibOrders.WorkerpoolOrder calldata _workerpoolorder,\r\n\t\tIexecODBLibOrders.RequestOrder    calldata _requestorder)\r\n\texternal returns (bytes32);\r\n\r\n\tfunction viewDealABILegacy_pt1(bytes32 _id)\r\n\texternal view returns\r\n\t( address\r\n\t, address\r\n\t, uint256\r\n\t, address\r\n\t, address\r\n\t, uint256\r\n\t, address\r\n\t, address\r\n\t, uint256\r\n\t);\r\n\r\n\tfunction viewDealABILegacy_pt2(bytes32 _id)\r\n\texternal view returns\r\n\t( uint256\r\n\t, bytes32\r\n\t, address\r\n\t, address\r\n\t, address\r\n\t, string memory\r\n\t);\r\n\r\n\tfunction viewConfigABILegacy(bytes32 _id)\r\n\texternal view returns\r\n\t( uint256\r\n\t, uint256\r\n\t, uint256\r\n\t, uint256\r\n\t, uint256\r\n\t, uint256\r\n\t);\r\n\r\n\tfunction viewAccountABILegacy(address _user)\r\n\texternal view returns (uint256, uint256);\r\n}\r\n\r\ninterface IexecHubInterface {\r\n\t/***************************************************************************\r\n\t *                            CATEGORY MANAGER                             *\r\n\t ***************************************************************************/\r\n\tevent CreateCategory(\r\n\t\tuint256 catid,\r\n\t\tstring  name,\r\n\t\tstring  description,\r\n\t\tuint256 workClockTimeRef);\r\n\r\n\tfunction viewCategory(\r\n\t\tuint256 _catid)\r\n\texternal view returns (IexecODBLibCore.Category memory category);\r\n\r\n\tfunction countCategory()\r\n\texternal view returns (uint256 count);\r\n\r\n\tfunction createCategory(\r\n\t\tstring  calldata name,\r\n\t\tstring  calldata description,\r\n\t\tuint256          workClockTimeRef)\r\n\texternal returns (uint256);\r\n\r\n\t/***************************************************************************\r\n\t *                                IEXECHUB                                 *\r\n\t ***************************************************************************/\r\n\tevent TaskInitialize(bytes32 indexed taskid, address indexed workerpool               );\r\n\tevent TaskContribute(bytes32 indexed taskid, address indexed worker, bytes32 hash     );\r\n\tevent TaskConsensus (bytes32 indexed taskid,                         bytes32 consensus);\r\n\tevent TaskReveal    (bytes32 indexed taskid, address indexed worker, bytes32 digest   );\r\n\tevent TaskReopen    (bytes32 indexed taskid                                           );\r\n\tevent TaskFinalize  (bytes32 indexed taskid,                         bytes results    );\r\n\tevent TaskClaimed   (bytes32 indexed taskid                                           );\r\n\r\n\tevent AccurateContribution(address indexed worker, bytes32 indexed taskid);\r\n\tevent FaultyContribution  (address indexed worker, bytes32 indexed taskid);\r\n\r\n\tfunction CONSENSUS_DURATION_RATIO() external view returns (uint256);\r\n\tfunction REVEAL_DURATION_RATIO   () external view returns (uint256);\r\n\tfunction iexecclerk              () external view returns (IexecClerkInterface);\r\n\tfunction appregistry             () external view returns (AppRegistryInterface);\r\n\tfunction datasetregistry         () external view returns (DatasetRegistryInterface);\r\n\tfunction workerpoolregistry      () external view returns (WorkerpoolRegistryInterface);\r\n\r\n\tfunction attachContracts(\r\n\t\taddress _iexecclerkAddress,\r\n\t\taddress _appregistryAddress,\r\n\t\taddress _datasetregistryAddress,\r\n\t\taddress _workerpoolregistryAddress)\r\n\texternal;\r\n\r\n\tfunction viewTask(\r\n\t\tbytes32 _taskid)\r\n\texternal view returns (IexecODBLibCore.Task memory);\r\n\r\n\tfunction viewContribution(\r\n\t\tbytes32 _taskid,\r\n\t\taddress _worker)\r\n\texternal view returns (IexecODBLibCore.Contribution memory);\r\n\r\n\tfunction viewScore(\r\n\t\taddress _worker)\r\n\texternal view returns (uint256);\r\n\r\n\tfunction checkResources(\r\n\t\taddress app,\r\n\t\taddress dataset,\r\n\t\taddress workerpool)\r\n\texternal view returns (bool);\r\n\r\n\tfunction resultFor(\r\n\t\tbytes32 id)\r\n\texternal view returns (bytes memory);\r\n\r\n\tfunction initialize(\r\n\t\tbytes32 _dealid,\r\n\t\tuint256 idx)\r\n\texternal returns (bytes32);\r\n\r\n\tfunction contribute(\r\n\t\tbytes32        _taskid,\r\n\t\tbytes32        _resultHash,\r\n\t\tbytes32        _resultSeal,\r\n\t\taddress        _enclaveChallenge,\r\n\t\tbytes calldata _enclaveSign,\r\n\t\tbytes calldata _workerpoolSign)\r\n\texternal;\r\n\r\n\tfunction reveal(\r\n\t\tbytes32 _taskid,\r\n\t\tbytes32 _resultDigest)\r\n\texternal;\r\n\r\n\tfunction reopen(\r\n\t\tbytes32 _taskid)\r\n\texternal;\r\n\r\n\tfunction finalize(\r\n\t\tbytes32 _taskid,\r\n\t\tbytes calldata  _results)\r\n\texternal;\r\n\r\n\tfunction claim(\r\n\t\tbytes32 _taskid)\r\n\texternal;\r\n\r\n\tfunction initializeArray(\r\n\t\tbytes32[] calldata _dealid,\r\n\t\tuint256[] calldata _idx)\r\n\texternal returns (bool);\r\n\r\n\tfunction claimArray(\r\n\t\tbytes32[] calldata _taskid)\r\n\texternal returns (bool);\r\n\r\n\tfunction initializeAndClaimArray(\r\n\t\tbytes32[] calldata _dealid,\r\n\t\tuint256[] calldata _idx)\r\n\texternal returns (bool);\r\n\r\n\tfunction viewTaskABILegacy(bytes32 _taskid)\r\n\texternal view returns\r\n\t( IexecODBLibCore.TaskStatusEnum\r\n\t, bytes32\r\n\t, uint256\r\n\t, uint256\r\n\t, uint256\r\n\t, uint256\r\n\t, uint256\r\n\t, bytes32\r\n\t, uint256\r\n\t, uint256\r\n\t, address[] memory\r\n\t, bytes     memory\r\n\t);\r\n\r\n\tfunction viewContributionABILegacy(bytes32 _taskid, address _worker)\r\n\texternal view returns\r\n\t( IexecODBLibCore.ContributionStatusEnum\r\n\t, bytes32\r\n\t, bytes32\r\n\t, address\r\n\t);\r\n\r\n\tfunction viewCategoryABILegacy(uint256 _catid)\r\n\texternal view returns (string memory, string memory, uint256);\r\n}\r\n\r\n/**\r\n * @title SafeMathExtended\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathExtended {\r\n\t/**\r\n\t* @dev Adds two unsigned integers, reverts on overflow.\r\n\t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Multiplies two unsigned integers, reverts on overflow.\r\n\t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n\t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\t\trequire(b > 0);\r\n\t\t\tuint256 c = a / b;\r\n\t\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n\t* reverts when dividing by zero.\r\n\t*/\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\trequire(b != 0);\r\n\t\treturn a % b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the largest of two numbers.\r\n\t*/\r\n\tfunction max(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the smallest of two numbers.\r\n\t*/\r\n\tfunction min(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Multiplies the a by the fraction b/c\r\n\t*/\r\n\tfunction mulByFraction(uint256 a, uint256 b, uint256 c) internal pure returns (uint256)\r\n\t{\r\n\t\treturn div(mul(a, b), c);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Return b percents of a (equivalent to a percents of b)\r\n\t*/\r\n\tfunction percentage(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn mulByFraction(a, b, 100);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the base 2 log of x\r\n\t* @notice Source : https://ethereum.stackexchange.com/questions/8086/logarithm-math-operation-in-solidity\r\n\t*/\r\n\tfunction log(uint x) internal pure returns (uint y)\r\n\t{\r\n\t\tassembly\r\n\t\t{\r\n\t\t\tlet arg := x\r\n\t\t\tx := sub(x,1)\r\n\t\t\tx := or(x, div(x, 0x02))\r\n\t\t\tx := or(x, div(x, 0x04))\r\n\t\t\tx := or(x, div(x, 0x10))\r\n\t\t\tx := or(x, div(x, 0x100))\r\n\t\t\tx := or(x, div(x, 0x10000))\r\n\t\t\tx := or(x, div(x, 0x100000000))\r\n\t\t\tx := or(x, div(x, 0x10000000000000000))\r\n\t\t\tx := or(x, div(x, 0x100000000000000000000000000000000))\r\n\t\t\tx := add(x, 1)\r\n\t\t\tlet m := mload(0x40)\r\n\t\t\tmstore(m,           0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\r\n\t\t\tmstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\r\n\t\t\tmstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\r\n\t\t\tmstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\r\n\t\t\tmstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\r\n\t\t\tmstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\r\n\t\t\tmstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\r\n\t\t\tmstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\r\n\t\t\tmstore(0x40, add(m, 0x100))\r\n\t\t\tlet magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\r\n\t\t\tlet shift := 0x100000000000000000000000000000000000000000000000000000000000000\r\n\t\t\tlet a := div(mul(x, magic), shift)\r\n\t\t\ty := div(mload(add(m,sub(255,a))), shift)\r\n\t\t\ty := add(y, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary IexecLibCore_v5 {\r\n\t/**\r\n\t* Tools\r\n\t*/\r\n\tstruct Account\r\n\t{\r\n\t\tuint256 stake;\r\n\t\tuint256 locked;\r\n\t}\r\n\tstruct Category\r\n\t{\r\n\t\tstring  name;\r\n\t\tstring  description;\r\n\t\tuint256 workClockTimeRef;\r\n\t}\r\n\r\n\t/**\r\n\t * Clerk - Deals\r\n\t */\r\n\tstruct Resource\r\n\t{\r\n\t\taddress pointer;\r\n\t\taddress owner;\r\n\t\tuint256 price;\r\n\t}\r\n\tstruct Deal\r\n\t{\r\n\t\t// Ressources\r\n\t\tResource app;\r\n\t\tResource dataset;\r\n\t\tResource workerpool;\r\n\t\tuint256 trust;\r\n\t\tuint256 category;\r\n\t\tbytes32 tag;\r\n\t\t// execution details\r\n\t\taddress requester;\r\n\t\taddress beneficiary;\r\n\t\taddress callback;\r\n\t\tstring  params;\r\n\t\t// execution settings\r\n\t\tuint256 startTime;\r\n\t\tuint256 botFirst;\r\n\t\tuint256 botSize;\r\n\t\t// consistency\r\n\t\tuint256 workerStake;\r\n\t\tuint256 schedulerRewardRatio;\r\n\t}\r\n\r\n\t/**\r\n\t * Tasks\r\n\t */\r\n\tenum TaskStatusEnum\r\n\t{\r\n\t\tUNSET,     // Work order not yet initialized (invalid address)\r\n\t\tACTIVE,    // Marketed → constributions are open\r\n\t\tREVEALING, // Starting consensus reveal\r\n\t\tCOMPLETED, // Consensus achieved\r\n\t\tFAILED     // Failed consensus\r\n\t}\r\n\tstruct Task\r\n\t{\r\n\t\tTaskStatusEnum status;\r\n\t\tbytes32   dealid;\r\n\t\tuint256   idx;\r\n\t\tuint256   timeref;\r\n\t\tuint256   contributionDeadline;\r\n\t\tuint256   revealDeadline;\r\n\t\tuint256   finalDeadline;\r\n\t\tbytes32   consensusValue;\r\n\t\tuint256   revealCounter;\r\n\t\tuint256   winnerCounter;\r\n\t\taddress[] contributors;\r\n\t\tbytes32   resultDigest;\r\n\t\tbytes     results;\r\n\t\tuint256   resultsTimestamp;\r\n\t\tbytes     resultsCallback; // Expansion - result separation\r\n\t}\r\n\r\n\t/**\r\n\t * Consensus\r\n\t */\r\n\tstruct Consensus\r\n\t{\r\n\t\tmapping(bytes32 => uint256) group;\r\n\t\tuint256                     total;\r\n\t}\r\n\r\n\t/**\r\n\t * Consensus\r\n\t */\r\n\tenum ContributionStatusEnum\r\n\t{\r\n\t\tUNSET,\r\n\t\tCONTRIBUTED,\r\n\t\tPROVED,\r\n\t\tREJECTED\r\n\t}\r\n\tstruct Contribution\r\n\t{\r\n\t\tContributionStatusEnum status;\r\n\t\tbytes32 resultHash;\r\n\t\tbytes32 resultSeal;\r\n\t\taddress enclaveChallenge;\r\n\t\tuint256 weight;\r\n\t}\r\n\r\n}\r\n\r\nlibrary IexecLibOrders_v5 {\r\n\t// bytes32 public constant             EIP712DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\r\n\t// bytes32 public constant                 APPORDER_TYPEHASH = keccak256('AppOrder(address app,uint256 appprice,uint256 volume,bytes32 tag,address datasetrestrict,address workerpoolrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant             DATASETORDER_TYPEHASH = keccak256('DatasetOrder(address dataset,uint256 datasetprice,uint256 volume,bytes32 tag,address apprestrict,address workerpoolrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant          WORKERPOOLORDER_TYPEHASH = keccak256('WorkerpoolOrder(address workerpool,uint256 workerpoolprice,uint256 volume,bytes32 tag,uint256 category,uint256 trust,address apprestrict,address datasetrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant             REQUESTORDER_TYPEHASH = keccak256('RequestOrder(address app,uint256 appmaxprice,address dataset,uint256 datasetmaxprice,address workerpool,uint256 workerpoolmaxprice,address requester,uint256 volume,bytes32 tag,uint256 category,uint256 trust,address beneficiary,address callback,string params,bytes32 salt)');\r\n\t// bytes32 public constant        APPORDEROPERATION_TYPEHASH = keccak256('AppOrderOperation(AppOrder order,uint256 operation)AppOrder(address app,uint256 appprice,uint256 volume,bytes32 tag,address datasetrestrict,address workerpoolrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant    DATASETORDEROPERATION_TYPEHASH = keccak256('DatasetOrderOperation(DatasetOrder order,uint256 operation)DatasetOrder(address dataset,uint256 datasetprice,uint256 volume,bytes32 tag,address apprestrict,address workerpoolrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant WORKERPOOLORDEROPERATION_TYPEHASH = keccak256('WorkerpoolOrderOperation(WorkerpoolOrder order,uint256 operation)WorkerpoolOrder(address workerpool,uint256 workerpoolprice,uint256 volume,bytes32 tag,uint256 category,uint256 trust,address apprestrict,address datasetrestrict,address requesterrestrict,bytes32 salt)');\r\n\t// bytes32 public constant    REQUESTORDEROPERATION_TYPEHASH = keccak256('RequestOrderOperation(RequestOrder order,uint256 operation)RequestOrder(address app,uint256 appmaxprice,address dataset,uint256 datasetmaxprice,address workerpool,uint256 workerpoolmaxprice,address requester,uint256 volume,bytes32 tag,uint256 category,uint256 trust,address beneficiary,address callback,string params,bytes32 salt)');\r\n\tbytes32 public constant             EIP712DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\r\n\tbytes32 public constant                 APPORDER_TYPEHASH = 0x60815a0eeec47dddf1615fe53b31d016c31444e01b9d796db365443a6445d008;\r\n\tbytes32 public constant             DATASETORDER_TYPEHASH = 0x6cfc932a5a3d22c4359295b9f433edff52b60703fa47690a04a83e40933dd47c;\r\n\tbytes32 public constant          WORKERPOOLORDER_TYPEHASH = 0xaa3429fb281b34691803133d3d978a75bb77c617ed6bc9aa162b9b30920022bb;\r\n\tbytes32 public constant             REQUESTORDER_TYPEHASH = 0xf24e853034a3a450aba845a82914fbb564ad85accca6cf62be112a154520fae0;\r\n\tbytes32 public constant        APPORDEROPERATION_TYPEHASH = 0x0638bb0702457e2b4b01be8a202579b8bf97e587fb4f2cc4d4aad01f21a06ee0;\r\n\tbytes32 public constant    DATASETORDEROPERATION_TYPEHASH = 0x075eb6f7578ff4292c241bd2484cd5c1d5e6ecc2ddd3317e1d8176b5a45865ec;\r\n\tbytes32 public constant WORKERPOOLORDEROPERATION_TYPEHASH = 0x322d980b7d7a6a1f7c39ff0c5445da6ae1d8e0393ff0dd468c8be3e2c8644388;\r\n\tbytes32 public constant    REQUESTORDEROPERATION_TYPEHASH = 0x0ded7b52c2d77595a40d242eca751df172b18e686326dbbed3f4748828af77c7;\r\n\r\n\tenum OrderOperationEnum\r\n\t{\r\n\t\tSIGN,\r\n\t\tCLOSE\r\n\t}\r\n\r\n\tstruct EIP712Domain\r\n\t{\r\n\t\tstring  name;\r\n\t\tstring  version;\r\n\t\tuint256 chainId;\r\n\t\taddress verifyingContract;\r\n\t}\r\n\r\n\tstruct AppOrder\r\n\t{\r\n\t\taddress app;\r\n\t\tuint256 appprice;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\taddress datasetrestrict;\r\n\t\taddress workerpoolrestrict;\r\n\t\taddress requesterrestrict;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\r\n\tstruct DatasetOrder\r\n\t{\r\n\t\taddress dataset;\r\n\t\tuint256 datasetprice;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\taddress apprestrict;\r\n\t\taddress workerpoolrestrict;\r\n\t\taddress requesterrestrict;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\r\n\tstruct WorkerpoolOrder\r\n\t{\r\n\t\taddress workerpool;\r\n\t\tuint256 workerpoolprice;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\tuint256 category;\r\n\t\tuint256 trust;\r\n\t\taddress apprestrict;\r\n\t\taddress datasetrestrict;\r\n\t\taddress requesterrestrict;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\r\n\tstruct RequestOrder\r\n\t{\r\n\t\taddress app;\r\n\t\tuint256 appmaxprice;\r\n\t\taddress dataset;\r\n\t\tuint256 datasetmaxprice;\r\n\t\taddress workerpool;\r\n\t\tuint256 workerpoolmaxprice;\r\n\t\taddress requester;\r\n\t\tuint256 volume;\r\n\t\tbytes32 tag;\r\n\t\tuint256 category;\r\n\t\tuint256 trust;\r\n\t\taddress beneficiary;\r\n\t\taddress callback;\r\n\t\tstring  params;\r\n\t\tbytes32 salt;\r\n\t\tbytes   sign;\r\n\t}\r\n\r\n\tstruct AppOrderOperation\r\n\t{\r\n\t\tAppOrder           order;\r\n\t\tOrderOperationEnum operation;\r\n\t\tbytes              sign;\r\n\t}\r\n\r\n\tstruct DatasetOrderOperation\r\n\t{\r\n\t\tDatasetOrder       order;\r\n\t\tOrderOperationEnum operation;\r\n\t\tbytes              sign;\r\n\t}\r\n\r\n\tstruct WorkerpoolOrderOperation\r\n\t{\r\n\t\tWorkerpoolOrder    order;\r\n\t\tOrderOperationEnum operation;\r\n\t\tbytes              sign;\r\n\t}\r\n\r\n\tstruct RequestOrderOperation\r\n\t{\r\n\t\tRequestOrder       order;\r\n\t\tOrderOperationEnum operation;\r\n\t\tbytes              sign;\r\n\t}\r\n\r\n\tfunction hash(EIP712Domain memory _domain)\r\n\tpublic pure returns (bytes32 domainhash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tEIP712DOMAIN_TYPEHASH\r\n\t\t,\tkeccak256(bytes(_domain.name))\r\n\t\t,\tkeccak256(bytes(_domain.version))\r\n\t\t,\t_domain.chainId\r\n\t\t,\t_domain.verifyingContract\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(AppOrder memory _apporder)\r\n\tpublic pure returns (bytes32 apphash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tAPPORDER_TYPEHASH\r\n\t\t,\t_apporder.app\r\n\t\t,\t_apporder.appprice\r\n\t\t,\t_apporder.volume\r\n\t\t,\t_apporder.tag\r\n\t\t,\t_apporder.datasetrestrict\r\n\t\t,\t_apporder.workerpoolrestrict\r\n\t\t,\t_apporder.requesterrestrict\r\n\t\t,\t_apporder.salt\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(DatasetOrder memory _datasetorder)\r\n\tpublic pure returns (bytes32 datasethash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tDATASETORDER_TYPEHASH\r\n\t\t,\t_datasetorder.dataset\r\n\t\t,\t_datasetorder.datasetprice\r\n\t\t,\t_datasetorder.volume\r\n\t\t,\t_datasetorder.tag\r\n\t\t,\t_datasetorder.apprestrict\r\n\t\t,\t_datasetorder.workerpoolrestrict\r\n\t\t,\t_datasetorder.requesterrestrict\r\n\t\t,\t_datasetorder.salt\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(WorkerpoolOrder memory _workerpoolorder)\r\n\tpublic pure returns (bytes32 workerpoolhash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tWORKERPOOLORDER_TYPEHASH\r\n\t\t,\t_workerpoolorder.workerpool\r\n\t\t,\t_workerpoolorder.workerpoolprice\r\n\t\t,\t_workerpoolorder.volume\r\n\t\t,\t_workerpoolorder.tag\r\n\t\t,\t_workerpoolorder.category\r\n\t\t,\t_workerpoolorder.trust\r\n\t\t,\t_workerpoolorder.apprestrict\r\n\t\t,\t_workerpoolorder.datasetrestrict\r\n\t\t,\t_workerpoolorder.requesterrestrict\r\n\t\t,\t_workerpoolorder.salt\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(RequestOrder memory _requestorder)\r\n\tpublic pure returns (bytes32 requesthash)\r\n\t{\r\n\t\t/**\r\n\t\t * Readeable but expensive\r\n\t\t */\r\n\t\treturn keccak256(abi.encodePacked(\r\n\t\t\tabi.encode(\r\n\t\t\t\tREQUESTORDER_TYPEHASH\r\n\t\t\t,\t_requestorder.app\r\n\t\t\t,\t_requestorder.appmaxprice\r\n\t\t\t,\t_requestorder.dataset\r\n\t\t\t,\t_requestorder.datasetmaxprice\r\n\t\t\t,\t_requestorder.workerpool\r\n\t\t\t,\t_requestorder.workerpoolmaxprice\r\n\t\t\t),\r\n\t\t\tabi.encode(\r\n\t\t\t\t_requestorder.requester\r\n\t\t\t,\t_requestorder.volume\r\n\t\t\t,\t_requestorder.tag\r\n\t\t\t,\t_requestorder.category\r\n\t\t\t,\t_requestorder.trust\r\n\t\t\t,\t_requestorder.beneficiary\r\n\t\t\t,\t_requestorder.callback\r\n\t\t\t,\tkeccak256(bytes(_requestorder.params))\r\n\t\t\t,\t_requestorder.salt\r\n\t\t\t)\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(AppOrderOperation memory _apporderoperation)\r\n\tpublic pure returns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tAPPORDEROPERATION_TYPEHASH\r\n\t\t,\thash(_apporderoperation.order)\r\n\t\t,\t_apporderoperation.operation\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(DatasetOrderOperation memory _datasetorderoperation)\r\n\tpublic pure returns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tDATASETORDEROPERATION_TYPEHASH\r\n\t\t,\thash(_datasetorderoperation.order)\r\n\t\t,\t_datasetorderoperation.operation\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(WorkerpoolOrderOperation memory _workerpoolorderoperation)\r\n\tpublic pure returns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tWORKERPOOLORDEROPERATION_TYPEHASH\r\n\t\t,\thash(_workerpoolorderoperation.order)\r\n\t\t,\t_workerpoolorderoperation.operation\r\n\t\t));\r\n\t}\r\n\r\n\tfunction hash(RequestOrderOperation memory _requestorderoperation)\r\n\tpublic pure returns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encode(\r\n\t\t\tREQUESTORDEROPERATION_TYPEHASH\r\n\t\t,\thash(_requestorderoperation.order)\r\n\t\t,\t_requestorderoperation.operation\r\n\t\t));\r\n\t}\r\n}\r\n\r\ninterface IENS {\r\n\tevent NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\tevent Transfer(bytes32 indexed node, address owner);\r\n\tevent NewResolver(bytes32 indexed node, address resolver);\r\n\tevent NewTTL(bytes32 indexed node, uint64 ttl);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\tfunction setRecord(bytes32, address, address, uint64) external;\r\n\tfunction setSubnodeRecord(bytes32, bytes32, address, address, uint64) external;\r\n\tfunction setSubnodeOwner(bytes32, bytes32, address) external returns(bytes32);\r\n\tfunction setResolver(bytes32, address) external;\r\n\tfunction setOwner(bytes32, address) external;\r\n\tfunction setTTL(bytes32, uint64) external;\r\n\tfunction setApprovalForAll(address, bool) external;\r\n\tfunction owner(bytes32) external view returns (address);\r\n\tfunction resolver(bytes32) external view returns (address);\r\n\tfunction ttl(bytes32) external view returns (uint64);\r\n\tfunction recordExists(bytes32) external view returns (bool);\r\n\tfunction isApprovedForAll(address, address) external view returns (bool);\r\n}\r\n\r\ninterface IReverseRegistrar {\r\n\tfunction ADDR_REVERSE_NODE() external view returns (bytes32);\r\n\tfunction ens() external view returns (IENS);\r\n\tfunction defaultResolver() external view returns (address);\r\n\tfunction claim(address) external returns (bytes32);\r\n\tfunction claimWithResolver(address, address) external returns (bytes32);\r\n\tfunction setName(string calldata) external returns (bytes32);\r\n\tfunction node(address) external pure returns (bytes32);\r\n}\r\n\r\n// import \"@ensdomains/ens/contracts/ENS.sol\"; // ENS packages are dependency heavy\r\ncontract ENSReverseRegistration {\r\n\tbytes32 internal constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n\r\n\tfunction _setName(IENS ens, string memory name)\r\n\tinternal\r\n\t{\r\n\t\tIReverseRegistrar(ens.owner(ADDR_REVERSE_NODE)).setName(name);\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Receive function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  receive() external payable virtual {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback() external payable {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return impl The Address of the implementation.\r\n   */\r\n  function _implementation() internal virtual view returns (address impl);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal virtual {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract BaseUpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() internal override view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title InitializableUpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\r\n * implementation and init data.\r\n */\r\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract initializer.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address _logic, bytes memory _data) public payable {\r\n    require(_implementation() == address(0));\r\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from`, `to` cannot be zero.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\nabstract contract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public virtual returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMap {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of entries inside the\r\n    * array, and it may change when more entries are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = byte(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n    using Strings for uint256;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from holder address to their (enumerable) set of owned tokens\r\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\r\n\r\n    // Enumerable mapping from token ids to their owners\r\n    EnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    // Base URI\r\n    string private _baseURI;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /*\r\n     *     bytes4(keccak256('name()')) == 0x06fdde03\r\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n     *\r\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    /*\r\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n     *\r\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID.\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token name.\r\n     * @return string representing the token name\r\n     */\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token symbol.\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the URI for a given token ID. May return an empty string.\r\n     *\r\n     * If a base URI is set (via {_setBaseURI}), it is added as a prefix to the\r\n     * token's own URI (via {_setTokenURI}).\r\n     *\r\n     * If there is a base URI but no token URI, the token's ID will be used as\r\n     * its URI when appending it to the base URI. This pattern for autogenerated\r\n     * token URIs can lead to large gas savings.\r\n     *\r\n     * .Examples\r\n     * |===\r\n     * |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()`\r\n     * | \"\"\r\n     * | \"\"\r\n     * | \"\"\r\n     * | \"\"\r\n     * | \"token.uri/123\"\r\n     * | \"token.uri/123\"\r\n     * | \"token.uri/\"\r\n     * | \"123\"\r\n     * | \"token.uri/123\"\r\n     * | \"token.uri/\"\r\n     * | \"\"\r\n     * | \"token.uri/<tokenId>\"\r\n     * |===\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(_baseURI).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(_baseURI, _tokenURI));\r\n        }\r\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\r\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\r\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\r\n    * to the token ID if no specific URI is set for that token ID.\r\n    */\r\n    function baseURI() public view returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\r\n     * @param owner address owning the tokens list to be accessed\r\n     * @param index uint256 representing the index to be accessed of the requested tokens list\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of tokens stored by the contract.\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\r\n        return _tokenOwners.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n     * Reverts if the index is greater or equal to the total number of tokens.\r\n     * @param index uint256 representing the index to be accessed of the tokens list\r\n     * @return uint256 token ID at the given index of the tokens list\r\n     */\r\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n        (uint256 tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\r\n     * @param operator operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner.\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the msg.sender to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists.\r\n     * @param tokenId uint256 ID of the token to query the existence of\r\n     * @return bool whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID.\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     * is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to safely mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to safely mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n\r\n        _holderTokens[owner].remove(tokenId);\r\n\r\n        _tokenOwners.remove(tokenId);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the token URI for a given token.\r\n     *\r\n     * Reverts if the token ID does not exist.\r\n     *\r\n     * TIP: If all token IDs share a prefix (for example, if your URIs look like\r\n     * `https://api.myproject.com/token/<id>`), use {_setBaseURI} to store\r\n     * it and save gas.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the base URI for all token IDs. It is\r\n     * automatically added as a prefix to the value returned in {tokenURI},\r\n     * or to the token ID if {tokenURI} is empty.\r\n     */\r\n    function _setBaseURI(string memory baseURI_) internal virtual {\r\n        _baseURI = baseURI_;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ));\r\n        if (!success) {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n            }\r\n        } else {\r\n            bytes4 retval = abi.decode(returndata, (bytes4));\r\n            return (retval == _ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - when `from` is zero, `tokenId` will be minted for `to`.\r\n     * - when `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n/**\r\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\r\n * `CREATE2` can be used to compute in advance the address where a smart\r\n * contract will be deployed, which allows for interesting new mechanisms known\r\n * as 'counterfactual interactions'.\r\n *\r\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\r\n * information.\r\n */\r\nlibrary Create2 {\r\n    /**\r\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\r\n     * will be deployed can be known in advance via {computeAddress}.\r\n     *\r\n     * The bytecode for a contract can be obtained from Solidity with\r\n     * `type(contractName).creationCode`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `bytecode` must not be empty.\r\n     * - `salt` must have not been used for `bytecode` already.\r\n     * - the factory must have a balance of at least `amount`.\r\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\r\n     */\r\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\r\n        address addr;\r\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\r\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(addr != address(0), \"Create2: Failed on deploy\");\r\n        return addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\r\n     * `bytecodeHash` or `salt` will result in a new destination address.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\r\n        return computeAddress(salt, bytecodeHash, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\r\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\r\n        bytes32 _data = keccak256(\r\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\r\n        );\r\n        return address(bytes20(_data << 96));\r\n    }\r\n}\r\n\r\nabstract contract IRegistry is IERC721Enumerable\r\n{\r\n\tfunction isRegistered(address _entry) external virtual view returns (bool);\r\n}\r\n\r\nabstract contract Registry is IRegistry, ERC721, ENSReverseRegistration, Ownable\r\n{\r\n\taddress   public master;\r\n\tbytes     public proxyCode;\r\n\tbytes32   public proxyCodeHash;\r\n\tIRegistry public previous;\r\n\tbool      public initialized;\r\n\r\n\tconstructor(address _master, string memory _name, string memory _symbol)\r\n\tpublic ERC721(_name, _symbol)\r\n\t{\r\n\t\tmaster        = _master;\r\n\t\tproxyCode     = type(InitializableUpgradeabilityProxy).creationCode;\r\n\t\tproxyCodeHash = keccak256(proxyCode);\r\n\t}\r\n\r\n\tfunction initialize(address _previous)\r\n\texternal onlyOwner()\r\n\t{\r\n\t\trequire(!initialized);\r\n\t\tinitialized = true;\r\n\t\tprevious    = IRegistry(_previous);\r\n\t}\r\n\r\n\t/* Factory */\r\n\tfunction _mintCreate(address _owner, bytes memory _args)\r\n\tinternal returns (uint256)\r\n\t{\r\n\t\t// Create entry (proxy)\r\n\t\taddress entry = Create2.deploy(0, keccak256(abi.encodePacked(_args, _owner)), proxyCode);\r\n\t\t// Initialize entry (casting to address payable is a pain in ^0.5.0)\r\n\t\tInitializableUpgradeabilityProxy(payable(entry)).initialize(master, _args);\r\n\t\t// Mint corresponding token\r\n\t\t_mint(_owner, uint256(entry));\r\n\t\treturn uint256(entry);\r\n\t}\r\n\r\n\tfunction _mintPredict(address _owner, bytes memory _args)\r\n\tinternal view returns (uint256)\r\n\t{\r\n\t\taddress entry = Create2.computeAddress(keccak256(abi.encodePacked(_args, _owner)), proxyCodeHash);\r\n\t\treturn uint256(entry);\r\n\t}\r\n\r\n\t/* Administration */\r\n\tfunction setName(address _ens, string calldata _name)\r\n\texternal onlyOwner()\r\n\t{\r\n\t\t_setName(IENS(_ens), _name);\r\n\t}\r\n\r\n\tfunction setBaseURI(string calldata _baseURI)\r\n\texternal onlyOwner()\r\n\t{\r\n\t\t_setBaseURI(_baseURI);\r\n\t}\r\n\r\n\t/* Interface */\r\n\tfunction isRegistered(address _entry)\r\n\texternal view override returns (bool)\r\n\t{\r\n\t\treturn _exists(uint256(_entry)) || (address(previous) != address(0) && previous.isRegistered(_entry));\r\n\t}\r\n}\r\n\r\nabstract contract RegistryEntry is ENSReverseRegistration\r\n{\r\n\tIRegistry public registry;\r\n\r\n\tfunction _initialize(address _registry) internal\r\n\t{\r\n\t\trequire(address(registry) == address(0), 'already initialized');\r\n\t\tregistry = IRegistry(_registry);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address)\r\n\t{\r\n\t\treturn registry.ownerOf(uint256(address(this)));\r\n\t}\r\n\r\n\tmodifier onlyOwner()\r\n\t{\r\n\t\trequire(owner() == msg.sender, 'caller is not the owner');\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction setName(address _ens, string calldata _name)\r\n\texternal onlyOwner()\r\n\t{\r\n\t\t_setName(IENS(_ens), _name);\r\n\t}\r\n}\r\n\r\ncontract App is RegistryEntry\r\n{\r\n\t/**\r\n\t * Members\r\n\t */\r\n\tstring  public  m_appName;\r\n\tstring  public  m_appType;\r\n\tbytes   public  m_appMultiaddr;\r\n\tbytes32 public  m_appChecksum;\r\n\tbytes   public  m_appMREnclave;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tfunction initialize(\r\n\t\tstring  memory _appName,\r\n\t\tstring  memory _appType,\r\n\t\tbytes   memory _appMultiaddr,\r\n\t\tbytes32        _appChecksum,\r\n\t\tbytes   memory _appMREnclave)\r\n\tpublic\r\n\t{\r\n\t\t_initialize(msg.sender);\r\n\t\tm_appName      = _appName;\r\n\t\tm_appType      = _appType;\r\n\t\tm_appMultiaddr = _appMultiaddr;\r\n\t\tm_appChecksum  = _appChecksum;\r\n\t\tm_appMREnclave = _appMREnclave;\r\n\t}\r\n}\r\n\r\ncontract Dataset is RegistryEntry\r\n{\r\n\t/**\r\n\t * Members\r\n\t */\r\n\tstring  public m_datasetName;\r\n\tbytes   public m_datasetMultiaddr;\r\n\tbytes32 public m_datasetChecksum;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tfunction initialize(\r\n\t\tstring  memory _datasetName,\r\n\t\tbytes   memory _datasetMultiaddr,\r\n\t\tbytes32        _datasetChecksum)\r\n\tpublic\r\n\t{\r\n\t\t_initialize(msg.sender);\r\n\t\tm_datasetName      = _datasetName;\r\n\t\tm_datasetMultiaddr = _datasetMultiaddr;\r\n\t\tm_datasetChecksum  = _datasetChecksum;\r\n\t}\r\n}\r\n\r\ncontract Workerpool is RegistryEntry\r\n{\r\n\t/**\r\n\t * Parameters\r\n\t */\r\n\tstring  public m_workerpoolDescription;\r\n\tuint256 public m_workerStakeRatioPolicy;     // % of reward to stake\r\n\tuint256 public m_schedulerRewardRatioPolicy; // % of reward given to scheduler\r\n\r\n\t/**\r\n\t * Events\r\n\t */\r\n\tevent PolicyUpdate(\r\n\t\tuint256 oldWorkerStakeRatioPolicy,     uint256 newWorkerStakeRatioPolicy,\r\n\t\tuint256 oldSchedulerRewardRatioPolicy, uint256 newSchedulerRewardRatioPolicy);\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tfunction initialize(\r\n\t\tstring memory _workerpoolDescription)\r\n\tpublic\r\n\t{\r\n\t\t_initialize(msg.sender);\r\n\t\tm_workerpoolDescription      = _workerpoolDescription;\r\n\t\tm_workerStakeRatioPolicy     = 30; // mutable\r\n\t\tm_schedulerRewardRatioPolicy = 1;  // mutable\r\n\t}\r\n\r\n\tfunction changePolicy(\r\n\t\tuint256 _newWorkerStakeRatioPolicy,\r\n\t\tuint256 _newSchedulerRewardRatioPolicy)\r\n\texternal onlyOwner()\r\n\t{\r\n\t\trequire(_newSchedulerRewardRatioPolicy <= 100);\r\n\r\n\t\temit PolicyUpdate(\r\n\t\t\tm_workerStakeRatioPolicy,     _newWorkerStakeRatioPolicy,\r\n\t\t\tm_schedulerRewardRatioPolicy, _newSchedulerRewardRatioPolicy\r\n\t\t);\r\n\r\n\t\tm_workerStakeRatioPolicy     = _newWorkerStakeRatioPolicy;\r\n\t\tm_schedulerRewardRatioPolicy = _newSchedulerRewardRatioPolicy;\r\n\t}\r\n}\r\n\r\n/****************************************************************************\r\n * WARNING: Be carefull when editing this file.                             *\r\n *                                                                          *\r\n * If you want add new variables for expanded features, add them at the     *\r\n * end, or (better?) create a Store_v2 that inherits from this Store.       *\r\n *                                                                          *\r\n * If in doubt, read about ERC1538 memory store.                            *\r\n ****************************************************************************/\r\nabstract contract Store is ERC1538Store\r\n{\r\n\t// Registries\r\n\tIRegistry internal m_appregistry;\r\n\tIRegistry internal m_datasetregistry;\r\n\tIRegistry internal m_workerpoolregistry;\r\n\r\n\t// Escrow\r\n\tIERC20  internal m_baseToken;\r\n\tstring  internal m_name;\r\n\tstring  internal m_symbol;\r\n\tuint8   internal m_decimals;\r\n\tuint256 internal m_totalSupply;\r\n\tmapping (address =>                     uint256 ) internal m_balances;\r\n\tmapping (address =>                     uint256 ) internal m_frozens;\r\n\tmapping (address => mapping (address => uint256)) internal m_allowances;\r\n\r\n\t// Poco - Constants\r\n\tuint256 internal constant CONTRIBUTION_DEADLINE_RATIO = 7;\r\n\tuint256 internal constant REVEAL_DEADLINE_RATIO       = 2;\r\n\tuint256 internal constant FINAL_DEADLINE_RATIO        = 10;\r\n\tuint256 internal constant WORKERPOOL_STAKE_RATIO      = 30;\r\n\tuint256 internal constant KITTY_RATIO                 = 10;\r\n\tuint256 internal constant KITTY_MIN                   = 1000000000; // ADJUSTEMENT VARIABLE\r\n\taddress internal constant KITTY_ADDRESS               = 0x99c2268479b93fDe36232351229815DF80837e23; // address(uint256(keccak256(bytes('iExecKitty'))) - 1);\r\n\tuint256 internal constant GROUPMEMBER_PURPOSE         = 4;\r\n\tbytes32 internal          EIP712DOMAIN_SEPARATOR;\r\n\r\n\t// Poco - Storage\r\n\tmapping(bytes32 =>                    address                      ) internal m_presigned;     // per order\r\n\tmapping(bytes32 =>                    uint256                      ) internal m_consumed;      // per order\r\n\tmapping(bytes32 =>                    IexecLibCore_v5.Deal         ) internal m_deals;         // per deal\r\n\tmapping(bytes32 =>                    IexecLibCore_v5.Task         ) internal m_tasks;         // per task\r\n\tmapping(bytes32 =>                    IexecLibCore_v5.Consensus    ) internal m_consensus;     // per task\r\n\tmapping(bytes32 => mapping(address => IexecLibCore_v5.Contribution)) internal m_contributions; // per task-worker\r\n\tmapping(address =>                    uint256                      ) internal m_workerScores;  // per worker\r\n\r\n\t// Poco - Settings\r\n\taddress internal m_teebroker;\r\n\tuint256 internal m_callbackgas;\r\n\r\n\t// Categories\r\n\tIexecLibCore_v5.Category[] internal m_categories;\r\n\r\n\t// Backward compatibility\r\n\tIexecHubInterface internal m_v3_iexecHub;\r\n\tmapping(address => bool) internal m_v3_scoreImported;\r\n}\r\n\r\nabstract contract DelegateBase is Store, ERC1538Module\r\n{\r\n\tmodifier onlyScheduler(bytes32 _taskid)\r\n\t{\r\n\t\trequire(_msgSender() == m_deals[m_tasks[_taskid].dealid].workerpool.owner);\r\n\t\t_;\r\n\t}\r\n}\r\n\r\ncontract IexecERC20Common is DelegateBase\r\n{\r\n\tusing SafeMathExtended for uint256;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tfunction _transfer(address sender, address recipient, uint256 amount)\r\n\tinternal\r\n\t{\r\n\t\trequire(sender != address(0), 'ERC20: transfer from the zero address');\r\n\t\trequire(recipient != address(0), 'ERC20: transfer to the zero address');\r\n\r\n\t\tm_balances[sender] = m_balances[sender].sub(amount);\r\n\t\tm_balances[recipient] = m_balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount)\r\n\tinternal\r\n\t{\r\n\t\trequire(account != address(0), 'ERC20: mint to the zero address');\r\n\r\n\t\tm_totalSupply = m_totalSupply.add(amount);\r\n\t\tm_balances[account] = m_balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 value)\r\n\tinternal\r\n\t{\r\n\t\trequire(account != address(0), 'ERC20: burn from the zero address');\r\n\r\n\t\tm_totalSupply = m_totalSupply.sub(value);\r\n\t\tm_balances[account] = m_balances[account].sub(value);\r\n\t\temit Transfer(account, address(0), value);\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 value)\r\n\tinternal\r\n\t{\r\n\t\trequire(owner != address(0), 'ERC20: approve from the zero address');\r\n\t\trequire(spender != address(0), 'ERC20: approve to the zero address');\r\n\r\n\t\tm_allowances[owner][spender] = value;\r\n\t\temit Approval(owner, spender, value);\r\n\t}\r\n}\r\n\r\nabstract contract IERC734\r\n{\r\n\t// 1: MANAGEMENT keys, which can manage the identity\r\n\tuint256 public constant MANAGEMENT_KEY = 1;\r\n\t// 2: ACTION keys, which perform actions in this identities name (signing, logins, transactions, etc.)\r\n\tuint256 public constant ACTION_KEY = 2;\r\n\t// 3: CLAIM signer keys, used to sign claims on other identities which need to be revokable.\r\n\tuint256 public constant CLAIM_SIGNER_KEY = 3;\r\n\t// 4: ENCRYPTION keys, used to encrypt data e.g. hold in claims.\r\n\tuint256 public constant ENCRYPTION_KEY = 4;\r\n\r\n\t// KeyType\r\n\tuint256 public constant ECDSA_TYPE = 1;\r\n\t// https://medium.com/@alexberegszaszi/lets-bring-the-70s-to-ethereum-48daa16a4b51\r\n\tuint256 public constant RSA_TYPE = 2;\r\n\r\n\t// Events\r\n\tevent KeyAdded          (bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n\tevent KeyRemoved        (bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n\tevent ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\tevent Executed          (uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\tevent ExecutionFailed   (uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n\tevent Approved          (uint256 indexed executionId, bool approved);\r\n\r\n\t// Functions\r\n\tfunction getKey          (bytes32 _key                                     ) external virtual view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\r\n\tfunction keyHasPurpose   (bytes32 _key, uint256 purpose                    ) external virtual view returns (bool exists);\r\n\tfunction getKeysByPurpose(uint256 _purpose                                 ) external virtual view returns (bytes32[] memory keys);\r\n\tfunction addKey          (bytes32 _key, uint256 _purpose, uint256 _keyType ) external virtual      returns (bool success);\r\n\tfunction removeKey       (bytes32 _key, uint256 _purpose                   ) external virtual      returns (bool success);\r\n\tfunction execute         (address _to, uint256 _value, bytes calldata _data) external virtual      returns (uint256 executionId);\r\n\tfunction approve         (uint256 _id, bool _approve                       ) external virtual      returns (bool success);\r\n}\r\n\r\ninterface IERC1271\r\n{\r\n\tfunction isValidSignature(bytes calldata data, bytes calldata signature) external view returns (bytes4 magicValue);\r\n}\r\n\r\ninterface IERC1654\r\n{\r\n\tfunction isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);\r\n}\r\n\r\ncontract SignatureVerifier is DelegateBase\r\n{\r\n\t/**\r\n\t * Prepare message/structure predicat used for signing\r\n\t */\r\n\tfunction _toEthSignedMessage(bytes32 _msgHash)\r\n\tinternal pure returns (bytes memory)\r\n\t{\r\n\t\treturn abi.encodePacked('\\x19Ethereum Signed Message:\\n32', _msgHash);\r\n\t}\r\n\r\n\tfunction _toEthTypedStruct(bytes32 _structHash, bytes32 _domainHash)\r\n\tinternal pure returns (bytes memory)\r\n\t{\r\n\t\treturn abi.encodePacked('\\x19\\x01', _domainHash, _structHash);\r\n\t}\r\n\r\n\t/**\r\n\t * recover EOA signature (support both 65 bytes traditional and 64 bytes format EIP2098 format)\r\n\t */\r\n\tfunction _recover(bytes32 _hash, bytes memory _sign)\r\n\tinternal pure returns (address)\r\n\t{\r\n\t\tbytes32 r;\r\n\t\tbytes32 s;\r\n\t\tuint8   v;\r\n\r\n\t\tif (_sign.length == 65) // 65bytes: (r,s,v) form\r\n\t\t{\r\n\t\t\tassembly\r\n\t\t\t{\r\n\t\t\t\tr :=         mload(add(_sign, 0x20))\r\n\t\t\t\ts :=         mload(add(_sign, 0x40))\r\n\t\t\t\tv := byte(0, mload(add(_sign, 0x60)))\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (_sign.length == 64) // 64bytes: (r,vs) form → see EIP2098\r\n\t\t{\r\n\t\t\tassembly\r\n\t\t\t{\r\n\t\t\t\tr :=                mload(add(_sign, 0x20))\r\n\t\t\t\ts := and(           mload(add(_sign, 0x40)), 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n\t\t\t\tv := shr(7, byte(0, mload(add(_sign, 0x40))))\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert('invalid-signature-format');\r\n\t\t}\r\n\r\n\t\tif (v < 27) v += 27;\r\n\t\trequire(v == 27 || v == 28, 'invalid-signature-v');\r\n\t\treturn ecrecover(_hash, v, r, s);\r\n\t}\r\n\r\n\t/**\r\n\t * Check if contract exist, otherwize assumed to be EOA\r\n\t */\r\n\tfunction _isContract(address account)\r\n\tinternal view returns (bool)\r\n\t{\r\n\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n\t\t// for accounts without code, i.e. `keccak256('')`\r\n\t\tbytes32 codehash;\r\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly { codehash := extcodehash(account) }\r\n\t\treturn (codehash != accountHash && codehash != 0x0);\r\n\t}\r\n\r\n\t/**\r\n\t * Address to bytes32 casting to ERC734\r\n\t */\r\n\tfunction _addrToKey(address _addr)\r\n\tinternal pure returns (bytes32)\r\n\t{\r\n\t\treturn bytes32(uint256(_addr));\r\n\t}\r\n\r\n\t/**\r\n\t * Identity verification\r\n\t */\r\n\tfunction _checkIdentity(address _identity, address _candidate, uint256 _purpose)\r\n\tinternal view returns (bool valid)\r\n\t{\r\n\t\treturn _identity == _candidate || IERC734(_identity).keyHasPurpose(_addrToKey(_candidate), _purpose); // Simple address || ERC 734 identity contract\r\n\t}\r\n\r\n\tfunction _checkPresignature(address _identity, bytes32 _hash)\r\n\tinternal view returns (bool)\r\n\t{\r\n\t\treturn _identity != address(0) && _identity == m_presigned[_hash];\r\n\t}\r\n\r\n\tfunction _checkSignature(address _identity, bytes32 _hash, bytes memory _signature)\r\n\tinternal view returns (bool)\r\n\t{\r\n\t\tif (_isContract(_identity))\r\n\t\t{\r\n\t\t\ttry IERC1654(_identity).isValidSignature(_hash, _signature) returns (bytes4 value)\r\n\t\t\t{\r\n\t\t\t\treturn value == IERC1654(0).isValidSignature.selector;\r\n\t\t\t} catch (bytes memory /*lowLevelData*/) {}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn _recover(_hash, _signature) == _identity;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _checkSignature(address _identity, bytes memory _predicat, bytes memory _signature)\r\n\tinternal view returns (bool)\r\n\t{\r\n\t\tif (_isContract(_identity))\r\n\t\t{\r\n\t\t\ttry IERC1271(_identity).isValidSignature(_predicat, _signature) returns (bytes4 value)\r\n\t\t\t{\r\n\t\t\t\treturn value == IERC1271(0).isValidSignature.selector;\r\n\t\t\t}\r\n\t\t\tcatch (bytes memory /*lowLevelData*/) {}\r\n\r\n\t\t\ttry IERC1654(_identity).isValidSignature(keccak256(_predicat), _signature) returns (bytes4 value)\r\n\t\t\t{\r\n\t\t\t\treturn value == IERC1654(0).isValidSignature.selector;\r\n\t\t\t}\r\n\t\t\tcatch (bytes memory /*lowLevelData*/) {}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn _recover(keccak256(_predicat), _signature) == _identity;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _checkPresignatureOrSignature(address _identity, bytes32 _hash, bytes memory _signature)\r\n\tinternal view returns (bool)\r\n\t{\r\n\t\treturn _checkPresignature(_identity, _hash) || _checkSignature(_identity, _hash, _signature);\r\n\t}\r\n\r\n\tfunction _checkPresignatureOrSignature(address _identity, bytes memory _predicat, bytes memory _signature)\r\n\tinternal view returns (bool)\r\n\t{\r\n\t\treturn _checkPresignature(_identity, keccak256(_predicat)) || _checkSignature(_identity, _predicat, _signature);\r\n\t}\r\n}\r\n\r\ninterface IexecPoco\r\n{\r\n\tevent Reward  (address owner, uint256 amount, bytes32 ref);\r\n\tevent Seize   (address owner, uint256 amount, bytes32 ref);\r\n\tevent Lock    (address owner, uint256 amount);\r\n\tevent Unlock  (address owner, uint256 amount);\r\n\r\n\tevent OrdersMatched  (bytes32 dealid, bytes32 appHash, bytes32 datasetHash, bytes32 workerpoolHash, bytes32 requestHash, uint256 volume);\r\n\tevent SchedulerNotice(address indexed workerpool, bytes32 dealid);\r\n\r\n\tevent TaskInitialize(bytes32 indexed taskid, address indexed workerpool);\r\n\tevent TaskContribute(bytes32 indexed taskid, address indexed worker, bytes32 hash);\r\n\tevent TaskConsensus (bytes32 indexed taskid, bytes32 consensus);\r\n\tevent TaskReveal    (bytes32 indexed taskid, address indexed worker, bytes32 digest);\r\n\tevent TaskReopen    (bytes32 indexed taskid);\r\n\tevent TaskFinalize  (bytes32 indexed taskid, bytes results);\r\n\tevent TaskClaimed   (bytes32 indexed taskid);\r\n\r\n\tevent AccurateContribution(address indexed worker, bytes32 indexed taskid);\r\n\tevent FaultyContribution  (address indexed worker, bytes32 indexed taskid);\r\n\r\n\tfunction verifySignature(address,bytes32,bytes calldata) external view returns (bool);\r\n\tfunction verifyPresignature(address,bytes32) external view returns (bool);\r\n\tfunction verifyPresignatureOrSignature(address,bytes32,bytes calldata) external view returns (bool);\r\n\tfunction matchOrders(IexecLibOrders_v5.AppOrder calldata,IexecLibOrders_v5.DatasetOrder calldata,IexecLibOrders_v5.WorkerpoolOrder calldata,IexecLibOrders_v5.RequestOrder calldata) external returns (bytes32);\r\n\tfunction initialize(bytes32,uint256) external returns (bytes32);\r\n\tfunction contribute(bytes32,bytes32,bytes32,address,bytes calldata,bytes calldata) external;\r\n\tfunction reveal(bytes32,bytes32) external;\r\n\tfunction reopen(bytes32) external;\r\n\tfunction finalize(bytes32,bytes calldata,bytes calldata) external; // Expansion - result separation\r\n\tfunction claim(bytes32) external;\r\n\tfunction contributeAndFinalize(bytes32,bytes32,bytes calldata,bytes calldata,address,bytes calldata,bytes calldata) external; // Expansion - result separation\r\n\tfunction initializeArray(bytes32[] calldata,uint256[] calldata) external returns (bool);\r\n\tfunction claimArray(bytes32[] calldata) external returns (bool);\r\n\tfunction initializeAndClaimArray(bytes32[] calldata,uint256[] calldata) external returns (bool);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IexecEscrowTokenSwap\r\n{\r\n\treceive() external payable;\r\n\tfallback() external payable;\r\n\r\n\tfunction UniswapV2Router           ()        external view returns (IUniswapV2Router02);\r\n\tfunction estimateDepositEthSent    (uint256) external view returns (uint256);\r\n\tfunction estimateDepositTokenWanted(uint256) external view returns (uint256);\r\n\tfunction estimateWithdrawTokenSent (uint256) external view returns (uint256);\r\n\tfunction estimateWithdrawEthWanted (uint256) external view returns (uint256);\r\n\r\n\tfunction depositEth       (                         ) external payable;\r\n\tfunction depositEthFor    (                  address) external payable;\r\n\tfunction safeDepositEth   (         uint256         ) external payable;\r\n\tfunction safeDepositEthFor(         uint256, address) external payable;\r\n\tfunction requestToken     (uint256                  ) external payable;\r\n\tfunction requestTokenFor  (uint256,          address) external payable;\r\n\tfunction withdrawEth      (uint256                  ) external;\r\n\tfunction withdrawEthTo    (uint256,          address) external;\r\n\tfunction safeWithdrawEth  (uint256, uint256         ) external;\r\n\tfunction safeWithdrawEthTo(uint256, uint256, address) external;\r\n\r\n\tfunction matchOrdersWithEth(\r\n\t\tIexecLibOrders_v5.AppOrder        memory,\r\n\t\tIexecLibOrders_v5.DatasetOrder    memory,\r\n\t\tIexecLibOrders_v5.WorkerpoolOrder memory,\r\n\t\tIexecLibOrders_v5.RequestOrder    memory)\r\n\texternal payable returns (bytes32);\r\n}\r\n\r\ncontract IexecEscrowTokenSwapDelegate is IexecEscrowTokenSwap, DelegateBase, IexecERC20Common, SignatureVerifier\r\n{\r\n\tusing SafeMathExtended  for uint256;\r\n\tusing IexecLibOrders_v5 for IexecLibOrders_v5.AppOrder;\r\n\tusing IexecLibOrders_v5 for IexecLibOrders_v5.DatasetOrder;\r\n\tusing IexecLibOrders_v5 for IexecLibOrders_v5.WorkerpoolOrder;\r\n\tusing IexecLibOrders_v5 for IexecLibOrders_v5.RequestOrder;\r\n\r\n\tIUniswapV2Router02 internal constant router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n\t/***************************************************************************\r\n\t *                                Accessor                                 *\r\n\t ***************************************************************************/\r\n\tfunction UniswapV2Router()\r\n\texternal view override returns (IUniswapV2Router02)\r\n\t{\r\n\t\treturn router;\r\n\t}\r\n\r\n\t/***************************************************************************\r\n\t *                         Uniswap path - Internal                         *\r\n\t ***************************************************************************/\r\n\tfunction _eth2token()\r\n\tinternal view returns (address[] memory)\r\n\t{\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = router.WETH();\r\n\t\tpath[1] = address(m_baseToken);\r\n\t\treturn path;\r\n\t}\r\n\r\n\tfunction _token2eth()\r\n\tinternal view returns (address[] memory)\r\n\t{\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(m_baseToken);\r\n\t\tpath[1] = router.WETH();\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/***************************************************************************\r\n\t *                       Prediction methods - Public                       *\r\n\t ***************************************************************************/\r\n\tfunction estimateDepositEthSent    (uint256 eth  ) external view override returns (uint256 token) { return router.getAmountsOut(eth,   _eth2token())[1]; }\r\n\tfunction estimateDepositTokenWanted(uint256 token) external view override returns (uint256 eth  ) { return router.getAmountsIn (token, _eth2token())[0]; }\r\n\tfunction estimateWithdrawTokenSent (uint256 token) external view override returns (uint256 eth  ) { return router.getAmountsOut(token, _token2eth())[1]; }\r\n\tfunction estimateWithdrawEthWanted (uint256 eth  ) external view override returns (uint256 token) { return router.getAmountsIn (eth,   _token2eth())[0]; }\r\n\r\n\t/***************************************************************************\r\n\t *                        Swapping methods - Public                        *\r\n\t ***************************************************************************/\r\n\treceive()\r\n\texternal override payable\r\n\t{\r\n\t\taddress sender = _msgSender();\r\n\t\tif (sender != address(router))\r\n\t\t{\r\n\t\t\t_deposit(sender, msg.value, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tfallback()\r\n\texternal override payable\r\n\t{\r\n\t\trevert('fallback-disabled');\r\n\t}\r\n\r\n\tfunction depositEth       (                                                ) external override payable {  _deposit(_msgSender(), msg.value, 0      ); }\r\n\tfunction depositEthFor    (                                  address target) external override payable {  _deposit(target,       msg.value, 0      ); }\r\n\tfunction safeDepositEth   (                 uint256 minimum                ) external override payable {  _deposit(_msgSender(), msg.value, minimum); }\r\n\tfunction safeDepositEthFor(                 uint256 minimum, address target) external override payable {  _deposit(target,       msg.value, minimum); }\r\n\tfunction requestToken     (uint256 amount                                  ) external override payable {  _request(_msgSender(), msg.value, amount ); }\r\n\tfunction requestTokenFor  (uint256 amount,                   address target) external override payable {  _request(target,       msg.value, amount ); }\r\n\tfunction withdrawEth      (uint256 amount                                  ) external override         { _withdraw(_msgSender(), amount,    0      ); }\r\n\tfunction withdrawEthTo    (uint256 amount,                   address target) external override         { _withdraw(target,       amount,    0      ); }\r\n\tfunction safeWithdrawEth  (uint256 amount,  uint256 minimum                ) external override         { _withdraw(_msgSender(), amount,    minimum); }\r\n\tfunction safeWithdrawEthTo(uint256 amount,  uint256 minimum, address target) external override         { _withdraw(target,       amount,    minimum); }\r\n\r\n\t/***************************************************************************\r\n\t *                       Swapping methods - Internal                       *\r\n\t ***************************************************************************/\r\n\tfunction _deposit(address target, uint256 value, uint256 minimum)\r\n\tinternal\r\n\t{\r\n\t\tuint256[] memory amounts = router.swapExactETHForTokens{value: value}(minimum, _eth2token(), address(this), now+1);\r\n\t\t_mint(target, amounts[1]);\r\n\t}\r\n\r\n\tfunction _request(address target, uint256 value, uint256 amount)\r\n\tinternal\r\n\t{\r\n\t\tuint256[] memory amounts = router.swapETHForExactTokens{value: value}(amount, _eth2token(), address(this), now+1);\r\n\t\t_mint(target, amounts[1]);\r\n\t\t// Refund remaining ETH\r\n\t\t(bool success, ) = _msgSender().call{value: value.sub(amounts[0])}('');\r\n\t\trequire(success, 'native-transfer-failed');\r\n\t}\r\n\r\n\tfunction _withdraw(address target, uint256 amount, uint256 minimum)\r\n\tinternal\r\n\t{\r\n\t\tm_baseToken.approve(address(router), amount);\r\n\t\tuint256[] memory amounts = router.swapExactTokensForETH(amount, minimum, _token2eth(), target, now+1);\r\n\t\t_burn(_msgSender(), amounts[0]);\r\n\t}\r\n\r\n\t/***************************************************************************\r\n\t *                          Extra public methods                           *\r\n\t ***************************************************************************/\r\n\tfunction matchOrdersWithEth(\r\n\t\tIexecLibOrders_v5.AppOrder        memory _apporder,\r\n\t\tIexecLibOrders_v5.DatasetOrder    memory _datasetorder,\r\n\t\tIexecLibOrders_v5.WorkerpoolOrder memory _workerpoolorder,\r\n\t\tIexecLibOrders_v5.RequestOrder    memory _requestorder)\r\n\tpublic payable override returns (bytes32)\r\n\t{\r\n\t\tuint256 volume;\r\n\t\tvolume =                   _apporder.volume.sub(m_consumed[keccak256(_toEthTypedStruct(       _apporder.hash(), EIP712DOMAIN_SEPARATOR))]);\r\n\t\tif (_datasetorder.dataset != address(0))\r\n\t\tvolume = volume.min(   _datasetorder.volume.sub(m_consumed[keccak256(_toEthTypedStruct(   _datasetorder.hash(), EIP712DOMAIN_SEPARATOR))]));\r\n\t\tvolume = volume.min(_workerpoolorder.volume.sub(m_consumed[keccak256(_toEthTypedStruct(_workerpoolorder.hash(), EIP712DOMAIN_SEPARATOR))]));\r\n\t\tvolume = volume.min(   _requestorder.volume.sub(m_consumed[keccak256(_toEthTypedStruct(   _requestorder.hash(), EIP712DOMAIN_SEPARATOR))]));\r\n\r\n\t\t_request(\r\n\t\t\t_requestorder.requester,\r\n\t\t\tmsg.value,\r\n\t\t\t_apporder.appprice\r\n\t\t\t.add(_datasetorder.dataset != address(0) ? _datasetorder.datasetprice : 0)\r\n\t\t\t.add(_workerpoolorder.workerpoolprice)\r\n\t\t\t.mul(volume)\r\n\t\t);\r\n\r\n\t\treturn IexecPoco(address(this)).matchOrders(_apporder, _datasetorder, _workerpoolorder, _requestorder);\r\n\t}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"UniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"depositEthFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"estimateDepositEthSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"estimateDepositTokenWanted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"estimateWithdrawEthWanted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"estimateWithdrawTokenSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"appprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"datasetrestrict\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"workerpoolrestrict\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requesterrestrict\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"internalType\":\"struct IexecLibOrders_v5.AppOrder\",\"name\":\"_apporder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dataset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"datasetprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"apprestrict\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"workerpoolrestrict\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requesterrestrict\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"internalType\":\"struct IexecLibOrders_v5.DatasetOrder\",\"name\":\"_datasetorder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"workerpool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workerpoolprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trust\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"apprestrict\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"datasetrestrict\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requesterrestrict\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"internalType\":\"struct IexecLibOrders_v5.WorkerpoolOrder\",\"name\":\"_workerpoolorder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"appmaxprice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dataset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"datasetmaxprice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"workerpool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workerpoolmaxprice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trust\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callback\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"params\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"internalType\":\"struct IexecLibOrders_v5.RequestOrder\",\"name\":\"_requestorder\",\"type\":\"tuple\"}],\"name\":\"matchOrdersWithEth\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"requestTokenFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"safeDepositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"safeDepositEthFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"safeWithdrawEthTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"withdrawEthTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"IexecEscrowTokenSwapDelegate","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"IexecLibOrders_v5:5c1f8351038649175d9f192048bcd53fa56d99c7","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5097e5c6378dcbb03bb4840909d98daf3aeda67a04867aa88364e89072505e6d"}]}