{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  \r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    \r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract PRESALE is Owned{\r\n    \r\n    \r\n  using SafeMath for uint;\r\n  ERC20Interface public token;\r\n   \r\n  uint256 public _tkns;\r\n  address tokensalepool;\r\n  uint256 public tSales;\r\n  uint public otc;\r\n  address payable saleswallet;\r\n\r\n \r\n  constructor(ERC20Interface _token) public {\r\n      \r\n     token = _token;\r\n     owner = msg.sender;\r\n     \r\n  }\r\n   \r\n \r\n function _setSalesPool(address _setPool, uint _OTC, address payable _salewallet) public onlyOwner{\r\n\t    \r\n\t    tokensalepool = _setPool;\r\n\t    otc = _OTC*10**18;\r\n\t    saleswallet = _salewallet;\r\n }\r\n\t\r\n function () external payable {\r\n\r\n    require(tokensalepool != 0x0000000000000000000000000000000000000000, \"Salespool not yet set\");\r\n    require(msg.value <= 10 ether, \"Amount is over the maximum purchase limit\");\r\n    require(msg.value != 0 ether, \"Insufficient ether balance\");\r\n    \r\n    uint _eth = msg.value;\r\n    _tkns = (_eth / 0.00022 ether)*10**18;\r\n   require(token.allowance(tokensalepool, address(this)) >= _tkns, \"Insufficient tokens allowed from pool\");\r\n   require(token.balanceOf(tokensalepool) >= _tkns, \"Insufficient tokens in the pool\");\r\n   require(tSales <= otc, \"Maximum Sales Cap is reached\");\r\n\r\n    saleswallet.transfer(msg.value);\r\n    token.transferFrom(tokensalepool, msg.sender, _tkns);\r\n    tSales += _tkns;\r\n    \r\n   \r\n  }\r\n  \r\nfunction buysales() public payable{\r\n\r\n    require(tokensalepool != 0x0000000000000000000000000000000000000000, \"Salespool not yet set\");\r\n    require(msg.value <= 10 ether, \"Amount is over the maximum purchase limit\");\r\n    require(msg.value != 0 ether, \"Insufficient ether balance\");\r\n    \r\n    uint _eth = msg.value;\r\n    _tkns = (_eth / 0.00022 ether)*10**18;\r\n   require(token.allowance(tokensalepool, address(this)) >= _tkns, \"Insufficient tokens allowed from pool\");\r\n   require(token.balanceOf(tokensalepool) >= _tkns, \"Insufficient tokens in the pool\");\r\n   require(tSales <= otc, \"Maximum Sales Cap is reached\");\r\n\r\n     saleswallet.transfer(msg.value);\r\n     token.transferFrom(tokensalepool, msg.sender, _tkns);\r\n    tSales += _tkns;\r\n    \r\n   \r\n  }\r\n \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_OTC\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_salewallet\",\"type\":\"address\"}],\"name\":\"_setSalesPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tkns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buysales\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PRESALE","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000093ecd2ecdfb91ab2fee28a8779a6adfe2851cda6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://57458c1ac42c69584c25650fa5ac4bdadec10a95bcad134e2a19c10e003104be"}]}