{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.6.12;\r\n\r\nabstract contract MultiSig {\r\n    mapping(address => bool) s_owners;\r\n\r\n    address s_markedForRemoval;\r\n\r\n    struct Action {\r\n        address owner;\r\n        uint256 value;\r\n        uint256 height;\r\n        bytes32 data;\r\n    }\r\n\r\n    Action public s_action;\r\n\r\n    event MultiSigRequest(address indexed from, bytes4 indexed selector, uint256 value, bytes32 hashedData);\r\n    event MultiSigExecute(address indexed from, bytes4 indexed selector, uint256 value, bytes32 hashedData);\r\n    event MultiSigCancel(address indexed from);\r\n    event MultiSigReplaceOwnerCall(address indexed by, address indexed from, address indexed to);\r\n\r\n    constructor(address owner1, address owner2, address owner3) public {\r\n        require(owner1 != address(0), \"MultiSig: owner1 cannot be 0\");\r\n        require(owner2 != address(0), \"MultiSig: owner2 cannot be 0\");\r\n        require(owner3 != address(0), \"MultiSig: owner3 cannot be 0\");\r\n        require(owner1 != owner2, \"MultiSig: owner1 cannot be owner2\");\r\n        require(owner2 != owner3, \"MultiSig: owner2 cannot be owner3\");\r\n        require(owner1 != owner3, \"MultiSig: owner1 cannot be owner3\");\r\n        s_owners[owner1] = true;\r\n        s_owners[owner2] = true;\r\n        s_owners[owner3] = true;\r\n    }\r\n\r\n    modifier multiSig2of3 (uint256 value) {\r\n      require(s_owners[msg.sender] && msg.sender != s_markedForRemoval, 'MultiSig: only owners that are not being removed');\r\n      bytes32 hashedData = keccak256(msg.data);\r\n      s_action.height = block.number;\r\n      if (s_action.owner == address(0)) {\r\n          s_action.owner = msg.sender;\r\n          s_action.data = hashedData;\r\n          s_action.value = value;\r\n          emit MultiSigRequest(msg.sender, sig(msg.data), value, hashedData);\r\n          return;\r\n      }\r\n      require(s_action.owner != msg.sender, 'MultiSig: same owner cannot sign twice');\r\n      require(s_action.value == value, 'MultiSig: must sign the same value');\r\n      require(s_action.data == hashedData, 'MultiSig: must sign the same data');\r\n      s_action.owner = address(0);\r\n      emit MultiSigExecute(msg.sender, sig(msg.data), value, hashedData);\r\n      _;\r\n    }\r\n\r\n    function cancel() external {\r\n      require(s_owners[msg.sender], 'MultiSig: only owners can cancel');\r\n      require(s_markedForRemoval != msg.sender, 'MultiSig: only owners that are not being replaced can cancel');\r\n      s_action.owner = address(0);\r\n      s_markedForRemoval = address(0);\r\n      emit MultiSigCancel(msg.sender);\r\n    }\r\n\r\n    function replaceOwner(address owner, address newOwner) external {\r\n      require(owner != address(0), 'MultiSig: owner cannot be 0');\r\n      require(newOwner != address(0), 'MultiSig: new Owner cannot be 0');\r\n      require(s_owners[owner] == true, 'MultiSig: owner must exist');\r\n      require(owner != msg.sender, \"MultiSig: senders cannot replace themselves\");\r\n      require(s_owners[newOwner] == false, 'MultiSig: new owner must not exist');\r\n      s_markedForRemoval = owner;\r\n      emit MultiSigReplaceOwnerCall(msg.sender, owner, newOwner);\r\n      _replaceOwner(owner, newOwner);\r\n    }\r\n\r\n    function isOwner() external view returns (bool) {\r\n      return s_owners[msg.sender];\r\n    }\r\n\r\n    function sig(bytes calldata data) pure public returns (bytes4) {\r\n      if (data.length < 4) {\r\n        return bytes4(0);\r\n      }\r\n      return(\r\n        data[0] |\r\n        (bytes4(data[1]) >> 8) |\r\n        (bytes4(data[2]) >> 16) |\r\n        (bytes4(data[3]) >> 24)\r\n      );\r\n    }\r\n\r\n    function _replaceOwner(address owner, address newOwner)\r\n      private\r\n      multiSig2of3(0)\r\n    {\r\n      s_owners[owner] = false;\r\n      s_owners[newOwner] = true;\r\n      s_markedForRemoval = address(0);\r\n    }\r\n}\r\n\r\ncontract Wallet is MultiSig {\r\n    address s_target;\r\n\r\n    event Received(address indexed from, uint256 value);\r\n    event Transfered(address indexed to, uint256 value);\r\n    event ContractDeployed(address at);\r\n    event ContractDeployed2(address at);\r\n\r\n    constructor(address owner1, address owner2, address owner3)\r\n        MultiSig(owner1, owner2, owner3)\r\n        public\r\n    {\r\n    }\r\n\r\n    receive () external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    fallback () external multiSig2of3(0) {\r\n        require(s_target != address(0), \"Wallet: no target\");\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            calldatacopy(0x00, 0x00, calldatasize())\r\n            let res := call(\r\n                gas(),\r\n                sload(s_target_slot),\r\n                0x00,\r\n                0x00,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            returndatacopy(0x00, 0x00, returndatasize())\r\n            if res { return(0x00, returndatasize()) }\r\n            revert(0x00, returndatasize())\r\n        }\r\n    }\r\n\r\n    function transferOwnEther_(address payable to, uint256 value)\r\n        external\r\n        multiSig2of3(0)\r\n    {\r\n        to.transfer(value);\r\n        emit Transfered(to, value);\r\n    }\r\n\r\n    function deployContract_(bytes memory bytecode) external multiSig2of3(0) returns (address addr) {\r\n        require(bytecode.length != 0, \"Wallet: bytecode length is zero\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\r\n            if iszero(extcodesize(addr)) { revert(0, 0) }\r\n        }\r\n        emit ContractDeployed(addr);\r\n    }\r\n\r\n    function deployContract2_(bytes memory bytecode, bytes32 salt) external multiSig2of3(0) returns (address addr) {\r\n        require(bytecode.length != 0, \"Wallet: bytecode length is zero\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            addr := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\r\n            if iszero(extcodesize(addr)) { revert(0, 0) }\r\n        }\r\n        emit ContractDeployed2(addr);\r\n    }\r\n\r\n    function setOwnTarget_(address target) external multiSig2of3(0) {\r\n        s_target = target;\r\n    }\r\n\r\n    function getOwnTarget_() external view returns (address) {\r\n        return s_target;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"at\",\"type\":\"address\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"at\",\"type\":\"address\"}],\"name\":\"ContractDeployed2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"MultiSigCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashedData\",\"type\":\"bytes32\"}],\"name\":\"MultiSigExecute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MultiSigReplaceOwnerCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashedData\",\"type\":\"bytes32\"}],\"name\":\"MultiSigRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfered\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"deployContract2_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"}],\"name\":\"deployContract_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnTarget_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setOwnTarget_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferOwnEther_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Wallet","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000f6386a69136866f456dd35f44da22d6754216110000000000000000000000002202401629c25d22d29e4defd10aa884f1abb0110000000000000000000000001e3d00e4c9da113fc8a5a69e3cb4a7860f264b2d","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8cddf68973109f23a781d2e1b4e78cee76cbb2943e2d90d6f9be770027842d3e"}]}