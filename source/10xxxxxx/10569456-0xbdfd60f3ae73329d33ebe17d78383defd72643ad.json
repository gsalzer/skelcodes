{"status":"1","message":"OK","result":[{"SourceCode":"/**\nSupport UBI! https://github.com/GoodDollar/GoodContracts\n*/\n\npragma solidity >0.5.4;\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title Reputation system\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\n * A reputation is use to assign influence measure to a DAO'S peers.\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\n * The Reputation contract maintain a map of address to reputation value.\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\n */\ncontract Reputation is Ownable {\n\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\n    // Event indicating minting of reputation to an address.\n    event Mint(address indexed _to, uint256 _amount);\n    // Event indicating burning of reputation for an address.\n    event Burn(address indexed _from, uint256 _amount);\n\n      /// @dev `Checkpoint` is the structure that attaches a block number to a\n      ///  given value, the block number attached is the one that last changed the\n      ///  value\n    struct Checkpoint {\n\n    // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n          // `value` is the amount of reputation at a specific block number\n        uint128 value;\n    }\n\n      // `balances` is the map that tracks the balance of each address, in this\n      //  contract when the balance changes the block number that the change\n      //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n      // Tracks the history of the `totalSupply` of the reputation\n    Checkpoint[] totalSupplyHistory;\n\n    /// @notice Constructor to create a Reputation\n    constructor(\n    ) public\n    {\n    }\n\n    /// @dev This function makes it easy to get the total number of reputation\n    /// @return The total number of reputation\n    function totalSupply() public view returns (uint256) {\n        return totalSupplyAt(block.number);\n    }\n\n  ////////////////\n  // Query balance and totalSupply in History\n  ////////////////\n    /**\n    * @dev return the reputation amount of a given owner\n    * @param _owner an address of the owner which we want to get his reputation\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n      /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n      /// @param _owner The address from which the balance will be retrieved\n      /// @param _blockNumber The block number when the balance is queried\n      /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint256 _blockNumber)\n    public view returns (uint256)\n    {\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n            return 0;\n          // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n      /// @notice Total amount of reputation at a specific `_blockNumber`.\n      /// @param _blockNumber The block number when the totalSupply is queried\n      /// @return The total amount of reputation at `_blockNumber`\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            return 0;\n          // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n      /// @notice Generates `_amount` reputation that are assigned to `_owner`\n      /// @param _user The address that will be assigned the new reputation\n      /// @param _amount The quantity of reputation generated\n      /// @return True if the reputation are generated correctly\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint256 previousBalanceTo = balanceOf(_user);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\n        emit Mint(_user, _amount);\n        return true;\n    }\n\n      /// @notice Burns `_amount` reputation from `_owner`\n      /// @param _user The address that will lose the reputation\n      /// @param _amount The quantity of reputation to burn\n      /// @return True if the reputation are burned correctly\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        uint256 amountBurned = _amount;\n        uint256 previousBalanceFrom = balanceOf(_user);\n        if (previousBalanceFrom < amountBurned) {\n            amountBurned = previousBalanceFrom;\n        }\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\n        emit Burn(_user, amountBurned);\n        return true;\n    }\n\n  ////////////////\n  // Internal helper functions to query and set a value in a snapshot array\n  ////////////////\n\n      /// @dev `getValueAt` retrieves the number of reputation at a given block number\n      /// @param checkpoints The history of values being queried\n      /// @param _block The block number to retrieve the value at\n      /// @return The number of reputation being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\n        if (checkpoints.length == 0) {\n            return 0;\n        }\n\n          // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\n            return checkpoints[checkpoints.length-1].value;\n        }\n        if (_block < checkpoints[0].fromBlock) {\n            return 0;\n        }\n\n          // Binary search of the value in the array\n        uint256 min = 0;\n        uint256 max = checkpoints.length-1;\n        while (max > min) {\n            uint256 mid = (max + min + 1) / 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n      /// @dev `updateValueAtNow` used to update the `balances` map and the\n      ///  `totalSupplyHistory`\n      /// @param checkpoints The history of data being updated\n      /// @param _value The new number of reputation\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\n        require(uint128(_value) == _value); //check value is in the 128 bits bounderies\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n            newCheckPoint.fromBlock = uint128(block.number);\n            newCheckPoint.value = uint128(_value);\n        } else {\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n            oldCheckPoint.value = uint128(_value);\n        }\n    }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n/**\n * @title DAOToken, base on zeppelin contract.\n * @dev ERC20 compatible token. It is a mintable, burnable token.\n */\ncontract DAOToken is ERC20, ERC20Burnable, Ownable {\n\n    string public name;\n    string public symbol;\n    // solhint-disable-next-line const-name-snakecase\n    uint8 public constant decimals = 18;\n    uint256 public cap;\n\n    /**\n    * @dev Constructor\n    * @param _name - token name\n    * @param _symbol - token symbol\n    * @param _cap - token cap - 0 value means no cap\n    */\n    constructor(string memory _name, string memory _symbol, uint256 _cap)\n    public {\n        name = _name;\n        symbol = _symbol;\n        cap = _cap;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     */\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\n        if (cap > 0)\n            require(totalSupply().add(_amount) <= cap);\n        _mint(_to, _amount);\n        return true;\n    }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/*\n\nSafeERC20 by daostack.\nThe code is based on a fix by SECBIT Team.\n\nUSE WITH CAUTION & NO WARRANTY\n\nREFERENCE & RELATED READING\n- https://github.com/ethereum/solidity/issues/4116\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\n\n*/\nlibrary SafeERC20 {\n    using Address for address;\n\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero.\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n}\n\n/**\n * @title An Avatar holds tokens, reputation and ether for a controller\n */\ncontract Avatar is Ownable {\n    using SafeERC20 for address;\n\n    string public orgName;\n    DAOToken public nativeToken;\n    Reputation public nativeReputation;\n\n    event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);\n    event SendEther(uint256 _amountInWei, address indexed _to);\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);\n    event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);\n    event ReceiveEther(address indexed _sender, uint256 _value);\n    event MetaData(string _metaData);\n\n    /**\n    * @dev the constructor takes organization name, native token and reputation system\n    and creates an avatar for a controller\n    */\n    constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\n        orgName = _orgName;\n        nativeToken = _nativeToken;\n        nativeReputation = _nativeReputation;\n    }\n\n    /**\n    * @dev enables an avatar to receive ethers\n    */\n    function() external payable {\n        emit ReceiveEther(msg.sender, msg.value);\n    }\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @param _value value (ETH) to transfer with the transaction\n    * @return bool    success or fail\n    *         bytes - the return bytes of the called contract's function.\n    */\n    function genericCall(address _contract, bytes memory _data, uint256 _value)\n    public\n    onlyOwner\n    returns(bool success, bytes memory returnValue) {\n      // solhint-disable-next-line avoid-call-value\n        (success, returnValue) = _contract.call.value(_value)(_data);\n        emit GenericCall(_contract, _data, _value, success);\n    }\n\n    /**\n    * @dev send ethers from the avatar's wallet\n    * @param _amountInWei amount to send in Wei units\n    * @param _to send the ethers to this address\n    * @return bool which represents success\n    */\n    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {\n        _to.transfer(_amountInWei);\n        emit SendEther(_amountInWei, _to);\n        return true;\n    }\n\n    /**\n    * @dev external token transfer\n    * @param _externalToken the token contract\n    * @param _to the destination address\n    * @param _value the amount of tokens to transfer\n    * @return bool which represents success\n    */\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)\n    public onlyOwner returns(bool)\n    {\n        address(_externalToken).safeTransfer(_to, _value);\n        emit ExternalTokenTransfer(address(_externalToken), _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev external token transfer from a specific account\n    * @param _externalToken the token contract\n    * @param _from the account to spend token from\n    * @param _to the destination address\n    * @param _value the amount of tokens to transfer\n    * @return bool which represents success\n    */\n    function externalTokenTransferFrom(\n        IERC20 _externalToken,\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public onlyOwner returns(bool)\n    {\n        address(_externalToken).safeTransferFrom(_from, _to, _value);\n        emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)\n    public onlyOwner returns(bool)\n    {\n        address(_externalToken).safeApprove(_spender, _value);\n        emit ExternalTokenApproval(address(_externalToken), _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\n    * @param _metaData a string representing a hash of the meta data\n    * @return bool which represents a success\n    */\n    function metaData(string memory _metaData) public onlyOwner returns(bool) {\n        emit MetaData(_metaData);\n        return true;\n    }\n\n\n}\n\ncontract GlobalConstraintInterface {\n\n    enum CallPhase { Pre, Post, PreAndPost }\n\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n    /**\n     * @dev when return if this globalConstraints is pre, post or both.\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\n     */\n    function when() public returns(CallPhase);\n}\n\n/**\n * @title Controller contract\n * @dev A controller controls the organizations tokens ,reputation and avatar.\n * It is subject to a set of schemes and constraints that determine its behavior.\n * Each scheme has it own parameters and operation permissions.\n */\ninterface ControllerInterface {\n\n    /**\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n     * @param  _amount amount of reputation to mint\n     * @param _to beneficiary address\n     * @return bool which represents a success\n    */\n    function mintReputation(uint256 _amount, address _to, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev Burns `_amount` of reputation from `_from`\n     * @param _amount amount of reputation to burn\n     * @param _from The address that will lose the reputation\n     * @return bool which represents a success\n     */\n    function burnReputation(uint256 _amount, address _from, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev mint tokens .\n     * @param  _amount amount of token to mint\n     * @param _beneficiary beneficiary address\n     * @param _avatar address\n     * @return bool which represents a success\n     */\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\n    external\n    returns(bool);\n\n  /**\n   * @dev register or update a scheme\n   * @param _scheme the address of the scheme\n   * @param _paramsHash a hashed configuration of the usage of the scheme\n   * @param _permissions the permissions the new scheme will have\n   * @param _avatar address\n   * @return bool which represents a success\n   */\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev unregister a scheme\n     * @param _avatar address\n     * @param _scheme the address of the scheme\n     * @return bool which represents a success\n     */\n    function unregisterScheme(address _scheme, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev unregister the caller's scheme\n     * @param _avatar address\n     * @return bool which represents a success\n     */\n    function unregisterSelf(address _avatar) external returns(bool);\n\n    /**\n     * @dev add or update Global Constraint\n     * @param _globalConstraint the address of the global constraint to be added.\n     * @param _params the constraint parameters hash.\n     * @param _avatar the avatar of the organization\n     * @return bool which represents a success\n     */\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\n    external returns(bool);\n\n    /**\n     * @dev remove Global Constraint\n     * @param _globalConstraint the address of the global constraint to be remove.\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\n    external  returns(bool);\n\n  /**\n    * @dev upgrade the Controller\n    *      The function will trigger an event 'UpgradeController'.\n    * @param  _newController the address of the new controller.\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function upgradeController(address _newController, Avatar _avatar)\n    external returns(bool);\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @param _avatar the controller's avatar address\n    * @param _value value (ETH) to transfer with the transaction\n    * @return bool -success\n    *         bytes  - the return value of the called _contract's function.\n    */\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\n    external\n    returns(bool, bytes memory);\n\n  /**\n   * @dev send some ether\n   * @param _amountInWei the amount of ether (in Wei) to send\n   * @param _to address of the beneficiary\n   * @param _avatar address\n   * @return bool which represents a success\n   */\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\n    external returns(bool);\n\n    /**\n    * @dev send some amount of arbitrary ERC20 Tokens\n    * @param _externalToken the address of the Token Contract\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev transfer token \"from\" address \"to\" address\n    *      One must to approve the amount of tokens which can be spend from the\n    *      \"from\" account.This can be done using externalTokenApprove.\n    * @param _externalToken the address of the Token Contract\n    * @param _from address of the account to send from\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenTransferFrom(\n    IERC20 _externalToken,\n    address _from,\n    address _to,\n    uint256 _value,\n    Avatar _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\n    * @param _metaData a string representing a hash of the meta data\n    * @param _avatar Avatar\n    * @return bool which represents a success\n    */\n    function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);\n\n    /**\n     * @dev getNativeReputation\n     * @param _avatar the organization avatar.\n     * @return organization native reputation\n     */\n    function getNativeReputation(address _avatar)\n    external\n    view\n    returns(address);\n\n    function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);\n\n    function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);\n\n    function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);\n\n    function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);\n\n    /**\n     * @dev globalConstraintsCount return the global constraint pre and post count\n     * @return uint256 globalConstraintsPre count.\n     * @return uint256 globalConstraintsPost count.\n     */\n    function globalConstraintsCount(address _avatar) external view returns(uint, uint);\n\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);\n}\n\n/* @dev abstract contract for ensuring that schemes have been registered properly\n * Allows setting zero Avatar in situations where the Avatar hasn't been created yet\n */\ncontract SchemeGuard is Ownable {\n    Avatar avatar;\n    ControllerInterface internal controller = ControllerInterface(0);\n\n    /** @dev Constructor. only sets controller if given avatar is not null.\n     * @param _avatar The avatar of the DAO.\n     */\n    constructor(Avatar _avatar) public {\n        avatar = _avatar;\n\n        if (avatar != Avatar(0)) {\n            controller = ControllerInterface(avatar.owner());\n        }\n    }\n\n    /** @dev modifier to check if caller is avatar\n     */\n    modifier onlyAvatar() {\n        require(address(avatar) == msg.sender, \"only Avatar can call this method\");\n        _;\n    }\n\n    /** @dev modifier to check if scheme is registered\n     */\n    modifier onlyRegistered() {\n        require(isRegistered(), \"Scheme is not registered\");\n        _;\n    }\n\n    /** @dev modifier to check if scheme is not registered\n     */\n    modifier onlyNotRegistered() {\n        require(!isRegistered(), \"Scheme is registered\");\n        _;\n    }\n\n    /** @dev modifier to check if call is a scheme that is registered\n     */\n    modifier onlyRegisteredCaller() {\n        require(isRegistered(msg.sender), \"Calling scheme is not registered\");\n        _;\n    }\n\n    /** @dev Function to set a new avatar and controller for scheme\n     * can only be done by owner of scheme\n     */\n    function setAvatar(Avatar _avatar) public onlyOwner {\n        avatar = _avatar;\n        controller = ControllerInterface(avatar.owner());\n    }\n\n    /** @dev function to see if an avatar has been set and if this scheme is registered\n     * @return true if scheme is registered\n     */\n    function isRegistered() public view returns (bool) {\n        return isRegistered(address(this));\n    }\n\n    /** @dev function to see if an avatar has been set and if this scheme is registered\n     * @return true if scheme is registered\n     */\n    function isRegistered(address scheme) public view returns (bool) {\n        require(avatar != Avatar(0), \"Avatar is not set\");\n\n        if (!(controller.isSchemeRegistered(scheme, address(avatar)))) {\n            return false;\n        }\n        return true;\n    }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n/**\r\n * @title Contract managing the identity admin role\r\n */\ncontract IdentityAdminRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event IdentityAdminAdded(address indexed account);\r\n    event IdentityAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private IdentityAdmins;\r\n\r\n    /* @dev constructor. Adds caller as an admin\r\n     */\r\n    constructor() internal {\r\n        _addIdentityAdmin(msg.sender);\r\n    }\r\n\r\n    /* @dev Modifier to check if caller is an admin\r\n     */\r\n    modifier onlyIdentityAdmin() {\r\n        require(isIdentityAdmin(msg.sender), \"not IdentityAdmin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if account is identity admin\r\n     * @param account Account to check\r\n     * @return Boolean indicating if account is identity admin\r\n     */\r\n    function isIdentityAdmin(address account) public view returns (bool) {\r\n        return IdentityAdmins.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a identity admin account. Is only callable by owner.\r\n     * @param account Address to be added\r\n     * @return true if successful\r\n     */\r\n    function addIdentityAdmin(address account) public onlyOwner returns (bool) {\r\n        _addIdentityAdmin(account);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a identity admin account. Is only callable by owner.\r\n     * @param account Address to be removed\r\n     * @return true if successful\r\n     */\r\n    function removeIdentityAdmin(address account) public onlyOwner returns (bool) {\r\n        _removeIdentityAdmin(account);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows an admin to renounce their role\r\n     */\r\n    function renounceIdentityAdmin() public {\r\n        _removeIdentityAdmin(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal implementation of addIdentityAdmin\r\n     */\r\n    function _addIdentityAdmin(address account) internal {\r\n        IdentityAdmins.add(account);\r\n        emit IdentityAdminAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal implementation of removeIdentityAdmin\r\n     */\r\n    function _removeIdentityAdmin(address account) internal {\r\n        IdentityAdmins.remove(account);\r\n        emit IdentityAdminRemoved(account);\r\n    }\r\n}\n\n/* @title Identity contract responsible for whitelisting\n * and keeping track of amount of whitelisted users\n */\ncontract Identity is IdentityAdminRole, SchemeGuard, Pausable {\n    using Roles for Roles.Role;\n    using SafeMath for uint256;\n\n    Roles.Role private blacklist;\n    Roles.Role private whitelist;\n    Roles.Role private contracts;\n\n    uint256 public whitelistedCount = 0;\n    uint256 public whitelistedContracts = 0;\n    uint256 public authenticationPeriod = 14;\n\n    mapping(address => uint256) public dateAuthenticated;\n    mapping(address => uint256) public dateAdded;\n\n    mapping(address => string) public addrToDID;\n    mapping(bytes32 => address) public didHashToAddress;\n\n    event BlacklistAdded(address indexed account);\n    event BlacklistRemoved(address indexed account);\n\n    event WhitelistedAdded(address indexed account);\n    event WhitelistedRemoved(address indexed account);\n\n    event ContractAdded(address indexed account);\n    event ContractRemoved(address indexed account);\n\n    constructor() public SchemeGuard(Avatar(0)) {}\n\n    /* @dev Sets a new value for authenticationPeriod.\n     * Can only be called by Identity Administrators.\n     * @param period new value for authenticationPeriod\n     */\n    function setAuthenticationPeriod(uint256 period) public onlyOwner whenNotPaused {\n        authenticationPeriod = period;\n    }\n\n    /* @dev Sets the authentication date of `account`\n     * to the current time.\n     * Can only be called by Identity Administrators.\n     * @param account address to change its auth date\n     */\n    function authenticate(address account)\n        public\n        onlyRegistered\n        onlyIdentityAdmin\n        whenNotPaused\n    {\n        dateAuthenticated[account] = now;\n    }\n\n    /* @dev Adds an address as whitelisted.\n     * Can only be called by Identity Administrators.\n     * @param account address to add as whitelisted\n     */\n    function addWhitelisted(address account)\n        public\n        onlyRegistered\n        onlyIdentityAdmin\n        whenNotPaused\n    {\n        _addWhitelisted(account);\n    }\n\n    /* @dev Adds an address as whitelisted under a specific ID\n     * @param account The address to add\n     * @param did the ID to add account under\n     */\n    function addWhitelistedWithDID(address account, string memory did)\n        public\n        onlyRegistered\n        onlyIdentityAdmin\n        whenNotPaused\n    {\n        _addWhitelistedWithDID(account, did);\n    }\n\n    /* @dev Removes an address as whitelisted.\n     * Can only be called by Identity Administrators.\n     * @param account address to remove as whitelisted\n     */\n    function removeWhitelisted(address account)\n        public\n        onlyRegistered\n        onlyIdentityAdmin\n        whenNotPaused\n    {\n        _removeWhitelisted(account);\n    }\n\n    /* @dev Renounces message sender from whitelisted\n     */\n    function renounceWhitelisted() public whenNotPaused {\n        _removeWhitelisted(msg.sender);\n    }\n\n    /* @dev Returns true if given address has been added to whitelist\n     * @param account the address to check\n     * @return a bool indicating weather the address is present in whitelist\n     */\n    function isWhitelisted(address account) public view returns (bool) {\n        uint256 daysSinceAuthentication = (now.sub(dateAuthenticated[account])) / 1 days;\n        return\n            (daysSinceAuthentication <= authenticationPeriod) && whitelist.has(account);\n    }\n\n    /* @dev Function that gives the date the given user was added\n     * @param account The address to check\n     * @return The date the address was added\n     */\n    function lastAuthenticated(address account) public view returns (uint256) {\n        return dateAuthenticated[account];\n    }\n\n    // /**\n    //  *\n    //  * @dev Function to transfer whitelisted privilege to another address\n    //  * relocates did of sender to give address\n    //  * @param account The address to transfer to\n    //  */\n    // function transferAccount(address account) public whenNotPaused {\n    //     ERC20 token = avatar.nativeToken();\n    //     require(!isBlacklisted(account), \"Cannot transfer to blacklisted\");\n    //     require(token.balanceOf(account) == 0, \"Account is already in use\");\n    //     require(isWhitelisted(msg.sender), \"Requester need to be whitelisted\");\n\n    //     require(\n    //         keccak256(bytes(addrToDID[account])) == keccak256(bytes(\"\")),\n    //         \"address already has DID\"\n    //     );\n\n    //     string memory did = addrToDID[msg.sender];\n    //     bytes32 pHash = keccak256(bytes(did));\n\n    //     uint256 balance = token.balanceOf(msg.sender);\n    //     token.transferFrom(msg.sender, account, balance);\n    //     _removeWhitelisted(msg.sender);\n    //     _addWhitelisted(account);\n    //     addrToDID[account] = did;\n    //     didHashToAddress[pHash] = account;\n    // }\n\n    /* @dev Adds an address to blacklist.\n     * Can only be called by Identity Administrators.\n     * @param account address to add as blacklisted\n     */\n    function addBlacklisted(address account)\n        public\n        onlyRegistered\n        onlyIdentityAdmin\n        whenNotPaused\n    {\n        blacklist.add(account);\n        emit BlacklistAdded(account);\n    }\n\n    /* @dev Removes an address from blacklist\n     * Can only be called by Identity Administrators.\n     * @param account address to remove as blacklisted\n     */\n    function removeBlacklisted(address account)\n        public\n        onlyRegistered\n        onlyIdentityAdmin\n        whenNotPaused\n    {\n        blacklist.remove(account);\n        emit BlacklistRemoved(account);\n    }\n\n    /* @dev Function to add a Contract to list of contracts\n     * @param account The address to add\n     */\n    function addContract(address account)\n        public\n        onlyRegistered\n        onlyIdentityAdmin\n        whenNotPaused\n    {\n        require(isContract(account), \"Given address is not a contract\");\n        contracts.add(account);\n        _addWhitelisted(account);\n\n        emit ContractAdded(account);\n    }\n\n    /* @dev Function to remove a Contract from list of contracts\n     * @param account The address to add\n     */\n    function removeContract(address account)\n        public\n        onlyRegistered\n        onlyIdentityAdmin\n        whenNotPaused\n    {\n        contracts.remove(account);\n        _removeWhitelisted(account);\n\n        emit ContractRemoved(account);\n    }\n\n    /* @dev Function to check if given contract is on list of contracts.\n     * @param address to check\n     * @return a bool indicating if address is on list of contracts\n     */\n    function isDAOContract(address account) public view returns (bool) {\n        return contracts.has(account);\n    }\n\n    /* @dev Internal function to add to whitelisted\n     * @param account the address to add\n     */\n    function _addWhitelisted(address account) internal {\n        whitelist.add(account);\n\n        whitelistedCount += 1;\n        dateAdded[account] = now;\n        dateAuthenticated[account] = now;\n\n        if (isContract(account)) {\n            whitelistedContracts += 1;\n        }\n\n        emit WhitelistedAdded(account);\n    }\n\n    /* @dev Internal whitelisting with did function.\n     * @param account the address to add\n     * @param did the id to register account under\n     */\n    function _addWhitelistedWithDID(address account, string memory did) internal {\n        bytes32 pHash = keccak256(bytes(did));\n        require(didHashToAddress[pHash] == address(0), \"DID already registered\");\n\n        addrToDID[account] = did;\n        didHashToAddress[pHash] = account;\n\n        _addWhitelisted(account);\n    }\n\n    /* @dev Internal function to remove from whitelisted\n     * @param account the address to add\n     */\n    function _removeWhitelisted(address account) internal {\n        whitelist.remove(account);\n\n        whitelistedCount -= 1;\n        delete dateAuthenticated[account];\n\n        if (isContract(account)) {\n            whitelistedContracts -= 1;\n        }\n\n        string memory did = addrToDID[account];\n        bytes32 pHash = keccak256(bytes(did));\n\n        delete dateAuthenticated[account];\n        delete addrToDID[account];\n        delete didHashToAddress[pHash];\n\n        emit WhitelistedRemoved(account);\n    }\n\n    /* @dev Returns true if given address has been added to the blacklist\n     * @param account the address to check\n     * @return a bool indicating weather the address is present in the blacklist\n     */\n    function isBlacklisted(address account) public view returns (bool) {\n        return blacklist.has(account);\n    }\n\n    /* @dev Function to see if given address is a contract\n     * @return true if address is a contract\n     */\n    function isContract(address _addr) internal view returns (bool) {\n        uint256 length;\n        assembly {\n            length := extcodesize(_addr)\n        }\n        return length > 0;\n    }\n}\n\n/* @title The IdentityGuard contract\n * @dev Contract containing an identity and\n * modifiers to ensure proper access\n */\ncontract IdentityGuard is Ownable {\n    Identity public identity;\n\n    /* @dev Constructor. Checks if identity is a zero address\n     * @param _identity The identity contract.\n     */\n    constructor(Identity _identity) public {\n        require(_identity != Identity(0), \"Supplied identity is null\");\n        identity = _identity;\n    }\n\n    /* @dev Modifier that requires the sender to be not blacklisted\n     */\n    modifier onlyNotBlacklisted() {\n        require(!identity.isBlacklisted(msg.sender), \"Caller is blacklisted\");\n        _;\n    }\n\n    /* @dev Modifier that requires the given address to be not blacklisted\n     * @param _account The address to be checked\n     */\n    modifier requireNotBlacklisted(address _account) {\n        require(!identity.isBlacklisted(_account), \"Receiver is blacklisted\");\n        _;\n    }\n\n    /* @dev Modifier that requires the sender to be whitelisted\n     */\n    modifier onlyWhitelisted() {\n        require(identity.isWhitelisted(msg.sender), \"is not whitelisted\");\n        _;\n    }\n\n    /* @dev Modifier that requires the given address to be whitelisted\n     * @param _account the given address\n     */\n    modifier requireWhitelisted(address _account) {\n        require(identity.isWhitelisted(_account), \"is not whitelisted\");\n        _;\n    }\n\n    /* @dev Modifier that requires the sender to be an approved DAO contract\n     */\n    modifier onlyDAOContract() {\n        require(identity.isDAOContract(msg.sender), \"is not whitelisted contract\");\n        _;\n    }\n\n    /* @dev Modifier that requires the given address to be whitelisted\n     * @param _account the given address\n     */\n    modifier requireDAOContract(address _contract) {\n        require(identity.isDAOContract(_contract), \"is not whitelisted contract\");\n        _;\n    }\n\n    /* @dev Modifier that requires the sender to have been whitelisted\n     * before or on the given date\n     * @param date The time sender must have been added before\n     */\n    modifier onlyAddedBefore(uint256 date) {\n        require(\n            identity.lastAuthenticated(msg.sender) <= date,\n            \"Was not added within period\"\n        );\n        _;\n    }\n\n    /* @dev Modifier that requires sender to be an identity admin\n     */\n    modifier onlyIdentityAdmin() {\n        require(identity.isIdentityAdmin(msg.sender), \"not IdentityAdmin\");\n        _;\n    }\n\n    /* @dev Allows owner to set a new identity contract if\n     * the given identity contract has been registered as a scheme\n     */\n    function setIdentity(Identity _identity) public onlyOwner {\n        require(_identity.isRegistered(), \"Identity is not registered\");\n        identity = _identity;\n    }\n}\n\n/**\n * @dev Contract for letting scheme add itself to identity\n * to allow transferring GoodDollar without paying fees\n * and transfer ownership to Avatar\n */\ncontract FeelessScheme is SchemeGuard, IdentityGuard {\n    /* @dev Constructor\n     * @param _identity The identity contract\n     * @param _avatar The avatar of the DAO\n     */\n    constructor(Identity _identity, Avatar _avatar)\n        public\n        SchemeGuard(_avatar)\n        IdentityGuard(_identity)\n    {}\n\n    /* @dev Internal function to add contract to identity.\n     * Can only be called if scheme is registered.\n     */\n    function addRights() internal onlyRegistered {\n        controller.genericCall(\n            address(identity),\n            abi.encodeWithSignature(\"addContract(address)\", address(this)),\n            avatar,\n            0\n        );\n        transferOwnership(address(avatar));\n    }\n\n    /* @dev Internal function to remove contract from identity.\n     * Can only be called if scheme is registered.\n     */\n    function removeRights() internal onlyRegistered {\n        controller.genericCall(\n            address(identity),\n            abi.encodeWithSignature(\"removeContract(address)\", address(this)),\n            avatar,\n            0\n        );\n    }\n}\n\n/* @title Abstract contract responsible for ensuring a scheme is only usable within a set period\n */\ncontract ActivePeriod {\n    uint256 public periodStart;\n    uint256 public periodEnd;\n\n    bool public isActive;\n\n    Avatar avatar;\n\n    event SchemeStarted(address indexed by, uint256 time);\n    event SchemeEnded(address indexed by, uint256 time);\n\n    /* @dev modifier that requires scheme to be active\n     */\n    modifier requireActive() {\n        require(isActive, \"is not active\");\n        _;\n    }\n\n    /* @dev modifier that requires scheme to not be active\n     */\n    modifier requireNotActive() {\n        require(!isActive, \"cannot start twice\");\n        _;\n    }\n\n    /* @dev modifier that requires current time to be after period start and before period end\n     */\n    modifier requireInPeriod() {\n        require(now >= periodStart && now < periodEnd, \"not in period\");\n        _;\n    }\n\n    /* @dev modifier that requires current time to be after period end\n     */\n    modifier requirePeriodEnd() {\n        require(now >= periodEnd, \"period has not ended\");\n        _;\n    }\n\n    /* @dev Constructor. requires end period to be larger than start period\n     * Sets local period parameters and sets isActive to false\n     * @param _periodStart The time from when the contract can be started\n     * @param _periodEnd The time from when the contract can be ended\n     * @param _avatar DAO avatar\n     */\n    constructor(\n        uint256 _periodStart,\n        uint256 _periodEnd,\n        Avatar _avatar\n    ) public {\n        require(_periodStart < _periodEnd, \"start cannot be after nor equal to end\");\n\n        periodStart = _periodStart;\n        periodEnd = _periodEnd;\n        avatar = _avatar;\n\n        isActive = false;\n    }\n\n    /* @dev Function to start scheme. Must be inactive and within period.\n     * Sets isActive to true and emits event with address that started and\n     * current time.\n     */\n    function start() public requireInPeriod requireNotActive {\n        isActive = true;\n        emit SchemeStarted(msg.sender, now);\n    }\n\n    /* @dev Function to end scheme. Must be after assigned period end.\n     * Calls internal function internalEnd, passing along the avatar\n     * @param _avatar the avatar of the dao\n     */\n    function end() public requirePeriodEnd {\n        return internalEnd(avatar);\n    }\n\n    /* @dev internal end function. Must be active to run.\n     * Sets contract to inactive, emits an event with caller and\n     * current time, and self-destructs the contract, transferring any\n     * eth in the contract to the avatar address\n     * @param _avatar the avatar of the dao\n     */\n    function internalEnd(Avatar _avatar) internal requireActive {\n        isActive = false;\n        emit SchemeEnded(msg.sender, now);\n        selfdestruct(address(_avatar));\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n/// math.sol -- mixin for inline numerical wizardry\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n/**\n * @title Fee formula abstract contract\n */\ncontract AbstractFees is SchemeGuard {\n    constructor() public SchemeGuard(Avatar(0)) {}\n\n    function getTxFees(\n        uint256 _value,\n        address _sender,\n        address _recipient\n    ) public view returns (uint256, bool);\n}\n\n/**\n * @title Fee formula contract\n * contract that provides a function to calculate\n * fees as a percentage of any given value\n */\ncontract FeeFormula is AbstractFees {\n    using SafeMath for uint256;\n\n    uint256 public percentage;\n    bool public constant senderPays = false;\n\n    /**\n     * @dev Constructor. Requires the given percentage parameter\n     * to be less than 100.\n     * @param _percentage the percentage to calculate fees of\n     */\n    constructor(uint256 _percentage) public {\n        require(_percentage < 100, \"Percentage should be <100\");\n        percentage = _percentage;\n    }\n\n    /**  @dev calculates the fee of given value.\n     * @param _value the value of the transaction to calculate fees from\n     * @param _sender address sending.\n     *  @param _recipient address receiving.\n     * @return the transactional fee for given value\n     */\n    function getTxFees(\n        uint256 _value,\n        address _sender,\n        address _recipient\n    ) public view returns (uint256, bool) {\n        return (_value.mul(percentage).div(100), senderPays);\n    }\n}\n\n/* @title Contract in charge of setting registered fee formula schemes to contract\n */\ncontract FormulaHolder is Ownable {\n    AbstractFees public formula;\n\n    /* @dev Constructor. Requires that given formula is a valid contract.\n     * @param _formula The fee formula contract.\n     */\n    constructor(AbstractFees _formula) public {\n        require(_formula != AbstractFees(0), \"Supplied formula is null\");\n        formula = _formula;\n    }\n\n    /* @dev Sets the given fee formula contract. Is only callable by owner.\n     * Reverts if formula has not been registered by DAO.\n     * @param _formula the new fee formula scheme\n     */\n    function setFormula(AbstractFees _formula) public onlyOwner {\n        _formula.isRegistered();\n        formula = _formula;\n    }\n}\n\n/* @title ERC677 interface\n */\ninterface ERC677 {\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n    function transferAndCall(\n        address,\n        uint256,\n        bytes calldata\n    ) external returns (bool);\n}\n\n/* @title ERC677Receiver interface\n */\ninterface ERC677Receiver {\n    function onTokenTransfer(\n        address _from,\n        uint256 _value,\n        bytes calldata _data\n    ) external returns (bool);\n}\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n/* @title ERC677Token contract.\n */\ncontract ERC677Token is ERC677, DAOToken, ERC20Pausable {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _cap\n    ) public DAOToken(_name, _symbol, _cap) {}\n\n    /**\n     * @dev transfer token to a contract address with additional data if the recipient is a contact.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     * @param _data The extra data to be passed to the receiving contract.\n     * @return true if transfer is successful\n     */\n    function _transferAndCall(\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) internal whenNotPaused returns (bool) {\n        bool res = super.transfer(_to, _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n\n        if (isContract(_to)) {\n            require(contractFallback(_to, _value, _data), \"Contract fallback failed\");\n        }\n        return res;\n    }\n\n    /* @dev Contract fallback function. Is called if transferAndCall is called\n     * to a contract\n     */\n    function contractFallback(\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) private returns (bool) {\n        ERC677Receiver receiver = ERC677Receiver(_to);\n        require(\n            receiver.onTokenTransfer(msg.sender, _value, _data),\n            \"Contract Fallback failed\"\n        );\n        return true;\n    }\n\n    /* @dev Function to check if given address is a contract\n     * @param _addr Address to check\n     * @return true if given address is a contract\n     */\n\n    function isContract(address _addr) internal view returns (bool) {\n        uint256 length;\n        assembly {\n            length := extcodesize(_addr)\n        }\n        return length > 0;\n    }\n}\n\ncontract ERC677BridgeToken is ERC677Token, MinterRole {\n    address public bridgeContract;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _cap\n    ) public ERC677Token(_name, _symbol, _cap) {}\n\n    function setBridgeContract(address _bridgeContract) public onlyMinter {\n        require(\n            _bridgeContract != address(0) && isContract(_bridgeContract),\n            \"Invalid bridge contract\"\n        );\n        bridgeContract = _bridgeContract;\n    }\n}\n\n/**\n * @title The GoodDollar ERC677 token contract\n */\ncontract GoodDollar is ERC677BridgeToken, IdentityGuard, FormulaHolder {\n    address feeRecipient;\n\n    // Overrides hard-coded decimal in DAOToken\n    uint256 public constant decimals = 2;\n\n    /**\n     * @dev constructor\n     * @param _name The name of the token\n     * @param _symbol The symbol of the token\n     * @param _cap the cap of the token. no cap if 0\n     * @param _formula the fee formula contract\n     * @param _identity the identity contract\n     * @param _feeRecipient the address that receives transaction fees\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _cap,\n        AbstractFees _formula,\n        Identity _identity,\n        address _feeRecipient\n    )\n        public\n        ERC677BridgeToken(_name, _symbol, _cap)\n        IdentityGuard(_identity)\n        FormulaHolder(_formula)\n    {\n        feeRecipient = _feeRecipient;\n    }\n\n    /**\n     * @dev Processes fees from given value and sends\n     * remainder to given address\n     * @param to the address to be sent to\n     * @param value the value to be processed and then\n     * transferred\n     * @return a boolean that indicates if the operation was successful\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        uint256 bruttoValue = processFees(msg.sender, to, value);\n        return super.transfer(to, bruttoValue);\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified\n     * amount of tokens on behalf of msg.sender\n     * @param spender The address which will spend the funds\n     * @param value The amount of tokens to be spent\n     * @return a boolean that indicates if the operation was successful\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param from The address which you want to send tokens from\n     * @param to The address which you want to transfer to\n     * @param value the amount of tokens to be transferred\n     * @return a boolean that indicates if the operation was successful\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public returns (bool) {\n        uint256 bruttoValue = processFees(from, to, value);\n        return super.transferFrom(from, to, bruttoValue);\n    }\n\n    /**\n     * @dev Processes transfer fees and calls ERC677Token transferAndCall function\n     * @param to address to transfer to\n     * @param value the amount to transfer\n     * @param data The data to pass to transferAndCall\n     * @return a bool indicating if transfer function succeeded\n     */\n    function transferAndCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bool) {\n        uint256 bruttoValue = processFees(msg.sender, to, value);\n        return super._transferAndCall(to, bruttoValue, data);\n    }\n\n    /**\n     * @dev Minting function\n     * @param to the address that will receive the minted tokens\n     * @param value the amount of tokens to mint\n     * @return a boolean that indicated if the operation was successful\n     */\n    function mint(address to, uint256 value)\n        public\n        onlyMinter\n        requireNotBlacklisted(to)\n        returns (bool)\n    {\n        if (cap > 0) {\n            require(totalSupply().add(value) <= cap, \"Cannot increase supply beyond cap\");\n        }\n        super._mint(to, value);\n        return true;\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public onlyNotBlacklisted {\n        super.burn(value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value)\n        public\n        onlyNotBlacklisted\n        requireNotBlacklisted(from)\n    {\n        super.burnFrom(from, value);\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allows a spender\n     * @param spender The address which will spend the funds\n     * @param addedValue The amount of tokens to increase the allowance by\n     * @return a boolean that indicated if the operation was successful\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        returns (bool)\n    {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender\n     * @param spender The address which will spend the funds\n     * @param subtractedValue The amount of tokens to decrease the allowance by\n     * @return a boolean that indicated if the operation was successful\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        returns (bool)\n    {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n\n    /**\n     * @dev Gets the current transaction fees\n     * @return an uint256 that represents\n     * the current transaction fees\n     */\n    function getFees(uint256 value) public view returns (uint256, bool) {\n        return formula.getTxFees(value, address(0), address(0));\n    }\n\n    /**\n     * @dev Gets the current transaction fees\n     * @return an uint256 that represents\n     * the current transaction fees\n     */\n    function getFees(\n        uint256 value,\n        address sender,\n        address recipient\n    ) public view returns (uint256, bool) {\n        return formula.getTxFees(value, sender, recipient);\n    }\n\n    /**\n     * @dev Sets the address that receives the transactional fees.\n     * can only be called by owner\n     * @param _feeRecipient The new address to receive transactional fees\n     */\n    function setFeeRecipient(address _feeRecipient) public onlyOwner {\n        feeRecipient = _feeRecipient;\n    }\n\n    /**\n     * @dev Sends transactional fees to feeRecipient address from given address\n     * @param account The account that sends the fees\n     * @param value The amount to subtract fees from\n     * @return an uint256 that represents the given value minus the transactional fees\n     */\n    function processFees(\n        address account,\n        address recipient,\n        uint256 value\n    ) internal returns (uint256) {\n        (uint256 txFees, bool senderPays) = getFees(value, account, recipient);\n        if (txFees > 0 && !identity.isDAOContract(msg.sender)) {\n            require(\n                senderPays == false || value.add(txFees) <= balanceOf(account),\n                \"Not enough balance to pay TX fee\"\n            );\n            if (account == msg.sender) {\n                super.transfer(feeRecipient, txFees);\n            } else {\n                super.transferFrom(account, feeRecipient, txFees);\n            }\n\n            return senderPays ? value : value.sub(txFees);\n        }\n        return value;\n    }\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract BancorFormula {\n    using SafeMath for uint256;\n\n    uint16 public version = 6;\n\n    uint256 private constant ONE = 1;\n    uint32 private constant MAX_RATIO = 1000000;\n    uint8 private constant MIN_PRECISION = 32;\n    uint8 private constant MAX_PRECISION = 127;\n\n    /**\n     * Auto-generated via 'PrintIntScalingFactors.py'\n     */\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\n\n    /**\n     * Auto-generated via 'PrintLn2ScalingFactors.py'\n     */\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\n    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\n\n    /**\n     * Auto-generated via 'PrintFunctionOptimalLog.py' and 'PrintFunctionOptimalExp.py'\n     */\n    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\n    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\n\n    /**\n     * Auto-generated via 'PrintFunctionConstructor.py'\n     */\n    uint256[128] private maxExpArray;\n\n    constructor() public {\n        //  maxExpArray[  0] = 0x6bffffffffffffffffffffffffffffffff;\n        //  maxExpArray[  1] = 0x67ffffffffffffffffffffffffffffffff;\n        //  maxExpArray[  2] = 0x637fffffffffffffffffffffffffffffff;\n        //  maxExpArray[  3] = 0x5f6fffffffffffffffffffffffffffffff;\n        //  maxExpArray[  4] = 0x5b77ffffffffffffffffffffffffffffff;\n        //  maxExpArray[  5] = 0x57b3ffffffffffffffffffffffffffffff;\n        //  maxExpArray[  6] = 0x5419ffffffffffffffffffffffffffffff;\n        //  maxExpArray[  7] = 0x50a2ffffffffffffffffffffffffffffff;\n        //  maxExpArray[  8] = 0x4d517fffffffffffffffffffffffffffff;\n        //  maxExpArray[  9] = 0x4a233fffffffffffffffffffffffffffff;\n        //  maxExpArray[ 10] = 0x47165fffffffffffffffffffffffffffff;\n        //  maxExpArray[ 11] = 0x4429afffffffffffffffffffffffffffff;\n        //  maxExpArray[ 12] = 0x415bc7ffffffffffffffffffffffffffff;\n        //  maxExpArray[ 13] = 0x3eab73ffffffffffffffffffffffffffff;\n        //  maxExpArray[ 14] = 0x3c1771ffffffffffffffffffffffffffff;\n        //  maxExpArray[ 15] = 0x399e96ffffffffffffffffffffffffffff;\n        //  maxExpArray[ 16] = 0x373fc47fffffffffffffffffffffffffff;\n        //  maxExpArray[ 17] = 0x34f9e8ffffffffffffffffffffffffffff;\n        //  maxExpArray[ 18] = 0x32cbfd5fffffffffffffffffffffffffff;\n        //  maxExpArray[ 19] = 0x30b5057fffffffffffffffffffffffffff;\n        //  maxExpArray[ 20] = 0x2eb40f9fffffffffffffffffffffffffff;\n        //  maxExpArray[ 21] = 0x2cc8340fffffffffffffffffffffffffff;\n        //  maxExpArray[ 22] = 0x2af09481ffffffffffffffffffffffffff;\n        //  maxExpArray[ 23] = 0x292c5bddffffffffffffffffffffffffff;\n        //  maxExpArray[ 24] = 0x277abdcdffffffffffffffffffffffffff;\n        //  maxExpArray[ 25] = 0x25daf6657fffffffffffffffffffffffff;\n        //  maxExpArray[ 26] = 0x244c49c65fffffffffffffffffffffffff;\n        //  maxExpArray[ 27] = 0x22ce03cd5fffffffffffffffffffffffff;\n        //  maxExpArray[ 28] = 0x215f77c047ffffffffffffffffffffffff;\n        //  maxExpArray[ 29] = 0x1fffffffffffffffffffffffffffffffff;\n        //  maxExpArray[ 30] = 0x1eaefdbdabffffffffffffffffffffffff;\n        //  maxExpArray[ 31] = 0x1d6bd8b2ebffffffffffffffffffffffff;\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\n    }\n\n    /**\n     * @dev given a token supply, reserve balance, ratio and a deposit amount (in the reserve token),\n     * calculates the return for a given conversion (in the main token)\n     *\n     * Formula:\n     * Return = _supply * ((1 + _depositAmount / _reserveBalance) ^ (_reserveRatio / 1000000) - 1)\n     *\n     * @param _supply              token total supply\n     * @param _reserveBalance      total reserve balance\n     * @param _reserveRatio        reserve ratio, represented in ppm, 1-1000000\n     * @param _depositAmount       deposit amount, in reserve token\n     *\n     * @return purchase return amount\n     */\n    function calculatePurchaseReturn(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveRatio,\n        uint256 _depositAmount\n    ) public view returns (uint256) {\n        // validate input\n        require(\n            _supply > 0 &&\n                _reserveBalance > 0 &&\n                _reserveRatio > 0 &&\n                _reserveRatio <= MAX_RATIO\n        );\n\n        // special case for 0 deposit amount\n        if (_depositAmount == 0) return 0;\n\n        // special case if the ratio = 100%\n        if (_reserveRatio == MAX_RATIO)\n            return _supply.mul(_depositAmount) / _reserveBalance;\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseN = _depositAmount.add(_reserveBalance);\n        (result, precision) = power(baseN, _reserveBalance, _reserveRatio, MAX_RATIO);\n        uint256 temp = _supply.mul(result) >> precision;\n        return temp - _supply;\n    }\n\n    /**\n     * @dev given a token supply, reserve balance, ratio and a sell amount (in the main token),\n     * calculates the return for a given conversion (in the reserve token)\n     *\n     * Formula:\n     * Return = _reserveBalance * (1 - (1 - _sellAmount / _supply) ^ (1000000 / _reserveRatio))\n     *\n     * @param _supply              token total supply\n     * @param _reserveBalance      total reserve\n     * @param _reserveRatio        constant reserve Ratio, represented in ppm, 1-1000000\n     * @param _sellAmount          sell amount, in the token itself\n     *\n     * @return sale return amount\n     */\n    function calculateSaleReturn(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveRatio,\n        uint256 _sellAmount\n    ) public view returns (uint256) {\n        // validate input\n        require(\n            _supply > 0 &&\n                _reserveBalance > 0 &&\n                _reserveRatio > 0 &&\n                _reserveRatio <= MAX_RATIO &&\n                _sellAmount <= _supply\n        );\n\n        // special case for 0 sell amount\n        if (_sellAmount == 0) return 0;\n\n        // special case for selling the entire supply\n        if (_sellAmount == _supply) return _reserveBalance;\n\n        // special case if the ratio = 100%\n        if (_reserveRatio == MAX_RATIO) return _reserveBalance.mul(_sellAmount) / _supply;\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseD = _supply - _sellAmount;\n        (result, precision) = power(_supply, baseD, MAX_RATIO, _reserveRatio);\n        uint256 temp1 = _reserveBalance.mul(result);\n        uint256 temp2 = _reserveBalance << precision;\n        return (temp1 - temp2) / result;\n    }\n\n    /**\n     * @dev given two reserve balances/ratios and a sell amount (in the first reserve token),\n     * calculates the return for a conversion from the first reserve token to the second reserve token (in the second reserve token)\n     * note that prior to version 4, you should use 'calculateCrossConnectorReturn' instead\n     *\n     * Formula:\n     * Return = _toReserveBalance * (1 - (_fromReserveBalance / (_fromReserveBalance + _amount)) ^ (_fromReserveRatio / _toReserveRatio))\n     *\n     * @param _fromReserveBalance      input reserve balance\n     * @param _fromReserveRatio        input reserve ratio, represented in ppm, 1-1000000\n     * @param _toReserveBalance        output reserve balance\n     * @param _toReserveRatio          output reserve ratio, represented in ppm, 1-1000000\n     * @param _amount                  input reserve amount\n     *\n     * @return second reserve amount\n     */\n    function calculateCrossReserveReturn(\n        uint256 _fromReserveBalance,\n        uint32 _fromReserveRatio,\n        uint256 _toReserveBalance,\n        uint32 _toReserveRatio,\n        uint256 _amount\n    ) public view returns (uint256) {\n        // validate input\n        require(\n            _fromReserveBalance > 0 &&\n                _fromReserveRatio > 0 &&\n                _fromReserveRatio <= MAX_RATIO &&\n                _toReserveBalance > 0 &&\n                _toReserveRatio > 0 &&\n                _toReserveRatio <= MAX_RATIO\n        );\n\n        // special case for equal ratios\n        if (_fromReserveRatio == _toReserveRatio)\n            return _toReserveBalance.mul(_amount) / _fromReserveBalance.add(_amount);\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseN = _fromReserveBalance.add(_amount);\n        (result, precision) = power(\n            baseN,\n            _fromReserveBalance,\n            _fromReserveRatio,\n            _toReserveRatio\n        );\n        uint256 temp1 = _toReserveBalance.mul(result);\n        uint256 temp2 = _toReserveBalance << precision;\n        return (temp1 - temp2) / result;\n    }\n\n    /**\n     * @dev given a smart token supply, reserve balance, total ratio and an amount of requested smart tokens,\n     * calculates the amount of reserve tokens required for purchasing the given amount of smart tokens\n     *\n     * Formula:\n     * Return = _reserveBalance * (((_supply + _amount) / _supply) ^ (MAX_RATIO / _totalRatio) - 1)\n     *\n     * @param _supply              smart token supply\n     * @param _reserveBalance      reserve token balance\n     * @param _totalRatio          total ratio, represented in ppm, 2-2000000\n     * @param _amount              requested amount of smart tokens\n     *\n     * @return amount of reserve tokens\n     */\n    function calculateFundCost(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _totalRatio,\n        uint256 _amount\n    ) public view returns (uint256) {\n        // validate input\n        require(\n            _supply > 0 &&\n                _reserveBalance > 0 &&\n                _totalRatio > 1 &&\n                _totalRatio <= MAX_RATIO * 2\n        );\n\n        // special case for 0 amount\n        if (_amount == 0) return 0;\n\n        // special case if the total ratio = 100%\n        if (_totalRatio == MAX_RATIO)\n            return (_amount.mul(_reserveBalance) - 1) / _supply + 1;\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseN = _supply.add(_amount);\n        (result, precision) = power(baseN, _supply, MAX_RATIO, _totalRatio);\n        uint256 temp = ((_reserveBalance.mul(result) - 1) >> precision) + 1;\n        return temp - _reserveBalance;\n    }\n\n    /**\n     * @dev given a smart token supply, reserve balance, total ratio and an amount of smart tokens to liquidate,\n     * calculates the amount of reserve tokens received for selling the given amount of smart tokens\n     *\n     * Formula:\n     * Return = _reserveBalance * (1 - ((_supply - _amount) / _supply) ^ (MAX_RATIO / _totalRatio))\n     *\n     * @param _supply              smart token supply\n     * @param _reserveBalance      reserve token balance\n     * @param _totalRatio          total ratio, represented in ppm, 2-2000000\n     * @param _amount              amount of smart tokens to liquidate\n     *\n     * @return amount of reserve tokens\n     */\n    function calculateLiquidateReturn(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _totalRatio,\n        uint256 _amount\n    ) public view returns (uint256) {\n        // validate input\n        require(\n            _supply > 0 &&\n                _reserveBalance > 0 &&\n                _totalRatio > 1 &&\n                _totalRatio <= MAX_RATIO * 2 &&\n                _amount <= _supply\n        );\n\n        // special case for 0 amount\n        if (_amount == 0) return 0;\n\n        // special case for liquidating the entire supply\n        if (_amount == _supply) return _reserveBalance;\n\n        // special case if the total ratio = 100%\n        if (_totalRatio == MAX_RATIO) return _amount.mul(_reserveBalance) / _supply;\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseD = _supply - _amount;\n        (result, precision) = power(_supply, baseD, MAX_RATIO, _totalRatio);\n        uint256 temp1 = _reserveBalance.mul(result);\n        uint256 temp2 = _reserveBalance << precision;\n        return (temp1 - temp2) / result;\n    }\n\n    /**\n     * @dev General Description:\n     *     Determine a value of precision.\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\n     *     Return the result along with the precision used.\n     *\n     * Detailed Description:\n     *     Instead of calculating \"base ^ exp\", we calculate \"e ^ (log(base) * exp)\".\n     *     The value of \"log(base)\" is represented with an integer slightly smaller than \"log(base) * 2 ^ precision\".\n     *     The larger \"precision\" is, the more accurately this value represents the real value.\n     *     However, the larger \"precision\" is, the more bits are required in order to store this value.\n     *     And the exponentiation function, which takes \"x\" and calculates \"e ^ x\", is limited to a maximum exponent (maximum value of \"x\").\n     *     This maximum exponent depends on the \"precision\" used, and it is given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\n     *     This allows us to compute \"base ^ exp\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\n     *     This functions assumes that \"_expN < 2 ^ 256 / log(MAX_NUM - 1)\", otherwise the multiplication should be replaced with a \"safeMul\".\n     *     Since we rely on unsigned-integer arithmetic and \"base < 1\" ==> \"log(base) < 0\", this function does not support \"_baseN < _baseD\".\n     */\n    function power(\n        uint256 _baseN,\n        uint256 _baseD,\n        uint32 _expN,\n        uint32 _expD\n    ) internal view returns (uint256, uint8) {\n        require(_baseN < MAX_NUM);\n\n        uint256 baseLog;\n        uint256 base = (_baseN * FIXED_1) / _baseD;\n        if (base < OPT_LOG_MAX_VAL) {\n            baseLog = optimalLog(base);\n        } else {\n            baseLog = generalLog(base);\n        }\n\n        uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\n        } else {\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\n            return (\n                generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision),\n                precision\n            );\n        }\n    }\n\n    /**\n     * @dev computes log(x / FIXED_1) * FIXED_1.\n     * This functions assumes that \"x >= FIXED_1\", because the output would be negative otherwise.\n     */\n    function generalLog(uint256 x) internal pure returns (uint256) {\n        uint256 res = 0;\n\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\n        if (x >= FIXED_2) {\n            uint8 count = floorLog2(x / FIXED_1);\n            x >>= count; // now x < 2\n            res = count * FIXED_1;\n        }\n\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\n        if (x > FIXED_1) {\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\n                x = (x * x) / FIXED_1; // now 1 < x < 4\n                if (x >= FIXED_2) {\n                    x >>= 1; // now 1 < x < 2\n                    res += ONE << (i - 1);\n                }\n            }\n        }\n\n        return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\n    }\n\n    /**\n     * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\n     */\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\n        uint8 res = 0;\n\n        if (_n < 256) {\n            // At most 8 iterations\n            while (_n > 1) {\n                _n >>= 1;\n                res += 1;\n            }\n        } else {\n            // Exactly 8 iterations\n            for (uint8 s = 128; s > 0; s >>= 1) {\n                if (_n >= (ONE << s)) {\n                    _n >>= s;\n                    res |= s;\n                }\n            }\n        }\n\n        return res;\n    }\n\n    /**\n     * @dev the global \"maxExpArray\" is sorted in descending order, and therefore the following statements are equivalent:\n     * - This function finds the position of [the smallest value in \"maxExpArray\" larger than or equal to \"x\"]\n     * - This function finds the highest position of [a value in \"maxExpArray\" larger than or equal to \"x\"]\n     */\n    function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\n        uint8 lo = MIN_PRECISION;\n        uint8 hi = MAX_PRECISION;\n\n        while (lo + 1 < hi) {\n            uint8 mid = (lo + hi) / 2;\n            if (maxExpArray[mid] >= _x) lo = mid;\n            else hi = mid;\n        }\n\n        if (maxExpArray[hi] >= _x) return hi;\n        if (maxExpArray[lo] >= _x) return lo;\n\n        require(false);\n        return 0;\n    }\n\n    /**\n     * @dev this function can be auto-generated by the script 'PrintFunctionGeneralExp.py'.\n     * it approximates \"e ^ x\" via maclaurin summation: \"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\".\n     * it returns \"e ^ (x / 2 ^ precision) * 2 ^ precision\", that is, the result is upshifted for accuracy.\n     * the global \"maxExpArray\" maps each \"precision\" to \"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\".\n     * the maximum permitted value for \"x\" is therefore given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n     */\n    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\n        uint256 xi = _x;\n        uint256 res = 0;\n\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000; // add x^02 * (33! / 02!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x116b96f757c380fb287fd0e40000000; // add x^03 * (33! / 03!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000; // add x^04 * (33! / 04!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00defabf91302cd95b9ffda50000000; // add x^05 * (33! / 05!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x002529ca9832b22439efff9b8000000; // add x^06 * (33! / 06!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00054f1cf12bd04e516b6da88000000; // add x^07 * (33! / 07!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000; // add x^08 * (33! / 08!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000012e066e7b839fa050c309000000; // add x^09 * (33! / 09!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000001e33d7d926c329a1ad1a800000; // add x^10 * (33! / 10!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000; // add x^11 * (33! / 11!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000003a9316fa79b88eccf2a00000; // add x^12 * (33! / 12!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000048177ebe1fa812375200000; // add x^13 * (33! / 13!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000005263fe90242dcbacf00000; // add x^14 * (33! / 14!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000057e22099c030d94100000; // add x^15 * (33! / 15!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000057e22099c030d9410000; // add x^16 * (33! / 16!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000052b6b54569976310000; // add x^17 * (33! / 17!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000004985f67696bf748000; // add x^18 * (33! / 18!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000003dea12ea99e498000; // add x^19 * (33! / 19!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000031880f2214b6e000; // add x^20 * (33! / 20!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000000025bcff56eb36000; // add x^21 * (33! / 21!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000000001b722e10ab1000; // add x^22 * (33! / 22!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000001317c70077000; // add x^23 * (33! / 23!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000cba84aafa00; // add x^24 * (33! / 24!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000082573a0a00; // add x^25 * (33! / 25!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000005035ad900; // add x^26 * (33! / 26!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000000000000002f881b00; // add x^27 * (33! / 27!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000001b29340; // add x^28 * (33! / 28!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000000000efc40; // add x^29 * (33! / 29!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000007fe0; // add x^30 * (33! / 30!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000000420; // add x^31 * (33! / 31!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000000021; // add x^32 * (33! / 32!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000000001; // add x^33 * (33! / 33!)\n\n        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision); // divide by 33! and then add x^1 / 1! + x^0 / 0!\n    }\n\n    /**\n     * @dev computes log(x / FIXED_1) * FIXED_1\n     * Input range: FIXED_1 <= x <= LOG_EXP_MAX_VAL - 1\n     * Auto-generated via 'PrintFunctionOptimalLog.py'\n     * Detailed description:\n     * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\n     * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\n     * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\n     * - The natural logarithm of the input is calculated by summing up the intermediate results above\n     * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\n     */\n    function optimalLog(uint256 x) internal pure returns (uint256) {\n        uint256 res = 0;\n\n        uint256 y;\n        uint256 z;\n        uint256 w;\n\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\n            res += 0x40000000000000000000000000000000;\n            x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\n        } // add 1 / 2^1\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\n            res += 0x20000000000000000000000000000000;\n            x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\n        } // add 1 / 2^2\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\n            res += 0x10000000000000000000000000000000;\n            x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\n        } // add 1 / 2^3\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\n            res += 0x08000000000000000000000000000000;\n            x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\n        } // add 1 / 2^4\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\n            res += 0x04000000000000000000000000000000;\n            x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\n        } // add 1 / 2^5\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\n            res += 0x02000000000000000000000000000000;\n            x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\n        } // add 1 / 2^6\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\n            res += 0x01000000000000000000000000000000;\n            x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\n        } // add 1 / 2^7\n        if (x >= 0x808040155aabbbe9451521693554f733) {\n            res += 0x00800000000000000000000000000000;\n            x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\n        } // add 1 / 2^8\n\n        z = y = x - FIXED_1;\n        w = (y * y) / FIXED_1;\n        res +=\n            (z * (0x100000000000000000000000000000000 - y)) /\n            0x100000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^01 / 01 - y^02 / 02\n        res +=\n            (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) /\n            0x200000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^03 / 03 - y^04 / 04\n        res +=\n            (z * (0x099999999999999999999999999999999 - y)) /\n            0x300000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^05 / 05 - y^06 / 06\n        res +=\n            (z * (0x092492492492492492492492492492492 - y)) /\n            0x400000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^07 / 07 - y^08 / 08\n        res +=\n            (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) /\n            0x500000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^09 / 09 - y^10 / 10\n        res +=\n            (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) /\n            0x600000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^11 / 11 - y^12 / 12\n        res +=\n            (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) /\n            0x700000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^13 / 13 - y^14 / 14\n        res +=\n            (z * (0x088888888888888888888888888888888 - y)) /\n            0x800000000000000000000000000000000; // add y^15 / 15 - y^16 / 16\n\n        return res;\n    }\n\n    /**\n     * @dev computes e ^ (x / FIXED_1) * FIXED_1\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\n     * auto-generated via 'PrintFunctionOptimalExp.py'\n     * Detailed description:\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\n     * - The exponentiation of each binary exponent is given (pre-calculated)\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\n     */\n    function optimalExp(uint256 x) internal pure returns (uint256) {\n        uint256 res = 0;\n\n        uint256 y;\n        uint256 z;\n\n        z = y = x % 0x10000000000000000000000000000000; // get the input modulo 2^(-3)\n        z = (z * y) / FIXED_1;\n        res += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        res = res / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        if ((x & 0x010000000000000000000000000000000) != 0)\n            res =\n                (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) /\n                0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^2^(-3)\n        if ((x & 0x020000000000000000000000000000000) != 0)\n            res =\n                (res * 0x18ebef9eac820ae8682b9793ac6d1e778) /\n                0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^2^(-2)\n        if ((x & 0x040000000000000000000000000000000) != 0)\n            res =\n                (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) /\n                0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^2^(-1)\n        if ((x & 0x080000000000000000000000000000000) != 0)\n            res =\n                (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) /\n                0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^2^(+0)\n        if ((x & 0x100000000000000000000000000000000) != 0)\n            res =\n                (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) /\n                0x00960aadc109e7a3bf4578099615711ea; // multiply by e^2^(+1)\n        if ((x & 0x200000000000000000000000000000000) != 0)\n            res =\n                (res * 0x00960aadc109e7a3bf4578099615711d7) /\n                0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^2^(+2)\n        if ((x & 0x400000000000000000000000000000000) != 0)\n            res =\n                (res * 0x0002bf84208204f5977f9a8cf01fdc307) /\n                0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^2^(+3)\n\n        return res;\n    }\n\n    /**\n     * @dev deprecated, backward compatibility\n     */\n    function calculateCrossConnectorReturn(\n        uint256 _fromConnectorBalance,\n        uint32 _fromConnectorWeight,\n        uint256 _toConnectorBalance,\n        uint32 _toConnectorWeight,\n        uint256 _amount\n    ) public view returns (uint256) {\n        return\n            calculateCrossReserveReturn(\n                _fromConnectorBalance,\n                _fromConnectorWeight,\n                _toConnectorBalance,\n                _toConnectorWeight,\n                _amount\n            );\n    }\n}\n\n/**\n@title Dynamic reserve ratio market maker\n*/\ncontract GoodMarketMaker is BancorFormula, DSMath, SchemeGuard {\n    using SafeMath for uint256;\n\n    // For calculate the return value on buy and sell\n    BancorFormula bancor;\n\n    // Entity that holds a reserve token\n    struct ReserveToken {\n        // Determines the reserve token balance\n        // that the reserve contract holds\n        uint256 reserveSupply;\n        // Determines the current ratio between\n        // the reserve token and the GD token\n        uint32 reserveRatio;\n        // How many GD tokens have been minted\n        // against that reserve token\n        uint256 gdSupply;\n    }\n\n    // The map which holds the reserve token entities\n    mapping(address => ReserveToken) public reserveTokens;\n\n    // Emits when a change has occurred in a\n    // reserve balance, i.e. buy / sell will\n    // change the balance\n    event BalancesUpdated(\n        // The account who initiated the action\n        address indexed caller,\n        // The address of the reserve token\n        address indexed reserveToken,\n        // The incoming amount\n        uint256 amount,\n        // The return value\n        uint256 returnAmount,\n        // The updated total supply\n        uint256 totalSupply,\n        // The updated reserve balance\n        uint256 reserveBalance\n    );\n\n    // Emits when the ratio changed. The caller should be the Avatar by definition\n    event ReserveRatioUpdated(address indexed caller, uint256 nom, uint256 denom);\n\n    // Emits when new tokens should be minted\n    // as a result of incoming interest.\n    // That event will be emitted after the\n    // reserve entity has been updated\n    event InterestMinted(\n        // The account who initiated the action\n        address indexed caller,\n        // The address of the reserve token\n        address indexed reserveToken,\n        // How much new reserve tokens been\n        // added to the reserve balance\n        uint256 addInterest,\n        // The GD supply in the reserve entity\n        // before the new minted GD tokens were\n        // added to the supply\n        uint256 oldSupply,\n        // The number of the new minted GD tokens\n        uint256 mint\n    );\n\n    // Emits when new tokens should be minted\n    // as a result of a reserve ratio expansion\n    // change. This change should have occurred\n    // on a regular basis. That event will be\n    // emitted after the reserve entity has been\n    // updated\n    event UBIExpansionMinted(\n        // The account who initiated the action\n        address indexed caller,\n        // The address of the reserve token\n        address indexed reserveToken,\n        // The reserve ratio before the expansion\n        uint256 oldReserveRatio,\n        // The GD supply in the reserve entity\n        // before the new minted GD tokens were\n        // added to the supply\n        uint256 oldSupply,\n        // The number of the new minted GD tokens\n        uint256 mint\n    );\n\n    // Defines the daily change in the reserve ratio in RAY precision.\n    // In the current release, only global ratio expansion is supported.\n    // That will be a part of each reserve token entity in the future.\n    uint256 public reserveRatioDailyExpansion;\n\n    /**\n     * @dev Constructor\n     * @param _avatar The avatar of the DAO\n     * @param _nom The numerator to calculate the global `reserveRatioDailyExpansion` from\n     * @param _denom The denominator to calculate the global `reserveRatioDailyExpansion` from\n     */\n    constructor(\n        Avatar _avatar,\n        uint256 _nom,\n        uint256 _denom\n    ) public SchemeGuard(_avatar) {\n        reserveRatioDailyExpansion = rdiv(_nom, _denom);\n    }\n\n    modifier onlyActiveToken(ERC20 _token) {\n        ReserveToken storage rtoken = reserveTokens[address(_token)];\n        require(rtoken.gdSupply > 0, \"Reserve token not initialized\");\n        _;\n    }\n\n    /**\n     * @dev Allows the DAO to change the daily expansion rate\n     * it is calculated by _nom/_denom with e27 precision. Emits\n     * `ReserveRatioUpdated` event after the ratio has changed.\n     * Only Avatar can call this method.\n     * @param _nom The numerator to calculate the global `reserveRatioDailyExpansion` from\n     * @param _denom The denominator to calculate the global `reserveRatioDailyExpansion` from\n     */\n    function setReserveRatioDailyExpansion(uint256 _nom, uint256 _denom)\n        public\n        onlyAvatar\n    {\n        require(_denom > 0, \"denominator must be above 0\");\n        reserveRatioDailyExpansion = rdiv(_nom, _denom);\n        emit ReserveRatioUpdated(msg.sender, _nom, _denom);\n    }\n\n    // NOTICE: In the current release, if there is a wish to add another reserve token,\n    //  `end` method in the reserve contract should be called first. Then, the DAO have\n    //  to deploy a new reserve contract that will own the market maker. A scheme for\n    // updating the new reserve must be deployed too.\n\n    /**\n     * @dev Initialize a reserve token entity with the given parameters\n     * @param _token The reserve token\n     * @param _gdSupply Initial supply of GD to set the price\n     * @param _tokenSupply Initial supply of reserve token to set the price\n     * @param _reserveRatio The starting reserve ratio\n     */\n    function initializeToken(\n        ERC20 _token,\n        uint256 _gdSupply,\n        uint256 _tokenSupply,\n        uint32 _reserveRatio\n    ) public onlyOwner {\n        reserveTokens[address(_token)] = ReserveToken({\n            gdSupply: _gdSupply,\n            reserveSupply: _tokenSupply,\n            reserveRatio: _reserveRatio\n        });\n    }\n\n    /**\n     * @dev Calculates how much to decrease the reserve ratio for _token by\n     * the `reserveRatioDailyExpansion`\n     * @param _token The reserve token to calculate the reserve ratio for\n     * @return The new reserve ratio\n     */\n    function calculateNewReserveRatio(ERC20 _token)\n        public\n        view\n        onlyActiveToken(_token)\n        returns (uint32)\n    {\n        ReserveToken memory reserveToken = reserveTokens[address(_token)];\n        uint32 ratio = reserveToken.reserveRatio;\n        if (ratio == 0) {\n            ratio = 1e6;\n        }\n        return\n            uint32(\n                rmul(\n                    uint256(ratio).mul(1e21), // expand to e27 precision\n                    reserveRatioDailyExpansion\n                )\n                    .div(1e21) // return to e6 precision\n            );\n    }\n\n    /**\n     * @dev Decreases the reserve ratio for _token by the `reserveRatioDailyExpansion`\n     * @param _token The token to change the reserve ratio for\n     * @return The new reserve ratio\n     */\n    function expandReserveRatio(ERC20 _token)\n        public\n        onlyOwner\n        onlyActiveToken(_token)\n        returns (uint32)\n    {\n        ReserveToken storage reserveToken = reserveTokens[address(_token)];\n        uint32 ratio = reserveToken.reserveRatio;\n        if (ratio == 0) {\n            ratio = 1e6;\n        }\n        reserveToken.reserveRatio = calculateNewReserveRatio(_token);\n        return reserveToken.reserveRatio;\n    }\n\n    /**\n     * @dev Calculates the buy return in GD according to the given _tokenAmount\n     * @param _token The reserve token buying with\n     * @param _tokenAmount The amount of reserve token buying with\n     * @return Number of GD that should be given in exchange as calculated by the bonding curve\n     */\n    function buyReturn(ERC20 _token, uint256 _tokenAmount)\n        public\n        view\n        onlyActiveToken(_token)\n        returns (uint256)\n    {\n        ReserveToken memory rtoken = reserveTokens[address(_token)];\n        return\n            calculatePurchaseReturn(\n                rtoken.gdSupply,\n                rtoken.reserveSupply,\n                rtoken.reserveRatio,\n                _tokenAmount\n            );\n    }\n\n    /**\n     * @dev Calculates the sell return in _token according to the given _gdAmount\n     * @param _token The desired reserve token to have\n     * @param _gdAmount The amount of GD that are sold\n     * @return Number of tokens that should be given in exchange as calculated by the bonding curve\n     */\n    function sellReturn(ERC20 _token, uint256 _gdAmount)\n        public\n        view\n        onlyActiveToken(_token)\n        returns (uint256)\n    {\n        ReserveToken memory rtoken = reserveTokens[address(_token)];\n        return\n            calculateSaleReturn(\n                rtoken.gdSupply,\n                rtoken.reserveSupply,\n                rtoken.reserveRatio,\n                _gdAmount\n            );\n    }\n\n    /**\n     * @dev Updates the _token bonding curve params. Emits `BalancesUpdated` with the\n     * new reserve token information.\n     * @param _token The reserve token buying with\n     * @param _tokenAmount The amount of reserve token buying with\n     * @return (gdReturn) Number of GD that will be given in exchange as calculated by the bonding curve\n     */\n    function buy(ERC20 _token, uint256 _tokenAmount)\n        public\n        onlyOwner\n        onlyActiveToken(_token)\n        returns (uint256)\n    {\n        uint256 gdReturn = buyReturn(_token, _tokenAmount);\n        ReserveToken storage rtoken = reserveTokens[address(_token)];\n        rtoken.gdSupply = rtoken.gdSupply.add(gdReturn);\n        rtoken.reserveSupply = rtoken.reserveSupply.add(_tokenAmount);\n        emit BalancesUpdated(\n            msg.sender,\n            address(_token),\n            _tokenAmount,\n            gdReturn,\n            rtoken.gdSupply,\n            rtoken.reserveSupply\n        );\n        return gdReturn;\n    }\n\n    /**\n     * @dev Updates the _token bonding curve params. Emits `BalancesUpdated` with the\n     * new reserve token information.\n     * @param _token The desired reserve token to have\n     * @param _gdAmount The amount of GD that are sold\n     * @return Number of tokens that will be given in exchange as calculated by the bonding curve\n     */\n    function sell(ERC20 _token, uint256 _gdAmount)\n        public\n        onlyOwner\n        onlyActiveToken(_token)\n        returns (uint256)\n    {\n        ReserveToken storage rtoken = reserveTokens[address(_token)];\n        require(rtoken.gdSupply > _gdAmount, \"GD amount is higher than the total supply\");\n        uint256 tokenReturn = sellReturn(_token, _gdAmount);\n        rtoken.gdSupply = rtoken.gdSupply.sub(_gdAmount);\n        rtoken.reserveSupply = rtoken.reserveSupply.sub(tokenReturn);\n        emit BalancesUpdated(\n            msg.sender,\n            address(_token),\n            _gdAmount,\n            tokenReturn,\n            rtoken.gdSupply,\n            rtoken.reserveSupply\n        );\n        return tokenReturn;\n    }\n\n    /**\n     * @dev Calculates the sell return with contribution in _token and update the bonding curve params.\n     * Emits `BalancesUpdated` with the new reserve token information.\n     * @param _token The desired reserve token to have\n     * @param _gdAmount The amount of GD that are sold\n     * @param _contributionGdAmount The number of GD tokens that will not be traded for the reserve token\n     * @return Number of tokens that will be given in exchange as calculated by the bonding curve\n     */\n    function sellWithContribution(\n        ERC20 _token,\n        uint256 _gdAmount,\n        uint256 _contributionGdAmount\n    ) public onlyOwner onlyActiveToken(_token) returns (uint256) {\n        require(\n            _gdAmount >= _contributionGdAmount,\n            \"GD amount is lower than the contribution amount\"\n        );\n        ReserveToken storage rtoken = reserveTokens[address(_token)];\n        require(rtoken.gdSupply > _gdAmount, \"GD amount is higher than the total supply\");\n\n        // Deduces the convertible amount of GD tokens by the given contribution amount\n        uint256 amountAfterContribution = _gdAmount.sub(_contributionGdAmount);\n\n        // The return value after the deduction\n        uint256 tokenReturn = sellReturn(_token, amountAfterContribution);\n        rtoken.gdSupply = rtoken.gdSupply.sub(_gdAmount);\n        rtoken.reserveSupply = rtoken.reserveSupply.sub(tokenReturn);\n        emit BalancesUpdated(\n            msg.sender,\n            address(_token),\n            _contributionGdAmount,\n            tokenReturn,\n            rtoken.gdSupply,\n            rtoken.reserveSupply\n        );\n        return tokenReturn;\n    }\n\n    /**\n     * @dev Current price of GD in `token`. currently only cDAI is supported.\n     * @param _token The desired reserve token to have\n     * @return price of GD\n     */\n    function currentPrice(ERC20 _token)\n        public\n        view\n        onlyActiveToken(_token)\n        returns (uint256)\n    {\n        ReserveToken memory rtoken = reserveTokens[address(_token)];\n        GoodDollar gooddollar = GoodDollar(address(avatar.nativeToken()));\n        return\n            calculateSaleReturn(\n                rtoken.gdSupply,\n                rtoken.reserveSupply,\n                rtoken.reserveRatio,\n                (10**uint256(gooddollar.decimals()))\n            );\n    }\n\n    //TODO: need real calculation and tests\n    /**\n     * @dev Calculates how much G$ to mint based on added token supply (from interest)\n     * and on current reserve ratio, in order to keep G$ price the same at the bonding curve\n     * formula to calculate the gd to mint: gd to mint =\n     * addreservebalance * (gdsupply / (reservebalance * reserveratio))\n     * @param _token the reserve token\n     * @param _addTokenSupply amount of token added to supply\n     * @return how much to mint in order to keep price in bonding curve the same\n     */\n    function calculateMintInterest(ERC20 _token, uint256 _addTokenSupply)\n        public\n        view\n        onlyActiveToken(_token)\n        returns (uint256)\n    {\n        GoodDollar gooddollar = GoodDollar(address(avatar.nativeToken()));\n        uint256 decimalsDiff = uint256(27).sub(uint256(gooddollar.decimals()));\n        //resulting amount is in RAY precision\n        //we divide by decimalsdiff to get precision in GD (2 decimals)\n        return rdiv(_addTokenSupply, currentPrice(_token)).div(10**decimalsDiff);\n    }\n\n    /**\n     * @dev Updates bonding curve based on _addTokenSupply and new minted amount\n     * @param _token The reserve token\n     * @param _addTokenSupply Amount of token added to supply\n     * @return How much to mint in order to keep price in bonding curve the same\n     */\n    function mintInterest(ERC20 _token, uint256 _addTokenSupply)\n        public\n        onlyOwner\n        returns (uint256)\n    {\n        if (_addTokenSupply == 0) {\n            return 0;\n        }\n        uint256 toMint = calculateMintInterest(_token, _addTokenSupply);\n        ReserveToken storage reserveToken = reserveTokens[address(_token)];\n        uint256 gdSupply = reserveToken.gdSupply;\n        uint256 reserveBalance = reserveToken.reserveSupply;\n        reserveToken.gdSupply = gdSupply.add(toMint);\n        reserveToken.reserveSupply = reserveBalance.add(_addTokenSupply);\n        emit InterestMinted(\n            msg.sender,\n            address(_token),\n            _addTokenSupply,\n            gdSupply,\n            toMint\n        );\n        return toMint;\n    }\n\n    /**\n     * @dev Calculate how much G$ to mint based on expansion change (new reserve\n     * ratio), in order to keep G$ price the same at the bonding curve. the\n     * formula to calculate the gd to mint: gd to mint =\n     * (reservebalance / (newreserveratio * currentprice)) - gdsupply\n     * @param _token The reserve token\n     * @return How much to mint in order to keep price in bonding curve the same\n     */\n    function calculateMintExpansion(ERC20 _token)\n        public\n        view\n        onlyActiveToken(_token)\n        returns (uint256)\n    {\n        ReserveToken memory reserveToken = reserveTokens[address(_token)];\n        uint32 newReserveRatio = calculateNewReserveRatio(_token); // new reserve ratio\n        uint256 reserveDecimalsDiff = uint256(\n            uint256(27).sub(ERC20Detailed(address(_token)).decimals())\n        ); // //result is in RAY precision\n        uint256 denom = rmul(\n            uint256(newReserveRatio).mul(1e21),\n            currentPrice(_token).mul(10**reserveDecimalsDiff)\n        ); // (newreserveratio * currentprice) in RAY precision\n        GoodDollar gooddollar = GoodDollar(address(avatar.nativeToken()));\n        uint256 gdDecimalsDiff = uint256(27).sub(uint256(gooddollar.decimals()));\n        uint256 toMint = rdiv(\n            reserveToken.reserveSupply.mul(10**reserveDecimalsDiff), // reservebalance in RAY precision\n            denom\n        )\n            .div(10**gdDecimalsDiff); // return to gd precision\n        return toMint.sub(reserveToken.gdSupply);\n    }\n\n    /**\n     * @dev Updates bonding curve based on expansion change and new minted amount\n     * @param _token The reserve token\n     * @return How much to mint in order to keep price in bonding curve the same\n     */\n    function mintExpansion(ERC20 _token) public onlyOwner returns (uint256) {\n        uint256 toMint = calculateMintExpansion(_token);\n        ReserveToken storage reserveToken = reserveTokens[address(_token)];\n        uint256 gdSupply = reserveToken.gdSupply;\n        uint256 ratio = reserveToken.reserveRatio;\n        reserveToken.gdSupply = gdSupply.add(toMint);\n        expandReserveRatio(_token);\n        emit UBIExpansionMinted(msg.sender, address(_token), ratio, gdSupply, toMint);\n        return toMint;\n    }\n}\n\ninterface cERC20 {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeemUnderlying(uint256 mintAmount) external returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function balanceOf(address addr) external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n}\n\ninterface ContributionCalc {\n    function calculateContribution(\n        GoodMarketMaker _marketMaker,\n        GoodReserveCDai _reserve,\n        address _contributer,\n        ERC20 _token,\n        uint256 _gdAmount\n    ) external view returns (uint256);\n}\n\n/**\n@title Reserve based on cDAI and dynamic reserve ratio market maker\n*/\ncontract GoodReserveCDai is DSMath, FeelessScheme, ActivePeriod {\n    using SafeMath for uint256;\n\n    // DAI token address\n    ERC20 public dai;\n\n    // cDAI token address\n    cERC20 public cDai;\n\n    // The address of the market maker contract\n    // which makes the calculations and holds\n    // the token and accounts info\n    GoodMarketMaker public marketMaker;\n\n    // The fund manager receives the minted tokens\n    // when executing `mintInterestAndUBI`\n    address public fundManager;\n\n    // The block interval defines the number of\n    // blocks that shall be passed before the\n    // next execution of `mintInterestAndUBI`\n    uint256 public blockInterval;\n\n    // The last block number which\n    // `mintInterestAndUBI` has been executed in\n    uint256 public lastMinted;\n\n    // The contribution contract is responsible\n    // for calculates the contribution amount\n    // when selling GD\n    ContributionCalc public contribution;\n\n    modifier onlyFundManager {\n        require(msg.sender == fundManager, \"Only FundManager can call this method\");\n        _;\n    }\n\n    modifier onlyCDai(ERC20 token) {\n        require(address(token) == address(cDai), \"Only cDAI is supported\");\n        _;\n    }\n\n    // Emits when GD tokens are purchased\n    event TokenPurchased(\n        // The initiate of the action\n        address indexed caller,\n        // The convertible token address\n        // which the GD tokens were\n        // purchased with\n        address indexed reserveToken,\n        // Reserve tokens amount\n        uint256 reserveAmount,\n        // Minimal GD return that was\n        // permitted by the caller\n        uint256 minReturn,\n        // Actual return after the\n        // conversion\n        uint256 actualReturn\n    );\n\n    // Emits when GD tokens are sold\n    event TokenSold(\n        // The initiate of the action\n        address indexed caller,\n        // The convertible token address\n        // which the GD tokens were\n        // sold to\n        address indexed reserveToken,\n        // GD tokens amount\n        uint256 gdAmount,\n        // The amount of GD tokens that\n        // was contributed during the\n        // conversion\n        uint256 contributionAmount,\n        // Minimal reserve tokens return\n        // that was permitted by the caller\n        uint256 minReturn,\n        // Actual return after the\n        // conversion\n        uint256 actualReturn\n    );\n\n    // Emits when the contribution contract\n    // address is updated\n    event ContributionAddressUpdated(\n        // The initiate of the action\n        address indexed caller,\n        // Previous contribution\n        // contract address\n        address prevAddress,\n        // The updated contribution\n        // contract address\n        address newAddress\n    );\n\n    // Emits when new GD tokens minted\n    event UBIMinted(\n        //epoch of UBI\n        uint256 indexed day,\n        //the token paid as interest\n        address indexed interestToken,\n        //wei amount of interest paid in interestToken\n        uint256 interestReceived,\n        // Amount of GD tokens that was\n        // added to the supply as a result\n        // of `mintInterest`\n        uint256 gdInterestMinted,\n        // Amount of GD tokens that was\n        // added to the supply as a result\n        // of `mintExpansion`\n        uint256 gdExpansionMinted,\n        // Amount of GD tokens that was\n        // minted to the `interestCollector`\n        uint256 gdInterestTransferred,\n        // Amount of GD tokens that was\n        // minted to the `ubiCollector`\n        uint256 gdUbiTransferred\n    );\n\n    /**\n     * @dev Constructor\n     * @param _dai The address of DAI\n     * @param _cDai The address of cDAI\n     * @param _fundManager The address of the fund manager contract\n     * @param _avatar The avatar of the DAO\n     * @param _identity The identity contract\n     * @param _marketMaker The address of the market maker contract\n     * @param _contribution The address of the contribution contract\n     * @param _blockInterval How many blocks should be passed before the next execution of `mintInterestAndUBI`\n     */\n    constructor(\n        ERC20 _dai,\n        cERC20 _cDai,\n        address _fundManager,\n        Avatar _avatar,\n        Identity _identity,\n        address _marketMaker,\n        ContributionCalc _contribution,\n        uint256 _blockInterval\n    ) public FeelessScheme(_identity, _avatar) ActivePeriod(now, now * 2, _avatar) {\n        dai = _dai;\n        cDai = _cDai;\n        fundManager = _fundManager;\n        marketMaker = GoodMarketMaker(_marketMaker);\n        blockInterval = _blockInterval;\n        lastMinted = block.number.div(blockInterval);\n        contribution = _contribution;\n    }\n\n    /**\n     * @dev Start function. Adds this contract to identity as a feeless scheme.\n     * Can only be called if scheme is registered\n     */\n    function start() public onlyRegistered {\n        addRights();\n\n        // Adds the reserve as a minter of the GD token\n        controller.genericCall(\n            address(avatar.nativeToken()),\n            abi.encodeWithSignature(\"addMinter(address)\", address(this)),\n            avatar,\n            0\n        );\n        super.start();\n    }\n\n    /**\n     * @dev Allows the DAO to change the market maker contract\n     * @param _marketMaker address of the new contract\n     */\n    function setMarketMaker(address _marketMaker) public onlyAvatar {\n        marketMaker = GoodMarketMaker(_marketMaker);\n    }\n\n    /**\n     * @dev Allows the DAO to change the fund manager contract\n     * @param _fundManager address of the new contract\n     */\n    function setFundManager(address _fundManager) public onlyAvatar {\n        fundManager = _fundManager;\n    }\n\n    /**\n     * @dev Allows the DAO to change the block interval\n     * @param _blockInterval the new value\n     */\n    function setBlockInterval(uint256 _blockInterval) public onlyAvatar {\n        blockInterval = _blockInterval;\n    }\n\n    /**\n     * @dev Allows the DAO to change the contribution formula contract\n     * @param _contribution address of the new contribution contract\n     */\n    function setContributionAddress(address _contribution) public onlyAvatar {\n        address prevAddress = address(contribution);\n        contribution = ContributionCalc(_contribution);\n        emit ContributionAddressUpdated(msg.sender, prevAddress, _contribution);\n    }\n\n    /**\n     * @dev Converts `buyWith` tokens to GD tokens and updates the bonding curve params.\n     * `buy` occurs only if the GD return is above the given minimum. It is possible\n     * to buy only with cDAI and when the contract is set to active. MUST call to\n     * `buyWith` `approve` prior this action to allow this contract to accomplish the\n     * conversion.\n     * @param _buyWith The tokens that should be converted to GD tokens\n     * @param _tokenAmount The amount of `buyWith` tokens that should be converted to GD tokens\n     * @param _minReturn The minimum allowed return in GD tokens\n     * @return (gdReturn) How much GD tokens were transferred\n     */\n    function buy(\n        ERC20 _buyWith,\n        uint256 _tokenAmount,\n        uint256 _minReturn\n    ) public requireActive onlyCDai(_buyWith) returns (uint256) {\n        require(\n            _buyWith.allowance(msg.sender, address(this)) >= _tokenAmount,\n            \"You need to approve cDAI transfer first\"\n        );\n        require(\n            _buyWith.transferFrom(msg.sender, address(this), _tokenAmount) == true,\n            \"transferFrom failed, make sure you approved cDAI transfer\"\n        );\n        uint256 gdReturn = marketMaker.buy(_buyWith, _tokenAmount);\n        require(gdReturn >= _minReturn, \"GD return must be above the minReturn\");\n        ERC20Mintable(address(avatar.nativeToken())).mint(msg.sender, gdReturn);\n        emit TokenPurchased(\n            msg.sender,\n            address(_buyWith),\n            _tokenAmount,\n            _minReturn,\n            gdReturn\n        );\n        return gdReturn;\n    }\n\n    /**\n     * @dev Converts GD tokens to `sellTo` tokens and update the bonding curve params.\n     * `sell` occurs only if the token return is above the given minimum. Notice that\n     * there is a contribution amount from the given GD that remains in the reserve.\n     * It is only possible to sell to cDAI and only when the contract is set to\n     * active. MUST be called to G$ `approve` prior to this action to allow this\n     * contract to accomplish the conversion.\n     * @param _sellTo The tokens that will be received after the conversion\n     * @param _gdAmount The amount of GD tokens that should be converted to `_sellTo` tokens\n     * @param _minReturn The minimum allowed `sellTo` tokens return\n     * @return (tokenReturn) How much `sellTo` tokens were transferred\n     */\n    function sell(\n        ERC20 _sellTo,\n        uint256 _gdAmount,\n        uint256 _minReturn\n    ) public requireActive onlyCDai(_sellTo) returns (uint256) {\n        ERC20Burnable(address(avatar.nativeToken())).burnFrom(msg.sender, _gdAmount);\n        uint256 contributionAmount = contribution.calculateContribution(\n            marketMaker,\n            this,\n            msg.sender,\n            _sellTo,\n            _gdAmount\n        );\n        uint256 tokenReturn = marketMaker.sellWithContribution(\n            _sellTo,\n            _gdAmount,\n            contributionAmount\n        );\n        require(tokenReturn >= _minReturn, \"Token return must be above the minReturn\");\n        require(_sellTo.transfer(msg.sender, tokenReturn) == true, \"Transfer failed\");\n        emit TokenSold(\n            msg.sender,\n            address(_sellTo),\n            _gdAmount,\n            contributionAmount,\n            _minReturn,\n            tokenReturn\n        );\n        return tokenReturn;\n    }\n\n    /**\n     * @dev Current price of GD in `token`. currently only cDAI is supported.\n     * @param _token The desired reserve token to have\n     * @return price of GD\n     */\n    function currentPrice(ERC20 _token) public view returns (uint256) {\n        return marketMaker.currentPrice(_token);\n    }\n\n    /**\n     * @dev Checks if enough blocks have passed so it would be possible to\n     * execute `mintInterestAndUBI` according to the length of `blockInterval`\n     * @return (bool) True if enough blocks have passed\n     */\n    function canMint() public view returns (bool) {\n        return block.number.div(blockInterval) > lastMinted;\n    }\n\n    /**\n     * @dev Anyone can call this to trigger calculations.\n     * Reserve sends UBI to Avatar DAO and returns interest to FundManager.\n     * @param _interestToken The token that was transfered to the reserve\n     * @param _transfered How much was transfered to the reserve for UBI in `_interestToken`\n     * @param _interest Out of total transfered how much is the interest (in `_interestToken`)\n     * that needs to be paid back (some interest might be donated)\n     * @return (gdInterest, gdUBI) How much GD interest was minted and how much GD UBI was minted\n     */\n    function mintInterestAndUBI(\n        ERC20 _interestToken,\n        uint256 _transfered,\n        uint256 _interest\n    )\n        public\n        requireActive\n        onlyCDai(_interestToken)\n        onlyFundManager\n        returns (uint256, uint256)\n    {\n        require(canMint(), \"Need to wait for the next interval\");\n        uint256 price = currentPrice(_interestToken);\n        uint256 gdInterestToMint = marketMaker.mintInterest(_interestToken, _transfered);\n        GoodDollar gooddollar = GoodDollar(address(avatar.nativeToken()));\n        uint256 precisionLoss = uint256(27).sub(uint256(gooddollar.decimals()));\n        uint256 gdInterest = rdiv(_interest, price).div(10**precisionLoss);\n        uint256 gdExpansionToMint = marketMaker.mintExpansion(_interestToken);\n        uint256 gdUBI = gdInterestToMint.sub(gdInterest);\n        gdUBI = gdUBI.add(gdExpansionToMint);\n        uint256 toMint = gdUBI.add(gdInterest);\n        ERC20Mintable(address(avatar.nativeToken())).mint(fundManager, toMint);\n        lastMinted = block.number.div(blockInterval);\n        emit UBIMinted(\n            lastMinted,\n            address(_interestToken),\n            _transfered,\n            gdInterestToMint,\n            gdExpansionToMint,\n            gdInterest,\n            gdUBI\n        );\n        return (gdInterest, gdUBI);\n    }\n\n    /**\n     * @dev Making the contract inactive after it has transferred the cDAI funds to `_avatar`\n     * and has transferred the market maker ownership to `_avatar`. Inactive means that\n     * buy / sell / mintInterestAndUBI actions will no longer be active. Only the Avatar can\n     * executes this method\n     */\n    function end() public onlyAvatar {\n        // remaining cDAI tokens in the current reserve contract\n        uint256 remainingReserve = cDai.balanceOf(address(this));\n        if (remainingReserve > 0) {\n            require(\n                cDai.transfer(address(avatar), remainingReserve),\n                \"cdai transfer failed\"\n            );\n        }\n        require(cDai.balanceOf(address(this)) == 0, \"Funds transfer has failed\");\n        GoodDollar gooddollar = GoodDollar(address(avatar.nativeToken()));\n        marketMaker.transferOwnership(address(avatar));\n        gooddollar.renounceMinter();\n        super.internalEnd(avatar);\n    }\n\n    /**\n     * @dev method to recover any stuck erc20 tokens (ie compound COMP)\n     * @param _token the ERC20 token to recover\n     */\n    function recover(ERC20 _token) public onlyAvatar {\n        require(\n            _token.transfer(address(avatar), _token.balanceOf(address(this))),\n            \"recover transfer failed\"\n        );\n    }\n}\n\ninterface StakingContract {\n    function collectUBIInterest(address recipient)\n        external\n        returns (uint256, uint256, uint256, uint32);\n}\n\n/**\n * @title GoodFundManager contract that transfer interest from the staking contract\n * to the reserve contract and transfer the return mintable tokens to the staking\n * contract\n * cDAI support only\n */\ncontract GoodFundManager is FeelessScheme, ActivePeriod {\n    using SafeMath for uint256;\n\n    // The address of cDai\n    ERC20 public cDai;\n\n    // The address of the reserve contract\n    // which recieves the funds from the\n    // staking contract\n    GoodReserveCDai public reserve;\n\n    // The address of the bridge contract\n    // which transfers in his turn the\n    // UBI funds to the given recipient\n    // address on the sidechain\n    address public bridgeContract;\n\n    // The recipient address on the\n    // sidechain. The bridge transfers\n    // the funds to the following address\n    address public ubiRecipient;\n\n    // Determines how many blocks should\n    // be passed before the next\n    // execution of `transferInterest`\n    uint256 public blockInterval;\n\n    // Last block number which `transferInterest`\n    // has been executed in\n    uint256 public lastTransferred;\n\n    // Emits when `transferInterest` transfers\n    // funds to the staking contract and to\n    // the bridge\n    event FundsTransferred(\n        // The caller address\n        address indexed caller,\n        // The staking contract address\n        address indexed staking,\n        // The reserve contract address\n        address indexed reserve,\n        // Amount of cDai that was transferred\n        // from the staking contract to the\n        // reserve contract\n        uint256 cDAIinterestEarned,\n        // How much interest has been donated\n        // according to the given donation\n        // ratio which determined in the\n        // staking contract\n        uint256 cDAIinterestDonated,\n        // The number of tokens that have been minted\n        // by the reserve to the staking contract\n        uint256 gdInterest,\n        // The number of tokens that have been minted\n        // by the reserve to the bridge which in his\n        // turn should transfer those funds to the\n        // sidechain\n        uint256 gdUBI\n    );\n\n    modifier reserveHasInitialized {\n        require(address(reserve) != address(0), \"reserve has not initialized\");\n        _;\n    }\n\n    /**\n     * @dev Constructor\n     * @param _avatar The avatar of the DAO\n     * @param _identity The identity contract\n     * @param _cDai The address of cDai\n     * @param _bridgeContract The address of the bridge contract\n     * @param _ubiRecipient The recipient address on the sidechain\n     * @param _blockInterval How many blocks should be passed before the next execution of `transferInterest\n     */\n    constructor(\n        Avatar _avatar,\n        Identity _identity,\n        address _cDai,\n        address _bridgeContract,\n        address _ubiRecipient,\n        uint256 _blockInterval\n    )\n        public\n        FeelessScheme(_identity, _avatar)\n        ActivePeriod(now, now * 2, _avatar)\n    {\n        cDai = ERC20(_cDai);\n        bridgeContract = _bridgeContract;\n        ubiRecipient = _ubiRecipient;\n        blockInterval = _blockInterval;\n        lastTransferred = block.number.div(blockInterval);\n    }\n\n    /**\n     * @dev Start function. Adds this contract to identity as a feeless scheme.\n     * Can only be called if scheme is registered\n     */\n    function start() public onlyRegistered {\n        addRights();\n        super.start();\n    }\n\n    /**\n     * @dev Sets the whitelisted reserve. Only Avatar\n     * can call this method.\n     * @param _reserve The new reserve to be whitelisted\n     */\n    function setReserve(GoodReserveCDai _reserve) public onlyAvatar {\n        reserve = _reserve;\n    }\n\n    /**\n     * @dev sets the token bridge address on mainnet and the recipient of minted UBI (avatar on sidechain)\n     * @param _bridgeContract address\n     * @param _recipient address\n     */\n\n    /**\n     * @dev Sets the bridge address on the current network and the recipient\n     * address on the sidechain. Only Avatar can call this method.\n     * @param _bridgeContract The new bridge address\n     * @param _recipient The new recipient address (NOTICE: this address may be a\n     * sidechain address)\n     */\n    function setBridgeAndUBIRecipient(\n        address _bridgeContract,\n        address _recipient\n    )\n        public\n        onlyAvatar\n    {\n        bridgeContract = _bridgeContract;\n        ubiRecipient = _recipient;\n    }\n\n    /**\n     * @dev Allows the DAO to change the block interval\n     * @param _blockInterval the new interval value\n     */\n    function setBlockInterval(\n        uint256 _blockInterval\n    )\n        public\n        onlyAvatar\n    {\n        blockInterval = _blockInterval;\n    }\n\n    /**\n     * @dev Checks if enough time has passed away since the\n     * last funds transfer time\n     * @return (bool) True if enough time has passed\n     */\n    function canRun() public view returns(bool)\n    {\n        return block.number.div(blockInterval) > lastTransferred;\n    }\n\n    /**\n     * @dev Collects UBI interest in cDai from a given staking contract and transfers\n     * that interest to the reserve contract. Then transfers the given gd which\n     * received from the reserve contract back to the staking contract and to the\n     * bridge, which locks the funds and then the GD tokens are been minted to the\n     * given address on the sidechain\n     * @param _staking Contract that implements `collectUBIInterest` and transfer cDai to\n     * a given address. The given address should be the same whitelisted `reserve`\n     * address in the current contract, in case that the given staking contract transfers\n     * the funds to another contract, zero GD tokens will be minted by the reserve contract.\n     * Emits `FundsTransferred` event in case which interest has been passed to the `reserve`\n     */\n    function transferInterest(StakingContract _staking)\n        public\n        requireActive\n        reserveHasInitialized\n        requireDAOContract(address(_staking))\n    {\n        require(\n            canRun(),\n            \"Need to wait for the next interval\"\n        );\n\n        lastTransferred = block.number.div(blockInterval);\n\n        // cDai balance of the reserve contract\n        uint256 currentBalance = cDai.balanceOf(address(reserve));\n\n        // Collects the interest from the staking contract and transfers\n        // it directly to the reserve contract. `collectUBIInterest` returns\n        // (cdaigains, daigains, precission loss, donation ratio)\n        (, , , uint32 donationRatio) = _staking.collectUBIInterest(\n            address(reserve)\n        );\n\n        // Finds the actual transferred cDai\n        uint256 interest = cDai.balanceOf(address(reserve)).sub(\n            currentBalance\n        );\n\n        uint256 interestDonated = interest.mul(donationRatio).div(1e6);\n        uint256 afterDonation = interest.sub(interestDonated);\n        // Mints gd while the interest amount is equal to the transferred amount\n        (uint256 gdInterest, uint256 gdUBI) = reserve.mintInterestAndUBI(\n            cDai,\n            interest,\n            afterDonation\n        );\n        // Transfers the minted tokens to the given staking contract\n        GoodDollar token = GoodDollar(address(avatar.nativeToken()));\n        if(gdInterest > 0)\n            require(token.transfer(address(_staking), gdInterest),\"interest transfer failed\");\n        if(gdUBI > 0)\n            //transfer ubi to avatar on sidechain via bridge\n            require(token.transferAndCall(\n                bridgeContract,\n                gdUBI,\n                abi.encodePacked(ubiRecipient)\n            ),\"ubi bridge transfer failed\");\n        emit FundsTransferred(\n            msg.sender,\n            address(_staking),\n            address(reserve),\n            interest,\n            interestDonated,\n            gdInterest,\n            gdUBI\n        );\n    }\n\n    /**\n     * @dev Making the contract inactive after it has transferred funds to `_avatar`.\n     * Only the avatar can destroy the contract.\n     */\n    function end() public onlyAvatar {\n        // Transfers the remaining amount of cDai and GD to the avatar\n        uint256 remainingCDaiReserve = cDai.balanceOf(address(this));\n        if (remainingCDaiReserve > 0) {\n            require(cDai.transfer(address(avatar), remainingCDaiReserve),\"cdai transfer failed\");\n        }\n        GoodDollar token = GoodDollar(address(avatar.nativeToken()));\n        uint256 remainingGDReserve = token.balanceOf(address(this));\n        if (remainingGDReserve > 0) {\n            require(token.transfer(address(avatar), remainingGDReserve),\"gd transfer failed\");\n        }\n        super.internalEnd(avatar);\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Avatar\",\"name\":\"_avatar\",\"type\":\"address\"},{\"internalType\":\"contract Identity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cDai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ubiRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockInterval\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cDAIinterestEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cDAIinterestDonated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gdInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gdUBI\",\"type\":\"uint256\"}],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SchemeEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SchemeStarted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cDai\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canRun\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"identity\",\"outputs\":[{\"internalType\":\"contract Identity\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"scheme\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract GoodReserveCDai\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Avatar\",\"name\":\"_avatar\",\"type\":\"address\"}],\"name\":\"setAvatar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockInterval\",\"type\":\"uint256\"}],\"name\":\"setBlockInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setBridgeAndUBIRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Identity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"setIdentity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract GoodReserveCDai\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"setReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract StakingContract\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"transferInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ubiRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GoodFundManager","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001ecfd1afb601c406ff0e13c3485f2d75699b681700000000000000000000000076e76e10ac308a1d54a00f9df27edce4801f288b0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e364300000000000000000000000017b09b22823f00bb9b8ee2d4632e332cadc29458000000000000000000000000aacbaab8571cbeceb46ba85b5981efdb8928545e0000000000000000000000000000000000000000000000000000000000001680","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}