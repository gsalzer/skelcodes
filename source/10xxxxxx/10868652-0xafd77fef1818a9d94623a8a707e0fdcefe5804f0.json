{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two unsigned integers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint value) external  returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n\r\ncontract YFMSTokenLock {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public unlockDateRewards;\r\n  uint256 public unlockDateDev;\r\n  uint256 public YFMSLockedDev;\r\n  uint256 public YFMSLockedRewards;\r\n  address public owner;\r\n  ERC20 public YFMSToken;\r\n\r\n  constructor(address _wallet) public {\r\n    owner = msg.sender; \r\n    YFMSToken = ERC20(_wallet);\r\n  }\r\n\r\n   // < 2,500 YFMS\r\n  function lockDevTokens (address _from, uint _amount) public {\r\n    require(_from == owner);\r\n    require(YFMSToken.balanceOf(_from) >= _amount);\r\n    YFMSLockedDev = _amount;\r\n    unlockDateDev = now;\r\n    YFMSToken.transferFrom(owner, address(this), _amount);\r\n  }\r\n\r\n  // < 20,500 YFMS\r\n  function lockRewardsTokens (address _from, uint256 _amount) public {\r\n    require(_from == owner);\r\n    require(YFMSToken.balanceOf(_from) >= _amount);\r\n    YFMSLockedRewards = _amount;\r\n    unlockDateRewards = now;\r\n    YFMSToken.transferFrom(owner, address(this), _amount);\r\n  }\r\n\r\n  function withdrawDevTokens(address _to, uint256 _amount) public {\r\n    require(_to == owner);\r\n    require(_amount <= YFMSLockedDev);\r\n    require(now.sub(unlockDateDev) >= 21 days);\r\n    YFMSLockedDev = YFMSLockedDev.sub(_amount);\r\n    YFMSToken.transfer(_to, _amount);\r\n  }\r\n\r\n  function withdrawRewardsTokens(address _to, uint256 _amount) public {\r\n    require(_to == owner);\r\n    require(_amount <= YFMSLockedRewards);\r\n    require(now.sub(unlockDateRewards) >= 7 days);\r\n    YFMSLockedRewards = YFMSLockedRewards.sub(_amount);\r\n    YFMSToken.transfer(_to, _amount);\r\n  }\r\n\r\n  function balanceOf() public view returns (uint256) {\r\n    return YFMSLockedDev.add(YFMSLockedRewards);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"YFMSLockedDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YFMSLockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YFMSToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockDevTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockRewardsTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockDateDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockDateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDevTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardsTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YFMSTokenLock","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fef3bef71a5eb97e097039038776fd967ae5b106","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b70f3883f759c28857ce34c84da828ebd012f209810b44b10822ce75b28790f5"}]}