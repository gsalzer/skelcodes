{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/loopring/impl/BrokerData.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\nlibrary BrokerData {\r\n\r\n  struct BrokerOrder {\r\n    address owner;\r\n    bytes32 orderHash;\r\n    uint fillAmountB;\r\n    uint requestedAmountS;\r\n    uint requestedFeeAmount;\r\n    address tokenRecipient;\r\n    bytes extraData;\r\n  }\r\n\r\n  /**\r\n   * The request wraps all broker orders that share the following overall fields. The perspective on these fields is\r\n   * the orders that are passed in. Meaning, `tokenB` is the token being RECEIVED by each owner and `tokenS` is the\r\n   * token being SPENT by each owner. Lastly, `totalRequestedFeeAmount` is the total `feeAmountS` for all brokered\r\n   * orders. If the fees are in `tokenB`, then this amount is always 0.\r\n   */\r\n  struct BrokerApprovalRequest {\r\n    BrokerOrder[] orders;\r\n    // The token output token for the broker at the end of #brokerRequestAllowance.\r\n    address tokenS;\r\n    // The token received by the broker at the start of #brokerRequestAllowance. This token must be internally traded\r\n    // for tokenS.\r\n    address tokenB;\r\n    address feeToken;\r\n    // The amount of tokens that the broker has at the start of the call to #brokerRequestAllowance. This amount needs\r\n    // to be traded within the brokering contract for #totalRequestedAmountS\r\n    uint totalFillAmountB;\r\n    // The amount of tokens that needs be outputted by #brokerRequestAllowance (and therefore traded for INTERNALLY\r\n    // within the contract)\r\n    uint totalRequestedAmountS;\r\n    uint totalRequestedFeeAmount;\r\n  }\r\n\r\n  struct BrokerInterceptorReport {\r\n    address owner;\r\n    address broker;\r\n    bytes32 orderHash;\r\n    address tokenB;\r\n    address tokenS;\r\n    address feeToken;\r\n    uint fillAmountB;\r\n    uint spentAmountS;\r\n    uint spentFeeAmount;\r\n    address tokenRecipient;\r\n    bytes extraData;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/market-making/sources/uniswap-v2/interfaces/IUniswapV2Router01.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        require(token.approve(spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        require(token.approve(spender, newAllowance));\r\n    }\r\n}\r\n\r\n// File: contracts/libs/SafeEther.sol\r\n\r\n/*\r\n * Copyright 2020 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeEther {\r\n\r\n    function toPayable(address _address) internal pure returns (address payable) {\r\n        return address(uint160(_address));\r\n    }\r\n\r\n    function safeTransferEther(address recipient, uint amount) internal {\r\n        safeTransferEther(recipient, amount, \"CANNOT_TRANSFER_ETHER\");\r\n    }\r\n\r\n    function safeTransferEther(address recipient, uint amount, string memory errorMessage) internal {\r\n        (bool success,) = address(uint160(recipient)).call.value(amount)(\"\");\r\n        require(success, errorMessage);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/market-making/helper/MakerBrokerBase.sol\r\n\r\n/*\r\n * Copyright 2020 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev The base contract for any ownable contract is used for permissioned market making with either open liquidity\r\n *      pools, like Uniswap, or permissioned ones like Dolomite Options.\r\n */\r\ncontract MakerBrokerBase {\r\n\r\n    using SafeEther for address payable;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0x0), \"ZERO_ADDRESS\");\r\n        owner = newOwner;\r\n    }\r\n\r\n    function withdrawDust(address token) external {\r\n        _withdrawDust(token, msg.sender);\r\n    }\r\n\r\n    function withdrawDust(address token, address recipient) external {\r\n        _withdrawDust(token, recipient);\r\n    }\r\n\r\n    function withdrawEthDust() external {\r\n        _withdrawEthDust(msg.sender);\r\n    }\r\n\r\n    function withdrawEthDust(address payable recipient) external {\r\n        _withdrawEthDust(recipient);\r\n    }\r\n\r\n    function _withdrawDust(address token, address recipient) internal {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        IERC20(token).safeTransfer(\r\n            recipient,\r\n            IERC20(token).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function _withdrawEthDust(address payable recipient) internal {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        recipient.safeTransferEther(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/misc/interfaces/IWETH.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\ninterface IWETH {\r\n  event Deposit(address indexed src, uint wad);\r\n  event Withdraw(address indexed src, uint wad);\r\n\r\n  function deposit() external payable;\r\n  function withdraw(uint wad) external;\r\n}\r\n\r\n// File: contracts/loopring/iface/IBrokerDelegate.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\ninterface IBrokerDelegate {\r\n\r\n  /*\r\n   * Loopring requests an allowance be set on a given token for a specified amount. Order details\r\n   * are provided (tokenS, totalAmountS, tokenB, totalAmountB, orderTokenRecipient, extraOrderData)\r\n   * to aid in any calculations or on-chain exchange of assets that may be required. The last 4\r\n   * parameters concern the actual token approval being requested of the broker.\r\n   *\r\n   * @returns Whether or not onOrderFillReport should be called for orders using this broker\r\n   */\r\n  function brokerRequestAllowance(BrokerData.BrokerApprovalRequest calldata request) external returns (bool);\r\n\r\n  /*\r\n   * After Loopring performs all of the transfers necessary to complete all the submitted\r\n   * rings it will call this function for every order's brokerInterceptor (if set) passing\r\n   * along the final fill counts for tokenB, tokenS and feeToken. This allows actions to be\r\n   * performed on a per-order basis after all tokenS/feeToken funds have left the order owner's\r\n   * possession and the tokenB funds have been transferred to the order owner's intended recipient\r\n   */\r\n  function onOrderFillReport(BrokerData.BrokerInterceptorReport calldata fillReport) external;\r\n\r\n  /*\r\n   * Get the available token balance controlled by the broker on behalf of an address (owner)\r\n   */\r\n  function brokerBalanceOf(address owner, address token) external view returns (uint);\r\n}\r\n\r\n// File: contracts/market-making/UniswapRebalancerMakerBroker.sol\r\n\r\n/*\r\n * Copyright 2019 Dolomite\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * Inherits Loopring's IBrokerDelegate and sources liquidity from Uniswap\r\n * when the Loopring protocol requests a token approval. Because the Loopring\r\n * protocol expects the taker order to precede maker orders, and non-brokered\r\n * transfers occur before before brokered transfers, it is guaranteed that this\r\n * broker contract will receive the necessary tokens to trade, right before it\r\n * sets the approval and the Loopring protocol transfers the tokens out. Thus,\r\n * liquidity can be sourced on-chain with no money down!\r\n */\r\ncontract UniswapRebalancerMakerBroker is MakerBrokerBase, IBrokerDelegate {\r\n\r\n    address internal _wethTokenAddress;\r\n    address internal _loopringDelegate;\r\n    address internal _uniswapV2Router;\r\n    uint8 internal _slippageFactor;\r\n    uint8 internal _decayFactor;\r\n\r\n    mapping(address => address) public tokenToExchange;\r\n    mapping(address => bool) public tokenToIsSetup;\r\n\r\n    constructor(address loopringDelegate, address uniswapV2Router, address wethTokenAddress) public {\r\n        _loopringDelegate = loopringDelegate;\r\n        _wethTokenAddress = wethTokenAddress;\r\n        _uniswapV2Router = uniswapV2Router;\r\n        _slippageFactor = 4;\r\n        _decayFactor = 10;\r\n    }\r\n\r\n    function setupToken(address token) public {\r\n        IERC20(token).safeApprove(_loopringDelegate, uint(- 1));\r\n        IERC20(token).safeApprove(_uniswapV2Router, uint(- 1));\r\n        tokenToIsSetup[token] = true;\r\n    }\r\n\r\n    function setupTokens(address[] calldata tokens) external {\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            setupToken(tokens[i]);\r\n        }\r\n    }\r\n\r\n    function setSlippageFactor(uint8 slippageFactor) external onlyOwner {\r\n        _slippageFactor = slippageFactor;\r\n    }\r\n\r\n    function getSlippageFactor() external view returns (uint8) {\r\n        return _slippageFactor;\r\n    }\r\n\r\n    function setDecayFactor(uint8 decayFactor) external onlyOwner {\r\n        _decayFactor = decayFactor;\r\n    }\r\n\r\n    function getDecayFactor() external view returns (uint8) {\r\n        return _decayFactor;\r\n    }\r\n\r\n    function() external payable {\r\n        revert(\"UniswapRebalancerMakerBroker: NO_DEFAULT\");\r\n    }\r\n\r\n    // --------------------------------\r\n    // Loopring Broker Delegate\r\n\r\n    function brokerRequestAllowance(BrokerData.BrokerApprovalRequest memory request) public returns (bool) {\r\n        require(msg.sender == _loopringDelegate, \"UniswapRebalancerMakerBroker: UNAUTHORIZED\");\r\n        require(tokenToIsSetup[request.tokenS], \"UniswapRebalancerMakerBroker: TOKEN_S_NOT_SETUP\");\r\n\r\n        for (uint i = 0; i < request.orders.length; i++) {\r\n            require(request.orders[i].tokenRecipient == address(this), \"UniswapRebalancerMakerBroker: INVALID_TOKEN_RECIPIENT\");\r\n            require(request.orders[i].owner == owner, \"UniswapRebalancerMakerBroker: INVALID_ORDER_OWNER\");\r\n        }\r\n\r\n        address[] memory intermediatePaths;\r\n        if (request.orders[0].extraData.length == 0) {\r\n            intermediatePaths = new address[](0);\r\n        } else {\r\n            intermediatePaths = abi.decode(request.orders[0].extraData, (address[]));\r\n        }\r\n\r\n        if (\r\n            (_decayFactor != 0 && _slippageFactor != 0) &&\r\n            (intermediatePaths.length == 0 || intermediatePaths[0] != address(0x0000000000000000000000000000000000000001))\r\n        ) {\r\n            address[] memory path = new address[](intermediatePaths.length + 2);\r\n            path[0] = request.tokenB;\r\n            for (uint i = 0; i < intermediatePaths.length; i++) {\r\n                path[i + 1] = intermediatePaths[i];\r\n            }\r\n            path[path.length - 1] = request.tokenS;\r\n\r\n            uint[] memory amounts = IUniswapV2Router01(_uniswapV2Router).getAmountsOut(request.totalFillAmountB, path);\r\n            if (amounts[amounts.length - 1] >= request.totalRequestedAmountS) {\r\n                IUniswapV2Router01(_uniswapV2Router).swapExactTokensForTokens(\r\n                    request.totalFillAmountB,\r\n                    request.totalRequestedAmountS / uint(_slippageFactor),\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                IUniswapV2Router01(_uniswapV2Router).swapExactTokensForTokens(\r\n                    request.totalFillAmountB / uint(_decayFactor),\r\n                    request.totalRequestedAmountS / (uint(_decayFactor) * uint(_slippageFactor)),\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n\r\n        // We don't need a fill report.\r\n        return false;\r\n    }\r\n\r\n    function onOrderFillReport(BrokerData.BrokerInterceptorReport memory fillReport) public {\r\n        // No op\r\n    }\r\n\r\n    /*\r\n     * This broker isn't concerned with accurate balance reporting. It simplifies balance-tracking logic to just report\r\n     * a maximum.\r\n     */\r\n    function brokerBalanceOf(address owner, address token) public view returns (uint) {\r\n        return uint(- 1);\r\n    }\r\n\r\n    function balanceOf(address token) public view returns (uint) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loopringDelegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"brokerBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fillAmountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmountS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct BrokerData.BrokerOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"tokenS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalFillAmountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRequestedAmountS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRequestedFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct BrokerData.BrokerApprovalRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"brokerRequestAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecayFactor\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSlippageFactor\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fillAmountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentAmountS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct BrokerData.BrokerInterceptorReport\",\"name\":\"fillReport\",\"type\":\"tuple\"}],\"name\":\"onOrderFillReport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decayFactor\",\"type\":\"uint8\"}],\"name\":\"setDecayFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slippageFactor\",\"type\":\"uint8\"}],\"name\":\"setSlippageFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setupToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"setupTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToIsSetup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawDust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawDust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEthDust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawEthDust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapRebalancerMakerBroker","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e2466deb9536a69bf8131ecd0c267ee41dd1cda0000000000000000000000000f164fc0ec4e93095b804a4795bbe1e041497b92a000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b4add4ac8850852c61e762a02465868b1651782ce59d513fe7bfd8a4cab8ab69"}]}