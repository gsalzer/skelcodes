{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\n\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole is Initializable, Context {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    function initialize(address sender) public initializer {\n        if (!isPauser(sender)) {\n            _addPauser(sender);\n        }\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(_msgSender());\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n\n    uint256[50] private ______gap;\n}\n\ncontract Pausable is Initializable, Context, PauserRole {\n    /**\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n     * to the deployer.\n     */\n    function initialize(address sender) public initializer {\n        PauserRole.initialize(sender);\n\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    uint256[50] private ______gap;\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary AddressLib {\n    address public constant ADDRESS_EMPTY = address(0x0);\n\n    /**\n     * @dev Checks if this address is all 0s\n     * @param self The address this function was called on\n     * @return boolean\n     */\n    function isEmpty(address self) internal pure returns (bool) {\n        return self == ADDRESS_EMPTY;\n    }\n\n    /**\n     * @dev Checks if this address is the same as another address\n     * @param self The address this function was called on\n     * @param other Address to check against itself\n     * @return boolean\n     */\n    function isEqualTo(address self, address other) internal pure returns (bool) {\n        return self == other;\n    }\n\n    /**\n     * @dev Checks if this address is different to another address\n     * @param self The address this function was called on\n     * @param other Address to check against itself\n     * @return boolean\n     */\n    function isNotEqualTo(address self, address other) internal pure returns (bool) {\n        return self != other;\n    }\n\n    /**\n     * @dev Checks if this address is not all 0s\n     * @param self The address this function was called on\n     * @return boolean\n     */\n    function isNotEmpty(address self) internal pure returns (bool) {\n        return self != ADDRESS_EMPTY;\n    }\n\n    /**\n     * @dev Throws an error if address is all 0s\n     * @param self The address this function was called on\n     * @param message Error message if address is all 0s\n     */\n    function requireNotEmpty(address self, string memory message) internal pure {\n        require(isNotEmpty(self), message);\n    }\n\n    /**\n     * @dev Throws an error if address is not all 0s\n     * @param self The address this function was called on\n     * @param message Error message if address is not all 0s\n     */\n    function requireEmpty(address self, string memory message) internal pure {\n        require(isEmpty(self), message);\n    }\n\n    /**\n     * @dev Throws an error if address is not the same as another address\n     * @param self The address this function was called on\n     * @param other The address to check against itself\n     * @param message Error message if addresses are not the same\n     */\n    function requireEqualTo(address self, address other, string memory message)\n        internal\n        pure\n    {\n        require(isEqualTo(self, other), message);\n    }\n\n    /**\n     * @dev Throws an error if address is the same as another address\n     * @param self The address this function was called on\n     * @param other The address to check against itself\n     * @param message Error message if addresses are the same\n     */\n    function requireNotEqualTo(address self, address other, string memory message)\n        internal\n        pure\n    {\n        require(isNotEqualTo(self, other), message);\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary AssetSettingsLib {\n    using SafeMath for uint256;\n    using AddressLib for address;\n    using Address for address;\n\n    /**\n        @notice This struct manages the asset settings in the platform.\n        @param cTokenAddress cToken address associated to the asset. \n        @param maxLoanAmount max loan amount configured for the asset.\n     */\n    struct AssetSettings {\n        // It prepresents the cTokenAddress or 0x0.\n        address cTokenAddress;\n        // It represents the maximum loan amount to borrow.\n        uint256 maxLoanAmount;\n    }\n\n    /**\n        @notice It initializes the struct instance with the given parameters.\n        @param cTokenAddress the initial cToken address.\n        @param maxLoanAmount the initial max loan amount.\n     */\n    function initialize(\n        AssetSettings storage self,\n        address cTokenAddress,\n        uint256 maxLoanAmount\n    ) internal {\n        require(maxLoanAmount > 0, \"INIT_MAX_AMOUNT_REQUIRED\");\n        require(\n            cTokenAddress.isEmpty() || cTokenAddress.isContract(),\n            \"CTOKEN_MUST_BE_CONTRACT_OR_EMPTY\"\n        );\n        self.cTokenAddress = cTokenAddress;\n        self.maxLoanAmount = maxLoanAmount;\n    }\n\n    /**\n        @notice Checks whether the current asset settings exists or not.\n        @dev It throws a require error if the asset settings already exists.\n        @param self the current asset settings.\n     */\n    function requireNotExists(AssetSettings storage self) internal view {\n        require(exists(self) == false, \"ASSET_SETTINGS_ALREADY_EXISTS\");\n    }\n\n    /**\n        @notice Checks whether the current asset settings exists or not.\n        @dev It throws a require error if the asset settings doesn't exist.\n        @param self the current asset settings.\n     */\n    function requireExists(AssetSettings storage self) internal view {\n        require(exists(self) == true, \"ASSET_SETTINGS_NOT_EXISTS\");\n    }\n\n    /**\n        @notice Tests whether the current asset settings exists or not.\n        @param self the current asset settings.\n        @return true if the current settings exists (max loan amount higher than zero). Otherwise it returns false.\n     */\n    function exists(AssetSettings storage self) internal view returns (bool) {\n        return self.maxLoanAmount > 0;\n    }\n\n    /**\n        @notice Tests whether a given amount is greater than the current max loan amount.\n        @param self the current asset settings.\n        @param amount to test.\n        @return true if the given amount is greater than the current max loan amount. Otherwise it returns false.\n     */\n    function exceedsMaxLoanAmount(AssetSettings storage self, uint256 amount)\n        internal\n        view\n        returns (bool)\n    {\n        return amount > self.maxLoanAmount;\n    }\n\n    /**\n        @notice It updates the cToken address.\n        @param self the current asset settings.\n        @param newCTokenAddress the new cToken address to set.\n     */\n    function updateCTokenAddress(AssetSettings storage self, address newCTokenAddress)\n        internal\n    {\n        requireExists(self);\n        require(self.cTokenAddress != newCTokenAddress, \"NEW_CTOKEN_ADDRESS_REQUIRED\");\n        self.cTokenAddress = newCTokenAddress;\n    }\n\n    /**\n        @notice It updates the max loan amount.\n        @param self the current asset settings.\n        @param newMaxLoanAmount the new max loan amount to set.\n     */\n    function updateMaxLoanAmount(AssetSettings storage self, uint256 newMaxLoanAmount)\n        internal\n    {\n        requireExists(self);\n        require(self.maxLoanAmount != newMaxLoanAmount, \"NEW_MAX_LOAN_AMOUNT_REQUIRED\");\n        require(newMaxLoanAmount > 0, \"MAX_LOAN_AMOUNT_NOT_ZERO\");\n        self.maxLoanAmount = newMaxLoanAmount;\n    }\n}\n\nlibrary PlatformSettingsLib {\n    /**\n        It defines a platform settings. It includes: value, min, and max values.\n     */\n    struct PlatformSetting {\n        uint256 value;\n        uint256 min;\n        uint256 max;\n        bool exists;\n    }\n\n    /**\n        @notice It creates a new platform setting given a name, min and max values.\n        @param value initial value for the setting.\n        @param min min value allowed for the setting.\n        @param max max value allowed for the setting.\n     */\n    function initialize(\n        PlatformSetting storage self,\n        uint256 value,\n        uint256 min,\n        uint256 max\n    ) internal {\n        requireNotExists(self);\n        require(value >= min, \"VALUE_MUST_BE_GT_MIN_VALUE\");\n        require(value <= max, \"VALUE_MUST_BE_LT_MAX_VALUE\");\n        self.value = value;\n        self.min = min;\n        self.max = max;\n        self.exists = true;\n    }\n\n    /**\n        @notice Checks whether the current platform setting exists or not.\n        @dev It throws a require error if the platform setting already exists.\n        @param self the current platform setting.\n     */\n    function requireNotExists(PlatformSetting storage self) internal view {\n        require(self.exists == false, \"PLATFORM_SETTING_ALREADY_EXISTS\");\n    }\n\n    /**\n        @notice Checks whether the current platform setting exists or not.\n        @dev It throws a require error if the current platform setting doesn't exist.\n        @param self the current platform setting.\n     */\n    function requireExists(PlatformSetting storage self) internal view {\n        require(self.exists == true, \"PLATFORM_SETTING_NOT_EXISTS\");\n    }\n\n    /**\n        @notice It updates a current platform setting.\n        @dev It throws a require error if:\n            - The new value is equal to the current value.\n            - The new value is not lower than the max value.\n            - The new value is not greater than the min value\n        @param self the current platform setting.\n        @param newValue the new value to set in the platform setting.\n     */\n    function update(PlatformSetting storage self, uint256 newValue)\n        internal\n        returns (uint256 oldValue)\n    {\n        requireExists(self);\n        require(self.value != newValue, \"NEW_VALUE_REQUIRED\");\n        require(newValue >= self.min, \"NEW_VALUE_MUST_BE_GT_MIN_VALUE\");\n        require(newValue <= self.max, \"NEW_VALUE_MUST_BE_LT_MAX_VALUE\");\n        oldValue = self.value;\n        self.value = newValue;\n    }\n\n    /**\n        @notice It removes a current platform setting.\n        @param self the current platform setting to remove.\n     */\n    function remove(PlatformSetting storage self) internal {\n        requireExists(self);\n        self.value = 0;\n        self.min = 0;\n        self.max = 0;\n        self.exists = false;\n    }\n}\n\nlibrary AddressArrayLib {\n    /**\n      @notice It adds an address value to the array.\n      @param self current array.\n      @param newItem new item to add.\n      @return the current array with the new item.\n    */\n    function add(address[] storage self, address newItem)\n        internal\n        returns (address[] memory)\n    {\n        require(newItem != address(0x0), \"EMPTY_ADDRESS_NOT_ALLOWED\");\n        self.push(newItem);\n        return self;\n    }\n\n    /**\n      @notice It removes the value at the given index in an array.\n      @param self the current array.\n      @param index remove an item in a specific index.\n      @return the current array without the item removed.\n    */\n    function removeAt(address[] storage self, uint256 index)\n        internal\n        returns (address[] memory)\n    {\n        if (index >= self.length) return self;\n\n        if (index == self.length - 1) {\n            delete self[self.length - 1];\n            self.length--;\n            return self;\n        }\n\n        address temp = self[self.length - 1];\n        self[self.length - 1] = self[index];\n        self[index] = temp;\n\n        delete self[self.length - 1];\n        self.length--;\n\n        return self;\n    }\n\n    /**\n      @notice It gets the index for a given item.\n      @param self the current array.\n      @param item to get the index.\n      @return indexAt the current index for a given item.\n      @return found true if the item was found. Otherwise it returns false.\n    */\n    function getIndex(address[] storage self, address item)\n        internal\n        view\n        returns (bool found, uint256 indexAt)\n    {\n        found = false;\n        for (indexAt = 0; indexAt < self.length; indexAt++) {\n            found = self[indexAt] == item;\n            if (found) {\n                return (found, indexAt);\n            }\n        }\n        return (found, indexAt);\n    }\n\n    /**\n      @notice It removes an address value to the array.\n      @param self current array.\n      @param item the item to remove.\n      @return the current array without the removed item.\n    */\n    function remove(address[] storage self, address item)\n        internal\n        returns (address[] memory)\n    {\n        (bool found, uint256 indexAt) = getIndex(self, item);\n        if (!found) return self;\n\n        return removeAt(self, indexAt);\n    }\n}\n\ninterface SettingsInterface {\n    /**\n        @notice This event is emitted when a new platform setting is created.\n        @param settingName new setting name.\n        @param sender address that created it.\n        @param value value for the new setting.\n     */\n    event PlatformSettingCreated(\n        bytes32 indexed settingName,\n        address indexed sender,\n        uint256 value,\n        uint256 minValue,\n        uint256 maxValue\n    );\n\n    /**\n        @notice This event is emitted when a current platform setting is removed.\n        @param settingName setting name removed.\n        @param sender address that removed it.\n     */\n    event PlatformSettingRemoved(\n        bytes32 indexed settingName,\n        uint256 lastValue,\n        address indexed sender\n    );\n\n    /**\n        @notice This event is emitted when a platform setting is updated.\n        @param settingName settings name updated.\n        @param sender address that updated it.\n        @param oldValue old value for the setting.\n        @param newValue new value for the setting.\n     */\n    event PlatformSettingUpdated(\n        bytes32 indexed settingName,\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    /**\n        @notice This event is emitted when a lending pool is paused.\n        @param account address that paused the lending pool.\n        @param lendingPoolAddress lending pool address which was paused.\n     */\n    event LendingPoolPaused(address indexed account, address indexed lendingPoolAddress);\n\n    /**\n        @notice This event is emitted when a lending pool is unpaused.\n        @param account address that paused the lending pool.\n        @param lendingPoolAddress lending pool address which was unpaused.\n     */\n    event LendingPoolUnpaused(\n        address indexed account,\n        address indexed lendingPoolAddress\n    );\n\n    /**\n        @notice This event is emitted when an new asset settings is created.\n        @param sender the transaction sender address.\n        @param assetAddress the asset address used to create the settings.\n        @param cTokenAddress cToken address to configure for the asset.\n        @param maxLoanAmount max loan amount to configure for the asset.\n     */\n    event AssetSettingsCreated(\n        address indexed sender,\n        address indexed assetAddress,\n        address cTokenAddress,\n        uint256 maxLoanAmount\n    );\n\n    /**\n        @notice This event is emitted when an asset settings is removed.\n        @param sender the transaction sender address.\n        @param assetAddress the asset address used to remove the settings.\n     */\n    event AssetSettingsRemoved(address indexed sender, address indexed assetAddress);\n\n    /**\n        @notice This event is emitted when an asset settings (address type) is updated.\n        @param assetSettingName asset setting name updated.\n        @param sender the transaction sender address.\n        @param assetAddress the asset address used to update the asset settings.\n        @param oldValue old value used for the asset setting.\n        @param newValue the value updated.\n     */\n    event AssetSettingsAddressUpdated(\n        bytes32 indexed assetSettingName,\n        address indexed sender,\n        address indexed assetAddress,\n        address oldValue,\n        address newValue\n    );\n\n    /**\n        @notice This event is emitted when an asset settings (uint256 type) is updated.\n        @param assetSettingName asset setting name updated.\n        @param sender the transaction sender address.\n        @param assetAddress the asset address used to update the asset settings.\n        @param oldValue old value used for the asset setting.\n        @param newValue the value updated.\n     */\n    event AssetSettingsUintUpdated(\n        bytes32 indexed assetSettingName,\n        address indexed sender,\n        address indexed assetAddress,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    /**\n        @notice It creates a new platform setting given a setting name, value, min and max values.\n        @param settingName setting name to create.\n        @param value the initial value for the given setting name.\n        @param minValue the min value for the setting.\n        @param maxValue the max value for the setting.\n     */\n    function createPlatformSetting(\n        bytes32 settingName,\n        uint256 value,\n        uint256 minValue,\n        uint256 maxValue\n    ) external;\n\n    /**\n        @notice It updates an existent platform setting given a setting name.\n        @notice It only allows to update the value (not the min or max values).\n        @notice In case you need to update the min or max values, you need to remove it, and create it again.\n        @param settingName setting name to update.\n        @param newValue the new value to set.\n     */\n    function updatePlatformSetting(bytes32 settingName, uint256 newValue) external;\n\n    /**\n        @notice Removes a current platform setting given a setting name.\n        @param settingName to remove.\n     */\n    function removePlatformSetting(bytes32 settingName) external;\n\n    /**\n        @notice It gets the current platform setting for a given setting name\n        @param settingName to get.\n        @return the current platform setting.\n     */\n    function getPlatformSetting(bytes32 settingName)\n        external\n        view\n        returns (PlatformSettingsLib.PlatformSetting memory);\n\n    /**\n        @notice It gets the current platform setting value for a given setting name\n        @param settingName to get.\n        @return the current platform setting value.\n     */\n    function getPlatformSettingValue(bytes32 settingName) external view returns (uint256);\n\n    /**\n        @notice It tests whether a setting name is already configured.\n        @param settingName setting name to test.\n        @return true if the setting is already configured. Otherwise it returns false.\n     */\n    function hasPlatformSetting(bytes32 settingName) external view returns (bool);\n\n    /**\n        @notice It gets whether the platform is paused or not.\n        @return true if platform is paused. Otherwise it returns false.\n     */\n    function isPaused() external view returns (bool);\n\n    /**\n        @notice It gets whether a lending pool is paused or not.\n        @param lendingPoolAddress lending pool address to test.\n        @return true if the lending pool is paused. Otherwise it returns false.\n     */\n    function lendingPoolPaused(address lendingPoolAddress) external view returns (bool);\n\n    /**\n        @notice It pauses a specific lending pool.\n        @param lendingPoolAddress lending pool address to pause.\n     */\n    function pauseLendingPool(address lendingPoolAddress) external;\n\n    /**\n        @notice It unpauses a specific lending pool.\n        @param lendingPoolAddress lending pool address to unpause.\n     */\n    function unpauseLendingPool(address lendingPoolAddress) external;\n\n    /**\n        @notice It creates a new asset settings in the platform.\n        @param assetAddress asset address used to create the new setting.\n        @param cTokenAddress cToken address used to configure the asset setting.\n        @param maxLoanAmount the max loan amount used to configure the asset setting.\n     */\n    function createAssetSettings(\n        address assetAddress,\n        address cTokenAddress,\n        uint256 maxLoanAmount\n    ) external;\n\n    /**\n        @notice It removes all the asset settings for a specific asset address.\n        @param assetAddress asset address used to remove the asset settings.\n     */\n    function removeAssetSettings(address assetAddress) external;\n\n    /**\n        @notice It updates the maximum loan amount for a specific asset address.\n        @param assetAddress asset address to configure.\n        @param newMaxLoanAmount the new maximum loan amount to configure.\n     */\n    function updateMaxLoanAmount(address assetAddress, uint256 newMaxLoanAmount) external;\n\n    /**\n        @notice It updates the cToken address for a specific asset address.\n        @param assetAddress asset address to configure.\n        @param newCTokenAddress the new cToken address to configure.\n     */\n    function updateCTokenAddress(address assetAddress, address newCTokenAddress) external;\n\n    /**\n        @notice Gets the current asset addresses list.\n        @return the asset addresses list.\n     */\n    function getAssets() external view returns (address[] memory);\n\n    /**\n        @notice Get the current asset settings for a given asset address.\n        @param assetAddress asset address used to get the current settings.\n        @return the current asset settings.\n     */\n    function getAssetSettings(address assetAddress)\n        external\n        view\n        returns (AssetSettingsLib.AssetSettings memory);\n\n    /**\n        @notice Tests whether amount exceeds the current maximum loan amount for a specific asset settings.\n        @param assetAddress asset address to test the setting.\n        @param amount amount to test.\n        @return true if amount exceeds current max loan amout. Otherwise it returns false.\n     */\n    function exceedsMaxLoanAmount(address assetAddress, uint256 amount)\n        external\n        view\n        returns (bool);\n\n    /**\n        @notice Tests whether an account has the pauser role.\n        @param account account to test.\n        @return true if account has the pauser role. Otherwise it returns false.\n     */\n    function hasPauserRole(address account) external view returns (bool);\n}\n\ncontract Settings is Pausable, SettingsInterface {\n    using AddressLib for address;\n    using Address for address;\n    using AssetSettingsLib for AssetSettingsLib.AssetSettings;\n    using AddressArrayLib for address[];\n    using PlatformSettingsLib for PlatformSettingsLib.PlatformSetting;\n\n    /** Constants */\n    /**\n        @notice The asset setting name for the maximum loan amount settings.\n     */\n    bytes32 public constant MAX_LOAN_AMOUNT_ASSET_SETTING = \"MaxLoanAmount\";\n    /**\n        @notice The asset setting name for cToken address settings.\n     */\n    bytes32 public constant CTOKEN_ADDRESS_ASSET_SETTING = \"CTokenAddress\";\n\n    /* State Variables */\n\n    /**\n        @notice It represents a mapping to identify the lending pools paused and not paused.\n\n        i.e.: address(lending pool) => true or false.\n     */\n    mapping(address => bool) public lendingPoolPaused;\n\n    /**\n        @notice It represents a mapping to configure the asset settings.\n        @notice The key belongs to the asset address. Example: address(DAI) or address(USDC).\n        @notice The value has the asset settings.\n\n        Examples:\n\n        address(DAI) => {\n            cTokenAddress = 0x1234...890\n            maxLoanAmount = 1000 DAI (max)\n        }\n        address(USDC) => {\n            cTokenAddress = 0x2345...901\n            maxLoanAmount = 500 USDC (max)\n        }\n     */\n    mapping(address => AssetSettingsLib.AssetSettings) public assetSettings;\n\n    /**\n        @notice It contains all the current assets.\n     */\n    address[] public assets;\n\n    /**\n        @notice This mapping represents the platform settings where:\n\n        - The key is the platform setting name.\n        - The value is the platform setting. It includes the value, minimum and maximum values.\n     */\n    mapping(bytes32 => PlatformSettingsLib.PlatformSetting) public platformSettings;\n\n    /** Modifiers */\n\n    /* Constructor */\n\n    /** External Functions */\n\n    /**\n        @notice It creates a new platform setting given a setting name, value, min and max values.\n        @param settingName setting name to create.\n        @param value the initial value for the given setting name.\n        @param minValue the min value for the setting.\n        @param maxValue the max value for the setting.\n     */\n    function createPlatformSetting(\n        bytes32 settingName,\n        uint256 value,\n        uint256 minValue,\n        uint256 maxValue\n    ) external onlyPauser() {\n        require(settingName != \"\", \"SETTING_NAME_MUST_BE_PROVIDED\");\n        platformSettings[settingName].initialize(value, minValue, maxValue);\n\n        emit PlatformSettingCreated(settingName, msg.sender, value, minValue, maxValue);\n    }\n\n    /**\n        @notice It updates an existent platform setting given a setting name.\n        @notice It only allows to update the value (not the min or max values).\n        @notice In case you need to update the min or max values, you need to remove it, and create it again.\n        @param settingName setting name to update.\n        @param newValue the new value to set.\n     */\n    function updatePlatformSetting(bytes32 settingName, uint256 newValue)\n        external\n        onlyPauser()\n    {\n        uint256 oldValue = platformSettings[settingName].update(newValue);\n\n        emit PlatformSettingUpdated(settingName, msg.sender, oldValue, newValue);\n    }\n\n    /**\n        @notice Removes a current platform setting given a setting name.\n        @param settingName to remove.\n     */\n    function removePlatformSetting(bytes32 settingName) external onlyPauser() {\n        uint256 oldValue = platformSettings[settingName].value;\n        platformSettings[settingName].remove();\n\n        emit PlatformSettingRemoved(settingName, oldValue, msg.sender);\n    }\n\n    /**\n        @notice It gets the current platform setting for a given setting name\n        @param settingName to get.\n        @return the current platform setting.\n     */\n    function getPlatformSetting(bytes32 settingName)\n        external\n        view\n        returns (PlatformSettingsLib.PlatformSetting memory)\n    {\n        return _getPlatformSetting(settingName);\n    }\n\n    /**\n        @notice It gets the current platform setting value for a given setting name\n        @param settingName to get.\n        @return the current platform setting value.\n     */\n    function getPlatformSettingValue(bytes32 settingName)\n        external\n        view\n        returns (uint256)\n    {\n        return _getPlatformSetting(settingName).value;\n    }\n\n    /**\n        @notice It tests whether a setting name is already configured.\n        @param settingName setting name to test.\n        @return true if the setting is already configured. Otherwise it returns false.\n     */\n    function hasPlatformSetting(bytes32 settingName) external view returns (bool) {\n        return _getPlatformSetting(settingName).exists;\n    }\n\n    /**\n        @notice It pauses a specific lending pool.\n        @param lendingPoolAddress lending pool address to pause.\n     */\n    function pauseLendingPool(address lendingPoolAddress)\n        external\n        onlyPauser()\n        whenNotPaused()\n    {\n        lendingPoolAddress.requireNotEmpty(\"LENDING_POOL_IS_REQUIRED\");\n        require(!lendingPoolPaused[lendingPoolAddress], \"LENDING_POOL_ALREADY_PAUSED\");\n\n        lendingPoolPaused[lendingPoolAddress] = true;\n\n        emit LendingPoolPaused(msg.sender, lendingPoolAddress);\n    }\n\n    /**\n        @notice It unpauses a specific lending pool.\n        @param lendingPoolAddress lending pool address to unpause.\n     */\n    function unpauseLendingPool(address lendingPoolAddress)\n        external\n        onlyPauser()\n        whenNotPaused()\n    {\n        lendingPoolAddress.requireNotEmpty(\"LENDING_POOL_IS_REQUIRED\");\n        require(lendingPoolPaused[lendingPoolAddress], \"LENDING_POOL_IS_NOT_PAUSED\");\n\n        lendingPoolPaused[lendingPoolAddress] = false;\n\n        emit LendingPoolUnpaused(msg.sender, lendingPoolAddress);\n    }\n\n    /**\n        @notice It gets whether the platform is paused or not.\n        @return true if platform is paused. Otherwise it returns false.\n     */\n    function isPaused() external view returns (bool) {\n        return paused();\n    }\n\n    /**\n        @notice It creates a new asset settings in the platform.\n        @param assetAddress asset address used to create the new setting.\n        @param cTokenAddress cToken address used to configure the asset setting.\n        @param maxLoanAmount the max loan amount used to configure the asset setting.\n     */\n    function createAssetSettings(\n        address assetAddress,\n        address cTokenAddress,\n        uint256 maxLoanAmount\n    ) external onlyPauser() whenNotPaused() {\n        require(assetAddress.isContract(), \"ASSET_ADDRESS_MUST_BE_CONTRACT\");\n\n        assetSettings[assetAddress].requireNotExists();\n\n        assetSettings[assetAddress].initialize(cTokenAddress, maxLoanAmount);\n\n        assets.add(assetAddress);\n\n        emit AssetSettingsCreated(msg.sender, assetAddress, cTokenAddress, maxLoanAmount);\n    }\n\n    /**\n        @notice It removes all the asset settings for a specific asset address.\n        @param assetAddress asset address used to remove the asset settings.\n     */\n    function removeAssetSettings(address assetAddress)\n        external\n        onlyPauser()\n        whenNotPaused()\n    {\n        assetAddress.requireNotEmpty(\"ASSET_ADDRESS_IS_REQUIRED\");\n        assetSettings[assetAddress].requireExists();\n\n        delete assetSettings[assetAddress];\n        assets.remove(assetAddress);\n\n        emit AssetSettingsRemoved(msg.sender, assetAddress);\n    }\n\n    /**\n        @notice It updates the maximum loan amount for a specific asset address.\n        @param assetAddress asset address to configure.\n        @param newMaxLoanAmount the new maximum loan amount to configure.\n     */\n    function updateMaxLoanAmount(address assetAddress, uint256 newMaxLoanAmount)\n        external\n        onlyPauser()\n        whenNotPaused()\n    {\n        uint256 oldMaxLoanAmount = assetSettings[assetAddress].maxLoanAmount;\n\n        assetSettings[assetAddress].updateMaxLoanAmount(newMaxLoanAmount);\n\n        emit AssetSettingsUintUpdated(\n            MAX_LOAN_AMOUNT_ASSET_SETTING,\n            msg.sender,\n            assetAddress,\n            oldMaxLoanAmount,\n            newMaxLoanAmount\n        );\n    }\n\n    /**\n        @notice It updates the cToken address for a specific asset address.\n        @param assetAddress asset address to configure.\n        @param newCTokenAddress the new cToken address to configure.\n     */\n    function updateCTokenAddress(address assetAddress, address newCTokenAddress)\n        external\n        onlyPauser()\n        whenNotPaused()\n    {\n        address oldCTokenAddress = assetSettings[assetAddress].cTokenAddress;\n\n        assetSettings[assetAddress].updateCTokenAddress(newCTokenAddress);\n\n        emit AssetSettingsAddressUpdated(\n            CTOKEN_ADDRESS_ASSET_SETTING,\n            msg.sender,\n            assetAddress,\n            oldCTokenAddress,\n            newCTokenAddress\n        );\n    }\n\n    /**\n        @notice Tests whether amount exceeds the current maximum loan amount for a specific asset settings.\n        @param assetAddress asset address to test the setting.\n        @param amount amount to test.\n        @return true if amount exceeds current max loan amout. Otherwise it returns false.\n     */\n    function exceedsMaxLoanAmount(address assetAddress, uint256 amount)\n        external\n        view\n        returns (bool)\n    {\n        return assetSettings[assetAddress].exceedsMaxLoanAmount(amount);\n    }\n\n    /**\n        @notice Gets the current asset addresses list.\n        @return the asset addresses list.\n     */\n    function getAssets() external view returns (address[] memory) {\n        return assets;\n    }\n\n    /**\n        @notice Get the current asset settings for a given asset address.\n        @param assetAddress asset address used to get the current settings.\n        @return the current asset settings.\n     */\n    function getAssetSettings(address assetAddress)\n        external\n        view\n        returns (AssetSettingsLib.AssetSettings memory)\n    {\n        return assetSettings[assetAddress];\n    }\n\n    /**\n        @notice Tests whether an account has the pauser role.\n        @param account account to test.\n        @return true if account has the pauser role. Otherwise it returns false.\n     */\n    function hasPauserRole(address account) external view returns (bool) {\n        return isPauser(account);\n    }\n\n    /** Internal functions */\n\n    /**\n        @notice It gets the platform setting for a given setting name.\n        @param settingName the setting name to look for.\n        @return the current platform setting for the given setting name.\n     */\n    function _getPlatformSetting(bytes32 settingName)\n        internal\n        view\n        returns (PlatformSettingsLib.PlatformSetting memory)\n    {\n        return platformSettings[settingName];\n    }\n\n    /** Private functions */\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetSettingName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"AssetSettingsAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLoanAmount\",\"type\":\"uint256\"}],\"name\":\"AssetSettingsCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"AssetSettingsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetSettingName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"AssetSettingsUintUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lendingPoolAddress\",\"type\":\"address\"}],\"name\":\"LendingPoolPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lendingPoolAddress\",\"type\":\"address\"}],\"name\":\"LendingPoolUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"}],\"name\":\"PlatformSettingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PlatformSettingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"PlatformSettingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CTOKEN_ADDRESS_ASSET_SETTING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LOAN_AMOUNT_ASSET_SETTING\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanAmount\",\"type\":\"uint256\"}],\"name\":\"createAssetSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"}],\"name\":\"createPlatformSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exceedsMaxLoanAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"getAssetSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetSettingsLib.AssetSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"}],\"name\":\"getPlatformSetting\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct PlatformSettingsLib.PlatformSetting\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"}],\"name\":\"getPlatformSettingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasPauserRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"}],\"name\":\"hasPlatformSetting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingPoolAddress\",\"type\":\"address\"}],\"name\":\"pauseLendingPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"platformSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"removeAssetSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"}],\"name\":\"removePlatformSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingPoolAddress\",\"type\":\"address\"}],\"name\":\"unpauseLendingPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newCTokenAddress\",\"type\":\"address\"}],\"name\":\"updateCTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMaxLoanAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxLoanAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"settingName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updatePlatformSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Settings","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}