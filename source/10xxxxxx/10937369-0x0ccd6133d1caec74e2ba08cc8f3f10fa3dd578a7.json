{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n\r\n* @title ERC20Basic\r\n\r\n* @dev Simpler version of ERC20 interface\r\n\r\n*/\r\n\r\ncontract ERC20Basic {\r\n\r\n\r\n function totalSupply() public view returns (uint256); \r\n\r\n function balanceOf(address who) public view returns (uint256); \r\n\r\n function transfer(address to, uint256 value) public returns (bool); \r\n\r\n event Transfer(address indexed from, address indexed to, uint256 value); \r\n\r\n}\r\n\r\n/**\r\n\r\n* @title SafeMath\r\n\r\n* @dev Math operations with safety checks that throw on error\r\n\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n /**\r\n\r\n * @dev Multiplies two numbers, throws on overflow.\r\n\r\n */\r\n\r\n function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n  if (a == 0) {\r\n\r\n   return 0;\r\n\r\n  }\r\n\r\n  uint256 c = a * b;\r\n\r\n  assert(c / a == b);\r\n\r\n  return c;\r\n\r\n }\r\n\r\n /**\r\n\r\n * @dev Integer division of two numbers, truncating the quotient.\r\n\r\n */\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n  // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n  uint256 c = a / b;\r\n\r\n  // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n  return c;\r\n\r\n }\r\n\r\n /**\r\n\r\n * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n */\r\n\r\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n  assert(b <= a);\r\n\r\n  return a - b;\r\n\r\n }\r\n\r\n /**\r\n\r\n * @dev Adds two numbers, throws on overflow.\r\n\r\n */\r\n\r\n function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n  uint256 c = a + b;\r\n\r\n  assert(c >= a);\r\n\r\n  return c;\r\n\r\n }\r\n\r\n}\r\n\r\n/**\r\n\r\n* @title ERC20 interface\r\n\r\n*/\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n function transferFrom(address from, address to, uint256 value) public returns (bool); \r\n\r\n function approve(address spender, uint256 value) public returns (bool); \r\n\r\n event Approval(address indexed owner, address indexed spender, uint256 value); \r\n\r\n}\r\n\r\n/**\r\n\r\n* @title Basic token\r\n\r\n* @dev Basic version of StandardToken, with no allowances.\r\n\r\n*/\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n using SafeMath for uint256;\r\n\r\n mapping(address => uint256) balances; \r\n\r\n uint256 totalSupply_; \r\n\r\n /**\r\n\r\n * @dev total number of tokens in existence\r\n\r\n */\r\n\r\n function totalSupply() public view returns (uint256) {\r\n\r\n  return totalSupply_;\r\n\r\n }\r\n\r\n /**\r\n\r\n * @dev transfer token for a specified address\r\n\r\n * @param _to The address to transfer to.\r\n\r\n * @param _value The amount to be transferred.\r\n\r\n */\r\n\r\n function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n  require(_to != address(0)); \r\n\r\n  require(_value <= balances[msg.sender]); \r\n\r\n  // SafeMath.sub will throw if there is not enough balance.\r\n\r\n  balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n  balances[_to] = balances[_to].add(_value); \r\n\r\n  Transfer(msg.sender, _to, _value);\r\n\r\n  return true;\r\n\r\n }\r\n\r\n /**\r\n\r\n * @dev Gets the balance of the specified address.\r\n\r\n * @param _owner The address to query the the balance of.\r\n\r\n * @return An uint256 representing the amount owned by the passed address.\r\n\r\n */\r\n\r\n function balanceOf(address _owner) public view returns (uint256 balance) {\r\n\r\n  return balances[_owner]; \r\n \r\n }\r\n\r\n}\r\n\r\n/**\r\n\r\n* @title Standard ERC20 token\r\n\r\n*\r\n\r\n* @dev Implementation of the basic standard token.\r\n\r\n*/\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n /**\r\n\r\n * @dev Transfer tokens from one address to another\r\n\r\n * @param _from address The address which you want to send tokens from\r\n\r\n * @param _to address The address which you want to transfer to\r\n\r\n * @param _value uint256 the amount of tokens to be transferred\r\n\r\n */\r\n\r\n function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\r\n  require(_to != address(0)); \r\n\r\n  require(_value <= balances[_from]); \r\n\r\n  require(_value <= allowed[_from][msg.sender]);\r\n\r\n  balances[_from] = balances[_from].sub(_value);\r\n\r\n  balances[_to] = balances[_to].add(_value);\r\n\r\n  allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \r\n\r\n  Transfer(_from, _to, _value);\r\n\r\n  return true;\r\n\r\n }\r\n\r\n /**\r\n\r\n  * @param _spender address The address which you want to transfer to\r\n\r\n  * @param _value uint256 the amount of tokens to be transferred\r\n\r\n  */\r\n\r\n function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n  allowed[msg.sender][_spender] = _value;\r\n\r\n  Approval(msg.sender, _spender, _value);\r\n\r\n  return true;\r\n\r\n }\r\n\r\n /**\r\n\r\n * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\r\n * @param _owner address The address which owns the funds.\r\n\r\n * @param _spender address The address which will spend the funds.\r\n\r\n * @return A uint256 specifying the amount of tokens still available for the spender.\r\n\r\n */\r\n\r\n function allowance(address _owner, address _spender) public view returns (uint256) {\r\n\r\n  return allowed[_owner][_spender];\r\n\r\n }\r\n\r\n /**\r\n\r\n * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\r\n *\r\n\r\n * approve should be called when allowed[_spender] == 0. To increment\r\n\r\n * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\r\n * the first transaction is mined)\r\n\r\n * From MonolithDAO Token.sol\r\n\r\n * @param _spender The address which will spend the funds.\r\n\r\n * @param _addedValue The amount of tokens to increase the allowance by.\r\n\r\n\r\n */\r\n\r\n function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n\r\n  allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n  Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n  return true;\r\n\r\n }\r\n\r\n /**\r\n\r\n * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\r\n *\r\n\r\n * approve should be called when allowed[_spender] == 0. To decrement\r\n\r\n * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\r\n * the first transaction is mined)\r\n\r\n * From MonolithDAO Token.sol\r\n\r\n * @param _spender The address which will spend the funds.\r\n\r\n * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n\r\n\r\n */\r\n\r\n function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n\r\n  uint oldValue = allowed[msg.sender][_spender];\r\n\r\n  if (_subtractedValue > oldValue) {\r\n\r\n   allowed[msg.sender][_spender] = 0;\r\n\r\n  } else {\r\n\r\n   allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\r\n  }\r\n\r\n  Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n  return true;\r\n\r\n }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n* @title Ownable\r\n\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n\r\n* functions, this simplifies the implementation of \"user permissions\". \r\n\r\n*/\r\n\r\ncontract Ownable {\r\n\r\n address public owner;\r\n\r\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n /**\r\n\r\n * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\r\n * account.\r\n\r\n */\r\n\r\n function Ownable() public {\r\n\r\n  owner = msg.sender;\r\n\r\n }\r\n\r\n /**\r\n\r\n * @dev Throws if called by any account other than the owner.\r\n\r\n */\r\n\r\n modifier onlyOwner() {\r\n\r\n  require(msg.sender == owner);\r\n\r\n  _;\r\n\r\n }\r\n\r\n /**\r\n\r\n * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\r\n * @param newOwner The address to transfer ownership to. \r\n\r\n */\r\n\r\n function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n  require(newOwner != address(0));\r\n\r\n  OwnershipTransferred(owner, newOwner);\r\n\r\n  owner = newOwner;\r\n\r\n }\r\n\r\n}\r\n\r\n/**\r\n\r\n* @title SimpleToken\r\n\r\n* @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n\r\n* Note they can later distribute these tokens as they wish using `transfer` and other\r\n\r\n\r\n*/\r\n\r\ncontract XXXToken is StandardToken , Ownable {\r\n\r\n  string public constant name = \"XXXToken\"; // solium-disable-line uppercase\r\n\r\n  string public constant symbol = \"XXX\"; // solium-disable-line uppercase\r\n\r\n  uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 30000000 * (10 ** uint256(decimals));\r\n  \r\n  uint256 public  MINTING_SUPPLY = 9000000 * (10 ** uint256(decimals));\r\n\r\n  /**\r\n\r\n  * @dev Constructor that gives msg.sender all of existing tokens.\r\n\r\n  */\r\n\r\n  function XXXToken() public {\r\n\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    \r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n\r\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev lock coin\r\n\r\n */\r\n\r\ncontract XXXTokenVault is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n    \r\n  address private owner;\r\n\r\n  uint256 private teamTimeLock = 1 * 365 days;\r\n  \r\n//   uint256 private mintingTimeLock = 90 days;\r\n\t\r\n uint256 private mintingTimeLock = 90 seconds;\r\n  \r\n\r\n  /** Reserve allocations */\r\n\r\n  mapping (address=>mapping(uint256 => mapping (uint8 => uint256))) public allocations;\r\n\r\n  /** When timeLocks are over (UNIX Timestamp) */\r\n\r\n  mapping (address=>mapping(uint256 => mapping (uint8 => uint256))) public timeLocks;\r\n\r\n\r\n  /** When this vault was locked (UNIX Timestamp)*/\r\n\r\n  uint256 private lockedAt = 0;\r\n\r\n  XXXToken public token;\r\n\r\n\r\n  /** Distributed reserved tokens */\r\n\r\n  event Distributed(uint256 lockId,uint8 batch, uint256 value);\r\n\r\n  /** Tokens have been locked */\r\n\r\n  event Locked(uint256 lockId,uint256 lockTime, uint256 value);\r\n\r\n\r\n  function XXXTokenVault(ERC20 _token) public { \r\n\r\n    owner = msg.sender; \r\n\r\n    token = XXXToken(_token);\r\n\r\n  }\r\n\r\n  /** lock team coin */\r\n\r\n  function lockTeam(uint256 lockId,uint256 _amount) public onlyOwner returns (bool){\r\n\r\n    lockedAt = block.timestamp; \r\n    timeLocks[msg.sender][lockId][0] = lockedAt.add(teamTimeLock);\r\n    timeLocks[msg.sender][lockId][1] = lockedAt.add(teamTimeLock.mul(2));\r\n    allocations[msg.sender][lockId][0] = _amount;\r\n    allocations[msg.sender][lockId][1] = 0;\r\n\r\n    Locked(lockId,lockedAt,_amount);\r\n\r\n  }\r\n  /** lock minting coin */\r\n  function lockMinting(address _owner, uint256 lockId,uint256 _amount) public  returns (bool){\r\n\r\n    lockedAt = block.timestamp; \r\n    timeLocks[_owner][lockId][0] = lockedAt.add(mintingTimeLock);\r\n    timeLocks[_owner][lockId][1] = lockedAt.add(mintingTimeLock.mul(2));\r\n    allocations[_owner][lockId][0] = _amount.div(2);\r\n    allocations[_owner][lockId][1] = _amount.div(2);\r\n\r\n    Locked(lockId,lockedAt,_amount);\r\n    \r\n    return true;\r\n\r\n  }\r\n  \r\n\r\n  // Total number of tokens currently in the vault\r\n\r\n  function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\r\n\r\n    return token.balanceOf(address(this));\r\n\r\n  }\r\n\r\n  // Number of tokens that are still locked\r\n\r\n  function getLockedBalance(address parter,uint256 lockId) public view  returns (uint256 tokensLocked) {\r\n\r\n    return allocations[parter][lockId][0].add(allocations[parter][lockId][1]);\r\n\r\n  }\r\n\r\n  //Claim tokens for reserve wallets\r\n\r\n  function claimTokenReserve(address parter,uint256 lockId,uint8 batch)  public  returns (bool){\r\n      \r\n    require( batch==0 || batch==1);\r\n    \r\n    require(allocations[parter][lockId][batch] !=0 &&timeLocks[parter][lockId][batch] !=0);\r\n    \r\n    require(block.timestamp > timeLocks[parter][lockId][batch]);\r\n\r\n    uint256 amount = allocations[parter][lockId][batch];\r\n    \r\n    require(token.transfer(msg.sender, amount));\r\n    \r\n    allocations[parter][lockId][batch]=0;\r\n    \r\n    timeLocks[parter][lockId][batch]=0;\r\n\r\n    Distributed(lockId,batch, amount);\r\n    \r\n    return true;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract TetherToken  {\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(!(msg.data.length < size + 4));\r\n        _;\r\n    }\r\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32);\r\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32);\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n    function balanceOf(address who) public constant returns (uint);\r\n}\r\n\r\n\r\n\r\ncontract Minting is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address public admin; \r\n\tmapping (address => uint256) public minters;\r\n    \r\n    TetherToken public tokenUsdt;\r\n    XXXToken public tokenXXX;\r\n    XXXTokenVault public tokenVault;\r\n    \r\n    address public beneficiary;\r\n    uint256 public price; \r\n    \r\n      // Transfer all tokens on this contract back to the owner\r\n      function getUsdt(address _Account,uint256 _mount) external  onlyOwner returns (bool){\r\n\r\n        tokenUsdt.transfer(_Account, _mount);\r\n\r\n      }\r\n    \r\n    function Minting(address _adminAccount, ERC20 _tokenUsdt, ERC20 _tokenXXX, ERC20 _tokenVault, uint256 _price) public {\r\n        \r\n\t\tadmin = _adminAccount;\r\n\t\t\r\n        transferOwnership(admin);\r\n        \r\n        tokenXXX = XXXToken(_tokenXXX);\r\n        \r\n        tokenUsdt = TetherToken(_tokenUsdt);\r\n        \r\n        tokenVault = XXXTokenVault(_tokenVault);\r\n        \r\n        price = _price;\r\n\t}\r\n\r\n\tfunction setPrice(uint256 _price) public onlyOwner returns (bool){\r\n\t\t price = _price;\r\n\t}\r\n\r\n\tfunction setMinter(address minter, uint256 _usdtAmount) public onlyOwner returns (bool){\r\n\t\tminters[minter]=_usdtAmount;\r\n\t}\r\n    \r\n    function mintingXXX(uint256 Appid, uint256 _usdtAmount) public returns (bool){\r\n        beneficiary = msg.sender;\r\n\r\n\t\trequire(minters[beneficiary]>0);\r\n        \r\n        _preValidatePurchaseMinting(beneficiary, _usdtAmount);    \r\n        \r\n        uint256 _usdtToXXXAmount = _usdtAmount.mul(price).div(10000);\r\n        \r\n        require(tokenXXX.balanceOf(address(this)) >= _usdtToXXXAmount);\r\n\r\n        tokenUsdt.transferFrom(msg.sender, address(this), _usdtAmount);\r\n        \r\n        require(tokenXXX.transfer(tokenVault, _usdtToXXXAmount));\r\n        \r\n        require(tokenVault.lockMinting(msg.sender,Appid,_usdtToXXXAmount));\r\n        \r\n        minters[beneficiary]=0;\r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n     function refundXXX(uint256 _XXXAmount) public returns (bool){\r\n        beneficiary = msg.sender;\r\n        \r\n        _preValidatePurchaseRefund(beneficiary, _XXXAmount);    \r\n        \r\n        uint256 _XXXToUsdtAmount = _XXXAmount.div(price).mul(10000);\r\n        \r\n        require(tokenUsdt.balanceOf(address(this)) >= _XXXToUsdtAmount);\r\n\r\n        require(tokenXXX.transferFrom(msg.sender, address(this), _XXXAmount));\r\n        \r\n        tokenUsdt.transfer(beneficiary, _XXXToUsdtAmount);\r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n    \r\n     function _preValidatePurchaseRefund(address _beneficiary, uint256 _amount) internal view {\r\n        require(_amount > 0);\r\n        require(tokenXXX.allowance(_beneficiary, address(this)) >= _amount);\r\n        require(tokenXXX.balanceOf(_beneficiary) >= _amount);\r\n        this; \r\n    }\r\n    \r\n    \r\n    function _preValidatePurchaseMinting(address _beneficiary, uint256 _amount) internal view {\r\n        require(_amount > 0);\r\n        require(tokenUsdt.allowance(_beneficiary, address(this)) >= _amount);\r\n        require(tokenUsdt.balanceOf(_beneficiary) >= _amount);\r\n        this; \r\n    }\r\n    \t\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINTING_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"XXXToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3665ab4bf8e285c0b3db91a053631ecfe5252b3093c109862fb4c48e2b4d0a0f"}]}