{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.4;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SWAPCONTRACT{\r\n    \r\n   using SafeMath for uint256;\r\n    \r\n   address public V1;\r\n   address public V2;\r\n   bool swapEnabled;\r\n   address administrator;\r\n   \r\n   constructor() public {\r\n       \r\n\t    administrator = msg.sender;\r\n\t\tswapEnabled = false;\r\n\t\t\r\n\t}\r\n\t\r\n//======================================ADMINSTRATION=========================================//\r\n\r\n\tmodifier onlyCreator() {\r\n        require(msg.sender == administrator, \"Ownable: caller is not the administrator\");\r\n        _;\r\n    }\r\n   \r\n   function tokenConfig(address _v1Address, address _v2Address) public onlyCreator returns(bool){\r\n       require(_v1Address != address(0) && _v2Address != address(0), \"Invalid address has been set\");\r\n       V1 = _v1Address;\r\n       V2 = _v2Address;\r\n       return true;\r\n       \r\n   }\r\n   \r\n   \r\n   function swapStatus(bool _status) public onlyCreator returns(bool){\r\n       require(V1 != address(0) && V2 != address(0), \"V1 and V2 addresses are not set up yet\");\r\n       swapEnabled = _status;\r\n   }\r\n   \r\n   \r\n   \r\n   \r\n   function swap(uint256 _amount) external returns(bool){\r\n       \r\n       require(swapEnabled, \"Swap not yet initialized\");\r\n       require(_amount > 0, \"Invalid amount to swap\");\r\n       require(IERC20(V1).balanceOf(msg.sender) >= _amount, \"You cannot swap more than what you hold\");\r\n       require(IERC20(V2).balanceOf(address(this)) >= _amount, \"Insufficient amount of tokens to be swapped for\");\r\n       require(IERC20(V1).allowance(msg.sender, address(this)) >= _amount, \"Insufficient allowance given to contract\");\r\n       \r\n       require(IERC20(V1).transferFrom(msg.sender, address(this), _amount), \"Transaction failed on root\");\r\n       require(IERC20(V2).transfer(msg.sender, _amount), \"Transaction failed from base\");\r\n       \r\n       return true;\r\n       \r\n   }\r\n   \r\n   function swapAll() external returns(bool){\r\n       \r\n       require(swapEnabled, \"Swap not yet initialized\");\r\n       uint v1userbalance = IERC20(V1).balanceOf(msg.sender);\r\n       uint v2contractbalance = IERC20(V2).balanceOf(address(this));\r\n       \r\n       require(v1userbalance > 0, \"You cannot swap on zero balance\");\r\n       require(v2contractbalance >= v1userbalance, \"Insufficient amount of tokens to be swapped for\");\r\n       require(IERC20(V1).allowance(msg.sender, address(this)) >= v1userbalance, \"Insufficient allowance given to contract\");\r\n       \r\n       require(IERC20(V1).transferFrom(msg.sender, address(this), v1userbalance), \"Transaction failed on root\");\r\n       require(IERC20(V2).transfer(msg.sender, v1userbalance), \"Transaction failed from base\");\r\n       \r\n       return true;\r\n       \r\n   }\r\n   \r\n   \r\n   function GetLeftOverV1() public onlyCreator returns(bool){\r\n      \r\n      require(administrator != address(0));\r\n      require(administrator != address(this));\r\n      require(V1 != address(0) && V2 != address(0), \"V1 address not set up yet\");\r\n      uint bal = IERC20(V1).balanceOf(address(this));\r\n      require(IERC20(V1).transfer(administrator, bal), \"Transaction failed\");\r\n      \r\n  }\r\n  \r\n  function GetLeftOverV2() public onlyCreator returns(bool){\r\n      \r\n      require(administrator != address(0));\r\n      require(administrator != address(this));\r\n      require(V1 != address(0) && V2 != address(0), \"V1 address not set up yet\");\r\n      uint bal = IERC20(V2).balanceOf(address(this));\r\n      require(IERC20(V2).transfer(administrator, bal), \"Transaction failed\");\r\n      \r\n  }\r\n   \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GetLeftOverV1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetLeftOverV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"swapStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"tokenConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SWAPCONTRACT","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8dd58147ba196c70a71361a9e662f426f36a8995a5533e834f75b8013cb9f398"}]}