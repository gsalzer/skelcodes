{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"./IERC20.sol\";\r\n// import \"../../math/SafeMath.sol\";\r\n// import \"../../utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/lib/ExplicitERC20.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n    \r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title ExplicitERC20\r\n * @author Set Protocol\r\n *\r\n * Utility functions for ERC20 transfers that require the explicit amount to be transfered.\r\n */\r\nlibrary ExplicitERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * When given allowance, transfers a token from the \"_from\" to the \"_to\" of quantity \"_quantity\".\r\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\r\n     *\r\n     * @param _token           ERC20 token to approve\r\n     * @param _from            The account to transfer tokens from\r\n     * @param _to              The account to transfer tokens to\r\n     * @param _quantity        The quantity to transfer\r\n     */\r\n    function transferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        // Call specified ERC20 contract to transfer tokens (via proxy).\r\n        if (_quantity > 0) {\r\n            uint256 existingBalance = _token.balanceOf(_to);\r\n\r\n            SafeERC20.safeTransferFrom(\r\n                _token,\r\n                _from,\r\n                _to,\r\n                _quantity\r\n            );\r\n\r\n            uint256 newBalance = _token.balanceOf(_to);\r\n\r\n            // Verify transfer quantity is reflected in balance\r\n            require(\r\n                newBalance == existingBalance.add(_quantity),\r\n                \"Invalid post transfer balance\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/lib/AddressArrayUtils.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n    \r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title AddressArrayUtils\r\n * @author Set Protocol\r\n *\r\n * Utility functions to handle Address Arrays\r\n */\r\nlibrary AddressArrayUtils {\r\n\r\n    /**\r\n     * Finds the index of the first occurrence of the given element.\r\n     * @param A The input array to search\r\n     * @param a The value to find\r\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\r\n     */\r\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\r\n        uint256 length = A.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (A[i] == a) {\r\n                return (i, true);\r\n            }\r\n        }\r\n        return (0, false);\r\n    }\r\n\r\n    /**\r\n    * Returns true if the value is present in the list. Uses indexOf internally.\r\n    * @param A The input array to search\r\n    * @param a The value to find\r\n    * @return Returns isIn for the first occurrence starting from index 0\r\n    */\r\n    function contains(address[] memory A, address a) internal pure returns (bool) {\r\n        bool isIn;\r\n        (, isIn) = indexOf(A, a);\r\n        return isIn;\r\n    }\r\n\r\n    /**\r\n    * Returns true if there are 2 elements that are the same in an array\r\n    * @param A The input array to search\r\n    * @return Returns boolean for the first occurence of a duplicate\r\n    */\r\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\r\n        for (uint256 i = 0; i < A.length - 1; i++) {\r\n            address current = A[i];\r\n            for (uint256 j = i + 1; j < A.length; j++) {\r\n                if (current == A[j]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the array with a appended to A.\r\n     * @param A The first array\r\n     * @param a The value to append\r\n     * @return Returns A appended by a\r\n     */\r\n    function append(address[] memory A, address a) internal pure returns (address[] memory) {\r\n        address[] memory newAddresses = new address[](A.length + 1);\r\n        for (uint256 i = 0; i < A.length; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        newAddresses[A.length] = a;\r\n        return newAddresses;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the new array\r\n     */\r\n    function remove(address[] memory A, address a)\r\n        internal\r\n        pure\r\n        returns (address[] memory)\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"Address not in array.\");\r\n        } else {\r\n            (address[] memory _A,) = pop(A, index);\r\n            return _A;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Removes specified index from array\r\n    * Resulting ordering is not guaranteed\r\n    * @return Returns the new array and the removed entry\r\n    */\r\n    function pop(address[] memory A, uint256 index)\r\n        internal\r\n        pure\r\n        returns (address[] memory, address)\r\n    {\r\n        uint256 length = A.length;\r\n        address[] memory newAddresses = new address[](length - 1);\r\n        for (uint256 i = 0; i < index; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = index + 1; j < length; j++) {\r\n            newAddresses[j - 1] = A[j];\r\n        }\r\n        return (newAddresses, A[index]);\r\n    }\r\n}\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"../GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n    \r\n*/\r\n\r\npragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import { AddressArrayUtils } from \"../lib/AddressArrayUtils.sol\";\r\n// import { ExplicitERC20 } from \"../lib/ExplicitERC20.sol\";\r\n\r\n/**\r\n * @title Controller\r\n * @author Set Protocol\r\n *\r\n * Contract that houses state for approvals and system contracts such as added Sets,\r\n * modules, factories, resources (like price oracles), and protocol fee configurations.\r\n */\r\ncontract Controller is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using AddressArrayUtils for address[];\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event FactoryAdded(address _factory);\r\n    event FactoryRemoved(address _factory);\r\n    event FeeEdited(address indexed _module, uint256 indexed _feeType, uint256 _feePercentage);\r\n    event FeeRecipientChanged(address _newFeeRecipient);\r\n    event ModuleAdded(address _module);\r\n    event ModuleRemoved(address _module);\r\n    event ResourceAdded(address _resource, uint256 _id);\r\n    event ResourceRemoved(address _resource, uint256 _id);\r\n    event SetAdded(address _setToken, address _factory);\r\n    event SetRemoved(address _setToken);\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    /**\r\n     * Throws if function is called by any address other than a valid factory.\r\n     */\r\n    modifier onlyFactory() {\r\n        require(isFactory[msg.sender], \"Only valid factories can call\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Throws if function is called by any address other than a module or a resource.\r\n     */\r\n    modifier onlyModuleOrResource() {\r\n        require(\r\n            isResource[msg.sender] || isModule[msg.sender],\r\n            \"Only valid resources or modules can call\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfInitialized() {\r\n        require(isInitialized, \"Contract must be initialized.\");\r\n        _;\r\n    }\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // List of enabled Sets\r\n    address[] public sets;\r\n    // List of enabled factories of SetTokens\r\n    address[] public factories;\r\n    // List of enabled Modules; Modules extend the functionality of SetTokens\r\n    address[] public modules;\r\n    // List of enabled Resources; Resources provide data, functionality, or\r\n    // permissions that can be drawn upon from Module, SetTokens or factories\r\n    address[] public resources;\r\n\r\n    // Mappings to check whether address is valid Set, Factory, Module or Resource\r\n    mapping(address => bool) public isSet;\r\n    mapping(address => bool) public isFactory;\r\n    mapping(address => bool) public isModule;\r\n    mapping(address => bool) public isResource;\r\n\r\n    // Mapping of modules to fee types to fee percentage. A module can have multiple feeTypes\r\n    // Fee is denominated in precise unit percentages (100% = 1e18, 1% = 1e16)\r\n    mapping(address => mapping(uint256 => uint256)) public fees;\r\n\r\n    // Mapping of resource ID to resource address, which allows contracts to fetch the correct\r\n    // resource while providing an ID\r\n    mapping(uint256 => address) public resourceId;\r\n\r\n    // Recipient of protocol fees\r\n    address public feeRecipient;\r\n\r\n    // Return true if the controller is initialized\r\n    bool public isInitialized;\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Initializes the initial fee recipient on deployment.\r\n     *\r\n     * @param _feeRecipient          Address of the initial protocol fee recipient\r\n     */\r\n    constructor(address _feeRecipient) public {\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * Initializes any predeployed factories, modules, and resources post deployment. Note: This function can\r\n     * only be called by the owner once to batch initialize the initial system contracts.\r\n     *\r\n     * @param _factories             List of factories to add\r\n     * @param _modules               List of modules to add\r\n     * @param _resources             List of resources to add\r\n     * @param _resourceIds           List of resource IDs associated with the resources\r\n     */\r\n    function initialize(\r\n        address[] memory _factories,\r\n        address[] memory _modules,\r\n        address[] memory _resources,\r\n        uint256[] memory _resourceIds\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        // Requires Controller has not been initialized yet\r\n        require(\r\n            !isInitialized,\r\n            \"Controller is already initialized\"\r\n        );\r\n\r\n        factories = _factories;\r\n        modules = _modules;\r\n        resources = _resources;\r\n\r\n        // Loop through and initialize isModule, isFactory, and isResource mapping\r\n        for (uint256 i = 0; i < _factories.length; i++) {\r\n            require(_factories[i] != address(0), \"Zero address submitted.\");\r\n            isFactory[_factories[i]] = true;\r\n        }\r\n        for (uint256 i = 0; i < _modules.length; i++) {\r\n            require(_modules[i] != address(0), \"Zero address submitted.\");\r\n            isModule[_modules[i]] = true;\r\n        }\r\n        for (uint256 i = 0; i < _resources.length; i++) {\r\n            require(_resources[i] != address(0), \"Zero address submitted.\");\r\n            require(_resources.length == _resourceIds.length, \"Array lengths do not match.\");\r\n            isResource[_resources[i]] = true;\r\n            resourceId[_resourceIds[i]] = _resources[i];\r\n        }\r\n\r\n        // Set to true to only allow initialization once\r\n        isInitialized = true;\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED MODULE OR RESOURCE FUNCTION. Allows a module or resource to transfer tokens\r\n     * from an address (that has set allowance on the controller).\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _from           The address to transfer from\r\n     * @param  _to             The address to transfer to\r\n     * @param  _quantity       The number of tokens to transfer\r\n     */\r\n    function transferFrom(\r\n        address _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        onlyIfInitialized\r\n        onlyModuleOrResource\r\n    {\r\n        if (_quantity > 0) {\r\n            ExplicitERC20.transferFrom(\r\n                IERC20(_token),\r\n                _from,\r\n                _to,\r\n                _quantity\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED MODULE OR RESOURCE FUNCTION. Allows a module or resource to batch transfer tokens\r\n     * from an address (that has set allowance on the proxy).\r\n     *\r\n     * @param  _tokens          The addresses of the ERC20 token\r\n     * @param  _from            The addresses to transfer from\r\n     * @param  _to              The addresses to transfer to\r\n     * @param  _quantities      The numbers of tokens to transfer\r\n     */\r\n    function batchTransferFrom(\r\n        address[] calldata _tokens,\r\n        address _from,\r\n        address _to,\r\n        uint256[] calldata _quantities\r\n    )\r\n        external\r\n        onlyIfInitialized\r\n        onlyModuleOrResource\r\n    {\r\n        // Storing token count to local variable to save on invocation\r\n        uint256 tokenCount = _tokens.length;\r\n\r\n        // Confirm and empty _tokens array is not passed\r\n        require(\r\n            tokenCount > 0,\r\n            \"Tokens must not be empty\"\r\n        );\r\n\r\n        // Confirm there is one quantity for every token address\r\n        require(\r\n            tokenCount == _quantities.length,\r\n            \"Tokens and quantities lengths mismatch\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < tokenCount; i++) {\r\n            if (_quantities[i] > 0) {\r\n                ExplicitERC20.transferFrom(\r\n                    IERC20(_tokens[i]),\r\n                    _from,\r\n                    _to,\r\n                    _quantities[i]\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED FACTORY FUNCTION. Adds a newly deployed SetToken as an enabled SetToken.\r\n     *\r\n     * @param _setToken               Address of the SetToken contract to add\r\n     */\r\n    function addSet(address _setToken) external onlyIfInitialized onlyFactory {\r\n        require(!isSet[_setToken], \"Set already exists\");\r\n\r\n        isSet[_setToken] = true;\r\n\r\n        sets.push(_setToken);\r\n\r\n        emit SetAdded(_setToken, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a Set\r\n     *\r\n     * @param _setToken               Address of the SetToken contract to remove\r\n     */\r\n    function removeSet(address _setToken) external onlyIfInitialized onlyOwner {\r\n        require(isSet[_setToken], \"Set does not exist\");\r\n\r\n        sets = sets.remove(_setToken);\r\n\r\n        isSet[_setToken] = false;\r\n\r\n        emit SetRemoved(_setToken);\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a factory\r\n     *\r\n     * @param _factory               Address of the factory contract to add\r\n     */\r\n    function addFactory(address _factory) external onlyIfInitialized onlyOwner {\r\n        require(!isFactory[_factory], \"Factory already exists\");\r\n\r\n        isFactory[_factory] = true;\r\n\r\n        factories.push(_factory);\r\n\r\n        emit FactoryAdded(_factory);\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a factory\r\n     *\r\n     * @param _factory               Address of the factory contract to remove\r\n     */\r\n    function removeFactory(address _factory) external onlyIfInitialized onlyOwner {\r\n        require(isFactory[_factory], \"Factory does not exist\");\r\n\r\n        factories = factories.remove(_factory);\r\n\r\n        isFactory[_factory] = false;\r\n\r\n        emit FactoryRemoved(_factory);\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a module\r\n     *\r\n     * @param _module               Address of the module contract to add\r\n     */\r\n    function addModule(address _module) external onlyIfInitialized onlyOwner {\r\n        require(!isModule[_module], \"Module already exists\");\r\n\r\n        isModule[_module] = true;\r\n\r\n        modules.push(_module);\r\n\r\n        emit ModuleAdded(_module);\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a module\r\n     *\r\n     * @param _module               Address of the module contract to remove\r\n     */\r\n    function removeModule(address _module) external onlyIfInitialized onlyOwner {\r\n        require(isModule[_module], \"Module does not exist\");\r\n\r\n        modules = modules.remove(_module);\r\n\r\n        isModule[_module] = false;\r\n\r\n        emit ModuleRemoved(_module);\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a resource\r\n     *\r\n     * @param _resource               Address of the resource contract to add\r\n     * @param _id                     New ID of the resource contract\r\n     */\r\n    function addResource(address _resource, uint256 _id) external onlyIfInitialized onlyOwner {\r\n        require(!isResource[_resource], \"Resource already exists\");\r\n\r\n        require(resourceId[_id] == address(0), \"Resource ID already exists\");\r\n\r\n        isResource[_resource] = true;\r\n\r\n        resourceId[_id] = _resource;\r\n\r\n        resources.push(_resource);\r\n\r\n        emit ResourceAdded(_resource, _id);\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a resource\r\n     *\r\n     * @param _id               ID of the resource contract to remove\r\n     */\r\n    function removeResource(uint256 _id) external onlyIfInitialized onlyOwner {\r\n        address resourceToRemove = resourceId[_id];\r\n\r\n        require(resourceToRemove != address(0), \"Resource does not exist\");\r\n\r\n        resources = resources.remove(resourceToRemove);\r\n\r\n        resourceId[_id] = address(0);\r\n\r\n        isResource[resourceToRemove] = false;\r\n\r\n        emit ResourceRemoved(resourceToRemove, _id);\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a fee to a module\r\n     *\r\n     * @param _module               Address of the module contract to add fee to\r\n     * @param _feeType              Type of the fee to add in the module\r\n     * @param _newFeePercentage     Percentage of fee to add in the module (denominated in preciseUnits eg 1% = 1e16)\r\n     */\r\n    function addFee(address _module, uint256 _feeType, uint256 _newFeePercentage) external onlyIfInitialized onlyOwner {\r\n        require(isModule[_module], \"Module does not exist\");\r\n\r\n        require(fees[_module][_feeType] == 0, \"Fee type already exists on module\");\r\n\r\n        fees[_module][_feeType] = _newFeePercentage;\r\n\r\n        emit FeeEdited(_module, _feeType, _newFeePercentage);\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to edit a fee in an existing module\r\n     *\r\n     * @param _module               Address of the module contract to edit fee\r\n     * @param _feeType              Type of the fee to edit in the module\r\n     * @param _newFeePercentage     Percentage of fee to edit in the module (denominated in preciseUnits eg 1% = 1e16)\r\n     */\r\n    function editFee(address _module, uint256 _feeType, uint256 _newFeePercentage) external onlyIfInitialized onlyOwner {\r\n        require(isModule[_module], \"Module does not exist\");\r\n\r\n        require(fees[_module][_feeType] != 0, \"Fee type does not exist on module\");\r\n\r\n        fees[_module][_feeType] = _newFeePercentage;\r\n\r\n        emit FeeEdited(_module, _feeType, _newFeePercentage);\r\n    }\r\n\r\n    /**\r\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to edit the protocol fee recipient\r\n     *\r\n     * @param _newFeeRecipient      Address of the new protocol fee recipient\r\n     */\r\n    function editFeeRecipient(address _newFeeRecipient) external onlyIfInitialized onlyOwner {\r\n        feeRecipient = _newFeeRecipient;\r\n\r\n        emit FeeRecipientChanged(_newFeeRecipient);\r\n    }\r\n\r\n    /* ============ External Getter Functions ============ */\r\n\r\n    function getModuleFee(\r\n        address _moduleAddress,\r\n        uint256 _feeType\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return fees[_moduleAddress][_feeType];\r\n    }\r\n\r\n    function getFactories() external view returns (address[] memory) {\r\n        return factories;\r\n    }\r\n\r\n    function getModules() external view returns (address[] memory) {\r\n        return modules;\r\n    }\r\n\r\n    function getResources() external view returns (address[] memory) {\r\n        return resources;\r\n    }\r\n\r\n    function getSets() external view returns (address[] memory) {\r\n        return sets;\r\n    }\r\n\r\n    /**\r\n     * Check if a contract address is a module, Set, resource, factory or controller\r\n     *\r\n     * @param  _contractAddress           The contract address to check\r\n     */\r\n    function isSystemContract(address _contractAddress) external view returns (bool) {\r\n        return (\r\n            isSet[_contractAddress] ||\r\n            isModule[_contractAddress] ||\r\n            isResource[_contractAddress] ||\r\n            isFactory[_contractAddress] ||\r\n            _contractAddress == address(this)\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"FactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"FactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_feeType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"FeeEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"ModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"ModuleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_resource\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ResourceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_resource\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ResourceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"SetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"SetRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"addFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resource\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"addSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"editFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"editFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moduleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeType\",\"type\":\"uint256\"}],\"name\":\"getModuleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResources\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_resources\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_resourceIds\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isResource\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"isSystemContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"removeSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resourceId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d85be7bd96404b02f3c674137d2c369bf2bf40a1","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5a5a11ab084c2b7681d44aa9107d56a02406a2c23a455075b8d8e7503650574a"}]}