{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n    \r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint public decimals;\r\n    string public    name;\r\n    string public   symbol;\r\n    mapping(address => uint) public balances;\r\n    mapping (address => mapping (address => uint)) public allowed;\r\n    \r\n    address[] users;\r\n    \r\n    uint public _totalSupply;\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n \r\n\r\n\r\ncontract YXBToken is ERC20{\r\n    using SafeMath for uint;\r\n    \r\n\r\n    address public platformAdmin;\r\n    \r\n    \r\n    mapping(address=>uint256) public tokenRateArray;\r\n    mapping(address=>uint256) public tokenRateSignArray;\r\n    mapping(address=>bool) public tokenExchangeLock;\r\n    \r\n \r\n    \r\n    mapping (address => bool) public frozenAccount; \r\n    mapping (address => uint256) public frozenTimestamp; \r\n    \r\n    \r\n    \r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == platformAdmin);\r\n        _;\r\n    }\r\n\r\n    constructor(string _tokenName, string _tokenSymbol,uint256 _decimals,uint _initialSupply) public {\r\n        platformAdmin = msg.sender;\r\n        _totalSupply = _initialSupply * 10 ** uint256(_decimals); \r\n        decimals=_decimals;\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        balances[msg.sender]=_totalSupply;\r\n    }\r\n    \r\n\r\n    function  setTokenArrRate(address[] _tokenArrs,uint256[] rates,uint256[] signs) public  onlyOwner returns (bool) {\r\n        for(uint i=0;i<_tokenArrs.length;i++){\r\n            tokenRateArray[_tokenArrs[i]]=rates[i];\r\n            tokenRateSignArray[_tokenArrs[i]]=signs[i];\r\n        }\r\n      \r\n         return true;\r\n    }\r\n    \r\n    \r\n    function  setTokenRate(address _tokenAddress,uint256 rate,uint256 sign) public  onlyOwner returns (bool) {\r\n         require(rate>=1);\r\n         tokenRateSignArray[_tokenAddress]=sign;\r\n         tokenRateArray[_tokenAddress]=rate;\r\n         return true;\r\n    }\r\n    \r\n    \r\n    function  setTokenExchangeLock(address _tokenAddress,bool _flag) public  onlyOwner returns (bool) {\r\n         tokenExchangeLock[_tokenAddress]=_flag;\r\n         return true;\r\n    }\r\n\r\n    \r\n     function totalSupply() public constant returns (uint){\r\n         return _totalSupply;\r\n     }\r\n     \r\n      function balanceOf(address _owner) constant returns (uint256 balance) {\r\n            return balances[_owner];\r\n          }\r\n  \r\n        function approve(address _spender, uint _value) {\r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n        }\r\n        \r\n        function approveErc(address _tokenAddress,address _spender, uint _value) onlyOwner{\r\n            ERC20 token =ERC20(_tokenAddress);\r\n            token.approve(_spender,_value);\r\n        }\r\n \r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n          return allowed[_owner][_spender];\r\n        }\r\n        \r\n        \r\n       function transfer(address _to, uint _value) public {\r\n            require(balances[msg.sender] >= _value);\r\n            require(balances[_to].add(_value) > balances[_to]);\r\n            balances[msg.sender]=balances[msg.sender].sub(_value);\r\n         \r\n            balances[_to]=balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n   \r\n        function transferFrom(address _from, address _to, uint256 _value) public  {\r\n            require(balances[_from] >= _value);\r\n            require(allowed[_from][msg.sender] >= _value);\r\n            require(balances[_to] + _value > balances[_to]);\r\n          \r\n            balances[_to]=balances[_to].add(_value);\r\n            balances[_from]=balances[_from].sub(_value);\r\n            allowed[_from][msg.sender]=allowed[_from][msg.sender].sub(_value);\r\n            Transfer(_from, _to, _value);\r\n        }\r\n        \r\n    \r\n    function changeAdmin(address _newAdmin) public onlyOwner returns (bool)  {\r\n        require(_newAdmin != address(0));\r\n        \r\n        emit Transfer(platformAdmin,_newAdmin,balances[platformAdmin]);\r\n        \r\n        balances[_newAdmin] = balances[_newAdmin].add(balances[platformAdmin]);\r\n        balances[platformAdmin] = 0;\r\n        platformAdmin = _newAdmin;\r\n        return true;\r\n    }\r\n\r\n\r\n    function multiWithdraw (address[] users,uint256[] _amount)public onlyOwner returns (bool) {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            users[i].transfer(_amount[i]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function multiWithdrawToken (address _tokenAddress,address[] users,uint256[] _tokenAmount)public onlyOwner returns (bool) {\r\n         ERC20 token =ERC20(_tokenAddress);\r\n         for (uint256 i = 0; i < users.length; i++) {\r\n             token.transfer(users[i],_tokenAmount[i]);\r\n         }\r\n        return true;\r\n    }\r\n   \r\n\r\n    function freeze(address _target,bool _freeze) public onlyOwner returns (bool) {\r\n        require(_target != address(0));\r\n        frozenAccount[_target] = _freeze;\r\n        return true;\r\n    }\r\n\r\n    function freezeWithTimestamp(address _target,uint256 _timestamp)public onlyOwner returns (bool) {\r\n        require(_target != address(0));\r\n        frozenTimestamp[_target] = _timestamp;\r\n        return true;\r\n    }\r\n\r\n\r\n    function multiFreeze(address[] _targets,bool[] _freezes) public onlyOwner returns (bool) {\r\n        require(_targets.length == _freezes.length);\r\n        uint256 len = _targets.length;\r\n        require(len > 0);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address _target = _targets[i];\r\n            require(_target != address(0));\r\n            bool _freeze = _freezes[i];\r\n            frozenAccount[_target] = _freeze;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function multiFreezeWithTimestamp( address[] _targets,uint256[] _timestamps) public onlyOwner returns (bool) {\r\n        require(_targets.length == _timestamps.length);\r\n        uint256 len = _targets.length;\r\n        require(len > 0);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address _target = _targets[i];\r\n            require(_target != address(0));\r\n            uint256 _timestamp = _timestamps[i];\r\n            frozenTimestamp[_target] = _timestamp;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function multiTransfer( address[] _tos, uint256[] _values)public returns (bool) {\r\n        require(!frozenAccount[msg.sender]);\r\n        require(now > frozenTimestamp[msg.sender]);\r\n        require(_tos.length == _values.length);\r\n        uint256 len = _tos.length;\r\n        require(len > 0);\r\n        uint256 amount = 0;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            amount = amount.add(_values[i]);\r\n        }\r\n        require(amount <= balances[msg.sender]);\r\n        for (uint256 j = 0; j < len; j++) {\r\n            address _to = _tos[j];\r\n            require(_to != address(0));\r\n            balances[_to] = balances[_to].add(_values[j]);\r\n            balances[msg.sender] = balances[msg.sender].sub(_values[j]);\r\n            emit Transfer(msg.sender, _to, _values[j]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    \r\n     function getFrozenTimestamp(address _target) public view returns (uint256) {\r\n        require(_target != address(0));\r\n        return frozenTimestamp[_target];\r\n    }\r\n\r\n    function getFrozenAccount(address _target)public view returns (bool) {\r\n        require(_target != address(0));\r\n        return frozenAccount[_target];\r\n    }\r\n \r\n    function getTokenAllowance(address _tokenAddress,address _owner, address _spender) public constant returns (uint) {\r\n         ERC20 token =ERC20(_tokenAddress);\r\n         uint allowed=token.allowance(_owner,_spender);\r\n         return allowed;\r\n    }\r\n    \r\n    function getTokenDecimals(address _tokenAddress) public constant returns (uint) {\r\n         ERC20 token =ERC20(_tokenAddress);\r\n         uint decimals=token.decimals();\r\n         return decimals;\r\n    }\r\n    \r\n    function getTokenBalance(address _tokenAddress) public constant returns (uint) {\r\n             ERC20 token =ERC20(_tokenAddress);\r\n             uint balance=token.balanceOf(this);\r\n             return balance;\r\n    }\r\n\r\n     function getEthBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function exChangeToken(address _tokenAddress,uint256 _tokenAmount) public{\r\n        require(tokenRateArray[_tokenAddress]>0);\r\n        require(!frozenAccount[msg.sender]);\r\n        require(now > frozenTimestamp[msg.sender]);\r\n        require (!tokenExchangeLock[_tokenAddress]) ;\r\n      \r\n\r\n        uint256 amount;\r\n         ERC20 token =ERC20(_tokenAddress);\r\n         uint deci=token.decimals();\r\n         if(tokenRateSignArray[_tokenAddress]==1){\r\n             if(decimals>deci){\r\n                 amount=_tokenAmount.div(tokenRateArray[_tokenAddress]).mul(10 ** (decimals.sub(deci)));\r\n             }else if(decimals<deci){\r\n                 amount=_tokenAmount.div(tokenRateArray[_tokenAddress]).div(10 ** (deci.sub(decimals)));\r\n             }else{\r\n                 amount=_tokenAmount.div(tokenRateArray[_tokenAddress]);\r\n             }\r\n         }else  if(tokenRateSignArray[_tokenAddress]==2){\r\n             if(decimals>deci){\r\n                 amount=_tokenAmount.mul(tokenRateArray[_tokenAddress]).mul(10 ** (decimals.sub(deci)));\r\n             }else if(decimals<deci){\r\n                 amount=_tokenAmount.mul(tokenRateArray[_tokenAddress]).div(10 ** (deci.sub(decimals)));\r\n             }else{\r\n                 amount=_tokenAmount.mul(tokenRateArray[_tokenAddress]);\r\n             }\r\n         }else{\r\n             throw;\r\n         }\r\n        require(amount>0&&amount <= balances[platformAdmin]);\r\n         \r\n         require(_tokenAmount <= token.balanceOf(msg.sender));\r\n         token.transferFrom(msg.sender,this,_tokenAmount);\r\n        \r\n        balances[platformAdmin] = balances[platformAdmin].sub(amount);\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n \r\n        emit Transfer(platformAdmin, msg.sender, amount);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setTokenExchangeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"multiWithdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRateArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"exChangeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenArrs\",\"type\":\"address[]\"},{\"name\":\"rates\",\"type\":\"uint256[]\"},{\"name\":\"signs\",\"type\":\"uint256[]\"}],\"name\":\"setTokenArrRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"multiWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"getTokenAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveErc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_freezes\",\"type\":\"bool[]\"}],\"name\":\"multiFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenExchangeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"freezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"name\":\"multiFreezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"sign\",\"type\":\"uint256\"}],\"name\":\"setTokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRateSignArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"YXBToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000a67616d6520746f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035958420000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e1b49d0118606d54948ad4b8887f85b1c95179515b6a6747b20d935c46ff790b"}]}