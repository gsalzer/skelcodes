{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\npragma solidity ^0.5.0;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the `owner` initiates a force transfer\r\n     *\r\n     * Note that `value` may be zero.\r\n     * Note that `details` may be zero.\r\n     */\r\n    event ForceTransfer(address indexed from, address indexed to, uint256 value, bytes32 details);\r\n}\r\n\r\n// File: contracts/atomic-swap/AtomicSwap.sol\r\ncontract AtomicSwap is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum Direction { Buy, Sell }\r\n    enum SwapState {\r\n        INVALID,\r\n        OPEN,\r\n        CLOSED,\r\n        EXPIRED\r\n    }\r\n\r\n    struct Swap {\r\n        uint256 price;\r\n        uint256 amount;\r\n        uint256 remainingAmount;\r\n        Direction direction;\r\n        address openTrader;\r\n        SwapState swapState;\r\n    }\r\n    mapping (uint256 => Swap) private swaps;\r\n    uint256 public minimumSellPrice = 0;\r\n    uint256 public minimumBuyPrice = 0;\r\n    uint256 public minimumTradePrice = 0;\r\n    uint256 public minimumAmount = 100 ether;\r\n    uint256 priceMultiplicator = 1000000; // 6 decimals price\r\n\r\n    uint256 swapId = 0;\r\n    IERC20 awgContract;\r\n    IERC20 awxContract;\r\n    event Open(uint256 swapId);\r\n    event Trade(uint256 swapId, address taker, uint256 amount);\r\n    event Close(uint256 swapId);\r\n\r\n    constructor(address _awgContract, address _awxContract) public {\r\n        awgContract = IERC20(_awgContract);\r\n        awxContract = IERC20(_awxContract);\r\n    }\r\n\r\n    function setMinimumPrices(uint256 _buyPrice, uint256 _sellPrice, uint256 _tradePrice) onlyOwner public {\r\n        minimumBuyPrice = _buyPrice;\r\n        minimumSellPrice = _sellPrice;\r\n        minimumTradePrice = _tradePrice;\r\n    }\r\n    function setMinimumAmount(uint256 _amount) onlyOwner public {\r\n        minimumAmount = _amount;\r\n    }\r\n\r\n    function forceCloseSwap(uint256 _swapId) onlyOwner public {\r\n        Swap memory swap = swaps[_swapId];\r\n        swap.swapState = SwapState.CLOSED;\r\n        swaps[_swapId] = swap;\r\n        if (swap.direction == Direction.Buy) {\r\n            require(awgContract.transfer(swap.openTrader,(swap.remainingAmount).mul(swap.price).div(priceMultiplicator)), \"Cannot transfer AWG\");\r\n        } else {\r\n            require(awxContract.transfer(swap.openTrader,swap.remainingAmount), \"Cannot transfer AWX\");\r\n        }\r\n        emit Close(_swapId);\r\n    }\r\n\r\n    function openSwap(uint256 _price, uint256 _amount, Direction _direction) public {\r\n        require(_amount > minimumAmount, \"Amount is too low\");\r\n        if (_direction == Direction.Buy) {\r\n            require((_price > minimumBuyPrice || isOwner()), \"Price is too low\");\r\n            require(_amount.mul(_price).div(priceMultiplicator) <= awgContract.allowance(msg.sender, address(this)), \"Cannot transfer AWG\");\r\n            require(awgContract.transferFrom(msg.sender, address(this), _amount.mul(_price).div(priceMultiplicator)));\r\n        } else {\r\n            require((_price > minimumSellPrice || isOwner()), \"Price is too low\");\r\n            require(_amount <= awxContract.allowance(msg.sender, address(this)), \"Cannot transfer AWX\");\r\n            require(awxContract.transferFrom(msg.sender, address(this), _amount));\r\n        }\r\n        Swap memory swap = Swap({\r\n            price: _price,\r\n            amount: _amount,\r\n            direction: _direction,\r\n            remainingAmount: _amount,\r\n            openTrader: msg.sender,\r\n            swapState: SwapState.OPEN\r\n            });\r\n\r\n        swaps[swapId] = swap;\r\n        emit Open(swapId);\r\n        swapId++;\r\n    }\r\n\r\n    function closeSwap(uint256 _swapId) public {\r\n        Swap memory swap = swaps[_swapId];\r\n        require(swap.swapState == SwapState.OPEN);\r\n        require(swap.openTrader == msg.sender);\r\n\r\n        if (swap.direction == Direction.Buy) {\r\n            require(awgContract.transfer(msg.sender,(swap.remainingAmount).mul(swap.price).div(priceMultiplicator)), \"Cannot transfer AWG\");\r\n        } else {\r\n            require(awxContract.transfer(msg.sender,swap.remainingAmount), \"Cannot transfer AWX\");\r\n        }\r\n\r\n        swap.swapState = SwapState.CLOSED;\r\n        swaps[_swapId] = swap;\r\n        emit Close(_swapId);\r\n    }\r\n\r\n    function tradeSwap(uint256 _swapId, uint256 _amount) public {\r\n        require(_amount > minimumAmount, \"Amount is too low\");\r\n        Swap memory swap = swaps[_swapId];\r\n        require(_amount <= swap.remainingAmount);\r\n        require((swap.price > minimumTradePrice || isOwner()), \"The swap price is too low.\");\r\n        require(swap.swapState == SwapState.OPEN);\r\n        if (swap.direction == Direction.Buy) {\r\n            require(_amount <= awxContract.allowance(msg.sender, address(this)));\r\n            require(awxContract.transferFrom(msg.sender, swap.openTrader, _amount));\r\n            require(awgContract.transfer(msg.sender, _amount.mul(swap.price).div(priceMultiplicator)));\r\n        } else {\r\n            require(_amount.mul(swap.price).div(priceMultiplicator) <= awgContract.allowance(msg.sender, address(this)));\r\n            require(awgContract.transferFrom(msg.sender, swap.openTrader, _amount.mul(swap.price).div(priceMultiplicator)));\r\n            require(awxContract.transfer(msg.sender, _amount));\r\n        }\r\n        swap.remainingAmount -= _amount;\r\n        if (swap.remainingAmount == 0) {\r\n            swap.swapState = SwapState.CLOSED;\r\n            emit Close(_swapId);\r\n        }\r\n        swaps[_swapId] = swap;\r\n        emit Trade(_swapId, msg.sender, _amount);\r\n    }\r\n\r\n    function getSwap(uint256 _swapId) public view returns (uint256 price, uint256 amount, uint256 remainingAmount, Direction direction, address openTrader, SwapState swapState) {\r\n        Swap memory swap = swaps[_swapId];\r\n        return (swap.price, swap.amount, swap.remainingAmount, swap.direction, swap.openTrader, swap.swapState);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_swapId\",\"type\":\"uint256\"}],\"name\":\"forceCloseSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTradePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tradeSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapId\",\"type\":\"uint256\"}],\"name\":\"getSwap\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"name\":\"direction\",\"type\":\"uint8\"},{\"name\":\"openTrader\",\"type\":\"address\"},{\"name\":\"swapState\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"name\":\"_tradePrice\",\"type\":\"uint256\"}],\"name\":\"setMinimumPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_swapId\",\"type\":\"uint256\"}],\"name\":\"closeSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_direction\",\"type\":\"uint8\"}],\"name\":\"openSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_awgContract\",\"type\":\"address\"},{\"name\":\"_awxContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AtomicSwap","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000696acc2de564b48682d71d0847b3632f87c9a40200000000000000000000000054e46cc89588318e3964ca2c1be94db9d5ca3dfb","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3b065b5be9240c2b7dc41341ffbb7754802dc5da5455402cf262d901b2bedfb2"}]}