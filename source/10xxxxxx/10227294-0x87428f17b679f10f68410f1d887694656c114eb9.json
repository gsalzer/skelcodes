{"status":"1","message":"OK","result":[{"SourceCode":"{\"CrimmonsToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.4.4;\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\n\\r\\ncontract CrimmonsToken is StandardToken {\\r\\n\\r\\n    function () external payable {\\r\\n        //if ether is sent to this address, send it back.\\r\\n        revert(\\u0027Not allowed to send to this address.\\u0027);\\r\\n    }\\r\\n\\r\\n    /* Public variables of the token */\\r\\n    string public name;\\r\\n    uint8 public decimals;\\r\\n    string public symbol;\\r\\n    string public version = \\u0027H0.1\\u0027;\\r\\n\\r\\n    constructor() public {\\r\\n        balances[msg.sender] = 24601000000000000000000000000;\\r\\n        totalSupply = 24601000000000000000000000000;\\r\\n        name = \\\"Crimmons Token\\\";\\r\\n        decimals = 18;\\r\\n        symbol = \\\"CRIM\\\";\\r\\n    }\\r\\n\\r\\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        Approval(msg.sender, _spender, _value);\\r\\n\\r\\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn\\u0027t have to include a contract in here just for this.\\r\\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\\r\\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\\r\\n        if(!_spender.call(bytes4(bytes32(sha3(\\\"receiveApproval(address,uint256,address,bytes)\\\"))), msg.sender, _value, this, _extraData)) { revert(\\u0027Error approving\\u0027); }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.4.4;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b \\u003c= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256)   {\\r\\n        uint256 c = a + b;\\r\\n        assert(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n}\"},\"StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.4.4;\\r\\nimport \\\"./Token.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/*\\r\\nImplements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\\r\\n.*/\\r\\n\\r\\ncontract StandardToken is Token {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\r\\n        //Default assumes totalSupply can\\u0027t be over max (2^256 - 1).\\r\\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn\\u0027t wrap.\\r\\n        //Replace the if with this one instead.\\r\\n        //if (balances[msg.sender] \\u003e= _value \\u0026\\u0026 balances[_to] + _value \\u003e balances[_to]) {\\r\\n        if (balances[msg.sender] \\u003e= _value \\u0026\\u0026 _value \\u003e 0) {\\r\\n            balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n            balances[_to] = balances[_to].add(_value);\\r\\n            emit Transfer(msg.sender, _to, _value);\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\r\\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\\r\\n        //if (balances[_from] \\u003e= _value \\u0026\\u0026 allowed[_from][msg.sender] \\u003e= _value \\u0026\\u0026 balances[_to] + _value \\u003e balances[_to]) {\\r\\n        if (balances[_from] \\u003e= _value \\u0026\\u0026 allowed[_from][msg.sender] \\u003e= _value \\u0026\\u0026 _value \\u003e 0) {\\r\\n            balances[_to] = balances[_to].add(_value);\\r\\n            balances[_from] = balances[_from].sub(_value);\\r\\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n            emit Transfer(_from, _to, _value);\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\r\\n      return allowed[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    mapping (address =\\u003e uint256) balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) allowed;\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n}\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.4.4;\\r\\n\\r\\ncontract Token {\\r\\n\\r\\n    /// @return supply total amount of tokens\\r\\n    function totalSupply() external view returns (uint256 supply) {}\\r\\n\\r\\n    /// @param _owner The address from which the balance will be retrieved\\r\\n    /// @return balance The balance\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {}\\r\\n\\r\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\r\\n    /// @param _to The address of the recipient\\r\\n    /// @param _value The amount of token to be transferred\\r\\n    /// @return success Whether the transfer was successful or not\\r\\n    function transfer(address _to, uint256 _value) public returns (bool success) {}\\r\\n\\r\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\r\\n    /// @param _from The address of the sender\\r\\n    /// @param _to The address of the recipient\\r\\n    /// @param _value The amount of token to be transferred\\r\\n    /// @return success Whether the transfer was successful or not\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\\r\\n\\r\\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\\r\\n    /// @param _spender The address of the account able to transfer the tokens\\r\\n    /// @param _value The amount of wei to be approved for transfer\\r\\n    /// @return success Whether the approval was successful or not\\r\\n    function approve(address _spender, uint256 _value) public returns (bool success) {}\\r\\n\\r\\n    /// @param _owner The address of the account owning tokens\\r\\n    /// @param _spender The address of the account able to transfer the tokens\\r\\n    /// @return remaining Amount of remaining tokens allowed to spent\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}\\r\\n\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n\\r\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CrimmonsToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://57e7951a3a1dcb53f6725b79118de6c723c9033efb4fcaa77e130c98d05e0b63"}]}