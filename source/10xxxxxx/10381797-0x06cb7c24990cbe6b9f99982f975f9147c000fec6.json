{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n\r\n    function borrowBalanceCurrent(address) external returns (uint);\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    function borrow(uint) external returns (uint);\r\n    function underlying() external view returns (address);\r\n    function borrowBalanceStored(address) external view returns (uint);\r\n}\r\n\r\ninterface CETHInterface {\r\n    function mint() external payable;\r\n    function repayBorrow() external payable;\r\n}\r\n\r\ninterface ComptrollerInterface {\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function exitMarket(address cTokenAddress) external returns (uint);\r\n}\r\n\r\ninterface AccountInterface {\t\r\n    function version() external view returns (uint);\t\r\n}\r\n\r\ninterface ListInterface {\r\n    function accountID(address) external view returns (uint64);\r\n}\r\n\r\ninterface IndexInterface {\r\n    function master() external view returns (address);\r\n    function list() external view returns (address);\r\n    function isClone(uint, address) external view returns (bool);\r\n}\r\n\r\ninterface CheckInterface {\r\n    function isOk() external view returns (bool);\r\n}\r\n\r\ncontract DSMath {\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n}\r\n\r\ncontract Helpers is DSMath {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address constant internal instaIndex = 0x2971AdFa57b20E5a416aE5a708A8655A9c74f723;\r\n    address constant internal oldInstaPool = 0x1879BEE186BFfBA9A8b1cAD8181bBFb218A5Aa61;\r\n    \r\n    address constant internal comptrollerAddr = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address constant internal cEth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n\r\n    mapping (address => bool) public isTknAllowed;\r\n    mapping (address => address) public tknToCTkn;\r\n\r\n    mapping (address => uint) public borrowedToken;\r\n    address[] public tokensAllowed;\r\n\r\n    bool public checkOldPool = true;\r\n\r\n    IndexInterface indexContract = IndexInterface(instaIndex);\r\n    ListInterface listContract = ListInterface(indexContract.list());\r\n    CheckInterface oldInstaPoolContract = CheckInterface(oldInstaPool);\r\n\r\n    /**\r\n     * FOR SECURITY PURPOSE\r\n     * only Smart DEFI Account can access the liquidity pool contract\r\n     */\r\n    modifier isDSA {\r\n        uint64 id = listContract.accountID(msg.sender);\r\n        require(id != 0, \"not-dsa-id\");\r\n        require(indexContract.isClone(AccountInterface(msg.sender).version(), msg.sender), \"not-dsa-clone\");\r\n        _;\r\n    }\r\n\r\n    function tokenBal(address token) internal view returns (uint _bal) {\r\n        _bal = token == ethAddr ? address(this).balance : IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    function _transfer(address token, uint _amt) internal {\r\n        token == ethAddr ?\r\n            msg.sender.transfer(_amt) :\r\n            IERC20(token).safeTransfer(msg.sender, _amt);\r\n    }\r\n}\r\n\r\n\r\ncontract CompoundResolver is Helpers {\r\n\r\n    function borrowAndSend(address[] memory tokens, uint[] memory tknAmt) internal {\r\n        if (tokens.length > 0) {\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                address token = tokens[i];\r\n                address cToken = tknToCTkn[token];\r\n                require(isTknAllowed[token], \"token-not-listed\");\r\n                if (cToken != address(0) && tknAmt[i] > 0) {\r\n                    require(CTokenInterface(cToken).borrow(tknAmt[i]) == 0, \"borrow-failed\");\r\n                    borrowedToken[token] += tknAmt[i];\r\n                    _transfer(token, tknAmt[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function payback(address[] memory tokens) internal {\r\n        if (tokens.length > 0) {\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                address token = tokens[i];\r\n                address cToken = tknToCTkn[token];\r\n                if (cToken != address(0)) {\r\n                    CTokenInterface ctknContract = CTokenInterface(cToken);\r\n                    if(token != ethAddr) {\r\n                        require(ctknContract.repayBorrow(uint(-1)) == 0, \"payback-failed\");\r\n                    } else {\r\n                        CETHInterface(cToken).repayBorrow.value(ctknContract.borrowBalanceCurrent(address(this)))();\r\n                        require(ctknContract.borrowBalanceCurrent(address(this)) == 0, \"ETH-flashloan-not-paid\");\r\n                    }\r\n                    delete borrowedToken[token];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract AccessLiquidity is CompoundResolver {\r\n    event LogPoolBorrow(address indexed user, address[] tknAddr, uint[] amt);\r\n    event LogPoolPayback(address indexed user, address[] tknAddr);\r\n\r\n    /**\r\n     * @dev borrow tokens and use them on DSA.\r\n     * @param tokens Array of tokens.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amounts Array of tokens amount.\r\n    */\r\n    function accessLiquidity(address[] calldata tokens, uint[] calldata amounts) external isDSA {\r\n        require(tokens.length == amounts.length, \"length-not-equal\");\r\n        borrowAndSend(tokens, amounts);\r\n        emit LogPoolBorrow(\r\n            msg.sender,\r\n            tokens,\r\n            amounts\r\n        );\r\n    }\r\n   \r\n    /**\r\n     * @dev Payback borrowed tokens.\r\n     * @param tokens Array of tokens.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n    */\r\n    function returnLiquidity(address[] calldata tokens) external payable isDSA {\r\n        payback(tokens);\r\n        emit LogPoolPayback(msg.sender, tokens);\r\n    }\r\n    \r\n    function isOk() public view returns(bool ok) {\r\n        ok = true;\r\n        for (uint i = 0; i < tokensAllowed.length; i++) {\r\n            uint tknBorrowed = borrowedToken[tokensAllowed[i]];\r\n            if(tknBorrowed > 0){\r\n                ok = false;\r\n                break;\r\n            }\r\n        }\r\n        if(checkOldPool && ok) {\r\n            bool isOldPoolOk = oldInstaPoolContract.isOk();\r\n            ok = isOldPoolOk;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract ProvideLiquidity is  AccessLiquidity {\r\n    event LogDeposit(address indexed user, address indexed token, uint amount, uint cAmount);\r\n    event LogWithdraw(address indexed user, address indexed token, uint amount, uint cAmount);\r\n\r\n    mapping (address => mapping (address => uint)) public liquidityBalance;\r\n\r\n    /**\r\n     * @dev Deposit Liquidity.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n    */\r\n    function deposit(address token, uint amt) external payable returns (uint _amt) {\r\n        require(isTknAllowed[token], \"token-not-listed\");\r\n        require(amt > 0 || msg.value > 0, \"amt-not-valid\");\r\n\r\n        if (msg.value > 0) require(token == ethAddr, \"not-eth-addr\");\r\n\r\n        address cErc20 = tknToCTkn[token];\r\n        uint initalBal = tokenBal(cErc20);\r\n        if (token == ethAddr) {\r\n            _amt = msg.value;\r\n            CETHInterface(cErc20).mint.value(_amt)();\r\n        } else {\r\n            _amt = amt == (uint(-1)) ? IERC20(token).balanceOf(msg.sender) : amt;\r\n            IERC20(token).safeTransferFrom(msg.sender, address(this), _amt);\r\n            require(CTokenInterface(cErc20).mint(_amt) == 0, \"mint-failed\");\r\n        }\r\n        uint finalBal = tokenBal(cErc20);\r\n        uint ctokenAmt = sub(finalBal, initalBal);\r\n\r\n        liquidityBalance[token][msg.sender] += ctokenAmt;\r\n\r\n        emit LogDeposit(msg.sender, token, _amt, ctokenAmt);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Withdraw Liquidity.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n    */\r\n    function withdraw(address token, uint amt) external returns (uint _amt) {\r\n        uint _userLiq = liquidityBalance[token][msg.sender];\r\n        require(_userLiq > 0, \"nothing-to-withdraw\");\r\n\r\n        uint _cAmt;\r\n\r\n        address ctoken = tknToCTkn[token];\r\n        if (amt == uint(-1)) {\r\n            uint initknBal = tokenBal(token);\r\n            require(CTokenInterface(ctoken).redeem(_userLiq) == 0, \"redeem-failed\");\r\n            uint finTknBal = tokenBal(token);\r\n            _cAmt = _userLiq;\r\n            delete liquidityBalance[token][msg.sender];\r\n            _amt = sub(finTknBal, initknBal);\r\n        } else {\r\n            uint iniCtknBal = tokenBal(ctoken);\r\n            require(CTokenInterface(ctoken).redeemUnderlying(amt) == 0, \"redeemUnderlying-failed\");\r\n            uint finCtknBal = tokenBal(ctoken);\r\n            _cAmt = sub(iniCtknBal, finCtknBal);\r\n            require(_cAmt <= _userLiq, \"not-enough-to-withdraw\");\r\n            liquidityBalance[token][msg.sender] -= _cAmt;\r\n            _amt = amt;\r\n        }\r\n        \r\n        _transfer(token, _amt);\r\n       \r\n        emit LogWithdraw(msg.sender, token, _amt, _cAmt);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Controllers is ProvideLiquidity {\r\n    event LogEnterMarket(address[] token, address[] ctoken);\r\n    event LogExitMarket(address indexed token, address indexed ctoken);\r\n\r\n    event LogWithdrawMaster(address indexed user, address indexed token, uint amount);\r\n\r\n    modifier isMaster {\r\n        require(msg.sender == indexContract.master(), \"not-master\");\r\n        _;\r\n    }\r\n\r\n    function switchOldPoolCheck() external isMaster {\r\n        checkOldPool = !checkOldPool;\r\n    }\r\n\r\n    function _enterMarket(address[] memory cTknAddrs) internal {\r\n        ComptrollerInterface(comptrollerAddr).enterMarkets(cTknAddrs);\r\n        address[] memory tknAddrs = new address[](cTknAddrs.length);\r\n        for (uint i = 0; i < cTknAddrs.length; i++) {\r\n            if (cTknAddrs[i] != cEth) {\r\n                tknAddrs[i] = CTokenInterface(cTknAddrs[i]).underlying();\r\n                IERC20(tknAddrs[i]).safeApprove(cTknAddrs[i], uint(-1));\r\n            } else {\r\n                tknAddrs[i] = ethAddr;\r\n            }\r\n            tknToCTkn[tknAddrs[i]] = cTknAddrs[i];\r\n            require(!isTknAllowed[tknAddrs[i]], \"tkn-already-allowed\");\r\n            isTknAllowed[tknAddrs[i]] = true;\r\n            tokensAllowed.push(tknAddrs[i]);\r\n        }\r\n        emit LogEnterMarket(tknAddrs, cTknAddrs);\r\n    }\r\n\r\n    /**\r\n     * @dev Enter compound market to enable borrowing.\r\n     * @param cTknAddrs Array Ctoken addresses.\r\n    */\r\n    function enterMarket(address[] calldata cTknAddrs) external isMaster {\r\n        _enterMarket(cTknAddrs);\r\n    }\r\n\r\n    /**\r\n     * @dev Exit compound market to disable borrowing.\r\n     * @param cTkn Ctoken address.\r\n    */\r\n    function exitMarket(address cTkn) external isMaster {\r\n        address tkn;\r\n        if (cTkn != cEth) {\r\n            tkn = CTokenInterface(cTkn).underlying();\r\n            IERC20(tkn).safeApprove(cTkn, 0);\r\n        } else {\r\n            tkn = ethAddr;\r\n        }\r\n        require(isTknAllowed[tkn], \"tkn-not-allowed\");\r\n\r\n        ComptrollerInterface(comptrollerAddr).exitMarket(cTkn);\r\n\r\n        delete isTknAllowed[tkn];\r\n\r\n        bool isFound = false;\r\n        uint _length = tokensAllowed.length;\r\n        uint _id;\r\n        for (uint i = 0; i < _length; i++) {\r\n            if (tkn == tokensAllowed[i]) {\r\n                isFound = true;\r\n                _id = i;\r\n                break;\r\n            }\r\n        }\r\n        if (isFound) {\r\n            address _last = tokensAllowed[_length - 1];\r\n            tokensAllowed[_length - 1] = tokensAllowed[_id];\r\n            tokensAllowed[_id] = _last;\r\n            tokensAllowed.pop();\r\n        }\r\n        emit LogExitMarket(tkn, cTkn);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Liquidity.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n    */\r\n    function withdrawMaster(address token, uint amt) external isMaster {\r\n        _transfer(token, amt);\r\n        emit LogWithdrawMaster(msg.sender, token, amt);\r\n    }\r\n\r\n    function spell(address _target, bytes calldata _data) external isMaster {\r\n        require(_target != address(0), \"target-invalid\");\r\n        bytes memory _callData = _data;\r\n        assembly {\r\n            let succeeded := delegatecall(gas(), _target, add(_callData, 0x20), mload(_callData), 0, 0)\r\n\r\n            switch iszero(succeeded)\r\n                case 1 {\r\n                    // throw if delegatecall failed\r\n                    let size := returndatasize()\r\n                    returndatacopy(0x00, 0x00, size)\r\n                    revert(0x00, size)\r\n                }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaPool is Controllers {\r\n    constructor (address[] memory ctkns) public {\r\n        _enterMarket(ctkns);\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ctkns\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cAmount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"ctoken\",\"type\":\"address[]\"}],\"name\":\"LogEnterMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"LogExitMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tknAddr\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amt\",\"type\":\"uint256[]\"}],\"name\":\"LogPoolBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tknAddr\",\"type\":\"address[]\"}],\"name\":\"LogPoolPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cAmount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawMaster\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"accessLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkOldPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTknAddrs\",\"type\":\"address[]\"}],\"name\":\"enterMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTkn\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTknAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"returnLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"spell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchOldPoolCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tknToCTkn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensAllowed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"InstaPool","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000080000000000000000000000004ddc2d193948926d02f9b1fe9e1daa0718270ed50000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e364300000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9000000000000000000000000158079ee67fce2f58472a96584a73c7ab9ac95c1000000000000000000000000c11b1268c1a384e55c48c2391d8d480264a3a7f4000000000000000000000000b3319f5d18bc0d84dd1b4825dcde5d5f7266d4070000000000000000000000006c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://542e9d2a6ea42000a33beb205ca0a6cfe9cc43840eaca99830d9814f630fd919"}]}