{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IERC20Token.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20Token {\r\n    /**\r\n     * @dev Returns the amount of tokens decimals\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/interfaces/ICurve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface ICurve {\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n}\r\n\r\n// File: contracts/logics/Curve.sol\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\ncontract Curve {\r\n    // Curve Contracts\r\n    ICurve internal constant curveCompound = ICurve(\r\n        0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56\r\n    );\r\n    ICurve internal constant curveUSDT = ICurve(\r\n        0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C\r\n    );\r\n    ICurve internal constant curveY = ICurve(\r\n        0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51\r\n    );\r\n    ICurve internal constant curveBinance = ICurve(\r\n        0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27\r\n    );\r\n    ICurve internal constant curveSynth = ICurve(\r\n        0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\r\n    );\r\n    ICurve internal constant curvePAX = ICurve(\r\n        0x06364f10B501e868329afBc005b3492902d6C763\r\n    );\r\n\r\n    address constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address constant TUSD_ADDRESS = 0x0000000000085d4780B73119b644AE5ecd22b376;\r\n    address constant BUSD_ADDRESS = 0x4Fabb145d64652a948d72533023f6E7A623C7C53;\r\n    address constant SUSD_ADDRESS = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\r\n    address constant PAX_ADDRESS = 0x8E870D67F660D95d5be530380D0eC0bd388289E1;\r\n\r\n    function getBalance(address token) public view returns (uint256) {\r\n        return IERC20Token(token).balanceOf(address(this));\r\n    }\r\n\r\n    function swapOnCurveCompound(\r\n        address src,\r\n        address dest,\r\n        uint256 srcAmt\r\n    ) public returns (uint256) {\r\n        uint256 realSrcAmt = srcAmt == 0 ? getBalance(src) : srcAmt;\r\n\r\n        int128 i = (src == DAI_ADDRESS ? 1 : 0) + (src == USDC_ADDRESS ? 2 : 0);\r\n        int128 j = (dest == DAI_ADDRESS ? 1 : 0) +\r\n            (dest == USDC_ADDRESS ? 2 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        IERC20Token(src).approve(address(curveCompound), realSrcAmt);\r\n        curveCompound.exchange_underlying(i - 1, j - 1, realSrcAmt, 0);\r\n    }\r\n\r\n    function swapOnCurveUSDT(\r\n        address src,\r\n        address dest,\r\n        uint256 srcAmt\r\n    ) public returns (uint256) {\r\n        uint256 realSrcAmt = srcAmt == 0 ? getBalance(src) : srcAmt;\r\n\r\n        int128 i = (src == DAI_ADDRESS ? 1 : 0) +\r\n            (src == USDC_ADDRESS ? 2 : 0) +\r\n            (src == USDT_ADDRESS ? 3 : 0);\r\n        int128 j = (dest == DAI_ADDRESS ? 1 : 0) +\r\n            (dest == USDC_ADDRESS ? 2 : 0) +\r\n            (dest == USDT_ADDRESS ? 3 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        IERC20Token(src).approve(address(curveUSDT), realSrcAmt);\r\n\r\n        curveUSDT.exchange_underlying(i - 1, j - 1, realSrcAmt, 0);\r\n    }\r\n\r\n    function swapOnCurveY(\r\n        address src,\r\n        address dest,\r\n        uint256 srcAmt\r\n    ) public returns (uint256) {\r\n        uint256 realSrcAmt = srcAmt == 0 ? getBalance(src) : srcAmt;\r\n\r\n        int128 i = (src == DAI_ADDRESS ? 1 : 0) +\r\n            (src == USDC_ADDRESS ? 2 : 0) +\r\n            (src == USDT_ADDRESS ? 3 : 0) +\r\n            (src == TUSD_ADDRESS ? 4 : 0);\r\n        int128 j = (dest == DAI_ADDRESS ? 1 : 0) +\r\n            (dest == USDC_ADDRESS ? 2 : 0) +\r\n            (dest == USDT_ADDRESS ? 3 : 0) +\r\n            (dest == TUSD_ADDRESS ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        IERC20Token(src).approve(address(curveY), realSrcAmt);\r\n        curveY.exchange_underlying(i - 1, j - 1, realSrcAmt, 0);\r\n    }\r\n\r\n    function swapOnCurveBinance(\r\n        address src,\r\n        address dest,\r\n        uint256 srcAmt\r\n    ) public returns (uint256) {\r\n        uint256 realSrcAmt = srcAmt == 0 ? getBalance(src) : srcAmt;\r\n\r\n        int128 i = (src == DAI_ADDRESS ? 1 : 0) +\r\n            (src == USDC_ADDRESS ? 2 : 0) +\r\n            (src == USDT_ADDRESS ? 3 : 0) +\r\n            (src == BUSD_ADDRESS ? 4 : 0);\r\n        int128 j = (dest == DAI_ADDRESS ? 1 : 0) +\r\n            (dest == USDC_ADDRESS ? 2 : 0) +\r\n            (dest == USDT_ADDRESS ? 3 : 0) +\r\n            (dest == BUSD_ADDRESS ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        IERC20Token(src).approve(address(curveBinance), realSrcAmt);\r\n\r\n        curveBinance.exchange_underlying(i - 1, j - 1, realSrcAmt, 0);\r\n    }\r\n\r\n    function swapOnCurveSynth(\r\n        address src,\r\n        address dest,\r\n        uint256 srcAmt\r\n    ) public returns (uint256) {\r\n        uint256 realSrcAmt = srcAmt == 0 ? getBalance(src) : srcAmt;\r\n\r\n        int128 i = (src == DAI_ADDRESS ? 1 : 0) +\r\n            (src == USDC_ADDRESS ? 2 : 0) +\r\n            (src == USDT_ADDRESS ? 3 : 0) +\r\n            (src == SUSD_ADDRESS ? 4 : 0);\r\n        int128 j = (dest == DAI_ADDRESS ? 1 : 0) +\r\n            (dest == USDC_ADDRESS ? 2 : 0) +\r\n            (dest == USDT_ADDRESS ? 3 : 0) +\r\n            (dest == SUSD_ADDRESS ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        IERC20Token(src).approve(address(curveSynth), realSrcAmt);\r\n        curveSynth.exchange_underlying(i - 1, j - 1, realSrcAmt, 0);\r\n    }\r\n\r\n    function swapOnCurvePAX(\r\n        address src,\r\n        address dest,\r\n        uint256 srcAmt\r\n    ) public returns (uint256) {\r\n        uint256 realSrcAmt = srcAmt == 0 ? getBalance(src) : srcAmt;\r\n\r\n        int128 i = (src == DAI_ADDRESS ? 1 : 0) +\r\n            (src == USDC_ADDRESS ? 2 : 0) +\r\n            (src == USDT_ADDRESS ? 3 : 0) +\r\n            (src == PAX_ADDRESS ? 4 : 0);\r\n        int128 j = (dest == DAI_ADDRESS ? 1 : 0) +\r\n            (dest == USDC_ADDRESS ? 2 : 0) +\r\n            (dest == USDT_ADDRESS ? 3 : 0) +\r\n            (dest == PAX_ADDRESS ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        IERC20Token(src).approve(address(curvePAX), realSrcAmt);\r\n        curvePAX.exchange_underlying(i - 1, j - 1, realSrcAmt, 0);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"name\":\"swapOnCurvePAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"name\":\"swapOnCurveUSDT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"name\":\"swapOnCurveBinance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"name\":\"swapOnCurveCompound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"name\":\"swapOnCurveY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"srcAmt\",\"type\":\"uint256\"}],\"name\":\"swapOnCurveSynth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Curve","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://cfc2901ec42ff12e17a26c836dc65b5e973057004e7bde97e782fed22afa399a"}]}