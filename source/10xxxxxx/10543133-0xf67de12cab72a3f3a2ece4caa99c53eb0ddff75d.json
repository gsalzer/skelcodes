{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface DSPauseAbstract {\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setDelay(uint256) external;\r\n    function plans(bytes32) external view returns (bool);\r\n    function proxy() external view returns (address);\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function drop(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\ninterface CatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (address, uint256, uint256);\r\n    function live() external view returns (uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function bite(bytes32, address) external returns (uint256);\r\n    function cage() external;\r\n}\r\n\r\ninterface JugAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function base() external view returns (address);\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface FlipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function beg() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function dent(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\ninterface FlapAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48);\r\n    function vat() external view returns (address);\r\n    function gem() external view returns (address);\r\n    function beg() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function cage(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n\r\ninterface FlopAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48);\r\n    function vat() external view returns (address);\r\n    function gem() external view returns (address);\r\n    function beg() external view returns (uint256);\r\n    function pad() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function vow() external view returns (address);\r\n    function file(bytes32, uint256) external;\r\n    function kick(address, uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function dent(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function cage() external;\r\n    function yank(uint256) external;\r\n}\r\n\r\ninterface SpotAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n    function vat() external view returns (address);\r\n    function par() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function poke(bytes32) external;\r\n    function cage() external;\r\n}\r\n\r\ninterface OsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function src() external view returns (address);\r\n    function hop() external view returns (uint16);\r\n    function zzz() external view returns (uint64);\r\n    function cur() external view returns (uint128, uint128);\r\n    function nxt() external view returns (uint128, uint128);\r\n    function bud(address) external view returns (uint256);\r\n    function stop() external;\r\n    function start() external;\r\n    function change(address) external;\r\n    function step(uint16) external;\r\n    function void() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\ninterface OsmMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function osms(bytes32) external view returns (address);\r\n    function setOsm(bytes32, address) external;\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function stop(bytes32) external;\r\n}\r\n\r\ninterface MedianAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function age() external view returns (uint32);\r\n    function wat() external view returns (bytes32);\r\n    function bar() external view returns (uint256);\r\n    function orcl(address) external view returns (uint256);\r\n    function bud(address) external view returns (uint256);\r\n    function slot(uint8) external view returns (address);\r\n    function read() external view returns (uint256);\r\n    function peek() external view returns (uint256, bool);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\r\n}\r\n\r\ninterface GemJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface FlipperMomAbstract {\r\n    function owner() external returns (address);\r\n    function setOwner(address) external;\r\n    function authority() external returns (address);\r\n    function setAuthority(address) external;\r\n    function cat() external returns (address);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\n\r\ninterface VowAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function vat() external view returns (address);\r\n    function flapper() external view returns (address);\r\n    function flopper() external view returns (address);\r\n    function sin(uint256) external view returns (uint256);\r\n    function Sin() external view returns (uint256);\r\n    function Ash() external view returns (uint256);\r\n    function wait() external view returns (uint256);\r\n    function dump() external view returns (uint256);\r\n    function sump() external view returns (uint256);\r\n    function bump() external view returns (uint256);\r\n    function hump() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function fess(uint256) external;\r\n    function flog(uint256) external;\r\n    function heal(uint256) external;\r\n    function kiss(uint256) external;\r\n    function flop() external returns (uint256);\r\n    function flap() external returns (uint256);\r\n    function cage() external;\r\n}\r\n\r\ninterface MkrAuthorityAbstract {\r\n    function root() external returns (address);\r\n    function setRoot(address) external;\r\n    function wards(address) external returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function canCall(address, address, bytes4) external returns (bool);\r\n}\r\n\r\ncontract SpellAction {\r\n\r\n    // MAINNET ADDRESSES\r\n    //\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    // against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/1.0.9/contracts.json\r\n\r\n    address constant MCD_VAT             = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant MCD_VOW             = 0xA950524441892A31ebddF91d3cEEFa04Bf454466;\r\n    address constant MCD_CAT             = 0x78F2c2AF65126834c51822F56Be0d7469D7A523E;\r\n    address constant MCD_JUG             = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant GOV_GUARD           = 0x6eEB68B2C7A918f36B78E2DB80dcF279236DDFb8;\r\n\r\n    address constant MCD_SPOT            = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address constant MCD_END             = 0xaB14d3CE3F733CACB76eC2AbE7d2fcb00c99F3d5;\r\n    address constant FLIPPER_MOM         = 0x9BdDB99625A711bf9bda237044924E34E8570f75;\r\n    address constant OSM_MOM             = 0x76416A4d5190d071bfed309861527431304aA14f;\r\n\r\n    address constant MCD_JOIN_MANA_A     = 0xA6EA3b9C04b8a38Ff5e224E7c3D6937ca44C0ef9;\r\n    address constant PIP_MANA            = 0x8067259EA630601f319FccE477977E55C6078C13;\r\n    address constant MCD_FLIP_MANA_A     = 0x4bf9D2EBC4c57B9B783C12D30076507660B58b3a;\r\n    address constant MANA                = 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942;\r\n\r\n    address constant MCD_FLAP            = 0xC4269cC7acDEdC3794b221aA4D9205F564e27f0d;\r\n    address constant MCD_FLOP            = 0xA41B6EF151E06da0e34B009B86E828308986736D;\r\n    address constant MCD_FLAP_OLD        = 0xdfE0fb1bE2a52CDBf8FB962D5701d7fd0902db9f;\r\n    address constant MCD_FLOP_OLD        = 0x4D95A049d5B0b7d32058cd3F2163015747522e99;\r\n\r\n    address constant MCD_FLIP_ETH_A      = 0x0F398a2DaAa134621e4b687FCcfeE4CE47599Cc1;\r\n    address constant MCD_FLIP_ETH_A_OLD  = 0xd8a04F5412223F513DC55F839574430f5EC15531;\r\n\r\n    address constant MCD_FLIP_BAT_A      = 0x5EdF770FC81E7b8C2c89f71F30f211226a4d7495;\r\n    address constant MCD_FLIP_BAT_A_OLD  = 0xaA745404d55f88C108A28c86abE7b5A1E7817c07;\r\n\r\n    address constant MCD_FLIP_USDC_A     = 0x545521e0105C5698f75D6b3C3050CfCC62FB0C12;\r\n    address constant MCD_FLIP_USDC_A_OLD = 0xE6ed1d09a19Bd335f051d78D5d22dF3bfF2c28B1;\r\n\r\n    address constant MCD_FLIP_USDC_B     = 0x6002d3B769D64A9909b0B26fC00361091786fe48;\r\n    address constant MCD_FLIP_USDC_B_OLD = 0xec25Ca3fFa512afbb1784E17f1D414E16D01794F;\r\n\r\n    address constant MCD_FLIP_WBTC_A     = 0xF70590Fa4AaBe12d3613f5069D02B8702e058569;\r\n    address constant MCD_FLIP_WBTC_A_OLD = 0x3E115d85D4d7253b05fEc9C0bB5b08383C2b0603;\r\n\r\n    address constant MCD_FLIP_ZRX_A      = 0x92645a34d07696395b6e5b8330b000D0436A9aAD;\r\n    address constant MCD_FLIP_ZRX_A_OLD  = 0x08c89251FC058cC97d5bA5F06F95026C0A5CF9B0;\r\n\r\n    address constant MCD_FLIP_KNC_A      = 0xAD4a0B5F3c6Deb13ADE106Ba6E80Ca6566538eE6;\r\n    address constant MCD_FLIP_KNC_A_OLD  = 0xAbBCB9Ae89cDD3C27E02D279480C7fF33083249b;\r\n\r\n    address constant MCD_FLIP_TUSD_A     = 0x04C42fAC3e29Fd27118609a5c36fD0b3Cb8090b3;\r\n    address constant MCD_FLIP_TUSD_A_OLD = 0xba3f6a74BD12Cf1e48d4416c7b50963cA98AfD61;\r\n\r\n    // Decimals & precision\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant WAD      = 10 ** 18;\r\n    uint256 constant RAY      = 10 ** 27;\r\n    uint256 constant RAD      = 10 ** 45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    uint256 constant TWELVE_PCT_RATE = 1000000003593629043335673582;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/cc819c75fc8f1b622cbe06acfd0d11bf64545622/governance/votes/Executive%20vote%20-%20July%2027%2C%202020%20.md -q -O - 2>/dev/null)\"\r\n    string constant public description =\r\n        \"2020-07-27 MakerDAO Executive Spell | Executive for July Governance Cycle | 0x72b73b29a8c49e38b5a23b760f622808a41ed52f584f147b4437e5ad5b5c7ce2\";\r\n\r\n    function execute() external {\r\n        // Raise the global debt ceiling by 41 million (40 million for ETH-A, 1 million for MANA-A)\r\n        VatAbstract(MCD_VAT).file(\"Line\", VatAbstract(MCD_VAT).Line() + 41 * MILLION * RAD);\r\n\r\n        // Raise the ETH-A debt ceiling by 40 million to 260 million\r\n        bytes32 ilk = \"ETH-A\";\r\n        VatAbstract(MCD_VAT).file(ilk, \"line\", 260 * MILLION * RAD); // 260 MM debt ceiling\r\n\r\n        // Set ilk bytes32 variable\r\n        ilk = \"MANA-A\";\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_MANA_A).vat() == MCD_VAT,  \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_MANA_A).ilk() == ilk,      \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_MANA_A).gem() == MANA,     \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_MANA_A).dec() == 18,       \"join-dec-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_MANA_A).vat() == MCD_VAT,     \"flip-vat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_MANA_A).ilk() == ilk,         \"flip-ilk-not-match\");\r\n\r\n        // Set price feed for MANA-A\r\n        SpotAbstract(MCD_SPOT).file(ilk, \"pip\", PIP_MANA);\r\n\r\n        // Set the MANA-A flipper in the cat\r\n        CatAbstract(MCD_CAT).file(ilk, \"flip\", MCD_FLIP_MANA_A);\r\n\r\n        // Init MANA-A in Vat & Jug\r\n        VatAbstract(MCD_VAT).init(ilk);\r\n        JugAbstract(MCD_JUG).init(ilk);\r\n\r\n        // Allow MANA-A Join to modify Vat registry\r\n        VatAbstract(MCD_VAT).rely(MCD_JOIN_MANA_A);\r\n\r\n        // Allow cat to kick auctions in MANA-A Flipper\r\n        FlipAbstract(MCD_FLIP_MANA_A).rely(MCD_CAT);\r\n\r\n        // Allow End to yank auctions in MANA-A Flipper\r\n        FlipAbstract(MCD_FLIP_MANA_A).rely(MCD_END);\r\n\r\n        // Allow FlipperMom to access the MANA-A Flipper\r\n        FlipAbstract(MCD_FLIP_MANA_A).rely(FLIPPER_MOM);\r\n\r\n        // Update OSM\r\n        MedianAbstract(OsmAbstract(PIP_MANA).src()).kiss(PIP_MANA);\r\n        OsmAbstract(PIP_MANA).rely(OSM_MOM);\r\n        OsmAbstract(PIP_MANA).kiss(MCD_SPOT);\r\n        OsmAbstract(PIP_MANA).kiss(MCD_END);\r\n        OsmMomAbstract(OSM_MOM).setOsm(ilk, PIP_MANA);\r\n\r\n        VatAbstract(MCD_VAT).file(ilk, \"line\", 1 * MILLION * RAD);    // 1 MM debt ceiling\r\n        VatAbstract(MCD_VAT).file(ilk, \"dust\", 20 * RAD);             // 20 Dai dust\r\n        CatAbstract(MCD_CAT).file(ilk, \"lump\", 500 * THOUSAND * WAD); // 500,000 lot size\r\n        CatAbstract(MCD_CAT).file(ilk, \"chop\", 113 * RAY / 100);      // 13% liq. penalty\r\n        JugAbstract(MCD_JUG).file(ilk, \"duty\", TWELVE_PCT_RATE);      // 12% stability fee\r\n\r\n        FlipAbstract(MCD_FLIP_MANA_A).file(\"beg\",  103 * WAD / 100);  // 3% bid increase\r\n        FlipAbstract(MCD_FLIP_MANA_A).file(\"ttl\",  6 hours);          // 6 hours ttl\r\n        FlipAbstract(MCD_FLIP_MANA_A).file(\"tau\",  6 hours);          // 6 hours tau\r\n\r\n        SpotAbstract(MCD_SPOT).file(ilk, \"mat\",  175 * RAY / 100);    // 175% coll. ratio\r\n        SpotAbstract(MCD_SPOT).poke(ilk);\r\n\r\n        /*** Add new Flip, Flap, Flop contracts ***/\r\n        MkrAuthorityAbstract mkrAuthority = MkrAuthorityAbstract(GOV_GUARD);\r\n        VatAbstract                   vat = VatAbstract(MCD_VAT);\r\n        CatAbstract                   cat = CatAbstract(MCD_CAT);\r\n        VowAbstract                   vow = VowAbstract(MCD_VOW);\r\n\r\n        FlapAbstract newFlap = FlapAbstract(MCD_FLAP);\r\n        FlopAbstract newFlop = FlopAbstract(MCD_FLOP);\r\n        FlapAbstract oldFlap = FlapAbstract(MCD_FLAP_OLD);\r\n        FlopAbstract oldFlop = FlopAbstract(MCD_FLOP_OLD);\r\n\r\n        /*** Flap ***/\r\n        vow.file(\"flapper\", MCD_FLAP);\r\n        newFlap.rely(MCD_VOW);\r\n        newFlap.file(\"beg\", oldFlap.beg());\r\n        newFlap.file(\"ttl\", oldFlap.ttl());\r\n        newFlap.file(\"tau\", oldFlap.tau());\r\n        oldFlap.deny(MCD_VOW);\r\n        require(newFlap.gem() == oldFlap.gem(), \"non-matching-gem\");\r\n        require(newFlap.vat() == MCD_VAT, \"non-matching-vat\");\r\n\r\n        /*** Flop ***/\r\n        vow.file(\"flopper\", MCD_FLOP);\r\n        newFlop.rely(MCD_VOW);\r\n        vat.rely(MCD_FLOP);\r\n        mkrAuthority.rely(MCD_FLOP);\r\n        newFlop.file(\"beg\", oldFlop.beg());\r\n        newFlop.file(\"pad\", oldFlop.pad());\r\n        newFlop.file(\"ttl\", oldFlop.ttl());\r\n        newFlop.file(\"tau\", oldFlop.tau());\r\n        oldFlop.deny(MCD_VOW);\r\n        vat.deny(MCD_FLOP_OLD);\r\n        mkrAuthority.deny(MCD_FLOP_OLD);\r\n        require(newFlop.gem() == oldFlop.gem(), \"non-matching-gem\");\r\n        require(newFlop.vat() == MCD_VAT, \"non-matching-vat\");\r\n\r\n        FlipAbstract newFlip;\r\n        FlipAbstract oldFlip;\r\n\r\n        /*** ETH-A Flip ***/\r\n        ilk = \"ETH-A\";\r\n        newFlip = FlipAbstract(MCD_FLIP_ETH_A);\r\n        oldFlip = FlipAbstract(MCD_FLIP_ETH_A_OLD);\r\n\r\n        cat.file(ilk, \"flip\", address(newFlip));\r\n        newFlip.rely(MCD_CAT);\r\n        newFlip.rely(MCD_END);\r\n        newFlip.rely(FLIPPER_MOM);\r\n        oldFlip.deny(MCD_CAT);\r\n        oldFlip.deny(MCD_END);\r\n        oldFlip.deny(FLIPPER_MOM);\r\n        newFlip.file(\"beg\", oldFlip.beg());\r\n        newFlip.file(\"ttl\", oldFlip.ttl());\r\n        newFlip.file(\"tau\", oldFlip.tau());\r\n        require(newFlip.ilk() == ilk, \"non-matching-ilk\");\r\n        require(newFlip.vat() == MCD_VAT, \"non-matching-vat\");\r\n\r\n\r\n        /*** BAT-A Flip ***/\r\n        ilk = \"BAT-A\";\r\n        newFlip = FlipAbstract(MCD_FLIP_BAT_A);\r\n        oldFlip = FlipAbstract(MCD_FLIP_BAT_A_OLD);\r\n\r\n        cat.file(ilk, \"flip\", address(newFlip));\r\n        newFlip.rely(MCD_CAT);\r\n        newFlip.rely(MCD_END);\r\n        newFlip.rely(FLIPPER_MOM);\r\n        oldFlip.deny(MCD_CAT);\r\n        oldFlip.deny(MCD_END);\r\n        oldFlip.deny(FLIPPER_MOM);\r\n        newFlip.file(\"beg\", oldFlip.beg());\r\n        newFlip.file(\"ttl\", oldFlip.ttl());\r\n        newFlip.file(\"tau\", oldFlip.tau());\r\n        require(newFlip.ilk() == ilk, \"non-matching-ilk\");\r\n        require(newFlip.vat() == MCD_VAT, \"non-matching-vat\");\r\n\r\n\r\n        /*** USDC-A Flip ***/\r\n        ilk = \"USDC-A\";\r\n        newFlip = FlipAbstract(MCD_FLIP_USDC_A);\r\n        oldFlip = FlipAbstract(MCD_FLIP_USDC_A_OLD);\r\n\r\n        cat.file(ilk, \"flip\", address(newFlip));\r\n        newFlip.rely(MCD_CAT); // This will be denied after via FlipperMom, just doing this for explicitness\r\n        newFlip.rely(MCD_END);\r\n        newFlip.rely(FLIPPER_MOM);\r\n        oldFlip.deny(MCD_CAT);\r\n        oldFlip.deny(MCD_END);\r\n        oldFlip.deny(FLIPPER_MOM);\r\n        newFlip.file(\"beg\", oldFlip.beg());\r\n        newFlip.file(\"ttl\", oldFlip.ttl());\r\n        newFlip.file(\"tau\", oldFlip.tau());\r\n        require(newFlip.ilk() == ilk, \"non-matching-ilk\");\r\n        require(newFlip.vat() == MCD_VAT, \"non-matching-vat\");\r\n        FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_USDC_A);\r\n\r\n\r\n        /*** USDC-B Flip ***/\r\n        ilk = \"USDC-B\";\r\n        newFlip = FlipAbstract(MCD_FLIP_USDC_B);\r\n        oldFlip = FlipAbstract(MCD_FLIP_USDC_B_OLD);\r\n\r\n        cat.file(ilk, \"flip\", address(newFlip));\r\n        newFlip.rely(MCD_CAT); // This will be denied after via FlipperMom, just doing this for explicitness\r\n        newFlip.rely(MCD_END);\r\n        newFlip.rely(FLIPPER_MOM);\r\n        oldFlip.deny(MCD_CAT);\r\n        oldFlip.deny(MCD_END);\r\n        oldFlip.deny(FLIPPER_MOM);\r\n        newFlip.file(\"beg\", oldFlip.beg());\r\n        newFlip.file(\"ttl\", oldFlip.ttl());\r\n        newFlip.file(\"tau\", oldFlip.tau());\r\n        require(newFlip.ilk() == ilk, \"non-matching-ilk\");\r\n        require(newFlip.vat() == MCD_VAT, \"non-matching-vat\");\r\n        FlipperMomAbstract(FLIPPER_MOM).deny(MCD_FLIP_USDC_B);\r\n\r\n\r\n        /*** WBTC-A Flip ***/\r\n        ilk = \"WBTC-A\";\r\n        newFlip = FlipAbstract(MCD_FLIP_WBTC_A);\r\n        oldFlip = FlipAbstract(MCD_FLIP_WBTC_A_OLD);\r\n\r\n        cat.file(ilk, \"flip\", address(newFlip));\r\n        newFlip.rely(MCD_CAT);\r\n        newFlip.rely(MCD_END);\r\n        newFlip.rely(FLIPPER_MOM);\r\n        oldFlip.deny(MCD_CAT);\r\n        oldFlip.deny(MCD_END);\r\n        oldFlip.deny(FLIPPER_MOM);\r\n        newFlip.file(\"beg\", oldFlip.beg());\r\n        newFlip.file(\"ttl\", oldFlip.ttl());\r\n        newFlip.file(\"tau\", oldFlip.tau());\r\n        require(newFlip.ilk() == ilk, \"non-matching-ilk\");\r\n        require(newFlip.vat() == MCD_VAT, \"non-matching-vat\");\r\n\r\n\r\n        /*** ZRX-A Flip ***/\r\n        ilk = \"ZRX-A\";\r\n        newFlip = FlipAbstract(MCD_FLIP_ZRX_A);\r\n        oldFlip = FlipAbstract(MCD_FLIP_ZRX_A_OLD);\r\n\r\n        cat.file(ilk, \"flip\", address(newFlip));\r\n        newFlip.rely(MCD_CAT);\r\n        newFlip.rely(MCD_END);\r\n        newFlip.rely(FLIPPER_MOM);\r\n        oldFlip.deny(MCD_CAT);\r\n        oldFlip.deny(MCD_END);\r\n        oldFlip.deny(FLIPPER_MOM);\r\n        newFlip.file(\"beg\", oldFlip.beg());\r\n        newFlip.file(\"ttl\", oldFlip.ttl());\r\n        newFlip.file(\"tau\", oldFlip.tau());\r\n        require(newFlip.ilk() == ilk, \"non-matching-ilk\");\r\n        require(newFlip.vat() == MCD_VAT, \"non-matching-vat\");\r\n\r\n\r\n        /*** KNC-A Flip ***/\r\n        ilk = \"KNC-A\";\r\n        newFlip = FlipAbstract(MCD_FLIP_KNC_A);\r\n        oldFlip = FlipAbstract(MCD_FLIP_KNC_A_OLD);\r\n\r\n        cat.file(ilk, \"flip\", address(newFlip));\r\n        newFlip.rely(MCD_CAT);\r\n        newFlip.rely(MCD_END);\r\n        newFlip.rely(FLIPPER_MOM);\r\n        oldFlip.deny(MCD_CAT);\r\n        oldFlip.deny(MCD_END);\r\n        oldFlip.deny(FLIPPER_MOM);\r\n        newFlip.file(\"beg\", oldFlip.beg());\r\n        newFlip.file(\"ttl\", oldFlip.ttl());\r\n        newFlip.file(\"tau\", oldFlip.tau());\r\n        require(newFlip.ilk() == ilk, \"non-matching-ilk\");\r\n        require(newFlip.vat() == MCD_VAT, \"non-matching-vat\");\r\n\r\n\r\n        /*** TUSD-A Flip ***/\r\n        ilk = \"TUSD-A\";\r\n        newFlip = FlipAbstract(MCD_FLIP_TUSD_A);\r\n        oldFlip = FlipAbstract(MCD_FLIP_TUSD_A_OLD);\r\n\r\n        cat.file(ilk, \"flip\", address(newFlip));\r\n        newFlip.rely(MCD_CAT);\r\n        newFlip.rely(MCD_END);\r\n        newFlip.rely(FLIPPER_MOM);\r\n        oldFlip.deny(MCD_CAT);\r\n        oldFlip.deny(MCD_END);\r\n        oldFlip.deny(FLIPPER_MOM);\r\n        newFlip.file(\"beg\", oldFlip.beg());\r\n        newFlip.file(\"ttl\", oldFlip.ttl());\r\n        newFlip.file(\"tau\", oldFlip.tau());\r\n        require(newFlip.ilk() == ilk, \"non-matching-ilk\");\r\n        require(newFlip.vat() == MCD_VAT, \"non-matching-vat\");\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n    DSPauseAbstract public pause = \r\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\r\n    address         public action;\r\n    bytes32         public tag;\r\n    uint256         public eta;\r\n    bytes           public sig;\r\n    uint256         public expiration;\r\n    bool            public done;\r\n\r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = now + 4 days + 2 hours; // Extra window of 2 hours to get the spell set up in the Governance Portal and communicated\r\n    }\r\n\r\n    modifier officeHours {\r\n        uint day = (now / 1 days + 3) % 7;\r\n        require(day < 5, \"Can only be cast on a weekday\");\r\n        uint hour = now / 1 hours % 24;\r\n        require(hour >= 14 && hour < 21, \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    function description() public view returns (string memory) {\r\n        return SpellAction(action).description();\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public officeHours {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://376cf48aad9724bef10ea9a5f7d370e3ee7ec17a0ec3bbd17afbd2852682f944"}]}