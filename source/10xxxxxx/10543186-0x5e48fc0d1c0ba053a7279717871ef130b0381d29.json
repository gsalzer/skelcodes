{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard is Initializable {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    function initialize() public initializer {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\uniswapV2Periphery\\interfaces\\IUniswapV2Router01.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\n\r\nlibrary BasisPoints {\r\n    using SafeMath for uint;\r\n\r\n    uint constant private BASIS_POINTS = 10000;\r\n\r\n    function mulBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        return amt.mul(bp).div(BASIS_POINTS);\r\n    }\r\n\r\n    function divBP(uint amt, uint bp) internal pure returns (uint) {\r\n        require(bp > 0, \"Cannot divide by zero.\");\r\n        if (amt == 0) return 0;\r\n        return amt.mul(BASIS_POINTS).div(bp);\r\n    }\r\n\r\n    function addBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.add(mulBP(amt, bp));\r\n    }\r\n\r\n    function subBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.sub(mulBP(amt, bp));\r\n    }\r\n}\r\n\r\n\r\ninterface ILidCertifiableToken {\r\n    function activateTransfers() external;\r\n    function activateTax() external;\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function addMinter(address account) external;\r\n    function renounceMinter() external;\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function isMinter(address account) external view returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\ncontract LidCertifiedPresaleTimer is Initializable, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint public startTime;\r\n    uint public baseTimer;\r\n    uint public deltaTimer;\r\n\r\n    function initialize(\r\n        uint _startTime,\r\n        uint _baseTimer,\r\n        uint _deltaTimer,\r\n        address owner\r\n    ) external initializer {\r\n        Ownable.initialize(msg.sender);\r\n        startTime = _startTime;\r\n        baseTimer = _baseTimer;\r\n        deltaTimer = _deltaTimer;\r\n        //Due to issue in oz testing suite, the msg.sender might not be owner\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    function setStartTime(uint time) external onlyOwner {\r\n        startTime = time;\r\n    }\r\n\r\n    function isStarted() external view returns (bool) {\r\n        return (startTime != 0 && now > startTime);\r\n    }\r\n\r\n    function getEndTime(uint bal) external view returns (uint) {\r\n        uint multiplier = 0;\r\n        if (bal <= 1000 ether) {\r\n            multiplier = bal.div(100 ether);\r\n        } else if (bal <= 10000 ether) {\r\n            multiplier = bal.div(1000 ether).add(9);\r\n        } else if (bal <= 100000 ether) {\r\n            multiplier = bal.div(10000 ether).add(19);\r\n        } else if (bal <= 1000000 ether) {\r\n            multiplier = bal.div(100000 ether).add(29);\r\n        } else if (bal <= 10000000 ether) {\r\n            multiplier = bal.div(1000000 ether).add(39);\r\n        } else if (bal <= 100000000 ether) {\r\n            multiplier = bal.div(10000000 ether).add(49);\r\n        }\r\n        return startTime.add(\r\n            baseTimer\r\n        ).add(\r\n            deltaTimer.mul(multiplier)\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract LidCertifiedPresale is Initializable, Ownable, ReentrancyGuard {\r\n    using BasisPoints for uint;\r\n    using SafeMath for uint;\r\n\r\n    uint public maxBuyPerAddressBase;\r\n    uint public maxBuyPerAddressBP;\r\n    uint public maxBuyWithoutWhitelisting;\r\n\r\n    uint public redeemBP;\r\n    uint public redeemInterval;\r\n\r\n    uint public referralBP;\r\n\r\n    uint public uniswapEthBP;\r\n    address payable[] public etherPools;\r\n    uint[] public etherPoolBPs;\r\n\r\n    uint public uniswapTokenBP;\r\n    uint public presaleTokenBP;\r\n    address[] public tokenPools;\r\n    uint[] public tokenPoolBPs;\r\n\r\n    uint public startingPrice;\r\n    uint public multiplierPrice;\r\n\r\n    bool public hasSentToUniswap;\r\n    bool public hasIssuedTokens;\r\n    bool public hasSentEther;\r\n\r\n    uint public totalTokens;\r\n    uint private totalEth;\r\n    uint public finalEndTime;\r\n\r\n    ILidCertifiableToken private token;\r\n    IUniswapV2Router01 private uniswapRouter;\r\n    LidCertifiedPresaleTimer private timer;\r\n\r\n    mapping(address => uint) public depositAccounts;\r\n    mapping(address => uint) public accountEarnedLid;\r\n    mapping(address => uint) public accountClaimedLid;\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint) public earnedReferrals;\r\n\r\n    uint public totalDepositors;\r\n    mapping(address => uint) public referralCounts;\r\n\r\n    uint lidRepaired;\r\n    bool pauseDeposit;\r\n\r\n    mapping(address => bool) public isRepaired;\r\n\r\n    modifier whenPresaleActive {\r\n        require(timer.isStarted(), \"Presale not yet started.\");\r\n        require(!_isPresaleEnded(), \"Presale has ended.\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPresaleFinished {\r\n        require(timer.isStarted(), \"Presale not yet started.\");\r\n        require(_isPresaleEnded(), \"Presale has not yet ended.\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        uint _maxBuyPerAddressBase,\r\n        uint _maxBuyPerAddressBP,\r\n        uint _maxBuyWithoutWhitelisting,\r\n        uint _redeemBP,\r\n        uint _redeemInterval,\r\n        uint _referralBP,\r\n        uint _startingPrice,\r\n        uint _multiplierPrice,\r\n        address owner,\r\n        LidCertifiedPresaleTimer _timer,\r\n        ILidCertifiableToken _token\r\n    ) external initializer {\r\n        require(_token.isMinter(address(this)), \"Presale SC must be minter.\");\r\n        Ownable.initialize(msg.sender);\r\n        ReentrancyGuard.initialize();\r\n\r\n        token = _token;\r\n        timer = _timer;\r\n\r\n        maxBuyPerAddressBase = _maxBuyPerAddressBase;\r\n        maxBuyPerAddressBP = _maxBuyPerAddressBP;\r\n        maxBuyWithoutWhitelisting = _maxBuyWithoutWhitelisting;\r\n\r\n        redeemBP = _redeemBP;\r\n\r\n        referralBP = _referralBP;\r\n        redeemInterval = _redeemInterval;\r\n\r\n        startingPrice = _startingPrice;\r\n        multiplierPrice = _multiplierPrice;\r\n\r\n        uniswapRouter = IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        //Due to issue in oz testing suite, the msg.sender might not be owner\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    function deposit() external payable {\r\n        deposit(address(0x0));\r\n    }\r\n\r\n    function setEtherPools(\r\n        address payable[] calldata _etherPools,\r\n        uint[] calldata _etherPoolBPs\r\n    ) external onlyOwner {\r\n        require(_etherPools.length == _etherPoolBPs.length, \"Must have exactly one etherPool addresses for each BP.\");\r\n        delete etherPools;\r\n        delete etherPoolBPs;\r\n        uniswapEthBP = 7500; //75%\r\n        for (uint i = 0; i < _etherPools.length; ++i) {\r\n            etherPools.push(_etherPools[i]);\r\n        }\r\n        uint totalEtherPoolsBP = uniswapEthBP;\r\n        for (uint i = 0; i < _etherPoolBPs.length; ++i) {\r\n            etherPoolBPs.push(_etherPoolBPs[i]);\r\n            totalEtherPoolsBP = totalEtherPoolsBP.add(_etherPoolBPs[i]);\r\n        }\r\n        require(totalEtherPoolsBP == 10000, \"Must allocate exactly 100% (10000 BP) of ether to pools\");\r\n    }\r\n\r\n    function setTokenPools(\r\n        address[] calldata _tokenPools,\r\n        uint[] calldata _tokenPoolBPs\r\n    ) external onlyOwner {\r\n        require(_tokenPools.length == _tokenPoolBPs.length, \"Must have exactly one tokenPool addresses for each BP.\");\r\n        delete tokenPools;\r\n        delete tokenPoolBPs;\r\n        uniswapTokenBP = 1600;\r\n        presaleTokenBP = 4000;\r\n        for (uint i = 0; i < _tokenPools.length; ++i) {\r\n            tokenPools.push(_tokenPools[i]);\r\n        }\r\n        uint totalTokenPoolBPs = uniswapTokenBP.add(presaleTokenBP);\r\n        for (uint i = 0; i < _tokenPoolBPs.length; ++i) {\r\n            tokenPoolBPs.push(_tokenPoolBPs[i]);\r\n            totalTokenPoolBPs = totalTokenPoolBPs.add(_tokenPoolBPs[i]);\r\n        }\r\n        require(totalTokenPoolBPs == 10000, \"Must allocate exactly 100% (10000 BP) of tokens to pools\");\r\n    }\r\n\r\n    function sendToUniswap() external whenPresaleFinished nonReentrant {\r\n        require(etherPools.length > 0, \"Must have set ether pools\");\r\n        require(tokenPools.length > 0, \"Must have set token pools\");\r\n        require(!hasSentToUniswap, \"Has already sent to Uniswap.\");\r\n        finalEndTime = now;\r\n        hasSentToUniswap = true;\r\n        totalTokens = totalTokens.divBP(presaleTokenBP);\r\n        uint uniswapTokens = totalTokens.mulBP(uniswapTokenBP);\r\n        totalEth = address(this).balance;\r\n        uint uniswapEth = totalEth.mulBP(uniswapEthBP);\r\n        token.mint(address(this), uniswapTokens);\r\n        token.activateTransfers();\r\n        token.approve(address(uniswapRouter), uniswapTokens);\r\n        uniswapRouter.addLiquidityETH.value(uniswapEth)(\r\n            address(token),\r\n            uniswapTokens,\r\n            uniswapTokens,\r\n            uniswapEth,\r\n            address(0x000000000000000000000000000000000000dEaD),\r\n            now\r\n        );\r\n    }\r\n\r\n    function issueTokens() external whenPresaleFinished {\r\n        require(hasSentToUniswap, \"Has not yet sent to Uniswap.\");\r\n        require(!hasIssuedTokens, \"Has already issued tokens.\");\r\n        hasIssuedTokens = true;\r\n        for (uint i = 0; i < tokenPools.length; ++i) {\r\n            token.mint(\r\n                tokenPools[i],\r\n                totalTokens.mulBP(tokenPoolBPs[i])\r\n            );\r\n        }\r\n    }\r\n\r\n    function sendEther() external whenPresaleFinished nonReentrant {\r\n        require(hasSentToUniswap, \"Has not yet sent to Uniswap.\");\r\n        require(!hasSentEther, \"Has already sent ether.\");\r\n        hasSentEther = true;\r\n        for (uint i = 0; i < etherPools.length; ++i) {\r\n            etherPools[i].transfer(\r\n                totalEth.mulBP(etherPoolBPs[i])\r\n            );\r\n        }\r\n        //remove dust\r\n        if (address(this).balance > 0) {\r\n            etherPools[0].transfer(\r\n                address(this).balance\r\n            );\r\n        }\r\n    }\r\n\r\n    function setDepositPause(bool val) external onlyOwner {\r\n        pauseDeposit = val;\r\n    }\r\n\r\n    function setWhitelist(address account, bool value) external onlyOwner {\r\n        whitelist[account] = value;\r\n    }\r\n\r\n    function setWhitelistForAll(address[] calldata account, bool value) external onlyOwner {\r\n        for (uint i=0; i < account.length; i++) {\r\n            whitelist[account[i]] = value;\r\n        }\r\n    }\r\n\r\n    function redeem() external whenPresaleFinished {\r\n        require(hasSentToUniswap, \"Must have sent to Uniswap before any redeems.\");\r\n        uint claimable = calculateReedemable(msg.sender);\r\n        accountClaimedLid[msg.sender] = accountClaimedLid[msg.sender].add(claimable);\r\n        token.mint(msg.sender, claimable);\r\n    }\r\n\r\n    function deposit(address payable referrer) public payable whenPresaleActive nonReentrant {\r\n        require(!pauseDeposit, \"Deposits are paused.\");\r\n        if (whitelist[msg.sender]) {\r\n            require(\r\n                depositAccounts[msg.sender].add(msg.value) <=\r\n                getMaxWhitelistedDeposit(\r\n                    address(this).balance.sub(msg.value)\r\n                ),\r\n                \"Deposit exceeds max buy per address for whitelisted addresses.\"\r\n            );\r\n        } else {\r\n            require(\r\n                depositAccounts[msg.sender].add(msg.value) <= maxBuyWithoutWhitelisting,\r\n                \"Deposit exceeds max buy per address for non-whitelisted addresses.\"\r\n            );\r\n        }\r\n\r\n        require(msg.value > 0.01 ether, \"Must purchase at least 0.01 ether.\");\r\n\r\n        if(depositAccounts[msg.sender] == 0) totalDepositors = totalDepositors.add(1);\r\n\r\n        uint depositVal = msg.value.subBP(referralBP);\r\n        uint tokensToIssue = depositVal.mul(10**18).div(calculateRatePerEth());\r\n        depositAccounts[msg.sender] = depositAccounts[msg.sender].add(depositVal);\r\n\r\n        totalTokens = totalTokens.add(tokensToIssue);\r\n\r\n        accountEarnedLid[msg.sender] = accountEarnedLid[msg.sender].add(tokensToIssue);\r\n\r\n        if (referrer != address(0x0) && referrer != msg.sender) {\r\n            uint referralValue = msg.value.sub(depositVal);\r\n            earnedReferrals[referrer] = earnedReferrals[referrer].add(referralValue);\r\n            referralCounts[referrer] = referralCounts[referrer].add(1);\r\n            referrer.transfer(referralValue);\r\n        }\r\n    }\r\n\r\n    function calculateReedemable(address account) public view returns (uint) {\r\n        if (finalEndTime == 0) return 0;\r\n        uint earnedLid = accountEarnedLid[account];\r\n        uint claimedLid = accountClaimedLid[account];\r\n        uint cycles = finalEndTime.div(redeemInterval).add(1);\r\n        uint totalRedeemable = earnedLid.mulBP(redeemBP).mul(cycles);\r\n        uint claimable;\r\n        if (totalRedeemable >= earnedLid) {\r\n            claimable = earnedLid.sub(claimedLid);\r\n        } else {\r\n            claimable = totalRedeemable.sub(claimedLid);\r\n        }\r\n        return claimable;\r\n    }\r\n\r\n    function calculateRatePerEth() public view returns (uint) {\r\n        return totalTokens.div(10**18).mul(multiplierPrice).add(startingPrice);\r\n    }\r\n\r\n    function getMaxWhitelistedDeposit(uint atTotalDeposited) public view returns (uint) {\r\n        return atTotalDeposited.mulBP(maxBuyPerAddressBP).add(maxBuyPerAddressBase);\r\n    }\r\n\r\n    function _isPresaleEnded() internal view returns (bool) {\r\n        return (\r\n            (timer.isStarted() && (now > timer.getEndTime(address(this).balance)))\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountClaimedLid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountEarnedLid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateRatePerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateReedemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnedReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"etherPoolBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"etherPools\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atTotalDeposited\",\"type\":\"uint256\"}],\"name\":\"getMaxWhitelistedDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasIssuedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasSentEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasSentToUniswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyPerAddressBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuyPerAddressBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuyWithoutWhitelisting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract LidCertifiedPresaleTimer\",\"name\":\"_timer\",\"type\":\"address\"},{\"internalType\":\"contract ILidCertifiableToken\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRepaired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyPerAddressBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyPerAddressBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyWithoutWhitelisting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplierPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokenBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendToUniswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setDepositPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_etherPools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_etherPoolBPs\",\"type\":\"uint256[]\"}],\"name\":\"setEtherPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenPools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenPoolBPs\",\"type\":\"uint256[]\"}],\"name\":\"setTokenPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPoolBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapEthBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapTokenBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LidCertifiedPresale","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b5f0e8130916e392893dae7ed6df0bfa1a72e3ed99f2a131cb18c2403490e79f"}]}