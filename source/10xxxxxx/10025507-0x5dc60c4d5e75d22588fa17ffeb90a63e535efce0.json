{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/DkargoPrefix.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title DkargoPrefix\r\n/// @notice 디카르고 컨트랙트 여부 식별용 prefix 컨트랙트 정의\r\n/// @author jhhong\r\ncontract DkargoPrefix {\r\n    \r\n    string internal _dkargoPrefix; // 디카르고-프리픽스\r\n    \r\n    /// @author jhhong\r\n    /// @notice 디카르고 프리픽스를 반환한다.\r\n    /// @return 디카르고 프리픽스 (string)\r\n    function getDkargoPrefix() public view returns(string memory) {\r\n        return _dkargoPrefix;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 디카르고 프리픽스를 설정한다.\r\n    /// @param prefix 설정할 프리픽스\r\n    function _setDkargoPrefix(string memory prefix) internal {\r\n        _dkargoPrefix = prefix;\r\n    }\r\n}\r\n\r\n// File: contracts/authority/Ownership.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title Onwership\r\n/// @dev 오너 확인 및 소유권 이전 처리\r\n/// @author jhhong\r\ncontract Ownership {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed old, address indexed expected);\r\n\r\n    /// @author jhhong\r\n    /// @notice 소유자만 접근할 수 있음을 명시한다.\r\n    modifier onlyOwner() {\r\n        require(isOwner() == true, \"Ownership: only the owner can call\");\r\n        _;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 컨트랙트 생성자이다.\r\n    constructor() internal {\r\n        emit OwnershipTransferred(_owner, msg.sender);\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 소유권을 넘겨준다.\r\n    /// @param expected 새로운 오너 계정\r\n    function transferOwnership(address expected) public onlyOwner {\r\n        require(expected != address(0), \"Ownership: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, expected);\r\n        _owner = expected;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 오너 주소를 반환한다.\r\n    /// @return 오너 주소\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 소유자인지 확인한다.\r\n    /// @return 확인 결과 (boolean)\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/refs/SafeMath.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/chain/AddressChain.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/// @title AddressChain\r\n/// @notice 주소 체인 정의 및 관리\r\n/// @dev 토큰홀더, 회원정보 등과 같은 유저 리스트 관리에 쓰인다.\r\n/// @author jhhong\r\ncontract AddressChain {\r\n    using SafeMath for uint256;\r\n\r\n    // 구조체 : 노드 정보\r\n    struct NodeInfo {\r\n        address prev; // 이전 노드\r\n        address next; // 다음 노드\r\n    }\r\n    // 구조체 : 노드 체인\r\n    struct NodeList {\r\n        uint256 count; // 노드의 총 개수\r\n        address head; // 체인의 머리\r\n        address tail; // 체인의 꼬리\r\n        mapping(address => NodeInfo) map; // 계정에 대한 노드 정보 매핑\r\n    }\r\n\r\n    // 변수 선언\r\n    NodeList private _slist; // 노드 체인 (싱글리스트)\r\n\r\n    // 이벤트 선언\r\n    event AddressChainLinked(address indexed node); // 이벤트: 체인에 추가됨\r\n    event AddressChainUnlinked(address indexed node); // 이벤트: 체인에서 빠짐\r\n\r\n    /// @author jhhong\r\n    /// @notice 체인에 연결된 원소의 개수를 반환한다.\r\n    /// @return 체인에 연결된 원소의 개수\r\n    function count() public view returns(uint256) {\r\n        return _slist.count;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 체인 헤드 정보를 반환한다.\r\n    /// @return 체인 헤드 정보\r\n    function head() public view returns(address) {\r\n        return _slist.head;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 체인 꼬리 정보를 반환한다.\r\n    /// @return 체인 꼬리 정보\r\n    function tail() public view returns(address) {\r\n        return _slist.tail;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node의 다음 노드 정보를 반환한다.\r\n    /// @param node 노드 정보 (체인에 연결되어 있을 수도 있고 아닐 수도 있음)\r\n    /// @return node의 다음 노드 정보\r\n    function nextOf(address node) public view returns(address) {\r\n        return _slist.map[node].next;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node의 이전 노드 정보를 반환한다.\r\n    /// @param node 노드 정보 (체인에 연결되어 있을 수도 있고 아닐 수도 있음)\r\n    /// @return node의 이전 노드 정보\r\n    function prevOf(address node) public view returns(address) {\r\n        return _slist.map[node].prev;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node가 체인에 연결된 상태인지를 확인한다.\r\n    /// @param node 체인 연결 여부를 확인할 노드 주소\r\n    /// @return 연결 여부 (boolean), true: 연결됨(linked), false: 연결되지 않음(unlinked)\r\n    function isLinked(address node) public view returns (bool) {\r\n        if(_slist.count == 1 && _slist.head == node && _slist.tail == node) {\r\n            return true;\r\n        } else {\r\n            return (_slist.map[node].prev == address(0) && _slist.map[node].next == address(0))? (false) :(true);\r\n        }\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 새로운 노드 정보를 노드 체인에 연결한다.\r\n    /// @param node 노드 체인에 연결할 노드 주소\r\n    function _linkChain(address node) internal {\r\n        require(node != address(0), \"AddressChain: try to link to the zero address\");\r\n        require(!isLinked(node), \"AddressChain: the node is aleady linked\");\r\n        if(_slist.count == 0) {\r\n            _slist.head = _slist.tail = node;\r\n        } else {\r\n            _slist.map[node].prev = _slist.tail;\r\n            _slist.map[_slist.tail].next = node;\r\n            _slist.tail = node;\r\n        }\r\n        _slist.count = _slist.count.add(1);\r\n        emit AddressChainLinked(node);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node 노드를 체인에서 연결 해제한다.\r\n    /// @param node 노드 체인에서 연결 해제할 노드 주소\r\n    function _unlinkChain(address node) internal {\r\n        require(node != address(0), \"AddressChain: try to unlink to the zero address\");\r\n        require(isLinked(node), \"AddressChain: the node is aleady unlinked\");\r\n        address tempPrev = _slist.map[node].prev;\r\n        address tempNext = _slist.map[node].next;\r\n        if (_slist.head == node) {\r\n            _slist.head = tempNext;\r\n        }\r\n        if (_slist.tail == node) {\r\n            _slist.tail = tempPrev;\r\n        }\r\n        if (tempPrev != address(0)) {\r\n            _slist.map[tempPrev].next = tempNext;\r\n            _slist.map[node].prev = address(0);\r\n        }\r\n        if (tempNext != address(0)) {\r\n            _slist.map[tempNext].prev = tempPrev;\r\n            _slist.map[node].next = address(0);\r\n        }\r\n        _slist.count = _slist.count.sub(1);\r\n        emit AddressChainUnlinked(node);\r\n    }\r\n}\r\n\r\n// File: contracts/introspection/ERC165/IERC165.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title IERC165\r\n/// @dev EIP165 interface 선언\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n/// @author jhhong\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/introspection/ERC165/ERC165.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/// @title ERC165\r\n/// @dev EIP165 interface 구현\r\n/// @author jhhong\r\ncontract ERC165 is IERC165 {\r\n    \r\n    mapping(bytes4 => bool) private _infcs; // INTERFACE ID별 지원여부를 저장하기 위한 매핑 변수\r\n\r\n    /// @author jhhong\r\n    /// @notice 컨트랙트 생성자이다.\r\n    /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n    constructor() internal {\r\n        _registerInterface(0x01ffc9a7); // supportsInterface()의 INTERFACE ID 등록\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 컨트랙트가 INTERFACE ID를 지원하는지의 여부를 반환한다.\r\n    /// @param infcid 지원여부를 확인할 INTERFACE ID (Function Selector)\r\n    /// @return 지원여부 (boolean)\r\n    function supportsInterface(bytes4 infcid) external view returns (bool) {\r\n        return _infcs[infcid];\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice INTERFACE ID를 등록한다.\r\n    /// @param infcid 등록할 INTERFACE ID (Function Selector)\r\n    function _registerInterface(bytes4 infcid) internal {\r\n        require(infcid != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _infcs[infcid] = true;\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title IERC20\r\n/// @notice EIP20 interface 선언\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n/// @author jhhong\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/// @title ERC20\r\n/// @notice EIP20 interface 정의 및 mint/burn (internal) 함수 구현\r\n/// @author jhhong\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 private _supply; // 총 통화량\r\n    mapping(address => uint256) private _balances; // 계정별 통화량 저장소\r\n    mapping(address => mapping(address => uint256)) private _allowances; // 각 계정에 대해 \"계정별 위임량\"을 저장\r\n    \r\n    /// @author jhhong\r\n    /// @notice 컨트랙트 생성자이다.\r\n    /// @param supply 초기 발행량\r\n    constructor(uint256 supply) internal {\r\n        uint256 pebs = supply;\r\n        _mint(msg.sender, pebs);\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice 계정(spender)에게 통화량(value)을 위임한다.\r\n    /// @param spender 위임받을 계정\r\n    /// @param amount 위임할 통화량\r\n    /// @return 정상처리 시 true\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice 계정(recipient)에게 통화량(amount)을 전송한다.\r\n    /// @param recipient 전송받을 계정\r\n    /// @param amount 금액\r\n    /// @return 정상처리 시 true\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice 계정(sender)이 계정(recipient)에게 통화량(amount)을 전송한다.\r\n    /// @param sender 전송할 계정\r\n    /// @param recipient 전송받을 계정\r\n    /// @param amount 금액\r\n    /// @return 정상처리 시 true\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 발행된 총 통화량을 반환한다.\r\n    /// @return 총 통화량\r\n    function totalSupply() public view returns (uint256) {\r\n        return _supply;\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice 계정(account)이 보유한 통화량을 반환한다.\r\n    /// @param account 계정\r\n    /// @return 계정(account)이 보유한 통화량\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice 계정(approver)이 계정(spender)에게 위임한 통화량을 반환한다.\r\n    /// @param approver 위임할 계정\r\n    /// @param spender 위임받을 계정\r\n    /// @return 계정(approver)이 계정(spender)에게 위임한 통화량\r\n    function allowance(address approver, address spender) public view returns (uint256) {\r\n        return _allowances[approver][spender];\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice 계정(approver)이 계정(spender)에게 통화량(value)을 위임한다.\r\n    /// @param approver 위임할 계정\r\n    /// @param spender 위임받을 계정\r\n    /// @param value 위임할 통화량\r\n    function _approve(address approver, address spender, uint256 value) internal {\r\n        require(approver != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[approver][spender] = value;\r\n        emit Approval(approver, spender, value);\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice 계정(sender)이 계정(recipient)에게 통화량(amount)을 전송한다.\r\n    /// @param sender 위임할 계정\r\n    /// @param recipient 위임받을 계정\r\n    /// @param amount 금액\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 통화량(amount)만큼 주조하여 계정(account)의 통화량에 더해준다.\r\n    /// @dev ERC20Mint에 정의하면 private 속성인 supply와 balances에 access할 수 없어서 ERC20에 internal로 정의함.\r\n    /// @param account 주조된 통화량을 받을 계정\r\n    /// @param amount 주조할 통화량\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _supply = _supply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 통화량(value)만큼 소각하여 계정(account)의 통화량에서 뺀다.\r\n    /// @dev ERC20Mint에 정의하면 private 속성인 supply와 balances에 access할 수 없어서 ERC20에 internal로 정의함.\r\n    /// @param account 통화량을 소각시킬 계정\r\n    /// @param value 소각시킬 통화량\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(value, \"ERC20: burn amount exceeds balance\");\r\n        _supply = _supply.sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20Safe.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/// @title ERC20Safe\r\n/// @notice Approve Bug Fix 버전 (중복 위임 방지)\r\n/// @author jhhong\r\ncontract ERC20Safe is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /// @author jhhong\r\n    /// @notice 계정(spender)에게 통화량(amount)을 위임한다.\r\n    /// @dev 값이 덮어써짐을 방지하기 위해 기존에 위임받은 통화량이 0인 경우에만 호출을 허용한다.\r\n    /// @param spender 위임받을 계정\r\n    /// @param amount 위임할 통화량\r\n    /// @return 정상처리 시 true\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        require((amount == 0) || (allowance(msg.sender, spender) == 0), \"ERC20Safe: approve from non-zero to non-zero allowance\");\r\n        return super.approve(spender, amount);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 계정(spender)에 위임된 통화량에 통화량(addedValue)를 더한값을 위임한다.\r\n    /// @dev 위임된 통화량이 있을 경우, 통화량 증가는 상기 함수로 수행할 것\r\n    /// @param spender 위임받을 계정\r\n    /// @param addedValue 더해질 통화량\r\n    /// @return 정상처리 시 true\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        uint256 amount = allowance(msg.sender, spender).add(addedValue);\r\n        return super.approve(spender, amount);\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice 계정(spender)에 위임된 통화량에 통화량(subtractedValue)를 뺀값을 위임한다.\r\n    /// @dev 위임된 통화량이 있을 경우, 통화량 감소는 상기 함수로 수행할 것\r\n    /// @param spender 위임받을 계정\r\n    /// @param subtractedValue 빼질 통화량\r\n    /// @return 정상처리 시 true\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        uint256 amount = allowance(msg.sender, spender).sub(subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        return super.approve(spender, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/DkargoToken.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title DkargoToken\r\n/// @notice 디카르고 토큰 컨트랙트 정의 (메인넷 deploy용)\r\n/// @dev burn 기능 추가 (public)\r\n/// @author jhhong\r\ncontract DkargoToken is Ownership, ERC20Safe, AddressChain, ERC165, DkargoPrefix {\r\n    \r\n    string private _name; // 토큰 이름\r\n    string private _symbol; // 토큰 심볼\r\n    \r\n    /// @author jhhong\r\n    /// @notice 컨트랙트 생성자이다.\r\n    /// @dev 초기 발행량이 있을 경우, msg.sender를 홀더 리스트에 추가한다.\r\n    /// @param name 토큰 이름\r\n    /// @param symbol 토큰 심볼\r\n    /// @param supply 초기 발행량\r\n    constructor(string memory name, string memory symbol, uint256 supply) ERC20(supply) public {\r\n        _setDkargoPrefix(\"token\"); // 프리픽스 설정 (token)\r\n        _registerInterface(0x946edbed); // INTERFACE ID 등록 (getDkargoPrefix)\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _linkChain(msg.sender);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 본인의 보유금액 중 지정된 금액만큼 소각한다.\r\n    /// @param amount 소각시킬 통화량\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 토큰을 전송한다. (전송주체: msg.sender)\r\n    /// @dev 전송 후 변경된 토큰 홀더 상태를 체인에 기록한다.\r\n    /// @param to 토큰을 받을 주소\r\n    /// @param value 전송 금액 (토큰량)\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        bool ret = super.transfer(to, value);\r\n        if(isLinked(msg.sender) && balanceOf(msg.sender) == 0) {\r\n            _unlinkChain(msg.sender);\r\n        }\r\n        if(!isLinked(to) && balanceOf(to) > 0) {\r\n            _linkChain(to);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 토큰을 전송한다. (전송주체: from)\r\n    /// @dev 전송 후 변경된 토큰 홀더 상태를 체인에 기록한다.\r\n    /// @param from 토큰을 보낼 계정\r\n    /// @param to 토큰을 받을 계정\r\n    /// @param value 전송 금액 (토큰량)\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        bool ret = super.transferFrom(from, to, value);\r\n        if(isLinked(from) && balanceOf(from) == 0) {\r\n            _unlinkChain(from);\r\n        }\r\n        if(!isLinked(to) && balanceOf(to) > 0) {\r\n            _linkChain(to);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 토큰의 이름을 반환한다.\r\n    /// @return 토큰 이름\r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice 토큰의 심볼을 반환한다.\r\n    /// @return 토큰 심볼\r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice 토큰 데시멀을 반환한다.\r\n    /// @dev 데시멀 값은 18 (peb) 로 고정이다.\r\n    /// @return 토큰 데시멀\r\n    function decimals() public pure returns(uint256) {\r\n        return 18;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"infcid\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tail\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"head\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDkargoPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"nextOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"approver\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"prevOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isLinked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"address\"}],\"name\":\"AddressChainLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"address\"}],\"name\":\"AddressChainUnlinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DkargoToken","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000001027e72f1f128130880000000000000000000000000000000000000000000000000000000000000000000006644b6172676f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003444b410000000000000000000000000000000000000000000000000000000000","EVMVersion":"constantinople","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e89b01004bc315350f003204c48aec71d2bfef0998c836fd1c9f78a343296ab0"}]}