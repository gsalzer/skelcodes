{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-07-29\r\n*/\r\n\r\npragma solidity 0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ninterface Bank {\r\n    function index() external view returns (uint256);\r\n\r\n    function accounts(uint256) external view returns (address);\r\n\r\n    function indexes(address) external view returns (uint256);\r\n\r\n    function accountSupplySnapshot(address, address)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function accountBorrowSnapshot(address, address)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ncontract CallHelper is Initializable {\r\n    address public admin;\r\n\r\n    address public proposedAdmin;\r\n\r\n    Bank public bank;\r\n\r\n    struct User {\r\n        address addr;\r\n        uint256 balance;\r\n    }\r\n\r\n    function initialize(address _bank) public initializer {\r\n        admin = msg.sender;\r\n        bank = Bank(_bank);\r\n    }\r\n\r\n    function setBank(address _bank) public onlyAdmin {\r\n        bank = Bank(_bank);\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"only admin can do this!\");\r\n        _;\r\n    }\r\n\r\n    function proposeNewAdmin(address admin_) external onlyAdmin {\r\n        proposedAdmin = admin_;\r\n    }\r\n\r\n    function claimAdministration() external {\r\n        require(msg.sender == proposedAdmin, \"Not proposed admin.\");\r\n        admin = proposedAdmin;\r\n        proposedAdmin = address(0);\r\n    }\r\n\r\n    function getAccountSupplyState(address token)\r\n        public\r\n        view\r\n        returns (User[] memory)\r\n    {\r\n        uint256 index = bank.index();\r\n        User[] memory res = new User[](index - 1);\r\n        for (uint256 i = 1; i < index; ++i) {\r\n            address addr = bank.accounts(i);\r\n            uint256 balance = bank.accountSupplySnapshot(token, addr);\r\n            res[i - 1] = User({addr: addr, balance: balance});\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function getAccountSupplyStatePaging(\r\n        address token,\r\n        uint256 start,\r\n        uint256 end\r\n    ) public view returns (User[] memory) {\r\n        require(start > 0, \"start must be greater than 0\");\r\n        require(start < end, \"start must be less than end\");\r\n        uint256 index = bank.index();\r\n        uint256 last = min(index, end);\r\n        User[] memory res = new User[](last - start);\r\n        for (uint256 i = start; i < last; ++i) {\r\n            address addr = bank.accounts(i);\r\n            uint256 balance = bank.accountSupplySnapshot(token, addr);\r\n            res[i - start] = User({addr: addr, balance: balance});\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function getAccountBorrowState(address token)\r\n        public\r\n        view\r\n        returns (User[] memory)\r\n    {\r\n        uint256 index = bank.index();\r\n        User[] memory res = new User[](index - 1);\r\n        for (uint256 i = 1; i < index; ++i) {\r\n            address addr = bank.accounts(i);\r\n            uint256 balance = bank.accountBorrowSnapshot(token, addr);\r\n            res[i - 1] = User({addr: addr, balance: balance});\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function getAccountBorrowStatePaging(\r\n        address token,\r\n        uint256 start,\r\n        uint256 end\r\n    ) public view returns (User[] memory) {\r\n        require(start > 0, \"start must be greater than 0\");\r\n        require(start < end, \"start must be less than end\");\r\n        uint256 index = bank.index();\r\n        uint256 last = min(index, end);\r\n        User[] memory res = new User[](last - start);\r\n        for (uint256 i = start; i < last; ++i) {\r\n            address addr = bank.accounts(i);\r\n            uint256 balance = bank.accountBorrowSnapshot(token, addr);\r\n            res[i - start] = User({addr: addr, balance: balance});\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a < b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract Bank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdministration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAccountBorrowState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct CallHelper.User[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getAccountBorrowStatePaging\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct CallHelper.User[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAccountSupplyState\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct CallHelper.User[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getAccountSupplyStatePaging\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct CallHelper.User[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"proposeNewAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CallHelper","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://31647c33bcb86008d3ffd2ba84b43875e580d529cfd3ad2f5f0b8420594d954c"}]}