{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface LiqudityInterface {\r\n    function deposit(address, uint) external payable;\r\n    function withdraw(address, uint) external;\r\n\r\n    function accessLiquidity(address[] calldata, uint[] calldata) external;\r\n    function returnLiquidity(address[] calldata) external payable;\r\n\r\n    function isTknAllowed(address) external view returns(bool);\r\n    function tknToCTkn(address) external view returns(address);\r\n    function liquidityBalance(address, address) external view returns(uint);\r\n\r\n    function borrowedToken(address) external view returns(uint);\r\n}\r\n\r\ninterface InstaPoolFeeInterface {\r\n    function fee() external view returns(uint);\r\n    function feeCollector() external view returns(address);\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\r\n}\r\n\r\ninterface CETHInterface {\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint _id) external returns (uint _num);\r\n    function setUint(uint _id, uint _val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n}\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getAddressETH() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return Memory Variable Address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() internal pure returns (address) {\r\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n    */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n    */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details.\r\n    */\r\n    function connectorID() public pure returns(uint _type, uint _id) {\r\n        (_type, _id) = (1, 33);\r\n    }\r\n\r\n    function _transfer(address payable to, IERC20 token, uint _amt) internal {\r\n        address(token) == getAddressETH() ?\r\n            to.transfer(_amt) :\r\n            token.safeTransfer(to, _amt);\r\n    }\r\n\r\n    function _getBalance(IERC20 token) internal view returns (uint256) {\r\n        return address(token) == getAddressETH() ?\r\n            address(this).balance :\r\n            token.balanceOf(address(this));\r\n    }\r\n}\r\n\r\n\r\ncontract LiquidityHelpers is Helpers {\r\n    /**\r\n     * @dev Return InstaPool address\r\n     */\r\n    function getLiquidityAddress() internal pure returns (address) {\r\n        return 0x06cB7C24990cBE6b9F99982f975f9147c000fec6;\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaPoolFee address\r\n     */\r\n    function getInstaPoolFeeAddr() internal pure returns (address) {\r\n        return 0xAaA91046C1D1a210017e36394C83bD5070dadDa5;\r\n    }\r\n\r\n    function calculateTotalFeeAmt(IERC20 token, uint amt) internal view returns (uint totalAmt) {\r\n        uint fee = InstaPoolFeeInterface(getInstaPoolFeeAddr()).fee();\r\n        uint flashAmt = LiqudityInterface(getLiquidityAddress()).borrowedToken(address(token));\r\n        if (fee == 0) {\r\n            totalAmt = amt;\r\n        } else {\r\n            uint feeAmt = wmul(flashAmt, fee);\r\n            totalAmt = add(amt, feeAmt);\r\n        }\r\n    }\r\n\r\n    function calculateFeeAmt(IERC20 token, uint amt) internal view returns (address feeCollector, uint feeAmt) {\r\n        InstaPoolFeeInterface feeContract = InstaPoolFeeInterface(getInstaPoolFeeAddr());\r\n        uint fee = feeContract.fee();\r\n        feeCollector = feeContract.feeCollector();\r\n        if (fee == 0) {\r\n            feeAmt = 0;\r\n        } else {\r\n            feeAmt = wmul(amt, fee);\r\n            uint totalAmt = add(amt, feeAmt);\r\n\r\n            uint totalBal = _getBalance(token);\r\n            require(totalBal >= totalAmt - 10, \"Not-enough-balance\");\r\n            feeAmt = totalBal > totalAmt ? feeAmt : sub(totalBal, amt);\r\n        }\r\n    }\r\n\r\n    function calculateFeeAmtOrigin(IERC20 token, uint amt)\r\n        internal\r\n        view\r\n    returns (\r\n        address feeCollector,\r\n        uint poolFeeAmt,\r\n        uint originFee\r\n    )\r\n    {\r\n        uint feeAmt;\r\n        (feeCollector, feeAmt) = calculateFeeAmt(token, amt);\r\n        if (feeAmt == 0) {\r\n            poolFeeAmt = 0;\r\n            originFee = 0;\r\n        } else {\r\n            originFee = wmul(feeAmt, 20 * 10 ** 16); // 20%\r\n            poolFeeAmt = sub(feeAmt, originFee);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract LiquidityManage is LiquidityHelpers {\r\n\r\n    event LogDepositLiquidity(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n    event LogWithdrawLiquidity(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n\r\n    /**\r\n     * @dev Deposit Liquidity in InstaPool.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function deposit(address token, uint amt, uint getId, uint setId) external payable {\r\n        uint _amt = getUint(getId, amt);\r\n\r\n        uint ethAmt;\r\n        if (token == getAddressETH()) {\r\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\r\n            ethAmt = _amt;\r\n        } else {\r\n            IERC20 tokenContract = IERC20(token);\r\n            _amt = _amt == uint(-1) ? tokenContract.balanceOf(address(this)) : _amt;\r\n            tokenContract.approve(getLiquidityAddress(), _amt);\r\n        }\r\n\r\n        LiqudityInterface(getLiquidityAddress()).deposit.value(ethAmt)(token, _amt);\r\n        setUint(setId, _amt);\r\n\r\n        emit LogDepositLiquidity(token, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogDepositLiquidity(address,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Liquidity in InstaPool.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function withdraw(address token, uint amt, uint getId, uint setId) external payable {\r\n        uint _amt = getUint(getId, amt);\r\n\r\n        LiqudityInterface(getLiquidityAddress()).withdraw(token, _amt);\r\n        setUint(setId, _amt);\r\n\r\n        emit LogWithdrawLiquidity(token, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogWithdrawLiquidity(address,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n}\r\n\r\ncontract EventHelpers is LiquidityManage {\r\n    event LogFlashBorrow(\r\n        address indexed token,\r\n        uint256 tokenAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    event LogFlashPayback(\r\n        address indexed token,\r\n        uint256 tokenAmt,\r\n        uint256 feeCollected,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    event LogOriginFeeCollected(\r\n        address indexed origin,\r\n        address indexed token,\r\n        uint256 tokenAmt,\r\n        uint256 originFeeAmt\r\n    );\r\n\r\n    function emitFlashBorrow(address token, uint256 tokenAmt, uint256 getId, uint256 setId) internal {\r\n        emit LogFlashBorrow(token, tokenAmt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogFlashBorrow(address,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, tokenAmt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    function emitFlashPayback(address token, uint256 tokenAmt, uint256 feeCollected, uint256 getId, uint256 setId) internal {\r\n        emit LogFlashPayback(token, tokenAmt, feeCollected, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogFlashPayback(address,uint256,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, tokenAmt, feeCollected, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    function emitOriginFeeCollected(address origin, address token, uint256 tokenAmt, uint256 originFeeAmt) internal {\r\n        emit LogOriginFeeCollected(origin, token, tokenAmt, originFeeAmt);\r\n        bytes32 _eventCodeOrigin = keccak256(\"LogOriginFeeCollected(address,address,uint256,uint256)\");\r\n        bytes memory _eventParamOrigin = abi.encode(origin, token, tokenAmt, originFeeAmt);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCodeOrigin, _eventParamOrigin);\r\n    }\r\n}\r\n\r\ncontract LiquidityAccessHelper is EventHelpers {\r\n    /**\r\n     * @dev Add Fee Amount to borrowed flashloan/\r\n     * @param amt Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function addFeeAmount(address token, uint amt, uint getId, uint setId) external payable {\r\n        uint _amt = getUint(getId, amt);\r\n        require(_amt != 0, \"amt-is-0\");\r\n        uint totalFee = calculateTotalFeeAmt(IERC20(token), _amt);\r\n\r\n        setUint(setId, totalFee);\r\n    }\r\n\r\n}\r\n\r\ncontract LiquidityAccess is LiquidityAccessHelper {\r\n    /**\r\n     * @dev Access Token Liquidity from InstaPool.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function flashBorrow(address token, uint amt, uint getId, uint setId) external payable {\r\n        uint _amt = getUint(getId, amt);\r\n\r\n        address[] memory _tknAddrs = new address[](1);\r\n        _tknAddrs[0] = token;\r\n        uint[] memory _amts = new uint[](1);\r\n        _amts[0] = _amt;\r\n\r\n        LiqudityInterface(getLiquidityAddress()).accessLiquidity(_tknAddrs, _amts);\r\n\r\n        setUint(setId, _amt);\r\n        emitFlashBorrow(token, _amt, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Token Liquidity from InstaPool.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function flashPayback(address token, uint getId, uint setId) external payable {\r\n        LiqudityInterface liquidityContract = LiqudityInterface(getLiquidityAddress());\r\n        uint _amt = liquidityContract.borrowedToken(token);\r\n        IERC20 tokenContract = IERC20(token);\r\n\r\n        (address feeCollector, uint feeAmt) = calculateFeeAmt(tokenContract, _amt);\r\n\r\n        address[] memory _tknAddrs = new address[](1);\r\n        _tknAddrs[0] = token;\r\n\r\n        _transfer(payable(address(liquidityContract)), tokenContract, _amt);\r\n        liquidityContract.returnLiquidity(_tknAddrs);\r\n\r\n        if (feeAmt > 0) _transfer(payable(feeCollector), tokenContract, feeAmt);\r\n\r\n        setUint(setId, _amt);\r\n        emitFlashPayback(token, _amt, feeAmt, getId, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Token Liquidity from InstaPool and Transfer 20% of Collected Fee to `origin`.\r\n     * @param origin origin address to transfer 20% of the collected fee.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function flashPaybackOrigin(address origin, address token, uint getId, uint setId) external payable {\r\n        require(origin != address(0), \"origin-is-address(0)\");\r\n        LiqudityInterface liquidityContract = LiqudityInterface(getLiquidityAddress());\r\n        uint _amt = liquidityContract.borrowedToken(token);\r\n        IERC20 tokenContract = IERC20(token);\r\n\r\n        (address feeCollector, uint poolFeeAmt, uint originFeeAmt) = calculateFeeAmtOrigin(tokenContract, _amt);\r\n\r\n        address[] memory _tknAddrs = new address[](1);\r\n        _tknAddrs[0] = token;\r\n\r\n        _transfer(payable(address(liquidityContract)), tokenContract, _amt);\r\n        liquidityContract.returnLiquidity(_tknAddrs);\r\n\r\n        if (poolFeeAmt > 0) {\r\n            _transfer(payable(feeCollector), tokenContract, poolFeeAmt);\r\n            _transfer(payable(origin), tokenContract, originFeeAmt);\r\n        }\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emitFlashPayback(token, _amt, poolFeeAmt, getId, setId);\r\n        emitOriginFeeCollected(origin, token, _amt, originFeeAmt);\r\n    }\r\n}\r\n\r\ncontract LiquidityAccessMulti is LiquidityAccess {\r\n    /**\r\n     * @dev Access Multiple Token liquidity from InstaPool.\r\n     * @param tokens Array of token addresses.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amts Array of token amount.\r\n     * @param getId get token amounts at this IDs from `InstaMemory` Contract.\r\n     * @param setId set token amounts at this IDs in `InstaMemory` Contract.\r\n    */\r\n    function flashMultiBorrow(\r\n        address[] calldata tokens,\r\n        uint[] calldata amts,\r\n        uint[] calldata getId,\r\n        uint[] calldata setId\r\n    ) external payable {\r\n        uint _length = tokens.length;\r\n        uint[] memory _amts = new uint[](_length);\r\n        for (uint i = 0; i < _length; i++) {\r\n            _amts[i] = getUint(getId[i], amts[i]);\r\n        }\r\n\r\n        LiqudityInterface(getLiquidityAddress()).accessLiquidity(tokens, _amts);\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n            setUint(setId[i], _amts[i]);\r\n            emitFlashBorrow(tokens[i], _amts[i], getId[i], setId[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return Multiple token liquidity from InstaPool.\r\n     * @param tokens Array of token addresses.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param getId get token amounts at this IDs from `InstaMemory` Contract.\r\n     * @param setId set token amounts at this IDs in `InstaMemory` Contract.\r\n    */\r\n    function flashMultiPayback(address[] calldata tokens, uint[] calldata getId, uint[] calldata setId) external payable {\r\n        LiqudityInterface liquidityContract = LiqudityInterface(getLiquidityAddress());\r\n\r\n        uint _length = tokens.length;\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n            uint _amt = liquidityContract.borrowedToken(tokens[i]);\r\n            IERC20 tokenContract = IERC20(tokens[i]);\r\n            (address feeCollector, uint feeAmt) = calculateFeeAmt(tokenContract, _amt);\r\n\r\n            _transfer(payable(address(liquidityContract)), tokenContract, _amt);\r\n\r\n            if (feeAmt > 0) _transfer(payable(feeCollector), tokenContract, feeAmt);\r\n\r\n            setUint(setId[i], _amt);\r\n\r\n            emitFlashPayback(tokens[i], _amt, feeAmt, getId[i], setId[i]);\r\n        }\r\n\r\n        liquidityContract.returnLiquidity(tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Multiple token liquidity from InstaPool and Tranfer 20% of the Fee to Origin.\r\n     * @param tokens Array of token addresses.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param getId get token amounts at this IDs from `InstaMemory` Contract.\r\n     * @param setId set token amounts at this IDs in `InstaMemory` Contract.\r\n    */\r\n    function flashMultiPaybackOrigin(address origin, address[] calldata tokens, uint[] calldata getId, uint[] calldata setId) external payable {\r\n        LiqudityInterface liquidityContract = LiqudityInterface(getLiquidityAddress());\r\n\r\n        uint _length = tokens.length;\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n            uint _amt = liquidityContract.borrowedToken(tokens[i]);\r\n            IERC20 tokenContract = IERC20(tokens[i]);\r\n\r\n            (address feeCollector, uint poolFeeAmt, uint originFeeAmt) = calculateFeeAmtOrigin(tokenContract, _amt);\r\n\r\n           _transfer(payable(address(liquidityContract)), tokenContract, _amt);\r\n\r\n            if (poolFeeAmt > 0) {\r\n                _transfer(payable(feeCollector), tokenContract, poolFeeAmt);\r\n                _transfer(payable(origin), tokenContract, originFeeAmt);\r\n            }\r\n\r\n            setUint(setId[i], _amt);\r\n\r\n            emitFlashPayback(tokens[i], _amt, poolFeeAmt,  getId[i], setId[i]);\r\n            emitOriginFeeCollected(origin, tokens[i], _amt, originFeeAmt);\r\n        }\r\n        liquidityContract.returnLiquidity(tokens);\r\n    }\r\n}\r\n\r\ncontract ConnectInstaPool is LiquidityAccessMulti {\r\n    string public name = \"InstaPool-v2.1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDepositLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogFlashBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogFlashPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originFeeAmt\",\"type\":\"uint256\"}],\"name\":\"LogOriginFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"addFeeAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"flashBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"getId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"setId\",\"type\":\"uint256[]\"}],\"name\":\"flashMultiBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"getId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"setId\",\"type\":\"uint256[]\"}],\"name\":\"flashMultiPayback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"getId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"setId\",\"type\":\"uint256[]\"}],\"name\":\"flashMultiPaybackOrigin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"flashPayback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"flashPaybackOrigin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectInstaPool","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://396d0b4cde30ffc5f5529881c515eca6a48f55365dd91c3547c6f44b254ae1ce"}]}