{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract WorldChainToken {\r\n    using SafeMath for uint256;\r\n    \r\n    // 代币的公共变量：名称、代号、小数点后面的位数、代币发行总量\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18; // 官方建议18位\r\n    uint256 public totalSupply;\r\n    address public owner;\r\n    \r\n    address[] public ownerContracts;// 允许调用的智能合约\r\n\r\n    // 代币余额的数据\r\n    mapping (address => uint256) public balanceOf;\r\n    // 代付金额限制\r\n    // 比如map[A][B]=60，意思是用户B可以使用A的钱进行消费，使用上限是60，此条数据由A来设置，一般B可以使中间担保平台\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // 交易成功事件，会通知给客户端\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n     // 交易ETH成功事件，会通知给客户端\r\n    event TransferETH(address indexed from, address indexed to, uint256 value);\r\n\r\n    // 将销毁的代币量通知给客户端\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * 构造函数\r\n     *\r\n     * 初始化代币发行的参数\r\n     */\r\n    //3190000000,\"WorldChainToken\",\"WCT1\"\r\n    constructor(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) payable public  {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // 计算发行量\r\n        balanceOf[msg.sender] = totalSupply;                // 将发行的币给创建者\r\n        name = tokenName;                                   // 设置代币名称\r\n        symbol = tokenSymbol;                               // 设置代币符号\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    //查询当前的以以太余额\r\n\tfunction getETHBalance() view public returns(uint){\r\n\t\treturn address(this).balance;\r\n\t}     \r\n  \r\n\t//批量平分以太余额\r\n    function transferETH(address[] _tos) public onlyOwner returns (bool) {\r\n        require(_tos.length > 0);\r\n        require(address(this).balance > 0);\r\n        for(uint32 i=0;i<_tos.length;i++){\r\n           _tos[i].transfer(address(this).balance/_tos.length);\r\n           emit TransferETH(owner, _tos[i], address(this).balance/_tos.length);\r\n        }\r\n        return true;\r\n    }\r\n     \r\n    //直接转账指定数量 \r\n    function transferETH(address _to, uint256 _value) payable public onlyOwner returns (bool){\r\n        require(_value > 0);\r\n        require(address(this).balance >= _value);\r\n        require(_to != address(0));\r\n        _to.transfer(_value);\r\n        emit TransferETH(owner, _to, _value);\r\n        return true;\r\n    }\r\n     \r\n    //直接转账全部数量 \r\n    function transferETH(address _to) payable public onlyOwner returns (bool){\r\n        require(_to != address(0));\r\n        require(address(this).balance > 0);\r\n        _to.transfer(address(this).balance);\r\n        emit TransferETH(owner, _to, address(this).balance);\r\n        return true;\r\n    }\r\n    \r\n    //直接转账全部数量 \r\n    function transferETH() payable public onlyOwner returns (bool){\r\n        require(address(this).balance > 0);\r\n        owner.transfer(address(this).balance);\r\n        emit TransferETH(owner, owner, address(this).balance);\r\n        return true;\r\n    }\r\n    \r\n    // 接收以太 \r\n    function () payable public {\r\n            // 其他逻辑\r\n    }\r\n    \r\n    // 众筹\r\n    function funding() payable public returns (bool) {\r\n        require(msg.value <= balanceOf[owner]);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balanceOf[owner] = balanceOf[owner].sub(msg.value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(msg.value);\r\n        emit Transfer(owner, msg.sender, msg.value);\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function _contains() internal view returns (bool success) {\r\n        for(uint i = 0; i < ownerContracts.length; i++){\r\n            if(ownerContracts[i] == msg.sender){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function setOwnerContracts(address _adr) public onlyOwner {\r\n        if(_adr != 0x0){\r\n            ownerContracts.push(_adr);\r\n        }\r\n    }\r\n    \r\n     //修改管理帐号\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 内部转账，只能被本合约调用\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // 检测是否空地址\r\n        require(_to != 0x0);\r\n        // 检测余额是否充足\r\n        require(_value > 0);\r\n        require(balanceOf[_from] >= _value);\r\n        // 检测溢出\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        // 保存一个临时变量，用于最后检测值是否溢出\r\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n        // 出账\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        // 入账\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        // 检测值是否溢出，或者有数据计算错误\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * 代币转账\r\n     *\r\n     * 从自己的账户上给别人转账\r\n     *\r\n     * @param _to 转入账户\r\n     * @param _value 转账金额\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * 代币转账\r\n     *\r\n     * 从自己的账户上给别人转账\r\n     *\r\n     * @param _to 转入账户\r\n     * @param _value 转账金额\r\n     */\r\n    function transferTo(address _to, uint256 _value) public {\r\n        require(_contains());\r\n        _transfer(tx.origin, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * 从其他账户转账\r\n     *\r\n     * 从其他的账户上给别人转账\r\n     *\r\n     * @param _from 转出账户\r\n     * @param _to 转入账户\r\n     * @param _value 转账金额\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // 检查允许交易的金额\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 设置代付金额限制\r\n     *\r\n     * 允许消费者使用的代币金额\r\n     *\r\n     * @param _spender 允许代付的账号\r\n     * @param _value 允许代付的金额\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 设置代付金额限制并通知对方（合约）\r\n     *\r\n     * 设置代付金额限制\r\n     *\r\n     * @param _spender 允许代付的账号\r\n     * @param _value 允许代付的金额\r\n     * @param _extraData 回执数据\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 销毁自己的代币\r\n     *\r\n     * 从系统中销毁代币\r\n     *\r\n     * @param _value 销毁量\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // 检测余额是否充足\r\n        balanceOf[msg.sender] -= _value;            // 销毁代币\r\n        totalSupply -= _value;                      // 从发行的币中删除\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 销毁别人的代币\r\n     *\r\n     * 从系统中销毁代币\r\n     *\r\n     * @param _from 销毁的地址\r\n     * @param _value 销毁量\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // 检测余额是否充足\r\n        require(_value <= allowance[_from][msg.sender]);    // 检测代付额度\r\n        balanceOf[_from] -= _value;                         // 销毁代币\r\n        allowance[_from][msg.sender] -= _value;             // 销毁额度\r\n        totalSupply -= _value;                              // 从发行的币中删除\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * 批量转账\r\n     *\r\n     * 从自己的账户上给别人转账\r\n     *\r\n     * @param _to 转入账户\r\n     * @param _value 转账金额\r\n     */\r\n    function transferArray(address[] _to, uint256[] _value) public {\r\n        for(uint256 i = 0; i < _to.length; i++){\r\n            _transfer(msg.sender, _to[i], _value[i]);\r\n        }\r\n    }\r\n    \r\n    function test() public pure returns (uint) {\r\n        return 10;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"}],\"name\":\"transferETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transferArray\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"funding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"setOwnerContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"WorldChainToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000001406f40000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003424247000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034242470000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://51b1c175a102adbbfee6277234997e32bb3b611d8e470f3b0432d8c3ca607529"}]}