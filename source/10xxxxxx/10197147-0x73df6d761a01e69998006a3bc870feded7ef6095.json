{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeERC20.sol\r\n\r\n// File: ../../../../tmp/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\npragma experimental ABIEncoderV2;\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: ../../../../tmp/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: ../../../../tmp/openzeppelin-contracts/contracts/utils/Address.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    // function toPayable(address account) internal pure returns (address payable) {\r\n    //     return address(uint160(account));\r\n    // }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    // function sendValue(address payable recipient, uint256 amount) internal {\r\n    //     require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    //     // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    //     (bool success, ) = recipient.call.value(amount)(\"\");\r\n    //     require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    // }\r\n}\r\n\r\n// File: ../../../../tmp/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IRouter.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IRouter {\r\n    function f(uint id, bytes32 k) external view returns (address);\r\n    function defaultDataContract(uint id) external view returns (address);\r\n    function bondNr() external view returns (uint);\r\n    function setBondNr(uint _bondNr) external;\r\n\r\n    function setDefaultContract(uint id, address data) external;\r\n    function addField(uint id, bytes32 field, address data) external;\r\n}\r\n\r\n// File: contracts/StageDefine.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n    enum BondStage {\r\n        //无意义状态\r\n        DefaultStage,\r\n        //评级\r\n        RiskRating,\r\n        RiskRatingFail,\r\n        //募资\r\n        CrowdFunding,\r\n        CrowdFundingSuccess,\r\n        CrowdFundingFail,\r\n        UnRepay,//待还款\r\n        RepaySuccess,\r\n        Overdue,\r\n        //由清算导致的债务结清\r\n        DebtClosed\r\n    }\r\n\r\n    //状态标签\r\n    enum IssuerStage {\r\n        DefaultStage,\r\n\t\tUnWithdrawCrowd,\r\n        WithdrawCrowdSuccess,\r\n\t\tUnWithdrawPawn,\r\n        WithdrawPawnSuccess       \r\n    }\r\n\r\n// File: contracts/IBondData.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IBondData {\r\n    struct what {\r\n        address proposal;\r\n        uint256 weight;\r\n    }\r\n\r\n    struct prwhat {\r\n        address who;\r\n        address proposal;\r\n        uint256 reason;\r\n    }\r\n\r\n    struct Balance {\r\n        //发行者：\r\n        //amountGive: 质押的token数量，项目方代币\r\n        //amountGet: 募集的token数量，USDT，USDC\r\n\r\n        //投资者：\r\n        //amountGive: 投资的token数量，USDT，USDC\r\n        //amountGet: 债券凭证数量\r\n        uint256 amountGive;\r\n        uint256 amountGet;\r\n    }\r\n\r\n    function issuer() external view returns (address);\r\n\r\n    function collateralToken() external view returns (address);\r\n\r\n    function crowdToken() external view returns (address);\r\n\r\n    function getBorrowAmountGive() external view returns (uint256);\r\n\r\n\r\n\r\n    function getSupplyAmount(address who) external view returns (uint256);\r\n\r\n\r\n    function par() external view returns (uint256);\r\n\r\n    function mintBond(address who, uint256 amount) external;\r\n\r\n    function burnBond(address who, uint256 amount) external;\r\n\r\n\r\n    function transferableAmount() external view returns (uint256);\r\n\r\n    function debt() external view returns (uint256);\r\n\r\n    function actualBondIssuance() external view returns (uint256);\r\n\r\n    function couponRate() external view returns (uint256);\r\n\r\n    function depositMultiple() external view returns (uint256);\r\n\r\n    function discount() external view returns (uint256);\r\n\r\n\r\n    function voteExpired() external view returns (uint256);\r\n\r\n\r\n    function investExpired() external view returns (uint256);\r\n\r\n    function totalBondIssuance() external view returns (uint256);\r\n\r\n    function maturity() external view returns (uint256);\r\n\r\n    function config() external view returns (address);\r\n\r\n    function weightOf(address who) external view returns (uint256);\r\n\r\n    function totalWeight() external view returns (uint256);\r\n\r\n    function bondExpired() external view returns (uint256);\r\n\r\n    function interestBearingPeriod() external;\r\n\r\n\r\n    function bondStage() external view returns (uint256);\r\n\r\n    function issuerStage() external view returns (uint256);\r\n\r\n    function issueFee() external view returns (uint256);\r\n\r\n\r\n    function totalInterest() external view returns (uint256);\r\n\r\n    function gracePeriod() external view returns (uint256);\r\n\r\n    function liability() external view returns (uint256);\r\n\r\n    function remainInvestAmount() external view returns (uint256);\r\n\r\n    function supplyMap(address) external view returns (Balance memory);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function setPar(uint256) external;\r\n\r\n    function liquidateLine() external view returns (uint256);\r\n\r\n    function setBondParam(bytes32 k, uint256 v) external;\r\n\r\n    function setBondParamAddress(bytes32 k, address v) external;\r\n\r\n    function minIssueRatio() external view returns (uint256);\r\n\r\n    function partialLiquidateAmount() external view returns (uint256);\r\n\r\n    function votes(address who) external view returns (what memory);\r\n\r\n    function setVotes(address who, address proposal, uint256 amount) external;\r\n\r\n    function weights(address proposal) external view returns (uint256);\r\n\r\n    function setBondParamMapping(bytes32 name, address k, uint256 v) external;\r\n\r\n    function top() external view returns (address);\r\n\r\n\r\n    function voteLedger(address who) external view returns (uint256);\r\n\r\n    function totalWeights() external view returns (uint256);\r\n\r\n\r\n    function setPr(address who, address proposal, uint256 reason) external;\r\n\r\n    function pr() external view returns (prwhat memory);\r\n\r\n    function fee() external view returns (uint256);\r\n\r\n    function profits(address who) external view returns (uint256);\r\n\r\n\r\n\r\n    function totalProfits() external view returns (uint256);\r\n\r\n    function originLiability() external view returns (uint256);\r\n\r\n    function liquidating() external view returns (bool);\r\n    function setLiquidating(bool _liquidating) external;\r\n\r\n    function sysProfit() external view returns (uint256);\r\n    function totalFee() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/ReentrancyGuard.sol\r\n\r\n//https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: contracts/Vote.sol\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IPRA {\r\n    function raters(address who) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IConfig {\r\n    function ratingCandidates(address proposal) external view returns (bool);\r\n\r\n    function depositDuration() external view returns (uint256);\r\n\r\n    function professionalRatingWeightRatio() external view returns (uint256);\r\n\r\n    function communityRatingWeightRatio() external view returns (uint256);\r\n\r\n    function investDuration() external view returns (uint256);\r\n\r\n    function communityRatingLine() external view returns (uint256);\r\n}\r\n\r\n\r\ninterface IACL {\r\n    function accessible(address sender, address to, bytes4 sig)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n\r\ninterface IRating {\r\n    function risk() external view returns (uint256);\r\n    function fine() external view returns (bool);\r\n}\r\n\r\n\r\ncontract Vote is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event MonitorEvent(\r\n        address indexed who,\r\n        address indexed bond,\r\n        bytes32 indexed funcName,\r\n        bytes\r\n    );\r\n\r\n    function MonitorEventCallback(address who, address bond, bytes32 funcName, bytes calldata payload) external auth {\r\n        emit MonitorEvent(who, bond, funcName, payload);\r\n    }\r\n\r\n    address public router;\r\n    address public config;\r\n    address public ACL;\r\n    address public PRA;\r\n\r\n    modifier auth {\r\n        require(\r\n            IACL(ACL).accessible(msg.sender, address(this), msg.sig),\r\n            \"Vote: access unauthorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _ACL, address _router, address _config, address _PRA)\r\n        public\r\n    {\r\n        router = _router;\r\n        config = _config;\r\n        ACL = _ACL;\r\n        PRA = _PRA;\r\n    }\r\n\r\n    function setACL(\r\n        address _ACL) external {\r\n        require(msg.sender == ACL, \"require ACL\");\r\n        ACL = _ACL;\r\n    }\r\n\r\n    //专业评级时调用\r\n    function prcast(uint256 id, address proposal, uint256 reason) external nonReentrant {\r\n        IBondData data = IBondData(IRouter(router).defaultDataContract(id));\r\n        require(data.voteExpired() > now, \"vote is expired\");\r\n        require(\r\n            IPRA(PRA).raters(msg.sender),\r\n            \"sender is not a professional rater\"\r\n        );\r\n        IBondData.prwhat memory pr = data.pr();\r\n        require(pr.proposal == address(0), \"already professional rating\");\r\n        IBondData.what memory _what = data.votes(msg.sender);\r\n        require(_what.proposal == address(0), \"already community rating\");\r\n        require(data.issuer() != msg.sender, \"issuer can't vote for self bond\");\r\n        require(\r\n            IConfig(config).ratingCandidates(proposal),\r\n            \"proposal is not permissive\"\r\n        );\r\n        data.setPr(msg.sender, proposal, reason);\r\n        emit MonitorEvent(\r\n            msg.sender,\r\n            address(data),\r\n            \"prcast\",\r\n            abi.encodePacked(proposal)\r\n        );\r\n    }\r\n\r\n    //仅能被 data.vote 回调, 社区投票时调用\r\n    function cast(uint256 id, address who, address proposal, uint256 amount)\r\n        external\r\n        auth\r\n    {\r\n        IBondData data = IBondData(IRouter(router).defaultDataContract(id));\r\n        require(data.voteExpired() > now, \"vote is expired\");\r\n        require(!IPRA(PRA).raters(who), \"sender is a professional rater\");\r\n        require(data.issuer() != who, \"issuer can't vote for self bond\");\r\n        require(\r\n            IConfig(config).ratingCandidates(proposal),\r\n            \"proposal is not permissive\"\r\n        );\r\n\r\n        IBondData.what memory what = data.votes(who);\r\n\r\n        address p = what.proposal;\r\n        uint256 w = what.weight;\r\n\r\n        //多次投票但是本次投票的提案与前次投票的提案不同\r\n        if (p != address(0) && p != proposal) {\r\n\r\n            data.setBondParamMapping(\"weights\", p, data.weights(p).sub(w));\r\n            data.setBondParamMapping(\"weights\", proposal, data.weights(proposal).add(w));\r\n        }\r\n\r\n        data.setVotes(who, proposal, w.add(amount));\r\n\r\n        data.setBondParamMapping(\"weights\", proposal, data.weights(proposal).add(amount));\r\n        data.setBondParam(\"totalWeights\", data.totalWeights().add(amount));\r\n\r\n        //同票数情况下后投出来的为胜\r\n        if (data.weights(proposal) >= data.weights(data.top())) {\r\n            // data.setTop(proposal);\r\n            data.setBondParamAddress(\"top\", proposal);\r\n        }\r\n    }\r\n\r\n    //仅能被 data.take 回调\r\n    function take(uint256 id, address who) external auth returns (uint256) {\r\n        IBondData data = IBondData(IRouter(router).defaultDataContract(id));\r\n        require(now > data.voteExpired(), \"vote is expired\");\r\n        require(data.top() != address(0), \"vote is not winner\");\r\n        uint256 amount = data.voteLedger(who);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function rating(uint256 id) external {\r\n        IBondData data = IBondData(IRouter(router).defaultDataContract(id));\r\n        require(now > data.voteExpired(), \"vote unexpired\");\r\n\r\n        uint256 _bondStage = data.bondStage();\r\n        require(\r\n            _bondStage == uint256(BondStage.RiskRating),\r\n            \"already rating finished\"\r\n        );\r\n\r\n        uint256 totalWeights = data.totalWeights();\r\n        IBondData.prwhat memory pr = data.pr();\r\n\r\n        if (\r\n            totalWeights >= IConfig(config).communityRatingLine() &&\r\n            pr.proposal != address(0)\r\n        ) {\r\n            address top = data.top();\r\n            uint256 p = IConfig(config).professionalRatingWeightRatio(); //40%\r\n            uint256 c = IConfig(config).communityRatingWeightRatio(); //60%\r\n            uint256 pr_weights = totalWeights.mul(p).div(c);\r\n\r\n            if (top != pr.proposal) {\r\n                uint256 pr_proposal_weights = data.weights(pr.proposal).add(\r\n                    pr_weights\r\n                );\r\n\r\n                if (data.weights(top) < pr_proposal_weights) {\r\n                    //data.setTop(pr.proposal);\r\n                    data.setBondParamAddress(\"top\", pr.proposal);\r\n                }\r\n\r\n                //社区评级结果与专业评级的投票选项不同但权重相等时, 以风险低的为准\r\n                if (data.weights(top) == pr_proposal_weights) {\r\n                    data.setBondParamAddress(\"top\", \r\n                        IRating(top).risk() < IRating(pr.proposal).risk()\r\n                            ? top\r\n                            : pr.proposal\r\n                    );\r\n                }\r\n            }\r\n            if(IRating(data.top()).fine()) {\r\n                data.setBondParam(\"bondStage\", uint256(BondStage.CrowdFunding));\r\n                data.setBondParam(\"investExpired\", now + IConfig(config).investDuration());\r\n                data.setBondParam(\"bondExpired\", now + IConfig(config).investDuration() + data.maturity());\r\n            } else {\r\n                data.setBondParam(\"bondStage\", uint256(BondStage.RiskRatingFail));\r\n                data.setBondParam(\"issuerStage\", uint256(IssuerStage.UnWithdrawPawn));\r\n            }\r\n        } else {\r\n            data.setBondParam(\"bondStage\", uint256(BondStage.RiskRatingFail));\r\n            data.setBondParam(\"issuerStage\", uint256(IssuerStage.UnWithdrawPawn));\r\n        }\r\n\r\n        emit MonitorEvent(\r\n            msg.sender,\r\n            address(data),\r\n            \"rating\",\r\n            abi.encodePacked(data.top(), data.weights(data.top()))\r\n        );\r\n    }\r\n\r\n    //取回后页面获得手续费保留原值不变\r\n    function profitOf(uint256 id, address who) public view returns (uint256) {\r\n        IBondData data = IBondData(IRouter(router).defaultDataContract(id));\r\n        uint256 _bondStage = data.bondStage();\r\n        if (\r\n            _bondStage == uint256(BondStage.RepaySuccess) ||\r\n            _bondStage == uint256(BondStage.DebtClosed)\r\n        ) {\r\n            IBondData.what memory what = data.votes(who);\r\n            IBondData.prwhat memory pr = data.pr();\r\n\r\n            uint256 p = IConfig(config).professionalRatingWeightRatio();\r\n            uint256 c = IConfig(config).communityRatingWeightRatio();\r\n\r\n            uint256 _fee = data.fee();\r\n            uint256 _profit = 0;\r\n\r\n            if (pr.who != who) {\r\n                if(what.proposal == address(0)) {\r\n                    return 0;\r\n                }\r\n                //以社区评级人身份投过票\r\n                //fee * c (0.6 * 1e18) * weights/totalweights;\r\n                _profit = _fee.mul(c).mul(what.weight).div(\r\n                    data.totalWeights()\r\n                );\r\n            } else {\r\n                //who对本债券以专业评级人投过票\r\n                //fee * p (0.4 * 1e18);\r\n                _profit = _fee.mul(p);\r\n            }\r\n\r\n            return _profit.div(1e18);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    //取回评级收益,被bondData调用\r\n    function profit(uint256 id, address who) external auth returns (uint256) {\r\n        IBondData data = IBondData(IRouter(router).defaultDataContract(id));\r\n        uint256 _bondStage = data.bondStage();\r\n        require(\r\n            _bondStage == uint256(BondStage.RepaySuccess) ||\r\n                _bondStage == uint256(BondStage.DebtClosed),\r\n            \"bond is unrepay or unliquidate\"\r\n        );\r\n        require(data.profits(who) == 0, \"voting profit withdrawed\");\r\n        IBondData.prwhat memory pr = data.pr();\r\n        IBondData.what memory what = data.votes(who);\r\n        require(what.proposal != address(0) || pr.who == who, \"user is not rating vote\");\r\n        uint256 _profit = profitOf(id, who);\r\n        data.setBondParamMapping(\"profits\", who, _profit);\r\n        data.setBondParam(\"totalProfits\", data.totalProfits().add(_profit));\r\n\r\n        return _profit;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ACL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PRA\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bond\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"funcName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"MonitorEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bond\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"funcName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"MonitorEventCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"prcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"profit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"profitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"rating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ACL\",\"type\":\"address\"}],\"name\":\"setACL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vote","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000063ad95a0fdc69269960a257c7e9bfa3629ac4dd000000000000000000000000fcef47934bec27b78f8c061d9a78cdaf0b19600100000000000000000000000076f4a2add5c81a739727a2bcaa1343f046d44d31000000000000000000000000dd686e3c88874b9d7e6e18c06de55355b2038152","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0d97417880d5db2a30bdd9a031052cabc99a75b7f5d262a38ba15d02e4dbd25c"}]}