{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n/*\r\n * @title: SafeMath\r\n * @dev: Helper contract functions to arithmatic operations safely.\r\n */\r\ncontract SafeMath {\r\n    function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function Add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/*\r\n * @title: Token\r\n * @dev: Interface contract for ERC20 tokens\r\n */\r\ncontract Token {\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint public _totalSupply;\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract USDT is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public;\r\n    function approve(address spender, uint256 value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/*\r\n * @title: Staking\r\n */\r\ncontract KaiStarter is SafeMath {\r\n    // _kaiAddress: KAI ERC20 contract address\r\n    // msg.sender: owner\r\n    constructor(uint256 _contributeStartTime, uint256 _productReleasesTime, uint256 _lockDays) public {\r\n        owner = msg.sender;\r\n        isRevocable = false;\r\n        isEnded = false;\r\n        contributeStartTime = _contributeStartTime;\r\n        productReleasesTime = _productReleasesTime;\r\n        lockDays = _lockDays;\r\n    }\r\n\r\n    address public owner;\r\n    address constant public kaiAddress = 0xD9Ec3ff1f8be459Bb9369b4E79e9Ebcf7141C093;\r\n    address constant public usdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    uint256 public currentCap;\r\n    uint256 public totalBackers;\r\n    address[] public listBackers;\r\n    uint256[] public contributedAmount;\r\n    uint256 public contributeStartTime;\r\n    uint256 public productReleasesTime;\r\n    uint256 public lockDays;\r\n    uint256 public maxContributionEachBacker = 500000000000000000000000; //500000 KAI\r\n    uint256 public hardCap = 7500000000000000000000000; //7500000 KAI\r\n    uint256 public minContributionEachBacker = 1000000000000000000000; //1000 KAI\r\n    /* isRevocable is true if the campaign does not raise enough fund after the endTime passed, \r\n     * and contributors can withdraw their fund; \r\n     * otherwise it's false\r\n     */\r\n    bool public isRevocable;\r\n    bool public isEnded; // isEnded is true when the campaign ends\r\n    uint256 public totalBonusUSDT;\r\n    mapping (address => bool) isWithdrawBonus;\r\n    mapping (address => bool) isWithdrawContribution;\r\n\r\n    \r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // check if this backer has contributed to the compaign or not yet\r\n    function existBacker(address backer) view private returns (uint256) {\r\n        for (uint i; i< listBackers.length;i++){\r\n          if (listBackers[i] == backer)\r\n            return i+1;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    // owner sets global variables if the campaign fails\r\n    function setRevocable() public onlyOwner {\r\n        isRevocable = true;\r\n        isEnded = true;\r\n    }\r\n    \r\n    // owner sets global variables the campaign ends\r\n    function setEnded() public onlyOwner {\r\n        isEnded = true;\r\n    }\r\n    \r\n    // backers contribute KAI to the campaign\r\n    function contributeKAI(uint256 amount) public {\r\n        require(now > contributeStartTime, 'Contribute time not comming');\r\n        require(isEnded != true, 'Campaign ended');\r\n        require(amount <= maxContributionEachBacker, 'Amount must be equal or smaller than 500000 KAI');\r\n        require(amount >= minContributionEachBacker, 'Amount must be equal or greater than 1000 KAI');\r\n        require(Add(amount, currentCap) <= hardCap, 'Exceed limit total cap');\r\n        require(Token(kaiAddress).transferFrom(msg.sender, address(this), amount));\r\n        \r\n        uint256 indexBacker = existBacker(msg.sender);\r\n        if (indexBacker != 0) {\r\n            contributedAmount[indexBacker-1] += amount;\r\n            require(contributedAmount[indexBacker-1] <= maxContributionEachBacker);\r\n            \r\n        } else {\r\n            listBackers.push(msg.sender);\r\n            contributedAmount.push(amount);\r\n            totalBackers += 1;\r\n        }\r\n        \r\n        currentCap = Add(currentCap, amount);\r\n    }\r\n\r\n    // Backers withdraw KAI to their personal addresses\r\n    function withdrawKAI() public {\r\n        if (isRevocable != true) {\r\n            require((contributeStartTime + lockDays * 1 days) < now, \"Locking period\"); // ensure lock time is passeed\r\n        }\r\n        require(existBacker(msg.sender) != 0, \"The backer not exist \");\r\n        require(isWithdrawContribution[msg.sender] == false, \"The backer withdraw only once\"); //ensure the backer withdraw only once\r\n        \r\n        uint256 indexBacker = existBacker(msg.sender);\r\n        uint256 amount = contributedAmount[indexBacker-1];\r\n        require(Token(kaiAddress).transfer(msg.sender, amount));\r\n        isWithdrawContribution[msg.sender] = true;\r\n    }\r\n    \r\n    // Backers withdraw their distributed revenue\r\n    function withdrawBonusUSDT() public {\r\n        require((productReleasesTime + lockDays * 1 days) < now, \"Locking period\"); // ensure lock time is passeed\r\n        require(existBacker(msg.sender) != 0, \"The backer does not exist \");\r\n        require(isWithdrawBonus[msg.sender] == false, \"The backer withdraw only once\"); // ensure the backer withdraw only once\r\n        \r\n        uint256 bonus = calculateBonus(msg.sender);\r\n        USDT(usdtAddress).transfer(msg.sender, bonus);\r\n        isWithdrawBonus[msg.sender] = true;\r\n        \r\n    }\r\n    \r\n    function calculateBonus(address backerAddr) private returns (uint256) {\r\n        uint256 indexBacker = existBacker(backerAddr);\r\n        uint256 amount = contributedAmount[indexBacker-1];\r\n        uint256 bonus = Mul(amount, totalBonusUSDT) / currentCap;\r\n        return bonus;\r\n    }\r\n   \r\n     // owner contribute KAI to the campaign\r\n    function fillRemaningKAI() public onlyOwner {\r\n        uint256 amount = Sub(hardCap, currentCap);\r\n        require(Add(amount, currentCap) == hardCap, 'Exceed limit total cap');\r\n        require(Token(kaiAddress).transferFrom(msg.sender, address(this), amount));\r\n        \r\n        currentCap = Add(currentCap, amount);\r\n    }\r\n    \r\n    function setContributeStartTime(uint256 _contributeStartTime) public onlyOwner {\r\n        contributeStartTime = _contributeStartTime;\r\n    }\r\n   \r\n    function setProductReleasesTime(uint256 _productReleasesTime) public onlyOwner {\r\n        productReleasesTime = _productReleasesTime;\r\n    }\r\n    \r\n    function setLockDays(uint256 _lockDays) public onlyOwner {\r\n        lockDays = _lockDays;\r\n    }\r\n    \r\n    function setMaxContributionEachBacker(uint256 _maxContributionEachBacker) public onlyOwner {\r\n        maxContributionEachBacker = _maxContributionEachBacker;\r\n    }\r\n    \r\n    function setTotalBonusUSDT(uint256 _totalBonusUSDT) public onlyOwner {\r\n        require(USDT(usdtAddress).balanceOf(address(this)) >= _totalBonusUSDT);\r\n\r\n        totalBonusUSDT = _totalBonusUSDT;\r\n   }\r\n    \r\n    function getMyContribution(address backer) public view returns (uint256) {\r\n        require(existBacker(backer) != 0);\r\n        \r\n        uint256 indexBacker = existBacker(backer);\r\n        uint256 amount = contributedAmount[indexBacker-1];\r\n        return amount;\r\n    }\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return now;\r\n    }\r\n    \r\n    function emergencyWithdrawalETH(uint256 amount) public onlyOwner {\r\n        require(msg.sender.send(amount));\r\n    }\r\n    \r\n    function emergencyWithdrawalKAI(uint256 amount) public onlyOwner {\r\n        require (now > (contributeStartTime + 32 * 1 weeks)); // after 32 weeks, owner can withdraw KAI\r\n        Token(kaiAddress).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function emergencyWithdrawalUSDT(uint256 amount) public onlyOwner {\r\n        USDT(usdtAddress).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    // @notice Will receive any eth sent to the contract\r\n    function () external payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"setEnded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listBackers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributeStartTime\",\"type\":\"uint256\"}],\"name\":\"setContributeStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalBonusUSDT\",\"type\":\"uint256\"}],\"name\":\"setTotalBonusUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setRevocable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRevocable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"backer\",\"type\":\"address\"}],\"name\":\"getMyContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fillRemaningKAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBackers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBonusUSDT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalKAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContributionEachBacker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"productReleasesTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawKAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockDays\",\"type\":\"uint256\"}],\"name\":\"setLockDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kaiAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBonusUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContributionEachBacker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_productReleasesTime\",\"type\":\"uint256\"}],\"name\":\"setProductReleasesTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contributeKAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxContributionEachBacker\",\"type\":\"uint256\"}],\"name\":\"setMaxContributionEachBacker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contributeStartTime\",\"type\":\"uint256\"},{\"name\":\"_productReleasesTime\",\"type\":\"uint256\"},{\"name\":\"_lockDays\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"KaiStarter","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005f75c4c0000000000000000000000000000000000000000000000000000000005ff1b1c0000000000000000000000000000000000000000000000000000000000000005d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e1faaa58c0895a488976f4ef7b34588efc0b9567975c7bf1f6d48ed0a90da488"}]}