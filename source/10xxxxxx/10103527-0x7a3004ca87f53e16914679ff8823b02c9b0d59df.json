{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);\r\n}\r\n\r\ninterface IRAYStorage {\r\n    function getContractAddress(bytes32 contractId) external view returns (address);\r\n    function getPrincipalAddress(bytes32 portfolioId) external view returns (address);\r\n}\r\n\r\ninterface IRAYPortfolioManager {\r\n    function mint(bytes32 portfolioId, address beneficiary, uint256 value) external payable returns(bytes32);\r\n    function deposit(bytes32 tokenId, uint256 value) external payable;\r\n    function redeem(bytes32 tokenId, uint256 valueToWithdraw, address originalCaller) external returns(uint256);\r\n}\r\n\r\ninterface IRAYNAVCalculator {\r\n    function getTokenValue(bytes32 portfolioId, bytes32 tokenId) external view returns(uint256, uint256);\r\n}\r\n\r\ncontract RAYDaiCompoundTest is IERC721Receiver {\r\n    bytes32 internal constant RAY_PORTFOLIO_MANAGER_CONTRACT = keccak256(\"PortfolioManagerContract\");\r\n    bytes32 internal constant RAY_NAV_CALCULATOR_CONTRACT = keccak256(\"NAVCalculatorContract\");\r\n    bytes32 internal constant RAY_TOKEN_CONTRACT = keccak256(\"RAYTokenContract\");\r\n    bytes32 public constant   RAY_PORTFOLIO_ID = keccak256(\"DaiCompound\");\r\n\r\n    IRAYStorage public rayStorage;\r\n    bytes32 public rayTokenId;\r\n\r\n    constructor(address rayStorageAddress) public {\r\n        rayStorage = IRAYStorage(rayStorageAddress);\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public returns (bytes4) {\r\n        address rayTokenContract = rayStorage.getContractAddress(RAY_TOKEN_CONTRACT);\r\n        require(msg.sender == rayTokenContract, \"Only accept RAY Token transfers\");\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function deposit(uint256 amount) public {\r\n        IERC20 token = IERC20(rayStorage.getPrincipalAddress(RAY_PORTFOLIO_ID));\r\n        IRAYPortfolioManager pm = rayPortfolioManager();\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        token.approve(address(pm), amount);\r\n        if (rayTokenId == 0x0) {\r\n            rayTokenId = pm.mint(RAY_PORTFOLIO_ID, address(this), amount);\r\n        } else {\r\n            pm.deposit(rayTokenId, amount);\r\n        }\r\n    }\r\n    \r\n    function withdraw(uint256 amount) public {\r\n        require(rayTokenId != 0x0, \"RAY token not minted\");\r\n        IERC20 token = IERC20(rayStorage.getPrincipalAddress(RAY_PORTFOLIO_ID));\r\n        IRAYPortfolioManager pm = rayPortfolioManager();\r\n        uint256 withdrawn = pm.redeem(rayTokenId, amount, address(0));\r\n        token.transfer(msg.sender, withdrawn);\r\n    }\r\n    \r\n    function withdrawHalf() public {\r\n        uint256 amount = balance()/2;\r\n        withdraw(amount);\r\n    }\r\n\r\n    function balance() public view returns(uint256){\r\n        if (rayTokenId == 0x0) return 0;\r\n        (uint256 amount,) = rayNAVCalculator().getTokenValue(RAY_PORTFOLIO_ID, rayTokenId);\r\n        return amount;\r\n    }\r\n\r\n    function rayPortfolioManager() private view returns(IRAYPortfolioManager){\r\n        return IRAYPortfolioManager(rayStorage.getContractAddress(RAY_PORTFOLIO_MANAGER_CONTRACT));\r\n    }\r\n\r\n    function rayNAVCalculator() private view returns(IRAYNAVCalculator){\r\n        return IRAYNAVCalculator(rayStorage.getContractAddress(RAY_NAV_CALCULATOR_CONTRACT));\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rayStorageAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"RAY_PORTFOLIO_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rayStorage\",\"outputs\":[{\"internalType\":\"contract IRAYStorage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rayTokenId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawHalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RAYDaiCompoundTest","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000446711e5ed3013743e40342a0462fbdc437cd43f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e119b4e54cba63f31cfad751996a4d32bff6fbadf66abc8b37c5485be4e56271"}]}