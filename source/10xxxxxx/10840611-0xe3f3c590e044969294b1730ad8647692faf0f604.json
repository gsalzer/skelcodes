{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: contracts/interfaces/IAMB.sol\n\npragma solidity 0.4.24;\n\ninterface IAMB {\n    function messageSender() external view returns (address);\n    function maxGasPerTx() external view returns (uint256);\n    function transactionHash() external view returns (bytes32);\n    function messageId() external view returns (bytes32);\n    function messageSourceChainId() external view returns (bytes32);\n    function messageCallStatus(bytes32 _messageId) external view returns (bool);\n    function failedMessageDataHash(bytes32 _messageId) external view returns (bytes32);\n    function failedMessageReceiver(bytes32 _messageId) external view returns (address);\n    function failedMessageSender(bytes32 _messageId) external view returns (address);\n    function requireToPassMessage(address _contract, bytes _data, uint256 _gas) external returns (bytes32);\n    function sourceChainId() external view returns (uint256);\n    function destinationChainId() external view returns (uint256);\n}\n\n// File: contracts/upgradeability/EternalStorage.sol\n\npragma solidity 0.4.24;\n\n/**\n * @title EternalStorage\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\n */\ncontract EternalStorage {\n    mapping(bytes32 => uint256) internal uintStorage;\n    mapping(bytes32 => string) internal stringStorage;\n    mapping(bytes32 => address) internal addressStorage;\n    mapping(bytes32 => bytes) internal bytesStorage;\n    mapping(bytes32 => bool) internal boolStorage;\n    mapping(bytes32 => int256) internal intStorage;\n\n}\n\n// File: contracts/interfaces/IUpgradeabilityOwnerStorage.sol\n\npragma solidity 0.4.24;\n\ninterface IUpgradeabilityOwnerStorage {\n    function upgradeabilityOwner() external view returns (address);\n}\n\n// File: contracts/upgradeable_contracts/Ownable.sol\n\npragma solidity 0.4.24;\n\n\n\n/**\n * @title Ownable\n * @dev This contract has an owner address providing basic authorization control\n */\ncontract Ownable is EternalStorage {\n    bytes4 internal constant UPGRADEABILITY_OWNER = 0x6fde8202; // upgradeabilityOwner()\n\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param previousOwner representing the address of the previous owner\n    * @param newOwner representing the address of the new owner\n    */\n    event OwnershipTransferred(address previousOwner, address newOwner);\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner());\n        /* solcov ignore next */\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any account other than contract itself or owner.\n    */\n    modifier onlyRelevantSender() {\n        // proxy owner if used through proxy, address(0) otherwise\n        require(\n            !address(this).call(abi.encodeWithSelector(UPGRADEABILITY_OWNER)) || // covers usage without calling through storage proxy\n                msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner() || // covers usage through regular proxy calls\n                msg.sender == address(this) // covers calls through upgradeAndCall proxy method\n        );\n        /* solcov ignore next */\n        _;\n    }\n\n    bytes32 internal constant OWNER = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0; // keccak256(abi.encodePacked(\"owner\"))\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function owner() public view returns (address) {\n        return addressStorage[OWNER];\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner the address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0));\n        setOwner(newOwner);\n    }\n\n    /**\n    * @dev Sets a new owner address\n    */\n    function setOwner(address newOwner) internal {\n        emit OwnershipTransferred(owner(), newOwner);\n        addressStorage[OWNER] = newOwner;\n    }\n}\n\n// File: contracts/upgradeable_contracts/Initializable.sol\n\npragma solidity 0.4.24;\n\n\ncontract Initializable is EternalStorage {\n    bytes32 internal constant INITIALIZED = 0x0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba; // keccak256(abi.encodePacked(\"isInitialized\"))\n\n    function setInitialize() internal {\n        boolStorage[INITIALIZED] = true;\n    }\n\n    function isInitialized() public view returns (bool) {\n        return boolStorage[INITIALIZED];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/upgradeable_contracts/DecimalShiftBridge.sol\n\npragma solidity 0.4.24;\n\n\n\ncontract DecimalShiftBridge is EternalStorage {\n    using SafeMath for uint256;\n\n    bytes32 internal constant DECIMAL_SHIFT = 0x1e8ecaafaddea96ed9ac6d2642dcdfe1bebe58a930b1085842d8fc122b371ee5; // keccak256(abi.encodePacked(\"decimalShift\"))\n\n    /**\n    * @dev Internal function for setting the decimal shift for bridge operations.\n    * Decimal shift can be positive, negative, or equal to zero.\n    * It has the following meaning: N tokens in the foreign chain are equivalent to N * pow(10, shift) tokens on the home side.\n    * @param _shift new value of decimal shift.\n    */\n    function _setDecimalShift(int256 _shift) internal {\n        // since 1 wei * 10**77 > 2**255, it does not make any sense to use higher values\n        require(_shift > -77 && _shift < 77);\n        uintStorage[DECIMAL_SHIFT] = uint256(_shift);\n    }\n\n    /**\n    * @dev Returns the value of foreign-to-home decimal shift.\n    * @return decimal shift.\n    */\n    function decimalShift() public view returns (int256) {\n        return int256(uintStorage[DECIMAL_SHIFT]);\n    }\n\n    /**\n    * @dev Converts the amount of home tokens into the equivalent amount of foreign tokens.\n    * @param _value amount of home tokens.\n    * @return equivalent amount of foreign tokens.\n    */\n    function _unshiftValue(uint256 _value) internal view returns (uint256) {\n        return _shiftUint(_value, -decimalShift());\n    }\n\n    /**\n    * @dev Converts the amount of foreign tokens into the equivalent amount of home tokens.\n    * @param _value amount of foreign tokens.\n    * @return equivalent amount of home tokens.\n    */\n    function _shiftValue(uint256 _value) internal view returns (uint256) {\n        return _shiftUint(_value, decimalShift());\n    }\n\n    /**\n    * @dev Calculates _value * pow(10, _shift).\n    * @param _value amount of tokens.\n    * @param _shift decimal shift to apply.\n    * @return shifted value.\n    */\n    function _shiftUint(uint256 _value, int256 _shift) private pure returns (uint256) {\n        if (_shift == 0) {\n            return _value;\n        }\n        if (_shift > 0) {\n            return _value.mul(10**uint256(_shift));\n        }\n        return _value.div(10**uint256(-_shift));\n    }\n}\n\n// File: contracts/upgradeable_contracts/BasicTokenBridge.sol\n\npragma solidity 0.4.24;\n\n\n\n\n\ncontract BasicTokenBridge is EternalStorage, Ownable, DecimalShiftBridge {\n    using SafeMath for uint256;\n\n    event DailyLimitChanged(uint256 newLimit);\n    event ExecutionDailyLimitChanged(uint256 newLimit);\n\n    bytes32 internal constant MIN_PER_TX = 0xbbb088c505d18e049d114c7c91f11724e69c55ad6c5397e2b929e68b41fa05d1; // keccak256(abi.encodePacked(\"minPerTx\"))\n    bytes32 internal constant MAX_PER_TX = 0x0f8803acad17c63ee38bf2de71e1888bc7a079a6f73658e274b08018bea4e29c; // keccak256(abi.encodePacked(\"maxPerTx\"))\n    bytes32 internal constant DAILY_LIMIT = 0x4a6a899679f26b73530d8cf1001e83b6f7702e04b6fdb98f3c62dc7e47e041a5; // keccak256(abi.encodePacked(\"dailyLimit\"))\n    bytes32 internal constant EXECUTION_MAX_PER_TX = 0xc0ed44c192c86d1cc1ba51340b032c2766b4a2b0041031de13c46dd7104888d5; // keccak256(abi.encodePacked(\"executionMaxPerTx\"))\n    bytes32 internal constant EXECUTION_DAILY_LIMIT = 0x21dbcab260e413c20dc13c28b7db95e2b423d1135f42bb8b7d5214a92270d237; // keccak256(abi.encodePacked(\"executionDailyLimit\"))\n\n    function totalSpentPerDay(uint256 _day) public view returns (uint256) {\n        return uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))];\n    }\n\n    function totalExecutedPerDay(uint256 _day) public view returns (uint256) {\n        return uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))];\n    }\n\n    function dailyLimit() public view returns (uint256) {\n        return uintStorage[DAILY_LIMIT];\n    }\n\n    function executionDailyLimit() public view returns (uint256) {\n        return uintStorage[EXECUTION_DAILY_LIMIT];\n    }\n\n    function maxPerTx() public view returns (uint256) {\n        return uintStorage[MAX_PER_TX];\n    }\n\n    function executionMaxPerTx() public view returns (uint256) {\n        return uintStorage[EXECUTION_MAX_PER_TX];\n    }\n\n    function minPerTx() public view returns (uint256) {\n        return uintStorage[MIN_PER_TX];\n    }\n\n    function withinLimit(uint256 _amount) public view returns (bool) {\n        uint256 nextLimit = totalSpentPerDay(getCurrentDay()).add(_amount);\n        return dailyLimit() >= nextLimit && _amount <= maxPerTx() && _amount >= minPerTx();\n    }\n\n    function withinExecutionLimit(uint256 _amount) public view returns (bool) {\n        uint256 nextLimit = totalExecutedPerDay(getCurrentDay()).add(_amount);\n        return executionDailyLimit() >= nextLimit && _amount <= executionMaxPerTx();\n    }\n\n    function getCurrentDay() public view returns (uint256) {\n        // solhint-disable-next-line not-rely-on-time\n        return now / 1 days;\n    }\n\n    function addTotalSpentPerDay(uint256 _day, uint256 _value) internal {\n        uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))] = totalSpentPerDay(_day).add(_value);\n    }\n\n    function addTotalExecutedPerDay(uint256 _day, uint256 _value) internal {\n        uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))] = totalExecutedPerDay(_day).add(_value);\n    }\n\n    function setDailyLimit(uint256 _dailyLimit) external onlyOwner {\n        require(_dailyLimit > maxPerTx() || _dailyLimit == 0);\n        uintStorage[DAILY_LIMIT] = _dailyLimit;\n        emit DailyLimitChanged(_dailyLimit);\n    }\n\n    function setExecutionDailyLimit(uint256 _dailyLimit) external onlyOwner {\n        require(_dailyLimit > executionMaxPerTx() || _dailyLimit == 0);\n        uintStorage[EXECUTION_DAILY_LIMIT] = _dailyLimit;\n        emit ExecutionDailyLimitChanged(_dailyLimit);\n    }\n\n    function setExecutionMaxPerTx(uint256 _maxPerTx) external onlyOwner {\n        require(_maxPerTx < executionDailyLimit());\n        uintStorage[EXECUTION_MAX_PER_TX] = _maxPerTx;\n    }\n\n    function setMaxPerTx(uint256 _maxPerTx) external onlyOwner {\n        require(_maxPerTx == 0 || (_maxPerTx > minPerTx() && _maxPerTx < dailyLimit()));\n        uintStorage[MAX_PER_TX] = _maxPerTx;\n    }\n\n    function setMinPerTx(uint256 _minPerTx) external onlyOwner {\n        require(_minPerTx > 0 && _minPerTx < dailyLimit() && _minPerTx < maxPerTx());\n        uintStorage[MIN_PER_TX] = _minPerTx;\n    }\n\n    /**\n    * @dev Retrieves maximum available bridge amount per one transaction taking into account maxPerTx() and dailyLimit() parameters.\n    * @return minimum of maxPerTx parameter and remaining daily quota.\n    */\n    function maxAvailablePerTx() public view returns (uint256) {\n        uint256 _maxPerTx = maxPerTx();\n        uint256 _dailyLimit = dailyLimit();\n        uint256 _spent = totalSpentPerDay(getCurrentDay());\n        uint256 _remainingOutOfDaily = _dailyLimit > _spent ? _dailyLimit - _spent : 0;\n        return _maxPerTx < _remainingOutOfDaily ? _maxPerTx : _remainingOutOfDaily;\n    }\n\n    function _setLimits(uint256[3] _limits) internal {\n        require(\n            _limits[2] > 0 && // minPerTx > 0\n                _limits[1] > _limits[2] && // maxPerTx > minPerTx\n                _limits[0] > _limits[1] // dailyLimit > maxPerTx\n        );\n\n        uintStorage[DAILY_LIMIT] = _limits[0];\n        uintStorage[MAX_PER_TX] = _limits[1];\n        uintStorage[MIN_PER_TX] = _limits[2];\n\n        emit DailyLimitChanged(_limits[0]);\n    }\n\n    function _setExecutionLimits(uint256[2] _limits) internal {\n        require(_limits[1] < _limits[0]); // foreignMaxPerTx < foreignDailyLimit\n\n        uintStorage[EXECUTION_DAILY_LIMIT] = _limits[0];\n        uintStorage[EXECUTION_MAX_PER_TX] = _limits[1];\n\n        emit ExecutionDailyLimitChanged(_limits[0]);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/interfaces/ERC677.sol\n\npragma solidity 0.4.24;\n\n\ncontract ERC677 is ERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n    function transferAndCall(address, uint256, bytes) external returns (bool);\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool);\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool);\n}\n\ncontract LegacyERC20 {\n    function transfer(address _spender, uint256 _value) public; // returns (bool);\n    function transferFrom(address _owner, address _spender, uint256 _value) public; // returns (bool);\n}\n\n// File: contracts/interfaces/ERC677Receiver.sol\n\npragma solidity 0.4.24;\n\ncontract ERC677Receiver {\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) external returns (bool);\n}\n\n// File: contracts/upgradeable_contracts/ERC677Storage.sol\n\npragma solidity 0.4.24;\n\ncontract ERC677Storage {\n    bytes32 internal constant ERC677_TOKEN = 0xa8b0ade3e2b734f043ce298aca4cc8d19d74270223f34531d0988b7d00cba21d; // keccak256(abi.encodePacked(\"erc677token\"))\n}\n\n// File: contracts/libraries/Bytes.sol\n\npragma solidity 0.4.24;\n\n/**\n * @title Bytes\n * @dev Helper methods to transform bytes to other solidity types.\n */\nlibrary Bytes {\n    /**\n    * @dev Converts bytes array to bytes32.\n    * Truncates bytes array if its size is more than 32 bytes.\n    * NOTE: This function does not perform any checks on the received parameter.\n    * Make sure that the _bytes argument has a correct length, not less than 32 bytes.\n    * A case when _bytes has length less than 32 will lead to the undefined behaviour,\n    * since assembly will read data from memory that is not related to the _bytes argument.\n    * @param _bytes to be converted to bytes32 type\n    * @return bytes32 type of the firsts 32 bytes array in parameter.\n    */\n    function bytesToBytes32(bytes _bytes) internal pure returns (bytes32 result) {\n        assembly {\n            result := mload(add(_bytes, 32))\n        }\n    }\n\n    /**\n    * @dev Truncate bytes array if its size is more than 20 bytes.\n    * NOTE: Similar to the bytesToBytes32 function, make sure that _bytes is not shorter than 20 bytes.\n    * @param _bytes to be converted to address type\n    * @return address included in the firsts 20 bytes of the bytes array in parameter.\n    */\n    function bytesToAddress(bytes _bytes) internal pure returns (address addr) {\n        assembly {\n            addr := mload(add(_bytes, 20))\n        }\n    }\n}\n\n// File: contracts/upgradeable_contracts/ChooseReceiverHelper.sol\n\npragma solidity 0.4.24;\n\n\ncontract ChooseReceiverHelper {\n    /**\n    * @dev Helper function for alternative receiver feature. Chooses the actual receiver out of sender and passed data.\n    * @param _from address of tokens sender.\n    * @param _data passed data in the transfer message.\n    * @return address of the receiver on the other side.\n    */\n    function chooseReceiver(address _from, bytes _data) internal view returns (address recipient) {\n        recipient = _from;\n        if (_data.length > 0) {\n            require(_data.length == 20);\n            recipient = Bytes.bytesToAddress(_data);\n            require(recipient != address(0));\n            require(recipient != bridgeContractOnOtherSide());\n        }\n    }\n\n    /* solcov ignore next */\n    function bridgeContractOnOtherSide() internal view returns (address);\n}\n\n// File: contracts/upgradeable_contracts/BaseERC677Bridge.sol\n\npragma solidity 0.4.24;\n\n\n\n\n\n\n\ncontract BaseERC677Bridge is BasicTokenBridge, ERC677Receiver, ERC677Storage, ChooseReceiverHelper {\n    function _erc677token() internal view returns (ERC677) {\n        return ERC677(addressStorage[ERC677_TOKEN]);\n    }\n\n    function setErc677token(address _token) internal {\n        require(AddressUtils.isContract(_token));\n        addressStorage[ERC677_TOKEN] = _token;\n    }\n\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) external returns (bool) {\n        ERC677 token = _erc677token();\n        require(msg.sender == address(token));\n        require(withinLimit(_value));\n        addTotalSpentPerDay(getCurrentDay(), _value);\n        bridgeSpecificActionsOnTokenTransfer(token, _from, _value, _data);\n        return true;\n    }\n\n    /* solcov ignore next */\n    function bridgeSpecificActionsOnTokenTransfer(ERC677 _token, address _from, uint256 _value, bytes _data) internal;\n}\n\n// File: contracts/upgradeable_contracts/BaseOverdrawManagement.sol\n\npragma solidity 0.4.24;\n\n\ncontract BaseOverdrawManagement is EternalStorage {\n    event AmountLimitExceeded(address recipient, uint256 value, bytes32 transactionHash);\n    event AssetAboveLimitsFixed(bytes32 indexed transactionHash, uint256 value, uint256 remaining);\n\n    bytes32 internal constant OUT_OF_LIMIT_AMOUNT = 0x145286dc85799b6fb9fe322391ba2d95683077b2adf34dd576dedc437e537ba7; // keccak256(abi.encodePacked(\"outOfLimitAmount\"))\n\n    function outOfLimitAmount() public view returns (uint256) {\n        return uintStorage[OUT_OF_LIMIT_AMOUNT];\n    }\n\n    function fixedAssets(bytes32 _txHash) public view returns (bool) {\n        return boolStorage[keccak256(abi.encodePacked(\"fixedAssets\", _txHash))];\n    }\n\n    function setOutOfLimitAmount(uint256 _value) internal {\n        uintStorage[OUT_OF_LIMIT_AMOUNT] = _value;\n    }\n\n    function txAboveLimits(bytes32 _txHash) internal view returns (address recipient, uint256 value) {\n        recipient = addressStorage[keccak256(abi.encodePacked(\"txOutOfLimitRecipient\", _txHash))];\n        value = uintStorage[keccak256(abi.encodePacked(\"txOutOfLimitValue\", _txHash))];\n    }\n\n    function setTxAboveLimits(address _recipient, uint256 _value, bytes32 _txHash) internal {\n        addressStorage[keccak256(abi.encodePacked(\"txOutOfLimitRecipient\", _txHash))] = _recipient;\n        setTxAboveLimitsValue(_value, _txHash);\n    }\n\n    function setTxAboveLimitsValue(uint256 _value, bytes32 _txHash) internal {\n        uintStorage[keccak256(abi.encodePacked(\"txOutOfLimitValue\", _txHash))] = _value;\n    }\n\n    function setFixedAssets(bytes32 _txHash) internal {\n        boolStorage[keccak256(abi.encodePacked(\"fixedAssets\", _txHash))] = true;\n    }\n\n    /* solcov ignore next */\n    function fixAssetsAboveLimits(bytes32 txHash, bool unlockOnForeign, uint256 valueToUnlock) external;\n}\n\n// File: contracts/upgradeable_contracts/ReentrancyGuard.sol\n\npragma solidity 0.4.24;\n\n\ncontract ReentrancyGuard is EternalStorage {\n    bytes32 internal constant LOCK = 0x6168652c307c1e813ca11cfb3a601f1cf3b22452021a5052d8b05f1f1f8a3e92; // keccak256(abi.encodePacked(\"lock\"))\n\n    function lock() internal returns (bool) {\n        return boolStorage[LOCK];\n    }\n\n    function setLock(bool _lock) internal {\n        boolStorage[LOCK] = _lock;\n    }\n}\n\n// File: contracts/upgradeable_contracts/Upgradeable.sol\n\npragma solidity 0.4.24;\n\n\ncontract Upgradeable {\n    // Avoid using onlyUpgradeabilityOwner name to prevent issues with implementation from proxy contract\n    modifier onlyIfUpgradeabilityOwner() {\n        require(msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner());\n        /* solcov ignore next */\n        _;\n    }\n}\n\n// File: contracts/upgradeable_contracts/Sacrifice.sol\n\npragma solidity 0.4.24;\n\ncontract Sacrifice {\n    constructor(address _recipient) public payable {\n        selfdestruct(_recipient);\n    }\n}\n\n// File: contracts/libraries/Address.sol\n\npragma solidity 0.4.24;\n\n\n/**\n * @title Address\n * @dev Helper methods for Address type.\n */\nlibrary Address {\n    /**\n    * @dev Try to send native tokens to the address. If it fails, it will force the transfer by creating a selfdestruct contract\n    * @param _receiver address that will receive the native tokens\n    * @param _value the amount of native tokens to send\n    */\n    function safeSendValue(address _receiver, uint256 _value) internal {\n        if (!_receiver.send(_value)) {\n            (new Sacrifice).value(_value)(_receiver);\n        }\n    }\n}\n\n// File: contracts/upgradeable_contracts/Claimable.sol\n\npragma solidity 0.4.24;\n\n\n\ncontract Claimable {\n    bytes4 internal constant TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n\n    modifier validAddress(address _to) {\n        require(_to != address(0));\n        /* solcov ignore next */\n        _;\n    }\n\n    function claimValues(address _token, address _to) internal {\n        if (_token == address(0)) {\n            claimNativeCoins(_to);\n        } else {\n            claimErc20Tokens(_token, _to);\n        }\n    }\n\n    function claimNativeCoins(address _to) internal {\n        uint256 value = address(this).balance;\n        Address.safeSendValue(_to, value);\n    }\n\n    function claimErc20Tokens(address _token, address _to) internal {\n        ERC20Basic token = ERC20Basic(_token);\n        uint256 balance = token.balanceOf(this);\n        safeTransfer(_token, _to, balance);\n    }\n\n    function safeTransfer(address _token, address _to, uint256 _value) internal {\n        bytes memory returnData;\n        bool returnDataResult;\n        bytes memory callData = abi.encodeWithSelector(TRANSFER, _to, _value);\n        assembly {\n            let result := call(gas, _token, 0x0, add(callData, 0x20), mload(callData), 0, 32)\n            returnData := mload(0)\n            returnDataResult := mload(0)\n\n            switch result\n                case 0 {\n                    revert(0, 0)\n                }\n        }\n\n        // Return data is optional\n        if (returnData.length > 0) {\n            require(returnDataResult);\n        }\n    }\n}\n\n// File: contracts/upgradeable_contracts/VersionableBridge.sol\n\npragma solidity 0.4.24;\n\ncontract VersionableBridge {\n    function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\n        return (5, 1, 0);\n    }\n\n    /* solcov ignore next */\n    function getBridgeMode() external pure returns (bytes4);\n}\n\n// File: contracts/upgradeable_contracts/BasicAMBMediator.sol\n\npragma solidity 0.4.24;\n\n\n\n\n\n/**\n* @title BasicAMBMediator\n* @dev Basic storage and methods needed by mediators to interact with AMB bridge.\n*/\ncontract BasicAMBMediator is Ownable {\n    bytes32 internal constant BRIDGE_CONTRACT = 0x811bbb11e8899da471f0e69a3ed55090fc90215227fc5fb1cb0d6e962ea7b74f; // keccak256(abi.encodePacked(\"bridgeContract\"))\n    bytes32 internal constant MEDIATOR_CONTRACT = 0x98aa806e31e94a687a31c65769cb99670064dd7f5a87526da075c5fb4eab9880; // keccak256(abi.encodePacked(\"mediatorContract\"))\n    bytes32 internal constant REQUEST_GAS_LIMIT = 0x2dfd6c9f781bb6bbb5369c114e949b69ebb440ef3d4dd6b2836225eb1dc3a2be; // keccak256(abi.encodePacked(\"requestGasLimit\"))\n\n    /**\n    * @dev Throws if caller on the other side is not an associated mediator.\n    */\n    modifier onlyMediator {\n        require(msg.sender == address(bridgeContract()));\n        require(messageSender() == mediatorContractOnOtherSide());\n        _;\n    }\n\n    /**\n    * @dev Sets the AMB bridge contract address. Only the owner can call this method.\n    * @param _bridgeContract the address of the bridge contract.\n    */\n    function setBridgeContract(address _bridgeContract) external onlyOwner {\n        _setBridgeContract(_bridgeContract);\n    }\n\n    /**\n    * @dev Sets the mediator contract address from the other network. Only the owner can call this method.\n    * @param _mediatorContract the address of the mediator contract.\n    */\n    function setMediatorContractOnOtherSide(address _mediatorContract) external onlyOwner {\n        _setMediatorContractOnOtherSide(_mediatorContract);\n    }\n\n    /**\n    * @dev Sets the gas limit to be used in the message execution by the AMB bridge on the other network.\n    * This value can't exceed the parameter maxGasPerTx defined on the AMB bridge.\n    * Only the owner can call this method.\n    * @param _requestGasLimit the gas limit for the message execution.\n    */\n    function setRequestGasLimit(uint256 _requestGasLimit) external onlyOwner {\n        _setRequestGasLimit(_requestGasLimit);\n    }\n\n    /**\n    * @dev Get the AMB interface for the bridge contract address\n    * @return AMB interface for the bridge contract address\n    */\n    function bridgeContract() public view returns (IAMB) {\n        return IAMB(addressStorage[BRIDGE_CONTRACT]);\n    }\n\n    /**\n    * @dev Tells the mediator contract address from the other network.\n    * @return the address of the mediator contract.\n    */\n    function mediatorContractOnOtherSide() public view returns (address) {\n        return addressStorage[MEDIATOR_CONTRACT];\n    }\n\n    /**\n    * @dev Tells the gas limit to be used in the message execution by the AMB bridge on the other network.\n    * @return the gas limit for the message execution.\n    */\n    function requestGasLimit() public view returns (uint256) {\n        return uintStorage[REQUEST_GAS_LIMIT];\n    }\n\n    /**\n    * @dev Stores a valid AMB bridge contract address.\n    * @param _bridgeContract the address of the bridge contract.\n    */\n    function _setBridgeContract(address _bridgeContract) internal {\n        require(AddressUtils.isContract(_bridgeContract));\n        addressStorage[BRIDGE_CONTRACT] = _bridgeContract;\n    }\n\n    /**\n    * @dev Stores the mediator contract address from the other network.\n    * @param _mediatorContract the address of the mediator contract.\n    */\n    function _setMediatorContractOnOtherSide(address _mediatorContract) internal {\n        addressStorage[MEDIATOR_CONTRACT] = _mediatorContract;\n    }\n\n    /**\n    * @dev Stores the gas limit to be used in the message execution by the AMB bridge on the other network.\n    * @param _requestGasLimit the gas limit for the message execution.\n    */\n    function _setRequestGasLimit(uint256 _requestGasLimit) internal {\n        require(_requestGasLimit <= maxGasPerTx());\n        uintStorage[REQUEST_GAS_LIMIT] = _requestGasLimit;\n    }\n\n    /**\n    * @dev Tells the address that generated the message on the other network that is currently being executed by\n    * the AMB bridge.\n    * @return the address of the message sender.\n    */\n    function messageSender() internal view returns (address) {\n        return bridgeContract().messageSender();\n    }\n\n    /**\n    * @dev Tells the id of the message originated on the other network.\n    * @return the id of the message originated on the other network.\n    */\n    function messageId() internal view returns (bytes32) {\n        return bridgeContract().messageId();\n    }\n\n    /**\n    * @dev Tells the maximum gas limit that a message can use on its execution by the AMB bridge on the other network.\n    * @return the maximum gas limit value.\n    */\n    function maxGasPerTx() internal view returns (uint256) {\n        return bridgeContract().maxGasPerTx();\n    }\n}\n\n// File: contracts/upgradeable_contracts/TransferInfoStorage.sol\n\npragma solidity 0.4.24;\n\n\ncontract TransferInfoStorage is EternalStorage {\n    /**\n    * @dev Stores the value of a message sent to the AMB bridge.\n    * @param _messageId of the message sent to the bridge.\n    * @param _value amount of tokens bridged.\n    */\n    function setMessageValue(bytes32 _messageId, uint256 _value) internal {\n        uintStorage[keccak256(abi.encodePacked(\"messageValue\", _messageId))] = _value;\n    }\n\n    /**\n    * @dev Tells the amount of tokens of a message sent to the AMB bridge.\n    * @return value representing amount of tokens.\n    */\n    function messageValue(bytes32 _messageId) internal view returns (uint256) {\n        return uintStorage[keccak256(abi.encodePacked(\"messageValue\", _messageId))];\n    }\n\n    /**\n    * @dev Stores the receiver of a message sent to the AMB bridge.\n    * @param _messageId of the message sent to the bridge.\n    * @param _recipient receiver of the tokens bridged.\n    */\n    function setMessageRecipient(bytes32 _messageId, address _recipient) internal {\n        addressStorage[keccak256(abi.encodePacked(\"messageRecipient\", _messageId))] = _recipient;\n    }\n\n    /**\n    * @dev Tells the receiver of a message sent to the AMB bridge.\n    * @return address of the receiver.\n    */\n    function messageRecipient(bytes32 _messageId) internal view returns (address) {\n        return addressStorage[keccak256(abi.encodePacked(\"messageRecipient\", _messageId))];\n    }\n\n    /**\n    * @dev Sets that the message sent to the AMB bridge has been fixed.\n    * @param _messageId of the message sent to the bridge.\n    */\n    function setMessageFixed(bytes32 _messageId) internal {\n        boolStorage[keccak256(abi.encodePacked(\"messageFixed\", _messageId))] = true;\n    }\n\n    /**\n    * @dev Tells if a message sent to the AMB bridge has been fixed.\n    * @return bool indicating the status of the message.\n    */\n    function messageFixed(bytes32 _messageId) public view returns (bool) {\n        return boolStorage[keccak256(abi.encodePacked(\"messageFixed\", _messageId))];\n    }\n}\n\n// File: contracts/upgradeable_contracts/TokenBridgeMediator.sol\n\npragma solidity 0.4.24;\n\n\n\n\n/**\n* @title TokenBridgeMediator\n* @dev Common mediator functionality to handle operations related to token bridge messages sent to AMB bridge.\n*/\ncontract TokenBridgeMediator is BasicAMBMediator, BasicTokenBridge, TransferInfoStorage {\n    event FailedMessageFixed(bytes32 indexed messageId, address recipient, uint256 value);\n    event TokensBridged(address indexed recipient, uint256 value, bytes32 indexed messageId);\n\n    /**\n    * @dev Call AMB bridge to require the invocation of handleBridgedTokens method of the mediator on the other network.\n    * Store information related to the bridged tokens in case the message execution fails on the other network\n    * and the action needs to be fixed/rolled back.\n    * @param _from address of sender, if bridge operation fails, tokens will be returned to this address\n    * @param _receiver address of receiver on the other side, will eventually receive bridged tokens\n    * @param _value bridged amount of tokens\n    */\n    function passMessage(address _from, address _receiver, uint256 _value) internal {\n        bytes4 methodSelector = this.handleBridgedTokens.selector;\n        bytes memory data = abi.encodeWithSelector(methodSelector, _receiver, _value);\n\n        bytes32 _messageId = bridgeContract().requireToPassMessage(\n            mediatorContractOnOtherSide(),\n            data,\n            requestGasLimit()\n        );\n\n        setMessageValue(_messageId, _value);\n        setMessageRecipient(_messageId, _from);\n    }\n\n    /**\n    * @dev Handles the bridged tokens. Checks that the value is inside the execution limits and invokes the method\n    * to execute the Mint or Unlock accordingly.\n    * @param _recipient address that will receive the tokens\n    * @param _value amount of tokens to be received\n    */\n    function handleBridgedTokens(address _recipient, uint256 _value) external onlyMediator {\n        if (withinExecutionLimit(_value)) {\n            addTotalExecutedPerDay(getCurrentDay(), _value);\n            executeActionOnBridgedTokens(_recipient, _value);\n        } else {\n            executeActionOnBridgedTokensOutOfLimit(_recipient, _value);\n        }\n    }\n\n    /**\n    * @dev Method to be called when a bridged message execution failed. It will generate a new message requesting to\n    * fix/roll back the transferred assets on the other network.\n    * @param _messageId id of the message which execution failed.\n    */\n    function requestFailedMessageFix(bytes32 _messageId) external {\n        require(!bridgeContract().messageCallStatus(_messageId));\n        require(bridgeContract().failedMessageReceiver(_messageId) == address(this));\n        require(bridgeContract().failedMessageSender(_messageId) == mediatorContractOnOtherSide());\n\n        bytes4 methodSelector = this.fixFailedMessage.selector;\n        bytes memory data = abi.encodeWithSelector(methodSelector, _messageId);\n        bridgeContract().requireToPassMessage(mediatorContractOnOtherSide(), data, requestGasLimit());\n    }\n\n    /**\n    * @dev Handles the request to fix transferred assets which bridged message execution failed on the other network.\n    * It uses the information stored by passMessage method when the assets were initially transferred\n    * @param _messageId id of the message which execution failed on the other network.\n    */\n    function fixFailedMessage(bytes32 _messageId) external onlyMediator {\n        require(!messageFixed(_messageId));\n\n        address recipient = messageRecipient(_messageId);\n        uint256 value = messageValue(_messageId);\n        setMessageFixed(_messageId);\n        executeActionOnFixedTokens(recipient, value);\n        emit FailedMessageFixed(_messageId, recipient, value);\n    }\n\n    /* solcov ignore next */\n    function executeActionOnBridgedTokensOutOfLimit(address _recipient, uint256 _value) internal;\n\n    /* solcov ignore next */\n    function executeActionOnBridgedTokens(address _recipient, uint256 _value) internal;\n\n    /* solcov ignore next */\n    function executeActionOnFixedTokens(address _recipient, uint256 _value) internal;\n}\n\n// File: contracts/upgradeable_contracts/amb_erc677_to_erc677/BasicAMBErc677ToErc677.sol\n\npragma solidity 0.4.24;\n\n\n\n\n\n\n\n\n\n\n\n/**\n* @title BasicAMBErc677ToErc677\n* @dev Common functionality for erc677-to-erc677 mediator intended to work on top of AMB bridge.\n*/\ncontract BasicAMBErc677ToErc677 is\n    Initializable,\n    ReentrancyGuard,\n    Upgradeable,\n    Claimable,\n    VersionableBridge,\n    BaseOverdrawManagement,\n    BaseERC677Bridge,\n    TokenBridgeMediator\n{\n    function initialize(\n        address _bridgeContract,\n        address _mediatorContract,\n        address _erc677token,\n        uint256[3] _dailyLimitMaxPerTxMinPerTxArray, // [ 0 = _dailyLimit, 1 = _maxPerTx, 2 = _minPerTx ]\n        uint256[2] _executionDailyLimitExecutionMaxPerTxArray, // [ 0 = _executionDailyLimit, 1 = _executionMaxPerTx ]\n        uint256 _requestGasLimit,\n        int256 _decimalShift,\n        address _owner\n    ) public onlyRelevantSender returns (bool) {\n        require(!isInitialized());\n\n        _setBridgeContract(_bridgeContract);\n        _setMediatorContractOnOtherSide(_mediatorContract);\n        setErc677token(_erc677token);\n        _setLimits(_dailyLimitMaxPerTxMinPerTxArray);\n        _setExecutionLimits(_executionDailyLimitExecutionMaxPerTxArray);\n        _setRequestGasLimit(_requestGasLimit);\n        _setDecimalShift(_decimalShift);\n        setOwner(_owner);\n        setInitialize();\n\n        return isInitialized();\n    }\n\n    /**\n    * @dev Public getter for token contract.\n    * @return address of the used token contract\n    */\n    function erc677token() public view returns (ERC677) {\n        return _erc677token();\n    }\n\n    function bridgeContractOnOtherSide() internal view returns (address) {\n        return mediatorContractOnOtherSide();\n    }\n\n    /**\n    * @dev Initiates the bridge operation that will lock the amount of tokens transferred and mint the tokens on\n    * the other network. The user should first call Approve method of the ERC677 token.\n    * @param _receiver address that will receive the minted tokens on the other network.\n    * @param _value amount of tokens to be transferred to the other network.\n    */\n    function relayTokens(address _receiver, uint256 _value) external {\n        // This lock is to prevent calling passMessage twice if a ERC677 token is used.\n        // When transferFrom is called, after the transfer, the ERC677 token will call onTokenTransfer from this contract\n        // which will call passMessage.\n        require(!lock());\n        ERC677 token = erc677token();\n        address to = address(this);\n        require(withinLimit(_value));\n        addTotalSpentPerDay(getCurrentDay(), _value);\n\n        setLock(true);\n        token.transferFrom(msg.sender, to, _value);\n        setLock(false);\n        bridgeSpecificActionsOnTokenTransfer(token, msg.sender, _value, abi.encodePacked(_receiver));\n    }\n\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) external returns (bool) {\n        ERC677 token = erc677token();\n        require(msg.sender == address(token));\n        if (!lock()) {\n            require(withinLimit(_value));\n            addTotalSpentPerDay(getCurrentDay(), _value);\n        }\n        bridgeSpecificActionsOnTokenTransfer(token, _from, _value, _data);\n        return true;\n    }\n\n    function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\n        return (1, 2, 1);\n    }\n\n    function getBridgeMode() external pure returns (bytes4 _data) {\n        return 0x76595b56; // bytes4(keccak256(abi.encodePacked(\"erc-to-erc-amb\")))\n    }\n\n    /**\n    * @dev Execute the action to be performed when the bridge tokens are out of execution limits.\n    * @param _recipient address intended to receive the tokens\n    * @param _value amount of tokens to be received\n    */\n    function executeActionOnBridgedTokensOutOfLimit(address _recipient, uint256 _value) internal {\n        bytes32 _messageId = messageId();\n        address recipient;\n        uint256 value;\n        (recipient, value) = txAboveLimits(_messageId);\n        require(recipient == address(0) && value == 0);\n        setOutOfLimitAmount(outOfLimitAmount().add(_value));\n        setTxAboveLimits(_recipient, _value, _messageId);\n        emit AmountLimitExceeded(_recipient, _value, _messageId);\n    }\n\n    /**\n    * @dev Fixes locked tokens, that were out of execution limits during the call to handleBridgedTokens\n    * @param messageId reference for bridge operation that was out of execution limits\n    * @param unlockOnForeign true if fixed tokens should be unlocked to the other side of the bridge\n    * @param valueToUnlock unlocked amount of tokens, should be less than maxPerTx() and saved txAboveLimitsValue\n    */\n    function fixAssetsAboveLimits(bytes32 messageId, bool unlockOnForeign, uint256 valueToUnlock)\n        external\n        onlyIfUpgradeabilityOwner\n    {\n        require(!fixedAssets(messageId));\n        require(valueToUnlock <= maxPerTx());\n        address recipient;\n        uint256 value;\n        (recipient, value) = txAboveLimits(messageId);\n        require(recipient != address(0) && value > 0 && value >= valueToUnlock);\n        setOutOfLimitAmount(outOfLimitAmount().sub(valueToUnlock));\n        uint256 pendingValue = value.sub(valueToUnlock);\n        setTxAboveLimitsValue(pendingValue, messageId);\n        emit AssetAboveLimitsFixed(messageId, valueToUnlock, pendingValue);\n        if (pendingValue == 0) {\n            setFixedAssets(messageId);\n        }\n        if (unlockOnForeign) {\n            passMessage(recipient, recipient, valueToUnlock);\n        }\n    }\n\n    function claimTokens(address _token, address _to) public onlyIfUpgradeabilityOwner validAddress(_to) {\n        claimValues(_token, _to);\n    }\n}\n\n// File: contracts/libraries/SafeERC20.sol\n\npragma solidity 0.4.24;\n\n\n\n/**\n * @title SafeERC20\n * @dev Helper methods for safe token transfers.\n * Functions perform additional checks to be sure that token transfer really happened.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    /**\n    * @dev Same as ERC20.transfer(address,uint256) but with extra consistency checks.\n    * @param _token address of the token contract\n    * @param _to address of the receiver\n    * @param _value amount of tokens to send\n    */\n    function safeTransfer(address _token, address _to, uint256 _value) internal {\n        LegacyERC20(_token).transfer(_to, _value);\n        assembly {\n            if returndatasize {\n                returndatacopy(0, 0, 32)\n                if iszero(mload(0)) {\n                    revert(0, 0)\n                }\n            }\n        }\n    }\n\n    /**\n    * @dev Same as ERC20.transferFrom(address,address,uint256) but with extra consistency checks.\n    * @param _token address of the token contract\n    * @param _from address of the sender\n    * @param _value amount of tokens to send\n    */\n    function safeTransferFrom(address _token, address _from, uint256 _value) internal {\n        LegacyERC20(_token).transferFrom(_from, address(this), _value);\n        assembly {\n            if returndatasize {\n                returndatacopy(0, 0, 32)\n                if iszero(mload(0)) {\n                    revert(0, 0)\n                }\n            }\n        }\n    }\n}\n\n// File: contracts/upgradeable_contracts/amb_erc677_to_erc677/ForeignAMBErc677ToErc677.sol\n\npragma solidity 0.4.24;\n\n\n\n/**\n* @title ForeignAMBErc677ToErc677\n* @dev Foreign side implementation for erc677-to-erc677 mediator intended to work on top of AMB bridge.\n* It is designed to be used as an implementation contract of EternalStorageProxy contract.\n*/\ncontract ForeignAMBErc677ToErc677 is BasicAMBErc677ToErc677 {\n    using SafeERC20 for ERC677;\n\n    /**\n     * @dev Executes action on the request to withdraw tokens relayed from the other network\n     * @param _recipient address of tokens receiver\n     * @param _value amount of bridged tokens\n     */\n    function executeActionOnBridgedTokens(address _recipient, uint256 _value) internal {\n        uint256 value = _unshiftValue(_value);\n        bytes32 _messageId = messageId();\n        erc677token().safeTransfer(_recipient, value);\n        emit TokensBridged(_recipient, value, _messageId);\n    }\n\n    /**\n    * @dev Initiates the bridge operation that will lock the amount of tokens transferred and mint the tokens on\n    * the other network. The user should first call Approve method of the ERC677 token.\n    * @param _receiver address that will receive the minted tokens on the other network.\n    * @param _value amount of tokens to be transferred to the other network.\n    */\n    function relayTokens(address _receiver, uint256 _value) external {\n        // This lock is to prevent calling passMessage twice if a ERC677 token is used.\n        // When transferFrom is called, after the transfer, the ERC677 token will call onTokenTransfer from this contract\n        // which will call passMessage.\n        require(!lock());\n        ERC677 token = erc677token();\n        require(withinLimit(_value));\n        addTotalSpentPerDay(getCurrentDay(), _value);\n\n        setLock(true);\n        token.safeTransferFrom(msg.sender, _value);\n        setLock(false);\n        bridgeSpecificActionsOnTokenTransfer(token, msg.sender, _value, abi.encodePacked(_receiver));\n    }\n\n    /**\n     * @dev Executes action on deposit of bridged tokens\n     * @param _from address of tokens sender\n     * @param _value requsted amount of bridged tokens\n     * @param _data alternative receiver, if specified\n     */\n    function bridgeSpecificActionsOnTokenTransfer(\n        ERC677, /* _token */\n        address _from,\n        uint256 _value,\n        bytes _data\n    ) internal {\n        if (!lock()) {\n            passMessage(_from, chooseReceiver(_from, _data), _value);\n        }\n    }\n\n    function executeActionOnFixedTokens(address _recipient, uint256 _value) internal {\n        erc677token().safeTransfer(_recipient, _value);\n    }\n}\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"fixFailedMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bridgeContract\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc677token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"fixedAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalSpentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setExecutionDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeMode\",\"outputs\":[{\"name\":\"_data\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionDailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalExecutedPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"messageFixed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mediatorContract\",\"type\":\"address\"}],\"name\":\"setMediatorContractOnOtherSide\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediatorContractOnOtherSide\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinExecutionLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionMaxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"handleBridgedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAvailablePerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"requestFailedMessageFix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"outOfLimitAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPerTx\",\"type\":\"uint256\"}],\"name\":\"setMinPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"messageId\",\"type\":\"bytes32\"},{\"name\":\"unlockOnForeign\",\"type\":\"bool\"},{\"name\":\"valueToUnlock\",\"type\":\"uint256\"}],\"name\":\"fixAssetsAboveLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestGasLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"name\":\"_mediatorContract\",\"type\":\"address\"},{\"name\":\"_erc677token\",\"type\":\"address\"},{\"name\":\"_dailyLimitMaxPerTxMinPerTxArray\",\"type\":\"uint256[3]\"},{\"name\":\"_executionDailyLimitExecutionMaxPerTxArray\",\"type\":\"uint256[2]\"},{\"name\":\"_requestGasLimit\",\"type\":\"uint256\"},{\"name\":\"_decimalShift\",\"type\":\"int256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalShift\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setExecutionMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestGasLimit\",\"type\":\"uint256\"}],\"name\":\"setRequestGasLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedMessageFixed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"TokensBridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"DailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ExecutionDailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"AmountLimitExceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"AssetAboveLimitsFixed\",\"type\":\"event\"}]","ContractName":"ForeignAMBErc677ToErc677","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}