{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-06-11\r\n*/\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ITokenConverter.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\ninterface ITokenConverter {\r\n    function convertFrom(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _fromAmount,\r\n        uint256 _minReceive\r\n    ) external payable returns (uint256 _received);\r\n\r\n    function convertTo(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _toAmount,\r\n        uint256 _maxSpend\r\n    ) external payable returns (uint256 _spend);\r\n\r\n    function getPriceConvertFrom(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _fromAmount\r\n    ) external view returns (uint256 _receive);\r\n\r\n    function getPriceConvertTo(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _toAmount\r\n    ) external view returns (uint256 _spend);\r\n}\r\n\r\n// File: contracts/interfaces/uniswapV2/IUniswapV2Router02.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/utils/SafeERC20.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n/**\r\n* @dev Library to perform safe calls to standard method for ERC20 tokens.\r\n*\r\n* Why Transfers: transfer methods could have a return value (bool), throw or revert for insufficient funds or\r\n* unathorized value.\r\n*\r\n* Why Approve: approve method could has a return value (bool) or does not accept 0 as a valid value (BNB token).\r\n* The common strategy used to clean approvals.\r\n*\r\n* We use the Solidity call instead of interface methods because in the case of transfer, it will fail\r\n* for tokens with an implementation without returning a value.\r\n* Since versions of Solidity 0.4.22 the EVM has a new opcode, called RETURNDATASIZE.\r\n* This opcode stores the size of the returned data of an external call. The code checks the size of the return value\r\n* after an external call and reverts the transaction in case the return data is shorter than expected\r\n* https://github.com/nachomazzara/SafeERC20/blob/master/contracts/libs/SafeERC20.sol\r\n*/\r\nlibrary SafeERC20 {\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    * @return bool whether the transfer was successful or not\r\n    */\r\n    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\r\n        uint256 prevBalance = _token.balanceOf(address(this));\r\n\r\n        if (prevBalance < _value) {\r\n            // Insufficient funds\r\n            return false;\r\n        }\r\n\r\n        (bool success,) = address(_token).call(\r\n            abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value)\r\n        );\r\n\r\n        if (!success || prevBalance - _value != _token.balanceOf(address(this))) {\r\n            // Transfer failed\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    * @return bool whether the transfer was successful or not\r\n    */\r\n    function safeTransferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool)\r\n    {\r\n        uint256 prevBalance = _token.balanceOf(_from);\r\n\r\n        if (prevBalance < _value) {\r\n            // Insufficient funds\r\n            return false;\r\n        }\r\n\r\n        if (_token.allowance(_from, address(this)) < _value) {\r\n            // Insufficient allowance\r\n            return false;\r\n        }\r\n\r\n        (bool success,) = address(_token).call(\r\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _from, _to, _value)\r\n        );\r\n\r\n        if (!success || prevBalance - _value != _token.balanceOf(_from)) {\r\n            // Transfer failed\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n   /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender\"s allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * @param _token erc20 The address of the ERC20 contract\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   * @return bool whether the approve was successful or not\r\n   */\r\n    function safeApprove(IERC20 _token, address _spender, uint256 _value) internal returns (bool) {\r\n        (bool success,) = address(_token).call(\r\n            abi.encodeWithSignature(\"approve(address,uint256)\",_spender, _value)\r\n        );\r\n\r\n        if (!success && _token.allowance(address(this), _spender) != _value) {\r\n            // Approve failed\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n   /**\r\n   * @dev Clear approval\r\n   * Note that if 0 is not a valid value it will be set to 1.\r\n   * @param _token erc20 The address of the ERC20 contract\r\n   * @param _spender The address which will spend the funds.\r\n   */\r\n    function clearApprove(IERC20 _token, address _spender) internal returns (bool) {\r\n        bool success = safeApprove(_token, _spender, 0);\r\n\r\n        if (!success) {\r\n            success = safeApprove(_token, _spender, 1);\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC173.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n/// @title ERC-173 Contract Ownership Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\r\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\ninterface IERC173 {\r\n    /// @dev This emits when ownership of a contract changes.\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    /// @notice Get the address of the owner\r\n    /// @return The address of the owner.\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @param _newOwner The address of the new owner of the contract\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\ncontract Ownable is IERC173 {\r\n    address internal _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"The owner should be the sender\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0x0), msg.sender);\r\n    }\r\n\r\n    function owner() external override view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n        @dev Transfers the ownership of the contract.\r\n\r\n        @param _newOwner Address of the new owner\r\n    */\r\n    function transferOwnership(address _newOwner) external override onlyOwner {\r\n        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/converter/UniswapV2Converter.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @notice proxy between ConverterRamp and Uniswap V2\r\n///         accepts tokens and ether, converts these to the desired token,\r\n///         and makes approve calls to allow the recipient to transfer those\r\n///         tokens from the contract.\r\n/// @author Victor Fage (victorfage@gmail.com)\r\ncontract UniswapV2Converter is ITokenConverter, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event SetRouter(IUniswapV2Router02 _router);\r\n\r\n    /// @notice address to identify operations with ETH\r\n    IERC20 constant internal ETH_TOKEN_ADDRESS = IERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    IUniswapV2Router02 public router;\r\n\r\n    constructor (IUniswapV2Router02 _router) public {\r\n        router = _router;\r\n    }\r\n\r\n    function setRouter(IUniswapV2Router02 _router) external onlyOwner {\r\n        router = _router;\r\n\r\n        emit SetRouter(_router);\r\n    }\r\n\r\n    function convertFrom(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _fromAmount,\r\n        uint256 _minReceive\r\n    ) override external payable returns (uint256 received) {\r\n        address[] memory path = _handlePath(_fromToken, _toToken);\r\n        uint[] memory amounts;\r\n\r\n        if (_fromToken == ETH_TOKEN_ADDRESS) {\r\n            // Convert ETH to TOKEN\r\n            // and send directly to msg.sender\r\n            require(msg.value == _fromAmount, \"Sent eth is not enought\");\r\n\r\n            amounts = router.swapExactETHForTokens{\r\n                value: _fromAmount\r\n            }(\r\n                _minReceive,\r\n                path,\r\n                msg.sender,\r\n                uint(-1)\r\n            );\r\n        } else {\r\n            require(msg.value == 0, \"Method is not payable\");\r\n            require(_fromToken.transferFrom(msg.sender, address(this), _fromAmount), \"Error pulling tokens\");\r\n\r\n            _approveOnlyOnce(_fromToken, address(router), _fromAmount);\r\n\r\n            if (_toToken == ETH_TOKEN_ADDRESS) {\r\n                // Convert TOKEN to ETH\r\n                // and send directly to msg.sender\r\n                amounts = router.swapExactTokensForETH(\r\n                    _fromAmount,\r\n                    _minReceive,\r\n                    path,\r\n                    msg.sender,\r\n                    uint(-1)\r\n                );\r\n            } else {\r\n                // Convert TOKENA to ETH\r\n                // and send it to this contract\r\n                amounts = router.swapExactTokensForTokens(\r\n                    _fromAmount,\r\n                    _minReceive,\r\n                    path,\r\n                    msg.sender,\r\n                    uint(-1)\r\n                );\r\n            }\r\n        }\r\n\r\n        received = amounts[amounts.length - 1];\r\n\r\n        require(received >= _minReceive, \"_received is not enought\");\r\n    }\r\n\r\n    function convertTo(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _toAmount,\r\n        uint256 _maxSpend\r\n    ) override external payable returns (uint256 spent) {\r\n        address[] memory path = _handlePath(_fromToken, _toToken);\r\n        uint256[] memory amounts;\r\n\r\n        if (_fromToken == ETH_TOKEN_ADDRESS) {\r\n            // Convert ETH to TOKEN\r\n            // and send directly to msg.sender\r\n            require(msg.value == _maxSpend, \"Sent eth is not enought\");\r\n\r\n            amounts = router.swapETHForExactTokens{\r\n                value: _maxSpend\r\n            }(\r\n                _toAmount,\r\n                path,\r\n                msg.sender,\r\n                uint(-1)\r\n            );\r\n        } else {\r\n            require(msg.value == 0, \"Method is not payable\");\r\n            require(_fromToken.transferFrom(msg.sender, address(this), _maxSpend), \"Error pulling tokens\");\r\n\r\n            _approveOnlyOnce(_fromToken, address(router), _maxSpend);\r\n\r\n            if (_toToken == ETH_TOKEN_ADDRESS) {\r\n                // Convert TOKEN to ETH\r\n                // and send directly to msg.sender\r\n                amounts = router.swapTokensForExactETH(\r\n                    _toAmount,\r\n                    _maxSpend,\r\n                    path,\r\n                    msg.sender,\r\n                    uint(-1)\r\n                );\r\n            } else {\r\n                // Convert TOKEN to ETH\r\n                // and send directly to msg.sender\r\n                amounts = router.swapTokensForExactTokens(\r\n                    _toAmount,\r\n                    _maxSpend,\r\n                    path,\r\n                    msg.sender,\r\n                    uint(-1)\r\n                );\r\n            }\r\n        }\r\n\r\n        spent = amounts[0];\r\n\r\n        require(spent <= _maxSpend, \"_maxSpend exceed\");\r\n        if (spent < _maxSpend) {\r\n            _transfer(_fromToken, msg.sender, _maxSpend - spent);\r\n        }\r\n    }\r\n\r\n    function getPriceConvertFrom(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _fromAmount\r\n    ) override external view returns (uint256 toAmount) {\r\n        address[] memory path = _handlePath(_fromToken, _toToken);\r\n        uint256[] memory amounts = router.getAmountsOut(_fromAmount, path);\r\n\r\n        toAmount = amounts[amounts.length - 1];\r\n    }\r\n\r\n    function getPriceConvertTo(\r\n        IERC20 _fromToken,\r\n        IERC20 _toToken,\r\n        uint256 _toAmount\r\n    ) override external view returns (uint256 fromAmount) {\r\n        address[] memory path = _handlePath(_fromToken, _toToken);\r\n        uint256[] memory amounts = router.getAmountsIn(_toAmount, path);\r\n\r\n        fromAmount = amounts[0];\r\n    }\r\n\r\n    function _approveOnlyOnce(\r\n        IERC20 _token,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) private {\r\n        uint256 allowance = _token.allowance(address(this), _spender);\r\n        if (allowance < _amount) {\r\n            if (allowance != 0) {\r\n                _token.clearApprove(_spender);\r\n            }\r\n\r\n            _token.approve(_spender, uint(-1));\r\n        }\r\n    }\r\n\r\n    function _handlePath(IERC20 _fromToken, IERC20 _toToken) private view returns(address[] memory path) {\r\n        if (_fromToken == ETH_TOKEN_ADDRESS) {\r\n            // From ETH\r\n            path = new address[](2);\r\n            path[0] = router.WETH();\r\n            path[1] = address(_toToken);\r\n        } else {\r\n            if (_toToken == ETH_TOKEN_ADDRESS) {\r\n                // To ETH\r\n                path = new address[](2);\r\n                path[0] = address(_fromToken);\r\n                path[1] = router.WETH();\r\n            } else {\r\n                // Token To Token\r\n                path = new address[](3);\r\n                path[0] = address(_fromToken);\r\n                path[1] = router.WETH();\r\n                path[2] = address(_toToken);\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n\r\n    function _transfer(\r\n        IERC20 _token,\r\n        address payable _to,\r\n        uint256 _amount\r\n    ) private {\r\n        if (_token == ETH_TOKEN_ADDRESS) {\r\n            _to.transfer(_amount);\r\n        } else {\r\n            require(_token.transfer(_to, _amount), \"error sending tokens\");\r\n        }\r\n    }\r\n\r\n    function emergencyWithdraw(\r\n        IERC20 _token,\r\n        address payable _to,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        _transfer(_token, _to, _amount);\r\n    }\r\n\r\n    receive() external payable {\r\n        // solhint-disable-next-line\r\n        require(tx.origin != msg.sender, \"uniswap-converter: send eth rejected\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"SetRouter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReceive\",\"type\":\"uint256\"}],\"name\":\"convertFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSpend\",\"type\":\"uint256\"}],\"name\":\"convertTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"getPriceConvertFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toAmount\",\"type\":\"uint256\"}],\"name\":\"getPriceConvertTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UniswapV2Converter","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5df5a05a0ab10d2fe5627076e37723981d7f0d454e75d9d1a91507f14e72b105"}]}