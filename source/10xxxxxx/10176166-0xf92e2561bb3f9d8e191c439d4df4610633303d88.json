{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IAaveToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IAaveToken is IERC20 {\r\n    function underlyingAssetAddress() external view returns (IERC20);\r\n\r\n    function redeem(uint256 amount) external;\r\n}\r\n\r\n\r\ninterface IAaveLendingPool {\r\n    function core() external view returns (IAaveCore);\r\n\r\n    function deposit(IERC20 token, uint256 amount, uint16 refCode) external payable;\r\n}\r\n\r\ninterface IAaveCore {\r\n    function getReserveATokenAddress(IERC20) external view returns(IAaveToken);\r\n}\r\n\r\n// File: contracts/regs/AaveRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface IAaveRegistry {\r\n    function getWrapping(IERC20 token) external returns(IAaveToken);\r\n    function getUnderlying(IAaveToken aaveToken) external returns(IERC20);\r\n}\r\n\r\n\r\ncontract AaveRegistry is IAaveRegistry {\r\n    IERC20 constant public NOT_AAVE_TOKEN = IERC20(-1);\r\n    IERC20 constant public NOT_FOUND_TOKEN = IERC20(0);\r\n\r\n    IAaveLendingPool constant public aave = IAaveLendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n    mapping(address => address) public cache;\r\n\r\n    function getWrapping(IERC20 token) external returns(IAaveToken) {\r\n        IAaveToken aaveToken = aave.core().getReserveATokenAddress(token);\r\n        if (aaveToken == IAaveToken(0)) {\r\n            return IAaveToken(-1);\r\n        }\r\n        return aaveToken;\r\n    }\r\n\r\n    function getUnderlying(IAaveToken aaveToken) external returns(IERC20) {\r\n        if (aaveToken == IAaveToken(0x3a3A65aAb0dd2A17E3F1947bA16138cd37d08c04)) { // ETH\r\n            return IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n        }\r\n        if (aaveToken == IAaveToken(0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d)) { // DAI\r\n            return IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n        }\r\n        if (aaveToken == IAaveToken(0x9bA00D6856a4eDF4665BcA2C2309936572473B7E)) { // USDC\r\n            return IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n        }\r\n        if (aaveToken == IAaveToken(0x625aE63000f46200499120B906716420bd059240)) { // SUSD\r\n            return IERC20(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n        }\r\n        if (aaveToken == IAaveToken(0x6Ee0f7BB50a54AB5253dA0667B0Dc2ee526C30a8)) { // BUSD\r\n            return IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53);\r\n        }\r\n        if (aaveToken == IAaveToken(0x4DA9b813057D04BAef4e5800E36083717b4a0341)) { // TUSD\r\n            return IERC20(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n        }\r\n        if (aaveToken == IAaveToken(0x71fc860F7D3A592A4a98740e39dB31d25db65ae8)) { // USDT\r\n            return IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n        }\r\n        if (aaveToken == IAaveToken(0xE1BA0FB44CCb0D11b80F92f4f8Ed94CA3fF51D00)) { // BAT\r\n            return IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF);\r\n        }\r\n        if (aaveToken == IAaveToken(0x9D91BE44C06d373a8a226E1f3b146956083803eB)) { // KNC\r\n            return IERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\r\n        }\r\n        if (aaveToken == IAaveToken(0x7D2D3688Df45Ce7C552E19c27e007673da9204B8)) { // LEND\r\n            return IERC20(0x80fB784B7eD66730e8b1DBd9820aFD29931aab03);\r\n        }\r\n        if (aaveToken == IAaveToken(0xA64BD6C70Cb9051F6A9ba1F163Fdc07E0DfB5F84)) { // LINK\r\n            return IERC20(0x514910771AF9Ca656af840dff83E8264EcF986CA);\r\n        }\r\n        if (aaveToken == IAaveToken(0x6FCE4A401B6B80ACe52baAefE4421Bd188e76F6f)) { // MANA\r\n            return IERC20(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942);\r\n        }\r\n        if (aaveToken == IAaveToken(0x7deB5e830be29F91E298ba5FF1356BB7f8146998)) { // MKR\r\n            return IERC20(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2);\r\n        }\r\n        if (aaveToken == IAaveToken(0x71010A9D003445aC60C4e6A7017c1E89A477B438)) { // REP\r\n            return IERC20(0x1985365e9f78359a9B6AD760e32412f4a445E862);\r\n        }\r\n        if (aaveToken == IAaveToken(0x328C4c80BC7aCa0834Db37e6600A6c49E12Da4DE)) { // SNX\r\n            return IERC20(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F);\r\n        }\r\n        if (aaveToken == IAaveToken(0xFC4B8ED459e00e5400be803A9BB3954234FD50e3)) { // WBTC\r\n            return IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n        }\r\n        if (aaveToken == IAaveToken(0x6Fb0855c404E09c47C3fBCA25f08d4E41f9F062f)) { // ZRX\r\n            return IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498);\r\n        }\r\n\r\n        // Check cache\r\n        IERC20 token = IERC20(cache[address(aaveToken)]);\r\n        if (token == NOT_AAVE_TOKEN) {\r\n            return NOT_FOUND_TOKEN;\r\n        }\r\n        else if (token != NOT_FOUND_TOKEN) {\r\n            return token;\r\n        }\r\n\r\n        // Check dynamically and update cache\r\n        (bool done, bytes memory data) = address(token).staticcall.gas(5000)(\r\n            abi.encodeWithSelector(ERC20Detailed(0).name.selector)\r\n        );\r\n        if (done && data.length > 0) {\r\n            if (data[0] == \"A\" &&\r\n                data[1] == \"a\" &&\r\n                data[2] == \"v\" &&\r\n                data[3] == \"e\" &&\r\n                data[4] == \" \")\r\n            {\r\n                (bool done2, bytes memory data2) = address(aaveToken).staticcall(\r\n                    abi.encodeWithSelector(aaveToken.underlyingAssetAddress.selector)\r\n                );\r\n                if (done2 && data2.length > 0) {\r\n                    IERC20 token2 = abi.decode(data2, (IERC20));\r\n                    cache[address(aaveToken)] = address(token2);\r\n                    return token2;\r\n                }\r\n            }\r\n        }\r\n\r\n        cache[address(aaveToken)] = address(NOT_FOUND_TOKEN);\r\n        return NOT_FOUND_TOKEN;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"NOT_AAVE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NOT_FOUND_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aave\",\"outputs\":[{\"internalType\":\"contract IAaveLendingPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IAaveToken\",\"name\":\"aaveToken\",\"type\":\"address\"}],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getWrapping\",\"outputs\":[{\"internalType\":\"contract IAaveToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveRegistry","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://500c6e2e070cfed34f492160aed63c04c080583909ffd8a7d1c5db3d1fc1a0c8"}]}