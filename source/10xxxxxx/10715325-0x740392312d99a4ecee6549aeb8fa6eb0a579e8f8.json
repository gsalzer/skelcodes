{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Initializable, Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize(address sender) public initializer {\n        _owner = sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.5.0;\n\n\n\n\ncontract PauserRole is Initializable, Context {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    function initialize(address sender) public initializer {\n        if (!isPauser(sender)) {\n            _addPauser(sender);\n        }\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(_msgSender());\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Initializable, Context, PauserRole {\n    /**\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n     * to the deployer.\n     */\n    function initialize(address sender) public initializer {\n        PauserRole.initialize(sender);\n\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/ITraderPaired.sol\n\n// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity >=0.4.21 <0.7.0;\n\ninterface ITraderPaired {\n\n    /// @dev Invest\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _token token address\n    /// @param _amount amount to invest\n    /// @param _type investment type\n    /// @return investment id\n    function invest(address _traderAddress, address _investorAddress, address _token, uint256 _amount, uint8 _type) \n        external\n        returns (uint256);\n\n    /// @dev Trader/Investor stops an investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _from initiator address\n    /// @param _investmentId investment id\n    function stop(address _traderAddress, address _investorAddress, address _from, uint256 _investmentId) \n        external;\n\n    /// @dev Investor requests to exit an investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    function requestExitInvestor(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value) \n        external;\n    \n    /// @dev Trader requests to exit an investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    /// @param _amount transaction amount\n    function requestExitTrader(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value, uint256 _amount) \n        external;\n\n    /// @dev Approve exit of investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _signer Signer address\n    /// @param _investmentId investment id\n    /// @param _token token address\n    /// @param _amount transaction amount\n    function approveExit(address _traderAddress, address _investorAddress, address _signer, uint256 _investmentId, address _token, uint256 _amount) \n        external\n        returns (uint256[3] memory);\n\n    /// @dev Reject exit of investment\n    /// @param _traderAddress trader address\n    /// @param _investmentId investment id\n    /// @param _value proposed investment value\n    /// @param _from initiator address\n    function rejectExit(address _traderAddress, uint256 _investmentId, uint256 _value, address _from)\n        external;\n}\n\n// File: contracts/IPairedInvestments.sol\n\n// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity >=0.4.21 <0.7.0;\n\ninterface IPairedInvestments {\n\n    /// @dev New investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _token token address\n    /// @param _amount amount to invest\n    /// @param _investorProfitPercent percentage profit for investor\n    /// @param _type type of investment\n    /// @return investment id and start date\n    function invest(address _traderAddress, address _investorAddress, address _token, uint256 _amount, uint16 _investorProfitPercent,\n            uint8 _type) \n        external \n        returns(uint256, uint256);\n\n    /// @dev Stop investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @return end date\n    function stop(address _traderAddress, address _investorAddress, uint256 _investmentId) \n        external \n        returns (uint256);\n\n    /// @dev Investor requests investment exit\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    function requestExitInvestor(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value) \n        external;\n\n    /// @dev Trader requests investment exit\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    /// @param _amount transaction amount\n    function requestExitTrader(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value, uint256 _amount) \n        external;\n\n    /// @dev Approve investment exit\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _signer Signer address\n    /// @param _investmentId investment id\n    /// @param _amount transaction amount\n    /// @return array with: trader payout, investor payout, fee payout, original investment amount\n    function approveExit(address _traderAddress, address _investorAddress, address _signer, uint256 _investmentId, uint256 _amount) \n        external  \n        returns (uint256[5] memory);\n\n    /// @dev Reject an exit request\n    /// @param _traderAddress trader address\n    /// @param _investmentId investment id\n    /// @param _value proposed investment value\n    function rejectExit(address _traderAddress, uint256 _investmentId, uint256 _value) \n        external;\n\n\n    /// @dev Calculate investment profits and fees\n    /// @param _value investment value\n    /// @param _amount original investment amount\n    /// @param _traderFeePercent trader fee percent\n    /// @param _investorFeePercent investor fee percent\n    /// @param _investorProfitPercent investor profit percent\n    /// @return array with: trader fee, investor fee, trader profit, investor profit\n    function calculateProfitsAndFees(\n\t\tuint256 _value,\n\t\tuint256 _amount,\n\t\tuint256 _traderFeePercent,\n\t\tuint256 _investorFeePercent,\n\t\tuint256 _investorProfitPercent\n\t) \n        external \n        pure \n        returns (uint256, uint256, uint256, uint256);\n}\n\n// File: contracts/IFactory.sol\n\n// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity >=0.4.21 <0.7.0;\n\ninterface IFactory {\n\n    function isInstantiation(address _instantiation)\n    \texternal\n    \tview\n    \treturns (bool);\n\n    function getInstantiations(address creator)\n        external\n        view\n        returns (address[] memory);\n}\n\n// File: contracts/IMultiSigFundWalletFactory.sol\n\n// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity >=0.4.21 <0.7.0;\n\n\ninterface IMultiSigFundWalletFactory {\n\n    /// @dev Create a new multisig wallet\n    /// @param _fund Fund address\n    /// @param _investor Investor address\n    /// @param _admin Wallet admin address\n    /// @return new wallet address\n    function create(address _fund, address _investor, address _admin)\n        external\n        returns (address);\n}\n\n// File: contracts/IMultiSigFundWallet.sol\n\n// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity >=0.4.21 <0.7.0;\n\ninterface IMultiSigFundWallet {\n\n\t/// @dev get trader status\n    function traders(address _trader)\n        external\n        view\n        returns (bool);\n}\n\n// File: contracts/TraderPaired.sol\n\n// \"SPDX-License-Identifier: UNLICENSED\"\npragma solidity >=0.4.21 <0.7.0;\n\n\n\n\n\n\n\n\n\n\n\ncontract TraderPaired is Initializable, Ownable, Pausable, ITraderPaired {\n\tusing SafeMath for uint256;\n\n    /*\n     *  Constants\n     */\n    address constant ETHER = address(0); // allows storage of ether in blank address in token mapping\n    uint16 constant DEFAULT_COLLATERAL_PERCENTAGE = 2000;\n    uint16 constant DEFAULT_DIRECT_PERCENTAGE = 8000;\n\n    /*\n     *  Storage\n     */\n    address public feeAccount; // account that will receive fees\n\n\n    mapping(address => _Trader) public traders;\n    mapping(address => _Investor) public investors;\n\n    address public multiSigFundWalletFactory;\n    address public pairedInvestments;\n\n    mapping(address => bool) public tokens;\n\n    mapping(address => mapping(uint256 => uint256)) public traderInvestments;\n    mapping(address => mapping(uint256 => uint256)) public investorInvestments;\n    mapping(address => mapping(address => _Allocation)) public allocations;\n\n    mapping(uint256 => address) public traderAddresses;\n    mapping(uint256 => address) public investorAddresses;\n\n    uint256 public traderCount;\n    uint256 public investorCount;\n\n    /*\n     *  Events\n     */\n    event Trader(address indexed user, uint256 traderId, uint16 investorCollateralProfitPercent, uint16 investorDirectProfitPercent, uint256 date);\n    event Investor(address indexed user, uint256 investorId, uint256 date);\n    event ProfitPercentages(address indexed trader, uint16 investorCollateralProfitPercent, uint16 investorDirectProfitPercent);\n    event Investment(address wallet, address indexed investor, uint256 date);\n    event Allocate(address indexed trader, address indexed token, uint256 total, uint256 invested, uint256 date);\n    event Invest(uint256 id, address wallet, address indexed trader, address indexed investor, address token, uint256 amount, uint16 investorProfitPercent, uint8 investmentType, uint256 allocationInvested, uint256 allocationTotal, uint256 date);\n    event Stop(uint256 id, address wallet, address indexed trader, address indexed investor, address from, uint256 date);\n    event RequestExit(uint256 id, address wallet, address indexed trader, address indexed investor, address from, uint256 value, uint256 date);\n    event ApproveExit(uint256 id, address wallet, address indexed trader, address indexed investor, address from, uint256 allocationInvested, uint256 allocationTotal, uint256 date);\n    event RejectExit(uint256 id, address wallet, address indexed trader, uint256 value, address from, uint256 date);\n\n    /*\n     *  Structs\n     */\n    struct _Trader {\n        address user;\n        uint256 investmentCount;\n        uint16 investorCollateralProfitPercent;\n        uint16 investorDirectProfitPercent;\n    }\n\n    struct _Allocation {\n        uint256 total;\n        uint256 invested;\n    }\n\n    struct _Investor {\n        address user;\n        uint256 investmentCount;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier isTrader(address trader) {\n        require(trader != address(0) && traders[trader].user == trader);\n        _;\n    }\n\n    modifier isInvestor(address investor) {\n        require(investor != address(0) && investors[investor].user == investor);\n        _;\n    }\n\n    // modifier notInvested(address trader, address investor) {\n    //     require(!isInvested(trader, investor));\n    //     _;\n    // }\n\n    modifier onlyWallet {\n        require(IFactory(multiSigFundWalletFactory).isInstantiation(msg.sender));\n        _;\n    }\n\n    /// @dev Initialize\n    /// @param _feeAccount fee account\n    function initialize(address _feeAccount) \n        public \n        initializer \n    {\n        Ownable.initialize(msg.sender);\n        Pausable.initialize(msg.sender);\n        feeAccount = _feeAccount;\n    }\n\n    /// @dev set MultiSigFundWalletFactory\n    /// @param _factory contract address\n    function setMultiSigFundWalletFactory(address _factory) \n        public \n        onlyOwner \n    {\n        multiSigFundWalletFactory = _factory;\n    }\n\n    /// @dev set PairedInvestments\n    /// @param _pairedInvestments contract address\n    function setPairedInvestments(address _pairedInvestments) \n        public \n        onlyOwner \n    {\n        pairedInvestments = _pairedInvestments;\n    }\n\n    /// @dev reverts if ether is sent directly\n    function () external {\n        revert();\n    }\n\n    /// @dev activate/deactivate token\n    /// @param _token token address\n    /// @param _valid active or not\n    function setToken(address _token, bool _valid) \n        external \n        onlyOwner \n    {\n        tokens[_token] = _valid;\n    }\n\n    /// @dev Join as trader\n    function joinAsTrader() \n        external \n        whenNotPaused \n    {\n        require(traders[msg.sender].user == address(0));\n        require(investors[msg.sender].user == address(0));\n\n        traders[msg.sender] = _Trader({\n            user: msg.sender, \n            investmentCount: 0,\n            investorCollateralProfitPercent: DEFAULT_COLLATERAL_PERCENTAGE,\n            investorDirectProfitPercent: DEFAULT_DIRECT_PERCENTAGE\n        });\n\n        traderCount = traderCount.add(1);\n        traderAddresses[traderCount] = msg.sender;\n\n        emit Trader(msg.sender, traderCount, DEFAULT_COLLATERAL_PERCENTAGE, DEFAULT_DIRECT_PERCENTAGE, now);\n    }\n\n    /// @dev Join as investor\n    function joinAsInvestor() \n        external \n        whenNotPaused \n    {\n        require(traders[msg.sender].user == address(0));\n        require(investors[msg.sender].user == address(0));\n\n        investors[msg.sender] = _Investor({\n            user: msg.sender,\n            investmentCount: 0\n        });\n\n        investorCount = investorCount.add(1);\n        investorAddresses[investorCount] = msg.sender;\n\n        emit Investor(msg.sender, investorCount, now);\n    }\n\n    /// @dev Allocate amount of tokens\n    /// @param _token token address\n    /// @param _amount amount to allocate\n    function allocate(address _token, uint256 _amount) \n        external \n        whenNotPaused \n    {\n        require(tokens[_token]);\n        _Trader memory _trader = traders[msg.sender];\n        require(_trader.user == msg.sender);\n\n        allocations[msg.sender][_token].total = _amount;\n\n        emit Allocate(msg.sender, _token, _amount, allocations[msg.sender][_token].invested, now);\n    }\n\n    /// @dev Sets profit percentages\n    /// @param _investorCollateralProfitPercent investor profit for collateral investments\n    /// @param _investorDirectProfitPercent investor profit for direct investments\n    function setProfitPercentages(\n            uint16 _investorCollateralProfitPercent, \n            uint16 _investorDirectProfitPercent)\n        external\n        whenNotPaused\n        isTrader(msg.sender)\n    {\n        _Trader storage _trader = traders[msg.sender];\n        _trader.investorCollateralProfitPercent = _investorCollateralProfitPercent;\n        _trader.investorDirectProfitPercent = _investorDirectProfitPercent;\n\n        emit ProfitPercentages(msg.sender, _investorCollateralProfitPercent, _investorDirectProfitPercent);\n    }\n\n    /// @dev Checks if investor is invested with trader\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @return invested\n    // function isInvested(address _traderAddress, address _investorAddress) \n    //     internal\n    //     view\n    //     returns (bool) \n    // {\n    //     address[] memory wallets = IFactory(multiSigFundWalletFactory).getInstantiations(_investorAddress);\n        \n    //     for(uint256 i = 0; i < wallets.length; i++) {\n    //         if (IMultiSigFundWallet(wallets[i]).traders(_traderAddress)) {\n    //             return true;\n    //         }\n    //     }\n\n    //     return false;\n    // }\n\n    /// @dev Checks if investor has a wallet\n    /// @param _investorAddress investor address\n    /// @return has wallet\n    function hasWallet(address _investorAddress) \n        internal\n        view\n        returns (bool) \n    {\n        return IFactory(multiSigFundWalletFactory).isInstantiation(_investorAddress);\n    }\n\n    /// @dev Create new investment wallet\n    function createInvestment() \n        external\n        whenNotPaused\n        isInvestor(msg.sender)\n    {\n        require(!hasWallet(msg.sender));\n        address wallet = IMultiSigFundWalletFactory(multiSigFundWalletFactory).create(address(this), msg.sender, feeAccount);\n        emit Investment(wallet, msg.sender, now);\n    }\n\n    /// @dev Invest\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _token token address\n    /// @param _amount amount to invest\n    /// @param _type investment type\n    /// @return investment id\n    function invest(address _traderAddress, address _investorAddress, address _token, uint256 _amount, uint8 _type) \n        public \n        whenNotPaused \n        onlyWallet \n        returns (uint256 investmentCount)\n    {\n        require(tokens[_token]);\n        _Investor storage _investor = investors[_investorAddress];\n        require(_investor.user == _investorAddress);\n\n        _Trader storage _trader = traders[_traderAddress];\n        require(_trader.user == _traderAddress);\n\n        _Allocation storage allocation = allocations[_trader.user][_token];\n\n        if (_type == 0) {\n            // falls within trader allocations\n            require(allocation.total - allocation.invested >= _amount);\n            allocation.invested = allocation.invested.add(_amount);\n        }\n\n        uint16 _investorProfitPercent = _trader.investorCollateralProfitPercent;\n        if (_type == 1) {\n            _investorProfitPercent = _trader.investorDirectProfitPercent;\n        }\n\n        uint256 starttime;\n        (investmentCount, starttime) = IPairedInvestments(pairedInvestments).invest(\n            _traderAddress, \n            _investorAddress, \n            _token, \n            _amount,\n            _investorProfitPercent,\n            _type\n        );\n\n        _trader.investmentCount = _trader.investmentCount.add(1);\n        traderInvestments[_trader.user][_trader.investmentCount] = investmentCount;\n\n        _investor.investmentCount = _investor.investmentCount.add(1);\n        investorInvestments[_investor.user][_investor.investmentCount] = investmentCount;\n\n        emit Invest(\n            investmentCount,\n            msg.sender,\n            _traderAddress,\n            _investorAddress,\n            _token,\n            _amount,\n            _investorProfitPercent,\n            _type,\n            allocation.invested,\n            allocation.total,\n            starttime\n        );\n    }\n\n    /// @dev Trader/Investor stops an investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _from initiator address\n    /// @param _investmentId investment id\n    function stop(address _traderAddress, address _investorAddress, address _from, uint256 _investmentId) \n        public \n        whenNotPaused \n        onlyWallet \n    {\n        _Trader memory _trader = traders[_traderAddress];\n        require(_trader.user == _traderAddress);\n\n        uint256 stoptime = IPairedInvestments(pairedInvestments).stop(\n            _traderAddress, \n            _investorAddress, \n            _investmentId);\n\n        emit Stop(\n            _investmentId,\n            msg.sender,\n            _traderAddress,\n            _investorAddress,\n            _from,\n            stoptime\n        );\n    }\n\n    /// @dev Investor requests to exit an investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    function requestExitInvestor(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value) \n        public \n        whenNotPaused \n        onlyWallet \n    {\n        _Trader memory _trader = traders[_traderAddress];\n        require(_trader.user == _traderAddress);\n\n        IPairedInvestments(pairedInvestments).requestExitInvestor(\n            _traderAddress, \n            _investorAddress, \n            _investmentId, \n            _value);\n\n        emit RequestExit(\n            _investmentId,\n            msg.sender,\n            _traderAddress,\n            _investorAddress,\n            _investorAddress,\n            _value,\n            now\n        );\n    }\n    \n    /// @dev Trader requests to exit an investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _investmentId investment id\n    /// @param _value investment value\n    /// @param _amount transaction amount\n    function requestExitTrader(address _traderAddress, address _investorAddress, uint256 _investmentId, uint256 _value, uint256 _amount) \n        public \n        whenNotPaused \n        onlyWallet \n    {\n        _Trader memory _trader = traders[_traderAddress];\n        require(_trader.user == _traderAddress);\n\n        IPairedInvestments(pairedInvestments).requestExitTrader(\n            _traderAddress, \n            _investorAddress, \n            _investmentId, \n            _value,\n            _amount);\n\n        emit RequestExit(\n            _investmentId,\n            msg.sender,\n            _traderAddress,\n            _investorAddress,\n            _traderAddress,\n            _value,\n            now\n        );\n    }\n\n    /// @dev Approve exit of investment\n    /// @param _traderAddress trader address\n    /// @param _investorAddress investor address\n    /// @param _signer Signer address\n    /// @param _investmentId investment id\n    /// @param _token token address\n    /// @param _amount transaction amount\n    function approveExit(address _traderAddress, address _investorAddress, address _signer, uint256 _investmentId, address _token, uint256 _amount) \n        public \n        whenNotPaused\n        onlyWallet\n        returns (uint256[3] memory payouts)\n    {\n        _Trader memory _trader = traders[_traderAddress];\n        _Investor memory _investor = investors[_investorAddress];\n        require(_trader.user == _traderAddress);\n        require(_investor.user == _investorAddress);\n\n        uint256[5] memory _result = IPairedInvestments(pairedInvestments).approveExit(\n            _traderAddress,\n            _investorAddress, \n            _signer,\n            _investmentId, \n            _amount);\n\n        _Allocation storage allocation = allocations[_traderAddress][_token];\n\n        if (_result[4] == 0) {\n            allocation.invested = allocation.invested.sub(_result[3]);\n        }\n        \n        payouts[0] = _result[0];\n        payouts[1] = _result[1];\n        payouts[2] = _result[2];\n\n        emit ApproveExit(\n            _investmentId,\n            msg.sender,\n            _traderAddress,\n            _investorAddress,\n            _signer,\n            allocation.invested,\n            allocation.total,\n            now\n        );\n    }\n\n    /// @dev Reject exit of investment\n    /// @param _traderAddress trader address\n    /// @param _investmentId investment id\n    /// @param _value proposed investment value\n    /// @param _from initiator address\n    function rejectExit(address _traderAddress, uint256 _investmentId, uint256 _value, address _from)\n        public \n        whenNotPaused\n        onlyWallet\n    {\n        IPairedInvestments(pairedInvestments).rejectExit(\n            _traderAddress,\n            _investmentId,\n            _value\n        );\n\n        emit RejectExit(\n            _investmentId,\n            msg.sender,\n            _traderAddress,\n            _value,\n            _from,\n            now\n        );\n    }\n\n\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationInvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"ApproveExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"investorProfitPercent\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"investmentType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationInvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Investment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Investor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"investorCollateralProfitPercent\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"investorDirectProfitPercent\",\"type\":\"uint16\"}],\"name\":\"ProfitPercentages\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"RejectExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"RequestExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"traderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"investorCollateralProfitPercent\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"investorDirectProfitPercent\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Trader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveExit\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"payouts\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investmentCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinAsInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinAsTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiSigFundWalletFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pairedInvestments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"rejectExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"requestExitInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestExitTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setMultiSigFundWalletFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairedInvestments\",\"type\":\"address\"}],\"name\":\"setPairedInvestments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_investorCollateralProfitPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_investorDirectProfitPercent\",\"type\":\"uint16\"}],\"name\":\"setProfitPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentId\",\"type\":\"uint256\"}],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traderAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"traderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traderInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"traders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investmentCount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"investorCollateralProfitPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"investorDirectProfitPercent\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TraderPaired","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}