{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Apache-2.0\r\n// Copyright 2017 Loopring Technology Limited.\r\npragma solidity ^0.7.0;\r\n\r\n\r\nlibrary Data\r\n{\r\n    // Optimized to fit into 32 bytes (1 slot)\r\n    struct Guardian\r\n    {\r\n        address addr;\r\n        uint16  group;\r\n        uint40  validSince;\r\n        uint40  validUntil;\r\n    }\r\n}\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n}\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title Wallet\r\n/// @dev Base contract for smart wallets.\r\n///      Sub-contracts must NOT use non-default constructor to initialize\r\n///      wallet states, instead, `init` shall be used. This is to enable\r\n///      proxies to be deployed in front of the real wallet contract for\r\n///      saving gas.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n///\r\n/// The design of this contract is inspired by Argent's contract codebase:\r\n/// https://github.com/argentlabs/argent-contracts\r\ninterface Wallet\r\n{\r\n    function version() external pure returns (string memory);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    /// @dev Set a new owner.\r\n    function setOwner(address newOwner) external;\r\n\r\n    /// @dev Adds a new module. The `init` method of the module\r\n    ///      will be called with `address(this)` as the parameter.\r\n    ///      This method must throw if the module has already been added.\r\n    /// @param _module The module's address.\r\n    function addModule(address _module) external;\r\n\r\n    /// @dev Removes an existing module. This method must throw if the module\r\n    ///      has NOT been added or the module is the wallet's only module.\r\n    /// @param _module The module's address.\r\n    function removeModule(address _module) external;\r\n\r\n    /// @dev Checks if a module has been added to this wallet.\r\n    /// @param _module The module to check.\r\n    /// @return True if the module exists; False otherwise.\r\n    function hasModule(address _module) external view returns (bool);\r\n\r\n    /// @dev Binds a method from the given module to this\r\n    ///      wallet so the method can be invoked using this wallet's default\r\n    ///      function.\r\n    ///      Note that this method must throw when the given module has\r\n    ///      not been added to this wallet.\r\n    /// @param _method The method's 4-byte selector.\r\n    /// @param _module The module's address. Use address(0) to unbind the method.\r\n    function bindMethod(bytes4 _method, address _module) external;\r\n\r\n    /// @dev Returns the module the given method has been bound to.\r\n    /// @param _method The method's 4-byte selector.\r\n    /// @return _module The address of the bound module. If no binding exists,\r\n    ///                 returns address(0) instead.\r\n    function boundMethodModule(bytes4 _method) external view returns (address _module);\r\n\r\n    /// @dev Performs generic transactions. Any module that has been added to this\r\n    ///      wallet can use this method to transact on any third-party contract with\r\n    ///      msg.sender as this wallet itself.\r\n    ///\r\n    ///      This method will emit `Transacted` event if it doesn't throw.\r\n    ///\r\n    ///      Note: this method must ONLY allow invocations from a module that has\r\n    ///      been added to this wallet. The wallet owner shall NOT be permitted\r\n    ///      to call this method directly.\r\n    ///\r\n    /// @param mode The transaction mode, 1 for CALL, 2 for DELEGATECALL.\r\n    /// @param to The desitination address.\r\n    /// @param value The amount of Ether to transfer.\r\n    /// @param data The data to send over using `to.call{value: value}(data)`\r\n    /// @return returnData The transaction's return value.\r\n    function transact(\r\n        uint8    mode,\r\n        address  to,\r\n        uint     value,\r\n        bytes    calldata data\r\n        )\r\n        external\r\n        returns (bytes memory returnData);\r\n}\r\n\r\n\r\n\r\n/// @title DataStore\r\n/// @dev Modules share states by accessing the same storage instance.\r\n///      Using ModuleStorage will achieve better module decoupling.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n///\r\n/// The design of this contract is inspired by Argent's contract codebase:\r\n/// https://github.com/argentlabs/argent-contracts\r\nabstract contract DataStore\r\n{\r\n    modifier onlyWalletModule(address wallet)\r\n    {\r\n        require(Wallet(wallet).hasModule(msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\n// Taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint40 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint40).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     */\r\n    function toUint40(uint256 value) internal pure returns (uint40) {\r\n        require(value < 2**40, \"SafeCast: value doesn\\'t fit in 40 bits\");\r\n        return uint40(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n\r\n/// @title SecurityStore\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n///\r\n/// The design of this contract is inspired by Argent's contract codebase:\r\n/// https://github.com/argentlabs/argent-contracts\r\ncontract SecurityStore is DataStore\r\n{\r\n    using MathUint for uint;\r\n    using SafeCast for uint;\r\n\r\n    struct Wallet\r\n    {\r\n        address    inheritor;\r\n        uint64     lastActive; // the latest timestamp the owner is considered to be active\r\n        address    lockedBy;   // the module that locked the wallet.\r\n        uint64     lock;\r\n\r\n        Data.Guardian[]            guardians;\r\n        mapping (address => uint)  guardianIdx;\r\n    }\r\n\r\n    mapping (address => Wallet) public wallets;\r\n\r\n    constructor() DataStore() {}\r\n\r\n    function isGuardian(\r\n        address wallet,\r\n        address addr\r\n        )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        Data.Guardian memory guardian = getGuardian(wallet, addr);\r\n        return guardian.addr != address(0) && isGuardianActive(guardian);\r\n    }\r\n\r\n    function isGuardianOrPendingAddition(\r\n        address wallet,\r\n        address addr\r\n        )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        Data.Guardian memory guardian = getGuardian(wallet, addr);\r\n        return guardian.addr != address(0) &&\r\n            (isGuardianActive(guardian) || isGuardianPendingAddition(guardian));\r\n    }\r\n\r\n    function getGuardian(\r\n        address wallet,\r\n        address guardianAddr\r\n        )\r\n        public\r\n        view\r\n        returns (Data.Guardian memory)\r\n    {\r\n        uint index = wallets[wallet].guardianIdx[guardianAddr];\r\n        if (index > 0) {\r\n            return wallets[wallet].guardians[index-1];\r\n        }\r\n    }\r\n\r\n    // @dev Returns active guardians.\r\n    function guardians(address wallet)\r\n        public\r\n        view\r\n        returns (Data.Guardian[] memory _guardians)\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n        _guardians = new Data.Guardian[](w.guardians.length);\r\n        uint index = 0;\r\n        for (uint i = 0; i < w.guardians.length; i++) {\r\n            Data.Guardian memory g = w.guardians[i];\r\n            if (isGuardianActive(g)) {\r\n                _guardians[index] = g;\r\n                index ++;\r\n            }\r\n        }\r\n        assembly { mstore(_guardians, index) }\r\n    }\r\n\r\n    // @dev Returns the number of active guardians.\r\n    function numGuardians(address wallet)\r\n        public\r\n        view\r\n        returns (uint count)\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n        for (uint i = 0; i < w.guardians.length; i++) {\r\n            if (isGuardianActive(w.guardians[i])) {\r\n                count ++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // @dev Returns guardians who are either active or pending addition.\r\n    function guardiansWithPending(address wallet)\r\n        public\r\n        view\r\n        returns (Data.Guardian[] memory _guardians)\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n        _guardians = new Data.Guardian[](w.guardians.length);\r\n        uint index = 0;\r\n        for (uint i = 0; i < w.guardians.length; i++) {\r\n            Data.Guardian memory g = w.guardians[i];\r\n            if (isGuardianActive(g) || isGuardianPendingAddition(g)) {\r\n                _guardians[index] = g;\r\n                index ++;\r\n            }\r\n        }\r\n        assembly { mstore(_guardians, index) }\r\n    }\r\n\r\n    // @dev Returns the number of guardians who are active or pending addition.\r\n    function numGuardiansWithPending(address wallet)\r\n        public\r\n        view\r\n        returns (uint count)\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n        for (uint i = 0; i < w.guardians.length; i++) {\r\n            Data.Guardian memory g = w.guardians[i];\r\n            if (isGuardianActive(g) || isGuardianPendingAddition(g)) {\r\n                count ++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addGuardian(\r\n        address wallet,\r\n        address guardianAddr,\r\n        uint    group,\r\n        uint    validSince\r\n        )\r\n        public\r\n        onlyWalletModule(wallet)\r\n    {\r\n        cleanRemovedGuardians(wallet);\r\n\r\n        require(guardianAddr != address(0), \"ZERO_ADDRESS\");\r\n        Wallet storage w = wallets[wallet];\r\n\r\n        uint pos = w.guardianIdx[guardianAddr];\r\n        require(pos == 0, \"GUARDIAN_EXISTS\");\r\n\r\n        // Add the new guardian\r\n        Data.Guardian memory g = Data.Guardian(\r\n            guardianAddr,\r\n            group.toUint16(),\r\n            validSince.toUint40(),\r\n            uint40(0)\r\n        );\r\n        w.guardians.push(g);\r\n        w.guardianIdx[guardianAddr] = w.guardians.length;\r\n    }\r\n\r\n    function cancelGuardianAddition(\r\n        address wallet,\r\n        address guardianAddr\r\n        )\r\n        public\r\n        onlyWalletModule(wallet)\r\n    {\r\n        cleanRemovedGuardians(wallet);\r\n\r\n        Wallet storage w = wallets[wallet];\r\n        uint idx = w.guardianIdx[guardianAddr];\r\n        require(idx > 0, \"GUARDIAN_NOT_EXISTS\");\r\n        require(\r\n            isGuardianPendingAddition(w.guardians[idx - 1]),\r\n            \"NOT_PENDING_ADDITION\"\r\n        );\r\n\r\n        Data.Guardian memory lastGuardian = w.guardians[w.guardians.length - 1];\r\n        if (guardianAddr != lastGuardian.addr) {\r\n            w.guardians[idx - 1] = lastGuardian;\r\n            w.guardianIdx[lastGuardian.addr] = idx;\r\n        }\r\n        w.guardians.pop();\r\n        delete w.guardianIdx[guardianAddr];\r\n    }\r\n\r\n    function removeGuardian(\r\n        address wallet,\r\n        address guardianAddr,\r\n        uint    validUntil\r\n        )\r\n        public\r\n        onlyWalletModule(wallet)\r\n    {\r\n        cleanRemovedGuardians(wallet);\r\n\r\n        Wallet storage w = wallets[wallet];\r\n        uint idx = w.guardianIdx[guardianAddr];\r\n        require(idx > 0, \"GUARDIAN_NOT_EXISTS\");\r\n\r\n        w.guardians[idx - 1].validUntil = validUntil.toUint40();\r\n    }\r\n\r\n    function removeAllGuardians(address wallet)\r\n        public\r\n        onlyWalletModule(wallet)\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n        for (uint i = 0; i < w.guardians.length; i++) {\r\n            delete w.guardianIdx[w.guardians[i].addr];\r\n        }\r\n        delete w.guardians;\r\n    }\r\n\r\n    function cancelGuardianRemoval(\r\n        address wallet,\r\n        address guardianAddr\r\n        )\r\n        public\r\n        onlyWalletModule(wallet)\r\n    {\r\n        cleanRemovedGuardians(wallet);\r\n\r\n        Wallet storage w = wallets[wallet];\r\n        uint idx = w.guardianIdx[guardianAddr];\r\n        require(idx > 0, \"GUARDIAN_NOT_EXISTS\");\r\n\r\n        require(\r\n            isGuardianPendingRemoval(w.guardians[idx - 1]),\r\n            \"NOT_PENDING_REMOVAL\"\r\n        );\r\n\r\n        w.guardians[idx - 1].validUntil = 0;\r\n    }\r\n\r\n    function getLock(address wallet)\r\n        public\r\n        view\r\n        returns (uint _lock, address _lockedBy)\r\n    {\r\n        _lock = wallets[wallet].lock;\r\n        _lockedBy = wallets[wallet].lockedBy;\r\n    }\r\n\r\n    function setLock(\r\n        address wallet,\r\n        uint    lock\r\n        )\r\n        public\r\n        onlyWalletModule(wallet)\r\n    {\r\n        require(lock == 0 || lock > block.timestamp, \"INVALID_LOCK_TIME\");\r\n\r\n        wallets[wallet].lock = lock.toUint64();\r\n        wallets[wallet].lockedBy = msg.sender;\r\n    }\r\n\r\n    function lastActive(address wallet)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return wallets[wallet].lastActive;\r\n    }\r\n\r\n    function touchLastActive(address wallet)\r\n        public\r\n        onlyWalletModule(wallet)\r\n    {\r\n        wallets[wallet].lastActive = uint64(block.timestamp);\r\n    }\r\n\r\n    function inheritor(address wallet)\r\n        public\r\n        view\r\n        returns (\r\n            address _who,\r\n            uint    _lastActive\r\n        )\r\n    {\r\n        _who = wallets[wallet].inheritor;\r\n        _lastActive = wallets[wallet].lastActive;\r\n    }\r\n\r\n    function setInheritor(address wallet, address who)\r\n        public\r\n        onlyWalletModule(wallet)\r\n    {\r\n        wallets[wallet].inheritor = who;\r\n        wallets[wallet].lastActive = uint64(block.timestamp);\r\n    }\r\n\r\n    function cleanRemovedGuardians(address wallet)\r\n        private\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n\r\n        for (int i = int(w.guardians.length) - 1; i >= 0; i--) {\r\n            Data.Guardian memory g = w.guardians[uint(i)];\r\n            if (isGuardianExpired(g)) {\r\n                Data.Guardian memory lastGuardian = w.guardians[w.guardians.length - 1];\r\n\r\n                if (g.addr != lastGuardian.addr) {\r\n                    w.guardians[uint(i)] = lastGuardian;\r\n                    w.guardianIdx[lastGuardian.addr] = uint(i) + 1;\r\n                }\r\n                w.guardians.pop();\r\n                delete w.guardianIdx[g.addr];\r\n            }\r\n        }\r\n    }\r\n\r\n    function isGuardianActive(Data.Guardian memory guardian)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return guardian.validSince > 0 && guardian.validSince <= block.timestamp &&\r\n            !isGuardianExpired(guardian);\r\n    }\r\n\r\n    function isGuardianPendingAddition(Data.Guardian memory guardian)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return guardian.validSince > block.timestamp;\r\n    }\r\n\r\n    function isGuardianPendingRemoval(Data.Guardian memory guardian)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return guardian.validUntil > block.timestamp;\r\n    }\r\n\r\n    function isGuardianExpired(Data.Guardian memory guardian)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return guardian.validUntil > 0 &&\r\n            guardian.validUntil <= block.timestamp;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardianAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validSince\",\"type\":\"uint256\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardianAddr\",\"type\":\"address\"}],\"name\":\"cancelGuardianAddition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardianAddr\",\"type\":\"address\"}],\"name\":\"cancelGuardianRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardianAddr\",\"type\":\"address\"}],\"name\":\"getGuardian\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"group\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"validSince\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"validUntil\",\"type\":\"uint40\"}],\"internalType\":\"struct Data.Guardian\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockedBy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"guardians\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"group\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"validSince\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"validUntil\",\"type\":\"uint40\"}],\"internalType\":\"struct Data.Guardian[]\",\"name\":\"_guardians\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"guardiansWithPending\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"group\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"validSince\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"validUntil\",\"type\":\"uint40\"}],\"internalType\":\"struct Data.Guardian[]\",\"name\":\"_guardians\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"inheritor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lastActive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isGuardianOrPendingAddition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"lastActive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"numGuardians\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"numGuardiansWithPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeAllGuardians\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardianAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"name\":\"removeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setInheritor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lock\",\"type\":\"uint256\"}],\"name\":\"setLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"touchLastActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inheritor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lastActive\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"lockedBy\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lock\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SecurityStore","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a00b123af792d8197e9845f9a511b1903a340c2d3ff42c174c42cffb5d3bb2d8"}]}