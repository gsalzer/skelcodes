{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.2;\r\ninterface HistoricAggregatorInterface {\r\n  function latestAnswer() external returns (int256);\r\n  function latestTimestamp() external returns (uint256);\r\n  function latestRound() external returns (uint256);\r\n  function getAnswer(uint256 roundId) external returns (int256);\r\n  function getTimestamp(uint256 roundId) external returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\ninterface AggregatorInterface is HistoricAggregatorInterface {\r\n  function decimals() external returns (uint8);\r\n  function getRoundData(uint256 _roundId)\r\n    external\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    );\r\n}\r\ncontract AggregatorFacade is AggregatorInterface {\r\n\r\n  HistoricAggregatorInterface public aggregator;\r\n  uint8 public override decimals;\r\n\r\n  constructor(address _aggregator, uint8 _decimals) public {\r\n    aggregator = HistoricAggregatorInterface(_aggregator);\r\n    decimals = _decimals;\r\n  }\r\n\r\n  /**\r\n   * @notice get the latest completed round where the answer was updated\r\n   */\r\n  function latestRound()\r\n    external\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return aggregator.latestRound();\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the current answer from aggregator delegated to.\r\n   */\r\n  function latestAnswer()\r\n    external\r\n    virtual\r\n    override\r\n    returns (int256)\r\n  {\r\n    return aggregator.latestAnswer();\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the last updated height from aggregator delegated to.\r\n   */\r\n  function latestTimestamp()\r\n    external\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return aggregator.latestTimestamp();\r\n  }\r\n\r\n  /**\r\n   * @notice get data about the latest round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt value.\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is always equal to updatedAt because the underlying\r\n   * Aggregator contract does not expose this information.\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is always equal to roundId because the underlying\r\n   * Aggregator contract does not expose this information.\r\n   * @dev Note that for rounds that haven't yet received responses from all\r\n   * oracles, answer and updatedAt may change between queries.\r\n   */\r\n  function latestRoundData()\r\n    external\r\n    virtual\r\n    override\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    )\r\n  {\r\n    return _getRoundData(aggregator.latestRound());\r\n  }\r\n\r\n  /**\r\n   * @notice get past rounds answers\r\n   * @param _roundId the answer number to retrieve the answer for\r\n   */\r\n  function getAnswer(uint256 _roundId)\r\n    external\r\n    virtual\r\n    override\r\n    returns (int256)\r\n  {\r\n    return aggregator.getAnswer(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get block timestamp when an answer was last updated\r\n   * @param _roundId the answer number to retrieve the updated timestamp for\r\n   */\r\n  function getTimestamp(uint256 _roundId)\r\n    external\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return aggregator.getTimestamp(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get data about a round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt value.\r\n   * @param _roundId the round ID to retrieve the round data for\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is always equal to updatedAt because the underlying\r\n   * Aggregator contract does not expose this information.\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is always equal to roundId because the underlying\r\n   * Aggregator contract does not expose this information.\r\n   * @dev Note that for rounds that haven't yet received responses from all\r\n   * oracles, answer and updatedAt may change between queries.\r\n   */\r\n  function getRoundData(uint256 _roundId)\r\n    external\r\n    virtual\r\n    override\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    )\r\n  {\r\n    return _getRoundData(_roundId);\r\n  }\r\n\r\n  /*\r\n   * Internal\r\n   */\r\n\r\n  function _getRoundData(uint256 _roundId)\r\n    internal\r\n    returns (\r\n      uint256 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint256 answeredInRound\r\n    )\r\n  {\r\n    answer = aggregator.getAnswer(_roundId);\r\n    updatedAt = uint64(aggregator.getTimestamp(_roundId));\r\n    if (updatedAt == 0) {\r\n      answeredInRound = 0;\r\n    } else {\r\n      answeredInRound = _roundId;\r\n    }\r\n    return (_roundId, answer, updatedAt, updatedAt, answeredInRound);\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract HistoricAggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"answeredInRound\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"answeredInRound\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AggregatorFacade","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f79d6afbb6da890132f9d7c355e3015f15f3406f0000000000000000000000000000000000000000000000000000000000000008","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a0832eab1e89545d348f0bcfadc36148d2c34807a7b47f2b73af839ef95ea623"}]}