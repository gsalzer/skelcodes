{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/ICryptoETF.sol\r\n\r\npragma solidity 0.6.9;\r\n\r\ninterface ICryptoETF {\r\n    event Purchase(address customer, uint256 usdc, uint256 cetf);\r\n    event Sell(address customer, uint256 usdc, uint256 cetf);\r\n\r\n    function purchase(uint256 _amount, uint256 _deadline) external returns(uint256 amount);\r\n\r\n    function sell(uint256 _amount, uint256 _deadline) external returns(uint256 amount);\r\n\r\n    function rebalance(uint256[] calldata _ratio) external returns(bool success);\r\n\r\n    function expectedCETF(uint256 _baseAmount) external view returns(uint256 cETF);\r\n\r\n    function base() external view returns(address baseToken);\r\n\r\n    function tokens() external view returns(address[] memory token);\r\n\r\n    function ratio(address _token) external view returns(uint256 amount);\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Router01.sol\r\n\r\n/*\r\n * Contract copy and pasted from uniswap github\r\n * https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\r\n */\r\n\r\npragma solidity 0.6.9;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity 0.6.9;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// File: contracts/library/SafeMath.sol\r\n\r\npragma solidity 0.6.9;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/library/Ownable.sol\r\n\r\npragma solidity 0.6.9;\r\n\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed currentOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"Ownable : Function called by unauthorized user.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function owner() external view returns (address ownerAddress) {\r\n        ownerAddress = _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner)\r\n    public\r\n    onlyOwner\r\n    returns (bool success)\r\n    {\r\n        require(newOwner != address(0), \"Ownable/transferOwnership : cannot transfer ownership to zero address\");\r\n        success = _transferOwnership(newOwner);\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner returns (bool success) {\r\n        success = _transferOwnership(address(0));\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal returns (bool success) {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n        success = true;\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/ERC20.sol\r\n\r\npragma solidity 0.6.9;\r\n\r\n\r\nabstract contract ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal _totalSupply;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /*\r\n   * Internal Functions for ERC20 standard logics\r\n   */\r\n\r\n    function _transfer(address from, address to, uint256 amount)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        _balances[from] = _balances[from].sub(\r\n            amount,\r\n            \"ERC20/transfer : cannot transfer more than token owner balance\"\r\n        );\r\n        _balances[to] = _balances[to].add(amount);\r\n        emit Transfer(from, to, amount);\r\n        success = true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n        success = true;\r\n    }\r\n\r\n    function _mint(address recipient, uint256 amount)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(address(0), recipient, amount);\r\n        success = true;\r\n    }\r\n\r\n    function _burn(address burned, uint256 amount)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        _balances[burned] = _balances[burned].sub(\r\n            amount,\r\n            \"ERC20Burnable/burn : Cannot burn more than user's balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(\r\n            amount,\r\n            \"ERC20Burnable/burn : Cannot burn more than totalSupply\"\r\n        );\r\n        emit Transfer(burned, address(0), amount);\r\n        success = true;\r\n    }\r\n\r\n    /*\r\n   * public view functions to view common data\r\n   */\r\n\r\n    function totalSupply() external view returns (uint256 total) {\r\n        total = _totalSupply;\r\n    }\r\n    function balanceOf(address owner) external view returns (uint256 balance) {\r\n        balance = _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining)\r\n    {\r\n        remaining = _allowances[owner][spender];\r\n    }\r\n\r\n    /*\r\n   * External view Function Interface to implement on final contract\r\n   */\r\n    function name() virtual external view returns (string memory tokenName);\r\n    function symbol() virtual external view returns (string memory tokenSymbol);\r\n    function decimals() virtual external view returns (uint8 tokenDecimals);\r\n\r\n    /*\r\n   * External Function Interface to implement on final contract\r\n   */\r\n    function transfer(address to, uint256 amount)\r\n        virtual\r\n        external\r\n        returns (bool success);\r\n    function transferFrom(address from, address to, uint256 amount)\r\n        virtual\r\n        external\r\n        returns (bool success);\r\n    function approve(address spender, uint256 amount)\r\n        virtual\r\n        external\r\n        returns (bool success);\r\n}\r\n\r\n// File: contracts/CryptoETF.sol\r\n\r\npragma solidity 0.6.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CryptoETF is ICryptoETF, ERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 internal _baseToken;\r\n\r\n    IUniswapV2Router01 internal _router;\r\n\r\n    address[] internal _assets;\r\n    mapping(address => uint256) internal _ratio;\r\n\r\n    constructor(address _base, address _uniswapRouter, address[] memory _tokens, uint256[] memory _percentage) public {\r\n        _baseToken = IERC20(_base);\r\n        _router = IUniswapV2Router01(_uniswapRouter);\r\n        _assets = _tokens;\r\n        _setRatio(_percentage);\r\n    }\r\n\r\n    function name() external view override returns(string memory tokenName) {\r\n        tokenName = \"CryptoETF\";\r\n    }\r\n\r\n    function symbol() external view override returns(string memory tokenSymbol) {\r\n        tokenSymbol = \"cETF\";\r\n    }\r\n\r\n    function decimals() external view override returns(uint8 tokenDecimals) {\r\n        tokenDecimals = 18;\r\n    }\r\n\r\n    function base() external view override returns(address token) {\r\n        token = address(_baseToken);\r\n    }\r\n\r\n    function tokens() external view override returns(address[] memory token) {\r\n        token = _assets;\r\n    }\r\n\r\n    function ratio(address _token) external view override returns(uint256 percentage) {\r\n        percentage = _ratio[_token];\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _amount) external override returns(bool success) {\r\n        success =  _transfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) external override returns(bool success) {\r\n        _transfer(_from, _to, _amount);\r\n        _approve(_from, msg.sender, _allowances[_from][msg.sender].sub(_amount));\r\n        success = true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) external override returns(bool success) {\r\n        success = _approve(msg.sender, _spender, _amount);\r\n    }\r\n\r\n    function purchase(uint256 _amount, uint256 _deadline) external override returns(uint256 amount){\r\n        _baseToken.transferFrom(msg.sender, address(this), _amount);\r\n        _baseToken.approve(address(_router), _amount);\r\n        amount = _expectedCETF(_amount);\r\n        for(uint256 i = 0; i < _assets.length ; i++) {\r\n            uint256 baseIn = _getAssetExchangeInput(i, _amount);\r\n            // TODO change expected token output\r\n            // DO NOT use uniswap as price table\r\n            address[] memory path = _toDynamicArray([address(_baseToken), _assets[i]]);\r\n            _router.swapExactTokensForTokens(baseIn, 1, path, address(this), _deadline)[0];\r\n        }\r\n\r\n        _mint(msg.sender, amount);\r\n        emit Purchase(msg.sender, _amount, amount);\r\n    }\r\n\r\n    function expectedCETF(uint256 _baseAmount) external view override returns(uint256 cETF) {\r\n        cETF = _expectedCETF(_baseAmount);\r\n    }\r\n\r\n    function sell(uint256 _amount, uint256 _deadline) external override returns(uint256 amount) {\r\n        uint256 assetValue = _getValueAsBase();\r\n        for(uint256 i = 0; i < _assets.length; i++){\r\n            uint256 received = _sell(i, assetValue, _amount, _deadline);\r\n            amount = amount.add(received);\r\n        }\r\n        _burn(msg.sender, _amount);\r\n        emit Sell(msg.sender, amount, _amount);\r\n    }\r\n\r\n    function rebalance(uint256[] calldata _percentage) external onlyOwner override returns(bool success) {\r\n        _sellAll();\r\n        _setRatio(_percentage);\r\n        _buyAll();\r\n        success = true;\r\n    }\r\n\r\n    function _toDynamicArray(address[2] memory array) internal pure returns(address[] memory dynamic) {\r\n        dynamic = new address[](2);\r\n        dynamic[0] = array[0];\r\n        dynamic[1] = array[1];\r\n    }\r\n\r\n    function _sellAll() internal returns(bool success) {\r\n        for(uint256 i = 0; i < _assets.length; i++){\r\n            address[] memory path = _toDynamicArray([_assets[i], address(_baseToken)]);\r\n            _router.swapExactTokensForTokens(IERC20(_assets[i]).balanceOf(address(this)), 1, path, address(this), now);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _buyAll() internal returns(bool success) {\r\n        for(uint256 i = 0; i < _assets.length; i++) {\r\n            address[] memory path = _toDynamicArray([address(_baseToken), _assets[i]]);\r\n            _router.swapExactTokensForTokens(_getAssetExchangeInput(i,_baseToken.balanceOf(address(this))), 1, path, address(this), now)[0];\r\n        }\r\n    }\r\n\r\n    function _setRatio(uint256[] memory _percentage) internal returns(bool success) {\r\n        require(_percentage.length == _assets.length, \"SetRatio : Input lenght is different to asset length\");\r\n        uint256 sum;\r\n        for(uint256 i = 0; i < _percentage.length; i++) {\r\n            sum = sum.add(_percentage[i]);\r\n            _ratio[_assets[i]] = _percentage[i];\r\n        }\r\n        require(sum == _hundred(), \"SetRatio : Input does not sum to hundred\");\r\n        return true;\r\n    }\r\n\r\n    function _getAssetExchangeInput(uint256 _assetIndex, uint256 _amount) internal view returns(uint256 amount){\r\n        return _amount.mul(_ratio[_assets[_assetIndex]]).div(_hundred());\r\n    }\r\n\r\n    function _sell(uint256 _assetIndex, uint256 _totalValue, uint256 _sellAmount, uint256 _deadline) internal returns(uint256 amount) {\r\n        uint256 tokenIn = IERC20(_assets[_assetIndex]).balanceOf(address(this)).mul(_sellAmount).div(_totalValue);\r\n\r\n        IERC20(_assets[_assetIndex]).approve(address(_router), tokenIn);\r\n        // TODO change expected token output\r\n        // DO NOT use uniswap as price table\r\n        address[] memory path = _toDynamicArray([_assets[_assetIndex], address(_baseToken)]);\r\n        amount = _router.swapExactTokensForTokens(tokenIn, 1, path, msg.sender, _deadline)[0];\r\n    }\r\n\r\n    function _getBaseToAsset(uint256 _assetIndex, uint256 _amount) internal view returns(uint256 amount) {\r\n        return _amount.mul(_ratio[_assets[_assetIndex]]).div(_hundred());\r\n    }\r\n\r\n    function _hundred() internal pure returns(uint256 amount) {\r\n        return 100*(10**18);\r\n    }\r\n\r\n    function _getValueAsBase() internal view returns(uint256 value) {\r\n        // TODO change to use Chain link as price table\r\n        for(uint256 i = 0; i < _assets.length; i++) {\r\n            uint256 assetBalance = IERC20(_assets[i]).balanceOf(address(this));\r\n            if(assetBalance == 0 ){\r\n                continue;\r\n            }else{\r\n                address[] memory path = _toDynamicArray([_assets[i], address(_baseToken)]);\r\n                uint256 baseOut = _router.getAmountsOut(assetBalance, path)[0];\r\n                value = value.add(baseOut);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _expectedCETF(uint256 _baseAmount) internal view returns(uint256 cETF) {\r\n        if(_getValueAsBase() == 0) {\r\n            cETF = _baseAmount;\r\n        } else {\r\n            cETF = _totalSupply.mul(_baseAmount).div(_getValueAsBase());\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentage\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cetf\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cetf\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseAmount\",\"type\":\"uint256\"}],\"name\":\"expectedCETF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cETF\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_percentage\",\"type\":\"uint256[]\"}],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoETF","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c778417e063141139fce010982780140aa0cd5ab000000000000000000000000f164fc0ec4e93095b804a4795bbe1e041497b92a0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000040000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000015af1d78b58c400000000000000000000000000000000000000000000000000015af1d78b58c400000000000000000000000000000000000000000000000000015af1d78b58c400000000000000000000000000000000000000000000000000015af1d78b58c40000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6736e83da7b9b7bed5973ecbbcd765cc3e634c193fc57f0f9564c048ec0b929e"}]}