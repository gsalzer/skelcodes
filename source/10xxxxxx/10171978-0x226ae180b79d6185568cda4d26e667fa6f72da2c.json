{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: Loopring Foundation (Loopring Project Ltd)\n*/\n\npragma solidity ^0.6.6;\n\n\ncontract AddressSet {\n    struct Set\n    {\n        address[] addresses;\n        mapping (address => uint) positions;\n        uint count;\n    }\n    mapping (bytes32 => Set) private sets;\n\n    function addAddressToSet(\n        bytes32 key,\n        address addr,\n        bool maintainList\n        ) internal\n    {\n        Set storage set = sets[key];\n        require(set.positions[addr] == 0, \"ALREADY_IN_SET\");\n        \n        if (maintainList) {\n            require(set.addresses.length == set.count, \"PREVIOUSLY_NOT_MAINTAILED\");\n            set.addresses.push(addr);\n        } else {\n            require(set.addresses.length == 0, \"MUST_MAINTAIN\");\n        }\n\n        set.count += 1;\n        set.positions[addr] = set.count;\n    }\n\n    function removeAddressFromSet(\n        bytes32 key,\n        address addr\n        )\n        internal\n    {\n        Set storage set = sets[key];\n        uint pos = set.positions[addr];\n        require(pos != 0, \"NOT_IN_SET\");\n\n        delete set.positions[addr];\n        set.count -= 1;\n\n        if (set.addresses.length > 0) {\n            address lastAddr = set.addresses[set.count];\n            if (lastAddr != addr) {\n                set.addresses[pos - 1] = lastAddr;\n                set.positions[lastAddr] = pos;\n            }\n            set.addresses.pop();\n        }\n    }\n\n    function removeSet(bytes32 key)\n        internal\n    {\n        delete sets[key];\n    }\n\n    function isAddressInSet(\n        bytes32 key,\n        address addr\n        )\n        internal\n        view\n        returns (bool)\n    {\n        return sets[key].positions[addr] != 0;\n    }\n\n    function numAddressesInSet(bytes32 key)\n        internal\n        view\n        returns (uint)\n    {\n        Set storage set = sets[key];\n        return set.count;\n    }\n\n    function addressesInSet(bytes32 key)\n        internal\n        view\n        returns (address[] memory)\n    {\n        Set storage set = sets[key];\n        require(set.count == set.addresses.length, \"NOT_MAINTAINED\");\n        return sets[key].addresses;\n    }\n}\n\ninterface Wallet {\n    function owner() external view returns (address);\n\n    \n    function setOwner(address newOwner) external;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function setup(address _controller, address _owner, address _boostrapModule) external;\n\n    \n    \n    \n    \n    function addModule(address _module) external;\n\n    \n    \n    \n    function removeModule(address _module) external;\n\n    \n    \n    \n    function modules() external view returns (address[] memory _modules);\n\n    \n    \n    \n    function hasModule(address _module) external view returns (bool);\n\n    \n    \n    \n    \n    \n    \n    \n    function bindMethod(bytes4 _method, address _module) external;\n\n    \n    \n    \n    \n    function boundMethodModule(bytes4 _method) external view returns (address _module);\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function transact(\n        uint8    mode,\n        address  to,\n        uint     value,\n        bytes    calldata data\n        )\n        external\n        returns (bytes memory returnData);\n}\n\ncontract DataStore {\n  modifier onlyWalletModule(address wallet)\n    {\n        require(Wallet(wallet).hasModule(msg.sender), \"UNAUTHORIZED\");\n        _;\n    }\n}\n\ncontract WhitelistStore is DataStore, AddressSet\n{\n    \n    mapping(address => mapping(address => uint)) public effectiveTimeMap;\n\n    event Whitelisted(\n        address indexed wallet,\n        address indexed addr,\n        bool            whitelisted,\n        uint            effectiveTime\n    );\n\n    constructor() public DataStore() {}\n\n    function addToWhitelist(\n        address wallet,\n        address addr,\n        uint    effectiveTime\n        )\n        public\n        onlyWalletModule(wallet)\n    {\n        addAddressToSet(walletKey(wallet), addr, true);\n        uint effective = effectiveTime >= now ? effectiveTime : now;\n        effectiveTimeMap[wallet][addr] = effective;\n        emit Whitelisted(wallet, addr, true, effective);\n    }\n\n    function removeFromWhitelist(\n        address wallet,\n        address addr\n        )\n        public\n        onlyWalletModule(wallet)\n    {\n        removeAddressFromSet(walletKey(wallet), addr);\n        delete effectiveTimeMap[wallet][addr];\n        emit Whitelisted(wallet, addr, false, 0);\n    }\n\n    function whitelist(address wallet)\n        public\n        view\n        returns (\n            address[] memory addresses,\n            uint[]    memory effectiveTimes\n        )\n    {\n        addresses = addressesInSet(walletKey(wallet));\n        effectiveTimes = new uint[](addresses.length);\n        for (uint i = 0; i < addresses.length; i++) {\n            effectiveTimes[i] = effectiveTimeMap[wallet][addresses[i]];\n        }\n    }\n\n    function isWhitelisted(\n        address wallet,\n        address addr\n        )\n        public\n        view\n        returns (\n            bool isWhitelistedAndEffective,\n            uint effectiveTime\n        )\n    {\n        effectiveTime = effectiveTimeMap[wallet][addr];\n        isWhitelistedAndEffective = effectiveTime > 0 && effectiveTime <= now;\n    }\n\n    function whitelistSize(address wallet)\n        public\n        view\n        returns (uint)\n    {\n        return numAddressesInSet(walletKey(wallet));\n    }\n\n    function walletKey(address addr)\n        public\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(\"__WHITELIST__\", addr));\n    }\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"effectiveTimeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWhitelistedAndEffective\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"walletKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"effectiveTimes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"whitelistSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WhitelistStore","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}