{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n// File: contracts/vaults/ValueVaultMaster.sol\r\n\r\n/*\r\n * Here we have a list of constants. In order to get access to an address\r\n * managed by ValueVaultMaster, the calling contract should copy and define\r\n * some of these constants and use them as keys.\r\n * Keys themselves are immutable. Addresses can be immutable or mutable.\r\n *\r\n * Vault addresses are immutable once set, and the list may grow:\r\n * K_VAULT_WETH = 0;\r\n * K_VAULT_ETH_USDC_UNI_V2_LP = 1;\r\n * K_VAULT_ETH_WBTC_UNI_V2_LP = 2;\r\n */\r\n\r\n/*\r\n * ValueVaultMaster manages all the vaults and strategies of our Value Vaults system.\r\n */\r\ncontract ValueVaultMaster {\r\n    address public governance;\r\n\r\n    address public bank;\r\n    address public minorPool;\r\n    address public profitSharer;\r\n\r\n    address public govToken; // VALUE\r\n    address public yfv; // When harvesting, convert some parts to YFV for govVault\r\n    address public usdc; // we only used USDC to estimate APY\r\n\r\n    address public govVault; // YFV -> VALUE, vUSD, vETH and 6.7% profit from Value Vaults\r\n    address public insuranceFund = 0xb7b2Ea8A1198368f950834875047aA7294A2bDAa; // set to Governance Multisig at start\r\n    address public performanceReward = 0x7Be4D5A99c903C437EC77A20CB6d0688cBB73c7f; // set to deploy wallet at start\r\n\r\n    uint256 public constant FEE_DENOMINATOR = 10000;\r\n    uint256 public govVaultProfitShareFee = 670; // 6.7% | VIP-1 (https://yfv.finance/vip-vote/vip_1)\r\n    uint256 public gasFee = 50; // 0.5% at start and can be set by governance decision\r\n\r\n    uint256 public minStakeTimeToClaimVaultReward = 24 hours;\r\n\r\n    mapping(address => bool) public isVault;\r\n    mapping(uint256 => address) public vaultByKey;\r\n\r\n    mapping(address => bool) public isStrategy;\r\n    mapping(uint256 => address) public strategyByKey;\r\n    mapping(address => uint256) public strategyQuota;\r\n\r\n    constructor(address _govToken, address _yfv, address _usdc) public {\r\n        govToken = _govToken;\r\n        yfv = _yfv;\r\n        usdc = _usdc;\r\n        governance = tx.origin;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    // Immutable once set.\r\n    function setBank(address _bank) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(bank == address(0));\r\n        bank = _bank;\r\n    }\r\n\r\n    // Mutable in case we want to upgrade the pool.\r\n    function setMinorPool(address _minorPool) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        minorPool = _minorPool;\r\n    }\r\n\r\n    // Mutable in case we want to upgrade this module.\r\n    function setProfitSharer(address _profitSharer) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        profitSharer = _profitSharer;\r\n    }\r\n\r\n    // Mutable, in case governance want to upgrade VALUE to new version\r\n    function setGovToken(address _govToken) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        govToken = _govToken;\r\n    }\r\n\r\n    // Immutable once added, and you can always add more.\r\n    function addVault(uint256 _key, address _vault) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(vaultByKey[_key] == address(0), \"vault: key is taken\");\r\n\r\n        isVault[_vault] = true;\r\n        vaultByKey[_key] = _vault;\r\n    }\r\n\r\n    // Mutable and removable.\r\n    function addStrategy(uint256 _key, address _strategy) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        isStrategy[_strategy] = true;\r\n        strategyByKey[_key] = _strategy;\r\n    }\r\n\r\n    // Set 0 to disable quota (no limit)\r\n    function setStrategyQuota(address _strategy, uint256 _quota) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategyQuota[_strategy] = _quota;\r\n    }\r\n\r\n    function removeStrategy(uint256 _key) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        isStrategy[strategyByKey[_key]] = false;\r\n        delete strategyByKey[_key];\r\n    }\r\n\r\n    function setGovVault(address _govVault) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        govVault = _govVault;\r\n    }\r\n\r\n    function setInsuranceFund(address _insuranceFund) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        insuranceFund = _insuranceFund;\r\n    }\r\n\r\n    function setPerformanceReward(address _performanceReward) public{\r\n        require(msg.sender == governance, \"!governance\");\r\n        performanceReward = _performanceReward;\r\n    }\r\n\r\n    function setGovVaultProfitShareFee(uint256 _govVaultProfitShareFee) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        govVaultProfitShareFee = _govVaultProfitShareFee;\r\n    }\r\n\r\n    function setGasFee(uint256 _gasFee) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        gasFee = _gasFee;\r\n    }\r\n\r\n    function setMinStakeTimeToClaimVaultReward(uint256 _minStakeTimeToClaimVaultReward) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        minStakeTimeToClaimVaultReward = _minStakeTimeToClaimVaultReward;\r\n    }\r\n\r\n    /**\r\n     * This function allows governance to take unsupported tokens out of the contract.\r\n     * This is in an effort to make someone whole, should they seriously mess up.\r\n     * There is no guarantee governance will vote to return these.\r\n     * It also allows for removal of airdropped tokens.\r\n     */\r\n    function governanceRecoverUnsupported(IERC20x _token, uint256 amount, address to) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _token.transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface IERC20x {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yfv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govVaultProfitShareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20x\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeTimeToClaimVaultReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minorPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitSharer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"setGasFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govToken\",\"type\":\"address\"}],\"name\":\"setGovToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govVault\",\"type\":\"address\"}],\"name\":\"setGovVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_govVaultProfitShareFee\",\"type\":\"uint256\"}],\"name\":\"setGovVaultProfitShareFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insuranceFund\",\"type\":\"address\"}],\"name\":\"setInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeTimeToClaimVaultReward\",\"type\":\"uint256\"}],\"name\":\"setMinStakeTimeToClaimVaultReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minorPool\",\"type\":\"address\"}],\"name\":\"setMinorPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_performanceReward\",\"type\":\"address\"}],\"name\":\"setPerformanceReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_profitSharer\",\"type\":\"address\"}],\"name\":\"setProfitSharer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quota\",\"type\":\"uint256\"}],\"name\":\"setStrategyQuota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyByKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultByKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yfv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ValueVaultMaster","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000049e833337ece7afe375e44f4e3e8481029218e5c00000000000000000000000045f24baeef268bb6d63aee5129015d69702bcdfa000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bebf9162091fc5dd61cb2569737993d3009d66dcc1c72bc111418ff3a2ecd64d"}]}