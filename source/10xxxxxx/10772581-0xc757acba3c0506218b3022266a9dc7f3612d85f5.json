{"status":"1","message":"OK","result":[{"SourceCode":"/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Synthetix: FlexibleStorage.sol\n*\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/FlexibleStorage.sol\n* Docs: https://docs.synthetix.io/contracts/FlexibleStorage\n*\n* Contract Dependencies: \n*\t- ContractStorage\n*\t- IFlexibleStorage\n* Libraries: (none)\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n\n\npragma solidity >=0.4.24;\n\n\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getSynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n\n\n// Internal References\n\n\n// https://docs.synthetix.io/contracts/source/contracts/ContractStorage\ncontract ContractStorage {\n    IAddressResolver public resolverProxy;\n\n    mapping(bytes32 => bytes32) public hashes;\n\n    constructor(address _resolver) internal {\n        // ReadProxyAddressResolver\n        resolverProxy = IAddressResolver(_resolver);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _memoizeHash(bytes32 contractName) internal returns (bytes32) {\n        bytes32 hashKey = hashes[contractName];\n        if (hashKey == bytes32(0)) {\n            // set to unique hash at the time of creation\n            hashKey = keccak256(abi.encodePacked(msg.sender, contractName, block.number));\n            hashes[contractName] = hashKey;\n        }\n        return hashKey;\n    }\n\n    /* ========== VIEWS ========== */\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function migrateContractKey(\n        bytes32 fromContractName,\n        bytes32 toContractName,\n        bool removeAccessFromPreviousContract\n    ) external onlyContract(fromContractName) {\n        require(hashes[fromContractName] != bytes32(0), \"Cannot migrate empty contract\");\n\n        hashes[toContractName] = hashes[fromContractName];\n\n        if (removeAccessFromPreviousContract) {\n            delete hashes[fromContractName];\n        }\n\n        emit KeyMigrated(fromContractName, toContractName, removeAccessFromPreviousContract);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyContract(bytes32 contractName) {\n        address callingContract = resolverProxy.requireAndGetAddress(\n            contractName,\n            \"Cannot find contract in Address Resolver\"\n        );\n        require(callingContract == msg.sender, \"Can only be invoked by the configured contract\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event KeyMigrated(bytes32 fromContractName, bytes32 toContractName, bool removeAccessFromPreviousContract);\n}\n\n\ninterface IFlexibleStorage {\n    // Views\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint);\n\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory);\n\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int);\n\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory);\n\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address);\n\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory);\n\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool);\n\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory);\n\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32);\n\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory);\n\n    // Mutative functions\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\n\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\n\n    function setUIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        uint value\n    ) external;\n\n    function setUIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        uint[] calldata values\n    ) external;\n\n    function setIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        int value\n    ) external;\n\n    function setIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        int[] calldata values\n    ) external;\n\n    function setAddressValue(\n        bytes32 contractName,\n        bytes32 record,\n        address value\n    ) external;\n\n    function setAddressValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        address[] calldata values\n    ) external;\n\n    function setBoolValue(\n        bytes32 contractName,\n        bytes32 record,\n        bool value\n    ) external;\n\n    function setBoolValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bool[] calldata values\n    ) external;\n\n    function setBytes32Value(\n        bytes32 contractName,\n        bytes32 record,\n        bytes32 value\n    ) external;\n\n    function setBytes32Values(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bytes32[] calldata values\n    ) external;\n}\n\n\n// Inheritance\n\n\n// Internal References\n\n\n// https://docs.synthetix.io/contracts/source/contracts/FlexibleStorage\ncontract FlexibleStorage is ContractStorage, IFlexibleStorage {\n    mapping(bytes32 => mapping(bytes32 => uint)) internal uintStorage;\n    mapping(bytes32 => mapping(bytes32 => int)) internal intStorage;\n    mapping(bytes32 => mapping(bytes32 => address)) internal addressStorage;\n    mapping(bytes32 => mapping(bytes32 => bool)) internal boolStorage;\n    mapping(bytes32 => mapping(bytes32 => bytes32)) internal bytes32Storage;\n\n    constructor(address _resolver) public ContractStorage(_resolver) {}\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _setUIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        uint value\n    ) internal {\n        uintStorage[_memoizeHash(contractName)][record] = value;\n        emit ValueSetUInt(contractName, record, value);\n    }\n\n    function _setIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        int value\n    ) internal {\n        intStorage[_memoizeHash(contractName)][record] = value;\n        emit ValueSetInt(contractName, record, value);\n    }\n\n    function _setAddressValue(\n        bytes32 contractName,\n        bytes32 record,\n        address value\n    ) internal {\n        addressStorage[_memoizeHash(contractName)][record] = value;\n        emit ValueSetAddress(contractName, record, value);\n    }\n\n    function _setBoolValue(\n        bytes32 contractName,\n        bytes32 record,\n        bool value\n    ) internal {\n        boolStorage[_memoizeHash(contractName)][record] = value;\n        emit ValueSetBool(contractName, record, value);\n    }\n\n    function _setBytes32Value(\n        bytes32 contractName,\n        bytes32 record,\n        bytes32 value\n    ) internal {\n        bytes32Storage[_memoizeHash(contractName)][record] = value;\n        emit ValueSetBytes32(contractName, record, value);\n    }\n\n    /* ========== VIEWS ========== */\n\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint) {\n        return uintStorage[hashes[contractName]][record];\n    }\n\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory) {\n        uint[] memory results = new uint[](records.length);\n\n        mapping(bytes32 => uint) storage data = uintStorage[hashes[contractName]];\n        for (uint i = 0; i < records.length; i++) {\n            results[i] = data[records[i]];\n        }\n        return results;\n    }\n\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int) {\n        return intStorage[hashes[contractName]][record];\n    }\n\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory) {\n        int[] memory results = new int[](records.length);\n\n        mapping(bytes32 => int) storage data = intStorage[hashes[contractName]];\n        for (uint i = 0; i < records.length; i++) {\n            results[i] = data[records[i]];\n        }\n        return results;\n    }\n\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address) {\n        return addressStorage[hashes[contractName]][record];\n    }\n\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory) {\n        address[] memory results = new address[](records.length);\n\n        mapping(bytes32 => address) storage data = addressStorage[hashes[contractName]];\n        for (uint i = 0; i < records.length; i++) {\n            results[i] = data[records[i]];\n        }\n        return results;\n    }\n\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool) {\n        return boolStorage[hashes[contractName]][record];\n    }\n\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory) {\n        bool[] memory results = new bool[](records.length);\n\n        mapping(bytes32 => bool) storage data = boolStorage[hashes[contractName]];\n        for (uint i = 0; i < records.length; i++) {\n            results[i] = data[records[i]];\n        }\n        return results;\n    }\n\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32) {\n        return bytes32Storage[hashes[contractName]][record];\n    }\n\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory) {\n        bytes32[] memory results = new bytes32[](records.length);\n\n        mapping(bytes32 => bytes32) storage data = bytes32Storage[hashes[contractName]];\n        for (uint i = 0; i < records.length; i++) {\n            results[i] = data[records[i]];\n        }\n        return results;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n    function setUIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        uint value\n    ) external onlyContract(contractName) {\n        _setUIntValue(contractName, record, value);\n    }\n\n    function setUIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        uint[] calldata values\n    ) external onlyContract(contractName) {\n        require(records.length == values.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < records.length; i++) {\n            _setUIntValue(contractName, records[i], values[i]);\n        }\n    }\n\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external onlyContract(contractName) {\n        uint value = uintStorage[hashes[contractName]][record];\n        emit ValueDeletedUInt(contractName, record, value);\n        delete uintStorage[hashes[contractName]][record];\n    }\n\n    function setIntValue(\n        bytes32 contractName,\n        bytes32 record,\n        int value\n    ) external onlyContract(contractName) {\n        _setIntValue(contractName, record, value);\n    }\n\n    function setIntValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        int[] calldata values\n    ) external onlyContract(contractName) {\n        require(records.length == values.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < records.length; i++) {\n            _setIntValue(contractName, records[i], values[i]);\n        }\n    }\n\n    function deleteIntValue(bytes32 contractName, bytes32 record) external onlyContract(contractName) {\n        int value = intStorage[hashes[contractName]][record];\n        emit ValueDeletedInt(contractName, record, value);\n        delete intStorage[hashes[contractName]][record];\n    }\n\n    function setAddressValue(\n        bytes32 contractName,\n        bytes32 record,\n        address value\n    ) external onlyContract(contractName) {\n        _setAddressValue(contractName, record, value);\n    }\n\n    function setAddressValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        address[] calldata values\n    ) external onlyContract(contractName) {\n        require(records.length == values.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < records.length; i++) {\n            _setAddressValue(contractName, records[i], values[i]);\n        }\n    }\n\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external onlyContract(contractName) {\n        address value = addressStorage[hashes[contractName]][record];\n        emit ValueDeletedAddress(contractName, record, value);\n        delete addressStorage[hashes[contractName]][record];\n    }\n\n    function setBoolValue(\n        bytes32 contractName,\n        bytes32 record,\n        bool value\n    ) external onlyContract(contractName) {\n        _setBoolValue(contractName, record, value);\n    }\n\n    function setBoolValues(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bool[] calldata values\n    ) external onlyContract(contractName) {\n        require(records.length == values.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < records.length; i++) {\n            _setBoolValue(contractName, records[i], values[i]);\n        }\n    }\n\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external onlyContract(contractName) {\n        bool value = boolStorage[hashes[contractName]][record];\n        emit ValueDeletedBool(contractName, record, value);\n        delete boolStorage[hashes[contractName]][record];\n    }\n\n    function setBytes32Value(\n        bytes32 contractName,\n        bytes32 record,\n        bytes32 value\n    ) external onlyContract(contractName) {\n        _setBytes32Value(contractName, record, value);\n    }\n\n    function setBytes32Values(\n        bytes32 contractName,\n        bytes32[] calldata records,\n        bytes32[] calldata values\n    ) external onlyContract(contractName) {\n        require(records.length == values.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < records.length; i++) {\n            _setBytes32Value(contractName, records[i], values[i]);\n        }\n    }\n\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external onlyContract(contractName) {\n        bytes32 value = bytes32Storage[hashes[contractName]][record];\n        emit ValueDeletedBytes32(contractName, record, value);\n        delete bytes32Storage[hashes[contractName]][record];\n    }\n\n    /* ========== EVENTS ========== */\n\n    event ValueSetUInt(bytes32 contractName, bytes32 record, uint value);\n    event ValueDeletedUInt(bytes32 contractName, bytes32 record, uint value);\n\n    event ValueSetInt(bytes32 contractName, bytes32 record, int value);\n    event ValueDeletedInt(bytes32 contractName, bytes32 record, int value);\n\n    event ValueSetAddress(bytes32 contractName, bytes32 record, address value);\n    event ValueDeletedAddress(bytes32 contractName, bytes32 record, address value);\n\n    event ValueSetBool(bytes32 contractName, bytes32 record, bool value);\n    event ValueDeletedBool(bytes32 contractName, bytes32 record, bool value);\n\n    event ValueSetBytes32(bytes32 contractName, bytes32 record, bytes32 value);\n    event ValueDeletedBytes32(bytes32 contractName, bytes32 record, bytes32 value);\n}\n\n    ","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fromContractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"toContractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"removeAccessFromPreviousContract\",\"type\":\"bool\"}],\"name\":\"KeyMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"ValueDeletedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ValueDeletedBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"ValueDeletedBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"ValueDeletedInt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ValueDeletedUInt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"ValueSetAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ValueSetBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"ValueSetBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"ValueSetInt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ValueSetUInt\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"deleteAddressValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"deleteBoolValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"deleteBytes32Value\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"deleteIntValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"deleteUIntValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"getAddressValue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"records\",\"type\":\"bytes32[]\"}],\"name\":\"getAddressValues\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"getBoolValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"records\",\"type\":\"bytes32[]\"}],\"name\":\"getBoolValues\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"getBytes32Value\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"records\",\"type\":\"bytes32[]\"}],\"name\":\"getBytes32Values\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"getIntValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"records\",\"type\":\"bytes32[]\"}],\"name\":\"getIntValues\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"getUIntValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"records\",\"type\":\"bytes32[]\"}],\"name\":\"getUIntValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fromContractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"toContractName\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"removeAccessFromPreviousContract\",\"type\":\"bool\"}],\"name\":\"migrateContractKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolverProxy\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setAddressValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"records\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"setAddressValues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBoolValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"records\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"values\",\"type\":\"bool[]\"}],\"name\":\"setBoolValues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setBytes32Value\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"records\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"values\",\"type\":\"bytes32[]\"}],\"name\":\"setBytes32Values\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"setIntValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"records\",\"type\":\"bytes32[]\"},{\"internalType\":\"int256[]\",\"name\":\"values\",\"type\":\"int256[]\"}],\"name\":\"setIntValues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setUIntValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"records\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setUIntValues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FlexibleStorage","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004e3b31eb0e5cb73641ee1e65e7dcefe520ba3ef2","EVMVersion":"Default","Library":"SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}