{"status":"1","message":"OK","result":[{"SourceCode":"/// cat.sol -- Dai liquidation module\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.5.12;\r\n\r\ncontract LibNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  usr,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an 'anonymous' event with a constant 6 words of calldata\r\n            // and four indexed topics: selector, caller, arg1 and arg2\r\n            let mark := msize()                       // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 caller(),                            // msg.sender\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36)                     // arg2\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\ninterface Kicker {\r\n    function kick(address urn, address gal, uint256 tab, uint256 lot, uint256 bid)\r\n        external returns (uint256);\r\n}\r\n\r\ninterface VatLike {\r\n    function ilks(bytes32) external view returns (\r\n        uint256 Art,  // [wad]\r\n        uint256 rate, // [ray]\r\n        uint256 spot, // [ray]\r\n        uint256 line, // [rad]\r\n        uint256 dust  // [rad]\r\n    );\r\n    function urns(bytes32,address) external view returns (\r\n        uint256 ink,  // [wad]\r\n        uint256 art   // [wad]\r\n    );\r\n    function grab(bytes32,address,address,address,int256,int256) external;\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n}\r\n\r\ninterface VowLike {\r\n    function fess(uint256) external;\r\n}\r\n\r\ncontract Cat is LibNote {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"Cat/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Data ---\r\n    struct Ilk {\r\n        address flip;  // Liquidator\r\n        uint256 chop;  // Liquidation Penalty  [wad]\r\n        uint256 dunk;  // Liquidation Quantity [rad]\r\n    }\r\n\r\n    mapping (bytes32 => Ilk) public ilks;\r\n\r\n    uint256 public live;   // Active Flag\r\n    VatLike public vat;    // CDP Engine\r\n    VowLike public vow;    // Debt Engine\r\n    uint256 public box;    // Max Dai out for liquidation        [rad]\r\n    uint256 public litter; // Balance of Dai out for liquidation [rad]\r\n\r\n    // --- Events ---\r\n    event Bite(\r\n      bytes32 indexed ilk,\r\n      address indexed urn,\r\n      uint256 ink,\r\n      uint256 art,\r\n      uint256 tab,\r\n      address flip,\r\n      uint256 id\r\n    );\r\n\r\n    // --- Init ---\r\n    constructor(address vat_) public {\r\n        wards[msg.sender] = 1;\r\n        vat = VatLike(vat_);\r\n        live = 1;\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 constant WAD = 10 ** 18;\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        if (x > y) { z = y; } else { z = x; }\r\n    }\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // --- Administration ---\r\n    function file(bytes32 what, address data) external note auth {\r\n        if (what == \"vow\") vow = VowLike(data);\r\n        else revert(\"Cat/file-unrecognized-param\");\r\n    }\r\n    function file(bytes32 what, uint256 data) external note auth {\r\n        if (what == \"box\") box = data;\r\n        else revert(\"Cat/file-unrecognized-param\");\r\n    }\r\n    function file(bytes32 ilk, bytes32 what, uint256 data) external note auth {\r\n        if (what == \"chop\") ilks[ilk].chop = data;\r\n        else if (what == \"dunk\") ilks[ilk].dunk = data;\r\n        else revert(\"Cat/file-unrecognized-param\");\r\n    }\r\n    function file(bytes32 ilk, bytes32 what, address flip) external note auth {\r\n        if (what == \"flip\") {\r\n            vat.nope(ilks[ilk].flip);\r\n            ilks[ilk].flip = flip;\r\n            vat.hope(flip);\r\n        }\r\n        else revert(\"Cat/file-unrecognized-param\");\r\n    }\r\n\r\n    // --- CDP Liquidation ---\r\n    function bite(bytes32 ilk, address urn) external returns (uint256 id) {\r\n        (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);\r\n        (uint256 ink, uint256 art) = vat.urns(ilk, urn);\r\n\r\n        require(live == 1, \"Cat/not-live\");\r\n        require(spot > 0 && mul(ink, spot) < mul(art, rate), \"Cat/not-unsafe\");\r\n\r\n        Ilk memory milk = ilks[ilk];\r\n        uint256 dart;\r\n        {\r\n            uint256 room = sub(box, litter);\r\n\r\n            // test whether the remaining space in the litterbox is dusty\r\n            require(litter < box && room >= dust, \"Cat/liquidation-limit-hit\");\r\n\r\n            dart = min(art, mul(min(milk.dunk, room), WAD) / rate / milk.chop);\r\n        }\r\n\r\n        uint256 dink = min(ink, mul(ink, dart) / art);\r\n\r\n        require(dart >  0      && dink >  0     , \"Cat/null-auction\");\r\n        require(dart <= 2**255 && dink <= 2**255, \"Cat/overflow\"    );\r\n\r\n        // This may leave the CDP in a dusty state\r\n        vat.grab(\r\n            ilk, urn, address(this), address(vow), -int256(dink), -int256(dart)\r\n        );\r\n        vow.fess(mul(dart, rate));\r\n\r\n        { // Avoid stack too deep\r\n            // This calcuation will overflow if dart*rate exceeds ~10^14,\r\n            // i.e. the maximum dunk is roughly 100 trillion DAI.\r\n            uint256 tab = mul(mul(dart, rate), milk.chop) / WAD;\r\n            litter = add(litter, tab);\r\n\r\n            id = Kicker(milk.flip).kick({\r\n                urn: urn,\r\n                gal: address(vow),\r\n                tab: tab,\r\n                lot: dink,\r\n                bid: 0\r\n            });\r\n        }\r\n\r\n        emit Bite(ilk, urn, dink, dart, mul(dart, rate), milk.flip, id);\r\n    }\r\n\r\n    function claw(uint256 rad) external note auth {\r\n        litter = sub(litter, rad);\r\n    }\r\n\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ink\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"art\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Bite\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg1\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"}],\"name\":\"bite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"box\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"claw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"flip\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ilks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"flip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dunk\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"litter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vow\",\"outputs\":[{\"internalType\":\"contract VowLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Cat","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://68f2c3d8a5742ec27c244bba55066e4ca69706ce06ec5e2ce417af2ab7627066"}]}