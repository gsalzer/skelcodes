{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-05-17\r\n*/\r\n\r\n/**\r\n Dedicated to the Partners and friends of EthSkytrix Mattrix, Ethskytrix Exchange, Eskt token. CZ , Justin, Unaalowd and more.\r\n Also dedicated to the victims of covid19 2020 .\r\nCopy righted in Australia.\r\n*/\r\n\r\npragma solidity 0.5.11;\r\n\r\ncontract ERC20Interface{\r\n        function transfer(address _address, uint _value) public returns (bool success){}\r\n        function balanceOf(address _address)view public returns(uint);\r\n}\r\n\r\ncontract    Ethskytrix {\r\n    address payable ownerWallet;\r\n    address charge;\r\n    ERC20Interface public token;\r\n    uint LEVEL_TOKEN;\r\n\r\n/**\r\n Designed developed by wisemen Seach Australia p726789@gmailcom\r\n*/\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        address[] referral;\r\n        mapping(uint => uint) levelExpired;\r\n        uint tokensEarned;\r\n    }\r\n\r\n    uint REFERRER_1_LEVEL_LIMIT = 2;\r\n    uint PERIOD_LENGTH = 100 days;\r\n    uint sC = 0.003 ether;\r\n    uint aC;\r\n  \r\n\r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n    //mapping(uint => uint) public LEVEL_TOKEN;\r\n\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    uint public currUserID = 0;\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    event getTokenForLevelEvent(address _user, uint amount, uint level);\r\n\r\n\r\n    constructor(ERC20Interface _token, address _charge) public {\r\n        token = _token;\r\n        charge = _charge;\r\n        ownerWallet = msg.sender;\r\n\r\n        LEVEL_PRICE[1] = 0.05 ether;\r\n        LEVEL_PRICE[2] = 0.075 ether;\r\n        LEVEL_PRICE[3] = 0.1 ether;\r\n        LEVEL_PRICE[4] = 0.3 ether;\r\n        LEVEL_PRICE[5] = 0.8 ether;\r\n        LEVEL_PRICE[6] = 1.6 ether;\r\n        LEVEL_PRICE[7] = 3 ether;\r\n        LEVEL_TOKEN = 100;\r\n        \r\n        \r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            referral: new address[](0),\r\n            tokensEarned: 0\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n\r\n       \r\n        for(uint i = 1; i <= 7; i++) {\r\n            users[ownerWallet].levelExpired[i] = 56565656565;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    modifier onlyOwner(){\r\n    \r\n    require(msg.sender== ownerWallet, \"Only owner address can call this function\");\r\n    \r\n    _;}\r\n\r\n    function () external payable {\r\n        uint level;\r\n\r\n        if(msg.value == LEVEL_PRICE[1]) level = 1;\r\n        else if(msg.value == LEVEL_PRICE[2]) level = 2;\r\n        else if(msg.value == LEVEL_PRICE[3]) level = 3;\r\n        else if(msg.value == LEVEL_PRICE[4]) level = 4;\r\n        else if(msg.value == LEVEL_PRICE[5]) level = 5;\r\n        else if(msg.value == LEVEL_PRICE[6]) level = 6;\r\n        else if(msg.value == LEVEL_PRICE[7]) level = 7;\r\n       \r\n        else revert('Incorrect Value send');\r\n\r\n        if(users[msg.sender].isExist) buyLevel(level);\r\n        else if(level == 1) {\r\n            uint refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if(users[referrer].isExist) refId = users[referrer].id;\r\n            else revert('Incorrect referrer');\r\n\r\n            regUser(refId);\r\n        }\r\n        else revert('Please buy first level at the given price');\r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable {\r\n        //require(address(oldSC) == address(0), 'Initialize not finished');\r\n        require(!users[msg.sender].isExist, 'User exist');\r\n        require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referrer Id');\r\n        require(msg.value == LEVEL_PRICE[1], 'Incorrect Value');\r\n\r\n        if(users[userList[_referrerID]].referral.length >= REFERRER_1_LEVEL_LIMIT) _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            referral: new address[](0),\r\n            tokensEarned:0\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender);\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyLevel(uint _level) public payable {\r\n        require(users[msg.sender].isExist, 'User not exist'); \r\n        require(_level > 0 && _level <= 4, 'Incorrect level');\r\n        // require(_level > 0 && _level <= 10, 'Incorrect level');\r\n\r\n        if(_level == 1) {\r\n            require(msg.value == LEVEL_PRICE[1], 'Incorrect Value');\r\n            users[msg.sender].levelExpired[1] += PERIOD_LENGTH;\r\n        }\r\n        else {\r\n            require(msg.value == LEVEL_PRICE[_level], 'Incorrect Value');\r\n\r\n            for(uint l =_level - 1; l > 0; l--) require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');\r\n\r\n            if(users[msg.sender].levelExpired[_level] == 0) users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            else users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n        }\r\n\r\n        payForLevel(_level, msg.sender);\r\n\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n    \r\n\r\n\r\n    function payForLevel(uint _level, address _user) internal {\r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        address referer4;\r\n        address referer5;\r\n        address referer6;\r\n        \r\n        \r\n         if(_level == 1) {\r\n            referer = userList[users[_user].referrerID];\r\n        }\r\n        else if(_level == 2) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        }\r\n        else if(_level == 3) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        }\r\n        else if(_level == 4) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        }\r\n       \r\n        else if(_level == 5) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer4 = userList[users[referer3].referrerID];\r\n            referer = userList[users[referer4].referrerID];\r\n        }\r\n        \r\n        else if(_level == 6) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer4 = userList[users[referer3].referrerID];\r\n            referer5 = userList[users[referer4].referrerID];\r\n            referer = userList[users[referer5].referrerID];\r\n        }\r\n        \r\n        else if(_level == 7) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer4 = userList[users[referer3].referrerID];\r\n            referer5 = userList[users[referer4].referrerID];\r\n            referer6 = userList[users[referer5].referrerID];\r\n            referer = userList[users[referer6].referrerID];\r\n        }\r\n\r\n\r\n        if(!users[referer].isExist) referer = userList[1];\r\n\r\n        bool sent = false;\r\n        bool sCC = false;\r\n        bool sendToken = false;\r\n        if(users[referer].levelExpired[_level] >= now) {\r\n            \r\n            aC = LEVEL_PRICE[_level] - sC;\r\n            sent = address(uint160(referer)).send(aC);\r\n            \r\n            sCC = address(uint160(charge)).send(sC);\r\n\r\n            if (sent) {\r\n                emit getMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n                \r\n                uint tokenAmount = LEVEL_TOKEN; \r\n                if(token.balanceOf(address(this)) >= tokenAmount){sendToken = token.transfer(msg.sender, tokenAmount);\r\n                \r\n                         if (sendToken) {\r\n                        // Emit an event\r\n                        emit getTokenForLevelEvent(msg.sender, tokenAmount, _level);\r\n                    }\r\n                    \r\n                }\r\n               \r\n                require(msg.value > 0, 'Invalid Amount, you will only waste gas but not able to purchase');\r\n              \r\n              }\r\n           \r\n        }\r\n        if(!sent) {\r\n            emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n\r\n            payForLevel(_level, referer);\r\n        }\r\n    }\r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referral.length < REFERRER_1_LEVEL_LIMIT) return _user;\r\n\r\n        address[] memory referrals = new address[](126); \r\n        referrals[0] = users[_user].referral[0];\r\n        referrals[1] = users[_user].referral[1];\r\n        //these are the first two referrals\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i = 0; i < 126; i++) {\r\n            if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) { \r\n                if(i < 62) {\r\n                    referrals[(i+1)*2] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*2+1] = users[referrals[i]].referral[1];\r\n                }\r\n            }\r\n            else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(!noFreeReferrer, 'No Free Referrer');\r\n\r\n        return freeReferrer;\r\n    }\r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n        return users[_user].levelExpired[_level];\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n    \r\n      function tokenBalance (address _address) public view returns (uint){\r\n    return token.balanceOf(_address);\r\n  }\r\n  \r\n  \r\n  function clean() onlyOwner public returns (uint){\r\n     \r\n      uint eth = address(this).balance;\r\n      ownerWallet.transfer(eth);\r\n  }\r\n  \r\n   function sendToken(address _address, uint _amount) onlyOwner public payable {\r\n        \r\n        require(token.balanceOf(address(this)) >= _amount, 'Insufficient Token');\r\n        \r\n        token.transfer(_address, _amount); //send token to address\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clean\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charge\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getTokenForLevelEvent\",\"type\":\"event\"}]","ContractName":"Ethskytrix","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fec7ed9177547b6bfe425fecf8d0b7d65169134a00000000000000000000000093b7fddbdce131e33a51f940f97dd0010486e192","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://343581c73861e59ce4c9021ec5220e979b91d2fb7bc5e0785fa1f9fb603b3560"}]}