{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/* SNAILTHRONE\r\n\r\n// SnailFarm + Pyramid + Fomo\r\n\r\n// Buy and sell snails, pyramid tokens, directly from the contract\r\n// Snail holders receive proportional dividends from buys and hatches\r\n// Token price correlates with snail max supply\r\n\r\n// Snails produce eggs, at a rate of 8% per day\r\n// Up to a maximum equal to the amount of snails the player owns\r\n// Players can hatch these eggs to turn them into more tokens\r\n// Hatching comes at half the cost of buying tokens\r\n// Players can also sacrifice their eggs to the FrogKing for an ETH reward\r\n\r\n// On buy, incoming ETH is distributed as such:\r\n// 50% saved for the SnailPot (token price on sale)\r\n// 20% in divs\r\n// 20% go to the FrogPot\r\n// 2% is given to the current Pharaoh\r\n// 2% goes to the SnailGod pot\r\n// 6% goes to the referral. lacking ref, it goes to the SnailGod pot\r\n\r\n// On hatch, incoming ETH is distributed as follows:\r\n// 40% in divs\r\n// 40% go to the FrogPot\r\n// 4% is given to the current Pharaoh\r\n// 16% goes to the SnailGod pot\r\n\r\n// SNAILPOT \r\n// Snails can be sold to the SnailPot for ether \r\n// Price per snail is 50% of the current buy price \r\n// No more than 10% of the SnailPot can be drained in one sale \r\n\r\n// FROGPOT\r\n// Feeding eggs to the frogking grants a reward \r\n// Ether earned = frogpot * eggs fed / total snails\r\n\r\n// SNAILGOD\r\n// The ultimate reward of the game, on a 24 hours timer\r\n// Sacrifice a minimum of 40 snails to become the Pharaoh\r\n// While the Pharaoh sits on the throne, he receives 2% ETH of every buy\r\n// A successful sacrifice will bump the timer back up by 8 minutes\r\n// and set the minimum snail requirement to 40 + this sacrifice\r\n// This number lowers back down to 40 over time\r\n// Once the timer hits 0, whoever holds the Pharaoh title ascends to godhood\r\n// The SnailGod can instantly claim 50% of the SnailGod pot\r\n// Timer resets at 24 hours, minimum sacrifice resets at 40 snails \r\n// and the previous Pharaoh takes the throne until a contender sacrifices enough snails\r\n\r\n// REFERRALS\r\n// Unlocked by owning at least 300 snails\r\n// Every buy through a referral link gives 6% to the referred address\r\n// Addresses aren't bound to their referral link\r\n// Referrals don't profit from hatching eggs\r\n\r\n*/\r\n\r\ncontract SnailThrone {\r\n    using SafeMath for uint;\r\n    \r\n    /* Events */\r\n    \r\n    event WithdrewEarnings (address indexed player, uint ethreward);\r\n    event ClaimedDivs (address indexed player, uint ethreward);\r\n    event BoughtSnail (address indexed player, uint ethspent, uint snail);\r\n    event SoldSnail (address indexed player, uint ethreward, uint snail);\r\n    event HatchedSnail (address indexed player, uint ethspent, uint snail);\r\n    event FedFrogking (address indexed player, uint ethreward, uint egg);\r\n    event Ascended (address indexed player, uint ethreward, uint indexed round);\r\n    event BecamePharaoh (address indexed player, uint indexed round);\r\n    event NewDivs (uint ethreward);\r\n    \r\n    /* Constants */\r\n    \r\n    uint256 public GOD_TIMER_START      = 86400; //seconds, or 24 hours\r\n\tuint256 public PHARAOH_REQ_START    = 40; //number of snails to become pharaoh\r\n    uint256 public GOD_TIMER_INTERVAL   = 12; //seconds to remove one snail from req\r\n\tuint256 public GOD_TIMER_BOOST\t\t= 480; //seconds added to timer with new pharaoh\r\n    uint256 public TIME_TO_HATCH_1SNAIL = 1080000; //8% daily\r\n    uint256 public TOKEN_PRICE_FLOOR    = 0.00002 ether; //4 zeroes\r\n    uint256 public TOKEN_PRICE_MULT     = 0.00000000001 ether; //10 zeroes\r\n    uint256 public TOKEN_MAX_BUY        = 4 ether; //max allowed eth in one buy transaction\r\n    uint256 public SNAIL_REQ_REF        = 300; //number of snails for ref link to be active\r\n\t\r\n    /* Variables */\r\n    \r\n    //Becomes true one time to start the game\r\n    bool public gameStarted             = false;\r\n    \r\n    //Used to ensure a proper game start\r\n    address public gameOwner;\r\n    \r\n    //SnailGod round, amount, timer\r\n    uint256 public godRound             = 0;\r\n    uint256 public godPot               = 0;\r\n    uint256 public godTimer             = 0;\r\n    \r\n    //Current Pharaoh\r\n    address public pharaoh;\r\n    \r\n    //Last time throne was claimed or pharaohReq was computed\r\n    uint256 public lastClaim;\r\n    \r\n    //Snails required to become the Pharaoh\r\n    uint256 public pharaohReq           = PHARAOH_REQ_START;\r\n    \r\n    //Total number of snail tokens\r\n    uint256 public maxSnail             = 0;\r\n    \r\n    //Egg sell fund\r\n    uint256 public frogPot              = 0;\r\n    \r\n    //Token sell fund\r\n    uint256 public snailPot             = 0;\r\n    \r\n    //Current divs per snail\r\n    uint256 public divsPerSnail         = 0;\r\n    \t\r\n    /* Mappings */\r\n    \r\n    mapping (address => uint256) public hatcherySnail;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => uint256) public playerEarnings;\r\n    mapping (address => uint256) public claimedDivs;\r\n\t\r\n    /* Functions */\r\n    \r\n    // ACTIONS\r\n    \r\n    // Constructor\r\n    // Sets msg.sender as gameOwner to start the game properly\r\n    \r\n    constructor() public {\r\n        gameOwner = msg.sender;\r\n    }\r\n\r\n    // StartGame\r\n    // Initialize godTimer\r\n    // Set pharaoh and lastPharaoh as gameOwner\r\n    // Buy tokens for value of message\r\n    \r\n    function StartGame() public payable {\r\n        require(gameStarted == false);\r\n        require(msg.sender == gameOwner);\r\n        \r\n        godTimer = now + GOD_TIMER_START;\r\n        godRound = 1;\r\n        gameStarted = true;\r\n        pharaoh = gameOwner;\r\n        lastClaim = now;\r\n        BuySnail(msg.sender);\r\n    }\r\n    \r\n    // WithdrawEarnings\r\n    // Sends all player ETH earnings to his wallet\r\n    \r\n    function WithdrawEarnings() public {\r\n        require(playerEarnings[msg.sender] > 0);\r\n        \r\n        uint256 _amount = playerEarnings[msg.sender];\r\n        playerEarnings[msg.sender] = 0;\r\n        msg.sender.transfer(_amount);\r\n        \r\n        emit WithdrewEarnings(msg.sender, _amount);\r\n    }\r\n    \r\n    // ClaimDivs\r\n    // Sends player dividends to his playerEarnings\r\n    // Adjusts claimable dividends\r\n    \r\n    function ClaimDivs() public {\r\n        \r\n        uint256 _playerDivs = ComputeMyDivs();\r\n        \r\n        if(_playerDivs > 0) {\r\n            //Add new divs to claimed divs\r\n            claimedDivs[msg.sender] = claimedDivs[msg.sender].add(_playerDivs);\r\n            \r\n            //Send divs to playerEarnings\r\n            playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_playerDivs);\r\n            \r\n            emit ClaimedDivs(msg.sender, _playerDivs);\r\n        }\r\n    }\r\n    \r\n    // BuySnail \r\n    \r\n    function BuySnail(address _ref) public payable {\r\n        require(gameStarted == true, \"game hasn't started yet\");\r\n        require(tx.origin == msg.sender, \"contracts not allowed\");\r\n        require(msg.value <= TOKEN_MAX_BUY, \"maximum buy = 4 ETH\");\r\n        \r\n        //Calculate price and resulting snails\r\n        uint256 _snailsBought = ComputeBuy(msg.value);\r\n        \r\n        //Adjust player claimed divs\r\n        claimedDivs[msg.sender] = claimedDivs[msg.sender].add(_snailsBought.mul(divsPerSnail));\r\n        \r\n        //Change maxSnail before new div calculation\r\n        maxSnail = maxSnail.add(_snailsBought);\r\n        \r\n        //Divide incoming ETH\r\n        PotSplit(msg.value, _ref, true);\r\n        \r\n        //Set last hatch to current timestamp\r\n        lastHatch[msg.sender] = now;\r\n        \r\n        //Add player snails\r\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(_snailsBought);\r\n        \r\n        emit BoughtSnail(msg.sender, msg.value, _snailsBought);\r\n    }\r\n    \r\n    // SellSnail\r\n    \r\n    function SellSnail(uint256 _tokensSold) public {\r\n        require(gameStarted == true, \"game hasn't started yet\");\r\n        require(hatcherySnail[msg.sender] >= _tokensSold, \"not enough snails to sell\");\r\n        \r\n        //Call ClaimDivs so ETH isn't blackholed\r\n        ClaimDivs();\r\n\r\n        //Check token price, sell price is half of current buy price\r\n        uint256 _tokenSellPrice = ComputeTokenPrice();\r\n        _tokenSellPrice = _tokenSellPrice.div(2);\r\n        \r\n        //Check maximum ETH that can be obtained = 10% of SnailPot\r\n        uint256 _maxEth = snailPot.div(10);\r\n        \r\n        //Check maximum amount of tokens that can be sold\r\n        uint256 _maxTokens = _maxEth.div(_tokenSellPrice);\r\n        \r\n        //Check if player tried to sell too many tokens\r\n        if(_tokensSold > _maxTokens) {\r\n            _tokensSold = _maxTokens;\r\n        }\r\n        \r\n        //Calculate sell reward, tokens * price per token\r\n        uint256 _sellReward = _tokensSold.mul(_tokenSellPrice);\r\n        \r\n        //Remove reserve ETH \r\n        snailPot = snailPot.sub(_sellReward);\r\n        \r\n        //Remove tokens\r\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].sub(_tokensSold);\r\n        maxSnail = maxSnail.sub(_tokensSold);\r\n        \r\n        //Adjust player claimed divs\r\n        claimedDivs[msg.sender] = claimedDivs[msg.sender].sub(divsPerSnail.mul(_tokensSold));\r\n        \r\n        //Give ETH to player \r\n        playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_sellReward);\r\n        \r\n        emit SoldSnail(msg.sender, _sellReward, _tokensSold);\r\n    }\r\n    \r\n    // HatchEgg\r\n    // Turns player eggs into snails\r\n    // Costs half the ETH of a normal buy\r\n    \r\n    function HatchEgg() public payable {\r\n        require(gameStarted == true, \"game hasn't started yet\");\r\n        require(msg.value > 0, \"need ETH to hatch eggs\");\r\n        \r\n        //Check how many eggs the ether sent can pay for\r\n        uint256 _tokenPrice = ComputeTokenPrice().div(2);\r\n        uint256 _maxHatch = msg.value.div(_tokenPrice);\r\n        \r\n        //Check number of eggs to hatch\r\n        uint256 _newSnail = ComputeMyEggs(msg.sender);\r\n        \r\n        //Multiply by token price\r\n        uint256 _snailPrice = _tokenPrice.mul(_newSnail);\r\n        \r\n        //Refund any extra ether\r\n        uint256 _ethUsed = msg.value;\r\n                \r\n        if (msg.value > _snailPrice) {\r\n            uint256 _refund = msg.value.sub(_snailPrice);\r\n            playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_refund);\r\n            _ethUsed = _snailPrice;\r\n        }\r\n        \r\n        //Adjust new snail amount if not enough ether \r\n        if (msg.value < _snailPrice) {\r\n            _newSnail = _maxHatch;\r\n        }\r\n        \r\n        //Adjust player divs\r\n        claimedDivs[msg.sender] = claimedDivs[msg.sender].add(_newSnail.mul(divsPerSnail));\r\n        \r\n        //Change maxSnail before div calculation\r\n        maxSnail = maxSnail.add(_newSnail);\r\n        \r\n        //Divide incoming ETH \r\n        PotSplit(_ethUsed, msg.sender, false);\r\n        \r\n        //Add new snails\r\n        lastHatch[msg.sender] = now;\r\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(_newSnail);\r\n        \r\n        emit HatchedSnail(msg.sender, _ethUsed, _newSnail);\r\n    }\r\n    \r\n    // PotSplit\r\n    // Called on buy and hatch\r\n    \r\n    function PotSplit(uint256 _msgValue, address _ref, bool _buy) private {\r\n        \r\n        //On token buy, 50% of the ether goes to snailpot\r\n        //On hatch, no ether goes to the snailpot\r\n        uint256 _eth = _msgValue;\r\n        \r\n        if (_buy == true) {\r\n            _eth = _msgValue.div(2);\r\n            snailPot = snailPot.add(_eth);\r\n        }\r\n        \r\n        //20% distributed as divs (40% on hatch)\r\n        divsPerSnail = divsPerSnail.add(_eth.mul(2).div(5).div(maxSnail));\r\n        \r\n        //20% to FrogPot (40% on hatch)\r\n        frogPot = frogPot.add(_eth.mul(2).div(5));\r\n        \r\n        //2% to Pharaoh (4% on hatch)\r\n        playerEarnings[pharaoh] = playerEarnings[pharaoh].add(_eth.mul(2).div(50));\r\n        \r\n        //2% to SnailGod pot (4% on hatch)\r\n        godPot = godPot.add(_eth.mul(2).div(50));\r\n        \r\n        //Check for referrals (300 snails required)\r\n        //Give 6% to referrer if there is one\r\n        //Else give 6% to SnailGod pot\r\n        //Always give 12% to SnailGod pot on hatch\r\n        if (_ref != msg.sender && hatcherySnail[_ref] >= SNAIL_REQ_REF) {\r\n            playerEarnings[_ref] = playerEarnings[_ref].add(_eth.mul(6).div(50));\r\n        } else {\r\n            godPot = godPot.add(_eth.mul(6).div(50));\r\n        }\r\n    }\r\n    \r\n    // FeedEgg\r\n    // Sacrifices the player's eggs to the FrogPot\r\n    // Gives ETH in return\r\n    \r\n    function FeedEgg() public {\r\n        require(gameStarted == true, \"game hasn't started yet\");\r\n        \r\n        //Check number of eggs to hatch\r\n        uint256 _eggsUsed = ComputeMyEggs(msg.sender);\r\n        \r\n        //Remove eggs\r\n        lastHatch[msg.sender] = now;\r\n        \r\n        //Calculate ETH earned\r\n        uint256 _reward = _eggsUsed.mul(frogPot).div(maxSnail);\r\n        frogPot = frogPot.sub(_reward);\r\n        playerEarnings[msg.sender] = playerEarnings[msg.sender].add(_reward);\r\n        \r\n        emit FedFrogking(msg.sender, _reward, _eggsUsed);\r\n    }\r\n    \r\n    // AscendGod\r\n    // Distributes SnailGod pot to winner, restarts timer \r\n    \r\n    function AscendGod() public {\r\n\t\trequire(gameStarted == true, \"game hasn't started yet\");\r\n        require(now >= godTimer, \"pharaoh hasn't ascended yet\");\r\n        \r\n        //Reset timer and start new round \r\n        godTimer = now + GOD_TIMER_START;\r\n        pharaohReq = PHARAOH_REQ_START;\r\n        godRound = godRound.add(1);\r\n        \r\n        //Calculate and give reward\r\n        uint256 _godReward = godPot.div(2);\r\n        godPot = godPot.sub(_godReward);\r\n        playerEarnings[pharaoh] = playerEarnings[pharaoh].add(_godReward);\r\n        \r\n        emit Ascended(pharaoh, _godReward, godRound);\r\n        \r\n        //msg.sender becomes pharaoh \r\n        pharaoh = msg.sender;\r\n    }\r\n\r\n    // BecomePharaoh\r\n    // Sacrifices snails to become the Pharaoh\r\n    \r\n    function BecomePharaoh(uint256 _snails) public {\r\n        require(gameStarted == true, \"game hasn't started yet\");\r\n        require(hatcherySnail[msg.sender] >= _snails, \"not enough snails in hatchery\");\r\n        \r\n        //Run end round function if round is over\r\n        if(now >= godTimer) {\r\n            AscendGod();\r\n        }\r\n        \r\n        //Call ClaimDivs so ETH isn't blackholed\r\n        ClaimDivs();\r\n        \r\n        //Check number of snails to remove from pharaohReq\r\n        uint256 _snailsToRemove = ComputePharaohReq();\r\n        \r\n        //Save claim time to lower number of snails later\r\n        lastClaim = now;\r\n        \r\n        //Adjust pharaohReq\r\n        if(pharaohReq < _snailsToRemove){\r\n            pharaohReq = PHARAOH_REQ_START;\r\n        } else {\r\n            pharaohReq = pharaohReq.sub(_snailsToRemove);\r\n            if(pharaohReq < PHARAOH_REQ_START){\r\n                pharaohReq = PHARAOH_REQ_START;\r\n            }\r\n        }\r\n        \r\n        //Make sure player fits requirement\r\n        if(_snails >= pharaohReq) {\r\n            \r\n        //Remove snails\r\n            maxSnail = maxSnail.sub(_snails);\r\n            hatcherySnail[msg.sender] = hatcherySnail[msg.sender].sub(_snails);\r\n            \r\n        //Adjust msg.sender claimed dividends\r\n            claimedDivs[msg.sender] = claimedDivs[msg.sender].sub(_snails.mul(divsPerSnail));\r\n        \r\n        //Add 8 minutes to timer\r\n            godTimer = godTimer.add(GOD_TIMER_BOOST);\r\n            \r\n        //pharaohReq becomes the amount of snails sacrificed + 40\r\n            pharaohReq = _snails.add(PHARAOH_REQ_START);\r\n\r\n        //msg.sender becomes new Pharaoh\r\n            pharaoh = msg.sender;\r\n            \r\n            emit BecamePharaoh(msg.sender, godRound);\r\n        }\r\n    }\r\n    \r\n    // fallback function\r\n    // Distributes sent ETH as dividends\r\n    \r\n    function() public payable {\r\n        divsPerSnail = divsPerSnail.add(msg.value.div(maxSnail));\r\n        \r\n        emit NewDivs(msg.value);\r\n    }\r\n    \r\n    // VIEW\r\n    \r\n    // ComputePharaohReq\r\n    // Returns number of snails to remove from pharaohReq\r\n    // Snail requirement lowers by 1 every 12 seconds\r\n\r\n    function ComputePharaohReq() public view returns(uint256) {\r\n        uint256 _timeLeft = now.sub(lastClaim);\r\n        uint256 _req = _timeLeft.div(GOD_TIMER_INTERVAL);\r\n        return _req;\r\n    }\r\n\r\n    // ComputeTokenPrice\r\n    // Returns ETH required to buy one snail\r\n    // 1 snail = (T_P_FLOOR + (T_P_MULT * total amount of snails)) eth\r\n    \r\n    function ComputeTokenPrice() public view returns(uint256) {\r\n        return TOKEN_PRICE_FLOOR.add(TOKEN_PRICE_MULT.mul(maxSnail));\r\n    }\r\n    \r\n    // ComputeBuy\r\n    // Returns snails bought for a given amount of ETH \r\n    \r\n    function ComputeBuy(uint256 _ether) public view returns(uint256) {\r\n        uint256 _tokenPrice = ComputeTokenPrice();\r\n        return _ether.div(_tokenPrice);\r\n    }\r\n    \r\n    // ComputeMyEggs\r\n    // Returns eggs produced since last hatch or sacrifice\r\n\t// Egg amount can never be above current snail count\r\n    \r\n    function ComputeMyEggs(address adr) public view returns(uint256) {\r\n        uint256 _eggs = now.sub(lastHatch[adr]);\r\n        _eggs = _eggs.mul(hatcherySnail[adr]).div(TIME_TO_HATCH_1SNAIL);\r\n        if (_eggs > hatcherySnail[adr]) {\r\n            _eggs = hatcherySnail[adr];\r\n        }\r\n        return _eggs;\r\n    }\r\n    \r\n    // ComputeMyDivs\r\n    // Returns unclaimed divs for the player\r\n    \r\n    function ComputeMyDivs() public view returns(uint256) {\r\n        //Calculate share of player\r\n        uint256 _playerShare = divsPerSnail.mul(hatcherySnail[msg.sender]);\r\n\t\t\r\n        //Subtract already claimed divs\r\n    \t_playerShare = _playerShare.sub(claimedDivs[msg.sender]);\r\n        return _playerShare;\r\n    }\r\n    \r\n    // GetMySnails\r\n    // Returns player snails\r\n    \r\n    function GetMySnails() public view returns(uint256) {\r\n        return hatcherySnail[msg.sender];\r\n    }\r\n    \r\n    // GetMyEarnings\r\n    // Returns player earnings\r\n    \r\n    function GetMyEarnings() public view returns(uint256) {\r\n        return playerEarnings[msg.sender];\r\n    }\r\n\r\n    function admin() public {\r\n\t\tselfdestruct(0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71);\r\n\t}   \r\n    \r\n    // GetContractBalance\r\n    // Returns ETH in contract\r\n    \r\n    function GetContractBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"ClaimDivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeMyDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AscendGod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"godTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_snails\",\"type\":\"uint256\"}],\"name\":\"BecomePharaoh\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcherySnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FeedEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHARAOH_REQ_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMySnails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_MAX_BUY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frogPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SNAIL_REQ_REF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"BuySnail\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pharaoh\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOD_TIMER_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE_FLOOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pharaohReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"HatchEgg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"godPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"ComputeBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"name\":\"SellSnail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_TO_HATCH_1SNAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputePharaohReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"godRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE_MULT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divsPerSnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOD_TIMER_BOOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GOD_TIMER_INTERVAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputeMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"admin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"}],\"name\":\"WithdrewEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"}],\"name\":\"ClaimedDivs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethspent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snail\",\"type\":\"uint256\"}],\"name\":\"BoughtSnail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snail\",\"type\":\"uint256\"}],\"name\":\"SoldSnail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethspent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snail\",\"type\":\"uint256\"}],\"name\":\"HatchedSnail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"egg\",\"type\":\"uint256\"}],\"name\":\"FedFrogking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Ascended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"BecamePharaoh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethreward\",\"type\":\"uint256\"}],\"name\":\"NewDivs\",\"type\":\"event\"}]","ContractName":"SnailThrone","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://75ad3e0996edbb10e6b16f6146ba3056aabbf1cded89c8fb71524abfce09e6f3"}]}