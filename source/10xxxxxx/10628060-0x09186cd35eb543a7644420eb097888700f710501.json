{"status":"1","message":"OK","result":[{"SourceCode":"// File: @emilianobonassi/gas-saver/ChiGasSaver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\r\n}\r\n\r\ncontract ChiGasSaver {\r\n\r\n    modifier saveGas(address payable sponsor) {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n\r\n        IFreeFromUpTo chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n        chi.freeFromUpTo(sponsor, (gasSpent + 14154) / 41947);\r\n    }\r\n}\r\n\r\n// File: contracts/GasSaverDeployerV1.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/// @title Gas Saver Deployer - Allows to deploy a contract saving gas.\r\n/// @author Emiliano Bonassi - <bonassi.emiliano@gmail.com>\r\ncontract GasSaverDeployerV1 is ChiGasSaver {\r\n\r\n    // deploy and execute calldata _data on contract _code\r\n    function deployAndExecute(bytes memory _code, bytes memory _data)\r\n    public\r\n    payable\r\n    saveGas(msg.sender)\r\n    returns (address target, bytes memory response) {\r\n        target = _deploy(_code);\r\n\r\n        // execute\r\n        assembly {\r\n            let succeeded := delegatecall(sub(gas, 5000), target, add(_data, 0x20), mload(_data), 0, 0)\r\n            let size := returndatasize\r\n\r\n            response := mload(0x40)\r\n            mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\r\n            mstore(response, size)\r\n            returndatacopy(add(response, 0x20), 0, size)\r\n\r\n            switch iszero(succeeded)\r\n            case 1 {\r\n            // throw if delegatecall failed\r\n                revert(add(response, 0x20), size)\r\n            }\r\n        }\r\n    }\r\n\r\n    // just deploy contract _code\r\n    function deploy(bytes memory _code)\r\n    public\r\n    saveGas(msg.sender)\r\n    returns (address target) {\r\n        target = _deploy(_code);\r\n    }\r\n\r\n    function _deploy(bytes memory _code)\r\n    internal\r\n    returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n            case 1 {\r\n            // throw if contract failed to deploy\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_code\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_code\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deployAndExecute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"GasSaverDeployerV1","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://da39de4c999ff51bf86ea1c3aac9ae0a045c89a79fa63c8943f998698f7420af"}]}