{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright @ lottery team.\r\n * Good Luck\r\n * Best wishes\r\n * God bless you\r\n * Maybe the next richest man is you\r\n */\r\npragma solidity >=0.4.22 <0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        require(a == b * c + (a % b));\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner = 0x0;\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        if (owner == 0x0) {\r\n            _;\r\n            return;\r\n        }\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address userAddr) onlyOwner {\r\n        owner = userAddr;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n    constant\r\n    returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool ok);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) returns (bool ok);\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool ok);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    event Burn(address target, uint256 amount);\r\n}\r\n\r\ncontract StandardToken is ERC20, SafeMath,Ownable {\r\n    uint256 private constant teamReward = 10000;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    modifier onlyPayloadSize(uint256 size) {\r\n        if (msg.data.length < size + 4) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    onlyPayloadSize(2 * 32)\r\n    returns (bool success)\r\n    {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) returns (bool success) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n    constant\r\n    returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function SetOwner(address userAddr) public onlyOwner {\r\n        ChangeOwner(userAddr);\r\n        balances[owner] = teamReward;\r\n    }\r\n}\r\n\r\n/**\r\n ** Burn token function\r\n **/\r\ncontract BurnableToken is StandardToken {\r\n    address public constant BURN_ADDRESS = 0x0;\r\n    uint256 public totalSupply;\r\n\r\n    function burn(uint256 burnAmount) {\r\n        require(balances[msg.sender] >= burnAmount);\r\n        totalSupply = safeSub(totalSupply, burnAmount);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], burnAmount);\r\n        emit Burn(msg.sender, burnAmount);\r\n    }\r\n}\r\n\r\ncontract AAAContract is BurnableToken {\r\n    string public constant name = \"AAA Coin\";\r\n    string public constant symbol = \"AAA\";\r\n    uint8 public constant decimals = 0;\r\n    uint256 public constant partTicket = 0.05 ether; // 0.05 ETH\r\n    uint256 public constant fee = 0.01 ether; // 0.01 ETH\r\n    uint256 public currentJackpot = 0; //current Jackpot\r\n    uint256 public constant reward = 1; //reward 1 LOTTERY\r\n    uint256 public constant rate = 1; //rate 1%\r\n    uint256 public status = 0; //status 0 ing ,1 To be awarded\r\n    uint256 public prize_number = 0; //prize block number\r\n    uint256 public constant prize_block_number = 200; //about 10 mins\r\n    uint256 public constant needLottery = 50;//need 50 AAA Coin to buy a chance\r\n    uint256 public lotteryFee = 0;\r\n    uint256 public constant lotteryFeeRate = 12;\r\n    address[] public partAddresses;\r\n\r\n    constructor() public {\r\n        prize_number = block.number + prize_block_number;\r\n    }\r\n\r\n    //at least ticket\r\n    function getTicket() public view returns (uint256) {\r\n        return safeAdd(partTicket, fee);\r\n    }\r\n\r\n    //logs\r\n    event motargeLog(address, uint256,uint256);\r\n    event luckyLog(uint256, address, uint256, uint256);\r\n\r\n    //transfer to this contact\r\n    //meed at least 210000 gas\r\n    function() public payable {\r\n        part();\r\n    }\r\n\r\n    function part() public payable{\r\n        require(status == 0);\r\n        if (block.number >= prize_number - 10) {\r\n            status = 1;\r\n            return;\r\n        }\r\n        require(\r\n            msg.value >= partTicket + fee || balances[msg.sender] >= needLottery\r\n        );\r\n        if (msg.value >= partTicket + fee) {\r\n            uint256 left = safeSub(msg.value, partTicket + fee);\r\n            if (left > 0) {\r\n                msg.sender.transfer(left);\r\n            }\r\n            uint256 newLotteryFee = safeMul(fee, lotteryFeeRate);\r\n            newLotteryFee = safeDiv(newLotteryFee, 100);\r\n            lotteryFee = safeAdd(lotteryFee, newLotteryFee);\r\n            uint256 leftFee = safeSub(fee, newLotteryFee);\r\n            owner.transfer(leftFee);\r\n            balances[msg.sender] = safeAdd(balances[msg.sender], reward);\r\n            totalSupply = safeAdd(totalSupply, reward);\r\n        } else {\r\n            require(lotteryFee>=partTicket);//must lotteryFee >= partTicket\r\n            balances[msg.sender] = safeSub(balances[msg.sender], needLottery);\r\n            balances[owner] = safeAdd(balances[owner], needLottery);\r\n            lotteryFee = safeSub(lotteryFee, partTicket);\r\n        }\r\n        partAddresses.push(msg.sender);\r\n        currentJackpot = safeAdd(currentJackpot, partTicket);\r\n        motargeLog(msg.sender, msg.value,partAddresses.length-1);\r\n    }\r\n\r\n    // get your lucky codes\r\n    function getLotteryCodes(address addr) public view returns (uint256[]) {\r\n        uint256[] codes;\r\n        for (uint256 i = 0; i < partAddresses.length; i++) {\r\n            if (partAddresses[i] == addr) {\r\n                codes.push(i);\r\n            }\r\n        }\r\n        return codes;\r\n    }\r\n\r\n    function getPartCount() public view returns(uint256){\r\n        return partAddresses.length;\r\n    }\r\n\r\n    //seed block.difficulty and time\r\n    function rand(uint256 _length) public view returns (uint256) {\r\n        uint256 random = uint256(\r\n            keccak256(abi.encodePacked(block.difficulty, now))\r\n        );\r\n        return random % _length;\r\n    }\r\n\r\n    function Withdraw(uint256 val) public onlyOwner {\r\n        require(currentJackpot>=val);\r\n        currentJackpot = safeSub(currentJackpot,val);\r\n        owner.transfer(val);\r\n    }\r\n\r\n    // luck draw\r\n    // need the block number arrived .\r\n    // can use 99% prize\r\n    // 1% tax\r\n    function LuckDraw() public onlyOwner {\r\n        require(block.number >= prize_number);\r\n        status = 0;\r\n        prize_number = block.number + prize_block_number;//next prize block number\r\n        if (partAddresses.length <= 0) {\r\n            return;\r\n        }\r\n        require(currentJackpot>0);\r\n        uint256 winner = rand(partAddresses.length);\r\n        if(winner >= partAddresses.length){\r\n            winner = 0;\r\n        }\r\n        uint256 originJack = currentJackpot;\r\n        uint256 needTax = safeMul(currentJackpot, rate);\r\n        needTax = safeDiv(needTax, 100);\r\n        currentJackpot = safeSub(currentJackpot, needTax);\r\n        currentJackpot = safeMul(currentJackpot,50);\r\n        currentJackpot = safeDiv(currentJackpot,100);\r\n        partAddresses[winner].transfer(currentJackpot);//winer\r\n        luckyLog(block.number, partAddresses[winner], winner, currentJackpot);\r\n        owner.transfer(needTax);\r\n        partAddresses.length = 0;\r\n        originJack = safeSub(originJack,needTax);//left Jackpot\r\n        currentJackpot = safeSub(originJack,currentJackpot);//left Jackpot\r\n    }\r\n\r\n    function MayGetReward() public view returns(uint256) {\r\n        uint256 originJack = currentJackpot;\r\n        uint256 needTax = safeMul(currentJackpot, rate);\r\n        needTax = safeDiv(needTax, 100);\r\n        currentJackpot = safeSub(currentJackpot, needTax);\r\n        currentJackpot = safeMul(currentJackpot,50);\r\n        currentJackpot = safeDiv(currentJackpot,100);\r\n        return currentJackpot;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPartCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"LuckDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLotteryCodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"rand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"part\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prize_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MayGetReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prize_block_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"needLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"motargeLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luckyLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"AAAContract","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://cc65c94b1b35f319af3126ca1b8715317794fd47f680a273066253541f8f0a11"}]}