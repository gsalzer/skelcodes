{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPLv3\r\n\r\npragma solidity 0.6.11;\r\n\r\n// This is the funding contract for use within TRIATICS with the TRIATICS Native Token (TRA).\r\n// All licensing issues are covered in the standard GPLv3 licensing terms\r\n// Proper attribution has to be provided when using this code for other projects other than TRIATICS\r\n\r\n// 2020 Triatics All Rights Reserved.\r\n\r\n/**\r\n  @dev This contract holds all locked tokens that will be used for funding the triatics project\r\n  @dev Locked tokens can only be released after a certain amount of time\r\n  @dev The emissions schedule is as follows the uniswap listing\r\n  1) 3rd Month after uniswap listing : 100,000 TRA for marketing and 200,000 for payment to audit firms\r\n  2) Every month: 50,000 TRA for developer salaries.\r\n */\r\n\r\n\r\n // Interface defines the TRA token\r\ninterface TRA {\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Funding {\r\n  // This is the funding contract that stores all locked funds for the TRIATICS project\r\n  // Do not use this code without proper attribution\r\n  // 2020 All Rights Reserved.\r\n  using SafeMath for uint256;\r\n  \r\n  uint256 public _oneMonthBlock;\r\n  uint256 public _threeMonthBlock;\r\n  uint256 public _deployedBlock;\r\n  address public _owner;\r\n  address public _TRAAddress;\r\n\r\n  bool public _threeMonthWithdrawn;\r\n  TRA public _TRAContract;\r\n\r\n  // Constructor sets the address of the token\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n    _TRAAddress = address(0);\r\n    _TRAContract = TRA(_TRAAddress);\r\n    _oneMonthBlock = uint256(5760).mul(30);\r\n    _threeMonthBlock = uint256(5760).mul(30).mul(3);\r\n    _deployedBlock = block.number;\r\n    _threeMonthWithdrawn = false;\r\n  }\r\n\r\n  function SetTRAAddress(address TRAAddress) public {\r\n    require(msg.sender == _owner,\"Only owners can change the TRA address\");\r\n    _TRAAddress = TRAAddress;\r\n    _TRAContract = TRA(_TRAAddress);\r\n  }\r\n\r\n  // Release 50,000 every month.\r\n  function ReleaseMonthly() public {\r\n    // Check if one months worth of block has passed by\r\n    require(block.number >= _deployedBlock.add(_oneMonthBlock),\"One month hasn't passed since the last transaction\");\r\n    // Calculate 50,000. Make this to 18 decimal places.\r\n    uint256 amount = 50000 * uint256(10) ** 18;\r\n    // Set the next block to be another 5760 blocks ahead\r\n    _oneMonthBlock = _oneMonthBlock.add(_oneMonthBlock);\r\n    _TRAContract.transfer(msg.sender,amount);\r\n  }\r\n\r\n  // Release 300,000 after three months\r\n  function ReleaseThreeMonths() public {\r\n  // Check if one months worth of block has passed by\r\n    require(block.number >= _deployedBlock.add(_threeMonthBlock),\"Three month hasn't passed since the last transaction\");\r\n    require(_threeMonthWithdrawn == false,\"Cannot withdraw more than once\");\r\n    // Calculate 300,000. Make this to 18 decimal places.\r\n    uint256 amount = 300000 * uint256(10) ** 18;\r\n    // Set the flag to false so that we cannot withdraw 300,000 more than once\r\n    _threeMonthWithdrawn = true;\r\n    _TRAContract.transfer(msg.sender,amount);\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReleaseMonthly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReleaseThreeMonths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TRAAddress\",\"type\":\"address\"}],\"name\":\"SetTRAAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TRAAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TRAContract\",\"outputs\":[{\"internalType\":\"contract TRA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deployedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_oneMonthBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_threeMonthBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_threeMonthWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Funding","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c06a54ae5daf327694fbb01e9957101e536c51b8ac7ba83066d9a105c0a4d535"}]}