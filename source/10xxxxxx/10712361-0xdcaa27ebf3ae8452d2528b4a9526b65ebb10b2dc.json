{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard { \r\n    bool private _notEntered; \r\n    \r\n    function _initReentrancyGuard() internal {\r\n        _notEntered = true;\r\n    } \r\n}\r\n\r\ncontract LexTokenLite is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    \r\n    address payable public owner;\r\n    address public resolver;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public saleRate;\r\n    uint256 public totalSupply;\r\n    uint256 public totalSupplyCap;\r\n    bytes32 public message;\r\n    bool public forSale;\r\n    bool public initialized;\r\n    bool public transferable; \r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    \r\n    mapping(address => mapping(address => uint256)) public allowances;\r\n    mapping(address => uint256) private balances;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"!owner\");\r\n        _;\r\n    }\r\n    \r\n    function init(\r\n        string calldata _name, \r\n        string calldata _symbol, \r\n        uint8 _decimals, \r\n        address payable _owner, \r\n        address _resolver, \r\n        uint256 _ownerSupply, \r\n        uint256 _saleRate, \r\n        uint256 _saleSupply, \r\n        uint256 _totalSupplyCap, \r\n        bytes32 _message, \r\n        bool _forSale, \r\n        bool _transferable\r\n    ) external {\r\n        require(!initialized, \"initialized\"); \r\n        require(_ownerSupply.add(_saleSupply) <= _totalSupplyCap, \"capped\");\r\n        \r\n        name = _name; \r\n        symbol = _symbol; \r\n        decimals = _decimals; \r\n        owner = _owner; \r\n        resolver = _resolver;\r\n        saleRate = _saleRate; \r\n        totalSupplyCap = _totalSupplyCap; \r\n        message = _message; \r\n        forSale = _forSale; \r\n        initialized = true; \r\n        transferable = _transferable; \r\n        balances[owner] = balances[owner].add(_ownerSupply);\r\n        balances[address(this)] = balances[address(this)].add(_saleSupply);\r\n        totalSupply = _ownerSupply.add(_saleSupply);\r\n        \r\n        emit Transfer(address(0), owner, _ownerSupply);\r\n        emit Transfer(address(0), address(this), _saleSupply);\r\n        _initReentrancyGuard(); \r\n    }\r\n    \r\n    function() external payable { // SALE \r\n        require(forSale, \"!forSale\");\r\n        \r\n        (bool success, ) = owner.call.value(msg.value)(\"\");\r\n        require(success, \"!transfer\");\r\n        uint256 amount = msg.value.mul(saleRate); \r\n        _transfer(address(this), msg.sender, amount);\r\n    } \r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        require(amount == 0 || allowances[msg.sender][spender] == 0, \"!reset\"); \r\n        \r\n        allowances[msg.sender][spender] = amount; \r\n        \r\n        emit Approval(msg.sender, spender, amount); \r\n        return true;\r\n    }\r\n    \r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n    \r\n    function balanceResolution(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        require(msg.sender == resolver, \"!resolver\"); \r\n        \r\n        _transfer(sender, recipient, amount); \r\n        \r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 amount) external {\r\n        balances[msg.sender] = balances[msg.sender].sub(amount); \r\n        totalSupply = totalSupply.sub(amount); \r\n        \r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        balances[sender] = balances[sender].sub(amount); \r\n        balances[recipient] = balances[recipient].add(amount); \r\n        \r\n        emit Transfer(sender, recipient, amount); \r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        require(transferable, \"!transferable\"); \r\n        \r\n        _transfer(msg.sender, recipient, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferBatch(address[] calldata recipient, uint256[] calldata amount) external returns (bool) {\r\n        require(transferable, \"!transferable\");\r\n        require(recipient.length == amount.length, \"!recipient/amount\");\r\n        \r\n        for (uint256 i = 0; i < recipient.length; i++) {\r\n            _transfer(msg.sender, recipient[i], amount[i]);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        require(transferable, \"!transferable\");\r\n        \r\n        _transfer(sender, recipient, amount);\r\n        allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(amount); \r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**************\r\n    OWNER FUNCTIONS\r\n    **************/\r\n    function mint(address recipient, uint256 amount) external onlyOwner {\r\n        require(totalSupply.add(amount) <= totalSupplyCap, \"capped\"); \r\n        \r\n        balances[recipient] = balances[recipient].add(amount); \r\n        totalSupply = totalSupply.add(amount); \r\n        \r\n        emit Transfer(address(0), recipient, amount); \r\n    }\r\n\r\n    function updateMessage(bytes32 _message) external onlyOwner {\r\n        message = _message;\r\n    }\r\n    \r\n    function updateOwner(address payable _owner) external onlyOwner {\r\n        owner = _owner;\r\n    }\r\n    \r\n    function updateResolver(address _resolver) external onlyOwner {\r\n        resolver = _resolver;\r\n    }\r\n    \r\n    function updateSale(uint256 amount, bool _forSale) external onlyOwner {\r\n        require(totalSupply.add(amount) <= totalSupplyCap, \"capped\");\r\n        \r\n        forSale = _forSale;\r\n        balances[address(this)] = balances[address(this)].add(amount); \r\n        totalSupply = totalSupply.add(amount); \r\n        \r\n        emit Transfer(address(0), address(this), amount);\r\n    }\r\n    \r\n    function updateSaleRate(uint256 _saleRate) external onlyOwner {\r\n        saleRate = _saleRate;\r\n    }\r\n    \r\n    function updateTransferability(bool _transferable) external onlyOwner {\r\n        transferable = _transferable;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"balanceResolution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupplyCap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_forSale\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"}],\"name\":\"updateMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"updateResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_forSale\",\"type\":\"bool\"}],\"name\":\"updateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleRate\",\"type\":\"uint256\"}],\"name\":\"updateSaleRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"updateTransferability\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LexTokenLite","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://da05953cbbf51f9106a98f3a5eabbac393452177fbec25897b5f9d7f3f42980f"}]}