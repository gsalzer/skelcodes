{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// File: contracts/saga/interfaces/IRateApprover.sol\r\n\r\n/**\r\n * @title Rate Approver Interface.\r\n */\r\ninterface IRateApprover {\r\n    /**\r\n     * @dev Approve high rate.\r\n     * @param _highRateN The numerator of the high rate.\r\n     * @param _highRateD The denominator of the high rate.\r\n     * @return Success flag.\r\n     */\r\n    function approveHighRate(uint256 _highRateN, uint256 _highRateD) external view  returns (bool);\r\n\r\n    /**\r\n    * @dev Approve low rate.\r\n    * @param _lowRateN The numerator of the low rate.\r\n    * @param _lowRateD The denominator of the low rate.\r\n    * @return Success flag.\r\n    */\r\n    function approveLowRate(uint256 _lowRateN, uint256 _lowRateD) external view  returns (bool);\r\n}\r\n\r\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\r\n\r\n/**\r\n * @title Contract Address Locator Interface.\r\n */\r\ninterface IContractAddressLocator {\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) external view returns (address);\r\n\r\n    /**\r\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\r\n     * @param _contractAddress The contract address to look for.\r\n     * @param _identifiers The identifiers.\r\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\r\n     */\r\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\r\n}\r\n\r\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\r\n\r\n/**\r\n * @title Contract Address Locator Holder.\r\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\r\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\r\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\r\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\r\n */\r\ncontract ContractAddressLocatorHolder {\r\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\r\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\r\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\r\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\r\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\r\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\r\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\r\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\r\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\r\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\r\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\r\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\r\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\r\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\r\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\r\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\r\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\r\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\r\n    bytes32 internal constant _ISGAAuthorizationManager_ = \"ISGAAuthorizationManager\";\r\n    bytes32 internal constant _ISGAToken_                = \"ISGAToken\"               ;\r\n    bytes32 internal constant _ISGATokenManager_         = \"ISGATokenManager\"        ;\r\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\r\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\r\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\r\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\r\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\r\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\r\n    bytes32 internal constant _BuyWalletsTradingDataSource_       = \"BuyWalletsTradingDataSource\"      ;\r\n    bytes32 internal constant _SellWalletsTradingDataSource_       = \"SellWalletsTradingDataSource\"      ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\r\n    bytes32 internal constant _BuyWalletsTradingLimiter_SGATokenManager_          = \"BuyWalletsTLSGATokenManager\"         ;\r\n    bytes32 internal constant _SellWalletsTradingLimiter_SGATokenManager_          = \"SellWalletsTLSGATokenManager\"         ;\r\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\r\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\r\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\r\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\r\n\r\n    IContractAddressLocator private contractAddressLocator;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\r\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\r\n        contractAddressLocator = _contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address locator.\r\n     * @return The contract address locator.\r\n     */\r\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\r\n        return contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\r\n        return contractAddressLocator.getContractAddress(_identifier);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Determine whether or not the sender relates to one of the identifiers.\r\n     * @param _identifiers The identifiers.\r\n     * @return A boolean indicating if the sender relates to one of the identifiers.\r\n     */\r\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\r\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify that the caller is mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     */\r\n    modifier only(bytes32 _identifier) {\r\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.4/interfaces/AggregatorInterface.sol\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\r\n}\r\n\r\n// File: contracts/saga/OracleRateApprover.sol\r\n\r\n/**\r\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\r\n */\r\n\r\n/**\r\n * @title Oracle Rate Approver.\r\n */\r\ncontract OracleRateApprover is IRateApprover, ContractAddressLocatorHolder, Claimable {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MILLION = 1000000;\r\n    uint256 public constant ORACLE_RATE_PRECISION = 100000000;\r\n\r\n    uint256 public rateDeviationThreshold = 0;\r\n    bool public isApproveAllRates = false;\r\n    AggregatorInterface public oracleRateAggregator;\r\n\r\n    uint256 public oracleRateAggregatorSequenceNum = 0;\r\n    uint256 public rateDeviationThresholdSequenceNum = 0;\r\n    uint256 public isApproveAllRatesSequenceNum = 0;\r\n\r\n\r\n    event OracleRateAggregatorSaved(address _oracleRateAggregatorAddress);\r\n    event OracleRateAggregatorNotSaved(address _oracleRateAggregatorAddress);\r\n    event RateDeviationThresholdSaved(uint256 _rateDeviationThreshold);\r\n    event RateDeviationThresholdNotSaved(uint256 _rateDeviationThreshold);\r\n    event ApproveAllRatesSaved(bool _isApproveAllRates);\r\n    event ApproveAllRatesNotSaved(bool _isApproveAllRates);\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     * @param _oracleRateAggregatorAddress The address of the ETH SDR aggregator.\r\n     * @param _rateDeviationThreshold The deviation threshold.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator, address _oracleRateAggregatorAddress, uint256 _rateDeviationThreshold) ContractAddressLocatorHolder(_contractAddressLocator) public {\r\n        setOracleRateAggregator(1, _oracleRateAggregatorAddress);\r\n        setRateDeviationThreshold(1, _rateDeviationThreshold);\r\n    }\r\n\r\n    /**\r\n     * @dev Set oracle rate aggregator.\r\n     * @param _oracleRateAggregatorSequenceNum The sequence-number of the operation.\r\n     * @param _oracleRateAggregatorAddress The address of the oracle rate aggregator.\r\n     */\r\n    function setOracleRateAggregator(uint256 _oracleRateAggregatorSequenceNum, address _oracleRateAggregatorAddress) public onlyOwner() {\r\n        require(_oracleRateAggregatorAddress != address(0), \"invalid _oracleRateAggregatorAddress\");\r\n        if (oracleRateAggregatorSequenceNum < _oracleRateAggregatorSequenceNum) {\r\n            oracleRateAggregatorSequenceNum = _oracleRateAggregatorSequenceNum;\r\n            oracleRateAggregator = AggregatorInterface(_oracleRateAggregatorAddress);\r\n            emit OracleRateAggregatorSaved(_oracleRateAggregatorAddress);\r\n        }\r\n        else {\r\n            emit OracleRateAggregatorNotSaved(_oracleRateAggregatorAddress);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Set rate deviation threshold.\r\n     * @param _rateDeviationThresholdSequenceNum The sequence-number of the operation.\r\n     * @param _rateDeviationThreshold The deviation threshold, given in parts per million.\r\n     */\r\n    function setRateDeviationThreshold(uint256 _rateDeviationThresholdSequenceNum, uint256 _rateDeviationThreshold) public onlyOwner {\r\n        require(_rateDeviationThreshold < MILLION, \"_rateDeviationThreshold  is out of range\");\r\n        if (rateDeviationThresholdSequenceNum < _rateDeviationThresholdSequenceNum) {\r\n            rateDeviationThresholdSequenceNum = _rateDeviationThresholdSequenceNum;\r\n            rateDeviationThreshold = _rateDeviationThreshold;\r\n            emit RateDeviationThresholdSaved(_rateDeviationThreshold);\r\n        }\r\n        else {\r\n            emit RateDeviationThresholdNotSaved(_rateDeviationThreshold);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Set is approve all rates.\r\n    * @param _isApproveAllRatesSequenceNum The sequence-number of the operation.\r\n    * @param _isApproveAllRates Approve all rates.\r\n    */\r\n    function setIsApproveAllRates(uint256 _isApproveAllRatesSequenceNum, bool _isApproveAllRates) public onlyOwner {\r\n        if (isApproveAllRatesSequenceNum < _isApproveAllRatesSequenceNum) {\r\n            isApproveAllRatesSequenceNum = _isApproveAllRatesSequenceNum;\r\n            isApproveAllRates = _isApproveAllRates;\r\n            emit ApproveAllRatesSaved(_isApproveAllRates);\r\n        }\r\n        else {\r\n            emit ApproveAllRatesNotSaved(_isApproveAllRates);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Approve high rate.\r\n     * @param _highRateN The numerator of the high rate.\r\n     * @param _highRateD The denominator of the high rate.\r\n     * @return Success flag.\r\n     */\r\n    function approveHighRate(uint256 _highRateN, uint256 _highRateD) external view only(_IETHConverter_) returns (bool){\r\n        return approveRate(_highRateN, _highRateD);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve low rate.\r\n     * @param _lowRateN The numerator of the low rate.\r\n     * @param _lowRateD The denominator of the low rate.\r\n     * @return Success flag.\r\n     */\r\n    function approveLowRate(uint256 _lowRateN, uint256 _lowRateD) external view only(_IETHConverter_) returns (bool){\r\n        return approveRate(_lowRateN, _lowRateD);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if given rate is close to OracleLatestRate up to rateDeviationThreshold/MILLION, using the inequality:\r\n     * OracleLatestRate/ORACLE_RATE_PRECISION*(1-rateDeviationThreshold/MILLION) < rate_N/rate_D < OracleLatestRate/ORACLE_RATE_PRECISION*(1 + rateDeviationThreshold/MILLION)\r\n     * to avoid underflow this can be written as: B-C  > rate >  B+C, with:\r\n     * rate = rate_N*ORACLE_RATE_PRECISION*MILLION\r\n     * A = OracleLatestRate*rateD\r\n     * B = A*MILLION\r\n     * C = A*rateDeviationThreshold\r\n     * will never overflow for the allowed range of values for each variable\r\n     * @dev Approve rate.\r\n     * @param _rateN The numerator of the rate.\r\n     * @param _rateD The denominator of the rate.\r\n     * @return Success flag.\r\n     */\r\n    function approveRate(uint256 _rateN, uint256 _rateD) internal view returns (bool) {\r\n        assert(_rateN > 0);\r\n        assert(_rateD > 0);\r\n        bool success = true;\r\n\r\n        if (!isApproveAllRates) {\r\n            uint256 A = (getOracleLatestRate()).mul(_rateD);\r\n            uint256 B = A.mul(MILLION);\r\n            uint256 C = A.mul(rateDeviationThreshold);\r\n            uint256 rate = (_rateN.mul(ORACLE_RATE_PRECISION)).mul(MILLION);\r\n\r\n            if (rate > B.add(C)) {\r\n                success = false;\r\n            }\r\n            else if (rate < B.sub(C)) {\r\n                success = false;\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the oracle latest rate.\r\n    * @return The oracle latest rate.\r\n    */\r\n    function getOracleLatestRate() internal view returns (uint256) {\r\n        int256 latestAnswer = oracleRateAggregator.latestAnswer();\r\n        assert(latestAnswer > 0);\r\n        return uint256(latestAnswer);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isApproveAllRatesSequenceNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MILLION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isApproveAllRatesSequenceNum\",\"type\":\"uint256\"},{\"name\":\"_isApproveAllRates\",\"type\":\"bool\"}],\"name\":\"setIsApproveAllRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleRateAggregatorSequenceNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_highRateN\",\"type\":\"uint256\"},{\"name\":\"_highRateD\",\"type\":\"uint256\"}],\"name\":\"approveHighRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateDeviationThresholdSequenceNum\",\"type\":\"uint256\"},{\"name\":\"_rateDeviationThreshold\",\"type\":\"uint256\"}],\"name\":\"setRateDeviationThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORACLE_RATE_PRECISION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracleRateAggregatorSequenceNum\",\"type\":\"uint256\"},{\"name\":\"_oracleRateAggregatorAddress\",\"type\":\"address\"}],\"name\":\"setOracleRateAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateDeviationThresholdSequenceNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isApproveAllRates\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateDeviationThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleRateAggregator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lowRateN\",\"type\":\"uint256\"},{\"name\":\"_lowRateD\",\"type\":\"uint256\"}],\"name\":\"approveLowRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"},{\"name\":\"_oracleRateAggregatorAddress\",\"type\":\"address\"},{\"name\":\"_rateDeviationThreshold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oracleRateAggregatorAddress\",\"type\":\"address\"}],\"name\":\"OracleRateAggregatorSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oracleRateAggregatorAddress\",\"type\":\"address\"}],\"name\":\"OracleRateAggregatorNotSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_rateDeviationThreshold\",\"type\":\"uint256\"}],\"name\":\"RateDeviationThresholdSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_rateDeviationThreshold\",\"type\":\"uint256\"}],\"name\":\"RateDeviationThresholdNotSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_isApproveAllRates\",\"type\":\"bool\"}],\"name\":\"ApproveAllRatesSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_isApproveAllRates\",\"type\":\"bool\"}],\"name\":\"ApproveAllRatesNotSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OracleRateApprover","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb0000000000000000000000001ec7896ddbfd6af678f0d86cba859cb7240fc3ae000000000000000000000000000000000000000000000000000000000000c350","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8fd7e56633c538b81a7afbd010ba9e816fb77a53deb7c9b5709c1a6b188668b7"}]}