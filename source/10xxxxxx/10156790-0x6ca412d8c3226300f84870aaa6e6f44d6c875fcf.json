{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary Account {\r\n    struct Info {\r\n        address owner;  // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n}\r\n\r\nlibrary Monetary {\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\ncontract DyDx {\r\n        function getAccountValues(Account.Info memory account) public view returns (Monetary.Value memory, Monetary.Value memory);\r\n}\r\n\r\n\r\ncontract ProxyQuery {\r\n    DyDx dydx;\r\n\r\n    constructor() public {\r\n        dydx = DyDx(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n    }\r\n\r\n    function queryValues(address[] memory accounts, uint256[] memory numbers ) public view returns (uint256[] memory) {\r\n        uint256[] memory ret = new uint[](accounts.length);\r\n        Account.Info memory account;\r\n        Monetary.Value memory supplied;\r\n        Monetary.Value memory borrowed;\r\n        uint i;\r\n\r\n        for (i = 0; i < accounts.length; i ++) {\r\n            account.owner = accounts[i];\r\n            account.number = numbers[i];\r\n            (supplied, borrowed) = dydx.getAccountValues(account);\r\n            if (borrowed.value == 0) {\r\n                ret[i] = 1000;\r\n            } else {\r\n                ret[i] = supplied.value*100/borrowed.value;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numbers\",\"type\":\"uint256[]\"}],\"name\":\"queryValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProxyQuery","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3b06ceab884c0595999bdc4a5b862aa3f09515ad287e7dca01dd672b503d3fab"}]}