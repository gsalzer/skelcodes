{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint _id) external returns (uint _num);\r\n    function setUint(uint _id, uint _val) external;\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return Memory Variable Address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n    */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n    */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details\r\n    */\r\n    function connectorID() public pure returns(uint _type, uint _id) {\r\n        (_type, _id) = (1, 47);\r\n    }\r\n}\r\n\r\ncontract BasicResolver is Helpers {\r\n\r\n    /**\r\n     * @dev Add getIds\r\n     * @param getIds Array of get token amount at this IDs from `InstaMemory` Contract.\r\n     * @param setId Set ctoken amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function addIds(uint[] calldata getIds, uint setId) external payable {\r\n        uint amt;\r\n        for (uint i = 0; i < getIds.length; i++) {\r\n            amt = add(amt, getUint(getIds[i], 0));\r\n        }\r\n\r\n        setUint(setId, amt);\r\n    }\r\n\r\n    /**\r\n     * @dev Sub two getId.\r\n     * @param getIdOne Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param getIdTwo Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set ctoken amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function subIds(uint getIdOne, uint getIdTwo, uint setId) external payable {\r\n        uint amt = sub(getUint(getIdOne, 0), getUint(getIdTwo, 0));\r\n\r\n        setUint(setId, amt);\r\n    }\r\n}\r\n\r\ncontract ConnectVariableMath is BasicResolver {\r\n    string public name = \"memory-variable-math-v1\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"getIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"addIds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"getIdOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getIdTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"subIds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectVariableMath","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4fa9adf6ec417ab4c706b48bc32893aac6890f2525c060492ab696b8bf1f84f9"}]}