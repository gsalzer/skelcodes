{"status":"1","message":"OK","result":[{"SourceCode":"/* \r\nBuilt by Cubebit Labs for Adcube\r\n\r\nVersion 2 - Reduced gas usage by frontend intervention\r\n\r\n*/\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract Adcube {\r\n    \r\n    address public owner;\r\n    uint256 public level = 1;\r\n    uint256 public position = 1;\r\n    uint256 public levelThreshold = 1;\r\n    uint256 public price = 50000000000000000;\r\n    uint256 public spill = 3880000000000000;\r\n    uint256 public referral = 3880000000000000;\r\n    uint256 public totalUsers = 0;\r\n    uint256 public totalAccounts = 0;\r\n    \r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    struct User{\r\n        bool active;\r\n        bool uplinePaid;\r\n        uint256 level;\r\n        uint256 position;\r\n        uint256 accounts;\r\n        uint256 paid;\r\n        address referrer;\r\n        address[] uplines;\r\n        address[] downlines;\r\n    }\r\n    \r\n    struct Level{\r\n        address[] positions;\r\n    }\r\n    \r\n    mapping(address => User) users;\r\n    \r\n    mapping(uint256 => Level) levels;\r\n    \r\n    function adminRegister(address _user, address _referrer, uint256 _accounts) public onlyOwner returns(uint256,uint256){\r\n        require(_accounts < 4 && _accounts > 0);\r\n        User storage u = users[_user];\r\n        Level storage l = levels[level];\r\n        l.positions.push(_user);\r\n        u.active = true;\r\n        u.position = position;\r\n        u.level = level;\r\n        u.accounts = _accounts;\r\n        u.referrer = _referrer;\r\n        if(l.positions.length == levelThreshold){\r\n            position = position + 1;\r\n            levelThreshold = levelThreshold * 3;\r\n            level = level + 1;\r\n        }\r\n        else{\r\n            position = position + 1;\r\n        }\r\n       totalAccounts = totalAccounts + _accounts;\r\n       totalUsers = totalUsers + 1;\r\n       return(u.level,u.position);\r\n    }\r\n    \r\n    function register(address _user,address _referrer, uint256 _accounts) external payable returns(uint256, uint256){\r\n        require(_accounts < 4 && _accounts > 0);\r\n        require(msg.value == price * _accounts);\r\n        User storage r = users[_referrer];\r\n        require(r.active == true);\r\n        User storage u = users[_user];\r\n        Level storage l = levels[level];\r\n        l.positions.push(_user);\r\n        u.active = true;\r\n        u.position = position;\r\n        u.level = level;\r\n        u.accounts = _accounts;\r\n        u.referrer = _referrer;\r\n        if(l.positions.length == levelThreshold){\r\n            position = position + 1;\r\n            levelThreshold = levelThreshold * 3;\r\n            level = level + 1;\r\n        }\r\n        else{\r\n            position = position + 1;\r\n        }\r\n       totalAccounts = totalAccounts + _accounts;\r\n       totalUsers = totalUsers + 1;\r\n       return(u.level,u.position);\r\n    }\r\n\r\n    function sendSpill(address _user,address[] memory uplines) public onlyOwner{\r\n        User storage a = users[_user];\r\n        require(a.uplinePaid == false);\r\n        require(a.active == true);\r\n        a.uplines = uplines;\r\n        a.uplinePaid = true;\r\n        payable(a.referrer).transfer(referral);\r\n        if(uplines.length < 9) {\r\n            for(uint256 i=0;i < uplines.length; i++){\r\n            User storage u = users[uplines[i]];\r\n            u.paid = u.paid + 1;\r\n            u.downlines.push(_user);\r\n            if(u.accounts == 1 && u.paid == 39){\r\n                u.active = false;\r\n            }\r\n            else if(u.accounts == 2 && u.paid == 1092){\r\n                u.active = false;\r\n            }\r\n            else{\r\n                if(u.paid == 29523){\r\n                    u.active = false;\r\n                }\r\n            }\r\n            payable(uplines[i]).transfer(spill);\r\n         }\r\n        }\r\n        else{\r\n          for(uint256 i=0; i < 9; i++){\r\n              User storage u = users[uplines[i]];\r\n              u.paid = u.paid + 1;\r\n              u.downlines.push(_user);\r\n              if(u.accounts == 1 && u.paid == 39){\r\n                u.active = false;\r\n              }\r\n              else if(u.accounts == 2 && u.paid == 1092){\r\n                u.active = false;\r\n              }\r\n              else{\r\n                if(u.paid == 29523){\r\n                    u.active = false;\r\n              }\r\n            }\r\n            payable(uplines[i]).transfer(spill);\r\n          }\r\n        }\r\n    }\r\n    \r\n    function purchase(uint256 _accounts) external payable{\r\n        require(_accounts > 0 && _accounts < 3);\r\n        User storage u = users[msg.sender];\r\n        require(u.accounts + _accounts <= 3);\r\n        require(msg.value == _accounts * price);\r\n        u.accounts = u.accounts + _accounts;\r\n    }\r\n    \r\n    function deactivate(address _user) public onlyOwner{\r\n        User storage u = users[_user];\r\n        u.active = false;\r\n    }\r\n    \r\n    function activate(address _user) public onlyOwner{\r\n        User storage u = users[_user];\r\n        u.active = true;\r\n    }\r\n    \r\n    function markPaid(address _user) public onlyOwner{\r\n        User storage u = users[_user];\r\n        u.uplinePaid = true;\r\n    }\r\n    \r\n    function updateOwnership(address _newOwner) public onlyOwner{\r\n        owner = _newOwner;\r\n    }\r\n    \r\n    function updateFiatPrice(uint256 _price, uint256 _referralBonus, uint256 _spillover) public onlyOwner{\r\n         price = _price;\r\n         spill = _spillover;\r\n         referral = _referralBonus;\r\n    }\r\n    \r\n    function fetchUsers(address _user) public view returns(bool _uplinePaid, uint256 _account,uint256 _paid, address[] memory _uplines, address[] memory _downlines, uint256 _level, uint256 _position, address _referrer){\r\n        User storage u = users[_user];\r\n        return(u.uplinePaid,u.accounts,u.paid,u.uplines,u.downlines,u.level,u.position,u.referrer);\r\n    }\r\n    \r\n    function fetchLevels(uint256 _level) public view returns(address[] memory){\r\n        Level storage l = levels[_level];\r\n        return(l.positions);\r\n    }\r\n    \r\n    function validate(address _user) public view returns(bool,bool){\r\n        User storage u = users[_user];\r\n        return(u.active,u.uplinePaid);\r\n    }\r\n    \r\n    function balanceOf() external view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function drain() public onlyOwner{\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_accounts\",\"type\":\"uint256\"}],\"name\":\"adminRegister\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"fetchLevels\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fetchUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_uplinePaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_account\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_uplines\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_downlines\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"level\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"markPaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"position\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_accounts\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_accounts\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"uplines\",\"type\":\"address[]\"}],\"name\":\"sendSpill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spillover\",\"type\":\"uint256\"}],\"name\":\"updateFiatPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Adcube","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://781e9b4a0dd60aa8d6eaae7cf7bc6666cd2fd23cddea3ffaf3808595e56b7b72"}]}