{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n    event OwnerUpdate(address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(\r\n            msg.sender == newOwner,\r\n            \"AcceptOwnership: only new owner do this.\"\r\n        );\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_) public onlyOwner {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by owner account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is DSAuth {\r\n    bool public paused;\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"whenNotPaused: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused, \"whenPaused: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor() internal {\r\n        paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the contract owner to pause, triggers stopped state.\r\n     */\r\n    function pause() public whenNotPaused auth {\r\n        paused = true;\r\n        emit Paused(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the contract owner to unpause, returns to normal state.\r\n     */\r\n    function unpause() public whenPaused auth {\r\n        paused = false;\r\n        emit Unpaused(owner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    // This function is not a standard ERC20 interface, just for compitable with market.\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20SafeTransfer {\r\n    function doTransferOut(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool result;\r\n\r\n        token.transfer(_to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function doTransferFrom(\r\n        address _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool result;\r\n\r\n        token.transferFrom(_from, _to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function doApprove(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        IERC20 token = IERC20(_token);\r\n        bool result;\r\n\r\n        token.approve(_to, _amount);\r\n\r\n        assembly {\r\n            switch returndatasize()\r\n                case 0 {\r\n                    result := not(0)\r\n                }\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    result := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y > 0, \"ds-math-div-overflow\");\r\n        z = x / y;\r\n    }\r\n}\r\n\r\ninterface IDTokenController {\r\n    function getDToken(address _token) external view returns (address);\r\n}\r\n\r\ncontract Handler is ERC20SafeTransfer, Pausable {\r\n    using SafeMath for uint256;\r\n    bool private initialized; // Flags for initializing data\r\n    address public dTokenController; // dToken mapping contract\r\n\r\n    mapping(address => bool) private tokensEnable; // Supports token or not\r\n\r\n    event NewdTokenAddresses(\r\n        address indexed originalDToken,\r\n        address indexed newDToken\r\n    );\r\n    event DisableToken(address indexed underlyingToken);\r\n    event EnableToken(address indexed underlyingToken);\r\n\r\n    // --- Init ---\r\n    // This function is used with contract proxy, do not modify this function.\r\n    function initialize(address _dTokenController) public {\r\n        require(!initialized, \"initialize: Already initialized!\");\r\n        owner = msg.sender;\r\n        dTokenController = _dTokenController;\r\n        initialized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Update dToken mapping contract.\r\n     * @param _newDTokenController The new dToken mapping contact.\r\n     */\r\n    function setDTokenController(address _newDTokenController) external auth {\r\n        require(\r\n            _newDTokenController != dTokenController,\r\n            \"setDTokenController: The same dToken mapping contract address!\"\r\n        );\r\n        address _originalDTokenController = dTokenController;\r\n        dTokenController = _newDTokenController;\r\n        emit NewdTokenAddresses(\r\n            _originalDTokenController,\r\n            _newDTokenController\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to disable some underlying tokens.\r\n     * @param _underlyingTokens Tokens to disable.\r\n     */\r\n    function disableTokens(address[] calldata _underlyingTokens) external auth {\r\n        for (uint256 i = 0; i < _underlyingTokens.length; i++) {\r\n            _disableToken(_underlyingTokens[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to enable some underlying tokens.\r\n     * @param _underlyingTokens Tokens to enable.\r\n     */\r\n    function enableTokens(address[] calldata _underlyingTokens) external auth {\r\n        for (uint256 i = 0; i < _underlyingTokens.length; i++) {\r\n            _enableToken(_underlyingTokens[i]);\r\n        }\r\n    }\r\n\r\n    function _disableToken(address _underlyingToken) internal {\r\n        require(\r\n            tokensEnable[_underlyingToken],\r\n            \"disableToken: Has been disabled!\"\r\n        );\r\n        tokensEnable[_underlyingToken] = false;\r\n        emit DisableToken(_underlyingToken);\r\n    }\r\n\r\n    function _enableToken(address _underlyingToken) internal {\r\n        require(\r\n            !tokensEnable[_underlyingToken],\r\n            \"enableToken: Has been enabled!\"\r\n        );\r\n        tokensEnable[_underlyingToken] = true;\r\n        emit EnableToken(_underlyingToken);\r\n    }\r\n\r\n    /**\r\n     * @dev The _underlyingToken approves to dToken contract.\r\n     * @param _underlyingToken Token address to approve.\r\n     */\r\n    function approve(address _underlyingToken, uint256 amount) public auth {\r\n        address _dToken = IDTokenController(dTokenController).getDToken(\r\n            _underlyingToken\r\n        );\r\n\r\n        require(\r\n            doApprove(_underlyingToken, _dToken, amount),\r\n            \"approve: Approve dToken failed!\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Support token or not.\r\n     * @param _underlyingToken Token to check.\r\n     */\r\n    function tokenIsEnabled(address _underlyingToken)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return tokensEnable[_underlyingToken];\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function initReentrancyStatus() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface LendingPool {\r\n    function deposit(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint16 _referralCode\r\n    ) external payable;\r\n}\r\n\r\ninterface AToken {\r\n    function principalBalanceOf(address _user) external view returns (uint256);\r\n\r\n    function redeem(uint256 _amount) external;\r\n}\r\n\r\n// 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3\r\ninterface LendingPoolCore {\r\n    function getReserveATokenAddress(address _reserve)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getReserveAvailableLiquidity(address _reserve)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ncontract AaveHandler is Handler, ReentrancyGuard {\r\n    address public aaveLendingPool;\r\n    address public aaveLendingPoolCore;\r\n\r\n    // mapping(address => uint256) public interestDetails;\r\n    struct InterestDetails {\r\n        uint256 totalUnderlyingBalance; // Total underlying balance including interest\r\n        uint256 interest; // Total interest\r\n    }\r\n    // Based on underlying token, get current interest details\r\n    mapping(address => InterestDetails) public interestDetails;\r\n\r\n    constructor(\r\n        address _dTokenController,\r\n        address _lendingPool,\r\n        address _lendingPoolCore\r\n    ) public {\r\n        initialize(_dTokenController, _lendingPool, _lendingPoolCore);\r\n    }\r\n\r\n    // --- Init ---\r\n    // This function is used with contract proxy, do not modify this function.\r\n    function initialize(\r\n        address _dTokenController,\r\n        address _lendingPool,\r\n        address _lendingPoolCore\r\n    ) public {\r\n        super.initialize(_dTokenController);\r\n        initReentrancyStatus();\r\n        aaveLendingPool = _lendingPool;\r\n        aaveLendingPoolCore = _lendingPoolCore;\r\n    }\r\n\r\n    function setLendingPoolCore(address _newLendingPoolCore) external auth {\r\n        aaveLendingPoolCore = _newLendingPoolCore;\r\n    }\r\n\r\n    function setLendingPool(address _newLendingPool) external auth {\r\n        aaveLendingPool = _newLendingPool;\r\n    }\r\n\r\n    /**\r\n     * @dev Authorized function to approves market and dToken to transfer handler's underlying token.\r\n     * @param _underlyingToken Token address to approve.\r\n     */\r\n    function approve(address _underlyingToken, uint256 amount) public auth {\r\n        require(\r\n            doApprove(_underlyingToken, aaveLendingPoolCore, amount),\r\n            \"approve: Approve aToken failed!\"\r\n        );\r\n\r\n        super.approve(_underlyingToken, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit token to market, only called by dToken contract.\r\n     * @param _underlyingToken Token to deposit.\r\n     * @return The actual deposited token amount.\r\n     */\r\n    function deposit(address _underlyingToken, uint256 _amount)\r\n        external\r\n        whenNotPaused\r\n        auth\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            tokenIsEnabled(_underlyingToken),\r\n            \"deposit: Token is disabled!\"\r\n        );\r\n        require(\r\n            _amount > 0,\r\n            \"deposit: Deposit amount should be greater than 0!\"\r\n        );\r\n\r\n        address _aToken = getAToken(_underlyingToken);\r\n        require(_aToken != address(0x0), \"deposit: Do not support token!\");\r\n\r\n        uint256 _MarketBalanceBefore = IERC20(_aToken).balanceOf(address(this));\r\n\r\n        InterestDetails storage _details = interestDetails[_underlyingToken];\r\n        // Update the stored interest with the market balance after the mint\r\n        uint256 _interest = _MarketBalanceBefore.sub(\r\n            _details.totalUnderlyingBalance\r\n        );\r\n        _details.interest = _details.interest.add(_interest);\r\n\r\n        // Mint all the token balance of the handler,\r\n        // which should be the exact deposit amount normally,\r\n        // but there could be some unexpected transfers before.\r\n        uint256 _handlerBalance = IERC20(_underlyingToken).balanceOf(\r\n            address(this)\r\n        );\r\n        LendingPool(aaveLendingPool).deposit(\r\n            _underlyingToken,\r\n            _handlerBalance,\r\n            uint16(0)\r\n        );\r\n\r\n        // including unexpected transfers.\r\n        uint256 _MarketBalanceAfter = IERC20(_aToken).balanceOf(address(this));\r\n\r\n        // Store the latest real balance.\r\n        _details.totalUnderlyingBalance = _MarketBalanceAfter;\r\n\r\n        uint256 _changedAmount = _MarketBalanceAfter.sub(_MarketBalanceBefore);\r\n\r\n        // return a smaller value as unexpected transfers were also included.\r\n        return _changedAmount > _amount ? _amount : _changedAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw token from market, but only for dToken contract.\r\n     * @param _underlyingToken Token to withdraw.\r\n     * @param _amount Token amount to withdraw.\r\n     * @return The actual withdrown token amount.\r\n     */\r\n    function withdraw(address _underlyingToken, uint256 _amount)\r\n        external\r\n        whenNotPaused\r\n        auth\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            _amount > 0,\r\n            \"withdraw: Withdraw amount should be greater than 0!\"\r\n        );\r\n\r\n        address _aToken = getAToken(_underlyingToken);\r\n        require(_aToken != address(0x0), \"withdraw: Do not support token!\");\r\n\r\n        uint256 _handlerBalanceBefore = IERC20(_underlyingToken).balanceOf(\r\n            address(this)\r\n        );\r\n\r\n        uint256 _MarketBalanceBefore = IERC20(_aToken).balanceOf(address(this));\r\n        InterestDetails storage _details = interestDetails[_underlyingToken];\r\n        // Update the stored interest with the market balance after the redeem\r\n        uint256 _interest = _MarketBalanceBefore.sub(\r\n            _details.totalUnderlyingBalance\r\n        );\r\n        _details.interest = _details.interest.add(_interest);\r\n\r\n        // aave supports redeem -1\r\n        AToken(_aToken).redeem(_amount);\r\n\r\n        uint256 _handlerBalanceAfter = IERC20(_underlyingToken).balanceOf(\r\n            address(this)\r\n        );\r\n\r\n        uint256 _changedAmount = _handlerBalanceAfter.sub(\r\n            _handlerBalanceBefore\r\n        );\r\n\r\n        // including unexpected transfers.\r\n        uint256 _MarketBalanceAfter = IERC20(_aToken).balanceOf(address(this));\r\n\r\n        // Store the latest real balance.\r\n        _details.totalUnderlyingBalance = _MarketBalanceAfter;\r\n\r\n        // return a smaller value.\r\n        return _changedAmount > _amount ? _amount : _changedAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev The corrsponding AToken address of the _underlyingToken.\r\n     * @param _underlyingToken Token to query the AToken.\r\n     */\r\n    function getAToken(address _underlyingToken)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return\r\n            LendingPoolCore(aaveLendingPoolCore).getReserveATokenAddress(\r\n                _underlyingToken\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Total balance with any accumulated interest for _underlyingToken belonging to handler\r\n     * @param _underlyingToken Token to get balance.\r\n     */\r\n    function getRealBalance(address _underlyingToken)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(getAToken(_underlyingToken)).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev The maximum withdrawable _underlyingToken in the market.\r\n     * @param _underlyingToken Token to get liquidity.\r\n     */\r\n    function getRealLiquidity(address _underlyingToken)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _underlyingBalance = IERC20(getAToken(_underlyingToken))\r\n            .balanceOf(address(this));\r\n        uint256 _cash = LendingPoolCore(aaveLendingPoolCore)\r\n            .getReserveAvailableLiquidity(_underlyingToken);\r\n\r\n        return _underlyingBalance > _cash ? _cash : _underlyingBalance;\r\n    }\r\n\r\n    /***************************************************/\r\n    /*** View Interfaces For Backwards compatibility ***/\r\n    /***************************************************/\r\n\r\n    /**\r\n     * @dev Total balance with any accumulated interest for `_underlyingToken` belonging to `handler`.\r\n     * @param _underlyingToken Token to get balance.\r\n     */\r\n    function getBalance(address _underlyingToken)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return getRealBalance(_underlyingToken);\r\n    }\r\n\r\n    /**\r\n     * @dev The maximum withdrawable amount of token `_underlyingToken` in the market.\r\n     * @param _underlyingToken Token to get liquidity.\r\n     */\r\n    function getLiquidity(address _underlyingToken)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return getRealLiquidity(_underlyingToken);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dTokenController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingPoolCore\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"DisableToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"EnableToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalDToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDToken\",\"type\":\"address\"}],\"name\":\"NewdTokenAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"aaveLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aaveLendingPoolCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dTokenController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_underlyingTokens\",\"type\":\"address[]\"}],\"name\":\"disableTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_underlyingTokens\",\"type\":\"address[]\"}],\"name\":\"enableTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"getRealBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"getRealLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dTokenController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingPoolCore\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dTokenController\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"interestDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUnderlyingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDTokenController\",\"type\":\"address\"}],\"name\":\"setDTokenController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLendingPool\",\"type\":\"address\"}],\"name\":\"setLendingPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLendingPoolCore\",\"type\":\"address\"}],\"name\":\"setLendingPoolCore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"tokenIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveHandler","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009b6ba9e66a2422f1d62f6f83a46a129de907967b000000000000000000000000398ec7346dcd622edc5ae82352f02be94c62d1190000000000000000000000003dfd23a6c5e8bbcfc9581d2e864a68feb6a076d3","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ce87855c4ea2dfa0dd9429f1bcf29be12564d641be6a73dde3ebe33565f88383"}]}