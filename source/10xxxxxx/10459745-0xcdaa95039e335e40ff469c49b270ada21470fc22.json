{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\generics\\Configurable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n* Allows a contract to have admin rights on changing some config values\r\n*/\r\nabstract contract Configurable is Ownable {\r\n\r\n    event ConfigChanged(bytes32 name, uint256 new_value);\r\n    // config\r\n\tmapping(bytes32 => uint256) public config;\r\n\r\n    constructor() public\r\n    Ownable() {\r\n    }\r\n\r\n    /**\r\n        @dev Sets a config value\r\n\t\t@param name Name of the value\r\n        @param new_value The value to write in the config\r\n    */\r\n    function setConfigValue(bytes32 name, uint256 new_value) public virtual\r\n    onlyOwner() {\r\n        config[name] = new_value;\r\n        emit ConfigChanged(name, new_value);\r\n    }\r\n}\r\n\r\n// File: contracts\\CreatorRoulette.sol\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nenum State {READY, WAITING_QUERY1, WAITING_QUERY2, DONE, REFUND}\r\n\r\nstruct RaceConfig {\r\n    // provable query ids\r\n    bytes32 query_price_start;\r\n    bytes32 query_price_end;\r\n\r\n    bytes32[] coins;\r\n    uint256[] coin_pool;\r\n    uint256 total_pool;\r\n\r\n    uint256 race_duration;\r\n    uint256 min_bet;\r\n    uint256 start_time;\r\n    uint256 betting_duration;\r\n    uint256 bet_matching_pool;\r\n    uint256 paid; //amount paid to claimers\r\n\r\n    address creator;\r\n\r\n    State state;\r\n}\r\n\r\nabstract contract IChallenge {\r\n    //function races(uint256 raceid) external view returns (RaceConfig memory);\r\n    mapping(uint256 => RaceConfig) public races;\r\n    function getRaceCoinPrices(uint256 race_id, bytes32 coin) virtual external view returns (uint256 start, uint256 end);\r\n    function getRaceCoins(uint256 race_id) virtual external view returns(uint256 length, bytes32[10] memory array, uint256[10] memory pools);\r\n}\r\n\r\ncontract CreatorRoulette is Configurable {\r\n    event RewardClaimed(uint256 raceid);\r\n\r\n    mapping(uint256 => bool) rewarded;\r\n\r\n    constructor() public\r\n    Configurable() {\r\n        config[\"REWARD\"] = 1 ether;\r\n        config[\"MIN_POOL\"] = 0.1 ether;\r\n        config[\"ODDS\"] = 64;\r\n        config[\"CHALLENGE_ADDR\"] = uint256(0x2FC5Ef1BA3D72595Db6fd52478813DE85872D751);\r\n    }\r\n\r\n    function getAddress() public view returns (address) {\r\n        return address(config[\"CHALLENGE_ADDR\"]);\r\n    }\r\n\r\n    function checkWin(uint256 raceid) public view returns (bool) {\r\n        address addr = address(config[\"CHALLENGE_ADDR\"]);\r\n        ( , ,uint256 pool, , , , , , , ,State state) = IChallenge(addr).races(raceid);\r\n        require(state == State.DONE, \"Race isnt completed\");\r\n        require(pool >= config[\"MIN_POOL\"], \"Pool is too low\");\r\n        \r\n        ( , bytes32[10] memory coinArray, ) = IChallenge(addr).getRaceCoins(raceid);\r\n        (uint256 start, uint256 end) = IChallenge(addr).getRaceCoinPrices(raceid, coinArray[0]);\r\n        \r\n        uint256 val = uint256(keccak256(abi.encodePacked(start, end, raceid)));\r\n        return val % config[\"ODDS\"] == 0;\r\n    }\r\n\r\n    receive() external payable {\r\n        \r\n    }\r\n\r\n    function ownerKill() external onlyOwner {\r\n        selfdestruct(payable(owner()));\r\n    }\r\n\r\n    function claim(uint256 raceid) public {\r\n        require(!rewarded[raceid], \"already rewarded\");\r\n        require(checkWin(raceid), \"not a winner\");\r\n        rewarded[raceid] = true;\r\n        address addr = address(config[\"CHALLENGE_ADDR\"]);\r\n        ( , , , , , , , , ,address creator , ) = IChallenge(addr).races(raceid);\r\n        payable(creator).transfer(config[\"REWARD\"]);\r\n        emit RewardClaimed(raceid);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raceid\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceid\",\"type\":\"uint256\"}],\"name\":\"checkWin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerKill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"setConfigValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CreatorRoulette","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://71056a52bf4e1ab99963c38af404c2f6c5e4cfa70c442073b4ef486b08cd6de6"}]}