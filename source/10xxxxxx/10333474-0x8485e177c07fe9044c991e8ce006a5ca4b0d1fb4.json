{"status":"1","message":"OK","result":[{"SourceCode":"// ----------------------------------------------------------------------------\r\n// Company Name : Mile Wallet \r\n// Website      : www.milewallet.co\r\n//\r\n// (c) by MILE WALLET.\r\n// --\r\n\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public manager;\r\n  address public ownerWallet;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    manager = msg.sender;\r\n    ownerWallet = 0x19bAf1B6C28F89248174397fBE1cD436c256B54e;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"only for owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrManager() {\r\n     require((msg.sender == owner)||(msg.sender == manager), \"only for owner or manager\");\r\n      _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n\r\n  function setManager(address _manager) public onlyOwnerOrManager {\r\n      manager = _manager;\r\n  }\r\n}\r\n\r\ncontract SmartMileWallet is Ownable {\r\n\r\n    event regLevelEvent(address indexed _user, address indexed , uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event prolongateLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed , uint _level, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed , uint _level, uint _time);\r\n    //------------------------------\r\n\r\n    mapping (uint => uint) public LEVEL_PRICE;\r\n    uint PERIOD_LENGTH = 365 days;\r\n\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        mapping (uint => uint) levelExpired;\r\n    }\r\n\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n\r\n\r\n\r\n\r\n    constructor() public {\r\n\r\n        LEVEL_PRICE[1] = 0.10 ether;\r\n        LEVEL_PRICE[2] = 0.10 ether;\r\n        LEVEL_PRICE[3] = 0.20 ether;\r\n        LEVEL_PRICE[4] = 0.40 ether;\r\n        LEVEL_PRICE[5] = 1.00 ether;\r\n        LEVEL_PRICE[6] = 5.00 ether;\r\n        LEVEL_PRICE[7] = 8.00 ether;\r\n        LEVEL_PRICE[8] = 20.00 ether;\r\n        LEVEL_PRICE[9] = 100.00 ether;\r\n\r\n\r\n        users[ownerWallet].levelExpired[1] = 77777777777;\r\n        users[ownerWallet].levelExpired[2] = 77777777777;\r\n        users[ownerWallet].levelExpired[3] = 77777777777;\r\n        users[ownerWallet].levelExpired[4] = 77777777777;\r\n        users[ownerWallet].levelExpired[5] = 77777777777;\r\n        users[ownerWallet].levelExpired[6] = 77777777777;\r\n        users[ownerWallet].levelExpired[7] = 77777777777;\r\n        users[ownerWallet].levelExpired[8] = 77777777777;\r\n        users[ownerWallet].levelExpired[9] = 77777777777;\r\n\r\n    }\r\n\r\n    function () external payable {\r\n\r\n        uint level;\r\n\r\n        if(msg.value == LEVEL_PRICE[1]){\r\n            level = 1;\r\n        }else if(msg.value == LEVEL_PRICE[2]){\r\n            level = 2;\r\n        }else if(msg.value == LEVEL_PRICE[3]){\r\n            level = 3;\r\n        }else if(msg.value == LEVEL_PRICE[4]){\r\n            level = 4;\r\n        }else if(msg.value == LEVEL_PRICE[5]){\r\n            level = 5;\r\n        }else if(msg.value == LEVEL_PRICE[6]){\r\n            level = 6;\r\n        }else if(msg.value == LEVEL_PRICE[7]){\r\n            level = 7;\r\n        }else if(msg.value == LEVEL_PRICE[8]){\r\n            level = 8;\r\n        }else if(msg.value == LEVEL_PRICE[9]){\r\n            level = 9;\r\n        }else {\r\n            revert('Incorrect Value send');\r\n        }\r\n\r\n\r\n        UserStruct memory userStruct;\r\n\r\n        users[msg.sender] = userStruct;\r\n\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;\r\n        users[msg.sender].levelExpired[2] = 0;\r\n        users[msg.sender].levelExpired[3] = 0;\r\n        users[msg.sender].levelExpired[4] = 0;\r\n        users[msg.sender].levelExpired[5] = 0;\r\n        users[msg.sender].levelExpired[6] = 0;\r\n        users[msg.sender].levelExpired[7] = 0;\r\n        users[msg.sender].levelExpired[8] = 0;\r\n        users[msg.sender].levelExpired[9] = 0;\r\n\r\n\r\n        payForLevel(1, msg.sender);\r\n\r\n    }\r\n\r\n    function buyLevel(uint _level) public payable {\r\n        require(users[msg.sender].isExist, 'User not exist');\r\n\r\n        require( _level>0 && _level<=9, 'Incorrect level');\r\n\r\n        if(_level == 1){\r\n            require(msg.value==LEVEL_PRICE[1], 'Incorrect Value');\r\n            users[msg.sender].levelExpired[1] += PERIOD_LENGTH;\r\n        } else {\r\n            require(msg.value==LEVEL_PRICE[_level], 'Incorrect Value');\r\n\r\n            for(uint l =_level-1; l>0; l-- ){\r\n                require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');\r\n            }\r\n\r\n            if(users[msg.sender].levelExpired[_level] == 0){\r\n                users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            } else {\r\n                users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n            }\r\n        }\r\n        payForLevel(_level, msg.sender);\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n\r\n    function payForLevel(uint _level, address _user) internal {\r\n\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"prolongateLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"}]","ContractName":"SmartMileWallet","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ff1661263bdbfbe1e0d2bf7edc0e76c5e8e114ecdee466a39a3ffd6f411ffd77"}]}