{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/AdminConversion.sol\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\r\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner\r\n * designates a new owner but does not actually transfer ownership. The new owner then accepts\r\n * ownership and completes the transfer.\r\n */\r\ncontract Ownable {\r\n  address _owner;\r\n\r\n   event transferOwn(address _owner, address newOwner);\r\n\r\n\t\tmodifier onlyOwner() {\r\n\t\t\trequire(isOwner(msg.sender), \"OwnerRole: caller does not have the Owner role\");\r\n\t\t\t_;\r\n\t\t}\r\n\r\n\t\tfunction isOwner(address account) public view returns (bool) {\r\n\t\t\treturn account == _owner;\r\n\t\t}\r\n\r\n\t\tfunction getOwner() public view returns (address) {\r\n\t\t\treturn _owner;\r\n\t\t}\r\n\r\n\t\t function transferOwnership(address newOwner) public onlyOwner returns (address) {\r\n\t         require( newOwner != address(0), \"new owner address is invalid\");\r\n\t\t\t emit transferOwn(_owner, newOwner);\r\n\t         _owner = newOwner;\r\n\t\t\t return _owner;\r\n      }\r\n}\r\n\r\n// File: contracts/Authorizable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n/**\r\n * @title Authorizable\r\n * @dev The Authorizable contract has an authorizables address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Authorizable is Ownable {\r\n  mapping(address => bool) public authorized;\r\n\r\n\t\tmodifier onlyAuthorized() {\r\n\t\t\trequire(isAuthorized(msg.sender), \"AuthorizeError: caller does not have the Owner or Authorized role\");\r\n\t\t\t_;\r\n\t\t}\r\n\r\n\t\tfunction isAuthorized(address account) public view returns (bool) {\r\n\t\t\treturn authorized[account];\r\n\t\t}\r\n\r\n\t\tfunction addAuthorized(address _addr) public onlyOwner {\r\n\r\n\t\t\tauthorized[_addr] = true;\r\n\t\t}\r\n\r\n\t\tfunction addAuthorizedInternal( address _addr ) internal {\r\n\t\t\tauthorized[_addr] = true;\r\n\t\t}\r\n\r\n\t\tfunction removeAuthorizedInternal( address _addr ) internal {\r\n\t\t\tauthorized[_addr] = false;\r\n\t\t}\r\n\r\n\t\tfunction removeAuthorized(address _addr) public onlyOwner {\r\n   \r\n\t\t\tauthorized[_addr] = false;\r\n\t\t}\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/TokenStorage.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n/**\r\n* @title TokenStorage\r\n*/\r\ncontract TokenStorage  is Ownable{\r\n  using SafeMath for uint256;\r\n\r\n\t// variables\r\n\taddress internal _registryContract;\r\n\r\n\tuint8 internal _decimals;\r\n\tstring internal _name;\r\n\tstring internal _symbol;\r\n\tuint256 internal _supply;\r\n\r\n\tmapping( address => bool ) public whitelistedContracts;\r\n\r\n\t// struct\r\n\tstruct tkyc {\r\n\t\tbytes32 dochash;\r\n\t\tbool status;\r\n\t}\r\n\r\n\t// mapping\r\n\tmapping(address => mapping(address => uint256)) internal _allowances;\r\n\tmapping(address => uint256) internal _balances;\r\n\tmapping(address => tkyc) internal _kycs;\r\n\r\n\tconstructor() public {\r\n    \r\n\t\t_owner = msg.sender;\r\n\t\t_decimals = 18;\r\n\t\t_name = \"XFA\";\r\n\t\t_symbol = \"XFA\";\r\n\r\n\t\t_supply = 1000000000 * 10**18; // 18 decimal places are allowed\r\n\t\t_balances[_owner] = _supply;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// proxy\r\n\tfunction _setRegistry(address _registry) public onlyOwner {\r\n\t\trequire(_registry != address(0), \"InvalidAddress: invalid address passed for proxy contract\");\r\n\t\t_registryContract = _registry;\r\n\t}\r\n\r\n\tfunction _getRegistry() public view returns (address) {\r\n\t\treturn _registryContract;\r\n\t}\r\n\r\n\tmodifier isRegistry() {\r\n\t\trequire(msg.sender == _registryContract, \"AccessDenied: This address is not allowed to access the storage\");\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\t// utils\r\n\tfunction _getName() public view isRegistry returns (string) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction _getSymbol() public view isRegistry returns (string) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction _getDecimals() public view isRegistry returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction _subSupply(uint256 _value) public isRegistry {\r\n\t\t_supply = _supply.sub(_value);\r\n\t}\r\n\r\n\tfunction _getSupply() public view isRegistry returns (uint256) {\r\n\t\treturn _supply;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// allowance\r\n\tfunction _setAllowance(address _owner, address _spender, uint256 _value) public isRegistry {\r\n \r\n\t\t_allowances[_owner][_spender] = _value;\r\n\t}\r\n\r\n\tfunction _getAllowance(address _owner, address _spender) public view isRegistry returns (uint256) {\r\n\r\n\t\treturn _allowances[_owner][_spender];\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\t// balance\r\n\tfunction _addBalance(address _addr, uint256 _value) public isRegistry {\r\n\t\trequire(_kycs[_addr].status == true, \"KycError: Unable to make transaction\");\r\n\t\t_balances[_addr] = _balances[_addr].add(_value);\r\n\t}\r\n\r\n\tfunction _subBalance(address _addr, uint256 _value) public isRegistry {\r\n\t\trequire(_kycs[_addr].status == true, \"KycError: Unable to make transaction\");\r\n\t\t_balances[_addr] = _balances[_addr].sub(_value);\r\n\t}\r\n\r\n\tfunction _getBalance(address _addr) public view isRegistry returns (uint256) {\r\n\t\treturn _balances[_addr];\r\n\t}\r\n\r\n\r\n\r\n\t// kyc\r\n\tfunction _setKyc(address _addr, bytes32 _value) public isRegistry {\r\n\t\t tkyc memory item = tkyc( _value, true );\r\n\t\t_kycs[ _addr ] = item;\r\n\t}\r\n\r\n\tfunction _removeKyc(address _addr) public isRegistry {\r\n\t\t_kycs[_addr].dochash = \"0x0\";\r\n\t\t_kycs[_addr].status = false;\r\n\t}\r\n\r\n\tfunction _getKyc(address _addr) public view isRegistry returns (bytes32 dochash, bool status) {\r\n\t\treturn (_kycs[_addr].dochash, _kycs[_addr].status);\r\n\t}\r\n\r\n\tfunction _verifyKyc(address _from, address _to) public view isRegistry returns (bool) {\r\n\t\tif (_kycs[_from].status == true && _kycs[_to].status == true) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction addWhitelistedContract( address _admin ) public onlyOwner returns (bool) {\r\n\t\twhitelistedContracts[_admin] = true;\r\n\t}\r\n\r\n\tfunction removeWhitelistedContract( address _admin ) public onlyOwner returns (bool) {\r\n\t\twhitelistedContracts[_admin] = false;\r\n\t}\r\n\r\n\tfunction isWhitelistedContract( address _admin ) public view returns (bool) {\r\n\t\treturn whitelistedContracts[_admin];\r\n\t}\r\n}\r\n\r\n// File: contracts/XFAFirstVersionAbi.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n// import \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\r\n/**\r\n* @title XFAFirstVersion\r\n* @notice A basic ERC20 token with modular data storage\r\n*/\r\ncontract XFAFirstVersion is Authorizable {\r\n\r\n\tTokenStorage private dataStore;\r\n\r\n\tuint256 public _version;\r\n\r\n\t// event\r\n\tevent Burn(address indexed _burner, uint256 _value);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\t\r\n\r\n\tconstructor(address storeAddress) public {\r\n\t\tdataStore = TokenStorage(storeAddress);\r\n\t}\r\n\r\n\t// getters\r\n\tfunction name() public view returns (string) {\r\n\t\treturn dataStore._getName();\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string) {\r\n\t\treturn dataStore._getSymbol();\r\n\t}\r\n\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn dataStore._getDecimals();\r\n\t}\r\n\r\n\r\n\tfunction version() public view returns (uint256){\r\n\t\treturn _version;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn dataStore._getSupply();\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view returns (uint256) {\r\n\t\treturn dataStore._getBalance(account);\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\r\n\t\treturn dataStore._getAllowance(_owner, _spender);\r\n\t}\r\n\r\n\tfunction getAttributes(address _of) public view returns (bytes32 dochash, bool status) {\r\n\r\n\t\treturn dataStore._getKyc(_of);\r\n\t}\r\n\r\n\tfunction verifyTransfer(address sender, address recipient, uint256 amount) public view returns (bool success) {\r\n   \r\n\t\trequire(sender != address(0), \"AddressError: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"AddressError: transfer to the zero address\");\r\n\t\trequire(amount > 0, \"Amount can not be 0 or less\");\r\n\t\treturn dataStore._verifyKyc(sender, recipient);\r\n\t}\r\n\r\n\t// setters\r\n\tfunction transfer(address _to, uint256 _value) public onlyAuthorized returns (bool) {\r\n   \r\n\t\trequire(verifyTransfer(msg.sender, _to, _value), \"VerificationError: Unable ro process the transaction.\");\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyAuthorized returns (bool) {\r\n \r\n\t\trequire(verifyTransfer(_from, _to, _value), \"VerificationError: Unable ro process the transaction.\");\r\n\t\trequire(dataStore._getAllowance(_from, msg.sender) >= _value, \"AllowanceError: The spender does not hve the required allowance.\");\r\n\t\t_transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public onlyAuthorized returns (bool) {\r\n    \r\n\t\t_approve(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction burn(uint256 _value) public returns (bool) {\r\n  \r\n\t\t_burn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction burnFrom(address _of, uint256 _value) public returns (bool) {\r\n\t\tbool isWhitelisted = dataStore.isWhitelistedContract( msg.sender );\r\n\t\trequire( msg.sender == _owner || isWhitelisted );\r\n\t\t_burn(_of, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction setAttributes (address _of, bytes32 _dochash) public onlyOwner returns (bool) {\r\n\t \r\n\t\t_setAttributes(_of, _dochash);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction removeAttributes(address _of) public onlyOwner returns (bool) {\r\n\t\t\r\n\t\t_removeAttributes(_of);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction addRole(address _addr) public onlyOwner returns (bool) {\r\n\t\tsuper.addAuthorized(_addr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction removeRole(address _addr) public onlyOwner returns (bool) {\r\n\t\tsuper.removeAuthorized(_addr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// internal\r\n\tfunction _approve(address owner, address spender, uint256 amount) internal {\r\n   \r\n\t\trequire(owner != address(0), \"AddressError: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"AddressError: approve to the zero address\");\r\n\t\trequire(amount > 0, \"Amount can not be 0 or less\");\r\n\t\trequire(dataStore._getBalance(owner) >= amount, \"Insufficient Funds\");\r\n\r\n\t\tdataStore._setAllowance(owner, spender, amount);\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal {\r\n   \r\n\t\trequire(sender != address(0), \"AddressError: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"AddressError: transfer to the zero address\");\r\n\t\trequire(amount > 0, \"Amount can not be 0 or less\");\r\n\t\trequire(dataStore._getBalance(sender) >= amount, \"Insufficient Funds\");\r\n\r\n\t\tdataStore._subBalance(sender, amount);\r\n\t\tdataStore._addBalance(recipient, amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _burn(address sender, uint256 amount) internal {\r\n\t\trequire(sender != address(0), \"AddressError: transfer from the zero address\");\r\n\t\trequire(amount > 0, \"Amount can not be 0 or less\");\r\n\t\trequire(dataStore._getBalance(sender) >= amount, \"Insufficient Funds\");\r\n\r\n\t\tdataStore._subBalance(sender, amount);\r\n\t\tdataStore._subSupply(amount);\r\n\t\temit Burn(sender, amount);\r\n\t}\r\n\r\n\tfunction _setAttributes(address account, bytes32 dochash) internal {\r\n\t\trequire(account != address(0), \"AddressError: from the zero address\");\r\n\t\trequire(dochash.length > 0, \"HashError: Hash can never be empty\");\r\n\t\tdataStore._setKyc(account, dochash);\r\n\t}\r\n\r\n\tfunction _removeAttributes(address account) internal {\r\n\t\trequire(account != address(0), \"AddressError: from the zero address\");\r\n\t\tdataStore._removeKyc(account);\r\n\t}\r\n}\r\n\r\n// File: contracts/XFIAbi.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n// ownable contract\r\ncontract Ownabled {\r\n  address public owner;\r\n\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20  {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public  returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Burn(address indexed _burner, uint256 _value);\r\n  event Lock(address indexed _of, uint256 _value, uint256 _time);\r\n  event Unlock(address indexed _of);\r\n}\r\n\r\ncontract XFITOKEN is ERC20, Ownabled {\r\n    \r\n    bool public freeTransfer = false;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    struct tlock {\r\n\t\tuint256 amount;\r\n\t\tuint256 validity;\r\n\t}\r\n    mapping(address => tlock) internal _locks;\r\n    \r\n    mapping ( address => bool ) whitelistedContracts;\r\n\r\n    string public _name;  \r\n    string public  _symbol;\r\n    uint8 public _decimals;\r\n    uint public _totalSupply ;\r\n    uint256 public _lockTime;\r\n\r\n    function name() public view returns( string ){\r\n      return _name;\r\n    }\r\n\r\n    function symbol() public view returns( string ){\r\n      return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns ( uint8 ){\r\n      return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns( uint256 ){\r\n      return _totalSupply;\r\n    }\r\n    \r\n       \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        _decimals = 18;\r\n        _name = \"XFI\";\r\n        _symbol = \"XFI\";\r\n\r\n        _totalSupply = 1000000000 * 10**18; // 18 decimal places are allowed\r\n        balances[owner] = _totalSupply;\r\n      }\r\n\r\n\r\n    modifier ownerOrEnabledTransfer() {\r\n         require(freeTransfer || msg.sender == owner || _isWhitelistedContract( msg.sender) , \"cannot transfer since freetransfer is false or sender not owner\");\r\n         _;\r\n     }\r\n       \r\n    \r\n  modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length == size + 4);\r\n        _;\r\n    }\r\n    \r\n  function enableTransfer() ownerOrEnabledTransfer() {\r\n        freeTransfer = true;\r\n    }\r\n\r\n  function transferLock(address _to, uint256 _value, uint256 _time) public returns (bool) {\r\n\r\n  }\r\n\t\r\n    function unlock(address _of) public returns (bool){}\r\n    \r\n    function lock(address _to, uint256 _value, uint256 _time) ownerOrEnabledTransfer public returns (bool) {}\r\n\r\n       \r\n    function burn(uint256 _value) public onlyOwner returns (bool) {}\r\n\t\r\n\tfunction burnFrom(address _of, uint256 _value) public onlyOwner returns (bool) {}\r\n\t\r\n\tfunction getLockedData(address _of) public view returns (uint256 validity, uint256 amount) {}\r\n\t\r\n\t\r\n\tfunction getLockValidity(address _of) public view returns (uint256 validity, uint256 amount) {}\r\n\t\r\n\r\n  function transfer(address _to, uint256 _value) ownerOrEnabledTransfer public returns (bool) {}\r\n\r\n  function getTransferrableAmount( address _of ) public view returns (uint256) {}\r\n\r\n \r\n  function balanceOf(address _owner) public view returns (uint256 bal) { }\r\n  \r\n  function transferFrom(address _from, address _to, uint256 _value) ownerOrEnabledTransfer public returns (bool) {}\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {}\r\n \r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {}\r\n  \r\n  function _lock(address recipient, uint256 amount, uint256 validity) internal {}\r\n\r\n  function unlockOwner( address _of ) public onlyOwner {}\r\n\t\r\n\t\r\n\t function _unlock(address _of) internal {}\r\n\r\n  function _burn(address _of, uint256 amount) public view returns (bool) {}\r\n\t\r\n\tfunction _getLockAmount(address _of) public view returns (uint256) {}\r\n\r\n    function _getLockValidity(address _of) public view  returns (uint256) {}\r\n\r\n\tfunction _getLockedData(address _of) returns (uint256 validity, uint256 amount) {}\r\n   \r\n   // extend the validity of lock of a user\r\n  function _extendLockValidity(address _of, uint256 _time) internal {}\r\n\r\n  // function to add the lock amount\r\n  // will be callable only by the owner\r\n  function _addLockAmount(address _of, uint256 _amount) public onlyOwner returns (bool) {}\r\n\r\n  // function to get the lock amount \r\n  // the amount should be less than the balance of the account \r\n  // this function should be callable by the owner only\r\n  // when lock amount is reduced , the rest tokens become transferrable\r\n\tfunction _reduceLockAmount(address _of, uint256 _amount) public onlyOwner returns (bool) {}\r\n\t\r\n  function _addWhitelistedContract( address _admin ) public onlyOwner returns (bool) {}\r\n\r\n  function _removeWhitelistedContract( address _admin ) public onlyOwner returns (bool) {}\r\n\r\n  function _isWhitelistedContract( address _admin ) public view returns (bool) {}\r\n  \r\n\r\n}\r\n\r\n// File: contracts/AdminConversion.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract AdminConversion is Ownable{\r\n\r\n\tmapping( address => uint ) last_accrual_payment_timestamp;\r\n\r\n\tXFAFirstVersion xfaProxy;\r\n\tXFITOKEN xfiToken;\r\n\r\n\t// the constructor value\r\n\tconstructor( address _xfaProxy, address _xfi ) public {\r\n\t\txfaProxy = XFAFirstVersion( _xfaProxy );\r\n\t\txfiToken = XFITOKEN( _xfi );\r\n\t\t_owner = msg.sender;\r\n\t}\r\n\r\n\t// function to calculate the accrual against the last accrual done time\r\n\tfunction _calculateAccrual( address _of ) public view returns( uint256, uint256 ) {\r\n\t\tuint256 _balance = xfaProxy.balanceOf( _of );\r\n\t\tuint256 _currentTimeStamp = now;\r\n\t\tuint256 _lastTimestamp = last_accrual_payment_timestamp[ _of ];\r\n\t\tif( _lastTimestamp == 0 ){\r\n\t\t\t_lastTimestamp = 1585699200; // 04/01/2020 @ 12:00am (UTC)\r\n\t\t}\r\n\t\tuint256 _days  = (_currentTimeStamp - _lastTimestamp)/( 60 * 60 * 24 );\r\n\t\tuint256 _accrualAmount = (_balance * _days * 5 ) / (365 * 2);\r\n\t\treturn ( _accrualAmount, _currentTimeStamp );\r\n\r\n\t}\r\n\r\n\r\n\t// function to calculate for the conversion part\r\n\tfunction _calculateConversion( address _of , uint256 _amount ) public view returns( uint256 ){\r\n\t\tuint256 _balance = xfaProxy.balanceOf( _of );\r\n\t\trequire( _amount <= _balance );\r\n\t\treturn 50 * _amount;\r\n\t} \r\n\r\n\t// function to burn xfa of the address and also send the tokens in xfi \r\n\tfunction _payoutAccrual( address _of, uint256  _time) public onlyOwner returns( bool ){\r\n\t\tvar ( _amount, _updateLast) = _calculateAccrual( _of );\r\n\t\t// check the approval \r\n\t\trequire( xfiToken.allowance( xfiToken.owner(), address( this) ) >= _amount, \"Insufficient tokens in admin contract\");\r\n\t\tlast_accrual_payment_timestamp[ _of ] = _updateLast;\r\n\t\txfiToken.transferFrom( xfiToken.owner(), _of, _amount );\r\n\t    xfiToken.lock(_of, _amount, _time);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// function payout conversion \r\n\tfunction _payoutConversion( address _of, uint256 _amount, uint256 _time ) public onlyOwner returns ( bool ){\r\n\t\tuint256 _value = _calculateConversion( _of, _amount );\r\n\t\trequire( xfiToken.allowance( xfiToken.owner(), address( this) ) >= _amount, \"Insufficient tokens in admin contract\" );\r\n\t\txfaProxy.burnFrom( _of, _amount );\r\n\t\t//xfiToken.transferLock(_of, _amount, _time);\r\n\t\txfiToken.transferFrom( xfiToken.owner(), _of, _value );\r\n\t\txfiToken.lock(_of, _value, _time);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"_payoutAccrual\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"_calculateAccrual\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"_payoutConversion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_calculateConversion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_xfaProxy\",\"type\":\"address\"},{\"name\":\"_xfi\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwn\",\"type\":\"event\"}]","ContractName":"AdminConversion","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007818f049ef50abd5355af2d5ac6deafe4554d613000000000000000000000000ccd86c1211c27eb87393c1a5091dc9221c7986fa","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6131d86c922c445a771fcdbae4895f2b163945d6a4379b189d9691212c997098"}]}