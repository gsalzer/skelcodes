{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n/**\r\n * @dev Credits to\r\n * Mathieu L. @ ProApps \r\n * https://proapps.fr\r\n * september 7th 2020 \r\n *\r\n * @dev Property\r\n * all rights are reserved to ArtCertificate\r\n *\r\n * @dev Deployed successfully with compilers :\r\n *      - 0.5.17\r\n */\r\npragma solidity >=0.4.22 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Unsigned math operations with safety checks that revert on error\r\n* @dev source : openzeppelin-solidity/contracts/math/SafeMath.sol\r\n*/\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* Utility library of inline functions on addresses\r\n* @dev source : openzeppelin-solidity/contracts/utils/Address.sol\r\n*/\r\nlibrary Address {\r\n    /**\r\n    * Returns whether the target address is a contract\r\n    * @dev This function will return false if invoked during the constructor of a contract,\r\n    * as the code is not actually created until after the constructor finishes.\r\n    * @param account address of the account to check\r\n    * @return whether the target address is a contract\r\n    */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be     \r\n        // contracts then.  /* 9 sept. 2020 : checked */\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n* @title IERC165\r\n* @dev https://eips.ethereum.org/EIPS/eip-165\r\n* @dev source : openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n*/\r\ninterface IERC165 {\r\n    /**\r\n    * @notice Query if a contract implements an interface\r\n    * @param interfaceId The interface identifier, as specified in ERC-165\r\n    * @dev Interface identification is specified in ERC-165. This function\r\n    * uses less than 30,000 gas.\r\n    */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n* @title ERC165\r\n* @author Matt Condon (@shrugs)\r\n* @dev Implements ERC165 using a lookup table.\r\n* @dev source : openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n* @dev NB: The only interface registered by this all contract is the ERC165 interface itself ( 0x01ffc9a7 )\r\n*/\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    /*\r\n    * 0x01ffc9a7 ===\r\n    *     bytes4(keccak256('supportsInterface(bytes4)'))\r\n    */\r\n\r\n    /**\r\n    * @dev a mapping of interface id to whether or not it's supported\r\n    */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /**\r\n    * @dev A contract implementing SupportsInterfaceWithLookup\r\n    * implement ERC165 itself\r\n    */\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n    * @dev implement supportsInterface(bytes4) using a lookup table\r\n    */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n    * @dev internal method for registering an interface\r\n    */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n* @dev source : openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n*/\r\ncontract Ownable {\r\n    address private _owner = address(0x9eb10fE7C86f301aa7E5F6446BF4301D12aaC0e2);\r\n    address internal ZERO_ADDRESS = address(0);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor () internal {\r\n        // give contract ownership to contract deployer\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n    * @return the address of the owner.\r\n    */\r\n    function proprietaire_contrat() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return true if `msg.sender` is the owner of the contract.\r\n    */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n   \r\n    /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title CertificateStructures\r\n* @dev `Certificate` and `Artwork` structs definitions \r\n*/\r\ncontract CertificateStructures {\r\n    /* Certificate Schemas */\r\n    // metadatas of the certificate\r\n    struct Certificate {\r\n        uint id;                    // to add on creation\r\n        uint date_certificat;       // to add on creation\r\n        address eth_adresse_proprietaire;\r\n        string identifiant_unique_non_consecutif;\r\n        string url_image_externe;\r\n        string url_certificat;\r\n    }\r\n  \r\n    // metadatas of the artwork\r\n    struct Artwork {\r\n        uint date_oeuvre;\r\n        string deposant;\r\n        string artiste;\r\n        string signature;\r\n        string numero_serie;\r\n        string oeuvre;\r\n        string support;\r\n        string dimension;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title ArtCertificate NFT Assets\r\n* @dev NON-STANDARD contract\r\n* @dev Each certificate id MUST lead to :\r\n{\r\n    identifiant_unique_non_consecutif,          \r\n    deposant,\r\n    artiste,\r\n    oeuvre,\r\n    date_oeuvre,\r\n    support,\r\n    dimension,\r\n    signature,\r\n    numero_serie,\r\n    eth_adresse_proprietaire\r\n}\r\n*/\r\ncontract ArtCertificate is Ownable, CertificateStructures, ERC165 {\r\n    using SafeMath for uint256;\r\n\r\n    event CertificateTransferred(uint certificateId, address _from, address _to);\r\n\r\n    /*--------------------------------------------------STORAGE---------------------------------------------------*/\r\n    // available id for next certificate\r\n    uint256 public nextCertificateId = 1; \r\n\r\n    /* Public Storage */\r\n    string public site_web = \"https://www.artcertificate.eu/\";\r\n    string public constant nom = \"Artcertificate\";\r\n    string public constant symbole = \"ART\";\r\n\r\n    // Certificates storage\r\n    mapping(uint256 => Certificate) public certificates;\r\n    // Artworks storage\r\n    mapping(uint256 => Artwork) public artworks;\r\n    // All Certificates\r\n    uint[] private certificateIds;\r\n    // Mapping certificate owner => certificateIds\r\n    mapping(address => uint256[]) private ownedCertificates;\r\n\r\n\r\n    /*--------------------------------------------------ACCESS RESTRICTIONS---------------------------------------------------*/\r\n    modifier onlyCertificateOrContractOwner(uint _id) {\r\n        require(\r\n            isOwner()\r\n            || proprietaireCertificat(_id) == msg.sender\r\n        );\r\n        _;\r\n    }\r\n\r\n    \r\n    /*-------------------------------------------------SETTER FUNCTIONS----------------------------------------------------*/\r\n    function print(\r\n        uint date_oeuvre,\r\n        string memory identifiant_unique_non_consecutif,          \r\n        string memory deposant,\r\n        string memory artiste,\r\n        string memory oeuvre,\r\n        string memory support,\r\n        string memory dimension,\r\n        string memory signature,\r\n        string memory numero_serie,\r\n        string memory url_image_externe,\r\n        string memory url_certificat\r\n    ) public onlyOwner returns (uint){\r\n\r\n        Certificate memory certificate;\r\n        Artwork memory artwork;\r\n\r\n        // add all certificate's params\r\n        certificate = Certificate(\r\n            nextCertificateId,\r\n            block.timestamp,\r\n            proprietaire_contrat(),\r\n            identifiant_unique_non_consecutif,\r\n            url_image_externe,\r\n            url_certificat\r\n        );\r\n\r\n        // add all artwork's params\r\n        artwork = Artwork(\r\n            date_oeuvre,      \r\n            deposant,\r\n            artiste,\r\n            signature,\r\n            numero_serie,\r\n            oeuvre,\r\n            support,\r\n            dimension\r\n        );\r\n        \r\n        // add new certificate to certificates\r\n        certificates[nextCertificateId] = certificate; \r\n        \r\n        // add new artwork to artworks\r\n        artworks[nextCertificateId] = artwork;\r\n\r\n        // store certificate id to certificateIds\r\n        certificateIds.push(nextCertificateId);\r\n\r\n        // add owner to ownedCertificates\r\n        ownedCertificates[proprietaire_contrat()].push(nextCertificateId);\r\n        \r\n        // add 1 to next certificate available id    \r\n        nextCertificateId = nextCertificateId.add(1);\r\n\r\n        return nextCertificateId.sub(1);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Website url setter\r\n    * @dev access restricted to contract owner only\r\n    * @param _url the new url to set as the url of the website\r\n    */\r\n    function setWebsiteUrl(string memory _url) public onlyOwner {\r\n        site_web = _url;\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer a certificate\r\n    * @dev access restricted to certificate or contract owner only\r\n    * @param _id the id of the certificate to transfer ownership of\r\n    * @param _newOwner the ethereum public address of the new certificate owner (will be denied if _newOwner is a contract)\r\n    */\r\n    function transferer_certificat(uint _id, address _newOwner) public onlyCertificateOrContractOwner(_id) {\r\n        require(_newOwner != ZERO_ADDRESS);\r\n        require(!Address.isContract(_newOwner));\r\n\r\n        // retrieve certificate\r\n        Certificate memory certificate = certificates[_id];\r\n        // retrieve old owner\r\n        address oldOwner = certificate.eth_adresse_proprietaire;\r\n        // give Certificate ownership \r\n        certificates[_id].eth_adresse_proprietaire = _newOwner;\r\n        // add to certificate owners (ownedCertificates)\r\n        ownedCertificates[_newOwner].push(_id);\r\n        // take certificate owner off from ownedCertificates\r\n        for (uint i = 0; i < ownedCertificates[oldOwner].length; i++) {\r\n            if (ownedCertificates[oldOwner][i] == _id) {\r\n                delete ownedCertificates[oldOwner][i];\r\n            }\r\n        }\r\n\r\n        emit CertificateTransferred(_id, oldOwner, _newOwner);\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n    /*-------------------------------------------------GETTER FUNCTIONS----------------------------------------------------*/\r\n    \r\n    /**\r\n    * @dev Returns owner's certificates\r\n    * @param _proprietaire ethereum public address of the certificate owner\r\n    * @return certificats_proprietaire : the certificates of `_proprietaire`\r\n    */\r\n    function certificatsProprietaire(address _proprietaire) public view returns(uint[] memory) {\r\n        return ownedCertificates[_proprietaire];\r\n    }\r\n\r\n    /**\r\n    * @dev Returns caller's certificates\r\n    * @return mes_certificats\r\n    */\r\n    function mesCertificats() public view returns(uint[] memory mes_certificats) {\r\n        return certificatsProprietaire(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns certificate's owner by id\r\n    * @param _id the id of the certificate to retrieve owner of\r\n    * @return proprietaire_certificat : the owner of certificate with `_id`\r\n    */\r\n    function proprietaireCertificat(uint _id) public view returns(address proprietaire_certificat) {\r\n        return certificates[_id].eth_adresse_proprietaire;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns an external url leading to certificate's image \r\n    * @param _id the id of the certificate to retrieve image of\r\n    * @return lien_vers_image : url pointing to an image of the certificate with `_id`\r\n    */\r\n    function imageCertificat(uint _id) public view returns(string memory lien_vers_image) {\r\n        return certificates[_id].url_image_externe;\r\n    }\r\n\r\n    function liste_certificats() public view returns(uint[] memory) {\r\n        return certificateIds;\r\n    }\r\n}\r\n/* end */","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"CertificateTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"date_oeuvre\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"deposant\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artiste\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"numero_serie\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"oeuvre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"support\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dimension\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"certificates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date_certificat\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"eth_adresse_proprietaire\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"identifiant_unique_non_consecutif\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url_image_externe\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url_certificat\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proprietaire\",\"type\":\"address\"}],\"name\":\"certificatsProprietaire\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"imageCertificat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"lien_vers_image\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liste_certificats\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mesCertificats\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"mes_certificats\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextCertificateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date_oeuvre\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifiant_unique_non_consecutif\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deposant\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artiste\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"oeuvre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"support\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dimension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"numero_serie\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url_image_externe\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url_certificat\",\"type\":\"string\"}],\"name\":\"print\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"proprietaireCertificat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proprietaire_certificat\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proprietaire_contrat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setWebsiteUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"site_web\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbole\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferer_certificat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ArtCertificate","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0ebbb6637361c666038d7086b5b9056e0047447b65b6753f5ddb6adeb9798471"}]}