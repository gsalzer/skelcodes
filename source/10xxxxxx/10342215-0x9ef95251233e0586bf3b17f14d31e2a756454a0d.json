{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.5.12;\r\n\r\n// https://github.com/dapphub/ds-pause\r\ncontract DSPauseAbstract {\r\n    function setOwner(address) public;\r\n    function setAuthority(address) public;\r\n    function setDelay(uint256) public;\r\n    function plans(bytes32) public view returns (bool);\r\n    function proxy() public view returns (address);\r\n    function delay() public view returns (uint256);\r\n    function plot(address, bytes32, bytes memory, uint256) public;\r\n    function drop(address, bytes32, bytes memory, uint256) public;\r\n    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ncontract VatAbstract {\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) public view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) public view returns (uint256, uint256);\r\n    function gem(bytes32, address) public view returns (uint256);\r\n    function dai(address) public view returns (uint256);\r\n    function sin(address) public view returns (uint256);\r\n    function debt() public view returns (uint256);\r\n    function vice() public view returns (uint256);\r\n    function Line() public view returns (uint256);\r\n    function live() public view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/cat.sol\r\ncontract CatAbstract {\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) public view returns (address, uint256, uint256);\r\n    function live() public view returns (uint256);\r\n    function vat() public view returns (address);\r\n    function vow() public view returns (address);\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function bite(bytes32, address) external returns (uint256);\r\n    function cage() external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ncontract JugAbstract {\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) public view returns (uint256, uint256);\r\n    function vat() public view returns (address);\r\n    function vow() public view returns (address);\r\n    function base() public view returns (address);\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/pot.sol\r\ncontract PotAbstract {\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function pie(address) public view returns (uint256);\r\n    function Pie() public view returns (uint256);\r\n    function dsr() public view returns (uint256);\r\n    function chi() public view returns (uint256);\r\n    function vat() public view returns (address);\r\n    function vow() public view returns (address);\r\n    function rho() public view returns (uint256);\r\n    function live() public view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function cage() external;\r\n    function drip() external returns (uint256);\r\n    function join(uint256) external;\r\n    function exit(uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ncontract GemJoinAbstract {\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() public view returns (address);\r\n    function ilk() public view returns (bytes32);\r\n    function gem() public view returns (address);\r\n    function dec() public view returns (uint256);\r\n    function live() public view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ncontract FlipAbstract {\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function bids(uint256) public view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\r\n    function vat() public view returns (address);\r\n    function ilk() public view returns (bytes32);\r\n    function beg() public view returns (uint256);\r\n    function ttl() public view returns (uint48);\r\n    function tau() public view returns (uint48);\r\n    function kicks() public view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(address, address, uint256, uint256, uint256) public returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function dent(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/spot.sol\r\ncontract SpotAbstract {\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) public view returns (address, uint256);\r\n    function vat() public view returns (address);\r\n    function par() public view returns (uint256);\r\n    function live() public view returns (uint256);\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function poke(bytes32) external;\r\n    function cage() external;\r\n}\r\n\r\n// https://github.com/makerdao/osm\r\ncontract OsmAbstract {\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() public view returns (uint256);\r\n    function src() public view returns (address);\r\n    function hop() public view returns (uint16);\r\n    function zzz() public view returns (uint64);\r\n    function cur() public view returns (uint128, uint128);\r\n    function nxt() public view returns (uint128, uint128);\r\n    function bud(address) public view returns (uint256);\r\n    function stop() external;\r\n    function start() external;\r\n    function change(address) external;\r\n    function step(uint16) external;\r\n    function void() external;\r\n    function pass() public view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\n// https://github.com/makerdao/osm-mom\r\ncontract OsmMomAbstract {\r\n    function owner() public view returns (address);\r\n    function authority() public view returns (address);\r\n    function osms(bytes32) public view returns (address);\r\n    function setOsm(bytes32, address) public;\r\n    function setOwner(address) public;\r\n    function setAuthority(address) public;\r\n    function stop(bytes32) public;\r\n}\r\n\r\ncontract MedianAbstract {\r\n    function kiss(address) public;\r\n}\r\n\r\ncontract SpellAction {\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    string constant public description = \"2020-06-26 MakerDAO Executive Spell\";\r\n\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/1.0.5/contracts.json\r\n    //\r\n    // Contract addresses pertaining to the SCD ecosystem can be found at:\r\n    //     https://github.com/makerdao/sai#dai-v1-current-deployments\r\n    address constant public MCD_VAT        = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant public MCD_CAT        = 0x78F2c2AF65126834c51822F56Be0d7469D7A523E;\r\n    address constant public MCD_JUG        = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant public MCD_SPOT       = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address constant public MCD_POT        = 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\r\n    address constant public MCD_END        = 0xaB14d3CE3F733CACB76eC2AbE7d2fcb00c99F3d5;\r\n    address constant public FLIPPER_MOM    = 0x9BdDB99625A711bf9bda237044924E34E8570f75;\r\n    address constant public OSM_MOM        = 0x76416A4d5190d071bfed309861527431304aA14f;\r\n\r\n    address constant public MCD_JOIN_SAI   = 0xad37fd42185Ba63009177058208dd1be4b136e6b;\r\n    address constant public MCD_FLIP_SAI   = 0x5432b2f3c0DFf95AA191C45E5cbd539E2820aE72;\r\n\r\n    address constant public KNC            = 0xdd974D5C2e2928deA5F71b9825b8b646686BD200;\r\n    address constant public MCD_JOIN_KNC_A = 0x475F1a89C1ED844A08E8f6C50A00228b5E59E4A9;\r\n    address constant public MCD_FLIP_KNC_A = 0xAbBCB9Ae89cDD3C27E02D279480C7fF33083249b;\r\n    address constant public PIP_KNC        = 0xf36B79BD4C0904A5F350F1e4f776B81208c13069;\r\n\r\n    address constant public ZRX            = 0xE41d2489571d322189246DaFA5ebDe1F4699F498;\r\n    address constant public MCD_JOIN_ZRX_A = 0xc7e8Cd72BDEe38865b4F5615956eF47ce1a7e5D0;\r\n    address constant public MCD_FLIP_ZRX_A = 0x08c89251FC058cC97d5bA5F06F95026C0A5CF9B0;\r\n    address constant public PIP_ZRX        = 0x7382c066801E7Acb2299aC8562847B9883f5CD3c;\r\n\r\n    address constant public PIP_WBTC       = 0xf185d0682d50819263941e5f4EacC763CC5C6C42;\r\n\r\n    uint256 constant public THOUSAND = 10**3;\r\n    uint256 constant public MILLION  = 10**6;\r\n    uint256 constant public WAD      = 10**18;\r\n    uint256 constant public RAY      = 10**27;\r\n    uint256 constant public RAD      = 10**45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    uint256 constant public ZERO_TWENTYFIVE_PCT_RATE = 1000000000079175551708715274;\r\n    uint256 constant public ONE_PCT_RATE  = 1000000000315522921573372069;\r\n    uint256 constant public ONE_TWENTYFIVE_PCT_RATE = 1000000000393915525145987602;\r\n    uint256 constant public FIFTY_TWENTYFIVE_PCT_RATE = 1000000012910019978921115695;\r\n    uint256 constant public FOUR_TWENTYFIVE_PCT_RATE =  1000000001319814647332759691;\r\n\r\n    function execute() external {\r\n        // Perform drips\r\n        PotAbstract(MCD_POT).drip();\r\n        JugAbstract(MCD_JUG).drip(\"ETH-A\");\r\n        JugAbstract(MCD_JUG).drip(\"BAT-A\");\r\n        JugAbstract(MCD_JUG).drip(\"USDC-A\");\r\n        JugAbstract(MCD_JUG).drip(\"TUSD-A\");\r\n        JugAbstract(MCD_JUG).drip(\"USDC-B\");\r\n        JugAbstract(MCD_JUG).drip(\"WBTC-A\");\r\n        JugAbstract(MCD_JUG).drip(\"SAI\");\r\n\r\n        // Set base rate +0.25%\r\n        JugAbstract(MCD_JUG).file(\"ETH-A\", \"duty\", ZERO_TWENTYFIVE_PCT_RATE);\r\n        JugAbstract(MCD_JUG).file(\"BAT-A\", \"duty\", ZERO_TWENTYFIVE_PCT_RATE);\r\n        JugAbstract(MCD_JUG).file(\"USDC-A\", \"duty\", ONE_PCT_RATE);\r\n        JugAbstract(MCD_JUG).file(\"USDC-B\", \"duty\", FIFTY_TWENTYFIVE_PCT_RATE);\r\n        JugAbstract(MCD_JUG).file(\"WBTC-A\", \"duty\", ONE_TWENTYFIVE_PCT_RATE);\r\n        JugAbstract(MCD_JUG).file(\"TUSD-A\", \"duty\", ZERO_TWENTYFIVE_PCT_RATE);\r\n\r\n        bytes32 ilk;\r\n\r\n        /* ---- SAIC Collateral Housekeeping ---- */\r\n\r\n        ilk = \"SAI\";\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_SAI).ilk() == ilk, \"join-ilk-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_SAI).ilk() == ilk,    \"flip-ilk-not-match\");\r\n\r\n        // Remove the SAI PIP in the Spotter\r\n        SpotAbstract(MCD_SPOT).file(ilk, \"pip\", address(0));\r\n        // Set SAI mat to 0 in the Spotter\r\n        SpotAbstract(MCD_SPOT).file(ilk, \"mat\", 0);\r\n        // Remove the SAI Flipper in the Cat\r\n        CatAbstract(MCD_CAT).file(ilk, \"flip\", address(0));\r\n        // Set the SAI debt ceiling to 0 (Already Done)\r\n        // VatAbstract(MCD_VAT).file(ilk, \"line\", 0);\r\n        // Set the SAI dust\r\n        VatAbstract(MCD_VAT).file(ilk, \"dust\", 0);\r\n        // Set the SAI spot\r\n        VatAbstract(MCD_VAT).file(ilk, \"spot\", 0);\r\n        // Set the Lot size to 0 SAI\r\n        CatAbstract(MCD_CAT).file(ilk, \"lump\", 0);\r\n        // Set the SAI liquidation penalty to 0%\r\n        CatAbstract(MCD_CAT).file(ilk, \"chop\", 0);\r\n        // Set Jug duty to 0\r\n        JugAbstract(MCD_JUG).file(ilk, \"duty\", 0);\r\n        // Cage the Sai join adapter\r\n        GemJoinAbstract(MCD_JOIN_SAI).cage();\r\n        // Disallow SAI to modify Vat registry\r\n        VatAbstract(MCD_VAT).deny(MCD_JOIN_SAI);\r\n        // Disallow Cat to kick auctions in SAI Flipper\r\n        FlipAbstract(MCD_FLIP_SAI).deny(MCD_CAT);\r\n        // Disallow End to yank auctions in SAI Flipper\r\n        FlipAbstract(MCD_FLIP_SAI).deny(MCD_END);\r\n        // Disallow FlipperMom to access to the SAI Flipper\r\n        FlipAbstract(MCD_FLIP_SAI).deny(FLIPPER_MOM);\r\n\r\n        /* ---- KNC Collateral Onboarding Spell ---- */\r\n        ilk = \"KNC-A\";\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_KNC_A).vat() == MCD_VAT, \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_KNC_A).ilk() == ilk,     \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_KNC_A).gem() == KNC,     \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_KNC_A).dec() == 18,      \"join-dec-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_KNC_A).vat()    == MCD_VAT, \"flip-vat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_KNC_A).ilk()    == ilk,     \"flip-ilk-not-match\");\r\n\r\n        // Set the KNC PIP in the Spotter\r\n        SpotAbstract(MCD_SPOT).file(ilk, \"pip\", PIP_KNC);\r\n\r\n        // Set the KNC-A Flipper in the Cat\r\n        CatAbstract(MCD_CAT).file(ilk, \"flip\", MCD_FLIP_KNC_A);\r\n\r\n        // Init KNC-A ilk in Vat\r\n        VatAbstract(MCD_VAT).init(ilk);\r\n        // Init KNC-A ilk in Jug\r\n        JugAbstract(MCD_JUG).init(ilk);\r\n\r\n        // Allow KNC-A Join to modify Vat registry\r\n        VatAbstract(MCD_VAT).rely(MCD_JOIN_KNC_A);\r\n        // Allow Cat to kick auctions in KNC-A Flipper\r\n        FlipAbstract(MCD_FLIP_KNC_A).rely(MCD_CAT);\r\n        // Allow End to yank auctions in KNC-A Flipper\r\n        FlipAbstract(MCD_FLIP_KNC_A).rely(MCD_END);\r\n        // Allow FlipperMom to access to the KNC-A Flipper\r\n        FlipAbstract(MCD_FLIP_KNC_A).rely(FLIPPER_MOM);\r\n\r\n        // Whitelist the Osm to read the Median data\r\n        MedianAbstract(OsmAbstract(PIP_KNC).src()).kiss(PIP_KNC);\r\n        // Allow OsmMom to access to the KNC Osm\r\n        OsmAbstract(PIP_KNC).rely(OSM_MOM);\r\n        // Whitelist Spotter to read the Osm data\r\n        OsmAbstract(PIP_KNC).kiss(MCD_SPOT);\r\n        // Whitelist End to read the Osm data\r\n        OsmAbstract(PIP_KNC).kiss(MCD_END);\r\n        // Set KNC Osm in the OsmMom for new ilk\r\n        OsmMomAbstract(OSM_MOM).setOsm(ilk, PIP_KNC);\r\n\r\n        // Set the KNC-A debt ceiling to 5 MM\r\n        VatAbstract(MCD_VAT).file(ilk, \"line\", 5 * MILLION * RAD);\r\n        // Set the KNC-A dust\r\n        VatAbstract(MCD_VAT).file(ilk, \"dust\", 20 * RAD);\r\n        // Set the Lot size to 50,000 KNC-A\r\n        CatAbstract(MCD_CAT).file(ilk, \"lump\", 50000 * WAD);\r\n        // Set the KNC-A liquidation penalty to 13%\r\n        CatAbstract(MCD_CAT).file(ilk, \"chop\", 113 * RAY / 100);\r\n        // Set the KNC-A stability fee to 4.25%\r\n        JugAbstract(MCD_JUG).file(ilk, \"duty\", FOUR_TWENTYFIVE_PCT_RATE);\r\n        // Set the KNC-A percentage between bids to 3%\r\n        FlipAbstract(MCD_FLIP_KNC_A).file(\"beg\", 103 * WAD / 100);\r\n        // Set the KNC-A time max time between bids to 6 hours\r\n        FlipAbstract(MCD_FLIP_KNC_A).file(\"ttl\", 6 hours);\r\n        // Set the KNC-A max auction duration to 6 hours\r\n        FlipAbstract(MCD_FLIP_KNC_A).file(\"tau\", 6 hours);\r\n        // Set the KNC-A min collateralization ratio to 175%\r\n        SpotAbstract(MCD_SPOT).file(ilk, \"mat\", 175 * RAY / 100);\r\n        // Update KNC-A spot value in Vat (will be zero as the Osm will not have any value as current yet)\r\n        SpotAbstract(MCD_SPOT).poke(ilk);\r\n        /* ---- End ---- */\r\n\r\n        /* ---- ZRX Collateral Onboarding Spell ---- */\r\n        ilk = \"ZRX-A\";\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(MCD_JOIN_ZRX_A).vat() == MCD_VAT, \"join-vat-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_ZRX_A).ilk() == ilk,     \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_ZRX_A).gem() == ZRX,     \"join-gem-not-match\");\r\n        require(GemJoinAbstract(MCD_JOIN_ZRX_A).dec() == 18,      \"join-dec-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_ZRX_A).vat()    == MCD_VAT, \"flip-vat-not-match\");\r\n        require(FlipAbstract(MCD_FLIP_ZRX_A).ilk()    == ilk,     \"flip-ilk-not-match\");\r\n\r\n        // Set the ZRX PIP in the Spotter\r\n        SpotAbstract(MCD_SPOT).file(ilk, \"pip\", PIP_ZRX);\r\n\r\n        // Set the ZRX-A Flipper in the Cat\r\n        CatAbstract(MCD_CAT).file(ilk, \"flip\", MCD_FLIP_ZRX_A);\r\n\r\n        // Init ZRX-A ilk in Vat\r\n        VatAbstract(MCD_VAT).init(ilk);\r\n        // Init ZRX-A ilk in Jug\r\n        JugAbstract(MCD_JUG).init(ilk);\r\n\r\n        // Allow ZRX-A Join to modify Vat registry\r\n        VatAbstract(MCD_VAT).rely(MCD_JOIN_ZRX_A);\r\n        // Allow Cat to kick auctions in ZRX-A Flipper\r\n        FlipAbstract(MCD_FLIP_ZRX_A).rely(MCD_CAT);\r\n        // Allow End to yank auctions in ZRX-A Flipper\r\n        FlipAbstract(MCD_FLIP_ZRX_A).rely(MCD_END);\r\n        // Allow FlipperMom to access to the ZRX-A Flipper\r\n        FlipAbstract(MCD_FLIP_ZRX_A).rely(FLIPPER_MOM);\r\n\r\n        // Whitelist the Osm to read the Median data\r\n        MedianAbstract(OsmAbstract(PIP_ZRX).src()).kiss(PIP_ZRX);\r\n        // Allow OsmMom to access to the ZRX Osm\r\n        OsmAbstract(PIP_ZRX).rely(OSM_MOM);\r\n        // Whitelist Spotter to read the Osm data\r\n        OsmAbstract(PIP_ZRX).kiss(MCD_SPOT);\r\n        // Whitelist End to read the Osm data\r\n        OsmAbstract(PIP_ZRX).kiss(MCD_END);\r\n        // Set ZRX Osm in the OsmMom for new ilk\r\n        OsmMomAbstract(OSM_MOM).setOsm(ilk, PIP_ZRX);\r\n\r\n        // Set the ZRX-A debt ceiling to 5 MM\r\n        VatAbstract(MCD_VAT).file(ilk, \"line\", 5 * MILLION * RAD);\r\n        // Set the ZRX-A dust\r\n        VatAbstract(MCD_VAT).file(ilk, \"dust\", 20 * RAD);\r\n        // Set the Lot size to 100,000 ZRX-A\r\n        CatAbstract(MCD_CAT).file(ilk, \"lump\", 100000 * WAD);\r\n        // Set the ZRX-A liquidation penalty to 13%\r\n        CatAbstract(MCD_CAT).file(ilk, \"chop\", 113 * RAY / 100);\r\n        // Set the ZRX-A stability fee to 4.25%\r\n        JugAbstract(MCD_JUG).file(ilk, \"duty\", FOUR_TWENTYFIVE_PCT_RATE);\r\n        // Set the ZRX-A percentage between bids to 3%\r\n        FlipAbstract(MCD_FLIP_ZRX_A).file(\"beg\", 103 * WAD / 100);\r\n        // Set the ZRX-A time max time between bids to 6 hours\r\n        FlipAbstract(MCD_FLIP_ZRX_A).file(\"ttl\", 6 hours);\r\n        // Set the ZRX-A max auction duration to 6 hours\r\n        FlipAbstract(MCD_FLIP_ZRX_A).file(\"tau\", 6 hours);\r\n        // Set the ZRX-A min collateralization ratio to 175%\r\n        SpotAbstract(MCD_SPOT).file(ilk, \"mat\", 175 * RAY / 100);\r\n        // Update ZRX-A spot value in Vat (will be zero as the Osm will not have any value as current yet)\r\n        SpotAbstract(MCD_SPOT).poke(ilk);\r\n        /* ---- End ---- */\r\n\r\n        // Set the global debt ceiling to 195 MM\r\n        VatAbstract(MCD_VAT).file(\"Line\", 195 * MILLION * RAD);\r\n\r\n        // WBTC (missing permission): Add whitelist End to read the Osm data\r\n        OsmAbstract(PIP_WBTC).kiss(MCD_END);\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n\r\n    DSPauseAbstract  public pause =\r\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\r\n    address          public action;\r\n    bytes32          public tag;\r\n    uint256          public eta;\r\n    bytes            public sig;\r\n    uint256          public expiration;\r\n    bool             public done;\r\n\r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = now + 30 days;\r\n    }\r\n\r\n    function description() public view returns (string memory) {\r\n        return SpellAction(action).description();\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://916a52794d4d73c1887a8577a6f67f8a4bd3003ae33dd78c93893e532eb7e32d"}]}