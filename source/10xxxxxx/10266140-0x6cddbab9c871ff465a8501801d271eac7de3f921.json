{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.1;\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"overflow error\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"overflow error\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function inc(uint a) internal pure returns(uint) {\r\n        return(add(a, 1));\r\n    }\r\n\r\n    function dec(uint a) internal pure returns(uint) {\r\n        return(sub(a, 1));\r\n    }\r\n\r\n}\r\n\r\ncontract MLM {\r\n    struct Tx {\r\n        address payable fr;\r\n        address payable to;\r\n        uint value;\r\n    }\r\n    struct User {\r\n        address payable parent;\r\n        address payable ldirect;\r\n        address payable rdirect;\r\n        uint id;\r\n        string email;\r\n        string phone;\r\n        uint level;\r\n        mapping(uint => Tx) txs;\r\n        uint txCount;\r\n    }\r\n    address payable[] directUsers;\r\n    uint[] directUsersRegister;  \r\n    mapping(address => User) users;\r\n    address payable[] usersArray;\r\n    uint usersCount;\r\n    uint[] portions;\r\n    uint share;\r\n    uint directShare;\r\n    address owner;\r\n    address payable beneficiary; //wallet owner\r\n    bool maintainance;\r\n    uint maxDirectRegister;\r\n    uint directRegisterCount;\r\n\r\n    modifier isOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    modifier maintainanceOn {\r\n        require(maintainance);\r\n        _;\r\n    }\r\n    \r\n    modifier maintainanceOff {\r\n        require(! maintainance);\r\n        _;\r\n    }\r\n    \r\n    modifier notRegistered {\r\n        require(users[msg.sender].id == 0);\r\n        _;\r\n    }\r\n    \r\n    modifier registered(address payable _member) {\r\n        require(users[_member].id > 0);\r\n        _;\r\n    }\r\n    \r\n    modifier shareSet {\r\n        require(share > 0 && directShare > 0);\r\n        _;\r\n    }\r\n    \r\n    modifier isNode(address node) {\r\n        require(users[node].id > 0); \r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        maintainance = true;\r\n        owner = msg.sender;\r\n        beneficiary = msg.sender;\r\n        portions.push(0);\r\n        usersArray.push(address(0));\r\n        maxDirectRegister = 1;\r\n    }\r\n    \r\n    function getUsersCount() public view returns(uint) {\r\n        return(SafeMath.dec(usersArray.length));    \r\n    }\r\n    \r\n    function changeMaxDirectRegister(uint _maxDirectRegister) public isOwner {\r\n        require(_maxDirectRegister != maxDirectRegister);\r\n        require(_maxDirectRegister >= getDirectRegisterCount());\r\n        maxDirectRegister = _maxDirectRegister;\r\n    }\r\n    \r\n    function getMaxDirectRegister() public view isOwner returns(uint) {\r\n        return(maxDirectRegister);\r\n    }\r\n    \r\n    function getDirectRegisterCount() public view isOwner returns(uint) {\r\n        return(directRegisterCount);\r\n    }\r\n    \r\n    function getRemainedDirectRegister() public view returns(uint) {\r\n        return(SafeMath.sub(maxDirectRegister, directRegisterCount));\r\n    }\r\n    \r\n    function changeOwner(address _owner) public isOwner {\r\n        require(owner != _owner);\r\n        owner = _owner;\r\n    }\r\n    \r\n    function setActive() public isOwner maintainanceOn shareSet {\r\n        uint portionsSum = 0;\r\n        for (uint l = 1; l < portions.length; l = SafeMath.inc(l)) {\r\n            portionsSum = SafeMath.add(portionsSum, portions[l]);\r\n        }\r\n        require(portionsSum < share);\r\n        maintainance = false;\r\n    }\r\n    \r\n    function setInactive() public isOwner maintainanceOff {\r\n        maintainance = true;\r\n    }\r\n    \r\n    function setShare(uint _share) public isOwner maintainanceOn {\r\n        require(_share > 0);\r\n        require(share != _share);\r\n        share = _share;\r\n    }\r\n\r\n    function getShare() public view returns(uint) {\r\n        return(share);\r\n    }\r\n    \r\n    function setDirectShare(uint _share) public isOwner maintainanceOn {\r\n        require(_share > 0);\r\n        require(directShare != _share);\r\n        directShare = _share;\r\n    }\r\n\r\n    function getDirectShare() public view returns(uint) {\r\n        return(directShare);\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) public isOwner {\r\n        require(_beneficiary != beneficiary);\r\n        beneficiary = _beneficiary;\r\n    }\r\n    \r\n    function setPortion(uint level, uint portion) public isOwner maintainanceOn {\r\n        require(level > 0);\r\n        uint currentLevel = SafeMath.dec(portions.length);\r\n        if (level > currentLevel) {\r\n            for (uint l = SafeMath.inc(currentLevel); l < level; l = SafeMath.inc(l)) {\r\n                portions.push(0);\r\n            }\r\n            portions.push(portion);\r\n        }\r\n        else {\r\n            portions[level] = portion;\r\n        }\r\n    }\r\n    \r\n    function getPortion(uint level) public view returns(uint) {\r\n        require(level < portions.length);\r\n        return(portions[level]);\r\n    }\r\n\r\n    function getPortionCount() public view returns(uint) {\r\n        return(portions.length);\r\n    }\r\n\r\n    function getDirectChildsCount(address node) public view isNode(node) returns(uint) {\r\n        uint childs = 0;\r\n        if (users[node].ldirect != address(0))\r\n            childs = SafeMath.inc(childs);\r\n        if (users[node].rdirect != address(0))\r\n            childs = SafeMath.inc(childs);\r\n        return(childs);\r\n    }\r\n    \r\n    function getDirectChilds(address node) public view isNode(node) returns(address, address) {\r\n        return(users[node].ldirect, users[node].rdirect);\r\n    }\r\n    \r\n    function getChildsCount(address node) public view isNode(node) returns(uint) {\r\n        if (node == address(0))\r\n            return(0);\r\n        uint childs = getDirectChildsCount(node);\r\n        if (users[node].ldirect != address(0))\r\n            childs = SafeMath.add(childs, getChildsCount(users[node].ldirect));\r\n        if (users[node].rdirect != address(0))\r\n            childs = SafeMath.add(childs, getChildsCount(users[node].rdirect));\r\n        return(childs);\r\n    }\r\n    \r\n    function withdraw(uint value) public isOwner {\r\n        beneficiary.transfer(value);\r\n    }\r\n    \r\n    function getParent(address node) public view isNode(node) returns(address) {\r\n        return(users[node].parent);\r\n    }\r\n    \r\n    function findParentInLevel(address payable _referral, uint _level) private view returns(address payable) {\r\n        if (_level == 1) {\r\n            if (getDirectChildsCount(_referral) < 2)\r\n                return(_referral);\r\n            else\r\n                return(address(0));\r\n        }\r\n        else {\r\n            address payable ldirect = findParentInLevel(users[_referral].ldirect, SafeMath.dec(_level));\r\n            if (ldirect == address(0)) {\r\n                address payable rdirect = findParentInLevel(users[_referral].rdirect, SafeMath.dec(_level));\r\n                return(rdirect);\r\n            }\r\n            else\r\n                return(ldirect);\r\n        }\r\n    }\r\n    \r\n    function getNearestParent(address payable _referral) private view returns(address payable) {\r\n        if (_referral == address(0))\r\n            return(address(0));\r\n        uint _level = 1;\r\n        bool _found = false;\r\n        address payable _parent;\r\n        while (! _found) {\r\n            _parent = findParentInLevel(_referral, _level);\r\n            if (_parent == address(0))\r\n                _level = SafeMath.inc(_level);\r\n            else\r\n                _found = true;\r\n        }\r\n        return(_parent);\r\n    }\r\n    \r\n    function registerDirect(string memory _email, string memory _phone) public payable maintainanceOff notRegistered {\r\n        address payable _referral = address(0);\r\n        require(maxDirectRegister > directRegisterCount);\r\n        directRegisterCount = SafeMath.inc(directRegisterCount);\r\n        directUsers.push(msg.sender);\r\n        directUsersRegister.push(0);\r\n        doRegister(_referral, _email, _phone, directShare);\r\n    }\r\n    \r\n    function registerNoReferral(string memory _email, string memory _phone) public payable maintainanceOff notRegistered {\r\n        address payable minLevelParent = getNearestParent(directUsers[0]);\r\n        uint minLevel = users[minLevelParent].level;\r\n        for(uint i = 1; i < directUsers.length; i = SafeMath.inc(i)) {\r\n            address payable parent = getNearestParent(directUsers[i]);\r\n            uint level = users[parent].level;\r\n            if (level < minLevel) {\r\n                minLevel = level;\r\n                minLevelParent = parent;\r\n            }\r\n        }\r\n        doRegister(minLevelParent, _email, _phone, share);\r\n    }\r\n    \r\n    function registerReferral(address payable _referral, string memory _email, string memory _phone) public payable maintainanceOff notRegistered {\r\n        if (_referral == address(0)) {\r\n            uint _level = 1;\r\n            bool _found = false;\r\n            while (! _found) {\r\n                for (uint i = 0; i < usersArray.length; i = SafeMath.inc(i)) {\r\n                    address payable _userAddress = usersArray[i];\r\n                    if (users[_userAddress].level == _level && getDirectChildsCount( _userAddress) < 2) {\r\n                        _found = true;\r\n                        _referral = _userAddress;\r\n                        break;\r\n                    }\r\n                }\r\n                _level = SafeMath.inc(_level);\r\n            }\r\n        }\r\n        else {\r\n            _referral = getNearestParent(_referral);\r\n            \r\n        }\r\n        doRegister(_referral, _email, _phone, share);\r\n    }\r\n    \r\n    function doRegister(address payable _referral, string memory _email, string memory _phone, uint _share) private {\r\n        address payable node;\r\n        uint value = msg.value;\r\n        uint _level;\r\n        if (_referral == address(0))\r\n            _level = 1;\r\n        else\r\n            _level = SafeMath.inc(users[_referral].level);\r\n        users[msg.sender] = User({\r\n            phone: _phone,\r\n            email: _email,\r\n            parent: _referral,\r\n            id: usersArray.length,\r\n            level: _level,\r\n            txCount: 1,\r\n            ldirect: address(0),\r\n            rdirect: address(0)\r\n        });\r\n        users[msg.sender].txs[0] = Tx({\r\n            fr: msg.sender,\r\n            to: address(uint160(address(this))),\r\n            value: _share\r\n        });\r\n        usersArray.push(msg.sender);\r\n        if (users[_referral].ldirect == address(0))\r\n            users[_referral].ldirect = msg.sender;\r\n        else if (users[_referral].rdirect == address(0))\r\n            users[_referral].rdirect = msg.sender;\r\n        else\r\n            revert();\r\n        node = msg.sender;\r\n        uint portionsSum = 0;\r\n        for (uint l = 1; l < portions.length; l = SafeMath.inc(l)) {\r\n            node = users[node].parent;\r\n            if (portions[l] > 0) {\r\n                if (node != address(0)) {\r\n                    portionsSum = SafeMath.add(portionsSum, portions[l]);\r\n                    node.transfer(portions[l]);\r\n                    users[node].txs[users[node].txCount] = Tx({\r\n                        fr: msg.sender,\r\n                        to: node,\r\n                        value: portions[l]\r\n                    });\r\n                    users[node].txCount = SafeMath.inc(users[node].txCount);\r\n                }\r\n                else\r\n                    break;\r\n            }\r\n        }\r\n        require(value >= _share);\r\n        uint beneficiaryShare = SafeMath.sub(_share, portionsSum);\r\n        beneficiary.transfer(beneficiaryShare);\r\n        uint remainedValue = SafeMath.sub(value, _share);\r\n        if (remainedValue > 0)\r\n            msg.sender.transfer(remainedValue);\r\n    }\r\n    \r\n    function getOwner() public view returns(address) {\r\n        return(owner);\r\n    }\r\n    \r\n    function getBeneficiary() public view returns(address) {\r\n        return(beneficiary);\r\n    }\r\n    \r\n    function getBalance() public view isOwner returns(uint) {\r\n        return(address(this).balance);\r\n    }\r\n    \r\n    function getMaintainance() public view returns(bool) {\r\n        return(maintainance);\r\n    }\r\n    \r\n    function getAddress(uint _id) public view returns(address payable) {\r\n        require(_id > 0 && _id < usersArray.length);\r\n        return(usersArray[_id]);\r\n    }\r\n    \r\n    function getId(address payable _address) public view returns(uint) {\r\n        require(users[_address].id > 0);\r\n        return(users[_address].id);\r\n    }\r\n    \r\n    function isMember(address payable _address) public view returns(bool) {\r\n        return(users[_address].id > 0);\r\n    }\r\n    \r\n    function isMemberById(uint _id) public view returns(bool) {\r\n        return(_id > 0 && _id < usersArray.length);\r\n    }\r\n    \r\n    function getTxCount(address payable _address) public view registered(_address) returns(uint) {\r\n        return(users[_address].txCount);\r\n    }\r\n    \r\n    function getTx(address payable _address, uint _index) public view registered(_address) returns(uint, uint, address payable, address payable, uint) {\r\n        require(_index < users[_address].txCount);\r\n        uint id = getId(_address);\r\n        return(_index, id, users[_address].txs[_index].fr, users[_address].txs[_index].to, users[_address].txs[_index].value);\r\n    }\r\n    \r\n    function getPaid(address payable _address) public view registered(_address) returns(uint) {\r\n        return(users[_address].txs[0].value);\r\n    }\r\n\r\n    function getEarned(address payable _address) public view registered(_address) returns(uint) {\r\n        uint sum;\r\n        for (uint i = 1; i < users[_address].txCount; i= SafeMath.inc(i))\r\n            sum = SafeMath.add(sum, users[_address].txs[i].value);\r\n        return(sum);\r\n    }\r\n    \r\n    function getLevel(address payable _address) public view registered(_address) returns(uint) {\r\n        return(users[_address].level);\r\n    }\r\n    \r\n    function getInfo(address payable _address) public view isOwner returns(string memory, string memory) {\r\n        return(users[_address].email, users[_address].phone);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDirectRegister\",\"type\":\"uint256\"}],\"name\":\"changeMaxDirectRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"getChildsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"getDirectChilds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"getDirectChildsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDirectRegisterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDirectShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaintainance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDirectRegister\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"getParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getPortion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPortionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainedDirectRegister\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTxCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isMemberById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_phone\",\"type\":\"string\"}],\"name\":\"registerDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_phone\",\"type\":\"string\"}],\"name\":\"registerNoReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_phone\",\"type\":\"string\"}],\"name\":\"registerReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"setDirectShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"portion\",\"type\":\"uint256\"}],\"name\":\"setPortion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"setShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MLM","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://66368fe005068662de553112915c8b0b95ecdd6afc715d999417609f96af49ca"}]}