{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-07-28\r\n*/\r\n\r\n// File: contracts/sol6/IERC20.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function decimals() external view returns (uint8 digits);\r\n\r\n    function totalSupply() external view returns (uint256 supply);\r\n}\r\n\r\n// File: contracts/sol6/wrappers/IKyberRateHelper.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\ninterface IKyberRateHelper {\r\n    function getRatesForToken(\r\n        IERC20 token,\r\n        uint256 optionalBuyAmountWei,\r\n        uint256 optionalSellAmountTwei\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bytes32[] memory buyReserves,\r\n            uint256[] memory buyRates,\r\n            bytes32[] memory sellReserves,\r\n            uint256[] memory sellRates\r\n        );\r\n\r\n    function getPricesForToken(\r\n        IERC20 token,\r\n        uint256 optionalBuyAmountWei,\r\n        uint256 optionalSellAmountTwei\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bytes32[] memory buyReserves,\r\n            uint256[] memory buyRates,\r\n            bytes32[] memory sellReserves,\r\n            uint256[] memory sellRates\r\n        );\r\n\r\n    function getRatesForTokenWithCustomFee(\r\n        IERC20 token,\r\n        uint256 optionalBuyAmountWei,\r\n        uint256 optionalSellAmountTwei,\r\n        uint256 networkFeeBps\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bytes32[] memory buyReserves,\r\n            uint256[] memory buyRates,\r\n            bytes32[] memory sellReserves,\r\n            uint256[] memory sellRates\r\n        );\r\n\r\n    function getReservesRates(IERC20 token, uint256 optionalAmountWei)\r\n        external\r\n        view\r\n        returns (\r\n            bytes32[] memory buyReserves,\r\n            uint256[] memory buyRates,\r\n            bytes32[] memory sellReserves,\r\n            uint256[] memory sellRates\r\n        );\r\n\r\n    function getSpreadInfo(IERC20 token, uint256 optionalAmountWei)\r\n        external\r\n        view\r\n        returns (bytes32[] memory reserves, int256[] memory spreads);\r\n\r\n    function getSlippageRateInfo(\r\n        IERC20 token,\r\n        uint256 optionalAmountWei,\r\n        uint256 optionalSlippageAmountWei\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bytes32[] memory buyReserves,\r\n            int256[] memory buySlippageRateBps,\r\n            bytes32[] memory sellReserves,\r\n            int256[] memory sellSlippageRateBps\r\n        );\r\n}\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract PermissionGroups {\r\n    address public admin;\r\n    address public pendingAdmin;\r\n\r\n    event AdminClaimed(address newAdmin, address previousAdmin);\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"only admin\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _admin) public {\r\n        require(_admin != address(0), \"admin 0\");\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @dev Allows the pendingAdmin address to finalize the change admin process.\r\n    function claimAdmin() external {\r\n        require(pendingAdmin == msg.sender, \"not pending\");\r\n        emit AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    \r\n    /// @dev Allows the current admin to set the pendingAdmin address\r\n    /// @param newAdmin The address to transfer ownership to\r\n    function transferAdmin(address newAdmin) onlyAdmin external {\r\n        require(newAdmin != address(0), \"new admin 0\");\r\n        emit TransferAdminPending(newAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /// @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n    /// @param newAdmin The address to transfer ownership to.\r\n    function transferAdminQuickly(address newAdmin) onlyAdmin external {\r\n        require(newAdmin != address(0), \"admin 0\");\r\n        emit TransferAdminPending(newAdmin);\r\n        emit AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n}\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\ncontract Withdrawable is PermissionGroups {\r\n    constructor(address _admin) public PermissionGroups(_admin) {}\r\n\r\n    event EtherWithdraw(uint256 amount, address sendTo);\r\n    event TokenWithdraw(IERC20 token, uint256 amount, address sendTo);\r\n\r\n    /// @dev Withdraw Ethers\r\n    function withdrawEther(uint256 amount, address payable sendTo) onlyAdmin external {\r\n        (bool success, ) = sendTo.call{value: amount}(\"\");\r\n        require(success);\r\n        emit EtherWithdraw(amount, sendTo);\r\n    }\r\n\r\n    /// @dev Withdraw all IERC20 compatible tokens\r\n    /// @param token IERC20 The address of the token contract\r\n    function withdrawToken(\r\n        IERC20 token,\r\n        uint256 amount,\r\n        address sendTo\r\n    ) onlyAdmin external {\r\n        token.transfer(sendTo, amount);\r\n        emit TokenWithdraw(token, amount, sendTo);\r\n    }\r\n}\r\n\r\n// File: contracts/sol6/IKyberDao.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\ninterface IKyberDao {\r\n\r\n    function getLatestNetworkFeeData()\r\n        external\r\n        view\r\n        returns (uint256 feeInBps, uint256 expiryTimestamp);\r\n\r\n}\r\n\r\n// File: contracts/sol6/wrappers/KyberRateHelper.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract WrapKyberRateHelper is Withdrawable {\r\n\r\n    constructor() public Withdrawable(msg.sender) {}\r\n\r\n    /// @dev function to cover backward compatible with old network interface\r\n    /// @dev get rate from eth to token, use the best token amount to get rate from token to eth\r\n    /// @param tokens Token to get rate\r\n    /// @param optionalAmountWeis Eth amount to get rate (default: 0)\r\n    function getReservesRates(IKyberRateHelper rateHelper, IERC20[] calldata tokens, uint256[] calldata optionalAmountWeis)\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory buyLengths,\r\n            bytes32[] memory buyReserves,\r\n            uint256[] memory buyRates,\r\n            uint256[] memory sellLengths,\r\n            bytes32[] memory sellReserves,\r\n            uint256[] memory sellRates\r\n        )\r\n    {\r\n        buyLengths = new uint256[](tokens.length);\r\n        sellLengths = new uint256[](tokens.length);\r\n\r\n        uint256 buyCounter = 0;\r\n        uint256 sellCounter = 0;\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            (buyReserves, , sellReserves,) = rateHelper.getReservesRates(tokens[i], optionalAmountWeis[i]);\r\n            buyCounter += buyReserves.length;\r\n            sellCounter += sellReserves.length;\r\n            buyLengths[i] = buyReserves.length;\r\n            sellLengths[i] = sellReserves.length;\r\n        }\r\n\r\n        (buyReserves, buyRates, sellReserves, sellRates) = getFinalReservesRates(\r\n            rateHelper,\r\n            tokens,\r\n            optionalAmountWeis,\r\n            buyCounter,\r\n            sellCounter\r\n        );\r\n    }\r\n\r\n    function getFinalReservesRates(\r\n        IKyberRateHelper rateHelper,\r\n        IERC20[] memory tokens,\r\n        uint256[] memory optionalAmountWeis,\r\n        uint256 buyCounter,\r\n        uint256 sellCounter\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            bytes32[] memory buyReserves,\r\n            uint256[] memory buyRates,\r\n            bytes32[] memory sellReserves,\r\n            uint256[] memory sellRates\r\n        )\r\n    {\r\n        buyReserves = new bytes32[](buyCounter);\r\n        buyRates = new uint256[](buyCounter);\r\n        sellReserves = new bytes32[](sellCounter);\r\n        sellRates = new uint256[](sellCounter);\r\n\r\n        bytes32[] memory bReserves;\r\n        uint256[] memory bRates;\r\n        bytes32[] memory sReserves;\r\n        uint256[] memory sRates;\r\n\r\n        buyCounter = 0;\r\n        sellCounter = 0;\r\n\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            (bReserves, bRates, sReserves, sRates) = rateHelper.getReservesRates(tokens[i], optionalAmountWeis[i]);\r\n            for(uint256 j = buyCounter; j < buyCounter + bReserves.length; j++) {\r\n                buyReserves[j] = bReserves[j - buyCounter];\r\n                buyRates[j] = bRates[j - buyCounter];\r\n            }\r\n            for(uint256 j = sellCounter; j < sellCounter + sReserves.length; j++) {\r\n                sellReserves[j] = sReserves[j - sellCounter];\r\n                sellRates[j] = sRates[j - sellCounter];\r\n            }\r\n            buyCounter += bReserves.length;\r\n            sellCounter += sReserves.length;\r\n        }\r\n    }\r\n\r\n    function getRatesForTokens(\r\n        IKyberRateHelper rateHelper,\r\n        IERC20[] calldata tokens,\r\n        uint256[] calldata optionalBuyAmountWeis,\r\n        uint256[] calldata optionalSellAmountTweis\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory buyLengths,\r\n            bytes32[] memory buyReserves,\r\n            uint256[] memory buyRates,\r\n            uint256[] memory sellLengths,\r\n            bytes32[] memory sellReserves,\r\n            uint256[] memory sellRates\r\n        )\r\n    {\r\n        buyLengths = new uint256[](tokens.length);\r\n        sellLengths = new uint256[](tokens.length);\r\n\r\n        uint256 buyCounter;\r\n        uint256 sellCounter;\r\n        (buyLengths, sellLengths, buyCounter, sellCounter) = getRatesForTokensLengths(\r\n            rateHelper,\r\n            tokens,\r\n            optionalBuyAmountWeis,\r\n            optionalSellAmountTweis\r\n        );\r\n\r\n        (buyReserves, buyRates, sellReserves, sellRates) = getRatesForTokensData(\r\n            rateHelper,\r\n            tokens,\r\n            optionalBuyAmountWeis,\r\n            optionalSellAmountTweis,\r\n            buyCounter,\r\n            sellCounter\r\n        );\r\n    }\r\n\r\n    function getRatesForTokensLengths(\r\n        IKyberRateHelper rateHelper,\r\n        IERC20[] memory tokens,\r\n        uint256[] memory optionalBuyAmountWeis,\r\n        uint256[] memory optionalSellAmountTweis\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            uint256[] memory buyLengths,\r\n            uint256[] memory sellLengths,\r\n            uint256 buyCounter,\r\n            uint256 sellCounter\r\n        )\r\n    {\r\n        buyLengths = new uint256[](tokens.length);\r\n        sellLengths = new uint256[](tokens.length);\r\n\r\n        bytes32[] memory buyReserves;\r\n        bytes32[] memory sellReserves;\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            (buyReserves, , sellReserves,) = rateHelper.getRatesForToken(\r\n                tokens[i],\r\n                optionalBuyAmountWeis[i],\r\n                optionalSellAmountTweis[i]\r\n            );\r\n            buyCounter += buyReserves.length;\r\n            sellCounter += sellReserves.length;\r\n            buyLengths[i] = buyReserves.length;\r\n            sellLengths[i] = sellReserves.length;\r\n        }\r\n    }\r\n\r\n    function getRatesForTokensData(\r\n        IKyberRateHelper rateHelper,\r\n        IERC20[] memory tokens,\r\n        uint256[] memory optionalBuyAmountWeis,\r\n        uint256[] memory optionalSellAmountTweis,\r\n        uint256 buyCounter,\r\n        uint256 sellCounter\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            bytes32[] memory buyReserves,\r\n            uint256[] memory buyRates,\r\n            bytes32[] memory sellReserves,\r\n            uint256[] memory sellRates\r\n        )\r\n    {\r\n        buyReserves = new bytes32[](buyCounter);\r\n        buyRates = new uint256[](buyCounter);\r\n        sellReserves = new bytes32[](sellCounter);\r\n        sellRates = new uint256[](sellCounter);\r\n\r\n        bytes32[] memory bReserves;\r\n        uint256[] memory bRates;\r\n        bytes32[] memory sReserves;\r\n        uint256[] memory sRates;\r\n\r\n        buyCounter = 0;\r\n        sellCounter = 0;\r\n\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            (bReserves, bRates, sReserves, sRates) = rateHelper.getRatesForToken(\r\n                tokens[i],\r\n                optionalBuyAmountWeis[i],\r\n                optionalSellAmountTweis[i]\r\n            );\r\n            for(uint256 j = buyCounter; j < buyCounter + bReserves.length; j++) {\r\n                buyReserves[j] = bReserves[j - buyCounter];\r\n                buyRates[j] = bRates[j - buyCounter];\r\n            }\r\n            for(uint256 j = sellCounter; j < sellCounter + sReserves.length; j++) {\r\n                sellReserves[j] = sReserves[j - sellCounter];\r\n                sellRates[j] = sRates[j - sellCounter];\r\n            }\r\n            buyCounter += bReserves.length;\r\n            sellCounter += sReserves.length;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKyberRateHelper\",\"name\":\"rateHelper\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionalBuyAmountWeis\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionalSellAmountTweis\",\"type\":\"uint256[]\"}],\"name\":\"getRatesForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"buyReserves\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sellReserves\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKyberRateHelper\",\"name\":\"rateHelper\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionalAmountWeis\",\"type\":\"uint256[]\"}],\"name\":\"getReservesRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"buyReserves\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sellReserves\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WrapKyberRateHelper","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0cc3181508e7cb72cdf32e70761f6222d490345baf12f27ee8fd8a2e45b07235"}]}