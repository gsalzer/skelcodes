{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.0 <0.5.17;\r\n\r\ncontract ERCInterface {\r\n    function transferFrom(address _from, address _to, uint256 _value) public;\r\n    function balanceOf(address who) view public  returns (uint256);\r\n    function allowance(address owner, address spender) view public returns (uint256);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract CryptochromeFirstPresale {\r\n    \r\n    uint256 public PRESALE_CAP = 30000000000000000000000000;\r\n    uint256 public EXCHANGE_RATE = 57828429100000;\r\n    address public owner;   \r\n    address public etherreceiver;   \r\n    uint256 public totalraised=0;\r\n    uint256 public totalvaluedeposited=0;\r\n\r\n    uint256 public decimalplaces= 1000000000000000000;\r\n    uint256 public lastentryid=0;\r\n    address public tokenaddress;\r\n    uint256 public startTime=1600852344;\r\n    uint256 public endTime=1601114400;\r\n    \r\n\r\n    modifier onlyWhileSale() {\r\n    require(isActive());\r\n     _;\r\n    }\r\n\r\n    modifier onlyOwner () {\r\n    require(msg.sender == owner);\r\n    _;\r\n    }\r\n \r\n    struct Transaction\r\n   {\r\n       address buyer;\r\n       uint256 deposit;\r\n       uint256 tokens;\r\n       uint256 bonus;\r\n       uint256 datetime;\r\n       uint8 status;//status of deposit 0 if value deposited, 1 if token released\r\n       uint256 tokentransferred;          \r\n   }\r\n    event Tokenallocated(address indexed to, uint256 tokens, uint256 bonus, uint256 date,uint256 valuedeposited);\r\n        event Tokentransfered(address indexed to, uint256 tokens, uint256 bonus, uint256 release, uint256 date);\r\n\r\n    \r\n    mapping (uint256 => Transaction) public buyerentries;\r\n    mapping (address => uint256) public depositedvalue;\r\n    mapping (address => uint256) public totaltokens;\r\n    mapping (address => uint256) public totalbonus;\r\n    mapping (address => uint256) public totaltokenstransferred;\r\n    mapping (address => uint256) public totalbonustransferred;\r\n    mapping (uint256 => uint8) public uniswapeventrelease;\r\n    mapping (uint256 => uint8) public secondrelease;\r\n    mapping (uint256 => uint8) public thirdrelease;\r\n    mapping (uint256 => uint8) public forthrelease;\r\n \r\n   constructor(address ownerAddress, address etherreceiveraddr) public {\r\n      owner = ownerAddress;\r\n      lastentryid = 0;\r\n     etherreceiver=etherreceiveraddr;\r\n    \r\n   }\r\n \r\n\r\n   function getBonusValue(uint256 tokens) public view returns (uint256) {\r\n       if (now < (startTime + 24 hours)) {\r\n           return (tokens*10/100);\r\n          \r\n       }\r\n       if (now < (startTime + 2 days)) {\r\n           return (tokens*5/100);\r\n           \r\n       }\r\n       if (now < (startTime + 3 days)) {\r\n           return ((tokens * 250)/10000);\r\n           \r\n       }\r\n   }\r\n   \r\n \r\n    function isActive() public view returns (bool) {\r\n      return now >= startTime && now < endTime;\r\n    }\r\n \r\n  \r\n   function getTokenAllowance(address ercowner, address _addressOfToken) public view returns(uint256) {\r\n       ERCInterface token = ERCInterface(_addressOfToken);\r\n       return token.allowance(ercowner,msg.sender);\r\n    }\r\n \r\n    function allocatetokens() external payable returns(bool,uint256,uint256){\r\n        require(msg.value >= 0.05 ether, \"0.05 ether is  min deposite\");\r\n                require(msg.value <= 50 ether, \"50 ether is  max deposite\");\r\n\r\n                require(PRESALE_CAP > totalraised, \"Presale limit reached\");\r\n\r\n        require(isActive());\r\n        uint256 tokenscheck=((msg.value/EXCHANGE_RATE)*decimalplaces);\r\n        uint256 bonuscheck=(getBonusValue(tokenscheck));\r\n        if((tokenscheck+bonuscheck)<=(PRESALE_CAP-totalraised))\r\n        {\r\n        lastentryid++;\r\n        buyerentries[lastentryid].buyer=msg.sender;\r\n        buyerentries[lastentryid].deposit=msg.value;\r\n        buyerentries[lastentryid].tokens=tokenscheck;\r\n        buyerentries[lastentryid].bonus=bonuscheck;\r\n        buyerentries[lastentryid].datetime=now;\r\n        buyerentries[lastentryid].status=0;\r\n        depositedvalue[msg.sender]=(depositedvalue[msg.sender] + msg.value);\r\n        totaltokens[msg.sender]=(totaltokens[msg.sender]+ tokenscheck); //Need to verify this logic\r\n        totalbonus[msg.sender]=(totalbonus[msg.sender] + bonuscheck); //Need to verify this logic\r\n        totalraised=(totalraised+ bonuscheck + tokenscheck); //Need to verify this logic\r\n        uniswapeventrelease[lastentryid]=0;\r\n   secondrelease[lastentryid]=0;\r\n   thirdrelease[lastentryid]=0;\r\n    forthrelease[lastentryid]=0;\r\n     buyerentries[lastentryid].tokentransferred=0;\r\n     totalvaluedeposited=(totalvaluedeposited+msg.value);\r\n    emit Tokenallocated(msg.sender, tokenscheck, bonuscheck, now,msg.value);\r\n    \r\n     address(uint160(etherreceiver)).transfer(msg.value);\r\n    return(true,tokenscheck,bonuscheck);\r\n        }\r\n        return(false,0,0);\r\n        \r\n    }\r\n \r\n //this transfers 25% tokens and all bonus tokens\r\n    function transfertokensuniswapevent(address ercowner) public onlyOwner{\r\n       ERCInterface token = ERCInterface(tokenaddress);\r\n       for(uint256 i = 1; i <= lastentryid; i++) {\r\n           if(uniswapeventrelease[i]!=1)\r\n           {\r\n           if(buyerentries[i].buyer != address(0) && buyerentries[i].tokens > 0) {\r\n               uint256 uniswapreleasetokens=(buyerentries[i].tokens/4);\r\n               \r\n               uint256 uniswapbonus= buyerentries[i].bonus;\r\n                 if((uniswapreleasetokens+uniswapbonus)<=((buyerentries[i].tokens+buyerentries[i].bonus)-(buyerentries[i].tokentransferred)))\r\n          {\r\n               token.transferFrom(ercowner, buyerentries[i].buyer,(uniswapreleasetokens+uniswapbonus));\r\n                \r\n                              uniswapeventrelease[i]=1;\r\n                           buyerentries[i].status=1;\r\n\r\n               totaltokenstransferred[buyerentries[i].buyer]= (totaltokenstransferred[buyerentries[i].buyer]+uniswapreleasetokens);\r\n               totalbonustransferred[buyerentries[i].buyer]=(totalbonustransferred[buyerentries[i].buyer]+uniswapbonus);\r\n                buyerentries[i].tokentransferred=(buyerentries[i].tokentransferred+uniswapreleasetokens+uniswapbonus);\r\n                emit Tokentransfered(buyerentries[i].buyer, uniswapreleasetokens, uniswapbonus, 1, now);\r\n           }\r\n           }\r\n       }\r\n    }\r\n    }\r\n    \r\n    \r\n     //this transfers next 25% tokens\r\n\r\n    function transfertokenssecondrelease(address ercowner) public onlyOwner{\r\n       ERCInterface token = ERCInterface(tokenaddress);\r\n       \r\n       for(uint256 i = 1; i <= lastentryid; i++) {\r\n            if(secondrelease[i]!=1)\r\n           {\r\n      if(buyerentries[i].buyer != address(0) && buyerentries[i].tokens > 0) {\r\n          uint256 secondreleasetokens=(buyerentries[i].tokens/4);\r\n            if(secondreleasetokens<=((buyerentries[i].tokens+buyerentries[i].bonus)-(buyerentries[i].tokentransferred)))\r\n          {\r\n          token.transferFrom(ercowner, buyerentries[i].buyer,secondreleasetokens);\r\n                         secondrelease[i]=1;\r\n                           buyerentries[i].status=2;\r\n\r\n                         totaltokenstransferred[buyerentries[i].buyer]= (totaltokenstransferred[buyerentries[i].buyer]+secondreleasetokens);\r\n                                   buyerentries[i].tokentransferred=(buyerentries[i].tokentransferred+secondreleasetokens);\r\n\r\n                               emit Tokentransfered(buyerentries[i].buyer, secondreleasetokens, 0, 2, now);\r\n\r\n           }\r\n      }\r\n       }\r\n           }\r\n    }\r\n    \r\n         //this transfers next 25% tokens\r\n\r\n    function transfertokensthirdrelease(address ercowner) public onlyOwner{\r\n       ERCInterface token = ERCInterface(tokenaddress);\r\n       for(uint i = 1; i <= lastentryid; i++) {\r\n            if(thirdrelease[i]!=1)\r\n           {\r\n           \r\n      if(buyerentries[i].buyer != address(0) && buyerentries[i].tokens > 0) {\r\n        uint256 thirdreleasetokens= (buyerentries[i].tokens/4);\r\n         if(thirdreleasetokens<=((buyerentries[i].tokens+buyerentries[i].bonus)-(buyerentries[i].tokentransferred)))\r\n          {\r\n          token.transferFrom(ercowner, buyerentries[i].buyer,thirdreleasetokens);\r\n                      thirdrelease[i]=1;\r\n                           buyerentries[i].status=3;\r\n\r\n       totaltokenstransferred[buyerentries[i].buyer]= (totaltokenstransferred[buyerentries[i].buyer]+thirdreleasetokens);\r\n                                          buyerentries[i].tokentransferred=(buyerentries[i].tokentransferred+thirdreleasetokens);\r\n\r\n                  emit Tokentransfered(buyerentries[i].buyer,thirdreleasetokens , 0, 3, now);\r\n\r\n           }\r\n      }\r\n       }\r\n    }\r\n    }\r\n    \r\n    \r\n    function transfertokensfinalrelease(address ercowner) public onlyOwner{\r\n       ERCInterface token = ERCInterface(tokenaddress);\r\n       for(uint i = 1; i <= lastentryid; i++) {\r\n               if(forthrelease[i]!=1)\r\n           {\r\n           \r\n      if(buyerentries[i].buyer != address(0) && buyerentries[i].tokens > 0) {\r\n          uint256 finaltokens=((buyerentries[i].tokens+buyerentries[i].bonus)-(buyerentries[i].tokentransferred));\r\n          if(finaltokens<=((buyerentries[i].tokens+buyerentries[i].bonus)-(buyerentries[i].tokentransferred)))\r\n          {\r\n          token.transferFrom(ercowner, buyerentries[i].buyer,finaltokens);\r\n               forthrelease[i]=1;\r\n                                          buyerentries[i].status=4;\r\n\r\n               totaltokenstransferred[buyerentries[i].buyer]= (totaltokenstransferred[buyerentries[i].buyer]+finaltokens);\r\n               buyerentries[i].tokentransferred=(buyerentries[i].tokentransferred+finaltokens);\r\n\r\n                           emit Tokentransfered(buyerentries[i].buyer, finaltokens, 0, 4, now);\r\n\r\n           }\r\n      }\r\n           }\r\n       }\r\n    }\r\n    \r\n    \r\nfunction transferbalance(uint256 amount,address to) public onlyOwner {\r\n        address(uint160(to)).transfer(amount);\r\n    }\r\n    function setExchangeRate(uint256 _rate) public onlyOwner {\r\n        EXCHANGE_RATE=_rate;\r\n    \r\n    }\r\n    \r\n    function setTimeSpan(uint256 _sTime,uint256 _eTime) public onlyOwner {\r\n        startTime=_sTime;\r\n        endTime=_eTime;\r\n    \r\n    }\r\n \r\n    function setTokenaddress(address _taddress) public onlyOwner {\r\n        tokenaddress=_taddress;\r\n    \r\n    }\r\n    \r\n    function setEthReceriverAddr(address _taddress) public onlyOwner {\r\n        etherreceiver=_taddress;\r\n    \r\n    }\r\n   \r\n    function setPresaleCap(uint256 cap) public onlyOwner {\r\n        PRESALE_CAP=cap;\r\n    }\r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"etherreceiveraddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valuedeposited\",\"type\":\"uint256\"}],\"name\":\"Tokenallocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"release\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Tokentransfered\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocatetokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyerentries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokentransferred\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalplaces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedvalue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherreceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forthrelease\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getBonusValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ercowner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressOfToken\",\"type\":\"address\"}],\"name\":\"getTokenAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastentryid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"secondrelease\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taddress\",\"type\":\"address\"}],\"name\":\"setEthReceriverAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setPresaleCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eTime\",\"type\":\"uint256\"}],\"name\":\"setTimeSpan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taddress\",\"type\":\"address\"}],\"name\":\"setTokenaddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thirdrelease\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalbonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalbonustransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalraised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totaltokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totaltokenstransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalvaluedeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferbalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ercowner\",\"type\":\"address\"}],\"name\":\"transfertokensfinalrelease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ercowner\",\"type\":\"address\"}],\"name\":\"transfertokenssecondrelease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ercowner\",\"type\":\"address\"}],\"name\":\"transfertokensthirdrelease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ercowner\",\"type\":\"address\"}],\"name\":\"transfertokensuniswapevent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapeventrelease\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CryptochromeFirstPresale","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fdc0733f27c2c2993823a7f03ba802f5e925ef5a00000000000000000000000070c6590b7864a373c81b24cfbfead11b9c94af42","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://90653c5374b16ba9e4d2bee6e949d2c4c883d1c6d196349e30fd84888d024bad"}]}