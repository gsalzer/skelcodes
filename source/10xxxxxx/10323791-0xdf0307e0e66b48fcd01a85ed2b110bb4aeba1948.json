{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n//pragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary BalancerLib {\r\n    uint public constant BONE              = 10**18;\r\n\r\n    uint public constant MIN_BOUND_TOKENS  = 2;\r\n    uint public constant MAX_BOUND_TOKENS  = 8;\r\n\r\n    uint public constant MIN_FEE           = BONE / 10**6;\r\n    uint public constant MAX_FEE           = BONE / 10;\r\n    uint public constant EXIT_FEE          = 0;\r\n\r\n    uint public constant MIN_WEIGHT        = BONE;\r\n    uint public constant MAX_WEIGHT        = BONE * 50;\r\n    uint public constant MAX_TOTAL_WEIGHT  = BONE * 50;\r\n    uint public constant MIN_BALANCE       = BONE / 10**12;\r\n\r\n    uint public constant INIT_POOL_SUPPLY  = BONE * 100;\r\n\r\n    uint public constant MIN_BPOW_BASE     = 1 wei;\r\n    uint public constant MAX_BPOW_BASE     = (2 * BONE) - 1 wei;\r\n    uint public constant BPOW_PRECISION    = BONE / 10**10;\r\n\r\n    uint public constant MAX_IN_RATIO      = BONE / 2;\r\n    uint public constant MAX_OUT_RATIO     = (BONE / 3) + 1 wei;\r\n\r\n    function btoi(uint a)\r\n        internal pure \r\n        returns (uint)\r\n    {\r\n        return a / BONE;\r\n    }\r\n\r\n    function bfloor(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return btoi(a) * BONE;\r\n    }\r\n\r\n    function badd(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsub(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        (uint c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsubSign(uint a, uint b)\r\n        internal pure\r\n        returns (uint, bool)\r\n    {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n\r\n    function bmul(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint c1 = c0 + (BONE / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint c2 = c1 / BONE;\r\n        return c2;\r\n    }\r\n\r\n    function bdiv(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint c0 = a * BONE;\r\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    // DSMath.wpow\r\n    function bpowi(uint a, uint n)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint z = n % 2 != 0 ? a : BONE;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            a = bmul(a, a);\r\n\r\n            if (n % 2 != 0) {\r\n                z = bmul(z, a);\r\n            }\r\n        }\r\n        return z;\r\n    }\r\n\r\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\r\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\r\n    // of approximation of b^0.w\r\n    function bpow(uint base, uint exp)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\r\n        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\r\n\r\n        uint whole  = bfloor(exp);   \r\n        uint remain = bsub(exp, whole);\r\n\r\n        uint wholePow = bpowi(base, btoi(whole));\r\n\r\n        if (remain == 0) {\r\n            return wholePow;\r\n        }\r\n\r\n        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\r\n        return bmul(wholePow, partialResult);\r\n    }\r\n\r\n    function bpowApprox(uint base, uint exp, uint precision)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        // term 0:\r\n        uint a     = exp;\r\n        (uint x, bool xneg)  = bsubSign(base, BONE);\r\n        uint term = BONE;\r\n        uint sum   = term;\r\n        bool negative = false;\r\n\r\n\r\n        // term(k) = numer / denom \r\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\r\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\r\n        // continue until term is less than precision\r\n        for (uint i = 1; term >= precision; i++) {\r\n            uint bigK = i * BONE;\r\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\r\n            term = bmul(term, bmul(c, x));\r\n            term = bdiv(term, bigK);\r\n            if (term == 0) break;\r\n\r\n            if (xneg) negative = !negative;\r\n            if (cneg) negative = !negative;\r\n            if (negative) {\r\n                sum = bsub(sum, term);\r\n            } else {\r\n                sum = badd(sum, term);\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcSpotPrice                                                                             //\r\n    // sP = spotPrice                                                                            //\r\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\r\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\r\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\r\n    // wO = tokenWeightOut                                                                       //\r\n    // sF = swapFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcSpotPrice(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint spotPrice)\r\n    {\r\n        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\r\n        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\r\n        uint ratio = bdiv(numer, denom);\r\n        uint scale = bdiv(BONE, bsub(BONE, swapFee));\r\n        return  (spotPrice = bmul(ratio, scale));\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcOutGivenIn                                                                            //\r\n    // aO = tokenAmountOut                                                                       //\r\n    // bO = tokenBalanceOut                                                                      //\r\n    // bI = tokenBalanceIn              /      /            bI             \\    (wI / wO) \\      //\r\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\r\n    // wI = tokenWeightIn               \\      \\ ( bI + ( aI * ( 1 - sF )) /              /      //\r\n    // wO = tokenWeightOut                                                                       //\r\n    // sF = swapFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\r\n        uint adjustedIn = bsub(BONE, swapFee);\r\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\r\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\r\n        uint foo = bpow(y, weightRatio);\r\n        uint bar = bsub(BONE, foo);\r\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\r\n        return tokenAmountOut;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcInGivenOut                                                                            //\r\n    // aI = tokenAmountIn                                                                        //\r\n    // bO = tokenBalanceOut               /  /     bO      \\    (wO / wI)      \\                 //\r\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\r\n    // aO = tokenAmountOut    aI =        \\  \\ ( bO - aO ) /                   /                 //\r\n    // wI = tokenWeightIn           --------------------------------------------                 //\r\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\r\n    // sF = swapFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcInGivenOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountIn)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\r\n        uint diff = bsub(tokenBalanceOut, tokenAmountOut);\r\n        uint y = bdiv(tokenBalanceOut, diff);\r\n        uint foo = bpow(y, weightRatio);\r\n        foo = bsub(foo, BONE);\r\n        tokenAmountIn = bsub(BONE, swapFee);\r\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\r\n        return tokenAmountIn;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcPoolOutGivenSingleIn                                                                  //\r\n    // pAo = poolAmountOut         /                                              \\              //\r\n    // tAi = tokenAmountIn        ///      /     //    wI \\      \\\\       \\     wI \\             //\r\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\    --  \\            //\r\n    // tW = totalWeight     pAo=||  \\      \\     \\\\    tW /      //         | ^ tW   | * pS - pS //\r\n    // tBi = tokenBalanceIn      \\\\  ------------------------------------- /        /            //\r\n    // pS = poolSupply            \\\\                    tBi               /        /             //\r\n    // sF = swapFee                \\                                              /              //\r\n    **********************************************************************************************/\r\n    function calcPoolOutGivenSingleIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint poolAmountOut)\r\n    {\r\n        // Charge the trading fee for the proportion of tokenAi\r\n        ///  which is implicitly traded to the other pool tokens.\r\n        // That proportion is (1- weightTokenIn)\r\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\r\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\r\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee); \r\n        uint tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\r\n\r\n        uint newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\r\n        uint tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\r\n\r\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\r\n        uint poolRatio = bpow(tokenInRatio, normalizedWeight);\r\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\r\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\r\n        return poolAmountOut;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcSingleInGivenPoolOut                                                                  //\r\n    // tAi = tokenAmountIn              //(pS + pAo)\\     /    1    \\\\                           //\r\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\r\n    // pAo = poolAmountOut              \\\\    pS    /     \\(wI / tW)//                           //\r\n    // bI = balanceIn          tAi =  --------------------------------------------               //\r\n    // wI = weightIn                              /      wI  \\                                   //\r\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\r\n    // sF = swapFee                               \\      tW  /                                   //\r\n    **********************************************************************************************/\r\n    function calcSingleInGivenPoolOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountOut,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountIn)\r\n    {\r\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\r\n        uint newPoolSupply = badd(poolSupply, poolAmountOut);\r\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\r\n      \r\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\r\n        uint boo = bdiv(BONE, normalizedWeight); \r\n        uint tokenInRatio = bpow(poolRatio, boo);\r\n        uint newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\r\n        uint tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\r\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way \r\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\r\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\r\n        uint zar = bmul(bsub(BONE, normalizedWeight), swapFee);\r\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\r\n        return tokenAmountIn;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcSingleOutGivenPoolIn                                                                  //\r\n    // tAo = tokenAmountOut            /      /                                             \\\\   //\r\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\     /    1    \\      \\\\  //\r\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\r\n    // ps = poolSupply                \\      \\\\          pS           /     \\(wO / tW)/      //  //\r\n    // wI = tokenWeightIn      tAo =   \\      \\                                             //   //\r\n    // tW = totalWeight                    /     /      wO \\       \\                             //\r\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\r\n    // eF = exitFee                        \\     \\      tW /       /                             //\r\n    **********************************************************************************************/\r\n    function calcSingleOutGivenPoolIn(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountIn,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\r\n        // charge exit fee on the pool token side\r\n        // pAiAfterExitFee = pAi*(1-exitFee)\r\n        uint poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\r\n        uint newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\r\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\r\n     \r\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\r\n        uint tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\r\n        uint newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\r\n\r\n        uint tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\r\n\r\n        // charge swap fee on the output token side \r\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\r\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee); \r\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\r\n        return tokenAmountOut;\r\n    }\r\n\r\n    /**********************************************************************************************\r\n    // calcPoolInGivenSingleOut                                                                  //\r\n    // pAi = poolAmountIn               // /               tAo             \\\\     / wO \\     \\   //\r\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\   | ---- |     \\  //\r\n    // tAo = tokenAmountOut      pS - ||   \\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\ tW /  * pS | //\r\n    // ps = poolSupply                 \\\\ -----------------------------------/                /  //\r\n    // wO = tokenWeightOut  pAi =       \\\\               bO                 /                /   //\r\n    // tW = totalWeight           -------------------------------------------------------------  //\r\n    // sF = swapFee                                        ( 1 - eF )                            //\r\n    // eF = exitFee                                                                              //\r\n    **********************************************************************************************/\r\n    function calcPoolInGivenSingleOut(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    )\r\n        internal pure\r\n        returns (uint poolAmountIn)\r\n    {\r\n\r\n        // charge swap fee on the output token side \r\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\r\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\r\n        uint zoo = bsub(BONE, normalizedWeight);\r\n        uint zar = bmul(zoo, swapFee); \r\n        uint tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\r\n\r\n        uint newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\r\n        uint tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\r\n\r\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\r\n        uint poolRatio = bpow(tokenOutRatio, normalizedWeight);\r\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\r\n        uint poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\r\n\r\n        // charge exit fee on the pool token side\r\n        // pAi = pAiAfterExitFee/(1-exitFee)\r\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\r\n        return poolAmountIn;\r\n    }\r\n}\r\n\r\n\r\n//\r\n\r\n\r\nlibrary AddressSet {\r\n    struct Data {\r\n        address[] items;\r\n        mapping(address => uint) lookup;\r\n    }\r\n\r\n    function length(Data storage s) internal view returns(uint) {\r\n        return s.items.length;\r\n    }\r\n\r\n    function at(Data storage s, uint index) internal view returns(address) {\r\n        return s.items[index];\r\n    }\r\n\r\n    function contains(Data storage s, address item) internal view returns(bool) {\r\n        return s.lookup[item] != 0;\r\n    }\r\n\r\n    function add(Data storage s, address item) internal returns(bool) {\r\n        if (s.lookup[item] > 0) {\r\n            return false;\r\n        }\r\n        s.lookup[item] = s.items.push(item);\r\n        return true;\r\n    }\r\n\r\n    function remove(Data storage s, address item) internal returns(bool) {\r\n        uint index = s.lookup[item];\r\n        if (index == 0) {\r\n            return false;\r\n        }\r\n        if (index < s.items.length) {\r\n            address lastItem = s.items[s.items.length - 1];\r\n            s.items[index - 1] = lastItem;\r\n            s.lookup[lastItem] = index;\r\n        }\r\n        s.items.length -= 1;\r\n        delete s.lookup[item];\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ninterface BalancerPool {\r\n    function getFinalTokens() external view returns(address[] memory tokens);\r\n    function getDenormalizedWeight(address token) external view returns(uint256);\r\n    function getTotalDenormalizedWeight() external view returns(uint256);\r\n    function getBalance(address token) external view returns(uint256);\r\n    function getSwapFee() external view returns(uint256);\r\n}\r\n\r\n\r\ncontract BalancerRegistry {\r\n    using SafeMath for uint256;\r\n    using AddressSet for AddressSet.Data;\r\n\r\n    struct PairInfo {\r\n        uint80 weight1;\r\n        uint80 weight2;\r\n        uint80 swapFee;\r\n    }\r\n    \r\n    mapping(bytes32 => AddressSet.Data) private _pools;\r\n    mapping(address => mapping(bytes32 => PairInfo)) public pairs;\r\n\r\n    function pools(bytes32 key) public view returns(address[] memory) {\r\n        return _pools[key].items;\r\n    }\r\n    \r\n    function poolsLimited(bytes32 key, uint256 limit) public view returns(address[] memory result) {\r\n        result = new address[](Math.min(limit, _pools[key].items.length));\r\n        for (uint i = 0; i < result.length; i++) {\r\n            result[i] = _pools[key].items[i];\r\n        }\r\n    }\r\n    \r\n    function getPoolReturn(BalancerPool pool, address fromToken, address destToken, uint256 amount) public view returns(uint256) {\r\n        uint256[] memory amounts = new uint256[](1);\r\n        amounts[0] = amount;\r\n        return getPoolReturns(pool, fromToken, destToken, amounts)[0];\r\n    }\r\n    \r\n    function getPoolReturns(BalancerPool pool, address fromToken, address destToken, uint256[] memory amounts) public view returns(uint256[] memory returnAmounts) {\r\n        PairInfo memory pairInfo = pairs[address(pool)][_createKey(fromToken, destToken)];\r\n        returnAmounts = new uint256[](amounts.length);\r\n        for (uint i = 0; i < amounts.length; i++) {\r\n            returnAmounts[i] = BalancerLib.calcOutGivenIn(\r\n                pool.getBalance(fromToken),\r\n                uint256(fromToken < destToken ? pairInfo.weight1 : pairInfo.weight2),\r\n                pool.getBalance(destToken),\r\n                uint256(fromToken < destToken ? pairInfo.weight2 : pairInfo.weight1),\r\n                amounts[i],\r\n                pairInfo.swapFee\r\n            );\r\n        }\r\n    }\r\n\r\n    function addPool(BalancerPool pool) public {\r\n        address[] memory tokens = pool.getFinalTokens();\r\n        require(tokens.length <= 4, \"BalancerRegistry: supporting pools with up to 4 tokens\");\r\n        \r\n        uint256[] memory weights = new uint256[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            weights[i] = pool.getDenormalizedWeight(tokens[i]);\r\n        }\r\n        \r\n        uint256 swapFee = pool.getSwapFee();\r\n        uint256 listed = 0;\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            for (uint j = i + 1; j < tokens.length; j++) {\r\n                bytes32 key = _createKey(tokens[i], tokens[j]);\r\n                if (_pools[key].add(address(pool))) {\r\n                    pairs[address(pool)][key] = PairInfo({\r\n                        weight1: uint80(weights[tokens[i] < tokens[j] ? i : j]),\r\n                        weight2: uint80(weights[tokens[i] < tokens[j] ? j : i]),\r\n                        swapFee: uint80(swapFee)\r\n                    });\r\n                    listed++;\r\n                }\r\n            }\r\n        }\r\n        require(listed > 0, \"All the assets were already listed\");\r\n    }\r\n\r\n    function addPools(BalancerPool[] memory items) public {\r\n        for (uint i = 0; i < items.length; i++) {\r\n            addPool(items[i]);\r\n        }\r\n    }\r\n\r\n    function _createKey(address token1, address token2) internal pure returns(bytes32) {\r\n        return bytes32(\r\n            (uint256(uint128((token1 < token2) ? token1 : token2)) << 128) |\r\n            (uint256(uint128((token1 < token2) ? token2 : token1)))\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BalancerPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BalancerPool[]\",\"name\":\"items\",\"type\":\"address[]\"}],\"name\":\"addPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract BalancerPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPoolReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract BalancerPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"getPoolReturns\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"returnAmounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"weight1\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"weight2\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"swapFee\",\"type\":\"uint80\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"poolsLimited\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"result\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BalancerRegistry","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f92897b2d09aa292176d9e9e753e9a99e2b04db91326d29db4b840cd7b827385"}]}