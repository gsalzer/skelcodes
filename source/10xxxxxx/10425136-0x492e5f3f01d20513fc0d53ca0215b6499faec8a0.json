{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev get Ethereum address\r\n     */\r\n    function getEthAddr() public pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\ncontract UniswapHelpers is Helpers {\r\n    /**\r\n     * @dev Return WETH address\r\n     */\r\n    function getAddressWETH() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n\r\n    /**\r\n     * @dev Return uniswap v2 router02 Address\r\n     */\r\n    function getUniswapAddr() internal pure returns (address) {\r\n        return 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\r\n        _buy = buy == getEthAddr() ? TokenInterface(getAddressWETH()) : TokenInterface(buy);\r\n        _sell = sell == getEthAddr() ? TokenInterface(getAddressWETH()) : TokenInterface(sell);\r\n    }\r\n\r\n    function getExpectedBuyAmt(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt\r\n    ) internal view returns(uint buyAmt) {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        address[] memory paths = new address[](2);\r\n        paths[0] = address(sellAddr);\r\n        paths[1] = address(buyAddr);\r\n        uint[] memory amts = router.getAmountsOut(\r\n            sellAmt,\r\n            paths\r\n        );\r\n        buyAmt = amts[1];\r\n    }\r\n\r\n    function getExpectedSellAmt(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint buyAmt\r\n    ) internal view returns(uint sellAmt) {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        address[] memory paths = new address[](2);\r\n        paths[0] = address(sellAddr);\r\n        paths[1] = address(buyAddr);\r\n        uint[] memory amts = router.getAmountsIn(\r\n            buyAmt,\r\n            paths\r\n        );\r\n        sellAmt = amts[0];\r\n    }\r\n\r\n    function getBuyUnitAmt(\r\n        TokenInterface buyAddr,\r\n        uint expectedAmt,\r\n        TokenInterface sellAddr,\r\n        uint sellAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _sellAmt = convertTo18((sellAddr).decimals(), sellAmt);\r\n        uint _buyAmt = convertTo18(buyAddr.decimals(), expectedAmt);\r\n        unitAmt = wdiv(_buyAmt, _sellAmt);\r\n        unitAmt = wmul(unitAmt, sub(WAD, slippage));\r\n    }\r\n\r\n    function getSellUnitAmt(\r\n        TokenInterface sellAddr,\r\n        uint expectedAmt,\r\n        TokenInterface buyAddr,\r\n        uint buyAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt) {\r\n        uint _buyAmt = convertTo18(buyAddr.decimals(), buyAmt);\r\n        uint _sellAmt = convertTo18(sellAddr.decimals(), expectedAmt);\r\n        unitAmt = wdiv(_sellAmt, _buyAmt);\r\n        unitAmt = wmul(unitAmt, add(WAD, slippage));\r\n    }\r\n\r\n    function _getWithdrawUnitAmts(\r\n        TokenInterface tokenA,\r\n        TokenInterface tokenB,\r\n        uint amtA,\r\n        uint amtB,\r\n        uint uniAmt,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmtA, uint unitAmtB) {\r\n        uint _amtA = convertTo18(tokenA.decimals(), amtA);\r\n        uint _amtB = convertTo18(tokenB.decimals(), amtB);\r\n        unitAmtA = wdiv(_amtA, uniAmt);\r\n        unitAmtA = wmul(unitAmtA, sub(WAD, slippage));\r\n        unitAmtB = wdiv(_amtB, uniAmt);\r\n        unitAmtB = wmul(unitAmtB, sub(WAD, slippage));\r\n    }\r\n\r\n    function _getWithdrawAmts(\r\n        TokenInterface _tokenA,\r\n        TokenInterface _tokenB,\r\n        uint uniAmt\r\n    ) internal view returns (uint amtA, uint amtB)\r\n    {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(address(_tokenA), address(_tokenB));\r\n        require(exchangeAddr != address(0), \"pair-not-found.\");\r\n        TokenInterface uniToken = TokenInterface(exchangeAddr);\r\n        uint share = wdiv(uniAmt, uniToken.totalSupply());\r\n        amtA = wmul(_tokenA.balanceOf(exchangeAddr), share);\r\n        amtB = wmul(_tokenB.balanceOf(exchangeAddr), share);\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is UniswapHelpers {\r\n\r\n    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage)\r\n    public view returns (uint buyAmt, uint unitAmt)\r\n    {\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\r\n        buyAmt = getExpectedBuyAmt(address(_buyAddr), address(_sellAddr), sellAmt);\r\n        unitAmt = getBuyUnitAmt(_buyAddr, buyAmt, _sellAddr, sellAmt, slippage);\r\n    }\r\n\r\n    function getSellAmount(address buyAddr, address sellAddr, uint buyAmt, uint slippage)\r\n    public view returns (uint sellAmt, uint unitAmt)\r\n    {\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\r\n        sellAmt = getExpectedSellAmt(address(_buyAddr), address(_sellAddr), buyAmt);\r\n        unitAmt = getSellUnitAmt(_sellAddr, sellAmt, _buyAddr, buyAmt, slippage);\r\n    }\r\n\r\n    function getDepositAmount(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amtA\r\n    ) public view returns (uint amtB, uint unitAmt)\r\n    {\r\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(address(_tokenA), address(_tokenB));\r\n        require(exchangeAddr != address(0), \"pair-not-found.\");\r\n        uint _amtA18 = convertTo18(_tokenA.decimals(), _tokenA.balanceOf(exchangeAddr));\r\n        uint _amtB18 = convertTo18(_tokenB.decimals(), _tokenB.balanceOf(exchangeAddr));\r\n        unitAmt = wdiv(_amtB18, _amtA18);\r\n        amtB = wmul(unitAmt, convertTo18(_tokenA.decimals(), amtA));\r\n        amtB = convert18ToDec(_tokenB.decimals(), amtB);\r\n    }\r\n\r\n    function getDepositAmountNewPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amtA,\r\n        uint amtB\r\n    ) public view returns (uint unitAmt)\r\n    {\r\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(address(_tokenA), address(_tokenB));\r\n        require(exchangeAddr == address(0), \"pair-found.\");\r\n        uint _amtA18 = convertTo18(_tokenA.decimals(), amtA);\r\n        uint _amtB18 = convertTo18(_tokenB.decimals(), amtB);\r\n        unitAmt = wdiv(_amtB18, _amtA18);\r\n    }\r\n\r\n    function getWithdrawAmounts(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint uniAmt,\r\n        uint slippage\r\n    ) public view returns (uint amtA, uint amtB, uint unitAmtA, uint unitAmtB)\r\n    {\r\n        (TokenInterface _tokenA, TokenInterface _tokenB) = changeEthAddress(tokenA, tokenB);\r\n        (amtA, amtB) = _getWithdrawAmts(\r\n            _tokenA,\r\n            _tokenB,\r\n            uniAmt\r\n        );\r\n        (unitAmtA, unitAmtB) = _getWithdrawUnitAmts(\r\n            _tokenA,\r\n            _tokenB,\r\n            amtA,\r\n            amtB,\r\n            uniAmt,\r\n            slippage\r\n        );\r\n    }\r\n\r\n    struct TokenPair {\r\n        address tokenA;\r\n        address tokenB;\r\n    }\r\n\r\n    struct PoolData {\r\n        uint tokenAShareAmt;\r\n        uint tokenBShareAmt;\r\n        uint uniAmt;\r\n        uint totalSupply;\r\n    }\r\n\r\n    function getPosition(\r\n        address owner,\r\n        TokenPair[] memory tokenPairs\r\n    ) public view returns (PoolData[] memory)\r\n    {\r\n        IUniswapV2Router02 router = IUniswapV2Router02(getUniswapAddr());\r\n        uint _len = tokenPairs.length;\r\n        PoolData[] memory poolData = new PoolData[](_len);\r\n        for (uint i = 0; i < _len; i++) {\r\n            (TokenInterface tokenA, TokenInterface tokenB) = changeEthAddress(tokenPairs[i].tokenA, tokenPairs[i].tokenB);\r\n            address exchangeAddr = IUniswapV2Factory(router.factory()).getPair(\r\n                address(tokenA),\r\n                address(tokenB)\r\n            );\r\n            if (exchangeAddr != address(0)) {\r\n                TokenInterface uniToken = TokenInterface(exchangeAddr);\r\n                uint uniAmt = uniToken.balanceOf(owner);\r\n                uint totalSupply = uniToken.totalSupply();\r\n                uint share = wdiv(uniAmt, totalSupply);\r\n                uint amtA = wmul(tokenA.balanceOf(exchangeAddr), share);\r\n                uint amtB = wmul(tokenB.balanceOf(exchangeAddr), share);\r\n                poolData[i] = PoolData(\r\n                    amtA,\r\n                    amtB,\r\n                    uniAmt,\r\n                    totalSupply\r\n                );\r\n            }\r\n        }\r\n        return poolData;\r\n    }\r\n}\r\n\r\ncontract InstaUniswapV2Resolver is Resolver {\r\n    string public constant name = \"UniswapV2-Resolver-v1\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amtA\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amtB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtB\",\"type\":\"uint256\"}],\"name\":\"getDepositAmountNewPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"internalType\":\"struct Resolver.TokenPair[]\",\"name\":\"tokenPairs\",\"type\":\"tuple[]\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAShareAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBShareAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Resolver.PoolData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getWithdrawAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmtA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmtB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaUniswapV2Resolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a59485f76b44541dfaf029d867d508e25b3fdf56498832156cf2b9136644bb4b"}]}