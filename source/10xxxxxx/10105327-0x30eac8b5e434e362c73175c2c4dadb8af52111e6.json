{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.8;\r\npragma experimental ABIEncoderV2;\r\n\r\n//SPDX-License-Identifier: BSD-3-Clause\r\n//Copyright (c) 2020 Joshua Herron. All rights reserved.\r\n\r\nstruct Post {\r\n    address author;\r\n    string title;\r\n    string content;\r\n}\r\n\r\nstruct Comment {\r\n    address author;\r\n    string content;\r\n}\r\n\r\ncontract API {\r\n    Post[] public posts;\r\n    mapping (address => uint256[]) public userposts;\r\n    mapping (uint256 => Comment[]) public postcomments;\r\n    \r\n    function newPost(string memory title, string memory content) public returns (uint256 postid) {\r\n        posts.push(Post (msg.sender, title, content));\r\n        userposts[msg.sender].push(posts.length-1);\r\n        return (posts.length-1);\r\n    }\r\n    \r\n    function getPost(uint256 postid) public view returns (address author, string memory title, string memory content, address[] memory, string[] memory) {\r\n        author = posts[postid].author;\r\n        title = posts[postid].title;\r\n        content = posts[postid].content;\r\n        Comment[] memory comments = postcomments[postid];\r\n        uint256 commlength = comments.length;\r\n        address[] memory commentauthors = new address[](commlength);\r\n        string[] memory commentcontents = new string[](commlength);\r\n        for (uint256 i = 0; i < comments.length; i++) {\r\n            commentauthors[i] = comments[i].author;\r\n            commentcontents[i] = comments[i].content;\r\n        }\r\n        return (author, title, content, commentauthors, commentcontents);\r\n    }\r\n    \r\n    function newComment(uint256 postid, string memory content) public returns (bool done) {\r\n        postcomments[postid].push(Comment (msg.sender, content));\r\n        return (true);\r\n    }\r\n    \r\n    function getPosts(uint256 offset) public view returns (uint256[] memory, address[] memory, string[] memory, string[] memory) {\r\n        if (posts.length > 0) {\r\n            uint256 arrlength;\r\n            if (posts.length >= 20) {\r\n                arrlength = 20;\r\n            } else {\r\n                arrlength = posts.length;\r\n            }\r\n            uint256[] memory postids = new uint256[](arrlength);\r\n            address[] memory authors = new address[](arrlength);\r\n            string[] memory titles = new string[](arrlength);\r\n            string[] memory contents = new string[](arrlength);\r\n            uint256 length = posts.length-offset-1;\r\n            uint256 min;\r\n            if (length >= 19) {\r\n                min = length-19;\r\n            } else {\r\n                min = 0;\r\n            }\r\n            for (uint256 i = min; i <= length; i++) {\r\n                postids[length-i] = i;\r\n                authors[length-i] = posts[i].author;\r\n                titles[length-i] = posts[i].title;\r\n                contents[length-i] = posts[i].content;\r\n            }\r\n            return (postids, authors, titles, contents);\r\n        } else {\r\n            uint256[] memory postids = new uint256[](0);\r\n            address[] memory authors = new address[](0);\r\n            string[] memory titles = new string[](0);\r\n            string[] memory contents = new string[](0);\r\n            return (postids, authors, titles, contents);\r\n        }\r\n    }\r\n    \r\n    function getUserPosts(address user) public view returns (uint256[] memory, string[] memory, string[] memory) {\r\n        uint256 userpostcount = userposts[user].length;\r\n        uint256[] memory postids = new uint256[](userpostcount);\r\n        string[] memory titles = new string[](userpostcount);\r\n        string[] memory contents = new string[](userpostcount);\r\n        postids = userposts[user];\r\n        for (uint256 i = 0; i < postids.length; i++) {\r\n            titles[i] = posts[postids[i]].title;\r\n            contents[i] = posts[postids[i]].content;\r\n        }\r\n        return (postids, titles, contents);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postid\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPosts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPosts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"newComment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"newPost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"postid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postcomments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userposts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"API","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7f03566d9dd7337c2635a75b46d582ff789212e4e40c2d91b32c40bf44df840d"}]}