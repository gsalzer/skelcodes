{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: openzeppelin-eth/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-eth/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-eth/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n// File: zos-lib/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.6.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: openzeppelin-eth/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable is Initializable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function initialize(address sender) public initializer {\n        _owner = sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/interface/ICash.sol\n\npragma solidity >=0.5.15;\n\n\ninterface ICash {\n    function claimDividends(address account) external returns (uint256);\n\n    function transfer(address to, uint256 value) external returns(bool);\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\n    function balanceOf(address who) external view returns(uint256);\n    function allowance(address owner_, address spender) external view returns(uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function rebase(uint256 epoch, int256 supplyDelta) external returns (uint256);\n\n    function mintCash(address account, uint256 amount) external returns (bool);\n    function syncUniswapV2() external;\n}\n\n// File: contracts/interface/IRebaser.sol\n\npragma solidity >=0.5.15;\n\n\ninterface IRebaser {\n    function public_goods_perc() external view returns (uint256);\n    function WETH_ADDRESS() external view returns (address);\n    function getCpi() external view returns (uint256);\n    function public_goods() external view returns (address);\n    function deviationThreshold() external view returns (uint256);\n    function ethPerUsdcOracle() external view returns (address);\n    function ethPerUsdOracle() external view returns (address);\n    function maxSlippageFactor() external view returns (uint256);\n    function uniswapV2Pool() external view returns (address);\n}\n\n// File: contracts/interface/IUniswapV2Pair.sol\n\npragma solidity >=0.5.15;\n\ninterface UniswapPair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n// File: contracts/lib/UInt256Lib.sol\n\npragma solidity >=0.5.15;\n\n\n/**\n * @title Various utilities useful for uint256.\n */\nlibrary UInt256Lib {\n\n    uint256 private constant MAX_INT256 = ~(uint256(1) << 255);\n\n    /**\n     * @dev Safely converts a uint256 to an int256.\n     */\n    function toInt256Safe(uint256 a)\n        internal\n        pure\n        returns (int256)\n    {\n        require(a <= MAX_INT256);\n        return int256(a);\n    }\n}\n\n// File: contracts/lib/SafeMathInt.sol\n\n/*\nMIT License\n\nCopyright (c) 2018 requestnetwork\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\npragma solidity >=0.5.15;\n\n\n/**\n * @title SafeMathInt\n * @dev Math operations for int256 with overflow safety checks.\n */\nlibrary SafeMathInt {\n    int256 private constant MIN_INT256 = int256(1) << 255;\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\n\n    /**\n     * @dev Multiplies two int256 variables and fails on overflow.\n     */\n    function mul(int256 a, int256 b)\n        internal\n        pure\n        returns (int256)\n    {\n        int256 c = a * b;\n\n        // Detect overflow when multiplying MIN_INT256 with -1\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    /**\n     * @dev Division of two int256 variables and fails on overflow.\n     */\n    function div(int256 a, int256 b)\n        internal\n        pure\n        returns (int256)\n    {\n        // Prevent overflow when dividing MIN_INT256 by -1\n        require(b != -1 || a != MIN_INT256);\n\n        // Solidity already throws when dividing by 0.\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two int256 variables and fails on overflow.\n     */\n    function sub(int256 a, int256 b)\n        internal\n        pure\n        returns (int256)\n    {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n        return c;\n    }\n\n    /**\n     * @dev Adds two int256 variables and fails on overflow.\n     */\n    function add(int256 a, int256 b)\n        internal\n        pure\n        returns (int256)\n    {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n\n    /**\n     * @dev Converts to absolute value, and fails on overflow.\n     */\n    function abs(int256 a)\n        internal\n        pure\n        returns (int256)\n    {\n        require(a != MIN_INT256);\n        return a < 0 ? -a : a;\n    }\n}\n\n// File: contracts/euroReserve.sol\n\npragma solidity >=0.5.15;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n\n\ninterface IDecentralizedOracle {\n    function update() external;\n    function consult(address token, uint amountIn) external view returns (uint amountOut);\n}\n\ncontract EuroReserve is Ownable {\n    address public reserveToken;\n    using SafeMath for uint256;\n\n    address public gov;\n\n    address public pendingGov;\n\n    address public rebaser;\n\n    uint256 private constant DECIMALS = 18;\n\n    address public euroAddress;\n    address public uniswap_reserve_pair;\n\n    bool public isToken0;\n\n    struct UniVars {\n      uint256 eurosToUni;\n      uint256 amountFromReserves;\n      uint256 mintToReserves;\n    }\n\n    event NewPendingGov(address oldPendingGov, address newPendingGov);\n    event NewGov(address oldGov, address newGov);\n    event NewRebaser(address oldRebaser, address newRebaser);\n    event NewReserveContract(address oldReserveContract, address newReserveContract);\n    event TreasuryIncreased(uint256 reservesAdded, uint256 cashSold, uint256 cashFromReserves, uint256 cashToReserves);\n\n    modifier onlyGov() {\n        require(msg.sender == gov);\n        _;\n    }\n\n    modifier onlyRebaser() {\n        require(msg.sender == rebaser);\n        _;\n    }\n\n    event BuyAmount(uint256 amount, uint256 amountIn, uint256 reserve0, uint256 reserve1);\n    event LogReserves(uint256 r1, uint256 r2);\n    event LogAmount(uint256 r3);\n\n    function initialize(\n        address owner_,\n        address reserveToken_,\n        address euroAddress_,\n        address rebaser_,\n        address uniswap_factory_\n    )\n        public\n        initializer\n    {\n        Ownable.initialize(owner_);\n        reserveToken = reserveToken_;\n        euroAddress = euroAddress_;\n\n        (address token0, address token1) = sortTokens(euroAddress_, reserveToken_);\n        if (token0 == euroAddress_) {\n            isToken0 = true;\n        } else {\n            isToken0 = false;\n        }\n\n        uniswap_reserve_pair = pairFor(uniswap_factory_, token0, token1);\n\n        rebaser = rebaser_;\n        ICash(euroAddress).approve(rebaser_, uint256(-1));\n\n        gov = msg.sender;\n    }\n\n    function _setReserveToken(address reserveToken_, address uniswap_factory_, address euroAddress_)\n        external\n        onlyGov\n    {\n        reserveToken = reserveToken_;\n        euroAddress = euroAddress_;\n\n        (address token0, address token1) = sortTokens(euroAddress, reserveToken_);\n        if (token0 == euroAddress) {\n            isToken0 = true;\n        } else {\n            isToken0 = false;\n        }\n\n        uniswap_reserve_pair = pairFor(uniswap_factory_, token0, token1);\n    }\n\n    function _setRebaser(address rebaser_)\n        external\n        onlyGov\n    {\n        address oldRebaser = rebaser;\n        ICash(euroAddress).decreaseAllowance(oldRebaser, uint256(-1));\n        rebaser = rebaser_;\n        ICash(euroAddress).approve(rebaser_, uint256(-1));\n        emit NewRebaser(oldRebaser, rebaser_);\n    }\n\n    /** @notice sets the pendingGov\n     * @param pendingGov_ The address of the gov contract to use for authentication.\n     */\n    function _setPendingGov(address pendingGov_)\n        external\n        onlyGov\n    {\n        address oldPendingGov = pendingGov;\n        pendingGov = pendingGov_;\n        emit NewPendingGov(oldPendingGov, pendingGov_);\n    }\n\n    function uniswapMaxSlippage(\n        uint256 token0,\n        uint256 token1,\n        uint256 offPegPerc,\n        uint256 maxSlippageFactor\n    )\n      internal\n      view\n      returns (uint256)\n    {\n        if (isToken0) {\n            if (offPegPerc >= 10 ** 8) {\n                return token0.mul(maxSlippageFactor).div(10 ** 9);\n            } else {\n                return token0.mul(offPegPerc).div(3 * 10 ** 9);\n            }\n        } else {\n            if (offPegPerc >= 10 ** 8) {\n                return token1.mul(maxSlippageFactor).div(10 ** 9);\n            } else {\n                return token1.mul(offPegPerc).div(3 * 10 ** 9);\n            }   \n        }\n    }\n\n    function uniswapV2Call(\n        address sender,\n        uint256 amount0,\n        uint256 amount1,\n        bytes memory data\n    )\n        public\n    {\n        // enforce that it is coming from uniswap\n        require(msg.sender == uniswap_reserve_pair, \"bad msg.sender\");\n        // enforce that this contract called uniswap\n        require(sender == address(this), \"bad origin\");\n        (UniVars memory uniVars) = abi.decode(data, (UniVars));\n\n        if (uniVars.amountFromReserves > 0) {\n            // transfer from reserves and mint to uniswap\n            ICash(euroAddress).transfer(uniswap_reserve_pair, uniVars.amountFromReserves);\n            if (uniVars.amountFromReserves < uniVars.eurosToUni) {\n                // if the amount from reserves > eurosToUni, we have fully paid for the yCRV tokens\n                // thus this number would be 0 so no need to mint\n                ICash(euroAddress).mintCash(address(this), uniVars.eurosToUni.sub(uniVars.amountFromReserves));\n                ICash(euroAddress).transfer(uniswap_reserve_pair, uniVars.eurosToUni.sub(uniVars.amountFromReserves));\n            }\n        } else {\n            // transfer to uniswap\n            ICash(euroAddress).mintCash(address(this), uniVars.eurosToUni);\n            ICash(euroAddress).transfer(uniswap_reserve_pair, uniVars.eurosToUni);\n        }\n\n        // mint unsold to mintAmount\n        if (uniVars.mintToReserves > 0) {\n            ICash(euroAddress).mintCash(uniswap_reserve_pair, uniVars.mintToReserves);\n        }\n\n        uint256 public_goods_perc = IRebaser(rebaser).public_goods_perc();\n        address public_goods = IRebaser(rebaser).public_goods();\n\n        // transfer reserve token to reserves\n        if (isToken0) {\n            if (public_goods != address(0) && public_goods_perc > 0) {\n              uint256 amount_to_public_goods = amount1.mul(public_goods_perc).div(10 ** 9);\n            //   SafeERC20.safeTransfer(IERC20(reserveToken), address(this), amount1.sub(amount_to_public_goods));\n              SafeERC20.safeTransfer(IERC20(reserveToken), public_goods, amount_to_public_goods);\n              emit TreasuryIncreased(amount1.sub(amount_to_public_goods), uniVars.eurosToUni, uniVars.amountFromReserves, uniVars.mintToReserves);\n            } else {\n            //   SafeERC20.safeTransfer(IERC20(reserveToken), address(this), amount1);\n              emit TreasuryIncreased(amount1, uniVars.eurosToUni, uniVars.amountFromReserves, uniVars.mintToReserves);\n            }\n        } else {\n          if (public_goods != address(0) && public_goods_perc > 0) {\n            uint256 amount_to_public_goods = amount0.mul(public_goods_perc).div(10 ** 9);\n            // SafeERC20.safeTransfer(IERC20(reserveToken), address(this), amount0.sub(amount_to_public_goods));\n            SafeERC20.safeTransfer(IERC20(reserveToken), public_goods, amount_to_public_goods);\n            emit TreasuryIncreased(amount0.sub(amount_to_public_goods), uniVars.eurosToUni, uniVars.amountFromReserves, uniVars.mintToReserves);\n          } else {\n            // SafeERC20.safeTransfer(IERC20(reserveToken), address(this), amount0);\n            emit TreasuryIncreased(amount0, uniVars.eurosToUni, uniVars.amountFromReserves, uniVars.mintToReserves);\n          }\n        }\n    }\n\n    function computeOffPegPerc(uint256 rate, uint256 targetRate)\n        private\n        view\n        returns (uint256)\n    {\n        if (withinDeviationThreshold(rate, targetRate)) {\n            return 0;\n        }\n\n        if (rate > targetRate) {\n            return rate.sub(targetRate).mul(10 ** 9).div(targetRate);\n        } else {\n            return targetRate.sub(rate).mul(10 ** 9).div(targetRate);\n        }\n    }\n\n    function withinDeviationThreshold(uint256 rate, uint256 targetRate)\n        private\n        view\n        returns (bool)\n    {\n        uint256 deviationThreshold = IRebaser(rebaser).deviationThreshold();\n        uint256 absoluteDeviationThreshold = targetRate.mul(deviationThreshold)\n            .div(10 ** DECIMALS);\n\n        return (rate >= targetRate && rate.sub(targetRate) < absoluteDeviationThreshold)\n            || (rate < targetRate && targetRate.sub(rate) < absoluteDeviationThreshold);\n    }\n\n    // add functions to convert assets to stable coins\n    // add functions to convert to ETH\n\n    function getEuroCoinExchangeRate()\n        public\n        returns (uint256)\n    {\n        address WETH_ADDRESS = IRebaser(rebaser).WETH_ADDRESS();\n        address ethPerUsdcOracle = IRebaser(rebaser).ethPerUsdcOracle();\n        address ethPerUsdOracle = IRebaser(rebaser).ethPerUsdOracle();\n\n        uint256 ethUsdcPrice = IDecentralizedOracle(ethPerUsdcOracle).consult(WETH_ADDRESS, 1 * 10 ** 18);        // 10^18 decimals ropsten, 10^6 mainnet\n        uint256 ethUsdPrice = IDecentralizedOracle(ethPerUsdOracle).consult(WETH_ADDRESS, 1 * 10 ** 18);          // 10^9 decimals\n        uint256 euroCoinExchangeRate = ethUsdcPrice.mul(10 ** 9)                         // 10^18 decimals, 10**9 ropsten, 10**21 on mainnet\n            .div(ethUsdPrice);\n        \n        return euroCoinExchangeRate;\n    }\n\n    function getTargetRate()\n        public\n        returns (uint256)\n    {\n        uint256 targetRate = IRebaser(rebaser).getCpi();\n        return targetRate;\n    }\n\n    // convert USD into reserve asset\n    function buyReserveAndTransfer(uint256 mintAmount)\n        external\n        onlyRebaser\n    {\n        uint256 euroCoinExchangeRate = getEuroCoinExchangeRate();\n        uint256 targetRate = getTargetRate();\n\n        uint256 offPegPerc = computeOffPegPerc(euroCoinExchangeRate, targetRate);\n        UniswapPair pair = UniswapPair(uniswap_reserve_pair);\n        pair.sync();\n\n        // get reserves\n        (uint256 token0Reserves, uint256 token1Reserves, ) = pair.getReserves();\n\n        // check if protocol has excess euros in the reserve\n        uint256 currentBalance = ICash(euroAddress).balanceOf(address(this));\n\n        uint256 excess = currentBalance.sub(mintAmount);\n\n        uint256 maxSlippageFactor = IRebaser(rebaser).maxSlippageFactor();\n        uint256 tokens_to_max_slippage = uniswapMaxSlippage(token0Reserves, token1Reserves, offPegPerc, maxSlippageFactor);\n\n        UniVars memory uniVars = UniVars({\n          eurosToUni: tokens_to_max_slippage, // how many euros uniswap needs\n          amountFromReserves: excess, // how much of eurosToUni comes from reserves\n          mintToReserves: 0 // how much euros protocol mints to reserves\n        });\n\n        // tries to sell all mint + excess\n        // falls back to selling some of mint and all of excess\n        // if all else fails, sells portion of excess\n        // upon pair.swap, `uniswapV2Call` is called by the uniswap pair contract\n        uint256 buyTokens;\n\n        if (isToken0) {\n            if (tokens_to_max_slippage > currentBalance) {\n                // we already have performed a safemath check on mintAmount+excess\n                // so we dont need to continue using it in this code path\n\n                // can handle selling all of reserves and mint\n                buyTokens = getAmountOut(currentBalance, token0Reserves, token1Reserves);\n                uniVars.eurosToUni = currentBalance;\n                uniVars.amountFromReserves = excess;\n                // call swap using entire mint amount and excess; mint 0 to reserves\n                pair.swap(0, buyTokens, address(this), abi.encode(uniVars));\n            } else {\n                if (tokens_to_max_slippage > excess) {\n                    // uniswap can handle entire reserves\n                    buyTokens = getAmountOut(tokens_to_max_slippage, token0Reserves, token1Reserves);\n\n                    // swap up to slippage limit, taking entire yam reserves, and minting part of total\n                    uniVars.mintToReserves = mintAmount.sub((tokens_to_max_slippage.sub(excess)));\n                    pair.swap(0, buyTokens, address(this), abi.encode(uniVars));\n                } else {\n                    // uniswap cant handle all of excess\n                    buyTokens = getAmountOut(tokens_to_max_slippage, token0Reserves, token1Reserves);\n                    uniVars.amountFromReserves = tokens_to_max_slippage;\n                    uniVars.mintToReserves = mintAmount;\n                    // swap up to slippage limit, taking excess - remainingExcess from reserves, and minting full amount\n                    // to reserves\n                    pair.swap(0, buyTokens, address(this), abi.encode(uniVars));\n                }\n            }\n        } else {\n            if (tokens_to_max_slippage > currentBalance) {\n                // can handle all of reserves and mint\n                buyTokens = getAmountOut(currentBalance, token1Reserves, token0Reserves);\n                uniVars.eurosToUni = currentBalance;\n                uniVars.amountFromReserves = excess;\n                // call swap using entire mint amount and excess; mint 0 to reserves\n\n                emit BuyAmount(buyTokens, tokens_to_max_slippage, token0Reserves, token1Reserves);\n\n                pair.swap(buyTokens, 0, address(this), abi.encode(uniVars));\n            } else {\n                if (tokens_to_max_slippage > excess) {\n                    // uniswap can handle entire reserves\n                    buyTokens = getAmountOut(tokens_to_max_slippage, token1Reserves, token0Reserves);\n\n                    // swap up to slippage limit, taking entire yam reserves, and minting part of total\n                    uniVars.mintToReserves = mintAmount.sub( (tokens_to_max_slippage.sub(excess)));\n                    // swap up to slippage limit, taking entire yam reserves, and minting part of total\n\n                    emit BuyAmount(buyTokens, tokens_to_max_slippage, token0Reserves, token1Reserves);\n\n                    pair.swap(buyTokens, 0, address(this), abi.encode(uniVars));\n                } else {\n                    // uniswap cant handle all of excess\n                    buyTokens = getAmountOut(tokens_to_max_slippage, token1Reserves, token0Reserves);\n                    uniVars.amountFromReserves = tokens_to_max_slippage;\n                    uniVars.mintToReserves = mintAmount;\n                    // swap up to slippage limit, taking excess - remainingExcess from reserves, and minting full amount\n                    // to reserves\n\n                    emit BuyAmount(buyTokens, tokens_to_max_slippage, token0Reserves, token1Reserves);\n\n                    pair.swap(buyTokens, 0, address(this), abi.encode(uniVars));\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice lets msg.sender accept governance\n     */\n    function _acceptGov()\n        external\n    {\n        require(msg.sender == pendingGov, \"!pending\");\n        address oldGov = gov;\n        gov = pendingGov;\n        pendingGov = address(0);\n        emit NewGov(oldGov, gov);\n    }\n\n    /// @notice Moves all tokens to a new reserve contract\n    function migrateReserves(\n        address newReserve,\n        address[] memory tokens\n    )\n        public\n        onlyGov\n    {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            IERC20 token = IERC20(tokens[i]);\n            uint256 bal = token.balanceOf(address(this));\n            SafeERC20.safeTransfer(token, newReserve, bal);\n        }\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    )\n        internal\n        pure\n        returns (uint256 amountOut)\n    {\n       require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n       require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n       uint256 amountInWithFee = amountIn.mul(997);\n       uint256 numerator = amountInWithFee.mul(reserveOut);\n       uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n       amountOut = numerator / denominator;\n   }\n\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    )\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    function pairFor(\n        address factory,\n        address token0,\n        address token1\n    )\n        internal\n        pure\n        returns (address pair)\n    {\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n            ))));\n    }\n\n    /// @notice Gets the current amount of reserves token held by this contract\n    function reserves()\n        public\n        view\n        returns (uint256)\n    {\n        return IERC20(reserveToken).balanceOf(address(this));\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"}],\"name\":\"BuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"r3\",\"type\":\"uint256\"}],\"name\":\"LogAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"r2\",\"type\":\"uint256\"}],\"name\":\"LogReserves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"NewGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingGov\",\"type\":\"address\"}],\"name\":\"NewPendingGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRebaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRebaser\",\"type\":\"address\"}],\"name\":\"NewRebaser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReserveContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReserveContract\",\"type\":\"address\"}],\"name\":\"NewReserveContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservesAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashFromReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashToReserves\",\"type\":\"uint256\"}],\"name\":\"TreasuryIncreased\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptGov\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingGov_\",\"type\":\"address\"}],\"name\":\"_setPendingGov\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rebaser_\",\"type\":\"address\"}],\"name\":\"_setRebaser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserveToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswap_factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"euroAddress_\",\"type\":\"address\"}],\"name\":\"_setReserveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"buyReserveAndTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"euroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getEuroCoinExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTargetRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserveToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"euroAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rebaser_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswap_factory_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isToken0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReserve\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"migrateReserves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingGov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswap_reserve_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EuroReserve","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}