{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\upgrades\\contracts\\Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\modules\\staking\\IERC900.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n/**\r\n * @title ERC900 Simple Staking Interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ninterface IERC900 {\r\n  event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n  event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n\r\n  function stake(uint256 amount, bytes calldata data) external;\r\n\r\n  function stakeFor(address user, uint256 amount, bytes calldata data) external;\r\n  function unstake(uint256 amount, bytes calldata data) external;\r\n  function totalStakedFor(address addr) external  view returns (uint256);\r\n  function totalStaked() external  view returns (uint256);\r\n  function token() external  view returns (address);\r\n  function supportsHistory() external  pure returns (bool);\r\n\r\n  // NOTE: Not implementing the optional functions\r\n  // function lastStakedFor(address addr) external  view returns (uint256);\r\n  // function totalStakedForAt(address addr, uint256 blockNumber) external  view returns (uint256);\r\n  // function totalStakedAt(uint256 blockNumber) external  view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\common\\Base.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Base is Initializable, Context, Ownable {\r\n    address constant  ZERO_ADDRESS = address(0);\r\n\r\n    function initialize() public initializer {\r\n        Ownable.initialize(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\core\\ModuleNames.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev List of module names\r\n */\r\ncontract ModuleNames {\r\n    // Pool Modules\r\n    string internal constant MODULE_ACCESS            = \"access\";\r\n    string internal constant MODULE_SAVINGS           = \"savings\";\r\n    string internal constant MODULE_INVESTING         = \"investing\";\r\n    string internal constant MODULE_STAKING           = \"staking\";\r\n    string internal constant MODULE_DCA               = \"dca\";\r\n\r\n    // External Modules (used to store addresses of external contracts)\r\n    string internal constant CONTRACT_RAY             = \"ray\";\r\n}\r\n\r\n// File: contracts\\common\\Module.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n/**\r\n * Base contract for all modules\r\n */\r\ncontract Module is Base, ModuleNames {\r\n    event PoolAddressChanged(address newPool);\r\n    address public pool;\r\n\r\n    function initialize(address _pool) public initializer {\r\n        Base.initialize();\r\n        setPool(_pool);\r\n    }\r\n\r\n    function setPool(address _pool) public onlyOwner {\r\n        require(_pool != ZERO_ADDRESS, \"Module: pool address can't be zero\");\r\n        pool = _pool;\r\n        emit PoolAddressChanged(_pool);        \r\n    }\r\n\r\n    function getModuleAddress(string memory module) public view returns(address){\r\n        require(pool != ZERO_ADDRESS, \"Module: no pool\");\r\n        (bool success, bytes memory result) = pool.staticcall(abi.encodeWithSignature(\"get(string)\", module));\r\n        \r\n        //Forward error from Pool contract\r\n        if (!success) assembly {\r\n            revert(add(result, 32), result)\r\n        }\r\n\r\n        address moduleAddress = abi.decode(result, (address));\r\n        // string memory error = string(abi.encodePacked(\"Module: requested module not found - \", module));\r\n        // require(moduleAddress != ZERO_ADDRESS, error);\r\n        require(moduleAddress != ZERO_ADDRESS, \"Module: requested module not found\");\r\n        return moduleAddress;\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\roles\\CapperRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract CapperRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event CapperAdded(address indexed account);\r\n    event CapperRemoved(address indexed account);\r\n\r\n    Roles.Role private _cappers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isCapper(sender)) {\r\n            _addCapper(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyCapper() {\r\n        require(isCapper(_msgSender()), \"CapperRole: caller does not have the Capper role\");\r\n        _;\r\n    }\r\n\r\n    function isCapper(address account) public view returns (bool) {\r\n        return _cappers.has(account);\r\n    }\r\n\r\n    function addCapper(address account) public onlyCapper {\r\n        _addCapper(account);\r\n    }\r\n\r\n    function renounceCapper() public {\r\n        _removeCapper(_msgSender());\r\n    }\r\n\r\n    function _addCapper(address account) internal {\r\n        _cappers.add(account);\r\n        emit CapperAdded(account);\r\n    }\r\n\r\n    function _removeCapper(address account) internal {\r\n        _cappers.remove(account);\r\n        emit CapperRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\modules\\staking\\StakingPool.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC900 Simple Staking Interface basic implementation\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ncontract StakingPool is Module, IERC900, CapperRole  {\r\n  // @TODO: deploy this separately so we don't have to deploy it multiple times for each contract\r\n  using SafeMath for uint256;\r\n\r\n  // Token used for staking\r\n  ERC20 stakingToken;\r\n\r\n  // The default duration of stake lock-in (in seconds)\r\n  uint256 public defaultLockInDuration;\r\n\r\n  // To save on gas, rather than create a separate mapping for totalStakedFor & personalStakes,\r\n  //  both data structures are stored in a single mapping for a given addresses.\r\n  //\r\n  // It's possible to have a non-existing personalStakes, but have tokens in totalStakedFor\r\n  //  if other users are staking on behalf of a given address.\r\n  mapping (address => StakeContract) public stakeHolders;\r\n\r\n  // Struct for personal stakes (i.e., stakes made by this address)\r\n  // unlockedTimestamp - when the stake unlocks (in seconds since Unix epoch)\r\n  // actualAmount - the amount of tokens in the stake\r\n  // stakedFor - the address the stake was staked for\r\n  struct Stake {\r\n    uint256 unlockedTimestamp;\r\n    uint256 actualAmount;\r\n    address stakedFor;\r\n  }\r\n\r\n  // Struct for all stake metadata at a particular address\r\n  // totalStakedFor - the number of tokens staked for this address\r\n  // personalStakeIndex - the index in the personalStakes array.\r\n  // personalStakes - append only array of stakes made by this address\r\n  // exists - whether or not there are stakes that involve this address\r\n  struct StakeContract {\r\n    uint256 totalStakedFor;\r\n\r\n    uint256 personalStakeIndex;\r\n\r\n    Stake[] personalStakes;\r\n\r\n    bool exists;\r\n  }\r\n\r\n  bool public userCapEnabled;\r\n\r\n  mapping(address => uint256) public userCap; //Limit of pool tokens which can be minted for a user during deposit\r\n\r\n  \r\n  uint256 public defaultUserCap;\r\n  bool public stakingCapEnabled;\r\n  uint256 public stakingCap;\r\n\r\n\r\n  bool public vipUserEnabled;\r\n  mapping(address => bool) public isVipUser;\r\n  \r\n\r\n\r\n  event VipUserEnabledChange(bool enabled);\r\n  event VipUserChanged(address indexed user, bool isVip);\r\n\r\n  event StakingCapChanged(uint256 newCap);\r\n  event StakingCapEnabledChange(bool enabled);\r\n\r\n  //global cap\r\n  event DefaultUserCapChanged(uint256 newCap);\r\n\r\n  event UserCapEnabledChange(bool enabled);\r\n\r\n  event UserCapChanged(address indexed user, uint256 newCap);\r\n  event Staked(address indexed user, uint256 amount, uint256 totalStacked, bytes data);\r\n  event Unstaked(address indexed user, uint256 amount, uint256 totalStacked, bytes data);\r\n  event setLockInDuration(uint256 defaultLockInDuration);\r\n\r\n  /**\r\n   * @dev Modifier that checks that this contract can transfer tokens from the\r\n   *  balance in the stakingToken contract for the given address.\r\n   * @dev This modifier also transfers the tokens.\r\n   * @param _address address to transfer tokens from\r\n   * @param _amount uint256 the number of tokens\r\n   */\r\n  modifier canStake(address _address, uint256 _amount) {\r\n    require(\r\n      stakingToken.transferFrom(_address, address(this), _amount),\r\n      \"Stake required\");\r\n\r\n    _;\r\n  }\r\n\r\n\r\n  modifier isUserCapEnabledForStakeFor(uint256 stake) {\r\n\r\n    if (stakingCapEnabled && !(vipUserEnabled && isVipUser[_msgSender()])) {\r\n        require((stakingCap > totalStaked() && (stakingCap-totalStaked() >= stake)), \"StakingModule: stake exeeds staking cap\");\r\n    }\r\n\r\n    if(userCapEnabled) {\r\n          uint256 cap = userCap[_msgSender()];\r\n          //check default user cap settings\r\n          if (defaultUserCap > 0) {\r\n              uint256 totalStaked = totalStakedFor(_msgSender());\r\n              //get new cap\r\n              if (defaultUserCap >= totalStaked) {\r\n                cap = defaultUserCap.sub(totalStaked);\r\n              } else {\r\n                 cap = 0;\r\n              }\r\n          }\r\n          \r\n          require(cap >= stake, \"StakingModule: stake exeeds cap\");\r\n          cap = cap.sub(stake);\r\n          userCap[_msgSender()] = cap;\r\n          emit UserCapChanged(_msgSender(), cap);  \r\n    }\r\n      \r\n    _;\r\n  }\r\n\r\n\r\n  modifier isUserCapEnabledForUnStakeFor(uint256 unStake) {\r\n     _;\r\n\r\n     if(userCapEnabled){\r\n        uint256 cap = userCap[_msgSender()];\r\n        cap = cap.add(unStake);\r\n\r\n        if (cap > defaultUserCap) {\r\n            cap = defaultUserCap;\r\n        }\r\n\r\n        userCap[_msgSender()] = cap;\r\n        emit UserCapChanged(_msgSender(), cap);\r\n     }\r\n  }\r\n\r\n  modifier checkUserCapDisabled() {\r\n    require(isUserCapEnabled() == false, \"UserCapEnabled\");\r\n    _;\r\n  }\r\n\r\n  modifier checkUserCapEnabled() {\r\n    require(isUserCapEnabled(), \"UserCapDisabled\");\r\n    _;\r\n  }\r\n\r\n  function initialize(address _pool, ERC20 _stakingToken, uint256 _defaultLockInDuration) public initializer {\r\n        stakingToken = _stakingToken;\r\n        defaultLockInDuration = _defaultLockInDuration;\r\n        Module.initialize(_pool);\r\n\r\n        CapperRole.initialize(_msgSender());\r\n  }\r\n\r\n  function setDefaultLockInDuration(uint256 _defaultLockInDuration) public onlyOwner {\r\n      defaultLockInDuration = _defaultLockInDuration;\r\n      emit setLockInDuration(_defaultLockInDuration);\r\n  }\r\n\r\n  function setUserCapEnabled(bool _userCapEnabled) public onlyCapper {\r\n      userCapEnabled = _userCapEnabled;\r\n      emit UserCapEnabledChange(userCapEnabled);\r\n  }\r\n\r\n  function setStakingCapEnabled(bool _stakingCapEnabled) public onlyCapper {\r\n      stakingCapEnabled= _stakingCapEnabled;\r\n      emit StakingCapEnabledChange(stakingCapEnabled);\r\n  }\r\n\r\n  function setDefaultUserCap(uint256 _newCap) public onlyCapper {\r\n      defaultUserCap = _newCap;\r\n      emit DefaultUserCapChanged(_newCap);\r\n  }\r\n\r\n  function setStakingCap(uint256 _newCap) public onlyCapper {\r\n      stakingCap = _newCap;\r\n      emit StakingCapChanged(_newCap);\r\n  }\r\n\r\n  function setUserCap(address user, uint256 cap) public onlyCapper {\r\n      userCap[user] = cap;\r\n      emit UserCapChanged(user, cap);\r\n  }\r\n\r\n  function setUserCap(address[] memory users, uint256[] memory caps) public onlyCapper {\r\n        require(users.length == caps.length, \"SavingsModule: arrays length not match\");\r\n        for(uint256 i=0;  i < users.length; i++) {\r\n            userCap[users[i]] = caps[i];\r\n            emit UserCapChanged(users[i], caps[i]);\r\n        }\r\n  }\r\n\r\n\r\n  function setVipUserEnabled(bool _vipUserEnabled) public onlyCapper {\r\n      vipUserEnabled = _vipUserEnabled;\r\n      emit VipUserEnabledChange(_vipUserEnabled);\r\n  }\r\n\r\n  function setVipUser(address user, bool isVip) public onlyCapper {\r\n      isVipUser[user] = isVip;\r\n      emit VipUserChanged(user, isVip);\r\n  }\r\n\r\n  function isUserCapEnabled() public view returns(bool) {\r\n    return userCapEnabled;\r\n  }\r\n\r\n\r\n  function iStakingCapEnabled() public view returns(bool) {\r\n    return stakingCapEnabled;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the timestamps for when active personal stakes for an address will unlock\r\n   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\r\n   * @param _address address that created the stakes\r\n   * @return uint256[] array of timestamps\r\n   */\r\n  function getPersonalStakeUnlockedTimestamps(address _address) external view returns (uint256[] memory) {\r\n    uint256[] memory timestamps;\r\n    (timestamps,,) = getPersonalStakes(_address);\r\n\r\n    return timestamps;\r\n  }\r\n\r\n\r\n  \r\n\r\n  /**\r\n   * @dev Returns the stake actualAmount for active personal stakes for an address\r\n   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\r\n   * @param _address address that created the stakes\r\n   * @return uint256[] array of actualAmounts\r\n   */\r\n  function getPersonalStakeActualAmounts(address _address) external view returns (uint256[] memory) {\r\n    uint256[] memory actualAmounts;\r\n    (,actualAmounts,) = getPersonalStakes(_address);\r\n\r\n    return actualAmounts;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addresses that each personal stake was created for by an address\r\n   * @dev These accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved\r\n   * @param _address address that created the stakes\r\n   * @return address[] array of amounts\r\n   */\r\n  function getPersonalStakeForAddresses(address _address) external view returns (address[] memory) {\r\n    address[] memory stakedFor;\r\n    (,,stakedFor) = getPersonalStakes(_address);\r\n\r\n    return stakedFor;\r\n  }\r\n\r\n  /**\r\n   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the user\r\n   * @notice MUST trigger Staked event\r\n   * @param _amount uint256 the amount of tokens to stake\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function stake(uint256 _amount, bytes memory _data) public isUserCapEnabledForStakeFor(_amount) {\r\n    createStake(\r\n      _msgSender(),\r\n      _amount,\r\n      defaultLockInDuration,\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the caller\r\n   * @notice MUST trigger Staked event\r\n   * @param _user address the address the tokens are staked for\r\n   * @param _amount uint256 the amount of tokens to stake\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function stakeFor(address _user, uint256 _amount, bytes memory _data) public checkUserCapDisabled {\r\n    createStake(\r\n      _user,\r\n      _amount,\r\n      defaultLockInDuration,\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the user, if unstaking is currently not possible the function MUST revert\r\n   * @notice MUST trigger Unstaked event\r\n   * @dev Unstaking tokens is an atomic operationвЂ”either all of the tokens in a stake, or none of the tokens.\r\n   * @dev Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be\r\n   *  transferred back to their account, and their personalStakeIndex will increment to the next active stake.\r\n   * @param _amount uint256 the amount of tokens to unstake\r\n   * @param _data bytes optional data to include in the Unstake event\r\n   */\r\n  function unstake(uint256 _amount, bytes memory _data) public {\r\n    withdrawStake(\r\n      _amount,\r\n      _data);\r\n  }\r\n\r\n  function unstakeAllUnlocked(bytes memory _data) public returns(uint256) {\r\n     uint256 unstakeAllAmount = 0;\r\n     uint256 personalStakeIndex = stakeHolders[_msgSender()].personalStakeIndex;\r\n\r\n     for(uint256 i=personalStakeIndex; i<stakeHolders[_msgSender()].personalStakes.length; i++) {\r\n       \r\n       if (stakeHolders[_msgSender()].personalStakes[i].unlockedTimestamp <= block.timestamp) {\r\n           unstakeAllAmount = unstakeAllAmount+stakeHolders[_msgSender()].personalStakes[i].actualAmount;\r\n           withdrawStake(stakeHolders[_msgSender()].personalStakes[i].actualAmount, _data);\r\n       }\r\n     }\r\n\r\n     return unstakeAllAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current total of tokens staked for an address\r\n   * @param _address address The address to query\r\n   * @return uint256 The number of tokens staked for the given address\r\n   */\r\n  function totalStakedFor(address _address) public view returns (uint256) {\r\n    return stakeHolders[_address].totalStakedFor;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current total of tokens staked\r\n   * @return uint256 The number of tokens staked in the contract\r\n   */\r\n  function totalStaked() public view returns (uint256) {\r\n    return stakingToken.balanceOf(address(this));\r\n  }\r\n\r\n  /**\r\n   * @notice Address of the token being used by the staking interface\r\n   * @return address The address of the ERC20 token used for staking\r\n   */\r\n  function token() public view returns (address) {\r\n    return address(stakingToken);\r\n  }\r\n\r\n  /**\r\n   * @notice MUST return true if the optional history functions are implemented, otherwise false\r\n   * @dev Since we don't implement the optional interface, this always returns false\r\n   * @return bool Whether or not the optional history functions are implemented\r\n   */\r\n  function supportsHistory() public pure returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to get specific properties of all of the personal stakes created by an address\r\n   * @param _address address The address to query\r\n   * @return (uint256[], uint256[], address[])\r\n   *  timestamps array, actualAmounts array, stakedFor array\r\n   */\r\n  function getPersonalStakes(\r\n    address _address\r\n  )\r\n    public view\r\n    returns(uint256[] memory, uint256[] memory, address[] memory)\r\n  {\r\n    StakeContract storage stakeContract = stakeHolders[_address];\r\n\r\n    uint256 arraySize = stakeContract.personalStakes.length - stakeContract.personalStakeIndex;\r\n    uint256[] memory unlockedTimestamps = new uint256[](arraySize);\r\n    uint256[] memory actualAmounts = new uint256[](arraySize);\r\n    address[] memory stakedFor = new address[](arraySize);\r\n\r\n    for (uint256 i = stakeContract.personalStakeIndex; i < stakeContract.personalStakes.length; i++) {\r\n      uint256 index = i - stakeContract.personalStakeIndex;\r\n      unlockedTimestamps[index] = stakeContract.personalStakes[i].unlockedTimestamp;\r\n      actualAmounts[index] = stakeContract.personalStakes[i].actualAmount;\r\n      stakedFor[index] = stakeContract.personalStakes[i].stakedFor;\r\n    }\r\n\r\n    return (\r\n      unlockedTimestamps,\r\n      actualAmounts,\r\n      stakedFor\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to create stakes for a given address\r\n   * @param _address address The address the stake is being created for\r\n   * @param _amount uint256 The number of tokens being staked\r\n   * @param _lockInDuration uint256 The duration to lock the tokens for\r\n   * @param _data bytes optional data to include in the Stake event\r\n   */\r\n  function createStake(\r\n    address _address,\r\n    uint256 _amount,\r\n    uint256 _lockInDuration,\r\n    bytes memory _data)\r\n    internal\r\n    canStake(_msgSender(), _amount)\r\n  {\r\n    if (!stakeHolders[_msgSender()].exists) {\r\n      stakeHolders[_msgSender()].exists = true;\r\n    }\r\n\r\n    stakeHolders[_address].totalStakedFor = stakeHolders[_address].totalStakedFor.add(_amount);\r\n    stakeHolders[_msgSender()].personalStakes.push(\r\n      Stake(\r\n        block.timestamp.add(_lockInDuration),\r\n        _amount,\r\n        _address)\r\n      );\r\n\r\n    emit Staked(\r\n      _address,\r\n      _amount,\r\n      totalStakedFor(_address),\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Helper function to withdraw stakes for the _msgSender()\r\n   * @param _amount uint256 The amount to withdraw. MUST match the stake amount for the\r\n   *  stake at personalStakeIndex.\r\n   * @param _data bytes optional data to include in the Unstake event\r\n   */\r\n  function withdrawStake(\r\n    uint256 _amount,\r\n    bytes memory _data)\r\n    internal isUserCapEnabledForUnStakeFor(_amount)\r\n  {\r\n    Stake storage personalStake = stakeHolders[_msgSender()].personalStakes[stakeHolders[_msgSender()].personalStakeIndex];\r\n\r\n    // Check that the current stake has unlocked & matches the unstake amount\r\n    require(\r\n      personalStake.unlockedTimestamp <= block.timestamp,\r\n      \"The current stake hasn't unlocked yet\");\r\n\r\n    require(\r\n      personalStake.actualAmount == _amount,\r\n      \"The unstake amount does not match the current stake\");\r\n\r\n    // Transfer the staked tokens from this contract back to the sender\r\n    // Notice that we are using transfer instead of transferFrom here, so\r\n    //  no approval is needed beforehand.\r\n    require(\r\n      stakingToken.transfer(_msgSender(), _amount),\r\n      \"Unable to withdraw stake\");\r\n\r\n    stakeHolders[personalStake.stakedFor].totalStakedFor = stakeHolders[personalStake.stakedFor]\r\n      .totalStakedFor.sub(personalStake.actualAmount);\r\n\r\n    personalStake.actualAmount = 0;\r\n    stakeHolders[_msgSender()].personalStakeIndex++;\r\n\r\n    emit Unstaked(\r\n      personalStake.stakedFor,\r\n      _amount,\r\n      totalStakedFor(personalStake.stakedFor),\r\n      _data);\r\n  }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CapperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CapperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"DefaultUserCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStacked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"StakingCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"StakingCapEnabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStacked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"UserCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UserCapEnabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVip\",\"type\":\"bool\"}],\"name\":\"VipUserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"VipUserEnabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultLockInDuration\",\"type\":\"uint256\"}],\"name\":\"setLockInDuration\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultLockInDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultUserCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"}],\"name\":\"getModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPersonalStakeActualAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPersonalStakeForAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPersonalStakeUnlockedTimestamps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPersonalStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iStakingCapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultLockInDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCapper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUserCapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVipUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceCapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultLockInDuration\",\"type\":\"uint256\"}],\"name\":\"setDefaultLockInDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"setDefaultUserCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"setStakingCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakingCapEnabled\",\"type\":\"bool\"}],\"name\":\"setStakingCapEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setUserCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"caps\",\"type\":\"uint256[]\"}],\"name\":\"setUserCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_userCapEnabled\",\"type\":\"bool\"}],\"name\":\"setUserCapEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isVip\",\"type\":\"bool\"}],\"name\":\"setVipUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_vipUserEnabled\",\"type\":\"bool\"}],\"name\":\"setVipUserEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"stakeFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakedFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"personalStakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingCapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"unstakeAllUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userCapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vipUserEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingPool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://689a7b52959870038882d2b0cdbb81c08b383db66dfff1202ab2bddabd27459b"}]}