{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-08-18\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n} library Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n} // SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n} contract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n} abstract contract TokenInterface {\r\n    function allowance(address, address) public virtual returns (uint256);\r\n\r\n    function balanceOf(address) public virtual returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(address, address, uint256) public virtual returns (bool);\r\n\r\n    function deposit() public virtual payable;\r\n\r\n    function withdraw(uint256) public virtual;\r\n} interface ExchangeInterfaceV2 {\r\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount) external payable returns (uint);\r\n\r\n    function buy(address _srcAddr, address _destAddr, uint _destAmount) external payable returns(uint);\r\n\r\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount) external view returns (uint);\r\n\r\n    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount) external view returns (uint);\r\n} contract AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\r\n    /// @param _admin Address of multisig that becomes admin\r\n    function setAdminByOwner(address _admin) public {\r\n        require(msg.sender == owner);\r\n        require(admin == address(0));\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function setAdminByAdmin(address _admin) public {\r\n        require(msg.sender == admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function setOwnerByAdmin(address _owner) public {\r\n        require(msg.sender == admin);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(owner).transfer(_amount);\r\n        } else {\r\n            ERC20(_token).safeTransfer(owner, _amount);\r\n        }\r\n    }\r\n} contract ZrxAllowlist is AdminAuth {\r\n\r\n    mapping (address => bool) public zrxAllowlist;\r\n\r\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\r\n        zrxAllowlist[_zrxAddr] = _state;\r\n    }\r\n\r\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\r\n        return zrxAllowlist[_zrxAddr];\r\n    }\r\n} contract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n} contract SaverExchangeHelper {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\r\n\r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n    address public constant ZRX_ALLOWLIST_ADDR = 0x019739e288973F92bDD3c1d87178E206E51fd911;\r\n\r\n\r\n    function getDecimals(address _token) internal view returns (uint256) {\r\n        if (_token == KYBER_ETH_ADDRESS) return 18;\r\n\r\n        return ERC20(_token).decimals();\r\n    }\r\n\r\n    function getBalance(address _tokenAddr) internal view returns (uint balance) {\r\n        if (_tokenAddr == KYBER_ETH_ADDRESS) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = ERC20(_tokenAddr).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function approve0xProxy(address _tokenAddr, uint _amount) internal {\r\n        if (_tokenAddr != KYBER_ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).safeApprove(address(ERC20_PROXY_0X), _amount);\r\n        }\r\n    }\r\n\r\n    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\r\n        // send back any leftover ether or tokens\r\n        if (address(this).balance > 0) {\r\n            _to.transfer(address(this).balance);\r\n        }\r\n\r\n        if (getBalance(_srcAddr) > 0) {\r\n            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\r\n        }\r\n\r\n        if (getBalance(_destAddr) > 0) {\r\n            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\r\n        }\r\n    }\r\n\r\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\r\n        require(bs.length >= start + 32, \"slicing out of range\");\r\n\r\n        uint256 x;\r\n        assembly {\r\n            x := mload(add(bs, add(0x20, start)))\r\n        }\r\n\r\n        return x;\r\n    }\r\n} contract SaverExchangeRegistry is AdminAuth {\r\n\r\n\tmapping(address => bool) private wrappers;\r\n\r\n\tconstructor() public {\r\n\t\twrappers[0x880A845A85F843a5c67DB2061623c6Fc3bB4c511] = true;\r\n\t\twrappers[0x4c9B55f2083629A1F7aDa257ae984E03096eCD25] = true;\r\n\t\twrappers[0x42A9237b872368E1bec4Ca8D26A928D7d39d338C] = true;\r\n\t}\r\n\r\n\tfunction addWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = true;\r\n\t}\r\n\r\n\tfunction removeWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = false;\r\n\t}\r\n\r\n\tfunction isWrapper(address _wrapper) public view returns(bool) {\r\n\t\treturn wrappers[_wrapper];\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SaverExchangeCore is SaverExchangeHelper, DSMath {\r\n\r\n    // first is empty to keep the legacy order in place\r\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\r\n\r\n    enum ActionType { SELL, BUY }\r\n\r\n    struct ExchangeData {\r\n        address srcAddr;\r\n        address destAddr;\r\n        uint srcAmount;\r\n        uint destAmount;\r\n        uint minPrice;\r\n        address wrapper;\r\n        address exchangeAddr;\r\n        bytes callData;\r\n        uint256 price0x;\r\n    }\r\n\r\n    /// @notice Internal method that preforms a sell on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and destAmount\r\n    function _sell(ExchangeData memory exData) internal returns (address, uint) {\r\n\r\n        address wrapper;\r\n        uint swapedTokens;\r\n        bool success;\r\n        uint tokensLeft = exData.srcAmount;\r\n\r\n        // if selling eth, convert to weth\r\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\r\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\r\n            TokenInterface(WETH_ADDRESS).deposit.value(exData.srcAmount)();\r\n        }\r\n\r\n        // Try 0x first and then fallback on specific wrapper\r\n        if (exData.price0x > 0) {\r\n            approve0xProxy(exData.srcAddr, exData.srcAmount);\r\n\r\n            (success, swapedTokens, tokensLeft) = takeOrder(exData, address(this).balance, ActionType.SELL);\r\n\r\n            if (success) {\r\n                wrapper = exData.exchangeAddr;\r\n            }\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!success) {\r\n            swapedTokens = saverSwap(exData, ActionType.SELL);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), \"Final amount isn't correct\");\r\n\r\n        // if anything is left in weth, pull it to user as eth\r\n        if (getBalance(WETH_ADDRESS) > 0) {\r\n            TokenInterface(WETH_ADDRESS).withdraw(\r\n                TokenInterface(WETH_ADDRESS).balanceOf(address(this))\r\n            );\r\n        }            \r\n\r\n        return (wrapper, swapedTokens);\r\n    }\r\n\r\n\r\n    /// @notice Takes order from 0x and returns bool indicating if it is successful\r\n    /// @param _exData Exchange data\r\n    /// @param _ethAmount Ether fee needed for 0x order\r\n    function takeOrder(\r\n        ExchangeData memory _exData,\r\n        uint256 _ethAmount,\r\n        ActionType _type\r\n    ) private returns (bool success, uint256, uint256) {\r\n\r\n        // write in the exact amount we are selling/buing in an order\r\n        if (_type == ActionType.SELL) {\r\n            writeUint256(_exData.callData, 36, _exData.srcAmount);\r\n        } else {\r\n            writeUint256(_exData.callData, 36, _exData.destAmount);\r\n        }\r\n\r\n        if (ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.exchangeAddr)) {\r\n            (success, ) = _exData.exchangeAddr.call{value: _ethAmount}(_exData.callData);\r\n        } else {\r\n            success = false;\r\n        }\r\n\r\n        uint256 tokensSwaped = 0;\r\n        uint256 tokensLeft = _exData.srcAmount;\r\n\r\n        if (success) {\r\n            // check to see if any _src tokens are left over after exchange\r\n            tokensLeft = getBalance(_exData.srcAddr);\r\n\r\n            // convert weth -> eth if needed\r\n            if (_exData.destAddr == KYBER_ETH_ADDRESS) {\r\n                TokenInterface(WETH_ADDRESS).withdraw(\r\n                    TokenInterface(WETH_ADDRESS).balanceOf(address(this))\r\n                );\r\n            }\r\n\r\n            // get the current balance of the swaped tokens\r\n            tokensSwaped = getBalance(_exData.destAddr);\r\n        }\r\n\r\n        return (success, tokensSwaped, tokensLeft);\r\n    }\r\n\r\n    /// @notice Calls wraper contract for exchage to preform an on-chain swap\r\n    /// @param _exData Exchange data struct\r\n    /// @param _type Type of action SELL|BUY\r\n    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\r\n    function saverSwap(ExchangeData memory _exData, ActionType _type) internal returns (uint swapedTokens) {\r\n        require(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper), \"Wrapper is not valid\");\r\n\r\n        uint ethValue = 0;\r\n\r\n        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\r\n        \r\n        if (_type == ActionType.SELL) {\r\n            swapedTokens = ExchangeInterfaceV2(_exData.wrapper).\r\n                    sell{value: ethValue}(_exData.srcAddr, _exData.destAddr, _exData.srcAmount);\r\n        } else {\r\n            swapedTokens = ExchangeInterfaceV2(_exData.wrapper).\r\n                    buy{value: ethValue}(_exData.srcAddr, _exData.destAddr, _exData.destAmount);\r\n        }\r\n    }\r\n\r\n    function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\r\n        if (_b.length < _index + 32) {\r\n            revert(\"Incorrent lengt while writting bytes32\");\r\n        }\r\n\r\n        bytes32 input = bytes32(_input);\r\n\r\n        _index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            mstore(add(_b, _index), input)\r\n        }\r\n    }\r\n\r\n    /// @notice Converts Kybers Eth address -> Weth\r\n    /// @param _src Input address\r\n    function ethToWethAddr(address _src) internal pure returns (address) {\r\n        return _src == KYBER_ETH_ADDRESS ? WETH_ADDRESS : _src;\r\n    }\r\n\r\n  \r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external virtual payable {}\r\n} abstract contract CTokenInterface is ERC20 {\r\n    function mint(uint256 mintAmount) external virtual returns (uint256);\r\n\r\n    // function mint() external virtual payable;\r\n\r\n    function accrueInterest() public virtual returns (uint);\r\n\r\n    function redeem(uint256 redeemTokens) external virtual returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow() external virtual payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external virtual payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external virtual\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\r\n\r\n    function exchangeRateCurrent() external virtual returns (uint256);\r\n\r\n    function supplyRatePerBlock() external virtual returns (uint256);\r\n\r\n    function borrowRatePerBlock() external virtual returns (uint256);\r\n\r\n    function totalReserves() external virtual returns (uint256);\r\n\r\n    function reserveFactorMantissa() external virtual returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external virtual returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external virtual returns (uint256);\r\n\r\n    function getCash() external virtual returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external virtual returns (uint256);\r\n\r\n    function underlying() external virtual returns (address);\r\n\r\n    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\r\n} abstract contract CEtherInterface {\r\n    function mint() external virtual payable;\r\n    function repayBorrow() external virtual payable;\r\n} abstract contract CompoundOracleInterface {\r\n    function getUnderlyingPrice(address cToken) external view virtual returns (uint);\r\n} abstract contract ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external virtual returns (uint256);\r\n\r\n    function getAssetsIn(address account) external virtual view returns (address[] memory);\r\n\r\n    function markets(address account) public virtual view returns (bool, uint256);\r\n\r\n    function getAccountLiquidity(address account) external virtual view returns (uint256, uint256, uint256);\r\n\r\n    function claimComp(address holder) virtual public;\r\n\r\n    function oracle() public virtual view returns (address);\r\n} abstract contract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\r\n} contract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n} contract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n} abstract contract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) public {\r\n        require(setCache(_cacheAddr));\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public\r\n    //     payable\r\n    //     virtual\r\n    //     returns (address target, bytes32 response);\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (bytes32 response);\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n}\r\n\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n} contract CarefulMath {\r\n\r\n    /**\r\n     * @dev Possible error codes that we can return\r\n     */\r\n    enum MathError {\r\n        NO_ERROR,\r\n        DIVISION_BY_ZERO,\r\n        INTEGER_OVERFLOW,\r\n        INTEGER_UNDERFLOW\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, returns an error on overflow.\r\n    */\r\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (a == 0) {\r\n            return (MathError.NO_ERROR, 0);\r\n        }\r\n\r\n        uint c = a * b;\r\n\r\n        if (c / a != b) {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        } else {\r\n            return (MathError.NO_ERROR, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b == 0) {\r\n            return (MathError.DIVISION_BY_ZERO, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, a / b);\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b <= a) {\r\n            return (MathError.NO_ERROR, a - b);\r\n        } else {\r\n            return (MathError.INTEGER_UNDERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, returns an error on overflow.\r\n    */\r\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        uint c = a + b;\r\n\r\n        if (c >= a) {\r\n            return (MathError.NO_ERROR, c);\r\n        } else {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev add a and b and then subtract c\r\n    */\r\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\r\n        (MathError err0, uint sum) = addUInt(a, b);\r\n\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, 0);\r\n        }\r\n\r\n        return subUInt(sum, c);\r\n    }\r\n} contract Exponential is CarefulMath {\r\n    uint constant expScale = 1e18;\r\n    uint constant halfExpScale = expScale/2;\r\n    uint constant mantissaOne = expScale;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates an exponential from numerator and denominator values.\r\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\r\n     *            or if `denom` is zero.\r\n     */\r\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two exponentials, returning a new exponential.\r\n     */\r\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\r\n\r\n        return (error, Exp({mantissa: result}));\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two exponentials, returning a new exponential.\r\n     */\r\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\r\n\r\n        return (error, Exp({mantissa: result}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n     */\r\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(product));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n     */\r\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return addUInt(truncate(product), addend);\r\n    }\r\n\r\n    /**\r\n     * @dev Divide an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Divide a scalar by an Exp, returning a new Exp.\r\n     */\r\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\r\n        /*\r\n          We are doing this as:\r\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\r\n\r\n          How it works:\r\n          Exp = a / b;\r\n          Scalar = s;\r\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\r\n        */\r\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n        return getExp(numerator, divisor.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\r\n     */\r\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(fraction));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two exponentials, returning a new exponential.\r\n     */\r\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n\r\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        // We add half the scale before dividing so that we get rounding instead of truncation.\r\n        //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\r\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\r\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\r\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\r\n        assert(err2 == MathError.NO_ERROR);\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\r\n     */\r\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\r\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies three exponentials, returning a new exponential.\r\n     */\r\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\r\n        (MathError err, Exp memory ab) = mulExp(a, b);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, ab);\r\n        }\r\n        return mulExp(ab, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two exponentials, returning a new exponential.\r\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\r\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\r\n     */\r\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        return getExp(a.mantissa, b.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @dev Truncates the given exp to a whole number value.\r\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n     */\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / expScale;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if first Exp is less than second Exp.\r\n     */\r\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa < right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp <= right Exp.\r\n     */\r\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa <= right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp > right Exp.\r\n     */\r\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa > right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if Exp is exactly zero\r\n     */\r\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\r\n        return value.mantissa == 0;\r\n    }\r\n} /// @title Utlity functions for Compound contracts\r\ncontract CompoundSaverHelper is DSMath, Exponential {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address payable public constant WALLET_ADDR = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant DISCOUNT_ADDR = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    uint public constant SERVICE_FEE = 400; // 0.25% Fee\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    address public constant COMPOUND_LOGGER = 0x3DD0CDf5fFA28C6847B4B276e2fD256046a44bb7;\r\n\r\n    /// @notice Helper method to payback the Compound debt\r\n    /// @dev If amount is bigger it will repay the whole debt and send the extra to the _user\r\n    /// @param _amount Amount of tokens we want to repay\r\n    /// @param _cBorrowToken Ctoken address we are repaying\r\n    /// @param _borrowToken Token address we are repaying\r\n    /// @param _user Owner of the compound position we are paying back\r\n    function paybackDebt(uint _amount, address _cBorrowToken, address _borrowToken, address payable _user) internal {\r\n        uint wholeDebt = CTokenInterface(_cBorrowToken).borrowBalanceCurrent(address(this));\r\n\r\n        if (_amount > wholeDebt) {\r\n            if (_borrowToken == ETH_ADDRESS) {\r\n                _user.transfer((_amount - wholeDebt));\r\n            } else {\r\n                ERC20(_borrowToken).safeTransfer(_user, (_amount - wholeDebt));\r\n            }\r\n\r\n            _amount = wholeDebt;\r\n        }\r\n\r\n        approveCToken(_borrowToken, _cBorrowToken);\r\n\r\n        if (_borrowToken == ETH_ADDRESS) {\r\n            CEtherInterface(_cBorrowToken).repayBorrow{value: _amount}();\r\n        } else {\r\n            require(CTokenInterface(_cBorrowToken).repayBorrow(_amount) == 0);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the fee amount\r\n    /// @param _amount Amount that is converted\r\n    /// @param _user Actuall user addr not DSProxy\r\n    /// @param _gasCost Ether amount of gas we are spending for tx\r\n    /// @param _cTokenAddr CToken addr. of token we are getting for the fee\r\n    /// @return feeAmount The amount we took for the fee\r\n    function getFee(uint _amount, address _user, uint _gasCost, address _cTokenAddr) internal returns (uint feeAmount) {\r\n        uint fee = SERVICE_FEE;\r\n\r\n        address tokenAddr = getUnderlyingAddr(_cTokenAddr);\r\n\r\n        if (Discount(DISCOUNT_ADDR).isCustomFeeSet(_user)) {\r\n            fee = Discount(DISCOUNT_ADDR).getCustomServiceFee(_user);\r\n        }\r\n\r\n        feeAmount = (fee == 0) ? 0 : (_amount / fee);\r\n\r\n        if (_gasCost != 0) {\r\n            address oracle = ComptrollerInterface(COMPTROLLER).oracle();\r\n\r\n            uint usdTokenPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(_cTokenAddr);\r\n            uint ethPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(CETH_ADDRESS);\r\n\r\n            uint tokenPriceInEth = wdiv(usdTokenPrice, ethPrice);\r\n\r\n            _gasCost = wdiv(_gasCost, tokenPriceInEth);\r\n\r\n            feeAmount = add(feeAmount, _gasCost);\r\n        }\r\n\r\n        // fee can't go over 20% of the whole amount\r\n        if (feeAmount > (_amount / 5)) {\r\n            feeAmount = _amount / 5;\r\n        }\r\n\r\n        if (tokenAddr == ETH_ADDRESS) {\r\n            WALLET_ADDR.transfer(feeAmount);\r\n        } else {\r\n            ERC20(tokenAddr).safeTransfer(WALLET_ADDR, feeAmount);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the gas cost of transaction and send it to wallet\r\n    /// @param _amount Amount that is converted\r\n    /// @param _gasCost Ether amount of gas we are spending for tx\r\n    /// @param _cTokenAddr CToken addr. of token we are getting for the fee\r\n    /// @return feeAmount The amount we took for the fee\r\n    function getGasCost(uint _amount, uint _gasCost, address _cTokenAddr) internal returns (uint feeAmount) {\r\n        address tokenAddr = getUnderlyingAddr(_cTokenAddr);\r\n\r\n        if (_gasCost != 0) {\r\n            address oracle = ComptrollerInterface(COMPTROLLER).oracle();\r\n\r\n            uint usdTokenPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(_cTokenAddr);\r\n            uint ethPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(CETH_ADDRESS);\r\n\r\n            uint tokenPriceInEth = wdiv(usdTokenPrice, ethPrice);\r\n\r\n            feeAmount = wdiv(_gasCost, tokenPriceInEth);\r\n        }\r\n\r\n        // fee can't go over 20% of the whole amount\r\n        if (feeAmount > (_amount / 5)) {\r\n            feeAmount = _amount / 5;\r\n        }\r\n\r\n        if (tokenAddr == ETH_ADDRESS) {\r\n            WALLET_ADDR.transfer(feeAmount);\r\n        } else {\r\n            ERC20(tokenAddr).safeTransfer(WALLET_ADDR, feeAmount);\r\n        }\r\n    }\r\n\r\n    /// @notice Enters the market for the collatera and borrow tokens\r\n    /// @param _cTokenAddrColl Collateral address we are entering the market in\r\n    /// @param _cTokenAddrBorrow Borrow address we are entering the market in\r\n    function enterMarket(address _cTokenAddrColl, address _cTokenAddrBorrow) internal {\r\n        address[] memory markets = new address[](2);\r\n        markets[0] = _cTokenAddrColl;\r\n        markets[1] = _cTokenAddrBorrow;\r\n\r\n        ComptrollerInterface(COMPTROLLER).enterMarkets(markets);\r\n    }\r\n\r\n    /// @notice Approves CToken contract to pull underlying tokens from the DSProxy\r\n    /// @param _tokenAddr Token we are trying to approve\r\n    /// @param _cTokenAddr Address which will gain the approval\r\n    function approveCToken(address _tokenAddr, address _cTokenAddr) internal {\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).safeApprove(_cTokenAddr, uint(-1));\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the underlying address of the cToken asset\r\n    /// @param _cTokenAddress cToken address\r\n    /// @return Token address of the cToken specified\r\n    function getUnderlyingAddr(address _cTokenAddress) internal returns (address) {\r\n        if (_cTokenAddress == CETH_ADDRESS) {\r\n            return ETH_ADDRESS;\r\n        } else {\r\n            return CTokenInterface(_cTokenAddress).underlying();\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the owner of the DSProxy that called the contract\r\n    function getUserAddress() internal view returns (address) {\r\n        DSProxy proxy = DSProxy(uint160(address(this)));\r\n\r\n        return proxy.owner();\r\n    }\r\n\r\n    /// @notice Returns the maximum amount of collateral available to withdraw\r\n    /// @dev Due to rounding errors the result is - 1% wei from the exact amount\r\n    /// @param _cCollAddress Collateral we are getting the max value of\r\n    /// @param _account Users account\r\n    /// @return Returns the max. collateral amount in that token\r\n    function getMaxCollateral(address _cCollAddress, address _account) public returns (uint) {\r\n        (, uint liquidityInUsd, ) = ComptrollerInterface(COMPTROLLER).getAccountLiquidity(_account);\r\n        uint usersBalance = CTokenInterface(_cCollAddress).balanceOfUnderlying(_account);\r\n        address oracle = ComptrollerInterface(COMPTROLLER).oracle();\r\n\r\n        if (liquidityInUsd == 0) return usersBalance;\r\n\r\n        CTokenInterface(_cCollAddress).accrueInterest();\r\n\r\n        (, uint collFactorMantissa) = ComptrollerInterface(COMPTROLLER).markets(_cCollAddress);\r\n        Exp memory collateralFactor = Exp({mantissa: collFactorMantissa});\r\n\r\n        (, uint tokensToUsd) = divScalarByExpTruncate(liquidityInUsd, collateralFactor);\r\n\r\n        uint usdPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(_cCollAddress);\r\n        uint liqInToken = wdiv(tokensToUsd, usdPrice);\r\n\r\n        if (liqInToken > usersBalance) return usersBalance;\r\n\r\n        return sub(liqInToken, (liqInToken / 100)); // cut off 1% due to rounding issues\r\n    }\r\n\r\n    /// @notice Returns the maximum amount of borrow amount available\r\n    /// @dev Due to rounding errors the result is - 1% wei from the exact amount\r\n    /// @param _cBorrowAddress Borrow token we are getting the max value of\r\n    /// @param _account Users account\r\n    /// @return Returns the max. borrow amount in that token\r\n    function getMaxBorrow(address _cBorrowAddress, address _account) public returns (uint) {\r\n        (, uint liquidityInUsd, ) = ComptrollerInterface(COMPTROLLER).getAccountLiquidity(_account);\r\n        address oracle = ComptrollerInterface(COMPTROLLER).oracle();\r\n\r\n        CTokenInterface(_cBorrowAddress).accrueInterest();\r\n\r\n        uint usdPrice = CompoundOracleInterface(oracle).getUnderlyingPrice(_cBorrowAddress);\r\n        uint liquidityInToken = wdiv(liquidityInUsd, usdPrice);\r\n\r\n        return sub(liquidityInToken, (liquidityInToken / 100)); // cut off 1% due to rounding issues\r\n    }\r\n} contract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\r\n        public\r\n    {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Implements the actual logic of Repay/Boost with FL\r\ncontract CompoundSaverFlashProxy is SaverExchangeCore, CompoundSaverHelper  {\r\n\r\n    address public constant DEFISAVER_LOGGER = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    /// @notice Repays the position and sends tokens back for FL\r\n    /// @param _exData Exchange data\r\n    /// @param _cAddresses cTokens addreses and exchange [cCollAddress, cBorrowAddress]\r\n    /// @param _gasCost Gas cost for transaction\r\n    /// @param _flashLoanData Data about FL [amount, fee]\r\n    function flashRepay(\r\n        ExchangeData memory _exData,\r\n        address[2] memory _cAddresses, // cCollAddress, cBorrowAddress\r\n        uint256 _gasCost,\r\n        uint[2] memory _flashLoanData // amount, fee\r\n    ) public payable {\r\n        enterMarket(_cAddresses[0], _cAddresses[1]);\r\n\r\n        address payable user = payable(getUserAddress());\r\n        uint flashBorrowed = _flashLoanData[0] + _flashLoanData[1];\r\n\r\n        uint maxColl = getMaxCollateral(_cAddresses[0], address(this));\r\n\r\n        // draw max coll\r\n        require(CTokenInterface(_cAddresses[0]).redeemUnderlying(maxColl) == 0);\r\n\r\n        address collToken = getUnderlyingAddr(_cAddresses[0]);\r\n        address borrowToken = getUnderlyingAddr(_cAddresses[1]);\r\n\r\n        uint swapAmount = 0;\r\n\r\n        if (collToken != borrowToken) {\r\n            // swap max coll + loanAmount\r\n            (,swapAmount) = _sell(_exData);\r\n\r\n            // get fee\r\n            swapAmount -= getFee(swapAmount, user, _gasCost, _cAddresses[1]);\r\n        } else {\r\n            swapAmount = (maxColl + _flashLoanData[0]);\r\n            swapAmount -= getGasCost(swapAmount, _gasCost, _cAddresses[1]);\r\n        }\r\n\r\n        // payback debt\r\n        paybackDebt(swapAmount, _cAddresses[1], borrowToken, user);\r\n\r\n        // draw collateral for loanAmount + loanFee\r\n        require(CTokenInterface(_cAddresses[0]).redeemUnderlying(flashBorrowed) == 0);\r\n\r\n        // repay flash loan\r\n        returnFlashLoan(collToken, flashBorrowed);\r\n\r\n        DefisaverLogger(DEFISAVER_LOGGER).Log(address(this), msg.sender, \"CompoundRepay\", abi.encode(_exData.srcAmount, swapAmount, collToken, borrowToken));\r\n    }\r\n\r\n    /// @notice Boosts the position and sends tokens back for FL\r\n    /// @param _exData Exchange data\r\n    /// @param _cAddresses cTokens addreses and exchange [cCollAddress, cBorrowAddress]\r\n    /// @param _gasCost Gas cost for specific transaction\r\n    /// @param _flashLoanData Data about FL [amount, fee]\r\n    function flashBoost(\r\n        ExchangeData memory _exData,\r\n        address[2] memory _cAddresses, // cCollAddress, cBorrowAddress\r\n        uint256 _gasCost,\r\n        uint[2] memory _flashLoanData // amount, fee\r\n    ) public payable {\r\n        enterMarket(_cAddresses[0], _cAddresses[1]);\r\n\r\n        address payable user = payable(getUserAddress());\r\n        uint flashBorrowed = _flashLoanData[0] + _flashLoanData[1];\r\n\r\n        // borrow max amount\r\n        uint borrowAmount = getMaxBorrow(_cAddresses[1], address(this));\r\n        require(CTokenInterface(_cAddresses[1]).borrow(borrowAmount) == 0);\r\n\r\n        address collToken = getUnderlyingAddr(_cAddresses[0]);\r\n        address borrowToken = getUnderlyingAddr(_cAddresses[1]);\r\n\r\n        uint swapAmount = 0;\r\n\r\n        if (collToken != borrowToken) {\r\n            // get dfs fee\r\n            borrowAmount -= getFee((borrowAmount + _flashLoanData[0]), user, _gasCost, _cAddresses[1]);\r\n            _exData.srcAmount = (borrowAmount + _flashLoanData[0]);\r\n\r\n            (,swapAmount) = _sell(_exData);\r\n        } else {\r\n            swapAmount = (borrowAmount + _flashLoanData[0]);\r\n            swapAmount -= getGasCost(swapAmount, _gasCost, _cAddresses[1]);\r\n        }\r\n\r\n        // deposit swaped collateral\r\n        depositCollateral(collToken, _cAddresses[0], swapAmount);\r\n\r\n        // borrow token to repay flash loan\r\n        require(CTokenInterface(_cAddresses[1]).borrow(flashBorrowed) == 0);\r\n\r\n        // repay flash loan\r\n        returnFlashLoan(borrowToken, flashBorrowed);\r\n\r\n        DefisaverLogger(DEFISAVER_LOGGER).Log(address(this), msg.sender, \"CompoundBoost\", abi.encode(_exData.srcAmount, swapAmount, collToken, borrowToken));\r\n    }\r\n\r\n    /// @notice Helper method to deposit tokens in Compound\r\n    /// @param _collToken Token address of the collateral\r\n    /// @param _cCollToken CToken address of the collateral\r\n    /// @param _depositAmount Amount to deposit\r\n    function depositCollateral(address _collToken, address _cCollToken, uint _depositAmount) internal {\r\n        approveCToken(_collToken, _cCollToken);\r\n\r\n        if (_collToken != ETH_ADDRESS) {\r\n            require(CTokenInterface(_cCollToken).mint(_depositAmount) == 0);\r\n        } else {\r\n            CEtherInterface(_cCollToken).mint{value: _depositAmount}(); // reverts on fail\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the tokens/ether to the msg.sender which is the FL contract\r\n    /// @param _tokenAddr Address of token which we return\r\n    /// @param _amount Amount to return\r\n    function returnFlashLoan(address _tokenAddr, uint _amount) internal {\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).safeTransfer(msg.sender, _amount);\r\n        }\r\n\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_LOGGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFISAVER_LOGGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAVER_EXCHANGE_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_ADDR\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZRX_ALLOWLIST_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"price0x\",\"type\":\"uint256\"}],\"internalType\":\"struct SaverExchangeCore.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"},{\"internalType\":\"address[2]\",\"name\":\"_cAddresses\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_flashLoanData\",\"type\":\"uint256[2]\"}],\"name\":\"flashBoost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"price0x\",\"type\":\"uint256\"}],\"internalType\":\"struct SaverExchangeCore.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"},{\"internalType\":\"address[2]\",\"name\":\"_cAddresses\",\"type\":\"address[2]\"},{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_flashLoanData\",\"type\":\"uint256[2]\"}],\"name\":\"flashRepay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cBorrowAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cCollAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getMaxCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CompoundSaverFlashProxy","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cf91b3f8933a6267c66836a11b2cccba1b1a22cc17b8896175ec4f3fc4b6c923"}]}