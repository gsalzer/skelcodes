{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n██╗     ███████╗██╗  ██╗            \r\n██║     ██╔════╝╚██╗██╔╝            \r\n██║     █████╗   ╚███╔╝             \r\n██║     ██╔══╝   ██╔██╗             \r\n███████╗███████╗██╔╝ ██╗            \r\n╚══════╝╚══════╝╚═╝  ╚═╝            \r\n                                    \r\n ██████╗ ██████╗  ██████╗ ██╗    ██╗\r\n██╔════╝ ██╔══██╗██╔═══██╗██║    ██║\r\n██║  ███╗██████╔╝██║   ██║██║ █╗ ██║\r\n██║   ██║██╔══██╗██║   ██║██║███╗██║\r\n╚██████╔╝██║  ██║╚██████╔╝╚███╔███╔╝\r\n ╚═════╝ ╚═╝  ╚═╝ ╚═════╝  ╚══╝╚══╝ \r\nDEAR MSG.SENDER(S):\r\n\r\n/ LXG is a project in beta.\r\n// Please audit and use at your own risk.\r\n/// Entry into LXG shall not create an attorney/client relationship.\r\n//// Likewise, LXG should not be construed as legal advice or replacement for professional counsel.\r\n///// STEAL THIS C0D3SL4W \r\n\r\n~presented by Open, ESQ || LexDAO LLC\r\n*/\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**************************\r\nOPENZEPPELIN BASE CONTRACTS  \r\n**************************/\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/***************\r\nEARNING PROTOCOL \r\n***************/\r\n/**\r\n * @title Compound interface\r\n * @dev see https://github.com/compound-developers/compound-supply-examples\r\n */\r\ninterface ICERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function mint(uint256) external returns (uint256);\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function supplyRatePerBlock() external returns (uint256);\r\n}\r\n\r\n/***************\r\nLexGrow Contract\r\n***************/\r\ncontract LexGrow is Context { // deal deposits w/ embedded arbitration + defi earning\r\n    using SafeMath for uint256;\r\n    \r\n    /** ADR Wrapper **/\r\n    address private judgeToken = 0x8C32E54439C00E2B34355b8A1590046324bEaeA7;\r\n    IERC20 public judge = IERC20(judgeToken);\r\n    address private judgementToken = 0x5d9686e500D92bC22f670eA50bef585d37084504;\r\n    IERC20 public judgement = IERC20(judgementToken);\r\n\r\n    /** DAI + Wrappers **/\r\n    // $DAI:\r\n    address private daiToken = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    IERC20 public dai = IERC20(daiToken);\r\n    // $cDAI:\r\n    address private cDAItoken = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\r\n    ICERC20 public cDAI = ICERC20(cDAItoken);\r\n    \r\n    /** USDC + Wrappers **/\r\n    // $USDC:\r\n    address private usdcToken = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    IERC20 public usdc = IERC20(usdcToken);\r\n    // $cUSDC:\r\n    address private cUSDCtoken = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\r\n    ICERC20 public cUSDC = ICERC20(cUSDCtoken);\r\n    \r\n    /** <$> LXG <$> **/\r\n    address payable public lexDAO = 0x97103fda00a2b47EaC669568063C00e65866a633;\r\n    address private vault = address(this);\r\n    uint8 public version = 1;\r\n    uint256 public depositFee;\r\n    uint256 public lxg; // index for registered lexgrow\r\n    string public emoji = \"⚖️🌱⚔️\";\r\n    mapping (uint256 => Deposit) public deposit; \r\n\r\n    struct Deposit {  \r\n        address client; \r\n        address provider;\r\n        uint256 amount;\r\n        uint256 index;\r\n        uint256 termination;\r\n        uint256 wrap;\r\n        string details; \r\n        bool dai;\r\n        bool locked; \r\n        bool released;\r\n    }\r\n    \t\r\n    // LXG Contract Events:\r\n    event Log(string, uint256); // log for Compound Finance interactions\r\n    event Registered(address indexed client, address indexed provider, uint256 indexed index);  \r\n    event Released(uint256 indexed index); \r\n    event Locked(uint256 indexed index, string indexed details); \r\n    event Resolved(address indexed resolver, uint256 indexed index, string indexed details); \r\n    \r\n    constructor () public {\r\n        dai.approve(cDAItoken, uint(-1));\r\n        usdc.approve(cUSDCtoken, uint(-1));\r\n        depositFee = 0.001 ether;\r\n    } \r\n    \r\n    /****************\r\n    DEPOSIT FUNCTIONS\r\n    ****************/\r\n    function depositDAI( // register $DAI locker w/ interest via $cDAI; arbitration via lexDAO\r\n        address provider,\r\n        uint256 amount, \r\n        uint256 termination,\r\n        string memory details) public payable returns (uint) {\r\n        require(msg.value == depositFee);\r\n\t    \r\n\t    // Amount of current exchange rate from $cDAI to underlying\r\n        uint256 exchangeRateMantissa = cDAI.exchangeRateCurrent();\r\n        emit Log(\"Exchange Rate: (scaled up by 1e18)\", exchangeRateMantissa);\r\n        \r\n        // Amount added to supply balance this block\r\n        uint256 supplyRateMantissa = cDAI.supplyRatePerBlock();\r\n        emit Log(\"Supply Rate: (scaled up by 1e18)\", supplyRateMantissa);\r\n\t    \r\n\t    dai.transferFrom(_msgSender(), vault, amount); // deposit $DAI\r\n\t    uint256 balance = cDAI.balanceOf(vault);\r\n        uint mintResult = cDAI.mint(amount); // wrap into $cDAI and store in vault\r\n        \r\n        uint256 index = lxg.add(1); \r\n\t    lxg = lxg.add(1);\r\n                \r\n            deposit[index] = Deposit( \r\n                _msgSender(), \r\n                provider,\r\n                amount,\r\n                index,\r\n                termination,\r\n                cDAI.balanceOf(vault).sub(balance),\r\n                details, \r\n                true,\r\n                false, \r\n                false);\r\n        \r\n        address(lexDAO).transfer(msg.value);\r\n        \r\n        emit Registered(_msgSender(), provider, index); \r\n        \r\n        return mintResult;\r\n    }\r\n    \r\n    function depositUSDC( // register $USDC locker w/ interest via $cUSDC; arbitration via lexDAO\r\n        address provider,\r\n        uint256 amount, \r\n        uint256 termination,\r\n        string memory details) public payable returns (uint) {\r\n        require(msg.value == depositFee);\r\n\t    \r\n\t    // Amount of current exchange rate from $cUSDC to underlying\r\n        uint256 exchangeRateMantissa = cUSDC.exchangeRateCurrent();\r\n        emit Log(\"Exchange Rate: (scaled up by 1e18)\", exchangeRateMantissa);\r\n        \r\n        // Amount added to supply balance this block\r\n        uint256 supplyRateMantissa = cUSDC.supplyRatePerBlock();\r\n        emit Log(\"Supply Rate: (scaled up by 1e18)\", supplyRateMantissa);\r\n\t    \r\n\t    usdc.transferFrom(_msgSender(), vault, amount); // deposit $USDC\r\n\t    uint256 balance = cUSDC.balanceOf(vault);\r\n        uint mintResult = cUSDC.mint(amount); // wrap into $cUSDC and store in vault\r\n        \r\n        uint256 index = lxg.add(1); \r\n\t    lxg = lxg.add(1);\r\n                \r\n            deposit[index] = Deposit( \r\n                _msgSender(), \r\n                provider,\r\n                amount,\r\n                index,\r\n                termination,\r\n                cUSDC.balanceOf(vault).sub(balance),\r\n                details, \r\n                false,\r\n                false, \r\n                false);\r\n        \r\n        address(lexDAO).transfer(msg.value);\r\n        \r\n        emit Registered(_msgSender(), provider, index);\r\n        \r\n        return mintResult; \r\n    }\r\n    \r\n    function release(uint256 index) public { // transfer wrapped deposit to provider\r\n    \tDeposit storage depos = deposit[index];\r\n\t    require(depos.locked == false); \r\n\t    require(depos.released == false); \r\n    \trequire(now <= depos.termination); \r\n    \trequire(_msgSender() == depos.client); \r\n\r\n        if (depos.dai == true) {\r\n            cDAI.transfer(depos.provider, depos.wrap);\r\n        } else {\r\n            cUSDC.transfer(depos.provider, depos.wrap);\r\n        }\r\n        \r\n        depos.released = true; \r\n        \r\n\t    emit Released(index); \r\n    }\r\n    \r\n    function withdraw(uint256 index) public { // withdraw wrapped deposit if termination time passes\r\n    \tDeposit storage depos = deposit[index];\r\n        require(depos.locked == false); \r\n        require(depos.released == false); \r\n    \trequire(now >= depos.termination);\r\n        \r\n        if (depos.dai == true) {\r\n            cDAI.transfer(depos.client, depos.wrap);\r\n        } else {\r\n            cUSDC.transfer(depos.client, depos.wrap);\r\n        }\r\n        \r\n        depos.released = true; \r\n        \r\n\t    emit Released(index); \r\n    }\r\n    \r\n    /************\r\n    ADR FUNCTIONS\r\n    ************/\r\n    function lock(uint256 index, string memory details) public {\r\n        Deposit storage depos = deposit[index]; \r\n        require(depos.released == false); \r\n        require(now <= depos.termination); \r\n        require(_msgSender() == depos.client || _msgSender() == depos.provider); \r\n\r\n\t    depos.locked = true; \r\n\t    \r\n\t    emit Locked(index, details);\r\n    }\r\n    \r\n    function resolve(uint256 index, uint256 clientAward, uint256 providerAward, string memory details) public {\r\n        Deposit storage depos = deposit[index];\r\n\t    require(depos.locked == true); \r\n\t    require(depos.released == false);\r\n\t    require(clientAward.add(providerAward) == depos.wrap); \r\n\t    require(judge.balanceOf(_msgSender()) >= 1, \"judgeToken balance insufficient\");\r\n\t    require(_msgSender() != depos.client);\r\n\t    require(_msgSender() != depos.provider);\r\n        \r\n        if (depos.dai == true) {\r\n            cDAI.transfer(depos.client, clientAward); \r\n            cDAI.transfer(depos.provider, providerAward);\r\n        } else {\r\n            cUSDC.transfer(depos.client, clientAward); \r\n            cUSDC.transfer(depos.provider, providerAward);\r\n        }\r\n    \t\r\n\t    depos.released = true; \r\n\t    judgement.transfer(_msgSender(), 1000000000000000000);\r\n\t    \r\n\t    emit Resolved(_msgSender(), index, details);\r\n    }\r\n    \r\n    /*************\r\n    MGMT FUNCTIONS\r\n    *************/\r\n    modifier onlyLexDAO () {\r\n        require(_msgSender() == lexDAO);\r\n        _;\r\n    }\r\n    \r\n    function newDepositFee(uint256 _depositFee) public onlyLexDAO {\r\n        depositFee = _depositFee;\r\n    }\r\n    \r\n    function newJudgeToken(address _judgeToken) public onlyLexDAO {\r\n        judgeToken = _judgeToken;\r\n    }\r\n    \r\n    function newLexDAO(address payable _lexDAO) public onlyLexDAO {\r\n        lexDAO = _lexDAO;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"Resolved\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"cDAI\",\"outputs\":[{\"internalType\":\"contract ICERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cUSDC\",\"outputs\":[{\"internalType\":\"contract ICERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termination\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrap\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"dai\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termination\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"depositDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termination\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"depositUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emoji\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"judge\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"judgement\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lexDAO\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lxg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"newDepositFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_judgeToken\",\"type\":\"address\"}],\"name\":\"newJudgeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_lexDAO\",\"type\":\"address\"}],\"name\":\"newLexDAO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clientAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerAward\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LexGrow","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9770f5162047ba92709a5e2a57f6bc9712d5338d2a3995276b28b5d726a235d9"}]}