{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// openzeppelin-solidity@2.3.0 from NPM\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ValidatorManagerContract {\r\n    using SafeMath for uint256;\r\n\r\n    /// \\frac{threshold_num}{threshold_denom} signatures are required for\r\n    /// validator approval to be granted\r\n    uint8 public threshold_num;\r\n    uint8 public threshold_denom;\r\n\r\n    /// The list of currently elected validators\r\n    address[] public validators;\r\n\r\n    /// The powers of the currently elected validators\r\n    uint64[] public powers;\r\n\r\n    /// The current sum of powers of currently elected validators\r\n    uint256 public totalPower;\r\n\r\n    /// Nonce tracking per to prevent replay attacks on signature\r\n    /// submission during validator rotation\r\n    uint256 public nonce;\r\n\r\n    /// Address of the loom token\r\n    address public loomAddress;\r\n\r\n    /// @notice  Event to log the change of the validator set.\r\n    /// @param  _validators The initial list of validators\r\n    /// @param  _powers The initial list of powers of each validator\r\n    event ValidatorSetChanged(address[] _validators, uint64[] _powers);\r\n\r\n    /// @notice View function that returns the powers array.\r\n    /// @dev    Solidity should have exposed a getter function since the variable is declared public.\r\n    /// @return powers The powers of the currently elected validators\r\n    function getPowers() public view returns(uint64[] memory) {\r\n        return powers;\r\n    }\r\n\r\n    /// @notice View function that returns the validators array.\r\n    /// @dev    Solidity should have exposed a getter function since the variable is declared public.\r\n    /// @return validators The currently elected validators\r\n    function getValidators() public view returns(address[] memory) {\r\n        return validators;\r\n    }\r\n\r\n    /// @notice Initialization of the system\r\n    /// @param  _validators The initial list of validators\r\n    /// @param  _powers The initial list of powers of each validator\r\n    /// @param  _threshold_num The numerator of the fraction of power that needs\r\n    ///         to sign for a call to be approved by a validator\r\n    /// @param  _threshold_denom The denominator of the fraction of power that needs\r\n    ///         to sign for a call to be approved by a validator\r\n    /// @param  _loomAddress The LOOM token address\r\n    constructor (\r\n        address[] memory _validators,\r\n        uint64[] memory _powers,\r\n        uint8 _threshold_num,\r\n        uint8 _threshold_denom,\r\n        address _loomAddress\r\n    ) \r\n        public \r\n    {\r\n        threshold_num = _threshold_num;\r\n        threshold_denom = _threshold_denom;\r\n        require(threshold_num <= threshold_denom && threshold_num > 0, \"Invalid threshold fraction.\");\r\n        loomAddress = _loomAddress;\r\n        _rotateValidators(_validators, _powers);\r\n    }\r\n\r\n    /// @notice Changes the loom token address. (requires signatures from at least `threshold_num/threshold_denom`\r\n    ///         validators, otherwise reverts)\r\n    /// @param  _loomAddress The new loom token address\r\n    /// @param  _signersIndexes Array of indexes of the validator's signatures based on\r\n    ///         the currently elected validators\r\n    /// @param  _v Array of `v` values from the validator signatures\r\n    /// @param  _r Array of `r` values from the validator signatures\r\n    /// @param  _s Array of `s` values from the validator signatures\r\n    function setLoom(\r\n        address _loomAddress,\r\n        uint256[] calldata _signersIndexes, // Based on: https://github.com/cosmos/peggy/blob/master/ethereum-contracts/contracts/Valset.sol#L75\r\n        uint8[] calldata _v,\r\n        bytes32[] calldata _r,\r\n        bytes32[] calldata _s\r\n    ) \r\n        external \r\n    {\r\n        // Hash the address of the contract along with the nonce and the\r\n        // updated loom token address.\r\n        bytes32 message = createMessage(\r\n            keccak256(abi.encodePacked(_loomAddress))\r\n        );\r\n\r\n        // Check if the signatures match the threshold set in the constructor\r\n        checkThreshold(message, _signersIndexes, _v, _r, _s);\r\n\r\n        // Update state\r\n        loomAddress = _loomAddress;\r\n        nonce++;\r\n    }\r\n\r\n    /// @notice Changes the threshold of signatures required to pass the\r\n    ///         validator signature check (requires signatures from at least `threshold_num/threshold_denom`\r\n    ///         validators, otherwise reverts)\r\n    /// @param  _num The new numerator\r\n    /// @param  _denom The new denominator\r\n    /// @param  _signersIndexes Array of indexes of the validator's signatures based on\r\n    ///         the currently elected validators\r\n    /// @param  _v Array of `v` values from the validator signatures\r\n    /// @param  _r Array of `r` values from the validator signatures\r\n    /// @param  _s Array of `s` values from the validator signatures\r\n    function setQuorum(\r\n        uint8 _num,\r\n        uint8 _denom,\r\n        uint256[] calldata _signersIndexes, // Based on: https://github.com/cosmos/peggy/blob/master/ethereum-contracts/contracts/Valset.sol#L75\r\n        uint8[] calldata _v,\r\n        bytes32[] calldata _r,\r\n        bytes32[] calldata _s\r\n    ) \r\n        external \r\n    {\r\n        require(_num <= _denom && _num > 0, \"Invalid threshold fraction\");\r\n\r\n        // Hash the address of the contract along with the nonce and the\r\n        // updated validator set.\r\n        bytes32 message = createMessage(\r\n            keccak256(abi.encodePacked(_num, _denom))\r\n        );\r\n\r\n        // Check if the signatures match the threshold set in the consutrctor\r\n        checkThreshold(message, _signersIndexes, _v, _r, _s);\r\n\r\n        threshold_num = _num;\r\n        threshold_denom = _denom;\r\n        nonce++;\r\n    }\r\n\r\n    /// @notice Updates the validator set with new validators and powers\r\n    ///         (requires signatures from at least `threshold_num/threshold_denom`\r\n    ///         validators, otherwise reverts)\r\n    /// @param  _newValidators The new validator set\r\n    /// @param  _newPowers The new list of powers corresponding to the validator set\r\n    /// @param  _signersIndexes Array of indexes of the validator's signatures based on\r\n    ///         the currently elected validators\r\n    /// @param  _v Array of `v` values from the validator signatures\r\n    /// @param  _r Array of `r` values from the validator signatures\r\n    /// @param  _s Array of `s` values from the validator signatures\r\n    function rotateValidators(\r\n        address[] calldata _newValidators, \r\n        uint64[] calldata  _newPowers,\r\n        uint256[] calldata _signersIndexes, // Based on: https://github.com/cosmos/peggy/blob/master/ethereum-contracts/contracts/Valset.sol#L75\r\n        uint8[] calldata _v,\r\n        bytes32[] calldata _r,\r\n        bytes32[] calldata _s\r\n    ) \r\n        external \r\n    {\r\n        // Hash the address of the contract along with the nonce and the\r\n        // updated validator set and powers.\r\n        bytes32 message = createMessage(\r\n            keccak256(abi.encodePacked(_newValidators,_newPowers))\r\n        );\r\n\r\n        // Check if the signatures match the threshold set in the consutrctor\r\n        checkThreshold(message, _signersIndexes, _v, _r, _s);\r\n\r\n        // update validator set\r\n        _rotateValidators(_newValidators, _newPowers);\r\n        nonce++;\r\n    }\r\n\r\n\r\n    /// @notice Checks if the provided signature is valid on message by the\r\n    ///         validator corresponding to `signersIndex`. Reverts if check fails\r\n    /// @param  _message The messsage hash that was signed\r\n    /// @param  _signersIndex The validator's index in the `validators` array\r\n    /// @param  _v The v value of the validator's signature\r\n    /// @param  _r The r value of the validator's signature\r\n    /// @param  _s The s value of the validator's signature\r\n    function signedByValidator(\r\n        bytes32 _message,\r\n        uint256 _signersIndex,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) \r\n        public \r\n        view\r\n    {\r\n        // prevent replay attacks by adding the nonce in the sig\r\n        // if a validator signs an invalid nonce,\r\n        // it won't pass the signature verification\r\n        // since the nonce in the hash is stored in the contract\r\n        address signer = ecrecover(_message, _v, _r, _s);\r\n        require(validators[_signersIndex] == signer, \"Message not signed by a validator\");\r\n    }\r\n\r\n    /// @notice Completes if the message being passed was signed by the required\r\n    ///         threshold of validators, otherwise reverts\r\n    /// @param  _signersIndexes Array of indexes of the validator's signatures based on\r\n    ///         the currently elected validators\r\n    /// @param  _v Array of `v` values from the validator signatures\r\n    /// @param  _r Array of `r` values from the validator signatures\r\n    /// @param  _s Array of `s` values from the validator signatures\r\n    function checkThreshold(bytes32 _message, uint256[] memory _signersIndexes, uint8[] memory _v, bytes32[] memory _r, bytes32[] memory _s) public view {\r\n        uint256 sig_length = _v.length;\r\n\r\n        require(sig_length <= validators.length,\r\n                \"checkThreshold:: Cannot submit more signatures than existing validators\"\r\n        );\r\n\r\n        require(sig_length > 0 && sig_length == _r.length && _r.length == _s.length && sig_length == _signersIndexes.length,\r\n                \"checkThreshold:: Incorrect number of params\"\r\n        );\r\n\r\n        // Signed message prefix\r\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _message));\r\n\r\n        // Get total voted power while making sure all signatures submitted\r\n        // were by validators without duplication\r\n        uint256 votedPower;\r\n        for (uint256 i = 0; i < sig_length; i++) {\r\n            if (i > 0) {\r\n                require(_signersIndexes[i] > _signersIndexes[i-1]);\r\n            }\r\n\r\n            // Skip malleable signatures / maybe better to revert instead of skipping?\r\n            if (uint256(_s[i]) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n                continue;\r\n            }\r\n            address signer = ecrecover(hash, _v[i], _r[i], _s[i]);\r\n            require(signer == validators[_signersIndexes[i]], \"checkThreshold:: Recovered address is not a validator\");\r\n\r\n            votedPower = votedPower.add(powers[_signersIndexes[i]]);\r\n        }\r\n\r\n        require(votedPower * threshold_denom >= totalPower *\r\n                threshold_num, \"checkThreshold:: Not enough power from validators\");\r\n    }\r\n\r\n\r\n\r\n    /// @notice Internal method that updates the state with the new validator\r\n    ///         set and powers, as well as the new total power\r\n    /// @param  _validators The initial list of validators\r\n    /// @param  _powers The initial list of powers of each validator\r\n    function _rotateValidators(address[] memory _validators, uint64[] memory _powers) internal {\r\n        uint256 val_length = _validators.length;\r\n\r\n        require(val_length == _powers.length, \"_rotateValidators: Array lengths do not match!\");\r\n\r\n        require(val_length > 0, \"Must provide more than 0 validators\");\r\n\r\n        uint256 _totalPower = 0;\r\n        for (uint256 i = 0; i < val_length; i++) {\r\n            _totalPower = _totalPower.add(_powers[i]);\r\n        }\r\n\r\n        // Set total power\r\n        totalPower = _totalPower;\r\n\r\n        // Set validators and their powers\r\n        validators = _validators;\r\n        powers = _powers;\r\n\r\n        emit ValidatorSetChanged(_validators, _powers);\r\n    }\r\n\r\n    /// @notice Creates the message hash that includes replay protection and\r\n    ///         binds the hash to this contract only.\r\n    /// @param  hash The hash of the message being signed\r\n    /// @return A hash on the hash of the message\r\n    function createMessage(bytes32 hash)\r\n    private\r\n    view returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                address(this),\r\n                nonce,\r\n                hash\r\n            )\r\n        );\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface for token contracts deployed to mainnet that let Ethereum Gateway mint the token.\r\n */\r\ncontract IERC20GatewayMintable is ERC20 {\r\n    // Called by the Ethereum Gateway contract to mint tokens.\r\n    //\r\n    // NOTE: the Ethereum gateway will call this method unconditionally.\r\n    function mintTo(address _to, uint256 _amount) public;\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20Gateway {\r\n    using SafeERC20 for IERC20;\r\n\r\n  /// @notice Event to log the withdrawal of a token from the Gateway.\r\n  /// @param  owner Address of the entity that made the withdrawal.\r\n  /// @param  kind The type of token withdrawn (ERC20/ERC721/ETH).\r\n  /// @param  contractAddress Address of token contract the token belong to.\r\n  /// @param  value For ERC721 this is the uid of the token, for ETH/ERC20 this is the amount.\r\n  event TokenWithdrawn(address indexed owner, TokenKind kind, address contractAddress, uint256 value);\r\n\r\n  /// @notice Event to log the deposit of a LOOM to the Gateway.\r\n  /// @param  from Address of the entity that made the withdrawal.\r\n  /// @param  amount The LOOM token amount that was deposited\r\n  /// @param  loomCoinAddress Address of the LOOM token\r\n  event LoomCoinReceived(address indexed from, uint256 amount, address loomCoinAddress);\r\n\r\n  /// @notice Event to log the deposit of a ERC20 to the Gateway.\r\n  /// @param  from Address of the entity that made the withdrawal.\r\n  /// @param  amount The ERC20 token amount that was deposited\r\n  /// @param  contractAddress Address of the ERC20 token\r\n  event ERC20Received(address from, uint256 amount, address contractAddress);\r\n\r\n  /// The LOOM token address\r\n  address public loomAddress;\r\n\r\n  //  A boolean to enable and disable deposit and withdraw\r\n  bool isGatewayEnabled;\r\n\r\n  /// Booleans to permit depositing arbitrary tokens to the gateways\r\n  bool allowAnyToken;\r\n  mapping (address => bool) public allowedTokens;\r\n\r\n  // Contract deployer is the owner of this contract\r\n  address public owner;\r\n\r\n  function getOwner() public view returns(address) {\r\n    return owner;\r\n  }\r\n\r\n  function getAllowAnyToken() public view returns(bool) {\r\n    return allowAnyToken;\r\n  }\r\n\r\n  /// The nonces per withdrawer to prevent replays\r\n  mapping (address => uint256) public nonces;\r\n\r\n  /// The Validator Manager Contract\r\n  ValidatorManagerContract public vmc;\r\n\r\n  /// Enum for the various types of each token to notify clients during\r\n  /// deposits and withdrawals\r\n  enum TokenKind {\r\n    ETH,\r\n    ERC20,\r\n    ERC721,\r\n    ERC721X,\r\n    LoomCoin\r\n  }\r\n\r\n  /// @notice Initialize the contract with the VMC\r\n  /// @param _vmc the validator manager contrct address\r\n  constructor(ValidatorManagerContract _vmc) public {\r\n    vmc = _vmc;\r\n    loomAddress = vmc.loomAddress();\r\n    owner = msg.sender;\r\n    isGatewayEnabled = true; // enable gateway by default\r\n    allowAnyToken = true; // enable depositing arbitrary tokens by default\r\n  }\r\n\r\n  /// @notice Function to withdraw ERC20 tokens from the Gateway. Emits a\r\n  /// ERC20Withdrawn event, or a LoomCoinWithdrawn event if the coin is LOOM\r\n  /// token, according to the ValidatorManagerContract. If withdrawal amount is more than current balance,\r\n  /// it will try to mint the token to user.\r\n  /// @param  amount The amount being withdrawn\r\n  /// @param  contractAddress The address of the token being withdrawn\r\n  /// @param  _signersIndexes Array of indexes of the validator's signatures based on\r\n  ///         the currently elected validators\r\n  /// @param  _v Array of `v` values from the validator signatures\r\n  /// @param  _r Array of `r` values from the validator signatures\r\n  /// @param  _s Array of `s` values from the validator signatures\r\n  function withdrawERC20(\r\n      uint256 amount,\r\n      address contractAddress,\r\n      uint256[] calldata _signersIndexes,\r\n      uint8[] calldata _v,\r\n      bytes32[] calldata _r,\r\n      bytes32[] calldata _s\r\n  )\r\n    gatewayEnabled\r\n    external\r\n  {\r\n    bytes32 message = createMessageWithdraw(\r\n            \"\\x10Withdraw ERC20:\\n\",\r\n            keccak256(abi.encodePacked(amount, contractAddress))\r\n    );\r\n\r\n    // Ensure enough power has signed the withdrawal\r\n    vmc.checkThreshold(message, _signersIndexes, _v, _r, _s);\r\n\r\n    // Replay protection\r\n    nonces[msg.sender]++;\r\n\r\n    uint256 bal = IERC20(contractAddress).balanceOf(address(this));\r\n    if (bal < amount) {\r\n      IERC20GatewayMintable(contractAddress).mintTo(address(this), amount - bal);\r\n    }\r\n    IERC20(contractAddress).safeTransfer(msg.sender, amount);\r\n    \r\n    emit TokenWithdrawn(msg.sender, contractAddress == loomAddress ? TokenKind.LoomCoin : TokenKind.ERC20, contractAddress, amount);\r\n  }\r\n\r\n  // Approve and Deposit function for 2-step deposits\r\n  // Requires first to have called `approve` on the specified ERC20 contract\r\n  function depositERC20(uint256 amount, address contractAddress) gatewayEnabled external {\r\n    IERC20(contractAddress).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n    emit ERC20Received(msg.sender, amount, contractAddress);\r\n    if (contractAddress == loomAddress) {\r\n        emit LoomCoinReceived(msg.sender, amount, contractAddress);\r\n    }\r\n  }\r\n\r\n  function getERC20(address contractAddress) external view returns (uint256) {\r\n      return IERC20(contractAddress).balanceOf(address(this));\r\n  }\r\n\r\n    /// @notice Creates the message hash that includes replay protection and\r\n    ///         binds the hash to this contract only.\r\n    /// @param  hash The hash of the message being signed\r\n    /// @return A hash on the hash of the message\r\n  function createMessageWithdraw(string memory prefix, bytes32 hash)\r\n    internal\r\n    view\r\n    returns (bytes32)\r\n  {\r\n    return keccak256(\r\n      abi.encodePacked(\r\n        prefix,\r\n        msg.sender,\r\n        nonces[msg.sender],\r\n        address(this),\r\n        hash\r\n      )\r\n    );\r\n  }\r\n\r\n  modifier gatewayEnabled() {\r\n    require(isGatewayEnabled, \"Gateway is disabled.\");\r\n    _;\r\n  }\r\n\r\n  /// @notice The owner can toggle allowing any token to be deposited / withdrawn from or to gateway\r\n  /// @param enable a boolean value to enable or disable gateway\r\n  function enableGateway(bool enable) public {\r\n    require(msg.sender == owner, \"enableGateway: only owner can enable or disable gateway\");\r\n    isGatewayEnabled = enable;\r\n  }\r\n\r\n  /// @notice Checks if the gateway allows deposits & withdrawals.\r\n  /// @return true if deposits and withdrawals are allowed, false otherwise.\r\n  function getGatewayEnabled() public view returns(bool) {\r\n    return isGatewayEnabled;\r\n  }\r\n\r\n  /// @notice Checks if a token at `tokenAddress` is allowed\r\n  /// @param  tokenAddress The token's address\r\n  /// @return True if `allowAnyToken` is set, or if the token has been allowed\r\n  function isTokenAllowed(address tokenAddress) public view returns(bool) {\r\n    return allowAnyToken || allowedTokens[tokenAddress];\r\n  }\r\n\r\n  /// @notice The owner can toggle allowing any token to be deposited on\r\n  ///         the sidechain\r\n  /// @param allow Boolean to allow or not the token\r\n  function toggleAllowAnyToken(bool allow) public {\r\n    require(msg.sender == owner, \"toggleAllowAnyToken: only owner can toggle\");\r\n    allowAnyToken = allow;\r\n  }\r\n\r\n  /// @notice The owner can toggle allowing a token to be deposited on\r\n  ///         the sidechain\r\n  /// @param  tokenAddress The token address\r\n  /// @param  allow Boolean to allow or not the token\r\n  function toggleAllowToken(address tokenAddress, bool allow) public {\r\n    require(msg.sender == owner, \"toggleAllowToken: only owner can toggle\");\r\n    allowedTokens[tokenAddress] = allow;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"vmc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllowAnyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loomAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"depositERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"_signersIndexes\",\"type\":\"uint256[]\"},{\"name\":\"_v\",\"type\":\"uint8[]\"},{\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"toggleAllowToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGatewayEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"toggleAllowAnyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_vmc\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"loomCoinAddress\",\"type\":\"address\"}],\"name\":\"LoomCoinReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ERC20Received\",\"type\":\"event\"}]","ContractName":"ERC20Gateway","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c97d1afef1e886849f63840566affe9ff9ec3328","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c662b7cc2f49bf4e5410d50b219fd2b83089bcb48e737ded88d4d94e8dd999a7"}]}