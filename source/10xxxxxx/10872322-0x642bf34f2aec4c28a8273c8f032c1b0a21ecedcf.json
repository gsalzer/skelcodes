{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/IERC20.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a `Transfer` event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when `approve` or `transferFrom` are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei.\r\n   *\r\n   * > Note that this information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * `IERC20.balanceOf` and `IERC20.transfer`.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * > Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an `Approval` event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a `Transfer` event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to `approve`. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/lib/uniswapV2/IUniswapV2Factory.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n  function allPairs(uint) external view returns (address pair);\r\n\r\n  function allPairsLength() external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/lib/uniswapV2/IUniswapV2Pair.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\n// File: contracts/lib/uniswapV2/UniswapV2.sol\r\n\r\npragma solidity 0.5.15;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ncontract UniswapV2 {\r\n\r\n  //0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n  IUniswapV2Factory factory;\r\n  address weth;\r\n\r\n  constructor(address _factory, address _weth) public {\r\n    factory = IUniswapV2Factory(_factory);\r\n    weth = _weth;\r\n  }\r\n\r\n  struct Pair {\r\n    address token0;\r\n    address token1;\r\n  }\r\n\r\n  function allPairsLength() external view returns (uint) {\r\n    return factory.allPairsLength();\r\n  }\r\n\r\n  function getPairs(uint fromIndex, uint toIndex) external view returns (Pair[] memory){\r\n    Pair[] memory pairs = new Pair[](toIndex - fromIndex);\r\n\r\n    uint pIndex = 0;\r\n\r\n    for (uint i = fromIndex; i < toIndex; i++) {\r\n      address pairAddr = factory.allPairs(i);\r\n\r\n      IUniswapV2Pair uniswapPair = IUniswapV2Pair(pairAddr);\r\n\r\n      Pair memory pair;\r\n\r\n      pair.token0 = uniswapPair.token0();\r\n      pair.token1 = uniswapPair.token1();\r\n\r\n      pairs[pIndex++] = pair;\r\n    }\r\n\r\n    return pairs;\r\n  }\r\n\r\n  function getPairReserves(address token0, address token1) public view returns (uint r0, uint r1, uint r2, uint r3, uint r4, uint r5) {\r\n\r\n    address exchange = factory.getPair(token0, token1);\r\n\r\n    if (exchange != address(0)) {\r\n      r0 = IERC20(token0).balanceOf(exchange);\r\n      r1 = IERC20(token1).balanceOf(exchange);\r\n    }\r\n\r\n    if (address(token0) != address(weth) && address(token1) != address(weth)) {\r\n      exchange = factory.getPair(token0, weth);\r\n\r\n      if (exchange != address(0)) {\r\n        r2 = IERC20(token0).balanceOf(exchange);\r\n        r3 = IERC20(weth).balanceOf(exchange);\r\n      }\r\n\r\n      exchange = factory.getPair(weth, token1);\r\n\r\n      if (exchange != address(0)) {\r\n        r4 = IERC20(weth).balanceOf(exchange);\r\n        r5 = IERC20(token1).balanceOf(exchange);\r\n      }\r\n    }\r\n\r\n    return (r0, r1, r2, r3, r4, r5);\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPairReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r5\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"}],\"name\":\"getPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct UniswapV2.Pair[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapV2","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://32e99854931296d5df8c4ef7b22ffa5fc546f7ecbd1eaa47b20286b14d064191"}]}