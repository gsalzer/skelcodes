{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-08-06\r\n*/\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n/**\r\n * @title The Owned contract\r\n * @notice A contract with helpers for basic contract ownership.\r\n */\r\ncontract Owned {\r\n\r\n  address payable public owner;\r\n  address private pendingOwner;\r\n\r\n  event OwnershipTransferRequested(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n  event OwnershipTransferred(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an owner to begin transferring ownership to a new address,\r\n   * pending.\r\n   */\r\n  function transferOwnership(address _to)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    pendingOwner = _to;\r\n\r\n    emit OwnershipTransferRequested(owner, _to);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an ownership transfer to be completed by the recipient.\r\n   */\r\n  function acceptOwnership()\r\n    external\r\n  {\r\n    require(msg.sender == pendingOwner, \"Must be proposed owner\");\r\n\r\n    address oldOwner = owner;\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n\r\n    emit OwnershipTransferred(oldOwner, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called by anyone other than the contract owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only callable by owner\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\r\n{\r\n}\r\n\r\n/**\r\n * @title A trusted proxy for updating where current answers are read from\r\n * @notice This contract provides a consistent address for the\r\n * CurrentAnwerInterface but delegates where it reads from to the owner, who is\r\n * trusted to update it.\r\n */\r\ncontract AggregatorProxy is AggregatorV2V3Interface, Owned {\r\n\r\n  struct Phase {\r\n    uint16 id;\r\n    AggregatorV2V3Interface aggregator;\r\n  }\r\n  Phase private currentPhase;\r\n  AggregatorV2V3Interface public proposedAggregator;\r\n  mapping(uint16 => AggregatorV2V3Interface) public phaseAggregators;\r\n\r\n  uint256 constant private PHASE_OFFSET = 64;\r\n  uint256 constant private PHASE_SIZE = 16;\r\n  uint256 constant private MAX_ID = 2**(PHASE_OFFSET+PHASE_SIZE) - 1;\r\n\r\n  constructor(address _aggregator) public Owned() {\r\n    setAggregator(_aggregator);\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the current answer from aggregator delegated to.\r\n   *\r\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended latestRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function latestAnswer()\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (int256 answer)\r\n  {\r\n    return currentPhase.aggregator.latestAnswer();\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the last updated height from aggregator delegated to.\r\n   *\r\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended latestRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function latestTimestamp()\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256 updatedAt)\r\n  {\r\n    return currentPhase.aggregator.latestTimestamp();\r\n  }\r\n\r\n  /**\r\n   * @notice get past rounds answers\r\n   * @param _roundId the answer number to retrieve the answer for\r\n   *\r\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended getRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function getAnswer(uint256 _roundId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (int256 answer)\r\n  {\r\n    if (_roundId > MAX_ID) return 0;\r\n\r\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\r\n    AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\r\n    if (address(aggregator) == address(0)) return 0;\r\n\r\n    return aggregator.getAnswer(aggregatorRoundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get block timestamp when an answer was last updated\r\n   * @param _roundId the answer number to retrieve the updated timestamp for\r\n   *\r\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended getRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function getTimestamp(uint256 _roundId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256 updatedAt)\r\n  {\r\n    if (_roundId > MAX_ID) return 0;\r\n\r\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\r\n    AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\r\n    if (address(aggregator) == address(0)) return 0;\r\n\r\n    return aggregator.getTimestamp(aggregatorRoundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get the latest completed round where the answer was updated. This\r\n   * ID includes the proxy's phase, to make sure round IDs increase even when\r\n   * switching to a newly deployed aggregator.\r\n   *\r\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended latestRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function latestRound()\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256 roundId)\r\n  {\r\n    Phase memory phase = currentPhase; // cache storage reads\r\n    return addPhase(phase.id, uint64(phase.aggregator.latestRound()));\r\n  }\r\n\r\n  /**\r\n   * @notice get data about a round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt and\r\n   * answeredInRound return values.\r\n   * Note that different underlying implementations of AggregatorV3Interface\r\n   * have slightly different semantics for some of the return values. Consumers\r\n   * should determine what implementations they expect to receive\r\n   * data from and validate that they can properly handle return data from all\r\n   * of them.\r\n   * @param _roundId the requested round ID as presented through the proxy, this\r\n   * is made up of the aggregator's round ID with the phase ID encoded in the\r\n   * two highest order bytes\r\n   * @return roundId is the round ID from the aggregator for which the data was\r\n   * retrieved combined with an phase to ensure that round IDs get larger as\r\n   * time moves forward.\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @dev Note that answer and updatedAt may change between queries.\r\n   */\r\n  function getRoundData(uint80 _roundId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\r\n\r\n    (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 ansIn\r\n    ) = phaseAggregators[phaseId].getRoundData(aggregatorRoundId);\r\n\r\n    return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, phaseId);\r\n  }\r\n\r\n  /**\r\n   * @notice get data about the latest round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt and\r\n   * answeredInRound return values.\r\n   * Note that different underlying implementations of AggregatorV3Interface\r\n   * have slightly different semantics for some of the return values. Consumers\r\n   * should determine what implementations they expect to receive\r\n   * data from and validate that they can properly handle return data from all\r\n   * of them.\r\n   * @return roundId is the round ID from the aggregator for which the data was\r\n   * retrieved combined with an phase to ensure that round IDs get larger as\r\n   * time moves forward.\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @dev Note that answer and updatedAt may change between queries.\r\n   */\r\n  function latestRoundData()\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    Phase memory current = currentPhase; // cache storage reads\r\n\r\n    (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 ansIn\r\n    ) = current.aggregator.latestRoundData();\r\n\r\n    return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, current.id);\r\n  }\r\n\r\n  /**\r\n   * @notice Used if an aggregator contract has been proposed.\r\n   * @param _roundId the round ID to retrieve the round data for\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n  */\r\n  function proposedGetRoundData(uint80 _roundId)\r\n    public\r\n    view\r\n    virtual\r\n    hasProposal()\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    return proposedAggregator.getRoundData(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice Used if an aggregator contract has been proposed.\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n  */\r\n  function proposedLatestRoundData()\r\n    public\r\n    view\r\n    virtual\r\n    hasProposal()\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    return proposedAggregator.latestRoundData();\r\n  }\r\n\r\n  /**\r\n   * @notice returns the current phase's aggregator address.\r\n   */\r\n  function aggregator()\r\n    external\r\n    view\r\n    returns (address)\r\n  {\r\n    return address(currentPhase.aggregator);\r\n  }\r\n\r\n  /**\r\n   * @notice returns the current phase's ID.\r\n   */\r\n  function phaseId()\r\n    external\r\n    view\r\n    returns (uint16)\r\n  {\r\n    return currentPhase.id;\r\n  }\r\n\r\n  /**\r\n   * @notice represents the number of decimals the aggregator responses represent.\r\n   */\r\n  function decimals()\r\n    external\r\n    view\r\n    override\r\n    returns (uint8)\r\n  {\r\n    return currentPhase.aggregator.decimals();\r\n  }\r\n\r\n  /**\r\n   * @notice the version number representing the type of aggregator the proxy\r\n   * points to.\r\n   */\r\n  function version()\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return currentPhase.aggregator.version();\r\n  }\r\n\r\n  /**\r\n   * @notice returns the description of the aggregator the proxy points to.\r\n   */\r\n  function description()\r\n    external\r\n    view\r\n    override\r\n    returns (string memory)\r\n  {\r\n    return currentPhase.aggregator.description();\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to propose a new address for the aggregator\r\n   * @param _aggregator The new address for the aggregator contract\r\n   */\r\n  function proposeAggregator(address _aggregator)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    proposedAggregator = AggregatorV2V3Interface(_aggregator);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to confirm and change the address\r\n   * to the proposed aggregator\r\n   * @dev Reverts if the given address doesn't match what was previously\r\n   * proposed\r\n   * @param _aggregator The new address for the aggregator contract\r\n   */\r\n  function confirmAggregator(address _aggregator)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    require(_aggregator == address(proposedAggregator), \"Invalid proposed aggregator\");\r\n    delete proposedAggregator;\r\n    setAggregator(_aggregator);\r\n  }\r\n\r\n\r\n  /*\r\n   * Internal\r\n   */\r\n\r\n  function setAggregator(address _aggregator)\r\n    internal\r\n  {\r\n    uint16 id = currentPhase.id + 1;\r\n    currentPhase = Phase(id, AggregatorV2V3Interface(_aggregator));\r\n    phaseAggregators[id] = AggregatorV2V3Interface(_aggregator);\r\n  }\r\n\r\n  function addPhase(\r\n    uint16 _phase,\r\n    uint64 _originalId\r\n  )\r\n    internal\r\n    view\r\n    returns (uint80)\r\n  {\r\n    return uint80(uint256(_phase) << PHASE_OFFSET | _originalId);\r\n  }\r\n\r\n  function parseIds(\r\n    uint256 _roundId\r\n  )\r\n    internal\r\n    view\r\n    returns (uint16, uint64)\r\n  {\r\n    uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\r\n    uint64 aggregatorRoundId = uint64(_roundId);\r\n\r\n    return (phaseId, aggregatorRoundId);\r\n  }\r\n\r\n  function addPhaseIds(\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound,\r\n      uint16 phaseId\r\n  )\r\n    internal\r\n    view\r\n    returns (uint80, int256, uint256, uint256, uint80)\r\n  {\r\n    return (\r\n      addPhase(phaseId, uint64(roundId)),\r\n      answer,\r\n      startedAt,\r\n      updatedAt,\r\n      addPhase(phaseId, uint64(answeredInRound))\r\n    );\r\n  }\r\n\r\n  /*\r\n   * Modifiers\r\n   */\r\n\r\n  modifier hasProposal() {\r\n    require(address(proposedAggregator) != address(0), \"No proposed aggregator present\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ninterface AccessControllerInterface {\r\n  function hasAccess(address user, bytes calldata data) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title External Access Controlled Aggregator Proxy\r\n * @notice A trusted proxy for updating where current answers are read from\r\n * @notice This contract provides a consistent address for the\r\n * Aggregator and AggregatorV3Interface but delegates where it reads from to the owner, who is\r\n * trusted to update it.\r\n * @notice Only access enabled addresses are allowed to access getters for\r\n * aggregated answers and round information.\r\n */\r\ncontract EACAggregatorProxy is AggregatorProxy {\r\n\r\n  AccessControllerInterface public accessController;\r\n\r\n  constructor(\r\n    address _aggregator,\r\n    address _accessController\r\n  )\r\n    public\r\n    AggregatorProxy(_aggregator)\r\n  {\r\n    setController(_accessController);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to update the accessController contract address.\r\n   * @param _accessController The new address for the accessController contract\r\n   */\r\n  function setController(address _accessController)\r\n    public\r\n    onlyOwner()\r\n  {\r\n    accessController = AccessControllerInterface(_accessController);\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the current answer from aggregator delegated to.\r\n   * @dev overridden function to add the checkAccess() modifier\r\n   *\r\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended latestRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function latestAnswer()\r\n    public\r\n    view\r\n    override\r\n    checkAccess()\r\n    returns (int256)\r\n  {\r\n    return super.latestAnswer();\r\n  }\r\n\r\n  /**\r\n   * @notice get the latest completed round where the answer was updated. This\r\n   * ID includes the proxy's phase, to make sure round IDs increase even when\r\n   * switching to a newly deployed aggregator.\r\n   *\r\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended latestRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function latestTimestamp()\r\n    public\r\n    view\r\n    override\r\n    checkAccess()\r\n    returns (uint256)\r\n  {\r\n    return super.latestTimestamp();\r\n  }\r\n\r\n  /**\r\n   * @notice get past rounds answers\r\n   * @param _roundId the answer number to retrieve the answer for\r\n   * @dev overridden function to add the checkAccess() modifier\r\n   *\r\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended getRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function getAnswer(uint256 _roundId)\r\n    public\r\n    view\r\n    override\r\n    checkAccess()\r\n    returns (int256)\r\n  {\r\n    return super.getAnswer(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get block timestamp when an answer was last updated\r\n   * @param _roundId the answer number to retrieve the updated timestamp for\r\n   * @dev overridden function to add the checkAccess() modifier\r\n   *\r\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended getRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function getTimestamp(uint256 _roundId)\r\n    public\r\n    view\r\n    override\r\n    checkAccess()\r\n    returns (uint256)\r\n  {\r\n    return super.getTimestamp(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get the latest completed round where the answer was updated\r\n   * @dev overridden function to add the checkAccess() modifier\r\n   *\r\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended latestRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function latestRound()\r\n    public\r\n    view\r\n    override\r\n    checkAccess()\r\n    returns (uint256)\r\n  {\r\n    return super.latestRound();\r\n  }\r\n\r\n  /**\r\n   * @notice get data about a round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt and\r\n   * answeredInRound return values.\r\n   * Note that different underlying implementations of AggregatorV3Interface\r\n   * have slightly different semantics for some of the return values. Consumers\r\n   * should determine what implementations they expect to receive\r\n   * data from and validate that they can properly handle return data from all\r\n   * of them.\r\n   * @param _roundId the round ID to retrieve the round data for\r\n   * @return roundId is the round ID from the aggregator for which the data was\r\n   * retrieved combined with a phase to ensure that round IDs get larger as\r\n   * time moves forward.\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @dev Note that answer and updatedAt may change between queries.\r\n   */\r\n  function getRoundData(uint80 _roundId)\r\n    public\r\n    view\r\n    checkAccess()\r\n    override\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    return super.getRoundData(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get data about the latest round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt and\r\n   * answeredInRound return values.\r\n   * Note that different underlying implementations of AggregatorV3Interface\r\n   * have slightly different semantics for some of the return values. Consumers\r\n   * should determine what implementations they expect to receive\r\n   * data from and validate that they can properly handle return data from all\r\n   * of them.\r\n   * @return roundId is the round ID from the aggregator for which the data was\r\n   * retrieved combined with a phase to ensure that round IDs get larger as\r\n   * time moves forward.\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @dev Note that answer and updatedAt may change between queries.\r\n   */\r\n  function latestRoundData()\r\n    public\r\n    view\r\n    checkAccess()\r\n    override\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    return super.latestRoundData();\r\n  }\r\n\r\n  /**\r\n   * @notice Used if an aggregator contract has been proposed.\r\n   * @param _roundId the round ID to retrieve the round data for\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n  */\r\n  function proposedGetRoundData(uint80 _roundId)\r\n    public\r\n    view\r\n    checkAccess()\r\n    hasProposal()\r\n    override\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    return super.proposedGetRoundData(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice Used if an aggregator contract has been proposed.\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n  */\r\n  function proposedLatestRoundData()\r\n    public\r\n    view\r\n    checkAccess()\r\n    hasProposal()\r\n    override\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    return super.proposedLatestRoundData();\r\n  }\r\n\r\n  /**\r\n   * @dev reverts if the caller does not have access by the accessController\r\n   * contract or is the contract itself.\r\n   */\r\n  modifier checkAccess() {\r\n    AccessControllerInterface ac = accessController;\r\n    require(address(ac) == address(0) || ac.hasAccess(msg.sender, msg.data), \"No access\");\r\n    _;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessController\",\"outputs\":[{\"internalType\":\"contract AccessControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"confirmAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"phaseAggregators\",\"outputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"proposeAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"proposedGetRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedLatestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EACAggregatorProxy","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a9a88f8bdffa157c7a0d6e82e27e5f7164daf8fe0000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ce8095f57442161adfe033af031f6a2af76d161d0753353247d8d9919bdfa47f"}]}