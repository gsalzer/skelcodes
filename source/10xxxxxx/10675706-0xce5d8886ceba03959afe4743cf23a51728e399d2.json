{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TokenSale is ERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    address owner = msg.sender;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    string public constant name = \"PAYMENTBULL\";\r\n    string public constant symbol = \"BULL\";\r\n    uint public constant decimals = 18;\r\n\r\n    uint256 public totalSupply = 100000000e18;\r\n\r\n    uint256 public totalDistributed;\r\n\r\n    //uint256 public constant requestMinimum = 1 ether / 100; // 0.01 Ether\r\n\r\n    uint256 public tokensPerEthEarlySupporter = 80000e18;\r\n\r\n    uint256 public tokensPerEth = 60000e18;\r\n\r\n    uint256 public price;\r\n\r\n    uint public max_free = 20;\r\n\r\n    uint public free = 0;\r\n\r\n    address ethFund = 0xA90d2939D4052d93B0271661bDa88C6B74205936;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    event Distr(address indexed to, uint256 amount);\r\n    event DistrFinished();\r\n\r\n    event TokensPerEthUpdated(uint _tokensPerEth);\r\n\r\n    bool public distributionFinished = false;\r\n\r\n    bool public distribution_ongoing = false;\r\n\r\n    uint256 early_supporters = 3000000e18 ;\r\n\r\n    uint256 supply_for_sale = 36000000e18;\r\n\r\n    uint256 marketing_business_development = 13000000e18;\r\n\r\n    uint256 bounty_program = 2000000e18;\r\n\r\n    uint256 live_staking_bonus = 23000000e18;\r\n\r\n    uint256 founding_teams = 10000000e18;\r\n\r\n    uint256 liquidity_token_pool = 16000000e18;\r\n\r\n    uint public startBlock;\r\n    uint public freezeBlock;\r\n\r\n    mapping (address => uint256) bonus;\r\n\r\n    mapping (address => uint) purchase_time;\r\n\r\n    uint256 public sold = 0;\r\n\r\n    uint256 public sold_ico = 0;\r\n\r\n    modifier saleHappening {\r\n      require(distribution_ongoing == true, \"distribution started\");\r\n      // require(block.number <= freezeBlock, \"block.number <= freezeBlock\");\r\n      // require(!frozen, \"tokens are frozen\");\r\n      require(sold <= totalSupply, \"tokens sold out\");\r\n      _;\r\n    }\r\n\r\n    modifier canDistr() {\r\n        require(!distributionFinished);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n      address  _marketing_business_development_address,\r\n      address  _bounty_program_address,\r\n      address  _live_staking_bonus_address,\r\n      address  _founding_teams_address,\r\n      address  _liquidity_token_pool_address\r\n    ) public {\r\n        owner = msg.sender;\r\n\r\n        price = SafeMath.div(1e18, SafeMath.div(tokensPerEthEarlySupporter, 1e18));\r\n        distr(_marketing_business_development_address, marketing_business_development);\r\n        distr(_bounty_program_address, bounty_program);\r\n        distr(_live_staking_bonus_address, live_staking_bonus);\r\n        distr(_founding_teams_address, founding_teams);\r\n        distr(_liquidity_token_pool_address, liquidity_token_pool);\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    function tokenSaleStarted() public constant returns (bool) {\r\n        return distribution_ongoing;\r\n    }\r\n\r\n\r\n    function finishDistribution() onlyOwner canDistr public returns (bool) {\r\n        distributionFinished = true;\r\n        emit DistrFinished();\r\n        return true;\r\n    }\r\n\r\n\r\n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\n        sold = SafeMath.add(sold, _amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Distr(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function getBonus() public constant returns (uint256) {\r\n        return bonus[msg.sender];\r\n    }\r\n\r\n    function purchaseTokens()\r\n      public\r\n      payable\r\n      saleHappening\r\n    {\r\n      uint excessAmount = msg.value % price;\r\n\r\n      uint purchaseAmount = SafeMath.sub(msg.value, excessAmount);\r\n\r\n      uint tokenPurchase = SafeMath.div(SafeMath.mul(purchaseAmount,1e18), price);\r\n\r\n      uint total_token = tokenPurchase;\r\n      uint256 new_price;\r\n\r\n      if (msg.value == 0 && free < max_free)\r\n      {\r\n        tokenPurchase = 50;\r\n        free = SafeMath.add(free, 1);\r\n      }\r\n\r\n\r\n      if (msg.value >= 3 ether){\r\n        purchase_time[msg.sender] = now;\r\n        bonus[msg.sender] = SafeMath.add(bonus[msg.sender], SafeMath.div(SafeMath.mul(tokenPurchase, 5), 100));\r\n        total_token = SafeMath.add(tokenPurchase, SafeMath.div(SafeMath.mul(tokenPurchase, 5), 100));\r\n      }\r\n\r\n     // require(tokenPurchase <= token.balanceOf(address(this)), \"tokenPurchase <= token.balanceOf(this)\");\r\n\r\n      if (excessAmount > 0) {\r\n        msg.sender.transfer(excessAmount);\r\n      }\r\n\r\n      if (sold_ico > early_supporters) {\r\n\r\n        new_price = SafeMath.div(1e18, SafeMath.div(tokensPerEth, 1e18));\r\n        changePrice(new_price);\r\n      }\r\n\r\n      sold_ico = SafeMath.add(sold_ico, total_token);\r\n\r\n      assert(sold <= totalSupply);\r\n\r\n      ethFund.transfer(purchaseAmount);\r\n      assert(distr(msg.sender, total_token));\r\n      /*\r\n      // emit PurchasedTokens(msg.sender, tokenPurchase);\r\n      */\r\n    }\r\n\r\n    function changePrice(uint _newPrice) private\r\n    {\r\n      require(_newPrice > 0);\r\n      price = _newPrice;\r\n    }\r\n\r\n    function changePriceOwner(uint _newPrice) public\r\n      onlyOwner {\r\n      require(_newPrice > 0);\r\n      price = _newPrice;\r\n    }\r\n\r\n    function claim_bonus() public {\r\n      require(bonus[msg.sender] > 0);\r\n      require(now > purchase_time[msg.sender] + 2 days);\r\n      assert(distr(msg.sender, bonus[msg.sender]));\r\n    }\r\n\r\n    function startSale() public\r\n    onlyOwner {\r\n      distribution_ongoing = true;\r\n    }\r\n\r\n    function endSale() public\r\n    onlyOwner {\r\n      distribution_ongoing = false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claim_bonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"free\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEthEarlySupporter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_free\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distribution_ongoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sold_ico\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_marketing_business_development_address\",\"type\":\"address\"},{\"name\":\"_bounty_program_address\",\"type\":\"address\"},{\"name\":\"_live_staking_bonus_address\",\"type\":\"address\"},{\"name\":\"_founding_teams_address\",\"type\":\"address\"},{\"name\":\"_liquidity_token_pool_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"TokensPerEthUpdated\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005adb6b2ecffb03cb020baae630ab593c23d4294f0000000000000000000000005e4c37f0b8e462df5a83eaa42a38735cc7236493000000000000000000000000a304e5fcbf596bdea66a1340affd49e9d7f719d80000000000000000000000000eacf3f2ed2ca5f74bd783663d8ba592f82ff29200000000000000000000000043ae8cc59570fefd20f4fd0327b257e3559c36d9","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://097a6b5f1808838ead22a5fe7bde24c76ac950d67bcbf1eaea9425a53c4e3b20"}]}