{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract KingOfEther {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint public totalPlayers;\r\n    uint public totalPayout;\r\n    uint public totalInvested;\r\n    uint private minDepositSize = 0.1 ether;\r\n    uint private interestRateDivisor = 1000000000000;\r\n    uint public devCommission = 5;\r\n    uint public commissionDivisor = 100;\r\n    uint private minuteRate = 347222; //DAILY 3%\r\n    uint private releaseTime = 1593702000;\r\n\r\n    address public owner;\r\n    address public partner = address(0x917fE5cCF6cfa02B7251529112B133DeE6206F1E);\r\n\r\n    struct Player {\r\n        uint ethDeposit;\r\n        uint time;\r\n        uint interestProfit;\r\n        uint affRewards;\r\n        uint payoutSum;\r\n        address affFrom;\r\n        uint256 aff1sum; //8 level\r\n        uint256 aff2sum;\r\n        uint256 aff3sum;\r\n        uint256 aff4sum;\r\n        uint256 aff5sum;\r\n        uint256 aff6sum;\r\n        uint256 aff7sum;\r\n        uint256 aff8sum;\r\n    }\r\n\r\n    mapping(address => Player) public players;\r\n\r\n    constructor() public {\r\n      owner = msg.sender;\r\n      \r\n    }\r\n\r\n\r\n    function register(address _addr, address _affAddr) private{\r\n\r\n      Player storage player = players[_addr];\r\n\r\n      player.affFrom = _affAddr;\r\n\r\n      address _affAddr1 = _affAddr;\r\n      address _affAddr2 = players[_affAddr1].affFrom;\r\n      address _affAddr3 = players[_affAddr2].affFrom;\r\n      address _affAddr4 = players[_affAddr3].affFrom;\r\n      address _affAddr5 = players[_affAddr4].affFrom;\r\n      address _affAddr6 = players[_affAddr5].affFrom;\r\n      address _affAddr7 = players[_affAddr6].affFrom;\r\n      address _affAddr8 = players[_affAddr7].affFrom;\r\n\r\n      if (_affAddr1!=address(0))\r\n        players[_affAddr1].aff1sum = players[_affAddr1].aff1sum.add(1);\r\n      if (_affAddr2!=address(0))\r\n        players[_affAddr2].aff2sum = players[_affAddr2].aff2sum.add(1);\r\n      if (_affAddr3!=address(0))\r\n        players[_affAddr3].aff3sum = players[_affAddr3].aff3sum.add(1);\r\n      if (_affAddr4!=address(0))\r\n        players[_affAddr4].aff4sum = players[_affAddr4].aff4sum.add(1);\r\n      if (_affAddr5!=address(0))\r\n        players[_affAddr5].aff5sum = players[_affAddr5].aff5sum.add(1);\r\n      if (_affAddr6!=address(0))\r\n        players[_affAddr6].aff6sum = players[_affAddr6].aff6sum.add(1);\r\n      if (_affAddr7!=address(0))\r\n        players[_affAddr7].aff7sum = players[_affAddr7].aff7sum.add(1);\r\n      if (_affAddr8!=address(0))\r\n        players[_affAddr8].aff8sum = players[_affAddr8].aff8sum.add(1);\r\n    }\r\n\r\n    function () external payable {\r\n\r\n    }\r\n\r\n    function deposit(address _affAddr) public payable {\r\n        require(now >= releaseTime, \"not time yet!\");\r\n        collect(msg.sender);\r\n        require(msg.value >= minDepositSize);\r\n\r\n        uint depositAmount = msg.value;\r\n\r\n        Player storage player = players[msg.sender];\r\n\r\n        if (player.time == 0) {\r\n            player.time = now;\r\n            totalPlayers++;\r\n            if(_affAddr != address(0) && players[_affAddr].ethDeposit > 0){\r\n              register(msg.sender, _affAddr);\r\n            }\r\n            else{\r\n              register(msg.sender, owner);\r\n            }\r\n        }\r\n        player.ethDeposit = player.ethDeposit.add(depositAmount);\r\n\r\n        distributeRef(msg.value, player.affFrom);\r\n\r\n        totalInvested = totalInvested.add(depositAmount);\r\n        uint devEarn = depositAmount.mul(devCommission).div(commissionDivisor);\r\n        //send to partner 15% of devEarn\r\n        uint partnerEarn = (devEarn.mul(15)).div(100);\r\n        partner.transfer(partnerEarn);\r\n        owner.transfer(devEarn - partnerEarn);\r\n    }\r\n\r\n    function withdraw() public {\r\n        collect(msg.sender);\r\n        require(players[msg.sender].interestProfit > 0);\r\n\r\n        transferPayout(msg.sender, players[msg.sender].interestProfit);\r\n    }\r\n\r\n    function reinvest() public {\r\n      collect(msg.sender);\r\n      Player storage player = players[msg.sender];\r\n      uint256 depositAmount = player.interestProfit;\r\n      require(address(this).balance >= depositAmount);\r\n      player.interestProfit = 0;\r\n      player.ethDeposit = player.ethDeposit.add(depositAmount);\r\n\r\n      distributeRef(depositAmount, player.affFrom);\r\n\r\n      uint devEarn = depositAmount.mul(devCommission).div(commissionDivisor);\r\n      //send to partner 15% of devEarn\r\n      uint partnerEarn = (devEarn.mul(15)).div(100);\r\n      partner.transfer(partnerEarn);\r\n      owner.transfer(devEarn - partnerEarn);\r\n    }\r\n\r\n    function collect(address _addr) internal {\r\n        Player storage player = players[_addr];\r\n\r\n        uint secPassed = now.sub(player.time);\r\n        if (secPassed > 0 && player.time > 0) {\r\n            uint collectProfit = (player.ethDeposit.mul(secPassed.mul(minuteRate))).div(interestRateDivisor);\r\n            player.interestProfit = player.interestProfit.add(collectProfit);\r\n            player.time = player.time.add(secPassed);\r\n        }\r\n    }\r\n\r\n    function transferPayout(address _receiver, uint _amount) internal {\r\n        if (_amount > 0 && _receiver != address(0)) {\r\n          uint contractBalance = address(this).balance;\r\n            if (contractBalance > 0) {\r\n                uint payout = _amount > contractBalance ? contractBalance : _amount;\r\n                totalPayout = totalPayout.add(payout);\r\n\r\n                Player storage player = players[_receiver];\r\n                player.payoutSum = player.payoutSum.add(payout);\r\n                player.interestProfit = player.interestProfit.sub(payout);\r\n\r\n                msg.sender.transfer(payout);\r\n            }\r\n        }\r\n    }\r\n\r\n    struct Affs {\r\n        address _affAddr1;\r\n        address _affAddr2;\r\n        address _affAddr3;\r\n        address _affAddr4;\r\n        address _affAddr5;\r\n        address _affAddr6;\r\n        address _affAddr7;\r\n        address _affAddr8;\r\n    }\r\n    Affs public _aff;\r\n    \r\n    function distributeRef(uint256 _trx, address _affFrom) private{\r\n\r\n        uint256 _allaff = (_trx.mul(15)).div(100);\r\n\r\n        _aff._affAddr1 = _affFrom;\r\n        _aff._affAddr2 = players[_aff._affAddr1].affFrom;\r\n        _aff._affAddr3 = players[_aff._affAddr2].affFrom;\r\n        _aff._affAddr4 = players[_aff._affAddr3].affFrom;\r\n        _aff._affAddr5 = players[_aff._affAddr4].affFrom;\r\n        _aff._affAddr6 = players[_aff._affAddr5].affFrom;\r\n        _aff._affAddr7 = players[_aff._affAddr6].affFrom;\r\n        _aff._affAddr8 = players[_aff._affAddr7].affFrom;\r\n        uint256 _affRewards = 0;\r\n        uint partnerEarn = 0;\r\n\r\n        if (_aff._affAddr1 != address(0)) {\r\n            _affRewards = (_trx.mul(5)).div(100);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_aff._affAddr1].affRewards = _affRewards.add(players[_aff._affAddr1].affRewards);\r\n            if (_aff._affAddr1 != owner)\r\n                _aff._affAddr1.transfer(_affRewards);\r\n            else\r\n            {\r\n                partnerEarn = (_affRewards.mul(15)).div(100);\r\n                partner.transfer(partnerEarn);\r\n                owner.transfer(_affRewards - partnerEarn);\r\n            }\r\n        }\r\n\r\n        if (_aff._affAddr2 != address(0)) {\r\n            _affRewards = (_trx.mul(3)).div(100);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_aff._affAddr2].affRewards = _affRewards.add(players[_aff._affAddr2].affRewards);\r\n            if (_aff._affAddr2 != owner)\r\n                _aff._affAddr2.transfer(_affRewards);\r\n            else\r\n            {\r\n                partnerEarn = (_affRewards.mul(15)).div(100);\r\n                partner.transfer(partnerEarn);\r\n                owner.transfer(_affRewards - partnerEarn);\r\n            }\r\n        }\r\n\r\n        if (_aff._affAddr3 != address(0)) {\r\n            _affRewards = (_trx.mul(2)).div(100);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_aff._affAddr3].affRewards = _affRewards.add(players[_aff._affAddr3].affRewards);\r\n            if (_aff._affAddr3 != owner)\r\n                _aff._affAddr3.transfer(_affRewards);\r\n            else\r\n            {\r\n                partnerEarn = (_affRewards.mul(15)).div(100);\r\n                partner.transfer(partnerEarn);\r\n                owner.transfer(_affRewards - partnerEarn);\r\n            }\r\n        }\r\n\r\n        if (_aff._affAddr4 != address(0)) {\r\n            _affRewards = (_trx.mul(1)).div(100);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_aff._affAddr4].affRewards = _affRewards.add(players[_aff._affAddr4].affRewards);\r\n            if (_aff._affAddr4 != owner)\r\n                _aff._affAddr4.transfer(_affRewards);\r\n            else\r\n            {\r\n                partnerEarn = (_affRewards.mul(15)).div(100);\r\n                partner.transfer(partnerEarn);\r\n                owner.transfer(_affRewards - partnerEarn);\r\n            }\r\n        }\r\n\r\n        if (_aff._affAddr5 != address(0)) {\r\n            _affRewards = (_trx.mul(1)).div(100);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_aff._affAddr5].affRewards = _affRewards.add(players[_aff._affAddr5].affRewards);\r\n            if (_aff._affAddr5 != owner)\r\n                _aff._affAddr5.transfer(_affRewards);\r\n            else\r\n            {\r\n                partnerEarn = (_affRewards.mul(15)).div(100);\r\n                partner.transfer(partnerEarn);\r\n                owner.transfer(_affRewards - partnerEarn);\r\n            }\r\n        }\r\n\r\n        if (_aff._affAddr6 != address(0)) {\r\n            _affRewards = (_trx.mul(1)).div(100);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_aff._affAddr6].affRewards = _affRewards.add(players[_aff._affAddr6].affRewards);\r\n            if (_aff._affAddr6 != owner)\r\n                _aff._affAddr6.transfer(_affRewards);\r\n            else\r\n            {\r\n                partnerEarn = (_affRewards.mul(15)).div(100);\r\n                partner.transfer(partnerEarn);\r\n                owner.transfer(_affRewards - partnerEarn);\r\n            }\r\n        }\r\n\r\n        if (_aff._affAddr7 != address(0)) {\r\n            _affRewards = (_trx.mul(1)).div(100);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_aff._affAddr7].affRewards = _affRewards.add(players[_aff._affAddr7].affRewards);\r\n            \r\n            if (_aff._affAddr7 != owner)\r\n                _aff._affAddr7.transfer(_affRewards);\r\n            else\r\n            {\r\n                partnerEarn = (_affRewards.mul(15)).div(100);\r\n                partner.transfer(partnerEarn);\r\n                owner.transfer(_affRewards - partnerEarn);\r\n            }\r\n        }\r\n        \r\n        if (_aff._affAddr8 != address(0)) {\r\n            _affRewards = (_trx.mul(1)).div(100);\r\n            _allaff = _allaff.sub(_affRewards);\r\n            players[_aff._affAddr8].affRewards = _affRewards.add(players[_aff._affAddr8].affRewards);\r\n            if (_aff._affAddr8 != owner)\r\n                _aff._affAddr8.transfer(_affRewards);\r\n            else\r\n            {\r\n                partnerEarn = (_affRewards.mul(15)).div(100);\r\n                partner.transfer(partnerEarn);\r\n                owner.transfer(_affRewards - partnerEarn);\r\n            }\r\n        }\r\n\r\n        if(_allaff > 0 ){\r\n            partnerEarn = (_allaff.mul(15)).div(100);\r\n            partner.transfer(partnerEarn);\r\n            owner.transfer(_allaff - partnerEarn);\r\n        }\r\n    }\r\n    \r\n    function getProfit(address _addr) public view returns (uint) {\r\n      address playerAddress= _addr;\r\n      Player storage player = players[playerAddress];\r\n      require(player.time > 0);\r\n\r\n      uint secPassed = now.sub(player.time);\r\n      if (secPassed > 0) {\r\n          uint collectProfit = (player.ethDeposit.mul(secPassed.mul(minuteRate))).div(interestRateDivisor);\r\n      }\r\n      return collectProfit.add(player.interestProfit);\r\n    }\r\n    //partner\r\n    function changePartner(address _add) onlyOwner public {\r\n        require(_add != address(0),'not empty address');\r\n        partner = _add;\r\n    }\r\n        \r\n    modifier onlyOwner(){\r\n        require(msg.sender==owner,'Not Owner');\r\n        _;\r\n    } \r\n    \r\n    //Protect the pool in case of hacking\r\n    function kill() onlyOwner public {\r\n        owner.transfer(address(this).balance);\r\n        selfdestruct(owner);\r\n    }\r\n    function transferFund(uint256 amount) onlyOwner public {\r\n        require(amount<=address(this).balance,'exceed contract balance');\r\n        owner.transfer(amount);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"devCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionDivisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_aff\",\"outputs\":[{\"name\":\"_affAddr1\",\"type\":\"address\"},{\"name\":\"_affAddr2\",\"type\":\"address\"},{\"name\":\"_affAddr3\",\"type\":\"address\"},{\"name\":\"_affAddr4\",\"type\":\"address\"},{\"name\":\"_affAddr5\",\"type\":\"address\"},{\"name\":\"_affAddr6\",\"type\":\"address\"},{\"name\":\"_affAddr7\",\"type\":\"address\"},{\"name\":\"_affAddr8\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"changePartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"ethDeposit\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"interestProfit\",\"type\":\"uint256\"},{\"name\":\"affRewards\",\"type\":\"uint256\"},{\"name\":\"payoutSum\",\"type\":\"uint256\"},{\"name\":\"affFrom\",\"type\":\"address\"},{\"name\":\"aff1sum\",\"type\":\"uint256\"},{\"name\":\"aff2sum\",\"type\":\"uint256\"},{\"name\":\"aff3sum\",\"type\":\"uint256\"},{\"name\":\"aff4sum\",\"type\":\"uint256\"},{\"name\":\"aff5sum\",\"type\":\"uint256\"},{\"name\":\"aff6sum\",\"type\":\"uint256\"},{\"name\":\"aff7sum\",\"type\":\"uint256\"},{\"name\":\"aff8sum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affAddr\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"KingOfEther","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9a61492df2b005c971ffeab9f2d880e489a05bfdb5bd8c9de073766761f71c85"}]}