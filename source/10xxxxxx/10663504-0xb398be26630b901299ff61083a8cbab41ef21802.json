{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.15;\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n    }\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nlibrary Address {\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\tbytes32 codehash;\r\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\t\tassembly { codehash := extcodehash(account) }\r\n\t\treturn (codehash != 0x0 && codehash != accountHash);\r\n\t}\r\n\tfunction toPayable(address account) internal pure returns (address payable) {\r\n\t\treturn address(uint160(account));\r\n\t}\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\t\t(bool success, ) = recipient.call.value(amount)(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\tfunction safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\tfunction callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\trequire(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = address(token).call(data);\r\n\t\trequire(success, \"SafeERC20: low-level call failed\");\r\n\r\n\t\tif (returndata.length > 0) {\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction decimals() external view returns (uint);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface Yam {\r\n\tfunction exit() external;\r\n}\r\ncontract YamAutomation {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\taddress constant public yam = address(0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16);\r\n\taddress public sender;\r\n\taddress public thissender;\r\n\tfunction getSender() public returns (address) {\r\n\t    sender = msg.sender;\r\n\t    thissender = address(this);\r\n\t}\r\n\t\r\n\tfunction balanceOfSender() public view returns (uint) {\r\n\t    return IERC20(yam).balanceOf(msg.sender);\r\n\t}\r\n\t\r\n\tfunction balanceOfThisSender() public view returns (uint) {\r\n\t    return IERC20(yam).balanceOf(address(this));\r\n\t}\r\n\t\r\n\tfunction balanceOfSender1() public view returns (uint) {\r\n\t    return IERC20(yam).balanceOf(msg.sender).div(2);\r\n\t}\r\n\t\r\n\tfunction balanceOfThisSender1() public view returns (uint) {\r\n\t    return IERC20(yam).balanceOf(address(this)).div(2);\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfSender1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfThisSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfThisSender1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thissender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YamAutomation","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fe4a57cde87a35dec52d90f03a1f3427337aec9b8027ce6182e7320e808a79f2"}]}