{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/TrueCurrencies/TrueCoinReceiver.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\ncontract TrueCoinReceiver {\r\n    function tokenFallback( address from, uint256 value ) external;\r\n}\r\n\r\n// File: contracts/TrueReward/FinancialOpportunity.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n/**\r\n * @title FinancialOpportunity\r\n * @dev Interface for third parties to implement financial opportunities\r\n *\r\n * -- Overview --\r\n * The goal of this contract is to allow anyone to create an opportunity\r\n * to earn interest on TUSD. deposit() \"mints\" yTUSD whcih is redeemable\r\n * for some amount of TUSD. TrueUSD wraps this contractwith TrustToken\r\n * Assurance, which provides protection from bugs and system design flaws\r\n * TUSD is a compliant stablecoin, therefore we do not allow transfers of\r\n * yTUSD, thus there are no transfer functions\r\n *\r\n * -- tokenValue() --\r\n * This function returns the value in TUSD of 1 yTUSD\r\n * This value should never decrease\r\n *\r\n * -- TUSD vs yTUSD --\r\n * yTUSD represents a fixed value which is redeemable for some amount of TUSD\r\n * Think of yTUSD like cTUSD, where cTokens are minted and increase in value versus\r\n * the underlying asset as interest is accrued\r\n *\r\n * -- totalSupply() --\r\n * This function returns the total supply of yTUSD issued by this contract\r\n * It is important to track this value accuratley and add/deduct the correct\r\n * amount on deposit/redemptions\r\n *\r\n * -- Assumptions --\r\n * - tokenValue can never decrease\r\n * - total TUSD owed to depositors = tokenValue() * totalSupply()\r\n */\r\ninterface FinancialOpportunity {\r\n\r\n    /**\r\n     * @dev Returns total supply of yTUSD in this contract\r\n     *\r\n     * @return total supply of yTUSD in this contract\r\n    **/\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Exchange rate between TUSD and yTUSD\r\n     *\r\n     * tokenValue should never decrease\r\n     *\r\n     * @return TUSD / yTUSD price ratio\r\n     */\r\n    function tokenValue() external view returns(uint);\r\n\r\n    /**\r\n     * @dev deposits TrueUSD and returns yTUSD minted\r\n     *\r\n     * We can think of deposit as a minting function which\r\n     * will increase totalSupply of yTUSD based on the deposit\r\n     *\r\n     * @param from account to transferFrom\r\n     * @param amount amount in TUSD to deposit\r\n     * @return yTUSD minted from this deposit\r\n     */\r\n    function deposit(address from, uint amount) external returns(uint);\r\n\r\n    /**\r\n     * @dev Redeem yTUSD for TUSD and withdraw to account\r\n     *\r\n     * This function should use tokenValue to calculate\r\n     * how much TUSD is owed. This function should burn yTUSD\r\n     * after redemption\r\n     *\r\n     * This function must return value in TUSD\r\n     *\r\n     * @param to account to transfer TUSD for\r\n     * @param amount amount in TUSD to withdraw from finOp\r\n     * @return TUSD amount returned from this transaction\r\n     */\r\n    function redeem(address to, uint amount) external returns(uint);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @trusttoken/registry/contracts/Registry.sol\r\n\r\npragma solidity ^0.5.13;\r\n\r\n\r\ninterface RegistryClone {\r\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) external;\r\n}\r\n\r\ncontract Registry {\r\n    struct AttributeData {\r\n        uint256 value;\r\n        bytes32 notes;\r\n        address adminAddr;\r\n        uint256 timestamp;\r\n    }\r\n    \r\n    // never remove any storage variables\r\n    address public owner;\r\n    address public pendingOwner;\r\n    bool initialized;\r\n\r\n    // Stores arbitrary attributes for users. An example use case is an IERC20\r\n    // token that requires its users to go through a KYC/AML check - in this case\r\n    // a validator can set an account's \"hasPassedKYC/AML\" attribute to 1 to indicate\r\n    // that account can use the token. This mapping stores that value (1, in the\r\n    // example) as well as which validator last set the value and at what time,\r\n    // so that e.g. the check can be renewed at appropriate intervals.\r\n    mapping(address => mapping(bytes32 => AttributeData)) attributes;\r\n    // The logic governing who is allowed to set what attributes is abstracted as\r\n    // this accessManager, so that it may be replaced by the owner as needed\r\n    bytes32 constant WRITE_PERMISSION = keccak256(\"canWriteTo-\");\r\n    mapping(bytes32 => RegistryClone[]) subscribers;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event SetAttribute(address indexed who, bytes32 attribute, uint256 value, bytes32 notes, address indexed adminAddr);\r\n    event SetManager(address indexed oldManager, address indexed newManager);\r\n    event StartSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n    event StopSubscription(bytes32 indexed attribute, RegistryClone indexed subscriber);\r\n\r\n    // Allows a write if either a) the writer is that Registry's owner, or\r\n    // b) the writer is writing to attribute foo and that writer already has\r\n    // the canWriteTo-foo attribute set (in that same Registry)\r\n    function confirmWrite(bytes32 _attribute, address _admin) internal view returns (bool) {\r\n        return (_admin == owner || hasAttribute(_admin, keccak256(abi.encodePacked(WRITE_PERMISSION ^ _attribute))));\r\n    }\r\n\r\n    // Writes are allowed only if the accessManager approves\r\n    function setAttribute(address _who, bytes32 _attribute, uint256 _value, bytes32 _notes) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, _notes, msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, _notes, msg.sender);\r\n\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    function subscribe(bytes32 _attribute, RegistryClone _syncer) external onlyOwner {\r\n        subscribers[_attribute].push(_syncer);\r\n        emit StartSubscription(_attribute, _syncer);\r\n    }\r\n\r\n    function unsubscribe(bytes32 _attribute, uint256 _index) external onlyOwner {\r\n        uint256 length = subscribers[_attribute].length;\r\n        require(_index < length);\r\n        emit StopSubscription(_attribute, subscribers[_attribute][_index]);\r\n        subscribers[_attribute][_index] = subscribers[_attribute][length - 1];\r\n        subscribers[_attribute].length = length - 1;\r\n    }\r\n\r\n    function subscriberCount(bytes32 _attribute) public view returns (uint256) {\r\n        return subscribers[_attribute].length;\r\n    }\r\n\r\n    function setAttributeValue(address _who, bytes32 _attribute, uint256 _value) public {\r\n        require(confirmWrite(_attribute, msg.sender));\r\n        attributes[_who][_attribute] = AttributeData(_value, \"\", msg.sender, block.timestamp);\r\n        emit SetAttribute(_who, _attribute, _value, \"\", msg.sender);\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> 0) {\r\n            targets[index].syncAttributeValue(_who, _attribute, _value);\r\n        }\r\n    }\r\n\r\n    // Returns true if the uint256 value stored for this attribute is non-zero\r\n    function hasAttribute(address _who, bytes32 _attribute) public view returns (bool) {\r\n        return attributes[_who][_attribute].value != 0;\r\n    }\r\n\r\n\r\n    // Returns the exact value of the attribute, as well as its metadata\r\n    function getAttribute(address _who, bytes32 _attribute) public view returns (uint256, bytes32, address, uint256) {\r\n        AttributeData memory data = attributes[_who][_attribute];\r\n        return (data.value, data.notes, data.adminAddr, data.timestamp);\r\n    }\r\n\r\n    function getAttributeValue(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].value;\r\n    }\r\n\r\n    function getAttributeAdminAddr(address _who, bytes32 _attribute) public view returns (address) {\r\n        return attributes[_who][_attribute].adminAddr;\r\n    }\r\n\r\n    function getAttributeTimestamp(address _who, bytes32 _attribute) public view returns (uint256) {\r\n        return attributes[_who][_attribute].timestamp;\r\n    }\r\n\r\n    function syncAttribute(bytes32 _attribute, uint256 _startIndex, address[] calldata _addresses) external {\r\n        RegistryClone[] storage targets = subscribers[_attribute];\r\n        uint256 index = targets.length;\r\n        while (index --> _startIndex) {\r\n            RegistryClone target = targets[index];\r\n            for (uint256 i = _addresses.length; i --> 0; ) {\r\n                address who = _addresses[i];\r\n                target.syncAttributeValue(who, _attribute, attributes[who][_attribute].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function reclaimEther(address payable _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/InstantiatableOwnable.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n * @title InstantiatableOwnable\r\n * @dev The InstantiatableOwnable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract InstantiatableOwnable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The InstantiatableOwnable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/Claimable.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the InstantiatableOwnable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is InstantiatableOwnable {\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/BalanceSheet.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n// A wrapper around the balanceOf mapping.\r\ncontract BalanceSheet is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].add(_value);\r\n    }\r\n\r\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = balanceOf[_addr].sub(_value);\r\n    }\r\n\r\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balanceOf[_addr] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/AllowanceSheet.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n// A wrapper around the allowanceOf mapping.\r\ncontract AllowanceSheet is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowanceOf;\r\n\r\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);\r\n    }\r\n\r\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\r\n    }\r\n\r\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowanceOf[_tokenHolder][_spender] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/ProxyStorage.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nDefines the storage layout of the token implementation contract. Any newly declared\r\nstate variables in future upgrades should be appended to the bottom. Never remove state variables\r\nfrom this list\r\n */\r\ncontract ProxyStorage {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    bool initialized;\r\n\r\n    BalanceSheet balances_Deprecated;\r\n    AllowanceSheet allowances_Deprecated;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    bool private paused_Deprecated = false;\r\n    address private globalPause_Deprecated;\r\n\r\n    uint256 public burnMin = 0;\r\n    uint256 public burnMax = 0;\r\n\r\n    Registry public registry;\r\n\r\n    string name_Deprecated;\r\n    string symbol_Deprecated;\r\n\r\n    uint[] gasRefundPool_Deprecated;\r\n    uint256 private redemptionAddressCount_Deprecated;\r\n    uint256 public minimumGasPriceForFutureRefunds;\r\n\r\n    mapping (address => uint256) _balanceOf;\r\n    mapping (address => mapping (address => uint256)) _allowance;\r\n    mapping (bytes32 => mapping (address => uint256)) attributes;\r\n\r\n    // reward token storage\r\n    mapping(address => FinancialOpportunity) finOps;\r\n    mapping(address => mapping(address => uint256)) finOpBalances;\r\n    mapping(address => uint256) finOpSupply;\r\n\r\n    // true reward allocation\r\n    // proportion: 1000 = 100%\r\n    struct RewardAllocation { uint proportion; address finOp; }\r\n    mapping(address => RewardAllocation[]) _rewardDistribution;\r\n    uint256 maxRewardProportion = 1000;\r\n\r\n    /* Additionally, we have several keccak-based storage locations.\r\n     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\r\n     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\r\n     * A preimage collision can be used to attack the contract by treating one storage location as another,\r\n     * which would always be a critical issue.\r\n     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\r\n     *******************************************************************************************************\r\n     ** length     input                                                         usage\r\n     *******************************************************************************************************\r\n     ** 19         \"trueXXX.proxy.owner\"                                         Proxy Owner\r\n     ** 27         \"trueXXX.pending.proxy.owner\"                                 Pending Proxy Owner\r\n     ** 28         \"trueXXX.proxy.implementation\"                                Proxy Implementation\r\n     ** 32         uint256(11)                                                   gasRefundPool_Deprecated\r\n     ** 64         uint256(address),uint256(14)                                  balanceOf\r\n     ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance\r\n     ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes\r\n    **/\r\n}\r\n\r\n// File: contracts/TrueCurrencies/HasOwner.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n * @title HasOwner\r\n * @dev The HasOwner contract is a copy of Claimable Contract by Zeppelin.\r\n and provides basic authorization control functions. Inherits storage layout of\r\n ProxyStorage.\r\n */\r\ncontract HasOwner is ProxyStorage {\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n    * @dev sets the original `owner` of the contract to the sender\r\n    * at construction. Must then be reinitialized\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/ReclaimerToken.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\ncontract ReclaimerToken is HasOwner {\r\n    /**\r\n    *@dev send all eth balance in the contract to another address\r\n    */\r\n    function reclaimEther(address payable _to) external onlyOwner {\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n    *@dev send all token balance of an arbitary erc20 token\r\n    in the contract to another address\r\n    */\r\n    function reclaimToken(IERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.transfer(_to, balance);\r\n    }\r\n\r\n    /**\r\n    *@dev allows owner of the contract to gain ownership of any contract that the contract currently owns\r\n    */\r\n    function reclaimContract(InstantiatableOwnable _ownable) external onlyOwner {\r\n        _ownable.transferOwnership(owner);\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/InitializableOwnable.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n * @title InitializableOwnable\r\n * @dev The InitializableOwnable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract InitializableOwnable {\r\n    address public owner;\r\n    bool configured = false;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The InitializableOwnable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function _configure() internal {\r\n        require(!configured);\r\n        owner = msg.sender;\r\n        configured = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/InitializableClaimable.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n/**\r\n * @title InitializableOwnable\r\n * @dev Extension for the InstantiatableOwnable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract InitializableClaimable is InitializableOwnable {\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/ModularBasicToken.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n// Fork of OpenZeppelin's BasicToken\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract ModularBasicToken is HasOwner {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address _who) public view returns (uint256) {\r\n        return _getBalance(_who);\r\n    }\r\n\r\n    function _getBalance(address _who) internal view returns (uint256) {\r\n        return _balanceOf[_who];\r\n    }\r\n\r\n    function _addBalance(address _who, uint256 _value) internal returns (uint256 priorBalance) {\r\n        priorBalance = _balanceOf[_who];\r\n        _balanceOf[_who] = priorBalance.add(_value);\r\n    }\r\n\r\n    function _subBalance(address _who, uint256 _value) internal returns (uint256 result) {\r\n        result = _balanceOf[_who].sub(_value);\r\n        _balanceOf[_who] = result;\r\n    }\r\n\r\n    function _setBalance(address _who, uint256 _value) internal {\r\n        _balanceOf[_who] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/ModularStandardToken.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ModularStandardToken is ModularBasicToken {\r\n    using SafeMath for uint256;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    uint256 constant INFINITE_ALLOWANCE = 0xfe00000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        _approveAllArgs(_spender, _value, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _approveAllArgs(\r\n        address _spender,\r\n        uint256 _value,\r\n        address _tokenHolder\r\n    ) internal {\r\n        _setAllowance(_tokenHolder, _spender, _value);\r\n        emit Approval(_tokenHolder, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address _spender, uint256 _addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _increaseAllowanceAllArgs(_spender, _addedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _increaseAllowanceAllArgs(\r\n        address _spender,\r\n        uint256 _addedValue,\r\n        address _tokenHolder\r\n    ) internal {\r\n        _addAllowance(_tokenHolder, _spender, _addedValue);\r\n        emit Approval(\r\n            _tokenHolder,\r\n            _spender,\r\n            _getAllowance(_tokenHolder, _spender)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _decreaseAllowanceAllArgs(_spender, _subtractedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _decreaseAllowanceAllArgs(\r\n        address _spender,\r\n        uint256 _subtractedValue,\r\n        address _tokenHolder\r\n    ) internal {\r\n        uint256 oldValue = _getAllowance(_tokenHolder, _spender);\r\n        uint256 newValue;\r\n        if (_subtractedValue > oldValue) {\r\n            newValue = 0;\r\n        } else {\r\n            newValue = oldValue - _subtractedValue;\r\n        }\r\n        _setAllowance(_tokenHolder, _spender, newValue);\r\n        emit Approval(_tokenHolder, _spender, newValue);\r\n    }\r\n\r\n    function allowance(address _who, address _spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _getAllowance(_who, _spender);\r\n    }\r\n\r\n    function _getAllowance(address _who, address _spender)\r\n        internal\r\n        view\r\n        returns (uint256 value)\r\n    {\r\n        return _allowance[_who][_spender];\r\n    }\r\n\r\n    function _addAllowance(address _who, address _spender, uint256 _value)\r\n        internal\r\n    {\r\n        _allowance[_who][_spender] = _allowance[_who][_spender].add(_value);\r\n    }\r\n\r\n    function _subAllowance(address _who, address _spender, uint256 _value)\r\n        internal\r\n        returns (uint256 newAllowance)\r\n    {\r\n        newAllowance = _allowance[_who][_spender].sub(_value);\r\n        if (newAllowance < INFINITE_ALLOWANCE) {\r\n            _allowance[_who][_spender] = newAllowance;\r\n        }\r\n    }\r\n\r\n    function _setAllowance(address _who, address _spender, uint256 _value)\r\n        internal\r\n    {\r\n        _allowance[_who][_spender] = _value;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/modularERC20/ModularBurnableToken.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ModularBurnableToken is ModularStandardToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n    event Mint(address indexed to, uint256 value);\r\n    uint256 constant CENT = 10 ** 16;\r\n\r\n    function burn(uint256 _value) external {\r\n        _burnAllArgs(msg.sender, _value - _value % CENT);\r\n    }\r\n\r\n    function _burnAllArgs(address _from, uint256 _value) internal {\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        _subBalance(_from, _value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_from, _value);\r\n        emit Transfer(_from, address(0), _value);\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/BurnableTokenWithBounds.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n * @title Burnable Token WithBounds\r\n * @dev Burning functions as redeeming money from the system. The platform will keep track of who burns coins,\r\n * and will send them back the equivalent amount of money (rounded down to the nearest cent).\r\n */\r\ncontract BurnableTokenWithBounds is ModularBurnableToken {\r\n\r\n    event SetBurnBounds(uint256 newMin, uint256 newMax);\r\n\r\n    function _burnAllArgs(address _burner, uint256 _value) internal {\r\n        require(_value >= burnMin, \"below min burn bound\");\r\n        require(_value <= burnMax, \"exceeds max burn bound\");\r\n        super._burnAllArgs(_burner, _value);\r\n    }\r\n\r\n    //Change the minimum and maximum amount that can be burned at once. Burning\r\n    //may be disabled by setting both to 0 (this will not be done under normal\r\n    //operation, but we can't add checks to disallow it without losing a lot of\r\n    //flexibility since burning could also be as good as disabled\r\n    //by setting the minimum extremely high, and we don't want to lock\r\n    //in any particular cap for the minimum)\r\n    function setBurnBounds(uint256 _min, uint256 _max) external onlyOwner {\r\n        require(_min <= _max, \"min > max\");\r\n        burnMin = _min;\r\n        burnMax = _max;\r\n        emit SetBurnBounds(_min, _max);\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/GasRefundToken.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n@title Gas Refund Token\r\nAllow any user to sponsor gas refunds for transfer and mints. Utilitzes the gas refund mechanism in EVM\r\nEach time an non-empty storage slot is set to 0, evm refund 15,000 to the sender\r\nof the transaction.\r\n*/\r\ncontract GasRefundToken is ProxyStorage {\r\n\r\n    /**\r\n      A buffer of \"Sheep\" runs from 0xffff...fffe down\r\n      They suicide when you call them, if you are their parent\r\n    */\r\n\r\n    function sponsorGas2() external {\r\n        /**\r\n        Deploy (9 bytes)\r\n          PC Assembly       Opcodes                                       Stack\r\n          00 PUSH1(27)      60 1b                                         1b\r\n          02 DUP1           80                                            1b 1b\r\n          03 PUSH1(9)       60 09                                         1b 1b 09\r\n          05 RETURNDATASIZE 3d                                            1b 1b 09 00\r\n          06 CODECOPY       39                                            1b\r\n          07 RETURNDATASIZE 3d                                            1b 00\r\n          08 RETURN         f3\r\n        Sheep (27 bytes = 3 + 20 + 4)\r\n          PC Assembly       Opcodes                                       Stack\r\n          00 RETURNDATASIZE 3d                                            00\r\n          01 CALLER         33                                            00 caller\r\n          02 PUSH20(me)     73 memememememememememememememememememememe   00 caller me\r\n          17 XOR            18                                            00 invalid\r\n          18 PC             58                                            00 invalid 18\r\n          19 JUMPI          57                                            00\r\n          1a SELFDESTRUCT   ff\r\n        */\r\n        assembly {\r\n            mstore(0, or(0x601b8060093d393df33d33730000000000000000000000000000000000000000, address))\r\n            mstore(32,   0x185857ff00000000000000000000000000000000000000000000000000000000)\r\n            let offset := sload(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            let location := sub(0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, offset)\r\n            sstore(location, create(0, 0, 0x24))\r\n            location := sub(location, 1)\r\n            sstore(location, create(0, 0, 0x24))\r\n            location := sub(location, 1)\r\n            sstore(location, create(0, 0, 0x24))\r\n            sstore(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, add(offset, 3))\r\n        }\r\n    }\r\n\r\n    /**\r\n    @dev refund 39,000 gas\r\n    @dev costs slightly more than 16,100 gas\r\n    */\r\n    function gasRefund39() internal {\r\n        assembly {\r\n            let offset := sload(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            if gt(offset, 0) {\r\n              let location := sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff,offset)\r\n              sstore(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, sub(offset, 1))\r\n              let sheep := sload(location)\r\n              pop(call(gas, sheep, 0, 0, 0, 0, 0))\r\n              sstore(location, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function sponsorGas() external {\r\n        uint256 refundPrice = minimumGasPriceForFutureRefunds;\r\n        require(refundPrice > 0);\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            let result := add(offset, 9)\r\n            sstore(0xfffff, result)\r\n            let position := add(offset, 0x100000)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n            position := add(position, 1)\r\n            sstore(position, refundPrice)\r\n        }\r\n    }\r\n\r\n    function minimumGasPriceForRefund() public view returns (uint256 result) {\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            let location := add(offset, 0xfffff)\r\n            result := add(sload(location), 1)\r\n        }\r\n    }\r\n\r\n    /**\r\n    @dev refund 30,000 gas\r\n    @dev costs slightly more than 15,400 gas\r\n    */\r\n    function gasRefund30() internal {\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            if gt(offset, 1) {\r\n                let location := add(offset, 0xfffff)\r\n                if gt(gasprice,sload(location)) {\r\n                    sstore(location, 0)\r\n                    location := sub(location, 1)\r\n                    sstore(location, 0)\r\n                    sstore(0xfffff, sub(offset, 2))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    @dev refund 15,000 gas\r\n    @dev costs slightly more than 10,200 gas\r\n    */\r\n    function gasRefund15() internal {\r\n        assembly {\r\n            let offset := sload(0xfffff)\r\n            if gt(offset, 1) {\r\n                let location := add(offset, 0xfffff)\r\n                if gt(gasprice,sload(location)) {\r\n                    sstore(location, 0)\r\n                    sstore(0xfffff, sub(offset, 1))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    *@dev Return the remaining sponsored gas slots\r\n    */\r\n    function remainingGasRefundPool() public view returns (uint length) {\r\n        assembly {\r\n            length := sload(0xfffff)\r\n        }\r\n    }\r\n\r\n    function gasRefundPool(uint256 _index) public view returns (uint256 gasPrice) {\r\n        assembly {\r\n            gasPrice := sload(add(0x100000, _index))\r\n        }\r\n    }\r\n\r\n    bytes32 constant CAN_SET_FUTURE_REFUND_MIN_GAS_PRICE = \"canSetFutureRefundMinGasPrice\";\r\n\r\n    function setMinimumGasPriceForFutureRefunds(uint256 _minimumGasPriceForFutureRefunds) public {\r\n        require(registry.hasAttribute(msg.sender, CAN_SET_FUTURE_REFUND_MIN_GAS_PRICE));\r\n        minimumGasPriceForFutureRefunds = _minimumGasPriceForFutureRefunds;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/CompliantDepositTokenWithHook.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CompliantDepositTokenWithHook is ReclaimerToken, RegistryClone, BurnableTokenWithBounds, GasRefundToken {\r\n\r\n    bytes32 constant IS_REGISTERED_CONTRACT = \"isRegisteredContract\";\r\n    bytes32 constant IS_DEPOSIT_ADDRESS = \"isDepositAddress\";\r\n    uint256 constant REDEMPTION_ADDRESS_COUNT = 0x100000;\r\n    bytes32 constant IS_BLACKLISTED = \"isBlacklisted\";\r\n\r\n    function canBurn() internal pure returns (bytes32);\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _transferAllArgs(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        _transferFromAllArgs(_from, _to, _value, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _burnFromAllowanceAllArgs(address _from, address _to, uint256 _value, address _spender) internal {\r\n        _requireCanTransferFrom(_spender, _from, _to);\r\n        _requireOnlyCanBurn(_to);\r\n        require(_value >= burnMin, \"below min burn bound\");\r\n        require(_value <= burnMax, \"exceeds max burn bound\");\r\n        if (0 == _subBalance(_from, _value)) {\r\n            if (0 != _subAllowance(_from, _spender, _value)) {\r\n                gasRefund15();\r\n            }\r\n            // else no refund\r\n        } else {\r\n            if (0 == _subAllowance(_from, _spender, _value)) {\r\n                gasRefund15();\r\n            } else {\r\n                gasRefund39();\r\n            }\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_to, _value);\r\n        emit Transfer(_to, address(0), _value);\r\n    }\r\n\r\n    function _burnFromAllArgs(address _from, address _to, uint256 _value) internal {\r\n        _requireCanTransfer(_from, _to);\r\n        _requireOnlyCanBurn(_to);\r\n        require(_value >= burnMin, \"below min burn bound\");\r\n        require(_value <= burnMax, \"exceeds max burn bound\");\r\n        if (0 == _subBalance(_from, _value)) {\r\n            gasRefund15();\r\n        } else {\r\n            gasRefund30();\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_to, _value);\r\n        emit Transfer(_to, address(0), _value);\r\n    }\r\n\r\n    function _transferFromAllArgs(address _from, address _to, uint256 _value, address _spender) internal {\r\n        if (uint256(_to) < REDEMPTION_ADDRESS_COUNT) {\r\n            _value -= _value % CENT;\r\n            _burnFromAllowanceAllArgs(_from, _to, _value, _spender);\r\n        } else {\r\n            bool hasHook;\r\n            address originalTo = _to;\r\n            (_to, hasHook) = _requireCanTransferFrom(_spender, _from, _to);\r\n            if (0 == _addBalance(_to, _value)) {\r\n                if (0 == _subAllowance(_from, _spender, _value)) {\r\n                    if (0 != _subBalance(_from, _value)) {\r\n                        gasRefund30();\r\n                    }\r\n                    // else do not refund\r\n                } else {\r\n                    if (0 == _subBalance(_from, _value)) {\r\n                        gasRefund30();\r\n                    } else {\r\n                        gasRefund39();\r\n                    }\r\n                }\r\n            } else {\r\n                if (0 == _subAllowance(_from, _spender, _value)) {\r\n                    if (0 != _subBalance(_from, _value)) {\r\n                        gasRefund15();\r\n                    }\r\n                    // else do not refund\r\n                } else {\r\n                    if (0 == _subBalance(_from, _value)) {\r\n                        gasRefund15();\r\n                    } else {\r\n                        gasRefund39();\r\n                    }\r\n                }\r\n\r\n            }\r\n            emit Transfer(_from, originalTo, _value);\r\n            if (originalTo != _to) {\r\n                emit Transfer(originalTo, _to, _value);\r\n                if (hasHook) {\r\n                    TrueCoinReceiver(_to).tokenFallback(originalTo, _value);\r\n                }\r\n            } else {\r\n                if (hasHook) {\r\n                    TrueCoinReceiver(_to).tokenFallback(_from, _value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferAllArgs(address _from, address _to, uint256 _value) internal {\r\n        if (uint256(_to) < REDEMPTION_ADDRESS_COUNT) {\r\n            _value -= _value % CENT;\r\n            _burnFromAllArgs(_from, _to, _value);\r\n        } else {\r\n            bool hasHook;\r\n            address finalTo;\r\n            (finalTo, hasHook) = _requireCanTransfer(_from, _to);\r\n            if (0 == _subBalance(_from, _value)) {\r\n                if (0 == _addBalance(finalTo, _value)) {\r\n                    gasRefund30();\r\n                }\r\n                // else do not refund\r\n            } else {\r\n                if (0 == _addBalance(finalTo, _value)) {\r\n                    gasRefund39();\r\n                } else {\r\n                    gasRefund30();\r\n                }\r\n            }\r\n            emit Transfer(_from, _to, _value);\r\n            if (finalTo != _to) {\r\n                emit Transfer(_to, finalTo, _value);\r\n                if (hasHook) {\r\n                    TrueCoinReceiver(finalTo).tokenFallback(_to, _value);\r\n                }\r\n            } else {\r\n                if (hasHook) {\r\n                    TrueCoinReceiver(finalTo).tokenFallback(_from, _value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function mint(address _to, uint256 _value) public onlyOwner {\r\n        require(_to != address(0), \"to address cannot be zero\");\r\n        bool hasHook;\r\n        address originalTo = _to;\r\n        (_to, hasHook) = _requireCanMint(_to);\r\n        totalSupply_ = totalSupply_.add(_value);\r\n        emit Mint(originalTo, _value);\r\n        emit Transfer(address(0), originalTo, _value);\r\n        if (_to != originalTo) {\r\n            emit Transfer(originalTo, _to, _value);\r\n        }\r\n        _addBalance(_to, _value);\r\n        if (hasHook) {\r\n            if (_to != originalTo) {\r\n                TrueCoinReceiver(_to).tokenFallback(originalTo, _value);\r\n            } else {\r\n                TrueCoinReceiver(_to).tokenFallback(address(0), _value);\r\n            }\r\n        }\r\n    }\r\n\r\n    event WipeBlacklistedAccount(address indexed account, uint256 balance);\r\n    event SetRegistry(address indexed registry);\r\n\r\n    /**\r\n    * @dev Point to the registry that contains all compliance related data\r\n    @param _registry The address of the registry instance\r\n    */\r\n    function setRegistry(Registry _registry) public onlyOwner {\r\n        registry = _registry;\r\n        emit SetRegistry(address(registry));\r\n    }\r\n\r\n    modifier onlyRegistry {\r\n        require(msg.sender == address(registry));\r\n        _;\r\n    }\r\n\r\n    function syncAttributeValue(address _who, bytes32 _attribute, uint256 _value) public onlyRegistry {\r\n        attributes[_attribute][_who] = _value;\r\n    }\r\n\r\n    function _burnAllArgs(address _from, uint256 _value) internal {\r\n        _requireCanBurn(_from);\r\n        super._burnAllArgs(_from, _value);\r\n    }\r\n\r\n    // Destroy the tokens owned by a blacklisted account\r\n    function wipeBlacklistedAccount(address _account) public onlyOwner {\r\n        require(_isBlacklisted(_account), \"_account is not blacklisted\");\r\n        uint256 oldValue = _getBalance(_account);\r\n        _setBalance(_account, 0);\r\n        totalSupply_ = totalSupply_.sub(oldValue);\r\n        emit WipeBlacklistedAccount(_account, oldValue);\r\n        emit Transfer(_account, address(0), oldValue);\r\n    }\r\n\r\n    function _isBlacklisted(address _account) internal view returns (bool blacklisted) {\r\n        return attributes[IS_BLACKLISTED][_account] != 0;\r\n    }\r\n\r\n    function _requireCanTransfer(address _from, address _to) internal view returns (address, bool) {\r\n        uint256 depositAddressValue = attributes[IS_DEPOSIT_ADDRESS][address(uint256(_to) >> 20)];\r\n        if (depositAddressValue != 0) {\r\n            _to = address(depositAddressValue);\r\n        }\r\n        require (attributes[IS_BLACKLISTED][_to] == 0, \"blacklisted\");\r\n        require (attributes[IS_BLACKLISTED][_from] == 0, \"blacklisted\");\r\n        return (_to, attributes[IS_REGISTERED_CONTRACT][_to] != 0);\r\n    }\r\n\r\n    function _requireCanTransferFrom(address _spender, address _from, address _to) internal view returns (address, bool) {\r\n        require (attributes[IS_BLACKLISTED][_spender] == 0, \"blacklisted\");\r\n        uint256 depositAddressValue = attributes[IS_DEPOSIT_ADDRESS][address(uint256(_to) >> 20)];\r\n        if (depositAddressValue != 0) {\r\n            _to = address(depositAddressValue);\r\n        }\r\n        require (attributes[IS_BLACKLISTED][_to] == 0, \"blacklisted\");\r\n        require (attributes[IS_BLACKLISTED][_from] == 0, \"blacklisted\");\r\n        return (_to, attributes[IS_REGISTERED_CONTRACT][_to] != 0);\r\n    }\r\n\r\n    function _requireCanMint(address _to) internal view returns (address, bool) {\r\n        uint256 depositAddressValue = attributes[IS_DEPOSIT_ADDRESS][address(uint256(_to) >> 20)];\r\n        if (depositAddressValue != 0) {\r\n            _to = address(depositAddressValue);\r\n        }\r\n        require (attributes[IS_BLACKLISTED][_to] == 0, \"blacklisted\");\r\n        return (_to, attributes[IS_REGISTERED_CONTRACT][_to] != 0);\r\n    }\r\n\r\n    function _requireOnlyCanBurn(address _from) internal view {\r\n        require (attributes[canBurn()][_from] != 0, \"cannot burn from this address\");\r\n    }\r\n\r\n    function _requireCanBurn(address _from) internal view {\r\n        require (attributes[IS_BLACKLISTED][_from] == 0, \"blacklisted\");\r\n        require (attributes[canBurn()][_from] != 0, \"cannot burn from this address\");\r\n    }\r\n\r\n    function paused() public pure returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/RewardToken.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n/**\r\n * @title RewardToken\r\n * @dev Non-transferrable token meant to represent\r\n * RewardTokens are TrueCurrencies owed by a financial opportunity\r\n *\r\n * -- Overview --\r\n * RewardTokens are redeemable for an underlying Token.\r\n * RewardTokens are non-transferrable for compliance reasons\r\n * The caller of depositor is responsible for exchanging their\r\n * tokens, rather just keep accounting of user rewardToken balances\r\n *\r\n * -- Financial Opportunity --\r\n * RewardTokens are backed by an underlying financial opportunity\r\n * Each financial opportunity can accept Token deposits for\r\n * See FinancialOpportunity.sol\r\n *\r\n * -- Mint/Redeem/Burn --\r\n * To create rewardTokens, we call mintRewardToken with some amount of TUSD\r\n * To redeem rewardTokens we call redeemRewardToken and recieve TUSD\r\n * Only the account that has rewardTokens can burn reward tokens. The only\r\n * time we would want to burn rewardTokens is if the underlying opportunity\r\n * is no longer redeemable, and we want to wipe the debt.\r\n *\r\n */\r\ncontract RewardToken is CompliantDepositTokenWithHook {\r\n\r\n    /* variables in proxy storage\r\n    mapping(address => FinancialOpportunity) finOps;\r\n    mapping(address => mapping(address => uint256)) finOpBalances;\r\n    mapping(address => uint256) finOpSupply;\r\n    */\r\n\r\n    event MintRewardToken(address account, uint256 amount, address finOp);\r\n    event RedeemRewardToken(address account, uint256 amount, address finOp);\r\n    event BurnRewardToken(address account, uint256 amount, address finOp);\r\n\r\n    /**\r\n     * @dev Only addresses registered in this contract's mapping are valid\r\n     *\r\n     * @param finOp reverts if this finOp is not registered\r\n     */\r\n    modifier validFinOp(address finOp) {\r\n        require(finOp != address(0), \"invalid opportunity\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev get debt balance of account in rewardToken\r\n     *\r\n     * @param finOp financial opportunity\r\n     */\r\n    function rewardTokenSupply(\r\n        address finOp\r\n    ) public view validFinOp(finOp) returns (uint256) {\r\n        return finOpSupply[finOp];\r\n    }\r\n\r\n    /**\r\n     * @dev get debt balance of account in rewardToken\r\n     *\r\n     * @param account account to get rewardToken balance of\r\n     * @param finOp financial opportunity\r\n     */\r\n    function rewardTokenBalance(\r\n        address account,\r\n        address finOp\r\n    ) public view validFinOp(finOp) returns (uint256) {\r\n        return finOpBalances[finOp][account];\r\n    }\r\n\r\n    /**\r\n     * @dev mint rewardToken for financial opportunity\r\n     *\r\n     * For valid finOp, deposit Token into finOp\r\n     * Update finOpSupply & finOpBalance for account\r\n     * Emit mintRewardToken event on success\r\n     *\r\n     * @param account account to mint rewardToken for\r\n     * @param amount amount of depositToken to mint\r\n     * @param finOp financial opportunity address\r\n     */\r\n    function mintRewardToken(\r\n        address account,\r\n        uint256 amount,\r\n        address finOp\r\n    ) internal validFinOp(finOp) returns (uint256) {\r\n        // require sufficient balance\r\n        require(super.balanceOf(account) >= amount, \"insufficient token balance\");\r\n\r\n        // approve finOp can spend Token\r\n        _setAllowance(account, finOp, amount);\r\n\r\n        // deposit into finOp\r\n        uint256 rewardAmount = _getFinOp(finOp).deposit(account, amount);\r\n\r\n        // increase finOp rewardToken supply\r\n        finOpSupply[finOp] = finOpSupply[finOp].add(rewardAmount);\r\n\r\n        // increase account rewardToken balance\r\n        _addRewardBalance(account, rewardAmount, finOp);\r\n\r\n        // emit mint event\r\n        emit MintRewardToken(account, amount, finOp);\r\n\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev redeem rewardToken balance for depositToken\r\n     *\r\n     * For valid finOp, deposit Token into finOp\r\n     * Update finOpSupply & finOpBalance for account\r\n     * Emit mintRewardToken event on success\r\n     *\r\n     * @param account account to redeem rewardToken for\r\n     * @param amount depositToken amount to redeem\r\n     * @param finOp financial opportunitu address\r\n     */\r\n    function redeemRewardToken(\r\n        address account,\r\n        uint256 amount,\r\n        address finOp\r\n    ) internal validFinOp(finOp) returns (uint256) {\r\n        // require sufficient balance\r\n        require(rewardTokenBalance(account, finOp) >= amount, \"insufficient reward balance\");\r\n\r\n        // withdraw from finOp, giving TUSD to account\r\n        uint256 tokenAmount = _getFinOp(finOp).redeem(account, amount);\r\n\r\n        // decrease finOp rewardToken supply\r\n        finOpSupply[finOp] = finOpSupply[finOp].sub(amount);\r\n\r\n        // decrease account rewardToken balance\r\n        _subRewardBalance(account, amount, finOp);\r\n\r\n        // emit mint event\r\n        emit RedeemRewardToken(account, tokenAmount, finOp);\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev burn rewardToken without redeeming\r\n     *\r\n     * Burn rewardToken for finOp\r\n     *\r\n     * @param account account to burn rewardToken for\r\n     * @param amount depositToken amount to burn\r\n     * @param finOp financial opportunity address\r\n     */\r\n    function burnRewardToken(\r\n        address account,\r\n        uint256 amount,\r\n        address finOp\r\n    )\r\n        internal\r\n        validFinOp(finOp)\r\n    {\r\n        // burn call must come from sender\r\n        require(msg.sender == account);\r\n\r\n        // sender must have rewardToken amount to burn\r\n        require(rewardTokenBalance(account, finOp) >= amount);\r\n\r\n        // subtract reward balance from\r\n        _subRewardBalance(account, amount, finOp);\r\n\r\n        // reduce total supply\r\n        finOpSupply[finOp].sub(amount);\r\n\r\n        // burn event\r\n        emit BurnRewardToken(account, amount, finOp);\r\n    }\r\n\r\n    /**\r\n     * @dev add rewardToken balance to account\r\n     *\r\n     * @param account account to add to\r\n     * @param amount rewardToken amount to add\r\n     * @param finOp financial opportunity to add reward tokens to\r\n     */\r\n    function _addRewardBalance(address account, uint256 amount, address finOp) internal {\r\n        finOpBalances[finOp][account] = finOpBalances[finOp][account].add(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev subtract rewardToken balance from account\r\n     *\r\n     * @param account account to subtract from\r\n     * @param amount rewardToken ammount to subtract\r\n     * @param finOp financial opportunity\r\n     */\r\n    function _subRewardBalance(address account, uint256 amount, address finOp) internal {\r\n        finOpBalances[finOp][account] = finOpBalances[finOp][account].sub(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Utility to convert depositToken value to rewardToken value\r\n     *\r\n     * @param amount depositToken amount to convert to rewardToken\r\n     * @param finOp financial opportunity address\r\n     */\r\n    function _toRewardToken(uint256 amount, address finOp) internal view returns (uint256) {\r\n        uint256 ratio = _getFinOp(finOp).tokenValue();\r\n        return amount.mul(10 ** 18).div(ratio);\r\n    }\r\n\r\n    /**\r\n     * @dev Utility to convert rewardToken value to depositToken value\r\n     *\r\n     * @param amount rewardToken amount to convert to depositToken\r\n     * @param finOp financial opportunity address\r\n     */\r\n    function _toToken(uint amount, address finOp) internal view returns (uint256) {\r\n        uint256 ratio = _getFinOp(finOp).tokenValue();\r\n        return ratio.mul(amount).div(10 ** 18);\r\n    }\r\n\r\n    /**\r\n     * @dev utility to get FinancialOpportunity for address\r\n     *\r\n     * @param finOp financial opportunity to get\r\n     */\r\n    function _getFinOp(address finOp) internal view returns (FinancialOpportunity) {\r\n        return FinancialOpportunity(finOp);\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/RewardTokenWithReserve.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n * @title RewardTokenWithReserve\r\n * @dev Provides a reserve to swap rewardTokens for gas savings\r\n *\r\n * -- Overview --\r\n * The Reserve holds Tokens and RewardTokens\r\n * Because gas costs can be high for depositing/redeeming in financial\r\n * opportunities, we use this contract to keep a reserve of tokens\r\n * to provide swap opportunities\r\n *\r\n */\r\ncontract RewardTokenWithReserve is RewardToken {\r\n\r\n    // Reserve is an address which nobody has the private key to\r\n    // Reserves of TUSD and TrueRewardBackedToken are held at this addess\r\n    address public constant RESERVE = 0xf000000000000000000000000000000000000000;\r\n\r\n    event SwapRewardForToken(address account, address receiver, uint256 amount, address finOp);\r\n    event SwapTokenForReward(address account, address receiver, uint256 amount, address finOp);\r\n\r\n    /**\r\n     * @dev get reserve token balance\r\n     *\r\n     * @return token balance of reserve\r\n     */\r\n    function reserveBalance() public view returns (uint256) {\r\n        return super.balanceOf(RESERVE);\r\n    }\r\n\r\n    /**\r\n     * @dev Get rewardToken reserve balance\r\n     *\r\n     * @param finOp address of financial opportunity\r\n     * @return rewardToken balance of reserve for finOp\r\n     */\r\n    function reserveRewardBalance(address finOp) public view returns (uint) {\r\n        return rewardTokenBalance(RESERVE, finOp);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Token from reserve through transferAll\r\n     *\r\n     * @param to address to withdraw to\r\n     * @param value amount to withdraw\r\n     */\r\n    function reserveWithdraw(address to, uint256 value) external onlyOwner {\r\n        _transferAllArgs(RESERVE, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow this contract to rebalance currency reserves\r\n     * This is called when there is too much money in an opportunity and we want\r\n     * to get more TrueCurrency.\r\n     * This allows us to reduct the cost of transfers 5-10x in/out of opportunities\r\n     *\r\n     * @param amount amount of rewardTokens to redeem\r\n     * @param finOp financial opportunity to redeem from\r\n     */\r\n    function reserveRedeem(uint256 amount, address finOp) internal {\r\n        redeemRewardToken(RESERVE, amount, finOp);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow this contract to rebalance currency reserves\r\n     * This is called when there is not enough rewardToken for an\r\n     * opportunity and we want to add rewardTokens to the reserve\r\n     *\r\n     * @param amount amount of Token to redeem for rewardToken\r\n     * @param finOp financial opportunity to redeem for\r\n     */\r\n    function reserveMint(uint256 amount, address finOp) internal {\r\n        mintRewardToken(RESERVE, amount, finOp);\r\n    }\r\n\r\n    /**\r\n     * @dev Use reserve to swap Token for rewardToken between accounts\r\n     *\r\n     * @param sender account to deduct token from\r\n     * @param receiver account to add rewardToken to\r\n     * @param amount Token amount to exchange for rewardToken\r\n     * @param finOp financial opportunity to swap tokens for\r\n     */\r\n    function swapTokenForReward(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount,\r\n        address finOp\r\n    ) internal validFinOp(finOp) {\r\n        // require sender has sufficient balance\r\n        require(balanceOf(sender) >= amount, \"insufficient balance\");\r\n\r\n        // calculate rewardToken value for depositToken amount\r\n        uint256 rewardAmount = _toRewardToken(amount, finOp);\r\n\r\n        // require reserve\r\n        require(rewardTokenBalance(RESERVE, finOp) >= rewardAmount, \"not enough rewardToken in reserve\");\r\n\r\n        // sub from sender and add to reserve for depositToken\r\n        _subBalance(sender, amount);\r\n        _addBalance(RESERVE, amount);\r\n\r\n        // sub from reserve and add to sender for rewardToken\r\n        _subRewardBalance(RESERVE, rewardAmount, finOp);\r\n        _addRewardBalance(receiver, rewardAmount, finOp);\r\n\r\n        // emit event\r\n        emit SwapTokenForReward(sender, receiver, amount, finOp);\r\n    }\r\n\r\n    /**\r\n     * @dev Use reserve to swap rewardToken for Token between accounts\r\n     *\r\n     * @param sender account to swap rewardToken from\r\n     * @param receiver account to add Token to\r\n     * @param tokenAmount token amount to receive for Token\r\n     * @param finOp financial opportunity\r\n     */\r\n    function swapRewardForToken(\r\n        address sender,\r\n        address receiver,\r\n        uint256 tokenAmount,\r\n        address finOp\r\n    ) internal validFinOp(finOp) {\r\n        // ensure reserve has enough balance\r\n        require(balanceOf(RESERVE) >= tokenAmount, \"not enough depositToken in reserve\");\r\n\r\n        uint256 rewardAmount = _toRewardToken(tokenAmount, finOp);\r\n\r\n        // require sufficient balance\r\n        require (rewardTokenBalance(sender, finOp) >= rewardAmount, \"insufficient rewardToken balance\");\r\n\r\n        // sub account and add reserve for rewardToken\r\n        _subRewardBalance(sender, rewardAmount, finOp);\r\n        _addRewardBalance(RESERVE, rewardAmount, finOp);\r\n\r\n        // sub account and add reserve for Token\r\n        _subBalance(RESERVE, tokenAmount);\r\n        _addBalance(receiver, tokenAmount);\r\n\r\n        // emit event\r\n        emit SwapRewardForToken(sender, receiver, rewardAmount, finOp);\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/TrueRewardBackedToken.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TrueRewardBackedToken\r\n * @dev TrueRewardBackedToken is TrueCurrency backed by debt\r\n *\r\n * -- Overview --\r\n * Enabling TrueRewards deposits TrueCurrency into a financial opportunity\r\n * Financial opportunities provide awards over time\r\n * Awards are reflected in the wallet balance updated block-by-block\r\n *\r\n * -- rewardToken vs yToken --\r\n * rewardToken represents an amount of ASSURED TrueCurrency owed to the rewardToken holder\r\n * yToken represents an amount of NON-ASSURED TrueCurrency owed to a yToken holder\r\n * For this contract, we only handle rewardToken (Assured Opportunities)\r\n *\r\n * -- Calculating rewardToken --\r\n * TrueCurrency Value = rewardToken * financial opportunity tokenValue()\r\n *\r\n * -- rewardToken Assumptions --\r\n * We assume tokenValue never decreases for assured financial opportunities\r\n * rewardToken is not transferrable in that the token itself is never tranferred\r\n * Rather, we override our transfer functions to account for user balances\r\n *\r\n * -- Reserve --\r\n * This contract uses a reserve holding of TrueCurrency and rewardToken to save on gas costs\r\n * because calling the financial opportunity deposit() and redeem() everytime\r\n * can be expensive\r\n * See RewardTokenWithReserve.sol\r\n *\r\n * -- Future Upgrades to Financial Opportunity --\r\n * Currently, we only have a single financial opportunity\r\n * We plan on upgrading this contract to support a multiple financial opportunity,\r\n * so some of the code is built to support this\r\n *\r\n */\r\ncontract TrueRewardBackedToken is RewardTokenWithReserve {\r\n\r\n    /* variables in Proxy Storage:\r\n    mapping(address => FinancialOpportunity) finOps;\r\n    mapping(address => mapping(address => uint256)) finOpBalances;\r\n    mapping(address => uint256) finOpSupply;\r\n    uint256 maxRewardProportion = 1000;\r\n    */\r\n\r\n    // registry attribute for whitelist\r\n    // 0x6973547275655265776172647357686974656c69737465640000000000000000\r\n    bytes32 constant IS_TRUEREWARDS_WHITELISTED = \"isTrueRewardsWhitelisted\";\r\n\r\n    // financial opportunity address\r\n    address public opportunity_;\r\n\r\n    event TrueRewardEnabled(address _account);\r\n    event TrueRewardDisabled(address _account);\r\n\r\n    /** @dev return true if TrueReward is enabled for a given address */\r\n    function trueRewardEnabled(address _address) public view returns (bool) {\r\n        return _rewardDistribution[_address].length != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Get total supply of all TrueCurrency\r\n     * Equal to deposit backed TrueCurrency plus debt backed TrueCurrency\r\n     * @return total supply in trueCurrency\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        // if supply in opportunity finOp, return supply of deposits + debt\r\n        // otherwise call super to return normal totalSupply\r\n        if (opportunityRewardSupply() != 0) {\r\n            return totalSupply_.add(opportunityTotalSupply());\r\n        }\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev get total supply of TrueCurrency backed by fiat deposits\r\n     * @return supply of fiat backed TrueCurrency\r\n     */\r\n    function depositBackedSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev get total supply of TrueCurrency backed by debt\r\n     * @return supply of debt backed TrueCurrency\r\n     */\r\n    function debtBackedSupply() public view returns (uint256) {\r\n        return totalSupply() - totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Get balance of TrueCurrency including rewards for an address\r\n     *\r\n     * @param _who address of account to get balanceOf for\r\n     * @return balance total balance of address including rewards\r\n     */\r\n    function balanceOf(address _who) public view returns (uint256) {\r\n        // if trueReward enabled, return token value of reward balance\r\n        // otherwise call token balanceOf\r\n        if (trueRewardEnabled(_who)) {\r\n            return _toToken(rewardTokenBalance(_who, opportunity()), opportunity());\r\n        }\r\n        return super.balanceOf(_who);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable TrueReward and deposit user balance into opportunity.\r\n     * Currently supports a single financial opportunity\r\n     */\r\n    function enableTrueReward() external {\r\n        // require TrueReward is not enabled\r\n        require(registry.hasAttribute(msg.sender, IS_TRUEREWARDS_WHITELISTED), \"must be whitelisted to enable TrueRewards\");\r\n        require(!trueRewardEnabled(msg.sender), \"TrueReward already enabled\");\r\n\r\n        // get sender balance\r\n        uint balance = _getBalance(msg.sender);\r\n\r\n        if (balance != 0) {\r\n            // mint reward token\r\n            mintRewardToken(msg.sender, balance, opportunity());\r\n        }\r\n\r\n        // set reward distribution\r\n        // we set max distribution since we only have one opportunity\r\n        _setDistribution(maxRewardProportion, opportunity());\r\n\r\n        // emit enable event\r\n        emit TrueRewardEnabled(msg.sender);\r\n        //emit Transfer(address(0), msg.sender, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Disable TrueReward and withdraw user balance from opportunity.\r\n     */\r\n    function disableTrueReward() external {\r\n        // require TrueReward is enabled\r\n        require(trueRewardEnabled(msg.sender), \"TrueReward already disabled\");\r\n        // get balance\r\n        uint rewardBalance = rewardTokenBalance(msg.sender, opportunity());\r\n\r\n        // remove reward distribution\r\n        _removeDistribution(opportunity());\r\n\r\n        if (rewardBalance > 0) {\r\n            // redeem for token\r\n            redeemRewardToken(msg.sender, rewardBalance, opportunity());\r\n        }\r\n\r\n        // emit disable event\r\n        emit TrueRewardDisabled(msg.sender);\r\n        // emit Transfer(msg.sender, address(0), zTrueCurrency);\r\n    }\r\n\r\n    /**\r\n     * @dev mint function for TrueRewardBackedToken\r\n     * Mints TrueCurrency backed by debt\r\n     * When we add multiple opportunities, this needs to work for mutliple interfaces\r\n     */\r\n    function mint(address _to, uint256 _value) public onlyOwner {\r\n        // check if to address is enabled\r\n        bool toEnabled = trueRewardEnabled(_to);\r\n\r\n        // if to enabled, mint to this contract and deposit into finOp\r\n        if (toEnabled) {\r\n            // mint to this contract\r\n            super.mint(address(this), _value);\r\n            // transfer minted amount to target receiver\r\n            _transferAllArgs(address(this), _to, _value);\r\n        }\r\n        // otherwise call normal mint process\r\n        else {\r\n            super.mint(_to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev redeem reserve rewardTokens for Token given a rewardToken amount\r\n     * This is called by the TokenController to balance the reserve\r\n     * @param _value amount of Token to deposit for rewardTokens\r\n     */\r\n    function opportunityReserveRedeem(uint256 _value) external onlyOwner {\r\n        reserveRedeem(_value, opportunity());\r\n    }\r\n\r\n    /**\r\n     * @dev mint reserve rewardTokens for opportunity given a Token deposit\r\n     * This is called by the TokenController to balance the reserve\r\n     * @param _value amount of Token to deposit for rewardTokens\r\n     */\r\n    function opportunityReserveMint(uint256 _value) external onlyOwner {\r\n        reserveMint(_value, opportunity());\r\n    }\r\n\r\n    /**\r\n     * @dev set a new opportunity financial opportunity address\r\n     * @param _opportunity new opportunity to set\r\n     */\r\n    function setOpportunityAddress(address _opportunity) external onlyOwner {\r\n        opportunity_ = _opportunity;\r\n    }\r\n\r\n    /**\r\n     * @dev Get (assured) financial opportunity address\r\n     * @return address financial opportunity address\r\n     */\r\n    function opportunity() public view returns (address) {\r\n        return opportunity_;\r\n    }\r\n\r\n    /**\r\n     * @dev Get total supply of opportunity rewardToken\r\n     * @return total supply of opportunity rewardToken\r\n     */\r\n    function opportunityRewardSupply() internal view returns (uint256) {\r\n        return rewardTokenSupply(opportunity());\r\n    }\r\n\r\n    /**\r\n     * @dev Get total supply of TrueCurrency in opportunity\r\n     * @return total supply of TrueCurrency in opportunity\r\n     */\r\n    function opportunityTotalSupply() internal view returns (uint256) {\r\n        return _toToken(opportunityRewardSupply(), opportunity());\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer helper for accounts with rewardToken balances\r\n     * Uses reserve float to save gas costs for transactions with value < reserve balance\r\n     * Case #2 and #3 use reserve balances\r\n     *\r\n     * There are 6 transfer cases\r\n     *  1. Both sender and receiver are disabled (see _transferAllArgs)\r\n     *  2. Sender enabled, receiver disabled, value < reserve TrueCurrency balance\r\n     *  3. Sender disabled, receiver enabled, value < reserve rewardToken balance (in TrueCurrency)\r\n     *  4. Both sender and receiver are enabled\r\n     *  5. Sender enabled, receiver disabled, value > reserve TrueCurrency balance\r\n     *  6. Sender disabled, receiver enabled, value > reserve rewardToken balance (in TrueCurrency)\r\n     *\r\n     * @param _from account to transfer from\r\n     * @param _to account to transfer to\r\n     * @param _value value in Token to transfer\r\n     * @return actual value transferred\r\n     */\r\n    function _transferWithRewards(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (uint256) {\r\n        // get enable stat\r\n        bool fromEnabled = trueRewardEnabled(_from);\r\n        bool toEnabled = trueRewardEnabled(_to);\r\n\r\n        // get opportunity address\r\n        address finOp = opportunity();\r\n\r\n        // calculate rewardToken balance\r\n        uint rewardAmount = _toRewardToken(_value, finOp);\r\n\r\n        // 2. Sender enabled, receiver disabled, value < reserve TrueCurrency balance\r\n        // Swap rewardToken for Token through reserve\r\n        if (fromEnabled && !toEnabled && _value <= reserveBalance()) {\r\n            swapRewardForToken(_from, _to, _value, finOp);\r\n        }\r\n        // 3. Sender disabled, receiver enabled, value < reserve rewardToken balance\r\n        // Swap Token for rewardToken through reserve\r\n        else if (!fromEnabled && toEnabled && rewardAmount <= rewardTokenBalance(RESERVE, finOp)) {\r\n            swapTokenForReward(_from, _to, _value, finOp);\r\n        }\r\n        // 4. Sender and receiver are enabled\r\n        // Here we simply transfer rewardToken from the sender to the receiver\r\n        else if (fromEnabled && toEnabled) {\r\n            _subRewardBalance(_from, rewardAmount, finOp);\r\n            _addRewardBalance(_to, rewardAmount, finOp);\r\n        }\r\n        // 5. Sender enabled, receiver disabled, value > reserve TrueCurrency balance\r\n        // Recalculate value based on redeem value returned and give value to receiver\r\n        else if (fromEnabled && !toEnabled) {\r\n            _getFinOp(finOp).redeem(_to, rewardAmount);\r\n\r\n            // decrease finOp rewardToken supply\r\n            finOpSupply[finOp] = finOpSupply[finOp].sub(rewardAmount);\r\n\r\n            // decrease account rewardToken balance\r\n            _subRewardBalance(_from, rewardAmount, finOp);\r\n        }\r\n        // 6. Sender disabled, receiver enabled, value > reserve rewardToken balance\r\n        // Transfer Token value between accounts and mint reward token for receiver\r\n        else if (!fromEnabled && toEnabled) {\r\n            // deposit into finOp\r\n            _approveAllArgs(finOp, _value, _from);\r\n            uint256 depositedAmount = _getFinOp(finOp).deposit(_from, _value);\r\n\r\n            // increase finOp rewardToken supply\r\n            finOpSupply[finOp] = finOpSupply[finOp].add(depositedAmount);\r\n\r\n            // increase account rewardToken balance\r\n            _addRewardBalance(_to, depositedAmount, finOp);\r\n        }\r\n        return _value;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer helper function for TrueRewardBackedToken\r\n     */\r\n    function _transferAllArgs(address _from, address _to, uint256 _value) internal {\r\n        // 1. Both sender and receiver are disabled\r\n        // Exchange is in TrueCurrency -> call the normal transfer function\r\n        if (!trueRewardEnabled(_from) && !trueRewardEnabled(_to)) {\r\n            // sender not enabled receiver not enabled\r\n            super._transferAllArgs(_from, _to, _value);\r\n            return;\r\n        }\r\n        require(balanceOf(_from) >= _value, \"not enough balance\");\r\n\r\n        // require account is not blacklisted and check if hook is registered\r\n        (address finalTo, bool hasHook) = _requireCanTransfer(_from, _to);\r\n\r\n        _value = _transferWithRewards(_from, finalTo, _value);\r\n\r\n        // emit transfer event for from\r\n        emit Transfer(_from, _to, _value);\r\n        if (finalTo != _to) {\r\n            emit Transfer(_to, finalTo, _value);\r\n            if (hasHook) {\r\n                TrueCoinReceiver(finalTo).tokenFallback(_to, _value);\r\n            }\r\n        } else {\r\n            if (hasHook) {\r\n                TrueCoinReceiver(finalTo).tokenFallback(_from, _value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev TransferFromAll helper function for TrueRewardBackedToken\r\n     */\r\n    function _transferFromAllArgs(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        address _spender\r\n    ) internal {\r\n        // 1. Both sender and receiver are disabled -> normal transfer\r\n        if (!trueRewardEnabled(_from) && !trueRewardEnabled(_to)) {\r\n            super._transferFromAllArgs(_from, _to, _value, _spender);\r\n            return;\r\n        }\r\n\r\n        // check balance\r\n        require(balanceOf(_from) >= _value, \"not enough balance\");\r\n\r\n        (address finalTo, bool hasHook) = _requireCanTransferFrom(_spender, _from, _to);\r\n\r\n        // call transfer helper\r\n        _value = _transferWithRewards(_from, finalTo, _value);\r\n\r\n        // sub allowance of spender\r\n        _subAllowance(_from, _spender, _value);\r\n\r\n        // emit transfer event. For hook emit second transfer event\r\n        // call fallback function for valid hook\r\n        emit Transfer(_from, _to, _value);\r\n        if (finalTo != _to) {\r\n            emit Transfer(_to, finalTo, _value);\r\n            if (hasHook) {\r\n                TrueCoinReceiver(finalTo).tokenFallback(_to, _value);\r\n            }\r\n        } else {\r\n            if (hasHook) {\r\n                TrueCoinReceiver(finalTo).tokenFallback(_from, _value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set reward distribution for an opportunity\r\n     *\r\n     * @param proportion to set\r\n     * @param finOp financial opportunity to set proportion for\r\n     */\r\n    function _setDistribution(uint256 proportion, address finOp) internal {\r\n        require(proportion <= maxRewardProportion, \"exceeds maximum proportion\");\r\n        require(_rewardDistribution[msg.sender].length == 0, \"already enabled\");\r\n        _rewardDistribution[msg.sender].push(\r\n            RewardAllocation(proportion, finOp));\r\n    }\r\n\r\n    /**\r\n     * @dev Remove reward distribution for a financial opportunity\r\n     * Remove\r\n     */\r\n    function _removeDistribution(address finOp) internal {\r\n        delete _rewardDistribution[msg.sender][0];\r\n        _rewardDistribution[msg.sender].length--;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/DelegateERC20.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/** @title DelegateERC20\r\nAccept forwarding delegation calls from the old TrueUSD (V1) contract. This way the all the ERC20\r\nfunctions in the old contract still works (except Burn).\r\n*/\r\ncontract DelegateERC20 is CompliantDepositTokenWithHook {\r\n\r\n    address constant DELEGATE_FROM = 0x8dd5fbCe2F6a956C3022bA3663759011Dd51e73E;\r\n\r\n    modifier onlyDelegateFrom() {\r\n        require(msg.sender == DELEGATE_FROM);\r\n        _;\r\n    }\r\n\r\n    function delegateTotalSupply() public view returns (uint256) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function delegateBalanceOf(address who) public view returns (uint256) {\r\n        return _getBalance(who);\r\n    }\r\n\r\n    function delegateTransfer(address to, uint256 value, address origSender) public onlyDelegateFrom returns (bool) {\r\n        _transferAllArgs(origSender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function delegateAllowance(address owner, address spender) public view returns (uint256) {\r\n        return _getAllowance(owner, spender);\r\n    }\r\n\r\n    function delegateTransferFrom(address from, address to, uint256 value, address origSender) public onlyDelegateFrom returns (bool) {\r\n        _transferFromAllArgs(from, to, value, origSender);\r\n        return true;\r\n    }\r\n\r\n    function delegateApprove(address spender, uint256 value, address origSender) public onlyDelegateFrom returns (bool) {\r\n        _approveAllArgs(spender, value, origSender);\r\n        return true;\r\n    }\r\n\r\n    function delegateIncreaseApproval(address spender, uint addedValue, address origSender) public onlyDelegateFrom returns (bool) {\r\n        _increaseAllowanceAllArgs(spender, addedValue, origSender);\r\n        return true;\r\n    }\r\n\r\n    function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) public onlyDelegateFrom returns (bool) {\r\n        _decreaseAllowanceAllArgs(spender, subtractedValue, origSender);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/TrueCurrencies/TrueUSD.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n/** @title TrueUSD\r\n * @dev This is the top-level ERC20 contract, but most of the interesting functionality is\r\n * inherited - see the documentation on the corresponding contracts.\r\n */\r\ncontract TrueUSD is TrueRewardBackedToken, DelegateERC20 {\r\n    uint8 constant DECIMALS = 18;\r\n    uint8 constant ROUNDING = 2;\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function rounding() public pure returns (uint8) {\r\n        return ROUNDING;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return \"TrueUSD\";\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return \"TUSD\";\r\n    }\r\n\r\n    function canBurn() internal pure returns (bytes32) {\r\n        return \"canBurn\";\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"finOp\",\"type\":\"address\"}],\"name\":\"BurnRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"finOp\",\"type\":\"address\"}],\"name\":\"MintRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"finOp\",\"type\":\"address\"}],\"name\":\"RedeemRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"SetBurnBounds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"finOp\",\"type\":\"address\"}],\"name\":\"SwapRewardForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"finOp\",\"type\":\"address\"}],\"name\":\"SwapTokenForReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"TrueRewardDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"TrueRewardEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WipeBlacklistedAccount\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtBackedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"delegateAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"origSender\",\"type\":\"address\"}],\"name\":\"delegateApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"delegateBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"origSender\",\"type\":\"address\"}],\"name\":\"delegateDecreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"origSender\",\"type\":\"address\"}],\"name\":\"delegateIncreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegateTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"origSender\",\"type\":\"address\"}],\"name\":\"delegateTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"origSender\",\"type\":\"address\"}],\"name\":\"delegateTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositBackedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTrueReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTrueReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"gasRefundPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumGasPriceForFutureRefunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumGasPriceForRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opportunity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"opportunityReserveMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"opportunityReserveRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opportunity_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract InstantiatableOwnable\",\"name\":\"_ownable\",\"type\":\"address\"}],\"name\":\"reclaimContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract Registry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingGasRefundPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"finOp\",\"type\":\"address\"}],\"name\":\"reserveRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"reserveWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"finOp\",\"type\":\"address\"}],\"name\":\"rewardTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"finOp\",\"type\":\"address\"}],\"name\":\"rewardTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounding\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBurnBounds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumGasPriceForFutureRefunds\",\"type\":\"uint256\"}],\"name\":\"setMinimumGasPriceForFutureRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opportunity\",\"type\":\"address\"}],\"name\":\"setOpportunityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Registry\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sponsorGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sponsorGas2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_attribute\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"syncAttributeValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"trueRewardEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"wipeBlacklistedAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TrueUSD","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://896ea4fc0920bd2941594c85c702713e155411ce0601dcf430c9213c9490f804"}]}