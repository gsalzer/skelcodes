{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n}\r\n\r\ninterface Balancer {\r\n    function joinPool(uint,uint[] calldata) external;\r\n    function exitPool(uint,uint[] calldata) external;\r\n}\r\n\r\ninterface MStable {\r\n    function mint(address, uint) external;\r\n    function redeem(address, uint) external;\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n \r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n \r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n \r\n*/\r\n\r\n/*\r\n\r\n Strategy ~ 50% USDC to mUSD\r\n mUSD+USDC into balancer\r\n BAL+MTA\r\n\r\n*/\r\n\r\ncontract StrategyBalancerMTA {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    address constant public want = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    address constant public mUSD = address(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);\r\n    address constant public balancer = address(0x72Cd8f4504941Bf8c5a21d1Fd83A96499FD71d2C);\r\n    \r\n    \r\n    address public governance;\r\n    address public controller;\r\n    bool public breaker = true;\r\n    \r\n    constructor(address _controller) public {\r\n        governance = msg.sender;\r\n        controller = _controller;\r\n    }\r\n    \r\n    function setBreaker(bool _breaker) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        breaker = _breaker;\r\n    }\r\n    \r\n    function deposit() external {\r\n        require(breaker == false, \"!breaker\");\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        uint _usdc = _balance.div(2);\r\n        IERC20(want).safeApprove(mUSD, 0);\r\n        IERC20(want).safeApprove(mUSD, _usdc);\r\n        MStable(mUSD).mint(want,_usdc);\r\n        \r\n        uint _musd = IERC20(mUSD).balanceOf(address(this));\r\n        \r\n        uint _total = IERC20(balancer).totalSupply();\r\n        uint _balancerMUSD = IERC20(mUSD).balanceOf(balancer);\r\n        uint _poolAmountMUSD = _musd.mul(_total).div(_balancerMUSD);\r\n        \r\n        uint _balancerUSDC = IERC20(want).balanceOf(balancer);\r\n        uint _poolAmountUSDC = _usdc.mul(_total).div(_balancerUSDC);\r\n        \r\n        uint _poolAmountOut = _poolAmountMUSD;\r\n        if (_poolAmountUSDC < _poolAmountOut) {\r\n            _poolAmountOut = _poolAmountUSDC;\r\n        }\r\n        \r\n        IERC20(want).safeApprove(balancer, 0);\r\n        IERC20(want).safeApprove(balancer, _usdc);\r\n        IERC20(mUSD).safeApprove(balancer, 0);\r\n        IERC20(mUSD).safeApprove(balancer, _musd);\r\n        \r\n        uint[] memory _maxAmountIn = new uint[](2);\r\n        _maxAmountIn[0] = _musd;\r\n        _maxAmountIn[1] = _musd;\r\n        Balancer(balancer).joinPool(_poolAmountOut, _maxAmountIn);\r\n    }\r\n    \r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(address(_asset) != want, \"!c\");\r\n        require(address(_asset) != mUSD, \"!c\");\r\n        require(address(_asset) != balancer, \"!c\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n    \r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            uint _withdrew = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _withdrew.add(_balance);\r\n        }\r\n        \r\n        address _vault = Controller(controller).vaults(want);\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, _amount);\r\n        \r\n    }\r\n    \r\n    function redeem() external {\r\n        MStable(mUSD).redeem(want, normalize(IERC20(mUSD).balanceOf(address(this))));\r\n    }\r\n    \r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n        balance = IERC20(want).balanceOf(address(this));\r\n        \r\n        address _vault = Controller(controller).vaults(want);\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n        \r\n    }\r\n    \r\n    function _withdrawAll() internal {\r\n        uint _bpt = IERC20(balancer).balanceOf(address(this));\r\n        uint[] memory _minAmountOut = new uint[](2);\r\n        _minAmountOut[0] = 0;\r\n        _minAmountOut[1] = 0;\r\n        Balancer(balancer).exitPool(_bpt, _minAmountOut);\r\n        uint _musd = IERC20(mUSD).balanceOf(address(this));\r\n        MStable(mUSD).redeem(want, normalize(_musd));\r\n    }\r\n    \r\n    function _withdrawSome(uint256 _amount) internal returns (uint) {\r\n        uint _usdc = IERC20(want).balanceOf(balancer);\r\n        uint _bpt = IERC20(balancer).balanceOf(address(this));\r\n        uint _totalSupply = IERC20(balancer).totalSupply();\r\n        uint _redeem = _totalSupply.mul(_amount.div(2)).div(_usdc);\r\n        if (_redeem > _bpt) {\r\n            _redeem = _bpt;\r\n        }\r\n        uint[] memory _minAmountOut = new uint[](2);\r\n        _minAmountOut[0] = 0;\r\n        _minAmountOut[1] = 0;\r\n        uint _before = IERC20(want).balanceOf(address(this));\r\n        uint _mBefore = IERC20(mUSD).balanceOf(address(this));\r\n        Balancer(balancer).exitPool(_redeem, _minAmountOut);\r\n        uint _mAfter = IERC20(mUSD).balanceOf(address(this));\r\n        uint _musd = _mAfter.sub(_mBefore);\r\n        uint _after = IERC20(want).balanceOf(address(this));\r\n        uint _withdrew = _after.sub(_before);\r\n        _before = IERC20(want).balanceOf(address(this));\r\n        MStable(mUSD).redeem(want, normalize(_musd));\r\n        _after = IERC20(want).balanceOf(address(this));\r\n        return _withdrew.add(_after.sub(_before));\r\n    }\r\n    \r\n    function normalize(uint _amount) public view returns (uint) {\r\n        return _amount.mul(10**IERC20(want).decimals()).div(10**IERC20(mUSD).decimals());\r\n    }\r\n    \r\n    function balanceOf() public view returns (uint) {\r\n        uint _bpt = IERC20(balancer).balanceOf(address(this));\r\n        uint _totalSupply = IERC20(balancer).totalSupply();\r\n        uint _musd = IERC20(mUSD).balanceOf(balancer);\r\n        uint _usdc = IERC20(want).balanceOf(balancer);\r\n        _usdc = _usdc.mul(_bpt).div(_totalSupply);\r\n        _musd = _musd.mul(_bpt).div(_totalSupply);\r\n        return _usdc.add(normalize(_musd))\r\n                    .add(IERC20(want).balanceOf(address(this)))\r\n                    .add(normalize(IERC20(mUSD).balanceOf(address(this))));\r\n    }\r\n    \r\n    \r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n    \r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"breaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"normalize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_breaker\",\"type\":\"bool\"}],\"name\":\"setBreaker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyBalancerMTA","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000031317f9a5e4cc1d231bdf07755c994015a96a37c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d8e1d5ea2c422fa0a44fa510e39690d868376b4e60b848c343a98bc29b5e546d"}]}