{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract InstaAccount {\r\n    \r\n    function callOneInch(\r\n        bytes calldata _callData,\r\n        uint ethAmt,\r\n        address _target\r\n    )\r\n    external payable{\r\n        // solium-disable-next-line security/no-call-value\r\n        // (bool success, bytes memory data) = address(getOneSplitAddress()).call.value(ethAmt)(_callData);\r\n        // if (!success) revert(\"Failed\");\r\n        // address _target = getOneSplitAddress();\r\n        bytes memory datas = _callData;\r\n        assembly {\r\n            let succeeded := call(gas(), _target, ethAmt, add(datas, 0x20), mload(datas), 0, 0)\r\n\r\n            switch iszero(succeeded)\r\n                case 1 {\r\n                    // throw if delegatecall failed\r\n                    let size := returndatasize()\r\n                    returndatacopy(0x00, 0x00, size)\r\n                    revert(0x00, size)\r\n                }\r\n        }\r\n        // buyAmt = data;\r\n    }\r\n    \r\n    function external_call(bytes calldata data, uint value, address destination) external returns (bool) {\r\n        bool result;\r\n        bytes memory datas = data;\r\n        uint dataLength = data.length;\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(datas, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas(), 34710),   // 34710 is the value that solidity is currently emitting\r\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                d,\r\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"callOneInch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"external_call\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InstaAccount","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5b50ca520bfbc6b4b612f4cf353fd08029beb9748097ff12cb47ae37133a1410"}]}