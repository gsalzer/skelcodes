{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IPowerKeeper {\r\n    function usePower(address master) external returns (uint256);\r\n    function power(address master) external view returns (uint256);\r\n    function totalPower() external view returns (uint256);\r\n    event PowerGained(address indexed master, uint256 amount);\r\n    event PowerUsed(address indexed master, uint256 amount);\r\n}\r\n\r\ninterface IMilker {\r\n    function bandits(uint256 percent) external returns (uint256, uint256, uint256);\r\n    function sheriffsVaultCommission() external returns (uint256);\r\n    function sheriffsPotDistribution() external returns (uint256);\r\n    function isWhitelisted(address holder) external view returns (bool);\r\n    function getPeriod() external view returns (uint256);\r\n}\r\n\r\n\r\ncontract StableV2 is Ownable, IPowerKeeper {\r\n    using SafeMath for uint256;\r\n\r\n    // Stakeshot contains snapshot of aggregated staking history.\r\n    struct Stakeshot {\r\n        uint256 block;  // number of block stakeshooted\r\n        uint256 volume; // amount of tokens in the stable just after the \"shoot\" moment\r\n        uint256 power;  // amount of currently accumulated power available at block with number `block`\r\n    }\r\n\r\n    // Contract allowed to spend collected power to create MILK.\r\n    IMilker private _milker;\r\n\r\n    // Staking ERC20 token of the stable (specified once at the contract constraction).\r\n    IERC20 private _token;\r\n\r\n    // Variables used to work properly with inflationary/deflationary tokens.\r\n    uint256 private _maxUnits;\r\n    uint256 private _tokensToPowerDelimiter;\r\n\r\n    // Amount of tokens by holders and total amount of tokens in the stable.\r\n    mapping(address => uint256) private _tokens;\r\n    uint256 private _totalTokens;\r\n\r\n    // Most actual stakeshots by holders.\r\n    mapping(address => Stakeshot) private _stakeshots;\r\n\r\n    // Total amount of power accumulated in the stable.\r\n    uint256 private _totalPower;\r\n    uint256 private _totalPowerBlock;\r\n\r\n\r\n    // Staking/claiming events.\r\n    event Staked(address indexed holder, uint256 tokens);\r\n    event Claimed(address indexed holder, uint256 tokens);\r\n\r\n\r\n    modifier onlyMilker() {\r\n        require(address(_milker) == _msgSender(), \"StableV2: caller is not the Milker contract\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor(address milker, address token, uint256 maxUnits, uint256 tokensToPowerDelimiter) public {\r\n        require(address(milker) != address(0), \"StableV2: Milker contract address cannot be empty\");\r\n        require(address(token) != address(0), \"StableV2: ERC20 token contract address cannot be empty\");\r\n        require(tokensToPowerDelimiter > 0, \"StableV2: delimiter used to convert between tokens and units cannot be zero\");\r\n        _milker = IMilker(milker);\r\n        _token = IERC20(token);\r\n        _maxUnits = maxUnits;\r\n        _tokensToPowerDelimiter = tokensToPowerDelimiter;\r\n        _totalPowerBlock = block.number;\r\n    }\r\n\r\n    function stake(uint256 tokens) external {\r\n        address holder = msg.sender;\r\n        require(address(_milker) != address(0), \"StableV2: Milker contract is not set up\");\r\n        require(!_milker.isWhitelisted(holder), \"StableV2: whitelisted holders cannot stake tokens\");\r\n\r\n        // Recalculate total power and power collected by the holder\r\n        _update(holder);\r\n\r\n        // Transfer provided tokens to the StableV2 contract\r\n        bool ok = _token.transferFrom(holder, address(this), tokens);\r\n        require(ok, \"StableV2: unable to transfer tokens to the StableV2 contract\");\r\n\r\n        // Register staked tokens\r\n        uint256 units = _maxUnits != 0 ? tokens.mul(_maxUnits.div(_token.totalSupply())) : tokens;\r\n        _tokens[holder] = _tokens[holder].add(units);\r\n        _totalTokens = _totalTokens.add(units);\r\n\r\n        // Update stakeshot's volume\r\n        _stakeshots[holder].volume = _tokens[holder];\r\n\r\n        // Emit event to the logs so can be effectively used later\r\n        emit Staked(holder, tokens);\r\n    }\r\n\r\n    function claim(uint256 tokens) external {\r\n        address holder = msg.sender;\r\n        require(address(_milker) != address(0), \"StableV2: Milker contract is not set up\");\r\n        require(!_milker.isWhitelisted(holder), \"StableV2: whitelisted holders cannot claim tokens\");\r\n\r\n        // Recalculate total power and power collected by the holder\r\n        _update(holder);\r\n\r\n        // Transfer requested tokens from the StableV2 contract\r\n        bool ok = _token.transfer(holder, tokens);\r\n        require(ok, \"StableV2: unable to transfer tokens from the StableV2 contract\");\r\n\r\n        // Unregister claimed tokens\r\n        uint256 units = _maxUnits != 0 ? tokens.mul(_maxUnits.div(_token.totalSupply())) : tokens;\r\n        _tokens[holder] = _tokens[holder].sub(units);\r\n        _totalTokens = _totalTokens.sub(units);\r\n\r\n        // Update stakeshot's volume\r\n        _stakeshots[holder].volume = _tokens[holder];\r\n\r\n        // Emit event to the logs so can be effectively used later\r\n        emit Claimed(holder, tokens);\r\n    }\r\n\r\n    function usePower(address holder) external override onlyMilker returns (uint256 powerUsed) {\r\n\r\n        // Recalculate total power and power collected by the holder\r\n        _update(holder);\r\n\r\n        // Product MILK to the holder according to the accumulated power\r\n        powerUsed = _stakeshots[holder].power;\r\n        _stakeshots[holder].power = 0;\r\n        _totalPower = _totalPower.sub(powerUsed);\r\n\r\n        // Emit event to the logs so can be effectively used later\r\n        emit PowerUsed(holder, powerUsed);\r\n    }\r\n\r\n    function milker() public view returns (address) {\r\n        return address(_milker);\r\n    }\r\n\r\n    function token() public view returns (address) {\r\n        return address(_token);\r\n    }\r\n\r\n    function tokens(address holder) public view returns (uint256) {\r\n        uint256 unitsPerToken = _maxUnits != 0 ? _maxUnits.div(_token.totalSupply()) : 1;\r\n        return _tokens[holder].div(unitsPerToken);\r\n    }\r\n\r\n    function totalTokens() public view returns (uint256) {\r\n        uint256 unitsPerToken = _maxUnits != 0 ? _maxUnits.div(_token.totalSupply()) : 1;\r\n        return _totalTokens.div(unitsPerToken);\r\n    }\r\n\r\n    function power(address holder) public view override returns (uint256) {\r\n        Stakeshot storage s = _stakeshots[holder];\r\n        uint256 duration = block.number.sub(s.block);\r\n        if (s.block > 0 && duration > 0) {\r\n            uint256 powerGained = s.volume.div(_tokensToPowerDelimiter).mul(duration);\r\n            return s.power.add(powerGained);\r\n        }\r\n        return s.power;\r\n    }\r\n\r\n    function totalPower() public view override returns (uint256) {\r\n        uint256 duration = block.number.sub(_totalPowerBlock);\r\n        if (duration > 0) {\r\n            uint256 powerGained = _totalTokens.div(_tokensToPowerDelimiter).mul(duration);\r\n            return _totalPower.add(powerGained);\r\n        }\r\n        return _totalPower;\r\n    }\r\n\r\n    function stakeshot(address holder) public view returns (uint256, uint256, uint256) {\r\n        uint256 unitsPerToken = _maxUnits != 0 ? _maxUnits.div(_token.totalSupply()) : 1;\r\n        Stakeshot storage s = _stakeshots[holder];\r\n        return (s.block, s.volume.div(unitsPerToken), s.power);\r\n    }\r\n\r\n    function _update(address holder) private {\r\n\r\n        // Update the stakeshot\r\n        Stakeshot storage s = _stakeshots[holder];\r\n        uint256 duration = block.number.sub(s.block);\r\n        if (s.block > 0 && duration > 0) {\r\n            uint256 powerGained = s.volume.div(_tokensToPowerDelimiter).mul(duration);\r\n            s.power = s.power.add(powerGained);\r\n            emit PowerGained(holder, powerGained);\r\n        }\r\n        s.block = block.number;\r\n        s.volume = _tokens[holder];\r\n\r\n        // Update total power counter variables\r\n        duration = block.number.sub(_totalPowerBlock);\r\n        if (duration > 0) {\r\n            uint256 powerGained = _totalTokens.div(_tokensToPowerDelimiter).mul(duration);\r\n            _totalPower = _totalPower.add(powerGained);\r\n            _totalPowerBlock = block.number;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"milker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToPowerDelimiter\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PowerGained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PowerUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"milker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"power\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"stakeshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"usePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"powerUsed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StableV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008245a6e673351395df80caf0690e6e4d4c44a13a000000000000000000000000f0be50ed0620e0ba60ca7fc968ed14762e0a5dd3fffffffffffffffffffffffffffffffffffffffffff463077ab65b0c260000000000000000000000000000000000001d6329f1c35ca4bfabb9f5610000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://13577fb377f912beec70b3a3c97eba714c60a4eaa0b608babc08b3bc3dab6222"}]}