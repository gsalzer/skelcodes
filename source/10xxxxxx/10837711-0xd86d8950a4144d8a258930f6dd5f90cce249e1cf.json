{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/ERC165Checker.sol\r\n\r\npragma solidity ^0.5.10;\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface,\r\n     */\r\n    function _supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function _supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return _supportsERC165(account) &&\r\n            _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function _supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!_supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with the `supportsERC165` method in this library.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        // success determines whether the staticcall succeeded and result determines\r\n        // whether the contract at account indicates support of _interfaceId\r\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\r\n\r\n        return (success && result);\r\n    }\r\n\r\n    /**\r\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return success true if the STATICCALL succeeded, false otherwise\r\n     * @return result true if the STATICCALL succeeded and the contract at account\r\n     * indicates support of the interface with identifier interfaceId, false otherwise\r\n     */\r\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\r\n        private\r\n        view\r\n        returns (bool, bool)\r\n    {\r\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\r\n        (bool success, bytes memory result) = account.staticcall.gas(30000)(encodedParams);\r\n        if (result.length < 32) return (false, false);\r\n        return (success, abi.decode(result, (bool)));\r\n    }\r\n}\r\n\r\n// File: coinage-token/contracts/lib/DSMath.sol\r\n\r\n// https://github.com/dapphub/ds-math/blob/de45767/src/math.sol\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity >0.4.13;\r\n\r\ncontract DSMath {\r\n  function add(uint x, uint y) internal pure returns (uint z) {\r\n    require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n  }\r\n  function sub(uint x, uint y) internal pure returns (uint z) {\r\n    require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n  }\r\n  function mul(uint x, uint y) internal pure returns (uint z) {\r\n    require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n  }\r\n\r\n  function min(uint x, uint y) internal pure returns (uint z) {\r\n    return x <= y ? x : y;\r\n  }\r\n  function max(uint x, uint y) internal pure returns (uint z) {\r\n    return x >= y ? x : y;\r\n  }\r\n  function imin(int x, int y) internal pure returns (int z) {\r\n    return x <= y ? x : y;\r\n  }\r\n  function imax(int x, int y) internal pure returns (int z) {\r\n    return x >= y ? x : y;\r\n  }\r\n\r\n  uint constant WAD = 10 ** 18;\r\n  uint constant RAY = 10 ** 27;\r\n\r\n  function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = add(mul(x, y), WAD / 2) / WAD;\r\n  }\r\n  function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = add(mul(x, y), RAY / 2) / RAY;\r\n  }\r\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = add(mul(x, WAD), y / 2) / y;\r\n  }\r\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = add(mul(x, RAY), y / 2) / y;\r\n  }\r\n\r\n  // This famous algorithm is called \"exponentiation by squaring\"\r\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n  //\r\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n  //\r\n  // These facts are why it works:\r\n  //\r\n  //  If n is even, then x^n = (x^2)^(n/2).\r\n  //  If n is odd,  then x^n = x * x^(n-1),\r\n  //   and applying the equation for even x gives\r\n  //  x^n = x * (x^2)^((n-1) / 2).\r\n  //\r\n  //  Also, EVM division is flooring and\r\n  //  floor[(n-1) / 2] = floor[n / 2].\r\n  //\r\n  function wpow(uint x, uint n) internal pure returns (uint z) {\r\n    z = n % 2 != 0 ? x : WAD;\r\n\r\n    for (n /= 2; n != 0; n /= 2) {\r\n      x = wmul(x, x);\r\n\r\n      if (n % 2 != 0) {\r\n        z = wmul(z, x);\r\n      }\r\n    }\r\n  }\r\n\r\n  function rpow(uint x, uint n) internal pure returns (uint z) {\r\n    z = n % 2 != 0 ? x : RAY;\r\n\r\n    for (n /= 2; n != 0; n /= 2) {\r\n      x = rmul(x, x);\r\n\r\n      if (n % 2 != 0) {\r\n        z = rmul(z, x);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/stake/interfaces/SeigManagerI.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\ninterface SeigManagerI {\r\n  function registry() external view returns (address);\r\n  function depositManager() external view returns (address);\r\n  function ton() external view returns (address);\r\n  function wton() external view returns (address);\r\n  function powerton() external view returns (address);\r\n  function tot() external view returns (address);\r\n  function coinages(address layer2) external view returns (address);\r\n  function commissionRates(address layer2) external view returns (uint256);\r\n\r\n  function lastCommitBlock(address layer2) external view returns (uint256);\r\n  function seigPerBlock() external view returns (uint256);\r\n  function lastSeigBlock() external view returns (uint256);\r\n  function pausedBlock() external view returns (uint256);\r\n  function unpausedBlock() external view returns (uint256);\r\n  function DEFAULT_FACTOR() external view returns (uint256);\r\n\r\n  function deployCoinage(address layer2) external returns (bool);\r\n  function setCommissionRate(address layer2, uint256 commission, bool isCommissionRateNegative) external returns (bool);\r\n\r\n  function uncomittedStakeOf(address layer2, address account) external view returns (uint256);\r\n  function stakeOf(address layer2, address account) external view returns (uint256);\r\n  function additionalTotBurnAmount(address layer2, address account, uint256 amount) external view returns (uint256 totAmount);\r\n\r\n  function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function updateSeigniorage() external returns (bool);\r\n  function onDeposit(address layer2, address account, uint256 amount) external returns (bool);\r\n  function onWithdraw(address layer2, address account, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/stake/tokens/OnApprove.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\ncontract OnApprove is ERC165 {\r\n  constructor() public {\r\n    _registerInterface(OnApprove(this).onApprove.selector);\r\n  }\r\n\r\n  function onApprove(address owner, address spender, uint256 amount, bytes calldata data) external returns (bool);\r\n}\r\n\r\n// File: contracts/stake/tokens/ERC20OnApprove.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20OnApprove is ERC20 {\r\n  function approveAndCall(address spender, uint256 amount, bytes memory data) public returns (bool) {\r\n    require(approve(spender, amount));\r\n    _callOnApprove(msg.sender, spender, amount, data);\r\n    return true;\r\n  }\r\n\r\n  function _callOnApprove(address owner, address spender, uint256 amount, bytes memory data) internal {\r\n    bytes4 onApproveSelector = OnApprove(spender).onApprove.selector;\r\n\r\n    require(ERC165Checker._supportsInterface(spender, onApproveSelector),\r\n      \"ERC20OnApprove: spender doesn't support onApprove\");\r\n\r\n    (bool ok, bytes memory res) = spender.call(\r\n      abi.encodeWithSelector(\r\n        onApproveSelector,\r\n        owner,\r\n        spender,\r\n        amount,\r\n        data\r\n      )\r\n    );\r\n\r\n    // check if low-level call reverted or not\r\n    require(ok, string(res));\r\n\r\n    assembly {\r\n      ok := mload(add(res, 0x20))\r\n    }\r\n\r\n    // check if OnApprove.onApprove returns true or false\r\n    require(ok, \"ERC20OnApprove: failed to call onApprove\");\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/stake/tokens/AuthController.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\ninterface MinterRoleRenounceTarget {\r\n  function renounceMinter() external;\r\n}\r\n\r\ninterface PauserRoleRenounceTarget {\r\n  function renouncePauser() external;\r\n}\r\n\r\ninterface OwnableTarget {\r\n  function renounceOwnership() external;\r\n  function transferOwnership(address newOwner) external;\r\n}\r\n\r\ncontract AuthController is Ownable {\r\n  function renounceMinter(address target) public onlyOwner {\r\n    MinterRoleRenounceTarget(target).renounceMinter();\r\n  }\r\n\r\n  function renouncePauser(address target) public onlyOwner {\r\n    PauserRoleRenounceTarget(target).renouncePauser();\r\n  }\r\n\r\n  function renounceOwnership(address target) public onlyOwner {\r\n    OwnableTarget(target).renounceOwnership();\r\n  }\r\n\r\n  function transferOwnership(address target, address newOwner) public onlyOwner {\r\n    OwnableTarget(target).transferOwnership(newOwner);\r\n  }\r\n}\r\n\r\n// File: contracts/stake/tokens/SeigToken.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SeigToken is ERC20, Ownable, ERC20OnApprove, AuthController {\r\n  SeigManagerI public seigManager;\r\n  bool public callbackEnabled;\r\n\r\n  function enableCallback(bool _callbackEnabled) external onlyOwner {\r\n    callbackEnabled = _callbackEnabled;\r\n  }\r\n\r\n  function setSeigManager(SeigManagerI _seigManager) external onlyOwner {\r\n    seigManager = _seigManager;\r\n  }\r\n\r\n  //////////////////////\r\n  // Override ERC20 functions\r\n  //////////////////////\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n    return super.transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    super._transfer(sender, recipient, amount);\r\n    if (callbackEnabled && address(seigManager) != address(0)) {\r\n      require(seigManager.onTransfer(sender, recipient, amount));\r\n    }\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    super._mint(account, amount);\r\n    if (callbackEnabled && address(seigManager) != address(0)) {\r\n      require(seigManager.onTransfer(address(0), account, amount));\r\n    }\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    super._burn(account, amount);\r\n    if (callbackEnabled && address(seigManager) != address(0)) {\r\n      require(seigManager.onTransfer(account, address(0), amount));\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/stake/tokens/WTON.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WTON is DSMath, ReentrancyGuard, Ownable, ERC20Mintable, ERC20Burnable, ERC20Detailed, SeigToken, OnApprove {\r\n  using SafeERC20 for ERC20Mintable;\r\n\r\n  ERC20Mintable public ton;\r\n\r\n  constructor (\r\n    ERC20Mintable _ton\r\n  )\r\n    public\r\n    ERC20Detailed(\"Wrapped TON\", \"WTON\", 27)\r\n  {\r\n    require(ERC20Detailed(address(_ton)).decimals() == 18, \"WTON: decimals of TON must be 18\");\r\n    ton = _ton;\r\n  }\r\n\r\n  //////////////////////\r\n  // TON Approve callback\r\n  //////////////////////\r\n\r\n  function onApprove(\r\n    address owner,\r\n    address spender,\r\n    uint256 tonAmount,\r\n    bytes calldata data\r\n  ) external returns (bool) {\r\n    require(msg.sender == address(ton), \"WTON: only accept TON approve callback\");\r\n\r\n    // swap owner's TON to WTON\r\n    _swapFromTON(owner, owner, tonAmount);\r\n\r\n    uint256 wtonAmount = _toRAY(tonAmount);\r\n    (address depositManager, address layer2) = _decodeTONApproveData(data);\r\n\r\n    // approve WTON to DepositManager\r\n    _approve(owner, depositManager, wtonAmount);\r\n\r\n    // call DepositManager.onApprove to deposit WTON\r\n    bytes memory depositManagerOnApproveData = _encodeDepositManagerOnApproveData(layer2);\r\n    _callOnApprove(owner, depositManager, wtonAmount, depositManagerOnApproveData);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev data is 64 bytes of 2 addresses in left-padded 32 bytes\r\n   */\r\n  function _decodeTONApproveData(\r\n    bytes memory data\r\n  ) internal pure returns (address depositManager, address layer2) {\r\n    require(data.length == 0x40);\r\n\r\n    assembly {\r\n      depositManager := mload(add(data, 0x20))\r\n      layer2 := mload(add(data, 0x40))\r\n    }\r\n  }\r\n\r\n  function _encodeDepositManagerOnApproveData(\r\n    address layer2\r\n  ) internal pure returns (bytes memory data) {\r\n    data = new bytes(0x20);\r\n\r\n    assembly {\r\n      mstore(add(data, 0x20), layer2)\r\n    }\r\n  }\r\n\r\n\r\n  //////////////////////\r\n  // Override ERC20 functions\r\n  //////////////////////\r\n\r\n  function burnFrom(address account, uint256 amount) public {\r\n    if (isMinter(msg.sender)) {\r\n      _burn(account, amount);\r\n      return;\r\n    }\r\n\r\n    super.burnFrom(account, amount);\r\n  }\r\n\r\n  //////////////////////\r\n  // Swap functions\r\n  //////////////////////\r\n\r\n  /**\r\n   * @dev swap WTON to TON\r\n   */\r\n  function swapToTON(uint256 wtonAmount) public nonReentrant returns (bool) {\r\n    return _swapToTON(msg.sender, msg.sender, wtonAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev swap TON to WTON\r\n   */\r\n  function swapFromTON(uint256 tonAmount) public nonReentrant returns (bool) {\r\n    return _swapFromTON(msg.sender, msg.sender, tonAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev swap WTON to TON, and transfer TON\r\n   * NOTE: TON's transfer event's `from` argument is not `msg.sender` but `WTON` address.\r\n   */\r\n  function swapToTONAndTransfer(address to, uint256 wtonAmount) public nonReentrant returns (bool) {\r\n    return _swapToTON(to, msg.sender, wtonAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev swap TON to WTON, and transfer WTON\r\n   */\r\n  function swapFromTONAndTransfer(address to, uint256 tonAmount) public nonReentrant returns (bool) {\r\n    return _swapFromTON(msg.sender, to, tonAmount);\r\n  }\r\n\r\n  function renounceTonMinter() external onlyOwner {\r\n    ton.renounceMinter();\r\n  }\r\n\r\n  //////////////////////\r\n  // Internal functions\r\n  //////////////////////\r\n\r\n  function _swapToTON(address tonAccount, address wtonAccount, uint256 wtonAmount) internal returns (bool) {\r\n    _burn(wtonAccount, wtonAmount);\r\n\r\n    // mint TON if WTON contract has not enough TON to transfer\r\n    uint256 tonAmount = _toWAD(wtonAmount);\r\n    uint256 tonBalance = ton.balanceOf(address(this));\r\n    if (tonBalance < tonAmount) {\r\n      ton.mint(address(this), tonAmount.sub(tonBalance));\r\n    }\r\n\r\n    ton.safeTransfer(tonAccount, tonAmount);\r\n    return true;\r\n  }\r\n\r\n  function _swapFromTON(address tonAccount, address wtonAccount, uint256 tonAmount) internal returns (bool) {\r\n    _mint(wtonAccount, _toRAY(tonAmount));\r\n    ton.safeTransferFrom(tonAccount, address(this), tonAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev transform WAD to RAY\r\n   */\r\n  function _toRAY(uint256 v) internal pure returns (uint256) {\r\n    return v * 10 ** 9;\r\n  }\r\n\r\n  /**\r\n   * @dev transform RAY to WAD\r\n   */\r\n  function _toWAD(uint256 v) internal pure returns (uint256) {\r\n    return v / 10 ** 9;\r\n  }\r\n}\r\n\r\n// File: contracts/lib/SortitionSumTreeFactory.sol\r\n\r\n// https://github.com/kleros/kleros/blob/683145a9e6de70f5be87599daaf7372578b9d110/contracts/data-structures/SortitionSumTreeFactory.sol\r\n\r\n/**\r\n *  @reviewers: [@clesaege, @unknownunknown1, @ferittuncer]\r\n *  @auditors: []\r\n *  @bounties: [<14 days 10 ETH max payout>]\r\n *  @deployments: []\r\n */\r\n\r\npragma solidity ^0.5.12;\r\n\r\n/**\r\n *  @title SortitionSumTreeFactory\r\n *  @author Enrique Piqueras - <epiquerass@gmail.com>\r\n *  @dev A factory of trees that keep track of staked values for sortition.\r\n */\r\nlibrary SortitionSumTreeFactory {\r\n  /* Structs */\r\n\r\n  struct SortitionSumTree {\r\n    uint K; // The maximum number of childs per node.\r\n    // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\r\n    uint[] stack;\r\n    uint[] nodes;\r\n    // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\r\n    mapping(bytes32 => uint) IDsToNodeIndexes;\r\n    mapping(uint => bytes32) nodeIndexesToIDs;\r\n  }\r\n\r\n  /* Storage */\r\n\r\n  struct SortitionSumTrees {\r\n    mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\r\n  }\r\n\r\n  /* Public */\r\n\r\n  /**\r\n   *  @dev Create a sortition sum tree at the specified key.\r\n   *  @param _key The key of the new tree.\r\n   *  @param _K The number of children each node in the tree should have.\r\n   */\r\n  function createTree(SortitionSumTrees storage self, bytes32 _key, uint _K) internal {\r\n    SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n    require(tree.K == 0, \"Tree already exists.\");\r\n    require(_K > 1, \"K must be greater than one.\");\r\n    tree.K = _K;\r\n    tree.stack.length = 0;\r\n    tree.nodes.length = 0;\r\n    tree.nodes.push(0);\r\n  }\r\n\r\n  /**\r\n   *  @dev Set a value of a tree.\r\n   *  @param _key The key of the tree.\r\n   *  @param _value The new value.\r\n   *  @param _ID The ID of the value.\r\n   *  `O(log_k(n))` where\r\n   *  `k` is the maximum number of childs per node in the tree,\r\n   *   and `n` is the maximum number of nodes ever appended.\r\n   */\r\n  function set(SortitionSumTrees storage self, bytes32 _key, uint _value, bytes32 _ID) internal {\r\n    SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n    uint treeIndex = tree.IDsToNodeIndexes[_ID];\r\n\r\n    if (treeIndex == 0) { // No existing node.\r\n      if (_value != 0) { // Non zero value.\r\n        // Append.\r\n        // Add node.\r\n        if (tree.stack.length == 0) { // No vacant spots.\r\n          // Get the index and append the value.\r\n          treeIndex = tree.nodes.length;\r\n          tree.nodes.push(_value);\r\n\r\n          // Potentially append a new node and make the parent a sum node.\r\n          if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) { // Is first child.\r\n            uint parentIndex = treeIndex / tree.K;\r\n            bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\r\n            uint newIndex = treeIndex + 1;\r\n            tree.nodes.push(tree.nodes[parentIndex]);\r\n            delete tree.nodeIndexesToIDs[parentIndex];\r\n            tree.IDsToNodeIndexes[parentID] = newIndex;\r\n            tree.nodeIndexesToIDs[newIndex] = parentID;\r\n          }\r\n        } else { // Some vacant spot.\r\n          // Pop the stack and append the value.\r\n          treeIndex = tree.stack[tree.stack.length - 1];\r\n          tree.stack.length--;\r\n          tree.nodes[treeIndex] = _value;\r\n        }\r\n\r\n        // Add label.\r\n        tree.IDsToNodeIndexes[_ID] = treeIndex;\r\n        tree.nodeIndexesToIDs[treeIndex] = _ID;\r\n\r\n        updateParents(self, _key, treeIndex, true, _value);\r\n      }\r\n    } else { // Existing node.\r\n      if (_value == 0) { // Zero value.\r\n        // Remove.\r\n        // Remember value and set to 0.\r\n        uint value = tree.nodes[treeIndex];\r\n        tree.nodes[treeIndex] = 0;\r\n\r\n        // Push to stack.\r\n        tree.stack.push(treeIndex);\r\n\r\n        // Clear label.\r\n        delete tree.IDsToNodeIndexes[_ID];\r\n        delete tree.nodeIndexesToIDs[treeIndex];\r\n\r\n        updateParents(self, _key, treeIndex, false, value);\r\n      } else if (_value != tree.nodes[treeIndex]) { // New, non zero value.\r\n        // Set.\r\n        bool plusOrMinus = tree.nodes[treeIndex] <= _value;\r\n        uint plusOrMinusValue = plusOrMinus ? _value - tree.nodes[treeIndex] : tree.nodes[treeIndex] - _value;\r\n        tree.nodes[treeIndex] = _value;\r\n\r\n        updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Public Views */\r\n\r\n  /**\r\n   *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\r\n   *  @param _key The key of the tree to get the leaves from.\r\n   *  @param _cursor The pagination cursor.\r\n   *  @param _count The number of items to return.\r\n   *  @return The index at which leaves start, the values of the returned leaves, and whether there are more for pagination.\r\n   *  `O(n)` where\r\n   *  `n` is the maximum number of nodes ever appended.\r\n   */\r\n  function queryLeafs(\r\n    SortitionSumTrees storage self,\r\n    bytes32 _key,\r\n    uint _cursor,\r\n    uint _count\r\n  ) internal view returns(uint startIndex, uint[] memory values, bool hasMore) {\r\n    SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n\r\n    // Find the start index.\r\n    for (uint i = 0; i < tree.nodes.length; i++) {\r\n      if ((tree.K * i) + 1 >= tree.nodes.length) {\r\n        startIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Get the values.\r\n    uint loopStartIndex = startIndex + _cursor;\r\n    values = new uint[](loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count);\r\n    uint valuesIndex = 0;\r\n    for (uint j = loopStartIndex; j < tree.nodes.length; j++) {\r\n      if (valuesIndex < _count) {\r\n        values[valuesIndex] = tree.nodes[j];\r\n        valuesIndex++;\r\n      } else {\r\n        hasMore = true;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @dev Draw an ID from a tree using a number. Note that this function reverts if the sum of all values in the tree is 0.\r\n   *  @param _key The key of the tree.\r\n   *  @param _drawnNumber The drawn number.\r\n   *  @return The drawn ID.\r\n   *  `O(k * log_k(n))` where\r\n   *  `k` is the maximum number of childs per node in the tree,\r\n   *   and `n` is the maximum number of nodes ever appended.\r\n   */\r\n  function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) internal view returns(bytes32 ID) {\r\n    SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n    uint treeIndex = 0;\r\n    uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\r\n\r\n    while ((tree.K * treeIndex) + 1 < tree.nodes.length)  // While it still has children.\r\n      for (uint i = 1; i <= tree.K; i++) { // Loop over children.\r\n        uint nodeIndex = (tree.K * treeIndex) + i;\r\n        uint nodeValue = tree.nodes[nodeIndex];\r\n\r\n        if (currentDrawnNumber >= nodeValue) currentDrawnNumber -= nodeValue; // Go to the next child.\r\n        else { // Pick this child.\r\n          treeIndex = nodeIndex;\r\n          break;\r\n        }\r\n      }\r\n\r\n    ID = tree.nodeIndexesToIDs[treeIndex];\r\n  }\r\n\r\n  /** @dev Gets a specified ID's associated value.\r\n   *  @param _key The key of the tree.\r\n   *  @param _ID The ID of the value.\r\n   *  @return The associated value.\r\n   */\r\n  function stakeOf(SortitionSumTrees storage self, bytes32 _key, bytes32 _ID) internal view returns(uint value) {\r\n    SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n    uint treeIndex = tree.IDsToNodeIndexes[_ID];\r\n\r\n    if (treeIndex == 0) value = 0;\r\n    else value = tree.nodes[treeIndex];\r\n  }\r\n\r\n  /* Private */\r\n\r\n  /**\r\n   *  @dev Update all the parents of a node.\r\n   *  @param _key The key of the tree to update.\r\n   *  @param _treeIndex The index of the node to start from.\r\n   *  @param _plusOrMinus Wether to add (true) or substract (false).\r\n   *  @param _value The value to add or substract.\r\n   *  `O(log_k(n))` where\r\n   *  `k` is the maximum number of childs per node in the tree,\r\n   *   and `n` is the maximum number of nodes ever appended.\r\n   */\r\n  function updateParents(SortitionSumTrees storage self, bytes32 _key, uint _treeIndex, bool _plusOrMinus, uint _value) private {\r\n    SortitionSumTree storage tree = self.sortitionSumTrees[_key];\r\n\r\n    uint parentIndex = _treeIndex;\r\n    while (parentIndex != 0) {\r\n      parentIndex = (parentIndex - 1) / tree.K;\r\n      tree.nodes[parentIndex] = _plusOrMinus ? tree.nodes[parentIndex] + _value : tree.nodes[parentIndex] - _value;\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/stake/interfaces/DepositManagerI.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\ninterface DepositManagerI {\r\n  function owner() external view returns (address);\r\n  function wton() external view returns (address);\r\n  function registry() external view returns (address);\r\n  function seigManager() external view returns (address);\r\n\r\n  function accStaked(address layer2, address account) external view returns (uint256 wtonAmount);\r\n  function accStakedLayer2(address layer2) external view returns (uint256 wtonAmount);\r\n  function accStakedAccount(address account) external view returns (uint256 wtonAmount);\r\n\r\n  function pendingUnstaked(address layer2, address account) external view returns (uint256 wtonAmount);\r\n  function pendingUnstakedLayer2(address layer2) external view returns (uint256 wtonAmount);\r\n  function pendingUnstakedAccount(address account) external view returns (uint256 wtonAmount);\r\n\r\n  function accUnstaked(address layer2, address account) external view returns (uint256 wtonAmount);\r\n  function accUnstakedLayer2(address layer2) external view returns (uint256 wtonAmount);\r\n  function accUnstakedAccount(address account) external view returns (uint256 wtonAmount);\r\n\r\n\r\n  function withdrawalRequestIndex(address layer2, address account) external view returns (uint256 index);\r\n  function withdrawalRequest(address layer2, address account, uint256 index) external view returns (uint128 withdrawableBlockNumber, uint128 amount, bool processed );\r\n\r\n  function WITHDRAWAL_DELAY() external view returns (uint256);\r\n\r\n  function setSeigManager(address seigManager) external;\r\n  function deposit(address layer2, uint256 amount) external returns (bool);\r\n  function requestWithdrawal(address layer2, uint256 amount) external returns (bool);\r\n  function processRequest(address layer2) external returns (bool);\r\n  function requestWithdrawalAll(address layer2) external returns (bool);\r\n  function processRequests(address layer2, uint256 n) external returns (bool);\r\n\r\n  function numRequests(address layer2, address account) external view returns (uint256);\r\n  function numPendingRequests(address layer2, address account) external view returns (uint256);\r\n\r\n  function slash(address layer2, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/stake/interfaces/PowerTONI.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\ninterface PowerTONI {\r\n  function seigManager() external view returns (address);\r\n  function wton() external view returns (address);\r\n\r\n  function currentRound() external view returns (uint256);\r\n  function roundDuration() external view returns (uint256);\r\n  function totalDeposits() external view returns (uint256);\r\n\r\n  function winnerOf(uint256 round) external view returns (address);\r\n  function powerOf(address account) external view returns (uint256);\r\n\r\n  function init() external;\r\n  function start() external;\r\n  function endRound() external;\r\n\r\n  function onDeposit(address layer2, address account, uint256 amount) external;\r\n  function onWithdraw(address layer2, address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/stake/powerton/PowerTON.sol\r\n\r\npragma solidity ^0.5.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PowerTON is Ownable, Pausable, AuthController, PowerTONI {\r\n  using SafeMath for *;\r\n  using SafeERC20 for IERC20;\r\n  using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\r\n\r\n  struct Round {\r\n    uint64  startTime;\r\n    uint64  endTime;\r\n    uint256 reward;\r\n    address winner;\r\n  }\r\n\r\n  // contracts\r\n  address internal _seigManager;\r\n  address internal _wton;\r\n\r\n  // rounds\r\n  uint256 internal _currentRound;\r\n  // TODO: consider block nubmer\r\n  uint256 internal _roundDuration; // unix timestamp\r\n  mapping(uint256 => Round) public rounds;\r\n\r\n  // sortition\r\n  SortitionSumTreeFactory.SortitionSumTrees internal sortitionSumTrees;\r\n  bool public initialized;\r\n\r\n  bytes32 constant internal TREE_KEY = keccak256(\"power-balances\");\r\n  bytes32 constant internal TREE_KEY_PREFIX = keccak256(\"power-balances\");\r\n  uint256 constant internal TREE_NUM_CHILDREN = 16;\r\n\r\n  // balances\r\n  uint256 internal _totalDeposits;\r\n\r\n  // randomness\r\n  uint256 internal constant maskLast8Bits = uint256(0xff);\r\n  uint256 internal constant maskFirst248Bits = uint256(~0xff);\r\n\r\n\r\n  //////////////////////////////\r\n  // Modifiers\r\n  //////////////////////////////\r\n\r\n  modifier checkRound() {\r\n    if (currentRoundFinished()) {\r\n      _endRound();\r\n    }\r\n    _;\r\n  }\r\n\r\n  //////////////////////////////\r\n  // Events\r\n  //////////////////////////////\r\n\r\n  event RoundStart(uint256 round, uint256 startTime, uint256 endTime);\r\n  event RoundEnd(uint256 round, address winner, uint256 reward);\r\n  event PowerIncreased(address indexed account, uint256 amount);\r\n  event PowerDecreased(address indexed account, uint256 amount);\r\n\r\n  //////////////////////////////\r\n  // Constructor\r\n  //////////////////////////////\r\n\r\n  constructor (\r\n    address seigManager,\r\n    address wton,\r\n    uint256 roundDuration\r\n  ) public {\r\n    require(roundDuration > 0);\r\n\r\n    _seigManager = seigManager;\r\n    _wton = wton;\r\n    _roundDuration = roundDuration;\r\n  }\r\n\r\n  /**\r\n   * @dev set SeigManager contract, only by owner.\r\n   */\r\n  function setSeigManager(address seigManager) external onlyOwner {\r\n    _seigManager = seigManager;\r\n  }\r\n\r\n  function init() external onlyOwner {\r\n    require(!initialized);\r\n    sortitionSumTrees.createTree(TREE_KEY, TREE_NUM_CHILDREN);\r\n    initialized = true;\r\n  }\r\n\r\n  function start() external onlyOwner {\r\n    require(_currentRound == 0, \"PowerTON: current round is not zero\");\r\n    require(rounds[_currentRound].startTime == 0 && rounds[_currentRound].endTime == 0, \"PowerTON: round already started\");\r\n    _startRound(0);\r\n  }\r\n\r\n  function powerOf(address account) external view returns (uint256) {\r\n    return sortitionSumTrees.stakeOf(TREE_KEY, _getID(account));\r\n  }\r\n\r\n  /**\r\n   * @dev end current round\r\n   */\r\n  function endRound() external {\r\n    require(currentRoundFinished(), \"PowerTON: round not finished\");\r\n    _endRound();\r\n  }\r\n\r\n  function roundStarted(uint256 round) public view returns (bool) {\r\n    return rounds[round].startTime != 0 && rounds[round].endTime != 0;\r\n  }\r\n\r\n  function roundFinished(uint256 round) public view returns (bool) {\r\n    return roundStarted(round) &&\r\n      rounds[round].endTime < block.timestamp &&\r\n      rounds[round].winner == address(0);\r\n  }\r\n\r\n  function currentRoundFinished() public view returns (bool) {\r\n    return roundFinished(_currentRound);\r\n  }\r\n\r\n  function _endRound() internal {\r\n    // short circuit in case of no deposit\r\n    if (_totalDeposits == 0) {\r\n      return;\r\n    }\r\n\r\n    uint256 round = _currentRound;\r\n    Round storage r = rounds[round];\r\n\r\n    uint256 n = _seed(block.number - 1) % _totalDeposits;\r\n    address winner = _recoverID(sortitionSumTrees.draw(TREE_KEY, n));\r\n    require(winner != address(0), \"PowerTON: no winner\");\r\n    r.winner = winner;\r\n\r\n\r\n    uint256 reward = IERC20(_wton).balanceOf(address(this));\r\n\r\n    r.reward = reward;\r\n\r\n    emit RoundEnd(round, winner, reward);\r\n\r\n    _currentRound += 1;\r\n    _startRound(_currentRound);\r\n\r\n    WTON(_wton).swapToTONAndTransfer(winner, reward);\r\n  }\r\n\r\n  //////////////////////////////\r\n  // SeigManager\r\n  //////////////////////////////\r\n\r\n  function onDeposit(\r\n    address layer2,\r\n    address account,\r\n    uint256 amount\r\n  ) external checkRound {\r\n    require(msg.sender == _seigManager);\r\n    _increaseEffectiveBalance(account, amount);\r\n    _totalDeposits = _totalDeposits.add(amount);\r\n\r\n    emit PowerIncreased(account, amount);\r\n  }\r\n\r\n  function onWithdraw(\r\n    address layer2,\r\n    address account,\r\n    uint256 amount\r\n  ) external checkRound {\r\n    require(msg.sender == _seigManager);\r\n    uint256 v = _decreaseEffectiveBalance(account, amount);\r\n    _totalDeposits = _totalDeposits.sub(v);\r\n    emit PowerDecreased(account, v);\r\n  }\r\n\r\n  //////////////////////////////\r\n  // External storage getters\r\n  //////////////////////////////\r\n\r\n  function seigManager() external view returns (address) { return _seigManager; }\r\n  function wton() external view returns (address) { return _wton; }\r\n  function currentRound() external view returns (uint256) { return _currentRound; }\r\n  function roundDuration() external view returns (uint256) { return _roundDuration; }\r\n  function totalDeposits() external view returns (uint256) { return _totalDeposits; }\r\n  function winnerOf(uint256 round) external view returns (address) {\r\n    return rounds[round].winner;\r\n  }\r\n\r\n  //////////////////////////////\r\n  // Internal functions\r\n  //////////////////////////////\r\n\r\n  // TODO: enable upgradability\r\n  // TODO: use other entrophy source\r\n  // https://github.com/cryptocopycats/awesome-cryptokitties/blob/master/contracts/GeneScience.sol#L111-L133\r\n  function _seed(uint256 _targetBlock) internal view returns (uint256 randomN) {\r\n    uint256 h = uint256(blockhash(_targetBlock));\r\n\r\n    if (h == 0) {\r\n      _targetBlock = (block.number & maskFirst248Bits) + (_targetBlock & maskLast8Bits);\r\n      if (_targetBlock >= block.number) _targetBlock -= 256;\r\n\r\n      h = uint256(blockhash(_targetBlock));\r\n    }\r\n\r\n    randomN = (h + block.number + uint256(blockhash(block.number - 1))) * h * h * _totalDeposits;\r\n  }\r\n\r\n  function _startRound(uint256 round) internal {\r\n    require(\r\n      round == 0 ||\r\n      (rounds[round - 1].endTime < block.timestamp\r\n        && rounds[round - 1].winner != address(0))\r\n    );\r\n\r\n    Round storage r = rounds[round];\r\n    require(r.startTime == 0 && r.endTime == 0 && r.winner == address(0));\r\n\r\n    uint64 startTime = uint64(block.timestamp);\r\n    uint64 endTime = uint64(block.timestamp + _roundDuration);\r\n    r.startTime = startTime;\r\n    r.endTime = endTime;\r\n\r\n    emit RoundStart(round, startTime, endTime);\r\n  }\r\n\r\n  function _increaseEffectiveBalance(address account, uint256 amount) internal {\r\n    bytes32 id = _getID(account);\r\n    uint256 value = sortitionSumTrees.stakeOf(TREE_KEY, id).add(amount);\r\n\r\n    sortitionSumTrees.set(TREE_KEY, value, id);\r\n  }\r\n\r\n  function _decreaseEffectiveBalance(address account, uint256 amount) internal returns (uint256) {\r\n    bytes32 id = _getID(account);\r\n\r\n    uint256 stake = sortitionSumTrees.stakeOf(TREE_KEY, id);\r\n    uint256 value = _sub0(stake, amount);\r\n\r\n    sortitionSumTrees.set(TREE_KEY, value, id);\r\n    return stake - value;\r\n  }\r\n\r\n  /**\r\n   * @dev return a - b if a > b, otherwise 0\r\n   */\r\n  function _sub0(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a > b) return a - b;\r\n    return 0;\r\n  }\r\n\r\n  function _getID(address account) internal pure returns (bytes32) {\r\n    return bytes32(uint256(account));\r\n  }\r\n\r\n  function _recoverID(bytes32 id) internal pure returns (address) {\r\n    return address(uint160(uint256(id)));\r\n  }\r\n\r\n  function _getTreeKey(uint256 round) internal pure returns (bytes32 k) {\r\n    require(round < 2 ** 224);\r\n\r\n    k = bytes32(TREE_KEY_PREFIX);\r\n    assembly {\r\n      k := add(k, round)\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seigManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wton\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundDuration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PowerDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PowerIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RoundEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"RoundStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"powerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"roundFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"roundStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seigManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"seigManager\",\"type\":\"address\"}],\"name\":\"setSeigManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"winnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PowerTON","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000710936500ac59e8551331871cbad3d33d5e0d909000000000000000000000000c4a11aaf6ea915ed7ac194161d2fc9384f15bff20000000000000000000000000000000000000000000000000000000000127500","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fff3a1db918e175c015746a352838abe147f54b05d651a68aedf3e7270b82679"}]}