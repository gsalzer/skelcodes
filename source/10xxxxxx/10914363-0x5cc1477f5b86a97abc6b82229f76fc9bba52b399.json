{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n//Slightly modified SafeMath library - includes a min and max function, removes useless div function\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256 c) {\r\n        if (b > 0) {\r\n            c = a + b;\r\n            assert(c >= a);\r\n        } else {\r\n            c = a + b;\r\n            assert(c <= a);\r\n        }\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    function max(int256 a, int256 b) internal pure returns (uint256) {\r\n        return a > b ? uint256(a) : uint256(b);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256 c) {\r\n        if (b > 0) {\r\n            c = a - b;\r\n            assert(c <= a);\r\n        } else {\r\n            c = a - b;\r\n            assert(c >= a);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Tellor Oracle Storage Library\r\n * @dev Contains all the variables/structs used by Tellor\r\n */\r\n\r\nlibrary TellorStorage {\r\n    //Internal struct for use in proof-of-work submission\r\n    struct Details {\r\n        uint256 value;\r\n        address miner;\r\n    }\r\n\r\n    struct Dispute {\r\n        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\r\n        int256 tally; //current tally of votes for - against measure\r\n        bool executed; //is the dispute settled\r\n        bool disputeVotePassed; //did the vote pass?\r\n        bool isPropFork; //true for fork proposal NEW\r\n        address reportedMiner; //miner who alledgedly submitted the 'bad value' will get disputeFee if dispute vote fails\r\n        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\r\n        address proposedForkAddress; //new fork address (if fork proposal)\r\n        mapping(bytes32 => uint256) disputeUintVars;\r\n        //Each of the variables below is saved in the mapping disputeUintVars for each disputeID\r\n        //e.g. TellorStorageStruct.DisputeById[disputeID].disputeUintVars[keccak256(\"requestId\")]\r\n        //These are the variables saved in this mapping:\r\n        // uint keccak256(\"requestId\");//apiID of disputed value\r\n        // uint keccak256(\"timestamp\");//timestamp of distputed value\r\n        // uint keccak256(\"value\"); //the value being disputed\r\n        // uint keccak256(\"minExecutionDate\");//7 days from when dispute initialized\r\n        // uint keccak256(\"numberOfVotes\");//the number of parties who have voted on the measure\r\n        // uint keccak256(\"blockNumber\");// the blocknumber for which votes will be calculated from\r\n        // uint keccak256(\"minerSlot\"); //index in dispute array\r\n        // uint keccak256(\"fee\"); //fee paid corresponding to dispute\r\n        mapping(address => bool) voted; //mapping of address to whether or not they voted\r\n    }\r\n\r\n    struct StakeInfo {\r\n        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute 4=ReadyForUnlocking 5=Unlocked\r\n        uint256 startDate; //stake start date\r\n    }\r\n\r\n    //Internal struct to allow balances to be queried by blocknumber for voting purposes\r\n    struct Checkpoint {\r\n        uint128 fromBlock; // fromBlock is the block number that the value was generated from\r\n        uint128 value; // value is the amount of tokens at a specific block number\r\n    }\r\n\r\n    struct Request {\r\n        string queryString; //id to string api\r\n        string dataSymbol; //short name for api request\r\n        bytes32 queryHash; //hash of api string and granularity e.g. keccak256(abi.encodePacked(_sapi,_granularity))\r\n        uint256[] requestTimestamps; //array of all newValueTimestamps requested\r\n        mapping(bytes32 => uint256) apiUintVars;\r\n        //Each of the variables below is saved in the mapping apiUintVars for each api request\r\n        //e.g. requestDetails[_requestId].apiUintVars[keccak256(\"totalTip\")]\r\n        //These are the variables saved in this mapping:\r\n        // uint keccak256(\"granularity\"); //multiplier for miners\r\n        // uint keccak256(\"requestQPosition\"); //index in requestQ\r\n        // uint keccak256(\"totalTip\");//bonus portion of payout\r\n        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\r\n        //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\r\n        mapping(uint256 => uint256) finalValues;\r\n        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\r\n        mapping(uint256 => address[5]) minersByValue;\r\n        mapping(uint256 => uint256[5]) valuesByTimestamp;\r\n    }\r\n\r\n    struct TellorStorageStruct {\r\n        bytes32 currentChallenge; //current challenge to be solved\r\n        uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\r\n        uint256[] newValueTimestamps; //array of all timestamps requested\r\n        Details[5] currentMiners; //This struct is for organizing the five mined values to find the median\r\n        mapping(bytes32 => address) addressVars;\r\n        //Address fields in the Tellor contract are saved the addressVars mapping\r\n        //e.g. addressVars[keccak256(\"tellorContract\")] = address\r\n        //These are the variables saved in this mapping:\r\n        // address keccak256(\"tellorContract\");//Tellor address\r\n        // address  keccak256(\"_owner\");//Tellor Owner address\r\n        // address  keccak256(\"_deity\");//Tellor Owner that can do things at will\r\n        // address  keccak256(\"pending_owner\"); // The proposed new owner\r\n        mapping(bytes32 => uint256) uintVars;\r\n        //uint fields in the Tellor contract are saved the uintVars mapping\r\n        //e.g. uintVars[keccak256(\"decimals\")] = uint\r\n        //These are the variables saved in this mapping:\r\n        // keccak256(\"decimals\");    //18 decimal standard ERC20\r\n        // keccak256(\"disputeFee\");//cost to dispute a mined value\r\n        // keccak256(\"disputeCount\");//totalHistoricalDisputes\r\n        // keccak256(\"total_supply\"); //total_supply of the token in circulation\r\n        // keccak256(\"stakeAmount\");//stakeAmount for miners (we can cut gas if we just hardcode it in...or should it be variable?)\r\n        // keccak256(\"stakerCount\"); //number of parties currently staked\r\n        // keccak256(\"timeOfLastNewValue\"); // time of last challenge solved\r\n        // keccak256(\"difficulty\"); // Difficulty of current block\r\n        // keccak256(\"currentTotalTips\"); //value of highest api/timestamp PayoutPool\r\n        // keccak256(\"currentRequestId\"); //API being mined--updates with the ApiOnQ Id\r\n        // keccak256(\"requestCount\"); // total number of requests through the system\r\n        // keccak256(\"slotProgress\");//Number of miners who have mined this value so far\r\n        // keccak256(\"miningReward\");//Mining Reward in PoWo tokens given to all miners per value\r\n        // keccak256(\"timeTarget\"); //The time between blocks (mined Oracle values)\r\n        // keccak256(\"_tblock\"); //\r\n        // keccak256(\"runningTips\"); // VAriable to track running tips\r\n        // keccak256(\"currentReward\"); // The current reward\r\n        // keccak256(\"devShare\"); // The amount directed towards th devShare\r\n        // keccak256(\"currentTotalTips\"); //\r\n        //This is a boolean that tells you if a given challenge has been completed by a given miner\r\n        mapping(bytes32 => mapping(address => bool)) minersByChallenge;\r\n        mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\r\n        mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\r\n        mapping(uint256 => Dispute) disputesById; //disputeId=> Dispute details\r\n        mapping(address => Checkpoint[]) balances; //balances of a party given blocks\r\n        mapping(address => mapping(address => uint256)) allowed; //allowance for a given party and approver\r\n        mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\r\n        mapping(uint256 => Request) requestDetails; //mapping of apiID to details\r\n        mapping(bytes32 => uint256) requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\r\n        mapping(bytes32 => uint256) disputeIdByDisputeHash; //maps a hash to an ID for each dispute\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n* @title Tellor Transfer\r\n* @dev Contains the methods related to transfers and ERC20. Tellor.sol and TellorGetters.sol\r\n* reference this library for function's logic.\r\n*/\r\nlibrary TellorTransfer {\r\n    using SafeMath for uint256;\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value); //ERC20 Approval event\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); //ERC20 Transfer Event\r\n\r\n    bytes32 public constant stakeAmount = 0x7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2; //keccak256(\"stakeAmount\")\r\n\r\n    /*Functions*/\r\n\r\n    /**\r\n    * @dev Allows for a transfer of tokens to _to\r\n    * @param _to The address to send tokens to\r\n    * @param _amount The amount of tokens to send\r\n    * @return true if transfer is successful\r\n    */\r\n    function transfer(TellorStorage.TellorStorageStruct storage self, address _to, uint256 _amount) public returns (bool success) {\r\n        doTransfer(self, msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Send _amount tokens to _to from _from on the condition it\r\n    * is approved by _from\r\n    * @param _from The address holding the tokens being transferred\r\n    * @param _to The address of the recipient\r\n    * @param _amount The amount of tokens to be transferred\r\n    * @return True if the transfer was successful\r\n    */\r\n    function transferFrom(TellorStorage.TellorStorageStruct storage self, address _from, address _to, uint256 _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(self.allowed[_from][msg.sender] >= _amount, \"Allowance is wrong\");\r\n        self.allowed[_from][msg.sender] -= _amount;\r\n        doTransfer(self, _from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev This function approves a _spender an _amount of tokens to use\r\n    * @param _spender address\r\n    * @param _amount amount the spender is being approved for\r\n    * @return true if spender appproved successfully\r\n    */\r\n    function approve(TellorStorage.TellorStorageStruct storage self, address _spender, uint256 _amount) public returns (bool) {\r\n        require(_spender != address(0), \"Spender is 0-address\");\r\n        require(self.allowed[msg.sender][_spender] == 0 || _amount == 0, \"Spender is already approved\");\r\n        self.allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @param _user address of party with the balance\r\n    * @param _spender address of spender of parties said balance\r\n    * @return Returns the remaining allowance of tokens granted to the _spender from the _user\r\n    */\r\n    function allowance(TellorStorage.TellorStorageStruct storage self, address _user, address _spender) public view returns (uint256) {\r\n        return self.allowed[_user][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Completes POWO transfers by updating the balances on the current block number\r\n    * @param _from address to transfer from\r\n    * @param _to addres to transfer to\r\n    * @param _amount to transfer\r\n    */\r\n    function doTransfer(TellorStorage.TellorStorageStruct storage self, address _from, address _to, uint256 _amount) public {\r\n        require(_amount != 0, \"Tried to send non-positive amount\");\r\n        require(_to != address(0), \"Receiver is 0 address\");\r\n        require(allowedToTrade(self, _from, _amount), \"Should have sufficient balance to trade\");\r\n        uint256 previousBalance = balanceOf(self, _from);\r\n        updateBalanceAtNow(self.balances[_from], previousBalance - _amount);\r\n        previousBalance = balanceOf(self,_to);\r\n        require(previousBalance + _amount >= previousBalance, \"Overflow happened\"); // Check for overflow\r\n        updateBalanceAtNow(self.balances[_to], previousBalance + _amount);\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets balance of owner specified\r\n    * @param _user is the owner address used to look up the balance\r\n    * @return Returns the balance associated with the passed in _user\r\n    */\r\n    function balanceOf(TellorStorage.TellorStorageStruct storage self, address _user) public view returns (uint256) {\r\n        return balanceOfAt(self, _user, block.number);\r\n    }\r\n\r\n    /**\r\n    * @dev Queries the balance of _user at a specific _blockNumber\r\n    * @param _user The address from which the balance will be retrieved\r\n    * @param _blockNumber The block number when the balance is queried\r\n    * @return The balance at _blockNumber specified\r\n    */\r\n    function balanceOfAt(TellorStorage.TellorStorageStruct storage self, address _user, uint256 _blockNumber) public view returns (uint256) {\r\n        TellorStorage.Checkpoint[] storage checkpoints = self.balances[_user];\r\n        if (checkpoints.length == 0|| checkpoints[0].fromBlock > _blockNumber) {\r\n            return 0;\r\n        } else {\r\n            if (_blockNumber >= checkpoints[checkpoints.length - 1].fromBlock) return checkpoints[checkpoints.length - 1].value;\r\n            // Binary search of the value in the array\r\n            uint256 min = 0;\r\n            uint256 max = checkpoints.length - 2;\r\n            while (max > min) {\r\n                uint256 mid = (max + min + 1) / 2;\r\n                if  (checkpoints[mid].fromBlock ==_blockNumber){\r\n                    return checkpoints[mid].value;\r\n                }else if(checkpoints[mid].fromBlock < _blockNumber) {\r\n                    min = mid;\r\n                } else {\r\n                    max = mid - 1;\r\n                }\r\n            }\r\n            return checkpoints[min].value;\r\n        }\r\n    }\r\n    /**\r\n    * @dev This function returns whether or not a given user is allowed to trade a given amount\r\n    * and removing the staked amount from their balance if they are staked\r\n    * @param _user address of user\r\n    * @param _amount to check if the user can spend\r\n    * @return true if they are allowed to spend the amount being checked\r\n    */\r\n    function allowedToTrade(TellorStorage.TellorStorageStruct storage self, address _user, uint256 _amount) public view returns (bool) { \r\n        if (self.stakerDetails[_user].currentStatus != 0 && self.stakerDetails[_user].currentStatus < 5) {\r\n            //Subtracts the stakeAmount from balance if the _user is staked\r\n            if (balanceOf(self, _user)- self.uintVars[stakeAmount] >= _amount) {\r\n                return true;\r\n            }\r\n            return false;\r\n        } \r\n        return (balanceOf(self, _user) >= _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Updates balance for from and to on the current block number via doTransfer\r\n    * @param checkpoints gets the mapping for the balances[owner]\r\n    * @param _value is the new balance\r\n    */\r\n    function updateBalanceAtNow(TellorStorage.Checkpoint[] storage checkpoints, uint256 _value) public {\r\n        if (checkpoints.length == 0 || checkpoints[checkpoints.length - 1].fromBlock != block.number) {\r\n           checkpoints.push(TellorStorage.Checkpoint({\r\n                fromBlock : uint128(block.number),\r\n                value : uint128(_value)\r\n            }));\r\n        } else {\r\n            TellorStorage.Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeAmount\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TellorTransfer","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"OSL-3.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://506b8f81b352cebcd3500f6b4737721b86d3e106e9966b9bc386360f66040f55"}]}