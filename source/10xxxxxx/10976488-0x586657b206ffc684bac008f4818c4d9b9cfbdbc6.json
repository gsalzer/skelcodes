{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\ncontract Permissions {\r\n\r\n  mapping (address=>bool) public permits;\r\n\r\n// all events will be saved as log files\r\n  event AddPermit(address _addr);\r\n  event RemovePermit(address _addr);\r\n\r\n  constructor() public {\r\n    permits[msg.sender] = true;\r\n  }\r\n\r\n  \r\n  modifier onlyPermits(){\r\n    require(permits[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  function isPermit(address _addr) public view returns(bool){\r\n    return permits[_addr];\r\n  }\r\n\r\n  function addPermit(address _addr) public onlyPermits{\r\n    require(permits[_addr] == false);\r\n    permits[_addr] = true;\r\n    emit AddPermit(_addr);\r\n  }\r\n\r\n\r\n\r\n  function removePermit(address _addr) public onlyPermits{\r\n    require(_addr != msg.sender);\r\n    permits[_addr] = false;\r\n    emit RemovePermit(_addr);\r\n  }\r\n  \r\n\r\n\r\n}\r\n\r\ncontract SZO {\r\n\t   \r\n       function haveKYC(address _addr) public view returns(bool);\r\n\t   function createKYCData(bytes32 _KycData1, bytes32 _kycData2,address  _wallet) public returns(uint256);\r\n\t   function getKYCData(address _wallet) public view returns(bytes32 _data1,bytes32 _data2);\r\n}\r\n\r\n\r\n\r\n\r\n// for end user that already kyc and want to kyc more address\r\ncontract SZOKYCPool is Permissions {\r\n    \r\n    event MakeKYC(address indexed _addr);\r\n    event MakePartnerKYC(address indexed _addr);\r\n\r\n    bytes32 data2NoKYC;\r\n    bytes32 data2Pools;\r\n//    bytes32 public merkleRoot;\r\n    \r\n    \r\n    SZO szoToken;\r\n    // Onwer can kyc more address. but more address can't kyc to other address\r\n    mapping(address=>bool) public extendedKYC;\r\n    mapping(address=>bytes32) partnerData1s;\r\n    mapping(address=>bool) public partnerAllows;\r\n    mapping(bytes32=>bool) public merkleRoot;\r\n    \r\n    constructor() public {\r\n        szoToken = SZO(0x6086b52Cab4522b4B0E8aF9C3b2c5b8994C36ba6); // MAINNET\r\n        data2NoKYC = stringToBytes32(\"NOFULLKYC\");\r\n        data2Pools = stringToBytes32(\"NO ENCODE\");\r\n    }\r\n    \r\n     function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n             bytes memory tempEmptyStringTest = bytes(source);\r\n            if (tempEmptyStringTest.length == 0) {\r\n                return 0x0;\r\n             }\r\n\r\n            assembly {\r\n                 result := mload(add(source, 32))\r\n            }\r\n    }\r\n    \r\n    function verify(bytes32 root,bytes32 leaf,bytes32[] memory proof) public pure returns (bool)\r\n    {\r\n      bytes32 computedHash = leaf;\r\n\r\n      for (uint256 i = 0; i < proof.length; i++) {\r\n        bytes32 proofElement = proof[i];\r\n\r\n        if (computedHash < proofElement) {\r\n        // Hash(current computed hash + current element of the proof)\r\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n        } else {\r\n        // Hash(current element of the proof + current computed hash)\r\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n       }\r\n     }\r\n\r\n     // Check if the computed hash (root) is equal to the provided root\r\n      return computedHash == root;\r\n   }    \r\n    \r\n    function addMerkleRoot(bytes32 _newRoot) public onlyPermits{\r\n        merkleRoot[_newRoot] = true;\r\n    }\r\n    \r\n    function updatePartnerKYC(bytes32 _data1,address _addr) public onlyPermits{\r\n        require(checkKYC(_addr) == true,\"This Partner Not KYC\");\r\n        \r\n        partnerData1s[_addr] = _data1;\r\n        partnerAllows[_addr] = true;\r\n        \r\n        emit MakePartnerKYC(_addr);\r\n        \r\n    }\r\n    \r\n    function disablePartnerKYC(address _addr) public onlyPermits{\r\n        partnerAllows[_addr] = false;\r\n    }\r\n    \r\n    function checkKYC(address _addr) public view returns(bool){\r\n        return szoToken.haveKYC(_addr);\r\n    }\r\n    \r\n    // 1 End User Call this function by them self\r\n    \r\n    function kycData(address _addr,bytes32 _data1,bytes32 _data2,bytes32[] memory merkleProof,bytes32 root) public{\r\n        require(checkKYC(_addr) == false,\"This Address Already KYC\");\r\n        require(merkleRoot[root] == true,\"This is not ROOT KEY\");\r\n        bytes32 leaf = keccak256(abi.encodePacked(_addr, _data1, _data2));\r\n        \r\n        require(verify(root, leaf,merkleProof), 'Invalid proof.');\r\n        \r\n        szoToken.createKYCData(_data1,_data2,_addr);\r\n        \r\n        emit MakeKYC(_addr);\r\n        \r\n    }\r\n    \r\n    // 2 End user kyc other address by them self\r\n    \r\n    function addMoreKYCAddress(address _newAddress) public returns(bool){\r\n        require(szoToken.haveKYC(_newAddress) == false,\"This address already KYC\");\r\n        require(szoToken.haveKYC(msg.sender) == true,\"Owner Address Not KYC\");\r\n        require(extendedKYC[msg.sender] == false,\"This Addres KYC with extendedFunction can't KYC\");\r\n        \r\n        bytes32 data1;\r\n        bytes32 data2;\r\n       \r\n        \r\n        (data1,data2) = szoToken.getKYCData(msg.sender);\r\n        require(data2 != data2NoKYC,\"YOUR ADDRESS NOT FULL KYC FOR KYC OTHER\");\r\n        require(data2 != data2Pools,\"REWARD ADDRESS CAN NOT KYC\");\r\n        extendedKYC[_newAddress] = true;\r\n        \r\n        \r\n        szoToken.createKYCData(data1,data2,_newAddress);\r\n\r\n        return true;\r\n        \r\n    }\r\n    \r\n    // 3 Partner KYC member by them self\r\n    function partnerKYC(address _kycAddr,bytes32 _data2) public returns(bool){\r\n        require(checkKYC(_kycAddr) == false,\"This Address Already KYC\");\r\n        require(partnerAllows[msg.sender] == true,\"This Partner not allow to KYC\");\r\n        \r\n        szoToken.createKYCData(partnerData1s[msg.sender],_data2,_kycAddr);\r\n        emit MakeKYC(_kycAddr);\r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddPermit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"MakeKYC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"MakePartnerKYC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"RemovePermit\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"addMerkleRoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"addMoreKYCAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkKYC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"disablePartnerKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extendedKYC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_data1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_data2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"kycData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerAllows\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kycAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_data2\",\"type\":\"bytes32\"}],\"name\":\"partnerKYC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removePermit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data1\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updatePartnerKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"SZOKYCPool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://61b36427b795a55fd12bf023d70e9945cf2b4605f7283dd5e73b908d09d798aa"}]}