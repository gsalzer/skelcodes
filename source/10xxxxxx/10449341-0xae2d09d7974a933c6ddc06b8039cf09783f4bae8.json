{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n/**\r\n * @title Leveling contract\r\n * @dev ETH transfer in and transfer out\r\n */\r\ncontract Nest_3_Leveling {\r\n    using address_make_payable for address;\r\n    using SafeMath for uint256;\r\n    Nest_3_VoteFactory _voteFactory;                                //  Vote contract\r\n    mapping (address => uint256) ethMapping;                        //  Corresponded ETH leveling ledger of token\r\n    \r\n    /**\r\n    * @dev Initialization method\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    constructor (address voteFactory) public {\r\n        _voteFactory = Nest_3_VoteFactory(voteFactory); \r\n    }\r\n    \r\n    /**\r\n    * @dev Modifying voting contract\r\n    * @param voteFactory Voting contract address\r\n    */\r\n    function changeMapping(address voteFactory) public onlyOwner {\r\n        _voteFactory = Nest_3_VoteFactory(voteFactory); \r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer out leveling\r\n    * @param amount Transfer-out amount\r\n    * @param token Corresponding lock-up token\r\n    * @param target Transfer-out target\r\n    */\r\n    function tranEth(uint256 amount, address token, address target) public returns (uint256) {\r\n        require(address(msg.sender) == address(_voteFactory.checkAddress(\"nest.v3.tokenAbonus\")), \"No authority\");\r\n        uint256 tranAmount = amount;\r\n        if (tranAmount > ethMapping[token]) {\r\n            tranAmount = ethMapping[token];\r\n        }\r\n        ethMapping[token] = ethMapping[token].sub(tranAmount);\r\n        address payable addr = target.make_payable();\r\n        addr.transfer(tranAmount);\r\n        return tranAmount;\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfer in leveling \r\n    * @param token Corresponded locked token\r\n    */\r\n    function switchToEth(address token) public payable {\r\n        ethMapping[token] = ethMapping[token].add(msg.value);\r\n    }\r\n    \r\n    //  Check the leveled amount corresponding to the token\r\n    function checkEthMapping(address token) public view returns (uint256) {\r\n        return ethMapping[token];\r\n    }\r\n    \r\n    //  Withdraw ETH\r\n    function turnOutAllEth(uint256 amount, address target) public onlyOwner {\r\n        address payable addr = target.make_payable();\r\n        addr.transfer(amount);  \r\n    }\r\n    \r\n    //  Administrator only\r\n    modifier onlyOwner(){\r\n        require(_voteFactory.checkOwners(address(msg.sender)), \"No authority\");\r\n        _;\r\n    }\r\n}\r\n\r\n// Voting factory\r\ninterface Nest_3_VoteFactory {\r\n    //  Check address\r\n\tfunction checkAddress(string calldata name) external view returns (address contractAddress);\r\n\t//  Check whether the administrator\r\n\tfunction checkOwners(address man) external view returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactory\",\"type\":\"address\"}],\"name\":\"changeMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkEthMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"switchToEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"tranEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"turnOutAllEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Nest_3_Leveling","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a628845c523975493da88ac3641a803e92fa5d54","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://699fa80d9de0d56d03106e31e2917c35b8e9d07eb2d56d6f8282d8602db1ffaf"}]}