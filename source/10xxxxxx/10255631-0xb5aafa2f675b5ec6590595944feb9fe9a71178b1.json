{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * Game Credits Game Management Contract\r\n * https://www.gamecredits.org\r\n * (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n// @title iGameContract\r\n// @dev The interface for cross-contract calls to the Game contract\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract iGameContract {\r\n  function isAdminForGame(uint _game, address account) external view returns(bool);\r\n\r\n  // List of all games tracked by the Game contract\r\n  uint[] public games;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface iERC20 {\r\n\r\n  /**\r\n    * @dev Returns the amount of tokens in existence.\r\n    */\r\n  function totalSupply() external view returns (uint);\r\n\r\n  /**\r\n    * @dev Returns the amount of tokens owned by `account`.\r\n    */\r\n  function balanceOf(address account) external view returns (uint);\r\n\r\n  /**\r\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n  /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n\r\n  /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    * that someone may use both the old and the new allowance by unfortunate\r\n    * transaction ordering. One possible solution to mitigate this race\r\n    * condition is to first reduce the spender's allowance to 0 and set the\r\n    * desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * Emits an {Approval} event.\r\n    */\r\n  function approve(address spender, uint amount) external returns (bool);\r\n\r\n  /**\r\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n    * allowance mechanism. `amount` is then deducted from the caller's\r\n    * allowance.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n  /**\r\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    * Note that `value` may be zero.\r\n    */\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n  /**\r\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n    * a call to {approve}. `value` is the new allowance.\r\n    */\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n// @title iERC20Contract\r\n// @dev The interface for cross-contract calls to the ERC20 contract\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract iERC20Contract {\r\n  function isOfficialAccount(address account) external view returns(bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    */\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    *\r\n    * _Available since v2.4.0._\r\n    */\r\n  function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    require(b <= a, errorMessage);\r\n    uint c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    * - Multiplication cannot overflow.\r\n    */\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    *\r\n    * _Available since v2.4.0._\r\n    */\r\n  function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function mod(uint a, uint b) internal pure returns (uint) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts with custom message when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    *\r\n    * _Available since v2.4.0._\r\n    */\r\n  function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n// @title Game Access (Game Access Control)\r\n// @dev Game contract for controlling access to games, and allowing managers to add and remove operator accounts\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract GameAccess is iGameContract {\r\n  using SafeMath for uint;\r\n\r\n  // Reference to the address of the ERC20 contract\r\n  iERC20 public erc20Contract;\r\n\r\n  event AdminPrivilegesChanged(uint indexed game, address indexed account, bool isAdmin);\r\n  event AdminRecoveryBlocked(uint indexed game, bool isBlocked);\r\n\r\n  // Admin addresses are stored both by gameId and address\r\n  mapping(uint => address[]) public adminAddressesByGameId;\r\n  mapping(address => uint[]) public gameIdsByAdminAddress;\r\n\r\n  // Stores admin status (as a boolean) by gameId and account\r\n  mapping(uint => mapping(address => bool)) public gameAdmins;\r\n\r\n  // Stores ability for official accounts to act on the game admin list\r\n  // Defaults\r\n  mapping(uint => bool) public adminRecoveryBlocked;\r\n\r\n  // @dev Access control modifier to limit access to game admin accounts\r\n  modifier onlyGameAdmin(uint _game) {\r\n    require(gameAdmins[_game][msg.sender], \"sender must be a game admin\");\r\n    _;\r\n  }\r\n\r\n  // @dev Access control modifier to limit access to either the recovery or\r\n  //   owner accounts.\r\n  modifier onlyOfficialAccount() {\r\n    require(\r\n      iERC20Contract(address(erc20Contract)).isOfficialAccount(msg.sender),\r\n      \"sender must be the owner or recovery account\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  // @dev Access control modifier to limit access to the ERC20 contract\r\n  modifier onlyERC20Contract() {\r\n    require(msg.sender == address(erc20Contract), \"Can only be called from the ERC20 contract\");\r\n    _;\r\n  }\r\n\r\n  // @dev Internal constructor to ensure this contract can't be deployed alone\r\n  constructor() internal{ }\r\n\r\n  // @dev gets the admin status for a game & account\r\n  // @param _game - the gameId of the game\r\n  // @param _account - the address of the user\r\n  // @returns bool - the admin status of the requested account for the requested game\r\n  function isAdminForGame(uint _game, address _account)\r\n    external\r\n    view\r\n  returns(bool) {\r\n    return gameAdmins[_game][_account];\r\n  }\r\n\r\n  // @dev gets the list of admins for a game\r\n  // @param _game - the gameId of the game\r\n  // @returns address[] - the list of admin addresses for the requested game\r\n  function getAdminsForGame(uint _game)\r\n    external\r\n    view\r\n  returns(address[] memory) {\r\n    return adminAddressesByGameId[_game];\r\n  }\r\n\r\n  // @dev gets the list of games that the requested account is the admin of\r\n  // @param _account - the address of the user\r\n  // @returns uint[] - the list of game Ids for the requested account\r\n  function getGamesForAdmin(address _account)\r\n    external\r\n    view\r\n  returns(uint[] memory) {\r\n    return gameIdsByAdminAddress[_account];\r\n  }\r\n\r\n  // @dev Adds an address as an admin for a game\r\n  // @notice Can only be called by an admin of the game\r\n  // @param _game - the gameId of the game\r\n  // @param _account - the address of the user\r\n  function addAdminAccount(uint _game, address _account)\r\n    external\r\n    onlyGameAdmin(_game)\r\n  {\r\n    require(_account != msg.sender, \"new admin can't be sender\");\r\n    require(_account != address(0), \"new admin can't be the zero address\");\r\n    require(!gameAdmins[_game][_account], \"new admin can't already be an admin\");\r\n    _addAdminAccount(_game, _account);\r\n  }\r\n\r\n  // @dev Adds an address as an admin for a game; used in emergencies\r\n  // @notice Can only be called by the erc20 owner or recovery accounts\r\n  // @param _game - the gameId of the game\r\n  // @param _account - the address of the user\r\n  function recoverAdminAccount(uint _game, address _account)\r\n    external\r\n    onlyOfficialAccount\r\n  {\r\n    require(_account != msg.sender, \"new admin can't be sender\");\r\n    require(_account != address(0), \"new admin can't be the zero address\");\r\n    require(!gameAdmins[_game][_account], \"new admin can't already be an admin\");\r\n    require(!adminRecoveryBlocked[_game], \"this game has blocked admin recovery\");\r\n    _addAdminAccount(_game, _account);\r\n  }\r\n\r\n  // @dev Blocks the erc20 owner or recovery accounts from adding admin accounts\r\n  // @notice Can only be called by a game admin account\r\n  // @param _game - the gameId of the game\r\n  // @param _isBlocked - whether to block or unblock recovery\r\n  function blockAdminRecovery(uint _game, bool _isBlocked)\r\n    external\r\n    onlyGameAdmin(_game)\r\n  {\r\n    adminRecoveryBlocked[_game] = _isBlocked;\r\n    emit AdminRecoveryBlocked(_game, _isBlocked);\r\n  }\r\n\r\n  // @dev Removes an address from an admin for a game\r\n  // @notice Can only be called by an admin of the game.\r\n  // @notice Can't remove your own account's admin privileges.\r\n  // @param _game - the gameId of the game\r\n  // @param _account - the address of the user to remove admin privileges.\r\n  function removeAdminAccount(uint _game, address _account)\r\n    external\r\n    onlyGameAdmin(_game)\r\n  {\r\n    require(_account != msg.sender, \"can't remove yourself as admin\");\r\n    require(gameAdmins[_game][_account], \"account to remove must be an admin\");\r\n\r\n    address[] storage opsAddresses = adminAddressesByGameId[_game];\r\n    uint startingLength = opsAddresses.length;\r\n    // Yes, \"i < startingLength\" is right. 0 - 1 == uint.maxvalue, not -1.\r\n    for (uint i = opsAddresses.length - 1; i < startingLength; i--) {\r\n      if (opsAddresses[i] == _account) {\r\n        uint newLength = opsAddresses.length.sub(1);\r\n        opsAddresses[i] = opsAddresses[newLength];\r\n        delete opsAddresses[newLength];\r\n        opsAddresses.length = newLength;\r\n      }\r\n    }\r\n\r\n    uint[] storage gamesByAdmin = gameIdsByAdminAddress[_account];\r\n    startingLength = gamesByAdmin.length;\r\n    for (uint i = gamesByAdmin.length - 1; i < startingLength; i--) {\r\n      if (gamesByAdmin[i] == _game) {\r\n        uint newLength = gamesByAdmin.length.sub(1);\r\n        gamesByAdmin[i] = gamesByAdmin[newLength];\r\n        delete gamesByAdmin[newLength];\r\n        gamesByAdmin.length = newLength;\r\n      }\r\n    }\r\n\r\n    gameAdmins[_game][_account] = false;\r\n    emit AdminPrivilegesChanged(_game, _account, false);\r\n  }\r\n\r\n  // @dev Internal function to add an address as an admin for a game\r\n  // @param _game - the gameId of the game\r\n  // @param _account - the address of the user\r\n  function _addAdminAccount(uint _game, address _account)\r\n    internal\r\n  {\r\n    address[] storage opsAddresses = adminAddressesByGameId[_game];\r\n    require(opsAddresses.length < 256, \"a game can only have 256 admins\");\r\n    for (uint i = opsAddresses.length; i < opsAddresses.length; i--) {\r\n      require(opsAddresses[i] != _account, \"new admin account can't already be in the admin addess list\");\r\n    }\r\n\r\n    uint[] storage gamesByAdmin = gameIdsByAdminAddress[_account];\r\n    require(gamesByAdmin.length < 256, \"you can only own 256 games\");\r\n    for (uint i = gamesByAdmin.length; i < gamesByAdmin.length; i--) {\r\n      require(gamesByAdmin[i] != _game, \"you can't become an operator twice\");\r\n    }\r\n    gamesByAdmin.push(_game);\r\n\r\n    opsAddresses.push(_account);\r\n    gameAdmins[_game][_account] = true;\r\n    emit AdminPrivilegesChanged(_game, _account, true);\r\n  }\r\n}\r\n\r\n\r\n\r\n// @title iSupportContract\r\n// @dev The interface for cross-contract calls to Support contracts\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract iSupportContract {\r\n\r\n  function isSupportContract() external pure returns(bool);\r\n\r\n  function getGameAccountSupport(uint _game, address _account) external view returns(uint);\r\n  function updateSupport(uint _game, address _account, uint _supportAmount) external;\r\n  function fundRewardsPool(uint _amount, uint _startWeek, uint _numberOfWeeks) external;\r\n\r\n  function receiveGameCredits(uint _game, address _account, uint _tokenId, uint _payment, bytes32 _data) external;\r\n  function receiveLoyaltyPayment(uint _game, address _account, uint _tokenId, uint _payment, bytes32 _data) external;\r\n  function contestEntry(uint _game, address _account, uint _tokenId, uint _contestId, uint _payment, bytes32 _data) external;\r\n\r\n  event GameCreditsPayment(uint indexed _game, address indexed account, uint indexed _tokenId, uint _payment, bytes32 _data);\r\n  event LoyaltyPayment(uint indexed _game, address indexed account, uint indexed _tokenId, uint _payment, bytes32 _data);\r\n  event EnterContest(uint indexed _game, address indexed account, uint _tokenId, uint indexed _contestId, uint _payment, bytes32 _data);\r\n}\r\n\r\n\r\n// @title Game Contract (Game Data)\r\n// @dev Game contract for managing all game data\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract GameBase is GameAccess, iSupportContract {\r\n\r\n  // Url of the GameCredits network site\r\n  string public url = \"https://www.gamecredits.org\";\r\n\r\n  // balance of individual games from payments for tokens\r\n  mapping (uint => uint) public gameBalances;\r\n\r\n  // balance of the system owner from payments for tokens\r\n  uint public ownerBalance;\r\n\r\n  // fee, in points, paid to the system owner for creating a token\r\n  uint public tokenFee;\r\n\r\n  event TokenFee(uint tokenFee);\r\n  event GameBalance(uint indexed game, uint balance);\r\n  event Withdrawal(uint indexed game, address indexed account, uint amount);\r\n\r\n  constructor()\r\n    internal\r\n  {\r\n    tokenFee = 2000;\r\n    emit TokenFee(tokenFee);\r\n  }\r\n\r\n  // @dev Withdraw all the balance of a game's account from the system to the caller.\r\n  // @param _game - the game to withdraw from\r\n  // @notice can only be called by a game admin for the game\r\n  function withdrawGameBalance(uint _game)\r\n    external\r\n    onlyGameAdmin(_game)\r\n  {\r\n    uint toWithdraw = gameBalances[_game];\r\n    gameBalances[_game] = 0;\r\n    erc20Contract.transfer(msg.sender, toWithdraw);\r\n    emit Withdrawal(_game, msg.sender, toWithdraw);\r\n    emit GameBalance(_game, 0);\r\n  }\r\n\r\n  // @dev Withdraw all the balance of the owner's account from the system to the caller.\r\n  // @notice can only be called by the owner or recovery account\r\n  function withdrawOwnerBalance()\r\n    external\r\n    onlyOfficialAccount\r\n  {\r\n    uint toWithdraw = ownerBalance;\r\n    ownerBalance = 0;\r\n    erc20Contract.transfer(msg.sender, toWithdraw);\r\n    emit Withdrawal(0, msg.sender, toWithdraw);\r\n    emit GameBalance(0, 0);\r\n  }\r\n\r\n  // @dev Sets the fee for token creation, in points.\r\n  // @param _tokenFee - the fee, in points\r\n  // @notice can only be called by the owner or recovery account\r\n  function setTokenFee(uint _tokenFee)\r\n    external\r\n    onlyOfficialAccount\r\n  {\r\n    require(_tokenFee < 10000, \"the fee is too damn high\");\r\n    tokenFee = _tokenFee;\r\n    emit TokenFee(tokenFee);\r\n  }\r\n\r\n  // @dev This support contract doesn't implement getGameAccountSupport\r\n  function getGameAccountSupport(uint, address)\r\n    external\r\n    view\r\n  returns(uint)\r\n  {\r\n    revert(\"This support contract doesn't implement getGameAccountSupport\");\r\n  }\r\n\r\n  // @dev This support contract doesn't implement updateSupport\r\n  function updateSupport(uint, address, uint)\r\n    external\r\n  {\r\n    revert(\"This support contract doesn't implement updateSupport\");\r\n  }\r\n\r\n  // @dev This support contract doesn't implement fundRewardsPool\r\n  function fundRewardsPool(uint, uint, uint)\r\n    external\r\n  {\r\n    revert(\"This support contract doesn't implement fundRewardsPool\");\r\n  }\r\n\r\n  // @dev Called by the erc20 contract, when that contract is used to send Game Credits as a payment\r\n  // @param _game - the gameId of the game\r\n  // @param _account - the address of the account that called the erc20 function\r\n  // @param _tokenId - the ID of the relevant token, if any\r\n  // @param _payment - the amount in game credits that was transferred to this contract by\r\n  //   the erc20 contract when that contract was called\r\n  // @param _data - an additional data field to be read by the oracle\r\n  function receiveGameCredits(uint _game, address _account, uint _tokenId, uint _payment, bytes32 _data)\r\n    external\r\n    onlyERC20Contract\r\n  {\r\n    require(_game < games.length, \"game must exist or be zero\");\r\n    uint ownerPayment = _payment.div(10000).mul(tokenFee);\r\n    uint gamePayment = _payment.sub(ownerPayment);\r\n    uint newBalance = gameBalances[_game].add(gamePayment);\r\n    uint newOwnerBalance = ownerBalance.add(ownerPayment);\r\n    gameBalances[_game] = newBalance;\r\n    ownerBalance = newOwnerBalance;\r\n\r\n    emit GameCreditsPayment(_game, _account, _tokenId, _payment, _data);\r\n    emit GameBalance(_game, newBalance);\r\n    emit GameBalance(0, newOwnerBalance);\r\n  }\r\n\r\n  // @dev Called by the erc20 contract, when that contract is used to request a Loyalty Points\r\n  //   payment on the sidechain\r\n  // @param _game - the gameId of the game\r\n  // @param _account - the address of the account that called the erc20 function\r\n  // @param _tokenId - the ID of the relevant token, if any\r\n  // @param _payment - the amount in loyalty points that was requested to be paid, and will be\r\n  //   paid on the sidechain\r\n  // @param _data - an additional data field to be read by the oracle\r\n  function receiveLoyaltyPayment(uint _game, address _account, uint _tokenId, uint _payment, bytes32 _data)\r\n    external\r\n    onlyERC20Contract\r\n  {\r\n    require(_game < games.length, \"game must exist or be zero\");\r\n    emit LoyaltyPayment(_game, _account, _tokenId, _payment, _data);\r\n  }\r\n\r\n  // @dev This support contract doesn't implement contestEntry\r\n  function contestEntry(uint, address, uint, uint, uint, bytes32)\r\n    external\r\n  {\r\n    revert(\"This support contract doesn't implement contestEntry\");\r\n  }\r\n\r\n  // @dev confirms that this contract is a support contract\r\n  // @returns bool - always returns true because this is a support contract\r\n  function isSupportContract()\r\n    external\r\n    pure\r\n  returns(bool)\r\n  {\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// @title Game Contract (Game Data)\r\n// @dev Game contract for managing all game data\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract GameContract is GameBase {\r\n\r\n  struct GameData {\r\n    string json;\r\n    uint tradeLockSeconds;\r\n    bytes32[] metadata;\r\n  }\r\n\r\n  event GameCreated(uint indexed game, address indexed owner, string json, bytes32[] metadata);\r\n\r\n  event GameMetadataUpdated(\r\n    uint indexed game,\r\n    string json,\r\n    uint tradeLockSeconds,\r\n    bytes32[] metadata\r\n  );\r\n\r\n  mapping(uint => GameData) internal gameData;\r\n\r\n  constructor(iERC20 _erc20Contract)\r\n    public\r\n  {\r\n    erc20Contract = _erc20Contract;\r\n    games.push(2**32);\r\n  }\r\n\r\n  // @notice The fallback function reverts\r\n  function ()\r\n    external\r\n    payable\r\n  {\r\n    revert(\"this contract is not payable\");\r\n  }\r\n\r\n  // @dev Create a new game by setting its data.\r\n  //   Created games are initially owned and managed by the game's creator\r\n  // @notice - there's a maximum of 2^32 games (4.29 billion games)\r\n  // @param _json - a json encoded string containing the game's name, uri, logo, description, etc\r\n  // @param _tradeLockSeconds - the number of seconds a card remains locked to a purchaser's account\r\n  // @param _metadata - game-specific metadata, in bytes32 format.\r\n  function createGame(string calldata _json, uint _tradeLockSeconds, bytes32[] calldata _metadata)\r\n    external\r\n  returns(uint _game) {\r\n    // Create the game\r\n    _game = games.length;\r\n    require(_game < games[0], \"too many games created\");\r\n    games.push(_game);\r\n\r\n    // Log the game as created\r\n    emit GameCreated(_game, msg.sender, _json, _metadata);\r\n\r\n    // Add the creator as the first game admin\r\n    _addAdminAccount(_game, msg.sender);\r\n\r\n    // Store the game's metadata\r\n    updateGameMetadata(_game, _json, _tradeLockSeconds, _metadata);\r\n  }\r\n\r\n  // @dev Gets the number of games in the system\r\n  // @returns the number of games stored in the system\r\n  function numberOfGames()\r\n    external\r\n    view\r\n  returns(uint) {\r\n    return games.length;\r\n  }\r\n\r\n  // @dev Get all game data for one given game\r\n  // @param _game - the # of the game\r\n  // @returns game - the game ID of the requested game\r\n  // @returns json - the json data of the game\r\n  // @returns tradeLockSeconds - the number of card sets\r\n  // @returns balance - the erc20 Token balance\r\n  // @returns metadata - a bytes32 array of metadata used by the game\r\n  function getGameData(uint _game)\r\n    external\r\n    view\r\n  returns(uint game,\r\n    string memory json,\r\n    uint tradeLockSeconds,\r\n    uint balance,\r\n    bytes32[] memory metadata)\r\n  {\r\n    GameData storage data = gameData[_game];\r\n    game = _game;\r\n    json = data.json;\r\n    tradeLockSeconds = data.tradeLockSeconds;\r\n    balance = 0;\r\n    metadata = data.metadata;\r\n  }\r\n\r\n  // @dev Update the json, trade lock, and metadata for a single game\r\n  // @param _game - the # of the game\r\n  // @param _json - a json encoded string containing the game's name, uri, logo, description, etc\r\n  // @param _tradeLockSeconds - the number of seconds a card remains locked to a purchaser's account\r\n  // @param _metadata - game-specific metadata, in bytes32 format.\r\n  function updateGameMetadata(uint _game, string memory _json, uint _tradeLockSeconds, bytes32[] memory _metadata)\r\n    public\r\n    onlyGameAdmin(_game)\r\n  {\r\n    gameData[_game].tradeLockSeconds = _tradeLockSeconds;\r\n    gameData[_game].json = _json;\r\n\r\n    bytes32[] storage data = gameData[_game].metadata;\r\n    if (_metadata.length > data.length) {\r\n      data.length = _metadata.length;\r\n    }\r\n    uint j = 0;\r\n    for (j = 0; j < _metadata.length; j++) {\r\n      data[j] = _metadata[j];\r\n    }\r\n    for (uint k = j; k < data.length; k++) {\r\n      delete data[k];\r\n    }\r\n    if (_metadata.length < data.length) {\r\n      data.length = _metadata.length;\r\n    }\r\n\r\n    emit GameMetadataUpdated(_game, _json, _tradeLockSeconds, _metadata);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract iERC20\",\"name\":\"_erc20Contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"AdminPrivilegesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlocked\",\"type\":\"bool\"}],\"name\":\"AdminRecoveryBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_contestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"EnterContest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"GameBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"metadata\",\"type\":\"bytes32[]\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"GameCreditsPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeLockSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"metadata\",\"type\":\"bytes32[]\"}],\"name\":\"GameMetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"LoyaltyPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"}],\"name\":\"TokenFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addAdminAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminAddressesByGameId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminRecoveryBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBlocked\",\"type\":\"bool\"}],\"name\":\"blockAdminRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"contestEntry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_json\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tradeLockSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_metadata\",\"type\":\"bytes32[]\"}],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Contract\",\"outputs\":[{\"internalType\":\"contract iERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundRewardsPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameAdmins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameIdsByAdminAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getAdminsForGame\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getGameAccountSupport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"getGameData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tradeLockSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"metadata\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getGamesForAdmin\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdminForGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSupportContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfGames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"receiveGameCredits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"receiveLoyaltyPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"recoverAdminAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAdminAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenFee\",\"type\":\"uint256\"}],\"name\":\"setTokenFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_json\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tradeLockSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_metadata\",\"type\":\"bytes32[]\"}],\"name\":\"updateGameMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updateSupport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"}],\"name\":\"withdrawGameBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOwnerBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GameContract","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000063f88a2298a5c4aee3c216aa6d926b184a4b2437","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5328dc046871efec74e63b74246b1ed5a297496f33727bec593abc7dcd1f5aea"}]}