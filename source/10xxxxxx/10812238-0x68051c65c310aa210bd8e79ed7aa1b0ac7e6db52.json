{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/IStaking.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @title Staking interface, as defined by EIP-900.\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\ncontract IStaking {\r\n    event Staked(address indexed user, uint256 amount, uint256 total, uint256 time, bytes data);\r\n    event Unstaked(address indexed user, uint256 amount, uint256 total, uint256 penaltyAmount, bytes data);\r\n\r\n    function stake(uint256 amount, uint256 time, bytes calldata data) external;\r\n    function stakeFor(address user, uint256 amount, uint256 time, bytes calldata data) external;\r\n    function unstake(uint256 amount, bytes calldata data) external;\r\n    function unstakeAtIndex(uint256 index, bytes calldata data) external;\r\n    function totalStakedFor(address addr) public view returns (uint256);\r\n    function totalStaked() public view returns (uint256);\r\n    function token() external view returns (address);\r\n\r\n    /**\r\n     * @return False. This application does not support staking history.\r\n     */\r\n    function supportsHistory() external pure returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// File: contracts/TokenPool.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title A simple holder of tokens.\r\n * This is a simple contract to hold tokens. It's useful in the case where a separate contract\r\n * needs to hold multiple distinct pools of the same token.\r\n */\r\ncontract TokenPool is Ownable {\r\n    IERC20 public token;\r\n\r\n    constructor(IERC20 _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external onlyOwner returns (bool) {\r\n        return token.transfer(to, value);\r\n    }\r\n}\r\n\r\n// File: contracts/TokenSpring.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Token Spring\r\n * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\r\n *      Ampleforth Geyser / HEX.\r\n *\r\n *      Distribution tokens are added to a locked pool in the contract and become unlocked over time\r\n *      according to a once-configurable unlock schedule. Once unlocked, they are available to be\r\n *      claimed by users.\r\n *\r\n *      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share\r\n *      is a function of the number of tokens deposited as well as the length of the lock time promised.\r\n *      Specifically, a user's share of the currently-unlocked pool equals their 'sum(lockTime * amount)''\r\n *      divided by the global 'sum(lockTime * amount)'.\r\n *\r\n *      If a user revokes their tokens from the pool too early, there is a penalty that gets applied to the\r\n *      received funds. The calculation for penalty is: (% of time left / 2) * deposited UNI-V2 LP.\r\n *      A 10 UNI-V2 LP deposit for 60 days getting removed at 30 days is a 2.5 UNI-V2 LP penalty leaving the\r\n *      user with 7.5 UNI-V2 LP only and no rewards, losing 25% of their initial liquidity. The penalty amount\r\n *      immediately gets deposited towards a designated penatly address. This encourages dedicated stakers and follows\r\n *      very loosely to a traditional certificate of deposit\r\n *\r\n */\r\ncontract TokenSpring is IStaking, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Staked(address indexed user, uint256 amount, uint256 total, uint256 time, bytes data);\r\n    event Unstaked(address indexed user, uint256 amount, uint256 total, uint256 penaltyAmount, bytes data);\r\n    event TokensClaimed(address indexed user, uint256 amount);\r\n    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\r\n    // amount: Unlocked tokens, total: Total locked tokens\r\n    event TokensUnlocked(uint256 amount, uint256 total);\r\n\r\n    event LogPenaltyAddressUpdated(address penaltyAddress_);\r\n\r\n    TokenPool private _stakingPool;\r\n    TokenPool private _unlockedPool;\r\n    TokenPool private _lockedPool;\r\n\r\n    //\r\n    // Time-bonus params\r\n    //\r\n    uint256 public constant BONUS_DECIMALS = 2;\r\n    uint256 public startBonus = 0;\r\n    uint256 public bonusPeriodSec = 0;\r\n    uint256 public maxLockTimeSeconds = 90 days;\r\n\r\n    //\r\n    // Global accounting state\r\n    //\r\n    uint256 public totalLockedShares = 0;\r\n    uint256 public totalStakingShares = 0;\r\n    uint256 private _totalStakingShareSeconds = 0;\r\n    uint256 private _maxUnlockSchedules = 0;\r\n    uint256 private _initialSharesPerToken = 0;\r\n\r\n    //\r\n    // User accounting state\r\n    //\r\n    // Represents a single stake for a user. A user may have multiple.\r\n    struct Stake {\r\n        uint256 stakingShares;\r\n        uint256 timestampSec;\r\n        uint256 lockTimestampSec;\r\n    }\r\n\r\n    // Caches aggregated values from the User->Stake[] map to save computation.\r\n    // If lastAccountingTimestampSec is 0, there's no entry for that user.\r\n    struct UserTotals {\r\n        uint256 stakingShares;\r\n        uint256 stakingShareSeconds;\r\n    }\r\n\r\n    // Aggregated staking values per user\r\n    mapping(address => UserTotals) private _userTotals;\r\n\r\n    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\r\n    mapping(address => Stake[]) private _userStakes;\r\n\r\n    //\r\n    // Locked/Unlocked Accounting state\r\n    //\r\n    struct UnlockSchedule {\r\n        uint256 initialLockedShares;\r\n        uint256 unlockedShares;\r\n        uint256 lastUnlockTimestampSec;\r\n        uint256 endAtSec;\r\n        uint256 durationSec;\r\n    }\r\n\r\n    UnlockSchedule[] public unlockSchedules;\r\n\r\n    // This address receives all penalty UNI-V2 LP tokens\r\n    address public penaltyAddress;\r\n\r\n    /**\r\n     * @param stakingToken The token users deposit as stake.\r\n     * @param distributionToken The token users receive as they unstake.\r\n     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\r\n     * @param startBonus_ Starting time bonus, BONUS_DECIMALS fixed point.\r\n     *                    e.g. 25% means user gets 25% of max distribution tokens.\r\n     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\r\n     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\r\n     */\r\n    constructor(IERC20 stakingToken, IERC20 distributionToken, uint256 maxUnlockSchedules,\r\n                uint256 startBonus_, uint256 bonusPeriodSec_, uint256 initialSharesPerToken) public {\r\n        // The start bonus must be some fraction of the max. (i.e. <= 100%)\r\n        require(startBonus_ <= 10**BONUS_DECIMALS, 'TokenSpring: start bonus too high');\r\n        // If no period is desired, instead set startBonus = 100%\r\n        // and bonusPeriod to a small value like 1sec.\r\n        require(bonusPeriodSec_ != 0, 'TokenSpring: bonus period is zero');\r\n        require(initialSharesPerToken > 0, 'TokenSpring: initialSharesPerToken is zero');\r\n\r\n        _stakingPool = new TokenPool(stakingToken);\r\n        _unlockedPool = new TokenPool(distributionToken);\r\n        _lockedPool = new TokenPool(distributionToken);\r\n        startBonus = startBonus_;\r\n        bonusPeriodSec = bonusPeriodSec_;\r\n        _maxUnlockSchedules = maxUnlockSchedules;\r\n        _initialSharesPerToken = initialSharesPerToken;\r\n    }\r\n\r\n    /**\r\n     * @param penaltyAddress_ The penalty address to use for penalties.\r\n     */\r\n\r\n    function setPenaltyAddress(address penaltyAddress_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        penaltyAddress = penaltyAddress_;\r\n        emit LogPenaltyAddressUpdated(penaltyAddress_);\r\n    }\r\n\r\n    /**\r\n     * @param maxLockTimeSeconds_ The max time allowed to lock a contract.\r\n     */\r\n\r\n    function setMaxLockTimeSeconds(uint256 maxLockTimeSeconds_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        maxLockTimeSeconds = maxLockTimeSeconds_;\r\n    }\r\n\r\n    /**\r\n     * @return The token users deposit as stake.\r\n     */\r\n    function getStakingToken() public view returns (IERC20) {\r\n        return _stakingPool.token();\r\n    }\r\n\r\n    /**\r\n     * @return The token users receive as they unstake.\r\n     */\r\n    function getDistributionToken() public view returns (IERC20) {\r\n        assert(_unlockedPool.token() == _lockedPool.token());\r\n        return _unlockedPool.token();\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount of deposit tokens from the user.\r\n     * @param amount Number of deposit tokens to stake.\r\n     * @param data Not used.\r\n     */\r\n    function stake(uint256 amount, uint256 time, bytes calldata data) external {\r\n        _stakeFor(msg.sender, msg.sender, amount, time);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\r\n     * @param user User address who gains credit for this stake operation.\r\n     * @param amount Number of deposit tokens to stake.\r\n     * @param data Not used.\r\n     */\r\n    function stakeFor(address user, uint256 amount, uint256 time, bytes calldata data) external {\r\n        _stakeFor(msg.sender, user, amount, time);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Private implementation of staking methods.\r\n     * @param staker User address who deposits tokens to stake.\r\n     * @param beneficiary User address who gains credit for this stake operation.\r\n     * @param amount Number of deposit tokens to stake.\r\n     * @param time Seconds added to current time for the expiration time.\r\n     */\r\n    function _stakeFor(address staker, address beneficiary, uint256 amount, uint256 time) private {\r\n        require(amount > 0, 'TokenSpring: stake amount is zero');\r\n        require(beneficiary != address(0), 'TokenSpring: beneficiary is zero address');\r\n        require(totalStakingShares == 0 || totalStaked() > 0,\r\n                'TokenSpring: Invalid state. Staking shares exist, but no staking tokens do');\r\n        require(time > 0, 'TokenSpring: expiration time is too soon');\r\n\r\n        uint256 expiryTime = now.add(time);\r\n\r\n        // restrict the max lock time to prevent attackers from setting a ceiling limit\r\n        if(time > maxLockTimeSeconds){\r\n          expiryTime = now.add(maxLockTimeSeconds);\r\n        }\r\n\r\n        uint256 mintedStakingShares = (totalStakingShares > 0)\r\n            ? totalStakingShares.mul(amount).div(totalStaked())\r\n            : amount.mul(_initialSharesPerToken);\r\n        require(mintedStakingShares > 0, 'TokenSpring: Stake amount is too small');\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[beneficiary];\r\n        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\r\n\r\n        Stake memory newStake = Stake(mintedStakingShares, now, expiryTime);\r\n        _userStakes[beneficiary].push(newStake);\r\n\r\n        // 2. Global Accounting\r\n        totalStakingShares = totalStakingShares.add(mintedStakingShares);\r\n\r\n        // interactions\r\n        require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),\r\n            'TokenSpring: transfer into staking pool failed');\r\n\r\n        // set global and user weights after CD is deposited\r\n        updateAccounting(expiryTime, mintedStakingShares);\r\n\r\n        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), expiryTime, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @param data Not used.\r\n     */\r\n    function unstake(uint256 amount, bytes calldata data) external {\r\n        _unstake(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a contract at specific index. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param index Index of staking contract.\r\n     * @param data Not used.\r\n     */\r\n    function unstakeAtIndex(uint256 index, bytes calldata data) external {\r\n        _unstakeAtIndex(index);\r\n    }\r\n\r\n    /**\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @return The total number of distribution tokens that would be rewarded.\r\n     */\r\n    function unstakeQuery(uint256 amount) public returns (uint256) {\r\n        return _unstake(amount);\r\n    }\r\n\r\n    /**\r\n     * @param index Index of staking contract.\r\n     * @return The total number of distribution tokens that would be rewarded.\r\n     */\r\n    function unstakeAtIndexQuery(uint256 index) public returns (uint256) {\r\n        return _unstakeAtIndex(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @return The total number of distribution tokens rewarded.\r\n     */\r\n    function _unstake(uint256 amount) private returns (uint256) {\r\n        //updateAccounting();\r\n        unlockTokens();\r\n\r\n        // checks\r\n        require(amount > 0, 'TokenSpring: unstake amount is zero');\r\n        require(totalStakedFor(msg.sender) >= amount,\r\n            'TokenSpring: unstake amount is greater than total user stakes');\r\n        uint256 stakingSharesToBurn = totalStakingShares.mul(amount).div(totalStaked());\r\n        require(stakingSharesToBurn > 0, 'TokenSpring: Unable to unstake amount this small');\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        Stake[] storage accountStakes = _userStakes[msg.sender];\r\n\r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 stakingShareSecondsToBurn = 0;\r\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\r\n        uint256 rewardAmount = 0;\r\n        uint256 penaltyAmount = 0;\r\n        uint256 totalAmount = 0;\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\r\n            // normalized amount from this CD\r\n            uint256 newAmount = lastStake.stakingShares.mul(totalStaked()).div(totalStakingShares);\r\n            totalAmount = totalAmount.add(newAmount);\r\n            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\r\n            uint256 stakeTimeSecCalculated = lastStake.lockTimestampSec.sub(lastStake.timestampSec);\r\n            uint256 newStakingShareSecondsToBurn = 0;\r\n\r\n            // MUST fully redeem a past stake, CD gets destroyed\r\n            newStakingShareSecondsToBurn = lastStake.stakingShares.mul(stakeTimeSecCalculated);\r\n            stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\r\n\r\n            if(lastStake.stakingShares > sharesLeftToBurn){\r\n              sharesLeftToBurn = 0;\r\n            } else {\r\n              sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.stakingShares);\r\n            }\r\n\r\n            // Need to be penalized\r\n            if(lastStake.lockTimestampSec > now){\r\n              // amountOfThisStake * (totalLock - actualLock)/totalLock) / 2\r\n              penaltyAmount = penaltyAmount.add(stakeTimeSecCalculated.sub(stakeTimeSec).mul(newAmount).div(stakeTimeSecCalculated).div(2));\r\n            } else {\r\n              // this contract was fulfilled, make sure to pay out the reward based on the calculated time\r\n              rewardAmount = computeNewReward(rewardAmount, newStakingShareSecondsToBurn, stakeTimeSecCalculated);\r\n            }\r\n\r\n            accountStakes.length--;\r\n        }\r\n\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(stakingShareSecondsToBurn);\r\n        totals.stakingShares = totals.stakingShares.sub(totalStakingShares.mul(totalAmount).div(totalStaked()));\r\n\r\n        // 2. Global Accounting\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(stakingShareSecondsToBurn);\r\n        totalStakingShares = totalStakingShares.sub(totalStakingShares.mul(totalAmount).div(totalStaked()));\r\n\r\n        // what the staker should receive\r\n        uint256 amountMinusPenalty = totalAmount.sub(penaltyAmount);\r\n        require(totalAmount >= penaltyAmount, 'TokenSpring: penalty amount exceeds amount being redeemed');\r\n\r\n        // just because we have penalties, does not mean we do not have rewards to pay out\r\n        if(rewardAmount > 0) {\r\n          // this unstake has no penalty, pay out the rewards\r\n          require(_unlockedPool.transfer(msg.sender, rewardAmount),\r\n              'TokenSpring: transfer out of unlocked pool failed');\r\n        }\r\n\r\n        // pay out the contract deposit amount minus any penalty\r\n        require(_stakingPool.transfer(msg.sender, amountMinusPenalty),\r\n            'TokenSpring: transfer out of staking pool failed');\r\n\r\n        if(penaltyAmount > 0){\r\n          // need to send penalty amount to the pool\r\n          require(_stakingPool.transfer(penaltyAddress, penaltyAmount),\r\n            'TokenSpring: transfer into staking pool failed');\r\n        }\r\n\r\n        emit Unstaked(msg.sender, amountMinusPenalty, totalStakedFor(msg.sender), penaltyAmount, \"\");\r\n        emit TokensClaimed(msg.sender, rewardAmount);\r\n\r\n        require(totalStakingShares == 0 || totalStaked() > 0,\r\n                \"TokenSpring: Error unstaking. Staking shares exist, but no staking tokens do\");\r\n        return rewardAmount;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Unstakes a certain index of previously deposited contract. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param index Index of contract to withdraw.\r\n     * @return The total number of distribution tokens rewarded.\r\n     */\r\n    function _unstakeAtIndex(uint256 index) private returns (uint256) {\r\n        unlockTokens();\r\n\r\n        // checks\r\n        require(totalStakedFor(msg.sender) > 0,\r\n            'TokenSpring: user has zero staked');\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        Stake[] storage accountStakes = _userStakes[msg.sender];\r\n\r\n        require(accountStakes.length > index,\r\n            'TokenSpring: unstake index is not available');\r\n\r\n        Stake storage lastStake = accountStakes[index];\r\n\r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 stakingShareSecondsToBurn = 0;\r\n        uint256 rewardAmount = 0;\r\n        uint256 penaltyAmount = 0;\r\n        // normalized amount from this CD\r\n        uint256 totalAmount = lastStake.stakingShares.mul(totalStaked()).div(totalStakingShares);\r\n        require(totalAmount > 0, 'TokenSpring: unstake index amount is zero');\r\n\r\n        uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\r\n        uint256 stakeTimeSecCalculated = lastStake.lockTimestampSec.sub(lastStake.timestampSec);\r\n\r\n        // MUST fully redeem a past stake, CD gets destroyed\r\n        stakingShareSecondsToBurn = lastStake.stakingShares.mul(stakeTimeSecCalculated);\r\n\r\n        // Need to be penalized\r\n        if(lastStake.lockTimestampSec > now){\r\n          // amountOfThisStake * (totalLock - actualLock)/totalLock) / 2\r\n          penaltyAmount = penaltyAmount.add(stakeTimeSecCalculated.sub(stakeTimeSec).mul(totalAmount).div(stakeTimeSecCalculated).div(2));\r\n        } else {\r\n          // this contract was fulfilled, make sure to pay out the reward based on the calculated time\r\n          rewardAmount = computeNewReward(rewardAmount, stakingShareSecondsToBurn, stakeTimeSecCalculated);\r\n        }\r\n\r\n        // reset the array, remove the index we are unstaking\r\n        for (uint256 i = index; i < accountStakes.length-1; i++){\r\n            accountStakes[i] = accountStakes[i+1];\r\n        }\r\n\r\n        accountStakes.length--;\r\n\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(stakingShareSecondsToBurn);\r\n        totals.stakingShares = totals.stakingShares.sub(totalStakingShares.mul(totalAmount).div(totalStaked()));\r\n\r\n        // 2. Global Accounting\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(stakingShareSecondsToBurn);\r\n        totalStakingShares = totalStakingShares.sub(totalStakingShares.mul(totalAmount).div(totalStaked()));\r\n\r\n        // what the staker should receive\r\n        uint256 amountMinusPenalty = totalAmount.sub(penaltyAmount);\r\n        require(totalAmount >= penaltyAmount, 'TokenSpring: penalty amount exceeds amount being redeemed');\r\n\r\n        // just because we have penalties, does not mean we do not have rewards to pay out\r\n        if(rewardAmount > 0) {\r\n          // this unstake has no penalty, pay out the rewards\r\n          require(_unlockedPool.transfer(msg.sender, rewardAmount),\r\n              'TokenSpring: transfer out of unlocked pool failed');\r\n        }\r\n\r\n        // pay out the contract deposit amount minus any penalty\r\n        require(_stakingPool.transfer(msg.sender, amountMinusPenalty),\r\n            'TokenSpring: transfer out of staking pool failed');\r\n\r\n        if(penaltyAmount > 0){\r\n          // need to send penalty amount to the pool\r\n          require(_stakingPool.transfer(penaltyAddress, penaltyAmount),\r\n            'TokenSpring: transfer into staking pool failed');\r\n        }\r\n\r\n        emit Unstaked(msg.sender, amountMinusPenalty, totalStakedFor(msg.sender), penaltyAmount, \"\");\r\n        emit TokensClaimed(msg.sender, rewardAmount);\r\n\r\n        require(totalStakingShares == 0 || totalStaked() > 0,\r\n                \"TokenSpring: Error unstaking. Staking shares exist, but no staking tokens do\");\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\r\n     *      encourage long-term deposits instead of constant unstake/restakes.\r\n     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\r\n     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\r\n     * @param currentRewardTokens The current number of distribution tokens already alotted for this\r\n     *                            unstake op. Any bonuses are already applied.\r\n     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\r\n     *                            distribution tokens.\r\n     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\r\n     *                     the time-bonus.\r\n     * @return Updated amount of distribution tokens to award, with any bonus included on the\r\n     *         newly added tokens.\r\n     */\r\n    function computeNewReward(uint256 currentRewardTokens,\r\n                                uint256 stakingShareSeconds,\r\n                                uint256 stakeTimeSec) private view returns (uint256) {\r\n\r\n        uint256 newRewardTokens =\r\n            totalUnlocked()\r\n            .mul(stakingShareSeconds)\r\n            .div(_totalStakingShareSeconds);\r\n\r\n        if (stakeTimeSec >= bonusPeriodSec) {\r\n            return currentRewardTokens.add(newRewardTokens);\r\n        }\r\n\r\n        uint256 oneHundredPct = 10**BONUS_DECIMALS;\r\n        uint256 bonusedReward =\r\n            startBonus\r\n            .add(oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(bonusPeriodSec))\r\n            .mul(newRewardTokens)\r\n            .div(oneHundredPct);\r\n        return currentRewardTokens.add(bonusedReward);\r\n    }\r\n\r\n    /**\r\n     * @param addr The user to look up staking information for.\r\n     * @return The number of staking tokens deposited for addr.\r\n     */\r\n    function totalStakedFor(address addr) public view returns (uint256) {\r\n        return totalStakingShares > 0 ?\r\n            totalStaked().mul(_userTotals[addr].stakingShares).div(totalStakingShares) : 0;\r\n    }\r\n\r\n    /**\r\n     * @return The total number of deposit tokens staked globally, by all users.\r\n     */\r\n    function totalStaked() public view returns (uint256) {\r\n        return _stakingPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @dev Note that this application has a staking token as well as a distribution token, which\r\n     * may be different. This function is required by EIP-900.\r\n     * @return The deposit token used for staking.\r\n     */\r\n    function token() external view returns (address) {\r\n        return address(getStakingToken());\r\n    }\r\n\r\n    /**\r\n     * @dev An internally callable function to update the accounting state of the system with staking information.\r\n     *      Global state and state for the caller are updated.\r\n     * @return [0] balance of the locked pool\r\n     * @return [1] balance of the unlocked pool\r\n     * @return [2] caller's staking share seconds\r\n     * @return [3] global staking share seconds\r\n     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\r\n     * @return [5] block timestamp\r\n     */\r\n    function updateAccounting(uint256 timeForContract, uint256 amountForContract) internal returns (\r\n        uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\r\n        unlockTokens();\r\n\r\n        // Global accounting, should ONLY happen on new stake\r\n        uint256 newStakingShareSeconds =\r\n            timeForContract\r\n            .sub(now)\r\n            .mul(amountForContract);\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.add(newStakingShareSeconds);\r\n\r\n        // User Accounting, should ONLY happen on new stake\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        uint256 newUserStakingShareSeconds =\r\n            timeForContract\r\n            .sub(now)\r\n            .mul(amountForContract);\r\n        totals.stakingShareSeconds =\r\n            totals.stakingShareSeconds\r\n            .add(newUserStakingShareSeconds);\r\n\r\n        uint256 totalUserRewards = (_totalStakingShareSeconds > 0)\r\n            ? totalUnlocked().mul(totals.stakingShareSeconds).div(_totalStakingShareSeconds)\r\n            : 0;\r\n\r\n        return (\r\n            totalLocked(),\r\n            totalUnlocked(),\r\n            totals.stakingShareSeconds,\r\n            _totalStakingShareSeconds,\r\n            totalUserRewards,\r\n            now\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev A globally callable function to get the accounting state of the system.\r\n     * @return [0] balance of the locked pool\r\n     * @return [1] balance of the unlocked pool\r\n     * @return [2] caller's staking share seconds\r\n     * @return [3] global staking share seconds\r\n     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\r\n     * @return [5] block timestamp\r\n     */\r\n    function getAccounting() public returns (\r\n        uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\r\n        unlockTokens();\r\n\r\n        // User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n\r\n        uint256 totalUserRewards = (_totalStakingShareSeconds > 0)\r\n            ? totalUnlocked().mul(totals.stakingShareSeconds).div(_totalStakingShareSeconds)\r\n            : 0;\r\n\r\n        return (\r\n            totalLocked(),\r\n            totalUnlocked(),\r\n            totals.stakingShareSeconds,\r\n            _totalStakingShareSeconds,\r\n            totalUserRewards,\r\n            now\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev A globally callable function to get the staking contracts of an address.\r\n     * @return [0] contracts of the address\r\n     * @return [1] block timestamp\r\n     */\r\n    function getContractAtIndex(address addr, uint256 index) public view returns (uint256, uint256, uint256) {\r\n        // User Accounting\r\n        Stake[] storage accountStakes = _userStakes[addr];\r\n        uint256 stakingShares = 0;\r\n        uint256 timestampSec = 0;\r\n        uint256 lockTimestampSec = 0;\r\n\r\n        if(accountStakes.length > index){\r\n          Stake storage indexStake = accountStakes[index];\r\n          stakingShares = indexStake.stakingShares;\r\n          timestampSec = indexStake.timestampSec;\r\n          lockTimestampSec = indexStake.lockTimestampSec;\r\n        }\r\n\r\n        return (\r\n            stakingShares,\r\n            timestampSec,\r\n            lockTimestampSec\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return Total number of locked distribution tokens.\r\n     */\r\n    function totalLocked() public view returns (uint256) {\r\n        return _lockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return Total number of unlocked distribution tokens.\r\n     */\r\n    function totalUnlocked() public view returns (uint256) {\r\n        return _unlockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return Number of unlock schedules.\r\n     */\r\n    function unlockScheduleCount() public view returns (uint256) {\r\n        return unlockSchedules.length;\r\n    }\r\n\r\n    /**\r\n     * @dev This funcion allows the contract owner to add more locked distribution tokens, along\r\n     *      with the associated \"unlock schedule\". These locked tokens immediately begin unlocking\r\n     *      linearly over the duraction of durationSec timeframe.\r\n     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\r\n     * @param durationSec Length of time to linear unlock the tokens.\r\n     */\r\n    function lockTokens(uint256 amount, uint256 durationSec) external onlyOwner {\r\n        require(unlockSchedules.length < _maxUnlockSchedules,\r\n            'TokenSpring: reached maximum unlock schedules');\r\n\r\n        // Update lockedTokens amount before using it in computations after.\r\n        //updateAccounting();\r\n        unlockTokens();\r\n\r\n        uint256 lockedTokens = totalLocked();\r\n        uint256 mintedLockedShares = (lockedTokens > 0)\r\n            ? totalLockedShares.mul(amount).div(lockedTokens)\r\n            : amount.mul(_initialSharesPerToken);\r\n\r\n        UnlockSchedule memory schedule;\r\n        schedule.initialLockedShares = mintedLockedShares;\r\n        schedule.lastUnlockTimestampSec = now;\r\n        schedule.endAtSec = now.add(durationSec);\r\n        schedule.durationSec = durationSec;\r\n        unlockSchedules.push(schedule);\r\n\r\n        totalLockedShares = totalLockedShares.add(mintedLockedShares);\r\n\r\n        require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount),\r\n            'TokenSpring: transfer into locked pool failed');\r\n        emit TokensLocked(amount, durationSec, totalLocked());\r\n    }\r\n\r\n    /**\r\n     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\r\n     *      previously defined unlock schedules. Publicly callable.\r\n     * @return Number of newly unlocked distribution tokens.\r\n     */\r\n    function unlockTokens() public returns (uint256) {\r\n        uint256 unlockedTokens = 0;\r\n        uint256 lockedTokens = totalLocked();\r\n\r\n        if (totalLockedShares == 0) {\r\n            unlockedTokens = lockedTokens;\r\n        } else {\r\n            uint256 unlockedShares = 0;\r\n            for (uint256 s = 0; s < unlockSchedules.length; s++) {\r\n                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\r\n            }\r\n            unlockedTokens = unlockedShares.mul(lockedTokens).div(totalLockedShares);\r\n            totalLockedShares = totalLockedShares.sub(unlockedShares);\r\n        }\r\n\r\n        if (unlockedTokens > 0) {\r\n            require(_lockedPool.transfer(address(_unlockedPool), unlockedTokens),\r\n                'TokenSpring: transfer out of locked pool failed');\r\n            emit TokensUnlocked(unlockedTokens, totalLocked());\r\n        }\r\n\r\n        return unlockedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of unlockable shares from a given schedule. The returned value\r\n     *      depends on the time since the last unlock. This function updates schedule accounting,\r\n     *      but does not actually transfer any tokens.\r\n     * @param s Index of the unlock schedule.\r\n     * @return The number of unlocked shares.\r\n     */\r\n    function unlockScheduleShares(uint256 s) private returns (uint256) {\r\n        UnlockSchedule storage schedule = unlockSchedules[s];\r\n\r\n        if(schedule.unlockedShares >= schedule.initialLockedShares) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 sharesToUnlock = 0;\r\n        // Special case to handle any leftover dust from integer division\r\n        if (now >= schedule.endAtSec) {\r\n            sharesToUnlock = (schedule.initialLockedShares.sub(schedule.unlockedShares));\r\n            schedule.lastUnlockTimestampSec = schedule.endAtSec;\r\n        } else {\r\n            sharesToUnlock = now.sub(schedule.lastUnlockTimestampSec)\r\n                .mul(schedule.initialLockedShares)\r\n                .div(schedule.durationSec);\r\n            schedule.lastUnlockTimestampSec = now;\r\n        }\r\n\r\n        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\r\n        return sharesToUnlock;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unstakeAtIndexQuery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDistributionToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"penaltyAddress_\",\"type\":\"address\"}],\"name\":\"setPenaltyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccounting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstakeAtIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockSchedules\",\"outputs\":[{\"name\":\"initialLockedShares\",\"type\":\"uint256\"},{\"name\":\"unlockedShares\",\"type\":\"uint256\"},{\"name\":\"lastUnlockTimestampSec\",\"type\":\"uint256\"},{\"name\":\"endAtSec\",\"type\":\"uint256\"},{\"name\":\"durationSec\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stakeFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakingShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPeriodSec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockedShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeQuery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"durationSec\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxLockTimeSeconds_\",\"type\":\"uint256\"}],\"name\":\"setMaxLockTimeSeconds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getContractAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"penaltyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockScheduleCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLockTimeSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"stakingToken\",\"type\":\"address\"},{\"name\":\"distributionToken\",\"type\":\"address\"},{\"name\":\"maxUnlockSchedules\",\"type\":\"uint256\"},{\"name\":\"startBonus_\",\"type\":\"uint256\"},{\"name\":\"bonusPeriodSec_\",\"type\":\"uint256\"},{\"name\":\"initialSharesPerToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"penaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"durationSec\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"penaltyAddress_\",\"type\":\"address\"}],\"name\":\"LogPenaltyAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSpring","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000eaceac83cecca6beebc736edd6360d1633175b010000000000000000000000003936Ad01cf109a36489d93cabdA11cF062fd3d48000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000004f1a0000000000000000000000000000000000000000000000000000000000000f4240","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4d33dac0e1e5d92815f525dfab6aeb3d9b82f013eef4851be71b45fa06e7586e"}]}