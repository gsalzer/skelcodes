{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\n\ncontract EtherRich {\n     address public ownerWallet;\n     address payable balAdmin;\n      uint public currUserID = 0;\n      uint public pool1currUserID = 0;\n      uint public pool2currUserID = 0;\n      uint public pool3currUserID = 0;\n      uint public pool4currUserID = 0;\n      uint public pool5currUserID = 0;\n      uint public pool6currUserID = 0;\n      \n        uint public pool1activeUserID = 0;\n      uint public pool2activeUserID = 0;\n      uint public pool3activeUserID = 0;\n      uint public pool4activeUserID = 0;\n      uint public pool5activeUserID = 0;\n      uint public pool6activeUserID = 0;\n      \n      \n      uint public unlimited_level_price=0;\n     \n      struct UserStruct {\n        bool isExist;\n        uint id;\n        uint referrerID;\n       uint referredUsers;\n        mapping(uint => uint) levelExpired;\n    }\n    \n     struct PoolUserStruct {\n        bool isExist;\n        uint id;\n       uint payment_received; \n    }\n    \n    mapping (address => UserStruct) public users;\n     mapping (uint => address) public userList;\n     \n     mapping (address => PoolUserStruct) public pool1users;\n     mapping (uint => address) public pool1userList;\n     \n     mapping (address => PoolUserStruct) public pool2users;\n     mapping (uint => address) public pool2userList;\n     \n     mapping (address => PoolUserStruct) public pool3users;\n     mapping (uint => address) public pool3userList;\n     \n     mapping (address => PoolUserStruct) public pool4users;\n     mapping (uint => address) public pool4userList;\n     \n     mapping (address => PoolUserStruct) public pool5users;\n     mapping (uint => address) public pool5userList;\n     \n     mapping (address => PoolUserStruct) public pool6users;\n     mapping (uint => address) public pool6userList;\n     ////////////\n     //////////////\n    mapping(uint => uint) public LEVEL_PRICE;\n    \n   uint REGESTRATION_FESS=0.1 ether;\n   uint pool1_price=0.2 ether;\n   ///////////////////////////////\n   uint pool2_price=0.4 ether;\n   uint pool2_donation=0.04 ether;\n   ///////////////////////////////\n   uint pool3_price=1 ether;\n   uint pool3_donation=0.1 ether;\n   ///////////////////////////////\n   uint pool4_price=2.5 ether;\n   uint pool4_donation=0.2 ether;\n   ///////////////////////////////\n   uint pool5_price=5 ether;\n   uint pool5_donation=0.5 ether;\n   ///////////////////////////////\n   uint pool6_price=10 ether;\n   uint pool6_donation=0.1 ether;\n   ///////////////////////////////\n   \n     event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\n      event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\n      \n     event regPoolEntry(address indexed _user,uint _level,   uint _time);\n   \n     \n    event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);\n   \n    UserStruct[] public requests;\n     \n      constructor() public {\n          ownerWallet = 0x92E73829C8Fc6687C3b42d678B6fB074955709Ed;\n          balAdmin = 0x3fB0Dcb909c9334e6BF470C694ED74bB10c28BDd;\n\n        LEVEL_PRICE[1] = 0.01 ether;\n        LEVEL_PRICE[2] = 0.005 ether;\n        LEVEL_PRICE[3] = 0.0025 ether;\n        LEVEL_PRICE[4] = 0.00025 ether;\n      unlimited_level_price=0.00025 ether;\n\n        UserStruct memory userStruct;\n        currUserID++;\n\n        userStruct = UserStruct({\n            isExist: true,\n            id: currUserID,\n            referrerID: 0,\n            referredUsers:0\n           \n        });\n        \n        users[ownerWallet] = userStruct;\n       userList[currUserID] = ownerWallet;\n       \n       \n         PoolUserStruct memory pooluserStruct;\n        \n        pool1currUserID++;\n\n        pooluserStruct = PoolUserStruct({\n            isExist:true,\n            id:pool1currUserID,\n            payment_received:0\n        });\n    pool1activeUserID=pool1currUserID;\n       pool1users[ownerWallet] = pooluserStruct;\n       pool1userList[pool1currUserID]=ownerWallet;\n      \n        \n        pool2currUserID++;\n        pooluserStruct = PoolUserStruct({\n            isExist:true,\n            id:pool2currUserID,\n            payment_received:0\n        });\n    pool2activeUserID=pool2currUserID;\n       pool2users[ownerWallet] = pooluserStruct;\n       pool2userList[pool2currUserID]=ownerWallet;\n       \n       \n        pool3currUserID++;\n        pooluserStruct = PoolUserStruct({\n            isExist:true,\n            id:pool3currUserID,\n            payment_received:0\n        });\n    pool3activeUserID=pool3currUserID;\n       pool3users[ownerWallet] = pooluserStruct;\n       pool3userList[pool3currUserID]=ownerWallet;\n       \n       \n         pool4currUserID++;\n        pooluserStruct = PoolUserStruct({\n            isExist:true,\n            id:pool4currUserID,\n            payment_received:0\n        });\n    pool4activeUserID=pool4currUserID;\n       pool4users[ownerWallet] = pooluserStruct;\n       pool4userList[pool4currUserID]=ownerWallet;\n\n        \n          pool5currUserID++;\n        pooluserStruct = PoolUserStruct({\n            isExist:true,\n            id:pool5currUserID,\n            payment_received:0\n        });\n    pool5activeUserID=pool5currUserID;\n       pool5users[ownerWallet] = pooluserStruct;\n       pool5userList[pool5currUserID]=ownerWallet;\n       \n       \n         pool6currUserID++;\n        pooluserStruct = PoolUserStruct({\n            isExist:true,\n            id:pool6currUserID,\n            payment_received:0\n        });\n    pool6activeUserID=pool6currUserID;\n       pool6users[ownerWallet] = pooluserStruct;\n       pool6userList[pool6currUserID]=ownerWallet;\n       \n        \n     \n     \n       \n       \n      }\n     \n     function regUser(uint _referrerID) public payable {\n       \n      require(!users[msg.sender].isExist, \"User Exists\");\n      require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referral ID');\n        require(msg.value == REGESTRATION_FESS, 'Incorrect Value');\n       \n        UserStruct memory userStruct;\n        currUserID++;\n\n        userStruct = UserStruct({\n            isExist: true,\n            id: currUserID,\n            referrerID: _referrerID,\n            referredUsers:0\n        });\n        ////////////////////\n        ////////////////////\n    \n       users[msg.sender] = userStruct;\n       userList[currUserID]=msg.sender;\n       \n        users[userList[users[msg.sender].referrerID]].referredUsers=users[userList[users[msg.sender].referrerID]].referredUsers+1;\n        \n       payReferral(1,msg.sender);\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\n    }\n   \n   \n     function payReferral(uint _level, address _user) internal {\n        address referer;\n       \n        referer = userList[users[_user].referrerID];\n       \n       \n         bool sent = false;\n       \n            uint level_price_local=0;\n            if(_level>4){\n            level_price_local=unlimited_level_price;\n            }\n            else{\n            level_price_local=LEVEL_PRICE[_level];\n            }\n            sent = address(uint160(referer)).send(level_price_local);\n\n            if (sent) {\n                emit getMoneyForLevelEvent(referer, msg.sender, _level, now);\n                if(_level < 100 && users[referer].referrerID >= 1){\n                    payReferral(_level+1,referer);\n                }\n                else\n                {\n                    sendBalance();\n                }\n               \n            }\n       \n        if(!sent) {\n          //  emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);\n\n            payReferral(_level, referer);\n        }\n     }\n   \n   \n   \n   \n       function buyPool1() public payable {\n        require(users[msg.sender].isExist, \"User Not Registered\");\n        require(!pool1users[msg.sender].isExist, \"Already in AutoPool\");\n        require(users[msg.sender].referredUsers>=3, \"Must need 3 referral\");\n        require(msg.value == pool1_price, 'Incorrect Value');\n        \n       \n        PoolUserStruct memory userStruct;\n        address pool1Currentuser=pool1userList[pool1activeUserID];\n        \n        pool1currUserID++;\n\n        userStruct = PoolUserStruct({\n            isExist:true,\n            id:pool1currUserID,\n            payment_received:0\n        });\n   \n       pool1users[msg.sender] = userStruct;\n       pool1userList[pool1currUserID]=msg.sender;\n       bool sent = false;\n       sent = address(uint160(pool1Currentuser)).send(pool1_price);\n       \n\n            if (sent) {\n                pool1users[pool1Currentuser].payment_received+=1;\n                if(pool1users[pool1Currentuser].payment_received>=2)\n                {\n                    pool1activeUserID+=1;\n                }\n                emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);\n            }\n       emit regPoolEntry(msg.sender, 1, now);\n    }\n    \n    \n      function buyPool2() public payable {\n          require(users[msg.sender].isExist, \"User Not Registered\");\n      require(!pool2users[msg.sender].isExist, \"Already in AutoPool\");\n        require(msg.value == pool2_price+pool2_donation, 'Incorrect Value');\n        require(users[msg.sender].referredUsers>=3, \"Must need 3 referral\");\n         \n        PoolUserStruct memory userStruct;\n        address pool2Currentuser=pool2userList[pool2activeUserID];\n        \n        pool2currUserID++;\n        userStruct = PoolUserStruct({\n            isExist:true,\n            id:pool2currUserID,\n            payment_received:0\n        });\n       pool2users[msg.sender] = userStruct;\n       pool2userList[pool2currUserID]=msg.sender;\n       \n       \n       \n       bool sent = false;\n       sent = address(uint160(pool2Currentuser)).send(pool2_price);\n        balAdmin.transfer(pool2_donation);\n            if (sent) {\n                pool2users[pool2Currentuser].payment_received+=1;\n                if(pool2users[pool2Currentuser].payment_received>=3)\n                {\n                    pool2activeUserID+=1;\n                }\n                emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);\n            }\n            emit regPoolEntry(msg.sender,2,  now);\n    }\n    \n    \n     function buyPool3() public payable {\n         require(users[msg.sender].isExist, \"User Not Registered\");\n      require(!pool3users[msg.sender].isExist, \"Already in AutoPool\");\n        require(msg.value == pool3_price+pool3_donation, 'Incorrect Value');\n        require(users[msg.sender].referredUsers>=3, \"Must need 3 referral\");\n        \n        PoolUserStruct memory userStruct;\n        address pool3Currentuser=pool3userList[pool3activeUserID];\n        \n        pool3currUserID++;\n        userStruct = PoolUserStruct({\n            isExist:true,\n            id:pool3currUserID,\n            payment_received:0\n        });\n       pool3users[msg.sender] = userStruct;\n       pool3userList[pool3currUserID]=msg.sender;\n       bool sent = false;\n       sent = address(uint160(pool3Currentuser)).send(pool3_price);\n        balAdmin.transfer(pool3_donation);\n            if (sent) {\n                pool3users[pool3Currentuser].payment_received+=1;\n                if(pool3users[pool3Currentuser].payment_received>=3)\n                {\n                    pool3activeUserID+=1;\n                }\n                emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);\n            }\nemit regPoolEntry(msg.sender,3,  now);\n    }\n    \n    \n    function buyPool4() public payable {\n        require(users[msg.sender].isExist, \"User Not Registered\");\n      require(!pool4users[msg.sender].isExist, \"Already in AutoPool\");\n        require(msg.value == pool4_price+pool4_donation, 'Incorrect Value');\n        require(users[msg.sender].referredUsers>=3, \"Must need 3 referral\");\n      \n        PoolUserStruct memory userStruct;\n        address pool4Currentuser=pool4userList[pool4activeUserID];\n        \n        pool4currUserID++;\n        userStruct = PoolUserStruct({\n            isExist:true,\n            id:pool4currUserID,\n            payment_received:0\n        });\n       pool4users[msg.sender] = userStruct;\n       pool4userList[pool4currUserID]=msg.sender;\n       bool sent = false;\n       sent = address(uint160(pool4Currentuser)).send(pool4_price);\n        balAdmin.transfer(pool4_donation);\n            if (sent) {\n                pool4users[pool4Currentuser].payment_received+=1;\n                if(pool4users[pool4Currentuser].payment_received>=3)\n                {\n                    pool4activeUserID+=1;\n                }\n                 emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);\n            }\n        emit regPoolEntry(msg.sender,4, now);\n    }\n    \n    \n    \n    function buyPool5() public payable {\n        require(users[msg.sender].isExist, \"User Not Registered\");\n      require(!pool5users[msg.sender].isExist, \"Already in AutoPool\");\n        require(msg.value == pool5_price+pool5_donation, 'Incorrect Value');\n        require(users[msg.sender].referredUsers>=4, \"Must need 4 referral\");\n        \n        PoolUserStruct memory userStruct;\n        address pool5Currentuser=pool5userList[pool5activeUserID];\n        \n        pool5currUserID++;\n        userStruct = PoolUserStruct({\n            isExist:true,\n            id:pool5currUserID,\n            payment_received:0\n        });\n       pool5users[msg.sender] = userStruct;\n       pool5userList[pool5currUserID]=msg.sender;\n       bool sent = false;\n       sent = address(uint160(pool5Currentuser)).send(pool5_price);\n        balAdmin.transfer(pool5_donation);\n            if (sent) {\n                pool5users[pool5Currentuser].payment_received+=1;\n                if(pool5users[pool5Currentuser].payment_received>=3)\n                {\n                    pool5activeUserID+=1;\n                }\n                 emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);\n            }\n        emit regPoolEntry(msg.sender,5,  now);\n    }\n    \n    function buyPool6() public payable {\n      require(!pool6users[msg.sender].isExist, \"Already in AutoPool\");\n        require(msg.value == pool6_price+pool6_donation, 'Incorrect Value');\n        require(users[msg.sender].referredUsers>=5, \"Must need 5 referral\");\n        \n        PoolUserStruct memory userStruct;\n        address pool6Currentuser=pool6userList[pool6activeUserID];\n        \n        pool6currUserID++;\n        userStruct = PoolUserStruct({\n            isExist:true,\n            id:pool6currUserID,\n            payment_received:0\n        });\n       pool6users[msg.sender] = userStruct;\n       pool6userList[pool6currUserID]=msg.sender;\n       bool sent = false;\n       sent = address(uint160(pool6Currentuser)).send(pool6_price);\n        balAdmin.transfer(pool6_donation);\n            if (sent) {\n                pool6users[pool6Currentuser].payment_received+=1;\n                if(pool6users[pool6Currentuser].payment_received>=3)\n                {\n                    pool6activeUserID+=1;\n                }\n                 emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);\n            }\n        emit regPoolEntry(msg.sender,6,  now);\n    }\n    \n    \n    \n    function getEthBalance() public view returns(uint) {\n    return address(this).balance;\n    }\n    \n    function sendBalance() private\n    {\n         if (!address(uint160(balAdmin)).send(getEthBalance()))\n         {\n             \n         }\n    }\n   \n   \n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"buyPool1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool5currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool5users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool3userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool1userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool1users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool4\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool5activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool4userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool4activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool6users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool3users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlimited_level_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool2userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool4users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool6userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool2users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool4currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool6\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool3\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool5userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool6currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool5\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool6activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regPoolEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPoolPayment\",\"type\":\"event\"}]","ContractName":"EtherRich","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}