{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0 <=0.7.0;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(\r\n            msg.sender == nominatedOwner,\r\n            \"You must be nominated before you can accept ownership\"\r\n        );\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner may perform this action\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\ncontract WhiteList is Owned {\r\n    /// @notice Users with permissions\r\n    mapping(address => uint256) public whiter;\r\n\r\n    /// @notice Append address into whiteList successevent\r\n    event AppendWhiter(address adder);\r\n\r\n    /// @notice Remove address into whiteList successevent\r\n    event RemoveWhiter(address remover);\r\n\r\n    /**\r\n     * @notice Construct a new WhiteList, default owner in whiteList\r\n     */\r\n    constructor() internal {\r\n        appendWhiter(owner);\r\n    }\r\n\r\n    modifier onlyWhiter() {\r\n        require(isWhiter(), \"WhiteList: msg.sender not in whilteList.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only onwer can append address into whitelist\r\n     * @param account The address not added, can added to the whitelist\r\n     */\r\n    function appendWhiter(address account) public onlyOwner {\r\n        require(account != address(0), \"WhiteList: address not zero\");\r\n        require(\r\n            !isWhiter(account),\r\n            \"WhiteListe: the account exsit whilteList yet\"\r\n        );\r\n        whiter[account] = 1;\r\n        emit AppendWhiter(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Only onwer can remove address into whitelist\r\n     * @param account The address in whitelist yet\r\n     */\r\n    function removeWhiter(address account) public onlyOwner {\r\n        require(\r\n            isWhiter(account),\r\n            \"WhiteListe: the account not exist whilteList\"\r\n        );\r\n        delete whiter[account];\r\n        emit RemoveWhiter(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether acccount in whitelist\r\n     * @param account Any address\r\n     */\r\n    function isWhiter(address account) public view returns (bool) {\r\n        return whiter[account] == 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether msg.sender in whitelist overrides.\r\n     */\r\n    function isWhiter() public view returns (bool) {\r\n        return isWhiter(msg.sender);\r\n    }\r\n}\r\n\r\n\r\ninterface ITokenStake {\r\n    function updateIndex() external;\r\n}\r\n\r\ncontract Esm is Owned, WhiteList {\r\n    /// @notice Access stake pause\r\n    uint256 public stakeLive = 1;\r\n    /// @notice Access redeem pause\r\n    uint256 public redeemLive = 1;\r\n    /// @notice System closed time\r\n    uint256 public time;\r\n    /// @notice TokenStake for updating on closed\r\n    ITokenStake public tokenStake;\r\n\r\n    /// @notice System closed yet event\r\n    event ShutDown(uint256 blocknumber, uint256 time);\r\n\r\n    /**\r\n     * @notice Construct a new Esm\r\n     */\r\n    constructor() public Owned(msg.sender) {}\r\n\r\n    /**\r\n     * @notice Set with tokenStake\r\n     * @param _tokenStake Address of tokenStake\r\n     */\r\n    function setupTokenStake(address _tokenStake) public onlyWhiter {\r\n        tokenStake = ITokenStake(_tokenStake);\r\n    }\r\n\r\n    /**\r\n     * @notice Open stake, if stake pasued\r\n     */\r\n    function openStake() external onlyWhiter {\r\n        stakeLive = 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Paused stake, if stake opened\r\n     */\r\n    function pauseStake() external onlyWhiter {\r\n        stakeLive = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Open redeem, if redeem paused\r\n     */\r\n    function openRedeem() external onlyWhiter {\r\n        redeemLive = 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Pause redeem, if redeem opened\r\n     */\r\n    function pauseRedeem() external onlyWhiter {\r\n        redeemLive = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Status of staking\r\n     */\r\n    function isStakePaused() external view returns (bool) {\r\n        return stakeLive == 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Status of redeem\r\n     */\r\n    function isRedeemPaused() external view returns (bool) {\r\n        return redeemLive == 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Status of closing-sys\r\n     */\r\n    function isClosed() external view returns (bool) {\r\n        return time > 0;\r\n    }\r\n\r\n    /**\r\n     * @notice If anything error, project manager can shutdown it\r\n     *         anybody cant stake, but can redeem\r\n     */\r\n    function shutdown() external onlyWhiter {\r\n        require(time == 0, \"System closed yet.\");\r\n        tokenStake.updateIndex();\r\n        time = block.timestamp;\r\n        emit ShutDown(block.number, time);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adder\",\"type\":\"address\"}],\"name\":\"AppendWhiter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remover\",\"type\":\"address\"}],\"name\":\"RemoveWhiter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ShutDown\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"appendWhiter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRedeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStakePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWhiter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemLive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhiter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenStake\",\"type\":\"address\"}],\"name\":\"setupTokenStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeLive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenStake\",\"outputs\":[{\"internalType\":\"contract ITokenStake\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Esm","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a9a11438cfa75313a7b29dfa165c675a8e0badaead37563a6a52ac45923b0bbf"}]}